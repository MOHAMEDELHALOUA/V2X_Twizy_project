/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body - STM32 to ESP32 UART Communication with Item Struct
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdbool.h>
#include <stdio.h>
#include <string.h>
#include "queue.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef struct {
    unsigned int value;
    uint8_t MacAddress[6];
} __attribute__((packed)) Item;  // Ensure consistent packing

volatile Item receivedData;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define UART_TIMEOUT_MS 1000
#define UART_TX_INTERVAL 2000   // 2 seconds transmission interval
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

UART_HandleTypeDef hlpuart1;

/* Definitions for SenderTask */
osThreadId_t SenderTaskHandle;
const osThreadAttr_t SenderTask_attributes = {
  .name = "SenderTask",
  .priority = (osPriority_t) osPriorityNormal,
  .stack_size = 128 * 4
};
/* Definitions for TskUART */
osThreadId_t TskUARTHandle;
const osThreadAttr_t TskUART_attributes = {
  .name = "TskUART",
  .priority = (osPriority_t) osPriorityLow,
  .stack_size = 128 * 4
};
/* USER CODE BEGIN PV */
uint32_t uart_timeout_counter = 0;
uint32_t message_counter = 0;
uint32_t last_tx_time = 0;

// Define the queue:
xQueueHandle UARTQueue;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void PeriphCommonClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_LPUART1_UART_Init(void);
void StartSenderTask(void *argument);
void StartTskUART(void *argument);

/* USER CODE BEGIN PFP */
uint8_t ValidateReceivedData(Item *data);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Function to validate received data
uint8_t ValidateReceivedData(Item *data) {
    // Check if at least one byte of MAC address is non-zero
    for (int i = 0; i < 6; i++) {
        if (data->MacAddress[i] != 0) {
            return 1;
        }
    }
    return 0;
}

// Custom printf implementation for debugging
int _write(int file, char *ptr, int len)
{
    (void)file;
    HAL_UART_Transmit(&hlpuart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
    return len;
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_LPUART1_UART_Init();
  /* USER CODE BEGIN 2 */
  printf("STM32 will start receiving Item struct data via UART...\n");
  last_tx_time = HAL_GetTick();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();

  /* USER CODE BEGIN RTOS_MUTEX */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  UARTQueue = xQueueCreate(10, sizeof(Item));  // Increased queue size
  if (UARTQueue == NULL) {
      Error_Handler(); // Handle queue creation failure
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of SenderTask */
  SenderTaskHandle = osThreadNew(StartSenderTask, NULL, &SenderTask_attributes);

  /* creation of TskUART */
  TskUARTHandle = osThreadNew(StartTskUART, NULL, &TskUART_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
  BSP_LED_Init(LED_GREEN);
  BSP_LED_Init(LED_RED);

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/* ... (System configuration functions remain the same) ... */

/* USER CODE BEGIN Header_StartSenderTask */
/**
  * @brief  Function implementing the SenderTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSenderTask */
void StartSenderTask(void *argument)
{
  /* USER CODE BEGIN 5 */
  Item itemToSend;
  Item receivedItem;

  /* Infinite loop */
  for(;;)
  {
    // Check if we have received data to process
    if (xQueueReceive(UARTQueue, &receivedItem, 0) == pdTRUE) {
      printf("Received from ESP32 - Value: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
             receivedItem.value,
             receivedItem.MacAddress[0], receivedItem.MacAddress[1], receivedItem.MacAddress[2],
             receivedItem.MacAddress[3], receivedItem.MacAddress[4], receivedItem.MacAddress[5]);

      BSP_LED_Toggle(LED_GREEN);
    }

    // Send data to ESP32 periodically
    uint32_t current_time = HAL_GetTick();
    if (current_time - last_tx_time >= UART_TX_INTERVAL) {
      // Prepare data to send
      itemToSend.value = ++message_counter;
      uint8_t stm32_mac[6] = {0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF}; // Dummy STM32 MAC
      memcpy(itemToSend.MacAddress, stm32_mac, 6);

      // Send struct data
      HAL_StatusTypeDef status = HAL_UART_Transmit(&hlpuart1, (uint8_t*)&itemToSend, sizeof(Item), 1000);

      if (status == HAL_OK) {
        printf("Sent to ESP32 - Value: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
               itemToSend.value,
               itemToSend.MacAddress[0], itemToSend.MacAddress[1], itemToSend.MacAddress[2],
               itemToSend.MacAddress[3], itemToSend.MacAddress[4], itemToSend.MacAddress[5]);
        BSP_LED_Toggle(LED_BLUE);
      } else {
        printf("Failed to send data to ESP32\n");
        BSP_LED_Toggle(LED_RED);
      }

      last_tx_time = current_time;
    }

    osDelay(100);
  }
  /* USER CODE END 5 */
}

/* USER CODE BEGIN Header_StartTskUART */
/**
* @brief Function implementing the TskUART thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTskUART */
void StartTskUART(void *argument)
{
  /* USER CODE BEGIN StartTskUART */
  /* Infinite loop */
  for(;;)
  {
    // Receive Item struct data from ESP32
    HAL_StatusTypeDef status = HAL_UART_Receive(&hlpuart1, (uint8_t *)&receivedData, sizeof(Item), UART_TIMEOUT_MS);

    if (status == HAL_OK) {
      uart_timeout_counter = 0;

      // Validate received data
      if (ValidateReceivedData((Item*)&receivedData)) {
        // Send valid data to queue
        if (xQueueSend(UARTQueue, &receivedData, 0) != pdTRUE) {
          printf("Queue full - message dropped\n");
        }
      } else {
        printf("UART Warning - Received corrupted data with invalid MAC\n");
      }
    }
    else if (status == HAL_TIMEOUT) {
      uart_timeout_counter++;
      if (uart_timeout_counter % 100 == 0) {  // Reduced frequency of timeout messages
        printf("UART Waiting for data... (%lu)\n", uart_timeout_counter);
      }
    }
    else {
      printf("UART Error: %d, resetting...\n", status);
      HAL_UART_DeInit(&hlpuart1);
      osDelay(10);
      MX_LPUART1_UART_Init();
      uart_timeout_counter = 0;
    }

    osDelay(10); // Small delay
  }
  /* USER CODE END StartTskUART */
}

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM2 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
  {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
