/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body - STM32 to ESP32 UART Communication
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdbool.h>
#include <stdio.h>
#include <string.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef struct{
    uint8_t data[64];
    uint16_t length;
} UARTMessage;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define UART_RX_BUFFER_SIZE 63  // Leave room for null terminator
#define UART_TX_INTERVAL 2000   // 2 seconds to match ESP32
/* USER CODE END PD */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef hlpuart1;

/* RTOS Task Handles */
osThreadId_t UART_RX_TaskHandle;
osThreadId_t UART_TX_TaskHandle;
osMessageQueueId_t UART_RXQueueHandle;

/* Task Attributes */
const osThreadAttr_t UART_RX_Task_attributes = {
  .name = "UART_RX_Task",
  .priority = (osPriority_t) osPriorityHigh,
  .stack_size = 256 * 4
};

const osThreadAttr_t UART_TX_Task_attributes = {
  .name = "UART_TX_Task",
  .priority = (osPriority_t) osPriorityNormal,
  .stack_size = 128 * 4
};

/* USER CODE BEGIN PV */
// Global variables for UART communication
UARTMessage RX_Buffer, TX_Buffer;
volatile bool tx_ready = true;
volatile bool rx_error = false;
uint32_t message_counter = 0;
uint32_t last_tx_time = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void PeriphCommonClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_LPUART1_UART_Init(void);
void StartUART_RX_Task(void *argument);
void StartUART_TX_Task(void *argument);

/* USER CODE BEGIN PFP */
void UART_Start_Receive(void);
void LED_Toggle(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
// Simple LED toggle function (replace with your LED implementation)
void LED_Toggle(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
}

// UART TX Complete Callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
    if (huart->Instance == LPUART1) {
        tx_ready = true;
        printf("TX Complete: %s", TX_Buffer.data);
    }
}

// UART RX Complete Callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    if (huart->Instance == LPUART1) {
        // Ensure null termination
        RX_Buffer.data[UART_RX_BUFFER_SIZE] = '\0';
        RX_Buffer.length = strlen((char*)RX_Buffer.data);

        printf("RX Data: %s\r\n", RX_Buffer.data);

        // Send to queue (non-blocking from ISR)
        if (osMessageQueuePut(UART_RXQueueHandle, &RX_Buffer, 0, 0) != osOK) {
            printf("Queue full - message dropped\r\n");
        }

        // Start next receive
        UART_Start_Receive();
    }
}

// UART Error Callback
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
    if (huart->Instance == LPUART1) {
        rx_error = true;
        printf("UART Error: 0x%08lX\r\n", huart->ErrorCode);

        // Clear error and restart reception
        __HAL_UART_CLEAR_OREFLAG(huart);
        __HAL_UART_CLEAR_NEFLAG(huart);
        __HAL_UART_CLEAR_FEFLAG(huart);

        UART_Start_Receive();
    }
}

// Start UART reception
void UART_Start_Receive(void)
{
    memset(RX_Buffer.data, 0, sizeof(RX_Buffer.data));
    if (HAL_UART_Receive_IT(&hlpuart1, RX_Buffer.data, UART_RX_BUFFER_SIZE) != HAL_OK) {
        printf("Failed to start UART RX\r\n");
        rx_error = true;
    }
}

// Custom printf implementation for debugging
int _write(int file, char *ptr, int len)
{
    (void)file;
    for (int i = 0; i < len; i++) {
        ITM_SendChar(*ptr++);
    }
    return len;
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
  // Initialize data structures
  memset(&RX_Buffer, 0, sizeof(RX_Buffer));
  memset(&TX_Buffer, 0, sizeof(TX_Buffer));
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
  SystemClock_Config();
  PeriphCommonClock_Config();

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_LPUART1_UART_Init();

  /* USER CODE BEGIN 2 */
  printf("STM32 UART Communication Started\r\n");
  last_tx_time = HAL_GetTick();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();

  /* USER CODE BEGIN RTOS_QUEUES */
  UART_RXQueueHandle = osMessageQueueNew(8, sizeof(UARTMessage), NULL);
  if (UART_RXQueueHandle == NULL) {
      Error_Handler();
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  UART_RX_TaskHandle = osThreadNew(StartUART_RX_Task, NULL, &UART_RX_Task_attributes);
  UART_TX_TaskHandle = osThreadNew(StartUART_TX_Task, NULL, &UART_TX_Task_attributes);

  /* USER CODE BEGIN 2 */
  // Start initial UART reception
  UART_Start_Receive();
  /* USER CODE END 2 */

  /* Start scheduler */
  osKernelStart();

  /* We should never get here */
  while (1) {
  }
}

/* USER CODE BEGIN 4 */
/**
  * @brief  Function implementing the UART_RX_Task thread.
  * @param  argument: Not used
  * @retval None
  */
void StartUART_RX_Task(void *argument)
{
    UARTMessage receivedMsg;
    osStatus_t status;

    printf("UART RX Task Started\r\n");

    for(;;)
    {
        // Wait for data from queue
        status = osMessageQueueGet(UART_RXQueueHandle, &receivedMsg, NULL, osWaitForever);

        if (status == osOK) {
            printf("Processing: %s (Length: %d)\r\n", receivedMsg.data, receivedMsg.length);

            // Process the received data here
            // Example: Parse commands, store data, etc.

            // Indicate successful processing
            // LED_Toggle(GPIOB, GPIO_PIN_0); // Adjust GPIO as needed
        }

        // Handle RX errors
        if (rx_error) {
            printf("Recovering from RX error\r\n");
            rx_error = false;
            osDelay(100);
        }
    }
}

/**
* @brief Function implementing the UART_TX_Task thread.
* @param argument: Not used
* @retval None
*/
void StartUART_TX_Task(void *argument)
{
    printf("UART TX Task Started\r\n");

    for(;;)
    {
        // Send message every UART_TX_INTERVAL ms
        if (tx_ready && (HAL_GetTick() - last_tx_time) >= UART_TX_INTERVAL) {

            // Prepare message
            snprintf((char*)TX_Buffer.data, sizeof(TX_Buffer.data),
                    "STM32 Message #%lu: Hello ESP32!\r\n", ++message_counter);
            TX_Buffer.length = strlen((char*)TX_Buffer.data);

            // Transmit message
            if (HAL_UART_Transmit_IT(&hlpuart1, TX_Buffer.data, TX_Buffer.length) == HAL_OK) {
                tx_ready = false;
                last_tx_time = HAL_GetTick();
                // LED_Toggle(GPIOB, GPIO_PIN_1); // Adjust GPIO as needed
            } else {
                printf("Failed to start UART TX\r\n");
            }
        }

        osDelay(50); // Small delay to prevent busy waiting
    }
}
/* USER CODE END 4 */

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
  hlpuart1.Instance = LPUART1;
  hlpuart1.Init.BaudRate = 115200;
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pin : STLINK_RX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
  HAL_GPIO_Init(STLINK_RX_GPIO_Port, &GPIO_InitStruct);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if (htim->Instance == TIM2)
  {
    HAL_IncTick();
  }
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  __disable_irq();
  while (1)
  {
  }
}

#ifdef  USE_FULL_ASSERT
void assert_failed(uint8_t *file, uint32_t line)
{
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
}
#endif /* USE_FULL_ASSERT */
