
V2X_OBU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f90  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080040d0  080040d0  000050d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800421c  0800421c  0000521c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004224  08004224  00005224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08004228  08004228  00005228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000068  20000008  0800422c  00006008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001d4  20000070  08004294  00006070  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000244  08004294  00006244  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000b9b5  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002004  00000000  00000000  00011a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001150  00000000  00000000  00013a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000cf3  00000000  00000000  00014bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000226f9  00000000  00000000  000158a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000cf38  00000000  00000000  00037f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d9e3b  00000000  00000000  00044ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0011ed0f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004e70  00000000  00000000  0011ed54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  00123bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	080040b8 	.word	0x080040b8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	080040b8 	.word	0x080040b8

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000228:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800022c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000230:	f003 0301 	and.w	r3, r3, #1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d013      	beq.n	8000260 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000238:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800023c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000240:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000244:	2b00      	cmp	r3, #0
 8000246:	d00b      	beq.n	8000260 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000248:	e000      	b.n	800024c <ITM_SendChar+0x2c>
    {
      __NOP();
 800024a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800024c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d0f9      	beq.n	800024a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000256:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800025a:	687a      	ldr	r2, [r7, #4]
 800025c:	b2d2      	uxtb	r2, r2
 800025e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000260:	687b      	ldr	r3, [r7, #4]
}
 8000262:	4618      	mov	r0, r3
 8000264:	370c      	adds	r7, #12
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr

0800026e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800026e:	b480      	push	{r7}
 8000270:	b085      	sub	sp, #20
 8000272:	af00      	add	r7, sp, #0
 8000274:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000276:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800027a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800027c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	4313      	orrs	r3, r2
 8000284:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000286:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800028a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	4013      	ands	r3, r2
 8000290:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000292:	68fb      	ldr	r3, [r7, #12]
}
 8000294:	bf00      	nop
 8000296:	3714      	adds	r7, #20
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr

080002a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	char* msg = "\r\nLoop:\r\n";
 80002a6:	4b1d      	ldr	r3, [pc, #116]	@ (800031c <main+0x7c>)
 80002a8:	607b      	str	r3, [r7, #4]
	uint8_t tx_data = 'A';
 80002aa:	2341      	movs	r3, #65	@ 0x41
 80002ac:	70bb      	strb	r3, [r7, #2]
	uint8_t rx_data = 'B';
 80002ae:	2342      	movs	r3, #66	@ 0x42
 80002b0:	707b      	strb	r3, [r7, #1]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b2:	f000 fb0f 	bl	80008d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b6:	f000 f83d 	bl	8000334 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80002ba:	f000 f893 	bl	80003e4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002be:	f000 f8e9 	bl	8000494 <MX_GPIO_Init>
  MX_SPI1_Init();
 80002c2:	f000 f8ad 	bl	8000420 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin (GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80002c6:	2200      	movs	r2, #0
 80002c8:	2110      	movs	r1, #16
 80002ca:	4815      	ldr	r0, [pc, #84]	@ (8000320 <main+0x80>)
 80002cc:	f000 fe00 	bl	8000ed0 <HAL_GPIO_WritePin>

  /* Send or receive something to the ESP32*/
  printf("STM32 msg: %s | tx_data: %c | rx_data: %c\r\n", msg, tx_data, rx_data);
 80002d0:	78bb      	ldrb	r3, [r7, #2]
 80002d2:	461a      	mov	r2, r3
 80002d4:	787b      	ldrb	r3, [r7, #1]
 80002d6:	6879      	ldr	r1, [r7, #4]
 80002d8:	4812      	ldr	r0, [pc, #72]	@ (8000324 <main+0x84>)
 80002da:	f003 f881 	bl	80033e0 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    HAL_Delay(1);
 80002de:	2001      	movs	r0, #1
 80002e0:	f000 fb7e 	bl	80009e0 <HAL_Delay>
	    HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(&hspi1, &tx_data, &rx_data, 1, HAL_MAX_DELAY);
 80002e4:	1c7a      	adds	r2, r7, #1
 80002e6:	1cb9      	adds	r1, r7, #2
 80002e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80002ec:	9300      	str	r3, [sp, #0]
 80002ee:	2301      	movs	r3, #1
 80002f0:	480d      	ldr	r0, [pc, #52]	@ (8000328 <main+0x88>)
 80002f2:	f002 fc30 	bl	8002b56 <HAL_SPI_TransmitReceive>
 80002f6:	4603      	mov	r3, r0
 80002f8:	70fb      	strb	r3, [r7, #3]
	    // Check if transaction was successful
	    if (status == HAL_OK) {
 80002fa:	78fb      	ldrb	r3, [r7, #3]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d107      	bne.n	8000310 <main+0x70>
	        printf("SPI OK - Sent: %c, Received: %c\r\n", tx_data, rx_data);
 8000300:	78bb      	ldrb	r3, [r7, #2]
 8000302:	4619      	mov	r1, r3
 8000304:	787b      	ldrb	r3, [r7, #1]
 8000306:	461a      	mov	r2, r3
 8000308:	4808      	ldr	r0, [pc, #32]	@ (800032c <main+0x8c>)
 800030a:	f003 f869 	bl	80033e0 <iprintf>
 800030e:	e7e6      	b.n	80002de <main+0x3e>
	    } else {
	        printf("SPI Error: %d\r\n", status);
 8000310:	78fb      	ldrb	r3, [r7, #3]
 8000312:	4619      	mov	r1, r3
 8000314:	4806      	ldr	r0, [pc, #24]	@ (8000330 <main+0x90>)
 8000316:	f003 f863 	bl	80033e0 <iprintf>
  {
 800031a:	e7e0      	b.n	80002de <main+0x3e>
 800031c:	080040d0 	.word	0x080040d0
 8000320:	48000400 	.word	0x48000400
 8000324:	080040dc 	.word	0x080040dc
 8000328:	2000008c 	.word	0x2000008c
 800032c:	08004108 	.word	0x08004108
 8000330:	0800412c 	.word	0x0800412c

08000334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b09a      	sub	sp, #104	@ 0x68
 8000338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033a:	f107 0320 	add.w	r3, r7, #32
 800033e:	2248      	movs	r2, #72	@ 0x48
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f003 f8a1 	bl	800348a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]
 8000354:	611a      	str	r2, [r3, #16]
 8000356:	615a      	str	r2, [r3, #20]
 8000358:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800035a:	4b21      	ldr	r3, [pc, #132]	@ (80003e0 <SystemClock_Config+0xac>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000362:	4a1f      	ldr	r2, [pc, #124]	@ (80003e0 <SystemClock_Config+0xac>)
 8000364:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000368:	6013      	str	r3, [r2, #0]
 800036a:	4b1d      	ldr	r3, [pc, #116]	@ (80003e0 <SystemClock_Config+0xac>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000372:	603b      	str	r3, [r7, #0]
 8000374:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000376:	2322      	movs	r3, #34	@ 0x22
 8000378:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800037a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800037e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000380:	2301      	movs	r3, #1
 8000382:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000384:	2340      	movs	r3, #64	@ 0x40
 8000386:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000388:	2300      	movs	r3, #0
 800038a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 800038c:	23a0      	movs	r3, #160	@ 0xa0
 800038e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000390:	2300      	movs	r3, #0
 8000392:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000394:	f107 0320 	add.w	r3, r7, #32
 8000398:	4618      	mov	r0, r3
 800039a:	f001 f92d 	bl	80015f8 <HAL_RCC_OscConfig>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80003a4:	f000 f8e4 	bl	8000570 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80003a8:	236f      	movs	r3, #111	@ 0x6f
 80003aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80003ac:	2300      	movs	r3, #0
 80003ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80003bc:	2300      	movs	r3, #0
 80003be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80003c0:	2300      	movs	r3, #0
 80003c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	2101      	movs	r1, #1
 80003c8:	4618      	mov	r0, r3
 80003ca:	f001 fc89 	bl	8001ce0 <HAL_RCC_ClockConfig>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80003d4:	f000 f8cc 	bl	8000570 <Error_Handler>
  }
}
 80003d8:	bf00      	nop
 80003da:	3768      	adds	r7, #104	@ 0x68
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	58000400 	.word	0x58000400

080003e4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b094      	sub	sp, #80	@ 0x50
 80003e8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80003ea:	463b      	mov	r3, r7
 80003ec:	2250      	movs	r2, #80	@ 0x50
 80003ee:	2100      	movs	r1, #0
 80003f0:	4618      	mov	r0, r3
 80003f2:	f003 f84a 	bl	800348a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80003f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003fa:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80003fc:	2300      	movs	r3, #0
 80003fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000400:	2300      	movs	r3, #0
 8000402:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000404:	463b      	mov	r3, r7
 8000406:	4618      	mov	r0, r3
 8000408:	f002 f87b 	bl	8002502 <HAL_RCCEx_PeriphCLKConfig>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000412:	f000 f8ad 	bl	8000570 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000416:	bf00      	nop
 8000418:	3750      	adds	r7, #80	@ 0x50
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
	...

08000420 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000424:	4b19      	ldr	r3, [pc, #100]	@ (800048c <MX_SPI1_Init+0x6c>)
 8000426:	4a1a      	ldr	r2, [pc, #104]	@ (8000490 <MX_SPI1_Init+0x70>)
 8000428:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800042a:	4b18      	ldr	r3, [pc, #96]	@ (800048c <MX_SPI1_Init+0x6c>)
 800042c:	2200      	movs	r2, #0
 800042e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000430:	4b16      	ldr	r3, [pc, #88]	@ (800048c <MX_SPI1_Init+0x6c>)
 8000432:	2200      	movs	r2, #0
 8000434:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000436:	4b15      	ldr	r3, [pc, #84]	@ (800048c <MX_SPI1_Init+0x6c>)
 8000438:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800043c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800043e:	4b13      	ldr	r3, [pc, #76]	@ (800048c <MX_SPI1_Init+0x6c>)
 8000440:	2200      	movs	r2, #0
 8000442:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000444:	4b11      	ldr	r3, [pc, #68]	@ (800048c <MX_SPI1_Init+0x6c>)
 8000446:	2200      	movs	r2, #0
 8000448:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800044a:	4b10      	ldr	r3, [pc, #64]	@ (800048c <MX_SPI1_Init+0x6c>)
 800044c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000450:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000452:	4b0e      	ldr	r3, [pc, #56]	@ (800048c <MX_SPI1_Init+0x6c>)
 8000454:	2200      	movs	r2, #0
 8000456:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000458:	4b0c      	ldr	r3, [pc, #48]	@ (800048c <MX_SPI1_Init+0x6c>)
 800045a:	2200      	movs	r2, #0
 800045c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800045e:	4b0b      	ldr	r3, [pc, #44]	@ (800048c <MX_SPI1_Init+0x6c>)
 8000460:	2200      	movs	r2, #0
 8000462:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000464:	4b09      	ldr	r3, [pc, #36]	@ (800048c <MX_SPI1_Init+0x6c>)
 8000466:	2207      	movs	r2, #7
 8000468:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800046a:	4b08      	ldr	r3, [pc, #32]	@ (800048c <MX_SPI1_Init+0x6c>)
 800046c:	2200      	movs	r2, #0
 800046e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000470:	4b06      	ldr	r3, [pc, #24]	@ (800048c <MX_SPI1_Init+0x6c>)
 8000472:	2200      	movs	r2, #0
 8000474:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000476:	4805      	ldr	r0, [pc, #20]	@ (800048c <MX_SPI1_Init+0x6c>)
 8000478:	f002 faca 	bl	8002a10 <HAL_SPI_Init>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8000482:	f000 f875 	bl	8000570 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	2000008c 	.word	0x2000008c
 8000490:	40013000 	.word	0x40013000

08000494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
 80004a0:	605a      	str	r2, [r3, #4]
 80004a2:	609a      	str	r2, [r3, #8]
 80004a4:	60da      	str	r2, [r3, #12]
 80004a6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a8:	2004      	movs	r0, #4
 80004aa:	f7ff fee0 	bl	800026e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ae:	2001      	movs	r0, #1
 80004b0:	f7ff fedd 	bl	800026e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004b4:	2008      	movs	r0, #8
 80004b6:	f7ff feda 	bl	800026e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ba:	2002      	movs	r0, #2
 80004bc:	f7ff fed7 	bl	800026e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004c0:	2310      	movs	r3, #16
 80004c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004c4:	2300      	movs	r3, #0
 80004c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c8:	2300      	movs	r3, #0
 80004ca:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	4619      	mov	r1, r3
 80004d0:	4816      	ldr	r0, [pc, #88]	@ (800052c <MX_GPIO_Init+0x98>)
 80004d2:	f000 fb8d 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 80004d6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80004da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004dc:	2302      	movs	r3, #2
 80004de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	2300      	movs	r3, #0
 80004e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e4:	2300      	movs	r3, #0
 80004e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80004e8:	230a      	movs	r3, #10
 80004ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	4619      	mov	r1, r3
 80004f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004f4:	f000 fb7c 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80004f8:	2303      	movs	r3, #3
 80004fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004fc:	2300      	movs	r3, #0
 80004fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	4619      	mov	r1, r3
 8000508:	4809      	ldr	r0, [pc, #36]	@ (8000530 <MX_GPIO_Init+0x9c>)
 800050a:	f000 fb71 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800050e:	2310      	movs	r3, #16
 8000510:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000512:	2300      	movs	r3, #0
 8000514:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000516:	2300      	movs	r3, #0
 8000518:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	4619      	mov	r1, r3
 800051e:	4805      	ldr	r0, [pc, #20]	@ (8000534 <MX_GPIO_Init+0xa0>)
 8000520:	f000 fb66 	bl	8000bf0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000524:	bf00      	nop
 8000526:	3718      	adds	r7, #24
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	48000800 	.word	0x48000800
 8000530:	48000c00 	.word	0x48000c00
 8000534:	48000400 	.word	0x48000400

08000538 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]
 8000548:	e009      	b.n	800055e <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	1c5a      	adds	r2, r3, #1
 800054e:	60ba      	str	r2, [r7, #8]
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff fe64 	bl	8000220 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	3301      	adds	r3, #1
 800055c:	617b      	str	r3, [r7, #20]
 800055e:	697a      	ldr	r2, [r7, #20]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	429a      	cmp	r2, r3
 8000564:	dbf1      	blt.n	800054a <_write+0x12>
  }
  return len;
 8000566:	687b      	ldr	r3, [r7, #4]
}
 8000568:	4618      	mov	r0, r3
 800056a:	3718      	adds	r7, #24
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000574:	b672      	cpsid	i
}
 8000576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <Error_Handler+0x8>

0800057c <LL_AHB2_GRP1_EnableClock>:
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000584:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000588:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800058a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4313      	orrs	r3, r2
 8000592:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000594:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000598:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4013      	ands	r3, r2
 800059e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005a0:	68fb      	ldr	r3, [r7, #12]
}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005ae:	b480      	push	{r7}
 80005b0:	b085      	sub	sp, #20
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80005b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005ba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80005bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4313      	orrs	r3, r2
 80005c4:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80005c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005ca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4013      	ands	r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005d2:	68fb      	ldr	r3, [r7, #12]
}
 80005d4:	bf00      	nop
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
	...

080005f0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a0f      	ldr	r2, [pc, #60]	@ (800064c <HAL_SPI_MspInit+0x5c>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d117      	bne.n	8000642 <HAL_SPI_MspInit+0x52>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000612:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000616:	f7ff ffca 	bl	80005ae <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	2001      	movs	r0, #1
 800061c:	f7ff ffae 	bl	800057c <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000620:	23c2      	movs	r3, #194	@ 0xc2
 8000622:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000624:	2302      	movs	r3, #2
 8000626:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062c:	2300      	movs	r3, #0
 800062e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000630:	2305      	movs	r3, #5
 8000632:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	4619      	mov	r1, r3
 800063a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800063e:	f000 fad7 	bl	8000bf0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000642:	bf00      	nop
 8000644:	3720      	adds	r7, #32
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40013000 	.word	0x40013000

08000650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <NMI_Handler+0x4>

08000658 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <HardFault_Handler+0x4>

08000660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <MemManage_Handler+0x4>

08000668 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <BusFault_Handler+0x4>

08000670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <UsageFault_Handler+0x4>

08000678 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr

080006a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a6:	f000 f96f 	bl	8000988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}

080006ae <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b086      	sub	sp, #24
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	60f8      	str	r0, [r7, #12]
 80006b6:	60b9      	str	r1, [r7, #8]
 80006b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
 80006be:	e00a      	b.n	80006d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006c0:	f3af 8000 	nop.w
 80006c4:	4601      	mov	r1, r0
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	1c5a      	adds	r2, r3, #1
 80006ca:	60ba      	str	r2, [r7, #8]
 80006cc:	b2ca      	uxtb	r2, r1
 80006ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	3301      	adds	r3, #1
 80006d4:	617b      	str	r3, [r7, #20]
 80006d6:	697a      	ldr	r2, [r7, #20]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	429a      	cmp	r2, r3
 80006dc:	dbf0      	blt.n	80006c0 <_read+0x12>
  }

  return len;
 80006de:	687b      	ldr	r3, [r7, #4]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000710:	605a      	str	r2, [r3, #4]
  return 0;
 8000712:	2300      	movs	r3, #0
}
 8000714:	4618      	mov	r0, r3
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <_isatty>:

int _isatty(int file)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000728:	2301      	movs	r3, #1
}
 800072a:	4618      	mov	r0, r3
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000736:	b480      	push	{r7}
 8000738:	b085      	sub	sp, #20
 800073a:	af00      	add	r7, sp, #0
 800073c:	60f8      	str	r0, [r7, #12]
 800073e:	60b9      	str	r1, [r7, #8]
 8000740:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000742:	2300      	movs	r3, #0
}
 8000744:	4618      	mov	r0, r3
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000758:	4a14      	ldr	r2, [pc, #80]	@ (80007ac <_sbrk+0x5c>)
 800075a:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <_sbrk+0x60>)
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000764:	4b13      	ldr	r3, [pc, #76]	@ (80007b4 <_sbrk+0x64>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d102      	bne.n	8000772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800076c:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <_sbrk+0x64>)
 800076e:	4a12      	ldr	r2, [pc, #72]	@ (80007b8 <_sbrk+0x68>)
 8000770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000772:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <_sbrk+0x64>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4413      	add	r3, r2
 800077a:	693a      	ldr	r2, [r7, #16]
 800077c:	429a      	cmp	r2, r3
 800077e:	d207      	bcs.n	8000790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000780:	f002 fed2 	bl	8003528 <__errno>
 8000784:	4603      	mov	r3, r0
 8000786:	220c      	movs	r2, #12
 8000788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800078a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800078e:	e009      	b.n	80007a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000790:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <_sbrk+0x64>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000796:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <_sbrk+0x64>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4413      	add	r3, r2
 800079e:	4a05      	ldr	r2, [pc, #20]	@ (80007b4 <_sbrk+0x64>)
 80007a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007a2:	68fb      	ldr	r3, [r7, #12]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3718      	adds	r7, #24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20030000 	.word	0x20030000
 80007b0:	00000400 	.word	0x00000400
 80007b4:	200000f0 	.word	0x200000f0
 80007b8:	20000248 	.word	0x20000248

080007bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80007c0:	4b24      	ldr	r3, [pc, #144]	@ (8000854 <SystemInit+0x98>)
 80007c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007c6:	4a23      	ldr	r2, [pc, #140]	@ (8000854 <SystemInit+0x98>)
 80007c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80007d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80007da:	f043 0301 	orr.w	r3, r3, #1
 80007de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80007e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007e4:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80007e8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80007ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80007f4:	4b18      	ldr	r3, [pc, #96]	@ (8000858 <SystemInit+0x9c>)
 80007f6:	4013      	ands	r3, r2
 80007f8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80007fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000802:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000806:	f023 0305 	bic.w	r3, r3, #5
 800080a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800080e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000812:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000816:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800081a:	f023 0301 	bic.w	r3, r3, #1
 800081e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000822:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000826:	4a0d      	ldr	r2, [pc, #52]	@ (800085c <SystemInit+0xa0>)
 8000828:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800082a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800082e:	4a0b      	ldr	r2, [pc, #44]	@ (800085c <SystemInit+0xa0>)
 8000830:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000832:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800083c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000840:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000842:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	e000ed00 	.word	0xe000ed00
 8000858:	faf6fefb 	.word	0xfaf6fefb
 800085c:	22041000 	.word	0x22041000

08000860 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000860:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000862:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000864:	3304      	adds	r3, #4

08000866 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000866:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000868:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800086a:	d3f9      	bcc.n	8000860 <CopyDataInit>
  bx lr
 800086c:	4770      	bx	lr

0800086e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800086e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000870:	3004      	adds	r0, #4

08000872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000872:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000874:	d3fb      	bcc.n	800086e <FillZerobss>
  bx lr
 8000876:	4770      	bx	lr

08000878 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000878:	480c      	ldr	r0, [pc, #48]	@ (80008ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800087a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800087c:	f7ff ff9e 	bl	80007bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000880:	480b      	ldr	r0, [pc, #44]	@ (80008b0 <LoopForever+0x6>)
 8000882:	490c      	ldr	r1, [pc, #48]	@ (80008b4 <LoopForever+0xa>)
 8000884:	4a0c      	ldr	r2, [pc, #48]	@ (80008b8 <LoopForever+0xe>)
 8000886:	2300      	movs	r3, #0
 8000888:	f7ff ffed 	bl	8000866 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800088c:	480b      	ldr	r0, [pc, #44]	@ (80008bc <LoopForever+0x12>)
 800088e:	490c      	ldr	r1, [pc, #48]	@ (80008c0 <LoopForever+0x16>)
 8000890:	4a0c      	ldr	r2, [pc, #48]	@ (80008c4 <LoopForever+0x1a>)
 8000892:	2300      	movs	r3, #0
 8000894:	f7ff ffe7 	bl	8000866 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000898:	480b      	ldr	r0, [pc, #44]	@ (80008c8 <LoopForever+0x1e>)
 800089a:	490c      	ldr	r1, [pc, #48]	@ (80008cc <LoopForever+0x22>)
 800089c:	2300      	movs	r3, #0
 800089e:	f7ff ffe8 	bl	8000872 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008a2:	f002 fe47 	bl	8003534 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80008a6:	f7ff fcfb 	bl	80002a0 <main>

080008aa <LoopForever>:

LoopForever:
  b LoopForever
 80008aa:	e7fe      	b.n	80008aa <LoopForever>
  ldr   r0, =_estack
 80008ac:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80008b0:	20000008 	.word	0x20000008
 80008b4:	20000070 	.word	0x20000070
 80008b8:	0800422c 	.word	0x0800422c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80008bc:	20030000 	.word	0x20030000
 80008c0:	20030000 	.word	0x20030000
 80008c4:	08004294 	.word	0x08004294
  INIT_BSS _sbss, _ebss
 80008c8:	20000070 	.word	0x20000070
 80008cc:	20000244 	.word	0x20000244

080008d0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d0:	e7fe      	b.n	80008d0 <ADC1_IRQHandler>
	...

080008d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008da:	2300      	movs	r3, #0
 80008dc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008de:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <HAL_Init+0x3c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000910 <HAL_Init+0x3c>)
 80008e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008e8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ea:	2003      	movs	r0, #3
 80008ec:	f000 f94e 	bl	8000b8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008f0:	2000      	movs	r0, #0
 80008f2:	f000 f80f 	bl	8000914 <HAL_InitTick>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d002      	beq.n	8000902 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80008fc:	2301      	movs	r3, #1
 80008fe:	71fb      	strb	r3, [r7, #7]
 8000900:	e001      	b.n	8000906 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000902:	f7ff fe6d 	bl	80005e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000906:	79fb      	ldrb	r3, [r7, #7]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	58004000 	.word	0x58004000

08000914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800091c:	2300      	movs	r3, #0
 800091e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000920:	4b17      	ldr	r3, [pc, #92]	@ (8000980 <HAL_InitTick+0x6c>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d024      	beq.n	8000972 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000928:	f001 fb86 	bl	8002038 <HAL_RCC_GetHCLKFreq>
 800092c:	4602      	mov	r2, r0
 800092e:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <HAL_InitTick+0x6c>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	4619      	mov	r1, r3
 8000934:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000938:	fbb3 f3f1 	udiv	r3, r3, r1
 800093c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000940:	4618      	mov	r0, r3
 8000942:	f000 f948 	bl	8000bd6 <HAL_SYSTICK_Config>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d10f      	bne.n	800096c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b0f      	cmp	r3, #15
 8000950:	d809      	bhi.n	8000966 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000952:	2200      	movs	r2, #0
 8000954:	6879      	ldr	r1, [r7, #4]
 8000956:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800095a:	f000 f922 	bl	8000ba2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800095e:	4a09      	ldr	r2, [pc, #36]	@ (8000984 <HAL_InitTick+0x70>)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6013      	str	r3, [r2, #0]
 8000964:	e007      	b.n	8000976 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	73fb      	strb	r3, [r7, #15]
 800096a:	e004      	b.n	8000976 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800096c:	2301      	movs	r3, #1
 800096e:	73fb      	strb	r3, [r7, #15]
 8000970:	e001      	b.n	8000976 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000976:	7bfb      	ldrb	r3, [r7, #15]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000010 	.word	0x20000010
 8000984:	2000000c 	.word	0x2000000c

08000988 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800098c:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <HAL_IncTick+0x20>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	461a      	mov	r2, r3
 8000992:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <HAL_IncTick+0x24>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4413      	add	r3, r2
 8000998:	4a04      	ldr	r2, [pc, #16]	@ (80009ac <HAL_IncTick+0x24>)
 800099a:	6013      	str	r3, [r2, #0]
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000010 	.word	0x20000010
 80009ac:	200000f4 	.word	0x200000f4

080009b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  return uwTick;
 80009b4:	4b03      	ldr	r3, [pc, #12]	@ (80009c4 <HAL_GetTick+0x14>)
 80009b6:	681b      	ldr	r3, [r3, #0]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	200000f4 	.word	0x200000f4

080009c8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80009cc:	4b03      	ldr	r3, [pc, #12]	@ (80009dc <HAL_GetTickPrio+0x14>)
 80009ce:	681b      	ldr	r3, [r3, #0]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	2000000c 	.word	0x2000000c

080009e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009e8:	f7ff ffe2 	bl	80009b0 <HAL_GetTick>
 80009ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80009f8:	d005      	beq.n	8000a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000a24 <HAL_Delay+0x44>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4413      	add	r3, r2
 8000a04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a06:	bf00      	nop
 8000a08:	f7ff ffd2 	bl	80009b0 <HAL_GetTick>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d8f7      	bhi.n	8000a08 <HAL_Delay+0x28>
  {
  }
}
 8000a18:	bf00      	nop
 8000a1a:	bf00      	nop
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000010 	.word	0x20000010

08000a28 <__NVIC_SetPriorityGrouping>:
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a38:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <__NVIC_SetPriorityGrouping+0x44>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a44:	4013      	ands	r3, r2
 8000a46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a5a:	4a04      	ldr	r2, [pc, #16]	@ (8000a6c <__NVIC_SetPriorityGrouping+0x44>)
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	60d3      	str	r3, [r2, #12]
}
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <__NVIC_GetPriorityGrouping>:
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a74:	4b04      	ldr	r3, [pc, #16]	@ (8000a88 <__NVIC_GetPriorityGrouping+0x18>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	0a1b      	lsrs	r3, r3, #8
 8000a7a:	f003 0307 	and.w	r3, r3, #7
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <__NVIC_SetPriority>:
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	6039      	str	r1, [r7, #0]
 8000a96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	db0a      	blt.n	8000ab6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	490c      	ldr	r1, [pc, #48]	@ (8000ad8 <__NVIC_SetPriority+0x4c>)
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	0112      	lsls	r2, r2, #4
 8000aac:	b2d2      	uxtb	r2, r2
 8000aae:	440b      	add	r3, r1
 8000ab0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000ab4:	e00a      	b.n	8000acc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4908      	ldr	r1, [pc, #32]	@ (8000adc <__NVIC_SetPriority+0x50>)
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	f003 030f 	and.w	r3, r3, #15
 8000ac2:	3b04      	subs	r3, #4
 8000ac4:	0112      	lsls	r2, r2, #4
 8000ac6:	b2d2      	uxtb	r2, r2
 8000ac8:	440b      	add	r3, r1
 8000aca:	761a      	strb	r2, [r3, #24]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000e100 	.word	0xe000e100
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <NVIC_EncodePriority>:
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b089      	sub	sp, #36	@ 0x24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	f1c3 0307 	rsb	r3, r3, #7
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	bf28      	it	cs
 8000afe:	2304      	movcs	r3, #4
 8000b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3304      	adds	r3, #4
 8000b06:	2b06      	cmp	r3, #6
 8000b08:	d902      	bls.n	8000b10 <NVIC_EncodePriority+0x30>
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3b03      	subs	r3, #3
 8000b0e:	e000      	b.n	8000b12 <NVIC_EncodePriority+0x32>
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	43da      	mvns	r2, r3
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	401a      	ands	r2, r3
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b28:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b32:	43d9      	mvns	r1, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	4313      	orrs	r3, r2
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3724      	adds	r7, #36	@ 0x24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
	...

08000b48 <SysTick_Config>:
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b58:	d301      	bcc.n	8000b5e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e00f      	b.n	8000b7e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b88 <SysTick_Config+0x40>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b66:	210f      	movs	r1, #15
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b6c:	f7ff ff8e 	bl	8000a8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b70:	4b05      	ldr	r3, [pc, #20]	@ (8000b88 <SysTick_Config+0x40>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b76:	4b04      	ldr	r3, [pc, #16]	@ (8000b88 <SysTick_Config+0x40>)
 8000b78:	2207      	movs	r2, #7
 8000b7a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	e000e010 	.word	0xe000e010

08000b8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff ff47 	bl	8000a28 <__NVIC_SetPriorityGrouping>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b086      	sub	sp, #24
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	4603      	mov	r3, r0
 8000baa:	60b9      	str	r1, [r7, #8]
 8000bac:	607a      	str	r2, [r7, #4]
 8000bae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb0:	f7ff ff5e 	bl	8000a70 <__NVIC_GetPriorityGrouping>
 8000bb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	68b9      	ldr	r1, [r7, #8]
 8000bba:	6978      	ldr	r0, [r7, #20]
 8000bbc:	f7ff ff90 	bl	8000ae0 <NVIC_EncodePriority>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff5f 	bl	8000a8c <__NVIC_SetPriority>
}
 8000bce:	bf00      	nop
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff ffb2 	bl	8000b48 <SysTick_Config>
 8000be4:	4603      	mov	r3, r0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b087      	sub	sp, #28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bfe:	e14c      	b.n	8000e9a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	2101      	movs	r1, #1
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f000 813e 	beq.w	8000e94 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f003 0303 	and.w	r3, r3, #3
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d005      	beq.n	8000c30 <HAL_GPIO_Init+0x40>
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f003 0303 	and.w	r3, r3, #3
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d130      	bne.n	8000c92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	68da      	ldr	r2, [r3, #12]
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c66:	2201      	movs	r2, #1
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	091b      	lsrs	r3, r3, #4
 8000c7c:	f003 0201 	and.w	r2, r3, #1
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f003 0303 	and.w	r3, r3, #3
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d017      	beq.n	8000cce <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	2203      	movs	r2, #3
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	689a      	ldr	r2, [r3, #8]
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 0303 	and.w	r3, r3, #3
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d123      	bne.n	8000d22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	08da      	lsrs	r2, r3, #3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3208      	adds	r2, #8
 8000ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	220f      	movs	r2, #15
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	691a      	ldr	r2, [r3, #16]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	f003 0307 	and.w	r3, r3, #7
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	08da      	lsrs	r2, r3, #3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3208      	adds	r2, #8
 8000d1c:	6939      	ldr	r1, [r7, #16]
 8000d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f003 0203 	and.w	r2, r3, #3
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f000 8098 	beq.w	8000e94 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000d64:	4a54      	ldr	r2, [pc, #336]	@ (8000eb8 <HAL_GPIO_Init+0x2c8>)
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	089b      	lsrs	r3, r3, #2
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	f003 0303 	and.w	r3, r3, #3
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	220f      	movs	r2, #15
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000d8e:	d019      	beq.n	8000dc4 <HAL_GPIO_Init+0x1d4>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a4a      	ldr	r2, [pc, #296]	@ (8000ebc <HAL_GPIO_Init+0x2cc>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d013      	beq.n	8000dc0 <HAL_GPIO_Init+0x1d0>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a49      	ldr	r2, [pc, #292]	@ (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d00d      	beq.n	8000dbc <HAL_GPIO_Init+0x1cc>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a48      	ldr	r2, [pc, #288]	@ (8000ec4 <HAL_GPIO_Init+0x2d4>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d007      	beq.n	8000db8 <HAL_GPIO_Init+0x1c8>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a47      	ldr	r2, [pc, #284]	@ (8000ec8 <HAL_GPIO_Init+0x2d8>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d101      	bne.n	8000db4 <HAL_GPIO_Init+0x1c4>
 8000db0:	2304      	movs	r3, #4
 8000db2:	e008      	b.n	8000dc6 <HAL_GPIO_Init+0x1d6>
 8000db4:	2307      	movs	r3, #7
 8000db6:	e006      	b.n	8000dc6 <HAL_GPIO_Init+0x1d6>
 8000db8:	2303      	movs	r3, #3
 8000dba:	e004      	b.n	8000dc6 <HAL_GPIO_Init+0x1d6>
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	e002      	b.n	8000dc6 <HAL_GPIO_Init+0x1d6>
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e000      	b.n	8000dc6 <HAL_GPIO_Init+0x1d6>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	f002 0203 	and.w	r2, r2, #3
 8000dcc:	0092      	lsls	r2, r2, #2
 8000dce:	4093      	lsls	r3, r2
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dd6:	4938      	ldr	r1, [pc, #224]	@ (8000eb8 <HAL_GPIO_Init+0x2c8>)
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	089b      	lsrs	r3, r3, #2
 8000ddc:	3302      	adds	r3, #2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000de4:	4b39      	ldr	r3, [pc, #228]	@ (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	43db      	mvns	r3, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d003      	beq.n	8000e08 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e08:	4a30      	ldr	r2, [pc, #192]	@ (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	43db      	mvns	r3, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e32:	4a26      	ldr	r2, [pc, #152]	@ (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e38:	4b24      	ldr	r3, [pc, #144]	@ (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	43db      	mvns	r3, r3
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4013      	ands	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e5e:	4a1b      	ldr	r2, [pc, #108]	@ (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8000e66:	4b19      	ldr	r3, [pc, #100]	@ (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	43db      	mvns	r3, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e8c:	4a0f      	ldr	r2, [pc, #60]	@ (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	3301      	adds	r3, #1
 8000e98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	f47f aeab 	bne.w	8000c00 <HAL_GPIO_Init+0x10>
  }
}
 8000eaa:	bf00      	nop
 8000eac:	bf00      	nop
 8000eae:	371c      	adds	r7, #28
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	40010000 	.word	0x40010000
 8000ebc:	48000400 	.word	0x48000400
 8000ec0:	48000800 	.word	0x48000800
 8000ec4:	48000c00 	.word	0x48000c00
 8000ec8:	48001000 	.word	0x48001000
 8000ecc:	58000800 	.word	0x58000800

08000ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	807b      	strh	r3, [r7, #2]
 8000edc:	4613      	mov	r3, r2
 8000ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ee0:	787b      	ldrb	r3, [r7, #1]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ee6:	887a      	ldrh	r2, [r7, #2]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000eec:	e002      	b.n	8000ef4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eee:	887a      	ldrh	r2, [r7, #2]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f04:	4b05      	ldr	r3, [pc, #20]	@ (8000f1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a04      	ldr	r2, [pc, #16]	@ (8000f1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000f0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f0e:	6013      	str	r3, [r2, #0]
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	58000400 	.word	0x58000400

08000f20 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000f24:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	58000400 	.word	0x58000400

08000f3c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000f40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8000f4e:	d101      	bne.n	8000f54 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000f50:	2301      	movs	r3, #1
 8000f52:	e000      	b.n	8000f56 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000f64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000f82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f90:	6013      	str	r3, [r2, #0]
}
 8000f92:	bf00      	nop
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000fa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000faa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000fae:	d101      	bne.n	8000fb4 <LL_RCC_HSE_IsReady+0x18>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e000      	b.n	8000fb6 <LL_RCC_HSE_IsReady+0x1a>
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000fc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000fce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000fe2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000fec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000ff0:	6013      	str	r3, [r2, #0]
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001000:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800100a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800100e:	d101      	bne.n	8001014 <LL_RCC_HSI_IsReady+0x18>
 8001010:	2301      	movs	r3, #1
 8001012:	e000      	b.n	8001016 <LL_RCC_HSI_IsReady+0x1a>
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001028:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	061b      	lsls	r3, r3, #24
 8001036:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800103a:	4313      	orrs	r3, r2
 800103c:	604b      	str	r3, [r1, #4]
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800104e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001052:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001056:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001070:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001074:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001078:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800107c:	f023 0301 	bic.w	r3, r3, #1
 8001080:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001092:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001096:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d101      	bne.n	80010a6 <LL_RCC_HSI48_IsReady+0x18>
 80010a2:	2301      	movs	r3, #1
 80010a4:	e000      	b.n	80010a8 <LL_RCC_HSI48_IsReady+0x1a>
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80010b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80010d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80010e4:	f023 0301 	bic.w	r3, r3, #1
 80010e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80010fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001102:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001106:	f043 0304 	orr.w	r3, r3, #4
 800110a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800111c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001124:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001128:	f023 0304 	bic.w	r3, r3, #4
 800112c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800113e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b02      	cmp	r3, #2
 800114c:	d101      	bne.n	8001152 <LL_RCC_LSE_IsReady+0x18>
 800114e:	2301      	movs	r3, #1
 8001150:	e000      	b.n	8001154 <LL_RCC_LSE_IsReady+0x1a>
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001162:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001166:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800116a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001188:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800118c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001190:	f023 0301 	bic.w	r3, r3, #1
 8001194:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80011a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d101      	bne.n	80011ba <LL_RCC_LSI1_IsReady+0x18>
 80011b6:	2301      	movs	r3, #1
 80011b8:	e000      	b.n	80011bc <LL_RCC_LSI1_IsReady+0x1a>
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80011ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80011ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011f8:	f023 0304 	bic.w	r3, r3, #4
 80011fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800120e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001212:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001216:	f003 0308 	and.w	r3, r3, #8
 800121a:	2b08      	cmp	r3, #8
 800121c:	d101      	bne.n	8001222 <LL_RCC_LSI2_IsReady+0x18>
 800121e:	2301      	movs	r3, #1
 8001220:	e000      	b.n	8001224 <LL_RCC_LSI2_IsReady+0x1a>
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001236:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800123a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800123e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800124a:	4313      	orrs	r3, r2
 800124c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001260:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800127e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001288:	f023 0301 	bic.w	r3, r3, #1
 800128c:	6013      	str	r3, [r2, #0]
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800129c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d101      	bne.n	80012ae <LL_RCC_MSI_IsReady+0x16>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <LL_RCC_MSI_IsReady+0x18>
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80012c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	600b      	str	r3, [r1, #0]
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80012e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012f2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2bb0      	cmp	r3, #176	@ 0xb0
 80012f8:	d901      	bls.n	80012fe <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80012fa:	23b0      	movs	r3, #176	@ 0xb0
 80012fc:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80012fe:	687b      	ldr	r3, [r7, #4]
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001314:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001326:	4313      	orrs	r3, r2
 8001328:	604b      	str	r3, [r1, #4]
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800133e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f023 0203 	bic.w	r2, r3, #3
 8001348:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4313      	orrs	r3, r2
 8001350:	608b      	str	r3, [r1, #8]
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001362:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f003 030c 	and.w	r3, r3, #12
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800137e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001388:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4313      	orrs	r3, r2
 8001390:	608b      	str	r3, [r1, #8]
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800139e:	b480      	push	{r7}
 80013a0:	b083      	sub	sp, #12
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80013a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80013ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80013d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80013da:	f023 020f 	bic.w	r2, r3, #15
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	091b      	lsrs	r3, r3, #4
 80013e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013e6:	4313      	orrs	r3, r2
 80013e8:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800140a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4313      	orrs	r3, r2
 8001412:	608b      	str	r3, [r1, #8]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001428:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001432:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4313      	orrs	r3, r2
 800143a:	608b      	str	r3, [r1, #8]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800144c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001456:	4618      	mov	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001464:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001468:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800146c:	011b      	lsls	r3, r3, #4
 800146e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800148a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800148e:	6013      	str	r3, [r2, #0]
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800149e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80014ac:	6013      	str	r3, [r2, #0]
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80014bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80014ca:	d101      	bne.n	80014d0 <LL_RCC_PLL_IsReady+0x18>
 80014cc:	2301      	movs	r3, #1
 80014ce:	e000      	b.n	80014d2 <LL_RCC_PLL_IsReady+0x1a>
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80014e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	0a1b      	lsrs	r3, r3, #8
 80014e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80014fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001512:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800151c:	4618      	mov	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800152a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	f003 0303 	and.w	r3, r3, #3
}
 8001534:	4618      	mov	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001542:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800154c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001550:	d101      	bne.n	8001556 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001566:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800156a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800156e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001572:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001576:	d101      	bne.n	800157c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800158c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001590:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001594:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800159c:	d101      	bne.n	80015a2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80015b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80015c0:	d101      	bne.n	80015c6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80015d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80015e4:	d101      	bne.n	80015ea <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80015e6:	2301      	movs	r3, #1
 80015e8:	e000      	b.n	80015ec <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b08d      	sub	sp, #52	@ 0x34
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e363      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0320 	and.w	r3, r3, #32
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 808d 	beq.w	8001732 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001618:	f7ff fea1 	bl	800135e <LL_RCC_GetSysClkSource>
 800161c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800161e:	f7ff ff82 	bl	8001526 <LL_RCC_PLL_GetMainSource>
 8001622:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001626:	2b00      	cmp	r3, #0
 8001628:	d005      	beq.n	8001636 <HAL_RCC_OscConfig+0x3e>
 800162a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800162c:	2b0c      	cmp	r3, #12
 800162e:	d147      	bne.n	80016c0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001632:	2b01      	cmp	r3, #1
 8001634:	d144      	bne.n	80016c0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e347      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8001646:	f7ff fe4c 	bl	80012e2 <LL_RCC_MSI_GetRange>
 800164a:	4603      	mov	r3, r0
 800164c:	429c      	cmp	r4, r3
 800164e:	d914      	bls.n	800167a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001654:	4618      	mov	r0, r3
 8001656:	f000 fd03 	bl	8002060 <RCC_SetFlashLatencyFromMSIRange>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e336      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fe26 	bl	80012ba <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fe4a 	bl	800130c <LL_RCC_MSI_SetCalibTrimming>
 8001678:	e013      	b.n	80016a2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fe1b 	bl	80012ba <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fe3f 	bl	800130c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001692:	4618      	mov	r0, r3
 8001694:	f000 fce4 	bl	8002060 <RCC_SetFlashLatencyFromMSIRange>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e317      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80016a2:	f000 fcc9 	bl	8002038 <HAL_RCC_GetHCLKFreq>
 80016a6:	4603      	mov	r3, r0
 80016a8:	4aa4      	ldr	r2, [pc, #656]	@ (800193c <HAL_RCC_OscConfig+0x344>)
 80016aa:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016ac:	4ba4      	ldr	r3, [pc, #656]	@ (8001940 <HAL_RCC_OscConfig+0x348>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff f92f 	bl	8000914 <HAL_InitTick>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d039      	beq.n	8001730 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e308      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d01e      	beq.n	8001706 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016c8:	f7ff fdc8 	bl	800125c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016cc:	f7ff f970 	bl	80009b0 <HAL_GetTick>
 80016d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016d4:	f7ff f96c 	bl	80009b0 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e2f5      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80016e6:	f7ff fdd7 	bl	8001298 <LL_RCC_MSI_IsReady>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f1      	beq.n	80016d4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fde0 	bl	80012ba <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff fe04 	bl	800130c <LL_RCC_MSI_SetCalibTrimming>
 8001704:	e015      	b.n	8001732 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001706:	f7ff fdb8 	bl	800127a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800170a:	f7ff f951 	bl	80009b0 <HAL_GetTick>
 800170e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001712:	f7ff f94d 	bl	80009b0 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e2d6      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001724:	f7ff fdb8 	bl	8001298 <LL_RCC_MSI_IsReady>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f1      	bne.n	8001712 <HAL_RCC_OscConfig+0x11a>
 800172e:	e000      	b.n	8001732 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001730:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d047      	beq.n	80017ce <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800173e:	f7ff fe0e 	bl	800135e <LL_RCC_GetSysClkSource>
 8001742:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001744:	f7ff feef 	bl	8001526 <LL_RCC_PLL_GetMainSource>
 8001748:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	2b08      	cmp	r3, #8
 800174e:	d005      	beq.n	800175c <HAL_RCC_OscConfig+0x164>
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	2b0c      	cmp	r3, #12
 8001754:	d108      	bne.n	8001768 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	2b03      	cmp	r3, #3
 800175a:	d105      	bne.n	8001768 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d134      	bne.n	80017ce <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e2b4      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001770:	d102      	bne.n	8001778 <HAL_RCC_OscConfig+0x180>
 8001772:	f7ff fbf5 	bl	8000f60 <LL_RCC_HSE_Enable>
 8001776:	e001      	b.n	800177c <HAL_RCC_OscConfig+0x184>
 8001778:	f7ff fc01 	bl	8000f7e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d012      	beq.n	80017aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001784:	f7ff f914 	bl	80009b0 <HAL_GetTick>
 8001788:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800178c:	f7ff f910 	bl	80009b0 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b64      	cmp	r3, #100	@ 0x64
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e299      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800179e:	f7ff fbfd 	bl	8000f9c <LL_RCC_HSE_IsReady>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f1      	beq.n	800178c <HAL_RCC_OscConfig+0x194>
 80017a8:	e011      	b.n	80017ce <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017aa:	f7ff f901 	bl	80009b0 <HAL_GetTick>
 80017ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b2:	f7ff f8fd 	bl	80009b0 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b64      	cmp	r3, #100	@ 0x64
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e286      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80017c4:	f7ff fbea 	bl	8000f9c <LL_RCC_HSE_IsReady>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f1      	bne.n	80017b2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d04c      	beq.n	8001874 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017da:	f7ff fdc0 	bl	800135e <LL_RCC_GetSysClkSource>
 80017de:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017e0:	f7ff fea1 	bl	8001526 <LL_RCC_PLL_GetMainSource>
 80017e4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_OscConfig+0x200>
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	2b0c      	cmp	r3, #12
 80017f0:	d10e      	bne.n	8001810 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d10b      	bne.n	8001810 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d101      	bne.n	8001804 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e266      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fc09 	bl	8001020 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800180e:	e031      	b.n	8001874 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d019      	beq.n	800184c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001818:	f7ff fbd2 	bl	8000fc0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181c:	f7ff f8c8 	bl	80009b0 <HAL_GetTick>
 8001820:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001824:	f7ff f8c4 	bl	80009b0 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e24d      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001836:	f7ff fbe1 	bl	8000ffc <LL_RCC_HSI_IsReady>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0f1      	beq.n	8001824 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fbeb 	bl	8001020 <LL_RCC_HSI_SetCalibTrimming>
 800184a:	e013      	b.n	8001874 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800184c:	f7ff fbc7 	bl	8000fde <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff f8ae 	bl	80009b0 <HAL_GetTick>
 8001854:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001858:	f7ff f8aa 	bl	80009b0 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e233      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800186a:	f7ff fbc7 	bl	8000ffc <LL_RCC_HSI_IsReady>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1f1      	bne.n	8001858 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	2b00      	cmp	r3, #0
 800187e:	d106      	bne.n	800188e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 80a3 	beq.w	80019d4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d076      	beq.n	8001984 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0310 	and.w	r3, r3, #16
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d046      	beq.n	8001930 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80018a2:	f7ff fc7e 	bl	80011a2 <LL_RCC_LSI1_IsReady>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d113      	bne.n	80018d4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80018ac:	f7ff fc57 	bl	800115e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018b0:	f7ff f87e 	bl	80009b0 <HAL_GetTick>
 80018b4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80018b8:	f7ff f87a 	bl	80009b0 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e203      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80018ca:	f7ff fc6a 	bl	80011a2 <LL_RCC_LSI1_IsReady>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0f1      	beq.n	80018b8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80018d4:	f7ff fc77 	bl	80011c6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7ff f86a 	bl	80009b0 <HAL_GetTick>
 80018dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80018e0:	f7ff f866 	bl	80009b0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e1ef      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80018f2:	f7ff fc8a 	bl	800120a <LL_RCC_LSI2_IsReady>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0f1      	beq.n	80018e0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fc94 	bl	800122e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001906:	f7ff fc3b 	bl	8001180 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190a:	f7ff f851 	bl	80009b0 <HAL_GetTick>
 800190e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001912:	f7ff f84d 	bl	80009b0 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e1d6      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001924:	f7ff fc3d 	bl	80011a2 <LL_RCC_LSI1_IsReady>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f1      	bne.n	8001912 <HAL_RCC_OscConfig+0x31a>
 800192e:	e051      	b.n	80019d4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001930:	f7ff fc15 	bl	800115e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001934:	f7ff f83c 	bl	80009b0 <HAL_GetTick>
 8001938:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800193a:	e00c      	b.n	8001956 <HAL_RCC_OscConfig+0x35e>
 800193c:	20000008 	.word	0x20000008
 8001940:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001944:	f7ff f834 	bl	80009b0 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e1bd      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001956:	f7ff fc24 	bl	80011a2 <LL_RCC_LSI1_IsReady>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f1      	beq.n	8001944 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001960:	f7ff fc42 	bl	80011e8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001966:	f7ff f823 	bl	80009b0 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b03      	cmp	r3, #3
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e1ac      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001978:	f7ff fc47 	bl	800120a <LL_RCC_LSI2_IsReady>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f1      	bne.n	8001966 <HAL_RCC_OscConfig+0x36e>
 8001982:	e027      	b.n	80019d4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001984:	f7ff fc30 	bl	80011e8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001988:	f7ff f812 	bl	80009b0 <HAL_GetTick>
 800198c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001990:	f7ff f80e 	bl	80009b0 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b03      	cmp	r3, #3
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e197      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80019a2:	f7ff fc32 	bl	800120a <LL_RCC_LSI2_IsReady>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1f1      	bne.n	8001990 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80019ac:	f7ff fbe8 	bl	8001180 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b0:	f7fe fffe 	bl	80009b0 <HAL_GetTick>
 80019b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80019b8:	f7fe fffa 	bl	80009b0 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e183      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80019ca:	f7ff fbea 	bl	80011a2 <LL_RCC_LSI1_IsReady>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1f1      	bne.n	80019b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d05b      	beq.n	8001a98 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019e0:	4ba7      	ldr	r3, [pc, #668]	@ (8001c80 <HAL_RCC_OscConfig+0x688>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d114      	bne.n	8001a16 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80019ec:	f7ff fa88 	bl	8000f00 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019f0:	f7fe ffde 	bl	80009b0 <HAL_GetTick>
 80019f4:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f8:	f7fe ffda 	bl	80009b0 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e163      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a0a:	4b9d      	ldr	r3, [pc, #628]	@ (8001c80 <HAL_RCC_OscConfig+0x688>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d102      	bne.n	8001a24 <HAL_RCC_OscConfig+0x42c>
 8001a1e:	f7ff fb48 	bl	80010b2 <LL_RCC_LSE_Enable>
 8001a22:	e00c      	b.n	8001a3e <HAL_RCC_OscConfig+0x446>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	2b05      	cmp	r3, #5
 8001a2a:	d104      	bne.n	8001a36 <HAL_RCC_OscConfig+0x43e>
 8001a2c:	f7ff fb63 	bl	80010f6 <LL_RCC_LSE_EnableBypass>
 8001a30:	f7ff fb3f 	bl	80010b2 <LL_RCC_LSE_Enable>
 8001a34:	e003      	b.n	8001a3e <HAL_RCC_OscConfig+0x446>
 8001a36:	f7ff fb4d 	bl	80010d4 <LL_RCC_LSE_Disable>
 8001a3a:	f7ff fb6d 	bl	8001118 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d014      	beq.n	8001a70 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a46:	f7fe ffb3 	bl	80009b0 <HAL_GetTick>
 8001a4a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001a4c:	e00a      	b.n	8001a64 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4e:	f7fe ffaf 	bl	80009b0 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e136      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001a64:	f7ff fb69 	bl	800113a <LL_RCC_LSE_IsReady>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0ef      	beq.n	8001a4e <HAL_RCC_OscConfig+0x456>
 8001a6e:	e013      	b.n	8001a98 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a70:	f7fe ff9e 	bl	80009b0 <HAL_GetTick>
 8001a74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001a76:	e00a      	b.n	8001a8e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a78:	f7fe ff9a 	bl	80009b0 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e121      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001a8e:	f7ff fb54 	bl	800113a <LL_RCC_LSE_IsReady>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1ef      	bne.n	8001a78 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d02c      	beq.n	8001afe <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d014      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001aac:	f7ff facd 	bl	800104a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab0:	f7fe ff7e 	bl	80009b0 <HAL_GetTick>
 8001ab4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ab8:	f7fe ff7a 	bl	80009b0 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e103      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001aca:	f7ff fae0 	bl	800108e <LL_RCC_HSI48_IsReady>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0f1      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x4c0>
 8001ad4:	e013      	b.n	8001afe <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ad6:	f7ff fac9 	bl	800106c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ada:	f7fe ff69 	bl	80009b0 <HAL_GetTick>
 8001ade:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ae2:	f7fe ff65 	bl	80009b0 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e0ee      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001af4:	f7ff facb 	bl	800108e <LL_RCC_HSI48_IsReady>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f1      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 80e4 	beq.w	8001cd0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b08:	f7ff fc29 	bl	800135e <LL_RCC_GetSysClkSource>
 8001b0c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8001b0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	f040 80b4 	bne.w	8001c88 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 0203 	and.w	r2, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d123      	bne.n	8001b76 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d11c      	bne.n	8001b76 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	0a1b      	lsrs	r3, r3, #8
 8001b40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d114      	bne.n	8001b76 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d10d      	bne.n	8001b76 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d106      	bne.n	8001b76 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d05d      	beq.n	8001c32 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	2b0c      	cmp	r3, #12
 8001b7a:	d058      	beq.n	8001c2e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e0a1      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b8e:	f7ff fc84 	bl	800149a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b92:	f7fe ff0d 	bl	80009b0 <HAL_GetTick>
 8001b96:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9a:	f7fe ff09 	bl	80009b0 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e092      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1ef      	bne.n	8001b9a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	4b30      	ldr	r3, [pc, #192]	@ (8001c84 <HAL_RCC_OscConfig+0x68c>)
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001bcc:	4311      	orrs	r1, r2
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001bd2:	0212      	lsls	r2, r2, #8
 8001bd4:	4311      	orrs	r1, r2
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001bda:	4311      	orrs	r1, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001be0:	4311      	orrs	r1, r2
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001be6:	430a      	orrs	r2, r1
 8001be8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bec:	4313      	orrs	r3, r2
 8001bee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bf0:	f7ff fc44 	bl	800147c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c04:	f7fe fed4 	bl	80009b0 <HAL_GetTick>
 8001c08:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0c:	f7fe fed0 	bl	80009b0 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e059      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0ef      	beq.n	8001c0c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c2c:	e050      	b.n	8001cd0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e04f      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d147      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c40:	f7ff fc1c 	bl	800147c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c54:	f7fe feac 	bl	80009b0 <HAL_GetTick>
 8001c58:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5c:	f7fe fea8 	bl	80009b0 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e031      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0ef      	beq.n	8001c5c <HAL_RCC_OscConfig+0x664>
 8001c7c:	e028      	b.n	8001cd0 <HAL_RCC_OscConfig+0x6d8>
 8001c7e:	bf00      	nop
 8001c80:	58000400 	.word	0x58000400
 8001c84:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	2b0c      	cmp	r3, #12
 8001c8c:	d01e      	beq.n	8001ccc <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8e:	f7ff fc04 	bl	800149a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c92:	f7fe fe8d 	bl	80009b0 <HAL_GetTick>
 8001c96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9a:	f7fe fe89 	bl	80009b0 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e012      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1ef      	bne.n	8001c9a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001cba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001cc4:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <HAL_RCC_OscConfig+0x6e4>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	60cb      	str	r3, [r1, #12]
 8001cca:	e001      	b.n	8001cd0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3734      	adds	r7, #52	@ 0x34
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd90      	pop	{r4, r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	eefefffc 	.word	0xeefefffc

08001ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e12d      	b.n	8001f50 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf4:	4b98      	ldr	r3, [pc, #608]	@ (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d91b      	bls.n	8001d3a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d02:	4b95      	ldr	r3, [pc, #596]	@ (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 0207 	bic.w	r2, r3, #7
 8001d0a:	4993      	ldr	r1, [pc, #588]	@ (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d12:	f7fe fe4d 	bl	80009b0 <HAL_GetTick>
 8001d16:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001d1a:	f7fe fe49 	bl	80009b0 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e111      	b.n	8001f50 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2c:	4b8a      	ldr	r3, [pc, #552]	@ (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d1ef      	bne.n	8001d1a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d016      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fb13 	bl	8001376 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001d50:	f7fe fe2e 	bl	80009b0 <HAL_GetTick>
 8001d54:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001d58:	f7fe fe2a 	bl	80009b0 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e0f2      	b.n	8001f50 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001d6a:	f7ff fbe8 	bl	800153e <LL_RCC_IsActiveFlag_HPRE>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0f1      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0320 	and.w	r3, r3, #32
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d016      	beq.n	8001dae <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fb0a 	bl	800139e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001d8a:	f7fe fe11 	bl	80009b0 <HAL_GetTick>
 8001d8e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001d92:	f7fe fe0d 	bl	80009b0 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e0d5      	b.n	8001f50 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001da4:	f7ff fbdd 	bl	8001562 <LL_RCC_IsActiveFlag_C2HPRE>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0f1      	beq.n	8001d92 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d016      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fb03 	bl	80013ca <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001dc4:	f7fe fdf4 	bl	80009b0 <HAL_GetTick>
 8001dc8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001dcc:	f7fe fdf0 	bl	80009b0 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e0b8      	b.n	8001f50 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001dde:	f7ff fbd3 	bl	8001588 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0f1      	beq.n	8001dcc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d016      	beq.n	8001e22 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fafd 	bl	80013f8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001dfe:	f7fe fdd7 	bl	80009b0 <HAL_GetTick>
 8001e02:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001e06:	f7fe fdd3 	bl	80009b0 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e09b      	b.n	8001f50 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001e18:	f7ff fbc9 	bl	80015ae <LL_RCC_IsActiveFlag_PPRE1>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f1      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d017      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff faf3 	bl	8001420 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001e3a:	f7fe fdb9 	bl	80009b0 <HAL_GetTick>
 8001e3e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001e42:	f7fe fdb5 	bl	80009b0 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e07d      	b.n	8001f50 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001e54:	f7ff fbbd 	bl	80015d2 <LL_RCC_IsActiveFlag_PPRE2>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f1      	beq.n	8001e42 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d043      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d106      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001e72:	f7ff f893 	bl	8000f9c <LL_RCC_HSE_IsReady>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d11e      	bne.n	8001eba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e067      	b.n	8001f50 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b03      	cmp	r3, #3
 8001e86:	d106      	bne.n	8001e96 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001e88:	f7ff fb16 	bl	80014b8 <LL_RCC_PLL_IsReady>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d113      	bne.n	8001eba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e05c      	b.n	8001f50 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d106      	bne.n	8001eac <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001e9e:	f7ff f9fb 	bl	8001298 <LL_RCC_MSI_IsReady>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d108      	bne.n	8001eba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e051      	b.n	8001f50 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001eac:	f7ff f8a6 	bl	8000ffc <LL_RCC_HSI_IsReady>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e04a      	b.n	8001f50 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fa39 	bl	8001336 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ec4:	f7fe fd74 	bl	80009b0 <HAL_GetTick>
 8001ec8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eca:	e00a      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ecc:	f7fe fd70 	bl	80009b0 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e036      	b.n	8001f50 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee2:	f7ff fa3c 	bl	800135e <LL_RCC_GetSysClkSource>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d1ec      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ef2:	4b19      	ldr	r3, [pc, #100]	@ (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d21b      	bcs.n	8001f38 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f00:	4b15      	ldr	r3, [pc, #84]	@ (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f023 0207 	bic.w	r2, r3, #7
 8001f08:	4913      	ldr	r1, [pc, #76]	@ (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f10:	f7fe fd4e 	bl	80009b0 <HAL_GetTick>
 8001f14:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001f18:	f7fe fd4a 	bl	80009b0 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e012      	b.n	8001f50 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f58 <HAL_RCC_ClockConfig+0x278>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d1ef      	bne.n	8001f18 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001f38:	f000 f87e 	bl	8002038 <HAL_RCC_GetHCLKFreq>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	4a07      	ldr	r2, [pc, #28]	@ (8001f5c <HAL_RCC_ClockConfig+0x27c>)
 8001f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8001f42:	f7fe fd41 	bl	80009c8 <HAL_GetTickPrio>
 8001f46:	4603      	mov	r3, r0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe fce3 	bl	8000914 <HAL_InitTick>
 8001f4e:	4603      	mov	r3, r0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	58004000 	.word	0x58004000
 8001f5c:	20000008 	.word	0x20000008

08001f60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f60:	b590      	push	{r4, r7, lr}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f66:	f7ff f9fa 	bl	800135e <LL_RCC_GetSysClkSource>
 8001f6a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10a      	bne.n	8001f88 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001f72:	f7ff f9b6 	bl	80012e2 <LL_RCC_MSI_GetRange>
 8001f76:	4603      	mov	r3, r0
 8001f78:	091b      	lsrs	r3, r3, #4
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	4a2b      	ldr	r2, [pc, #172]	@ (800202c <HAL_RCC_GetSysClockFreq+0xcc>)
 8001f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	e04b      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d102      	bne.n	8001f94 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f8e:	4b28      	ldr	r3, [pc, #160]	@ (8002030 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	e045      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b08      	cmp	r3, #8
 8001f98:	d10a      	bne.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001f9a:	f7fe ffcf 	bl	8000f3c <LL_RCC_HSE_IsEnabledDiv2>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d102      	bne.n	8001faa <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001fa4:	4b22      	ldr	r3, [pc, #136]	@ (8002030 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	e03a      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001faa:	4b22      	ldr	r3, [pc, #136]	@ (8002034 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	e037      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001fb0:	f7ff fab9 	bl	8001526 <LL_RCC_PLL_GetMainSource>
 8001fb4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d003      	beq.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x64>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	2b03      	cmp	r3, #3
 8001fc0:	d003      	beq.n	8001fca <HAL_RCC_GetSysClockFreq+0x6a>
 8001fc2:	e00d      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8002030 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001fc6:	60bb      	str	r3, [r7, #8]
        break;
 8001fc8:	e015      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001fca:	f7fe ffb7 	bl	8000f3c <LL_RCC_HSE_IsEnabledDiv2>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d102      	bne.n	8001fda <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001fd4:	4b16      	ldr	r3, [pc, #88]	@ (8002030 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001fd6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001fd8:	e00d      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8001fda:	4b16      	ldr	r3, [pc, #88]	@ (8002034 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001fdc:	60bb      	str	r3, [r7, #8]
        break;
 8001fde:	e00a      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001fe0:	f7ff f97f 	bl	80012e2 <LL_RCC_MSI_GetRange>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	091b      	lsrs	r3, r3, #4
 8001fe8:	f003 030f 	and.w	r3, r3, #15
 8001fec:	4a0f      	ldr	r2, [pc, #60]	@ (800202c <HAL_RCC_GetSysClockFreq+0xcc>)
 8001fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff2:	60bb      	str	r3, [r7, #8]
        break;
 8001ff4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8001ff6:	f7ff fa71 	bl	80014dc <LL_RCC_PLL_GetN>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	fb03 f402 	mul.w	r4, r3, r2
 8002002:	f7ff fa84 	bl	800150e <LL_RCC_PLL_GetDivider>
 8002006:	4603      	mov	r3, r0
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	3301      	adds	r3, #1
 800200c:	fbb4 f4f3 	udiv	r4, r4, r3
 8002010:	f7ff fa71 	bl	80014f6 <LL_RCC_PLL_GetR>
 8002014:	4603      	mov	r3, r0
 8002016:	0f5b      	lsrs	r3, r3, #29
 8002018:	3301      	adds	r3, #1
 800201a:	fbb4 f3f3 	udiv	r3, r4, r3
 800201e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002020:	68fb      	ldr	r3, [r7, #12]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	bd90      	pop	{r4, r7, pc}
 800202a:	bf00      	nop
 800202c:	080041a8 	.word	0x080041a8
 8002030:	00f42400 	.word	0x00f42400
 8002034:	01e84800 	.word	0x01e84800

08002038 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002038:	b598      	push	{r3, r4, r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800203c:	f7ff ff90 	bl	8001f60 <HAL_RCC_GetSysClockFreq>
 8002040:	4604      	mov	r4, r0
 8002042:	f7ff fa01 	bl	8001448 <LL_RCC_GetAHBPrescaler>
 8002046:	4603      	mov	r3, r0
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	4a03      	ldr	r2, [pc, #12]	@ (800205c <HAL_RCC_GetHCLKFreq+0x24>)
 8002050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002054:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002058:	4618      	mov	r0, r3
 800205a:	bd98      	pop	{r3, r4, r7, pc}
 800205c:	08004168 	.word	0x08004168

08002060 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002060:	b590      	push	{r4, r7, lr}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2bb0      	cmp	r3, #176	@ 0xb0
 800206c:	d903      	bls.n	8002076 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800206e:	4b15      	ldr	r3, [pc, #84]	@ (80020c4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	e007      	b.n	8002086 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	4a11      	ldr	r2, [pc, #68]	@ (80020c4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002084:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002086:	f7ff f9eb 	bl	8001460 <LL_RCC_GetAHB4Prescaler>
 800208a:	4603      	mov	r3, r0
 800208c:	091b      	lsrs	r3, r3, #4
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	4a0d      	ldr	r2, [pc, #52]	@ (80020c8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	fbb2 f3f3 	udiv	r3, r2, r3
 800209e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	4a0a      	ldr	r2, [pc, #40]	@ (80020cc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80020a4:	fba2 2303 	umull	r2, r3, r2, r3
 80020a8:	0c9c      	lsrs	r4, r3, #18
 80020aa:	f7fe ff39 	bl	8000f20 <HAL_PWREx_GetVoltageRange>
 80020ae:	4603      	mov	r3, r0
 80020b0:	4619      	mov	r1, r3
 80020b2:	4620      	mov	r0, r4
 80020b4:	f000 f80c 	bl	80020d0 <RCC_SetFlashLatency>
 80020b8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd90      	pop	{r4, r7, pc}
 80020c2:	bf00      	nop
 80020c4:	080041a8 	.word	0x080041a8
 80020c8:	08004168 	.word	0x08004168
 80020cc:	431bde83 	.word	0x431bde83

080020d0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80020d0:	b590      	push	{r4, r7, lr}
 80020d2:	b093      	sub	sp, #76	@ 0x4c
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80020da:	4b37      	ldr	r3, [pc, #220]	@ (80021b8 <RCC_SetFlashLatency+0xe8>)
 80020dc:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80020e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80020e6:	4a35      	ldr	r2, [pc, #212]	@ (80021bc <RCC_SetFlashLatency+0xec>)
 80020e8:	f107 031c 	add.w	r3, r7, #28
 80020ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80020ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80020f2:	4b33      	ldr	r3, [pc, #204]	@ (80021c0 <RCC_SetFlashLatency+0xf0>)
 80020f4:	f107 040c 	add.w	r4, r7, #12
 80020f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80020fe:	2300      	movs	r3, #0
 8002100:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002108:	d11a      	bne.n	8002140 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800210a:	2300      	movs	r3, #0
 800210c:	643b      	str	r3, [r7, #64]	@ 0x40
 800210e:	e013      	b.n	8002138 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002110:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	3348      	adds	r3, #72	@ 0x48
 8002116:	443b      	add	r3, r7
 8002118:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	429a      	cmp	r2, r3
 8002120:	d807      	bhi.n	8002132 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002122:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	3348      	adds	r3, #72	@ 0x48
 8002128:	443b      	add	r3, r7
 800212a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800212e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002130:	e020      	b.n	8002174 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002132:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002134:	3301      	adds	r3, #1
 8002136:	643b      	str	r3, [r7, #64]	@ 0x40
 8002138:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800213a:	2b03      	cmp	r3, #3
 800213c:	d9e8      	bls.n	8002110 <RCC_SetFlashLatency+0x40>
 800213e:	e019      	b.n	8002174 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002140:	2300      	movs	r3, #0
 8002142:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002144:	e013      	b.n	800216e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002146:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	3348      	adds	r3, #72	@ 0x48
 800214c:	443b      	add	r3, r7
 800214e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	429a      	cmp	r2, r3
 8002156:	d807      	bhi.n	8002168 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	3348      	adds	r3, #72	@ 0x48
 800215e:	443b      	add	r3, r7
 8002160:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002164:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002166:	e005      	b.n	8002174 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800216a:	3301      	adds	r3, #1
 800216c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800216e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002170:	2b02      	cmp	r3, #2
 8002172:	d9e8      	bls.n	8002146 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002174:	4b13      	ldr	r3, [pc, #76]	@ (80021c4 <RCC_SetFlashLatency+0xf4>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f023 0207 	bic.w	r2, r3, #7
 800217c:	4911      	ldr	r1, [pc, #68]	@ (80021c4 <RCC_SetFlashLatency+0xf4>)
 800217e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002180:	4313      	orrs	r3, r2
 8002182:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002184:	f7fe fc14 	bl	80009b0 <HAL_GetTick>
 8002188:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800218a:	e008      	b.n	800219e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800218c:	f7fe fc10 	bl	80009b0 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e007      	b.n	80021ae <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800219e:	4b09      	ldr	r3, [pc, #36]	@ (80021c4 <RCC_SetFlashLatency+0xf4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d1ef      	bne.n	800218c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	374c      	adds	r7, #76	@ 0x4c
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd90      	pop	{r4, r7, pc}
 80021b6:	bf00      	nop
 80021b8:	0800413c 	.word	0x0800413c
 80021bc:	0800414c 	.word	0x0800414c
 80021c0:	08004158 	.word	0x08004158
 80021c4:	58004000 	.word	0x58004000

080021c8 <LL_RCC_LSE_IsEnabled>:
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80021cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d101      	bne.n	80021e0 <LL_RCC_LSE_IsEnabled+0x18>
 80021dc:	2301      	movs	r3, #1
 80021de:	e000      	b.n	80021e2 <LL_RCC_LSE_IsEnabled+0x1a>
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <LL_RCC_LSE_IsReady>:
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80021f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d101      	bne.n	8002204 <LL_RCC_LSE_IsReady+0x18>
 8002200:	2301      	movs	r3, #1
 8002202:	e000      	b.n	8002206 <LL_RCC_LSE_IsReady+0x1a>
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <LL_RCC_SetRFWKPClockSource>:
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002218:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800221c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002220:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002224:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4313      	orrs	r3, r2
 800222c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <LL_RCC_SetSMPSClockSource>:
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002244:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224a:	f023 0203 	bic.w	r2, r3, #3
 800224e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4313      	orrs	r3, r2
 8002256:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <LL_RCC_SetSMPSPrescaler>:
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800226c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002272:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002276:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4313      	orrs	r3, r2
 800227e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <LL_RCC_SetUSARTClockSource>:
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002294:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229c:	f023 0203 	bic.w	r2, r3, #3
 80022a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <LL_RCC_SetLPUARTClockSource>:
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80022c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80022cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <LL_RCC_SetI2CClockSource>:
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80022ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022f0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	091b      	lsrs	r3, r3, #4
 80022f8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80022fc:	43db      	mvns	r3, r3
 80022fe:	401a      	ands	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002308:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <LL_RCC_SetLPTIMClockSource>:
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002326:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800232a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	0c1b      	lsrs	r3, r3, #16
 8002332:	041b      	lsls	r3, r3, #16
 8002334:	43db      	mvns	r3, r3
 8002336:	401a      	ands	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	041b      	lsls	r3, r3, #16
 800233c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002340:	4313      	orrs	r3, r2
 8002342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <LL_RCC_SetSAIClockSource>:
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800235a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002362:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002366:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <LL_RCC_SetRNGClockSource>:
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002386:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800238e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002392:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <LL_RCC_SetCLK48ClockSource>:
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80023b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <LL_RCC_SetUSBClockSource>:
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff ffe3 	bl	80023aa <LL_RCC_SetCLK48ClockSource>
}
 80023e4:	bf00      	nop
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <LL_RCC_SetADCClockSource>:
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80023f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023fc:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002400:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4313      	orrs	r3, r2
 8002408:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <LL_RCC_SetRTCClockSource>:
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002420:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002428:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800242c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4313      	orrs	r3, r2
 8002434:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <LL_RCC_GetRTCClockSource>:
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002448:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800244c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002450:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8002454:	4618      	mov	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <LL_RCC_ForceBackupDomainReset>:
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002462:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800246a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800246e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002472:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002476:	bf00      	nop
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002484:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800248c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002490:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002494:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <LL_RCC_PLLSAI1_Enable>:
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80024a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80024b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80024b4:	6013      	str	r3, [r2, #0]
}
 80024b6:	bf00      	nop
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <LL_RCC_PLLSAI1_Disable>:
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80024c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80024ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80024d2:	6013      	str	r3, [r2, #0]
}
 80024d4:	bf00      	nop
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <LL_RCC_PLLSAI1_IsReady>:
{
 80024de:	b480      	push	{r7}
 80024e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80024e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024f0:	d101      	bne.n	80024f6 <LL_RCC_PLLSAI1_IsReady+0x18>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b088      	sub	sp, #32
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800250a:	2300      	movs	r3, #0
 800250c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800250e:	2300      	movs	r3, #0
 8002510:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800251a:	2b00      	cmp	r3, #0
 800251c:	d034      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002526:	d021      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002528:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800252c:	d81b      	bhi.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800252e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002532:	d01d      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002534:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002538:	d815      	bhi.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00b      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800253e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002542:	d110      	bne.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002544:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800254e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002552:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002554:	e00d      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3304      	adds	r3, #4
 800255a:	4618      	mov	r0, r3
 800255c:	f000 f947 	bl	80027ee <RCCEx_PLLSAI1_ConfigNP>
 8002560:	4603      	mov	r3, r0
 8002562:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002564:	e005      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	77fb      	strb	r3, [r7, #31]
        break;
 800256a:	e002      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800256c:	bf00      	nop
 800256e:	e000      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002570:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002572:	7ffb      	ldrb	r3, [r7, #31]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d105      	bne.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff fee8 	bl	8002352 <LL_RCC_SetSAIClockSource>
 8002582:	e001      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002584:	7ffb      	ldrb	r3, [r7, #31]
 8002586:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002590:	2b00      	cmp	r3, #0
 8002592:	d046      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002594:	f7ff ff56 	bl	8002444 <LL_RCC_GetRTCClockSource>
 8002598:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d03c      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80025a4:	f7fe fcac 	bl	8000f00 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d105      	bne.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff ff30 	bl	8002418 <LL_RCC_SetRTCClockSource>
 80025b8:	e02e      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80025ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80025c4:	f7ff ff4b 	bl	800245e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80025c8:	f7ff ff5a 	bl	8002480 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d6:	4313      	orrs	r3, r2
 80025d8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80025da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80025e4:	f7ff fdf0 	bl	80021c8 <LL_RCC_LSE_IsEnabled>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d114      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025ee:	f7fe f9df 	bl	80009b0 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80025f4:	e00b      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f6:	f7fe f9db 	bl	80009b0 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002604:	4293      	cmp	r3, r2
 8002606:	d902      	bls.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	77fb      	strb	r3, [r7, #31]
              break;
 800260c:	e004      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800260e:	f7ff fded 	bl	80021ec <LL_RCC_LSE_IsReady>
 8002612:	4603      	mov	r3, r0
 8002614:	2b01      	cmp	r3, #1
 8002616:	d1ee      	bne.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002618:	7ffb      	ldrb	r3, [r7, #31]
 800261a:	77bb      	strb	r3, [r7, #30]
 800261c:	e001      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800261e:	7ffb      	ldrb	r3, [r7, #31]
 8002620:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d004      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fe2a 	bl	800228c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d004      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff fe35 	bl	80022b8 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0310 	and.w	r3, r3, #16
 8002656:	2b00      	cmp	r3, #0
 8002658:	d004      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fe5d 	bl	800231e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0320 	and.w	r3, r3, #32
 800266c:	2b00      	cmp	r3, #0
 800266e:	d004      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fe52 	bl	800231e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	2b00      	cmp	r3, #0
 8002684:	d004      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff fe2a 	bl	80022e4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b00      	cmp	r3, #0
 800269a:	d004      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff fe1f 	bl	80022e4 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d022      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff fe8d 	bl	80023d6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026c4:	d107      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80026c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026d4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026de:	d10b      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3304      	adds	r3, #4
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 f8dd 	bl	80028a4 <RCCEx_PLLSAI1_ConfigNQ>
 80026ea:	4603      	mov	r3, r0
 80026ec:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80026ee:	7ffb      	ldrb	r3, [r7, #31]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80026f4:	7ffb      	ldrb	r3, [r7, #31]
 80026f6:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002700:	2b00      	cmp	r3, #0
 8002702:	d02b      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002708:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800270c:	d008      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002712:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002716:	d003      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800271c:	2b00      	cmp	r3, #0
 800271e:	d105      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff fe2a 	bl	800237e <LL_RCC_SetRNGClockSource>
 800272a:	e00a      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002730:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	2000      	movs	r0, #0
 8002738:	f7ff fe21 	bl	800237e <LL_RCC_SetRNGClockSource>
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f7ff fe34 	bl	80023aa <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002746:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800274a:	d107      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800274c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002756:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800275a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002764:	2b00      	cmp	r3, #0
 8002766:	d022      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff fe3d 	bl	80023ec <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002776:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800277a:	d107      	bne.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800277c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002786:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800278a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002790:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002794:	d10b      	bne.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3304      	adds	r3, #4
 800279a:	4618      	mov	r0, r3
 800279c:	f000 f8dd 	bl	800295a <RCCEx_PLLSAI1_ConfigNR>
 80027a0:	4603      	mov	r3, r0
 80027a2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80027a4:	7ffb      	ldrb	r3, [r7, #31]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80027aa:	7ffb      	ldrb	r3, [r7, #31]
 80027ac:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d004      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff fd26 	bl	8002210 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d009      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff fd45 	bl	8002264 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fd2c 	bl	800223c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80027e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3720      	adds	r7, #32
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b084      	sub	sp, #16
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80027fa:	f7ff fe61 	bl	80024c0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80027fe:	f7fe f8d7 	bl	80009b0 <HAL_GetTick>
 8002802:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002804:	e009      	b.n	800281a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002806:	f7fe f8d3 	bl	80009b0 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d902      	bls.n	800281a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	73fb      	strb	r3, [r7, #15]
      break;
 8002818:	e004      	b.n	8002824 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800281a:	f7ff fe60 	bl	80024de <LL_RCC_PLLSAI1_IsReady>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1f0      	bne.n	8002806 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d137      	bne.n	800289a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800282a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	021b      	lsls	r3, r3, #8
 800283a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800283e:	4313      	orrs	r3, r2
 8002840:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002842:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002854:	4313      	orrs	r3, r2
 8002856:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002858:	f7ff fe23 	bl	80024a2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800285c:	f7fe f8a8 	bl	80009b0 <HAL_GetTick>
 8002860:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002862:	e009      	b.n	8002878 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002864:	f7fe f8a4 	bl	80009b0 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d902      	bls.n	8002878 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	73fb      	strb	r3, [r7, #15]
        break;
 8002876:	e004      	b.n	8002882 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002878:	f7ff fe31 	bl	80024de <LL_RCC_PLLSAI1_IsReady>
 800287c:	4603      	mov	r3, r0
 800287e:	2b01      	cmp	r3, #1
 8002880:	d1f0      	bne.n	8002864 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d108      	bne.n	800289a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002888:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800288c:	691a      	ldr	r2, [r3, #16]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002896:	4313      	orrs	r3, r2
 8002898:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800289a:	7bfb      	ldrb	r3, [r7, #15]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80028b0:	f7ff fe06 	bl	80024c0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80028b4:	f7fe f87c 	bl	80009b0 <HAL_GetTick>
 80028b8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80028ba:	e009      	b.n	80028d0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028bc:	f7fe f878 	bl	80009b0 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d902      	bls.n	80028d0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	73fb      	strb	r3, [r7, #15]
      break;
 80028ce:	e004      	b.n	80028da <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80028d0:	f7ff fe05 	bl	80024de <LL_RCC_PLLSAI1_IsReady>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80028da:	7bfb      	ldrb	r3, [r7, #15]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d137      	bne.n	8002950 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80028e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	021b      	lsls	r3, r3, #8
 80028f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028f4:	4313      	orrs	r3, r2
 80028f6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80028f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800290a:	4313      	orrs	r3, r2
 800290c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800290e:	f7ff fdc8 	bl	80024a2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002912:	f7fe f84d 	bl	80009b0 <HAL_GetTick>
 8002916:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002918:	e009      	b.n	800292e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800291a:	f7fe f849 	bl	80009b0 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d902      	bls.n	800292e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	73fb      	strb	r3, [r7, #15]
        break;
 800292c:	e004      	b.n	8002938 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800292e:	f7ff fdd6 	bl	80024de <LL_RCC_PLLSAI1_IsReady>
 8002932:	4603      	mov	r3, r0
 8002934:	2b01      	cmp	r3, #1
 8002936:	d1f0      	bne.n	800291a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d108      	bne.n	8002950 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800293e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800294c:	4313      	orrs	r3, r2
 800294e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002950:	7bfb      	ldrb	r3, [r7, #15]
}
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b084      	sub	sp, #16
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002966:	f7ff fdab 	bl	80024c0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800296a:	f7fe f821 	bl	80009b0 <HAL_GetTick>
 800296e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002970:	e009      	b.n	8002986 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002972:	f7fe f81d 	bl	80009b0 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d902      	bls.n	8002986 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	73fb      	strb	r3, [r7, #15]
      break;
 8002984:	e004      	b.n	8002990 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002986:	f7ff fdaa 	bl	80024de <LL_RCC_PLLSAI1_IsReady>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1f0      	bne.n	8002972 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d137      	bne.n	8002a06 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002996:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	021b      	lsls	r3, r3, #8
 80029a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029aa:	4313      	orrs	r3, r2
 80029ac:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80029ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029c0:	4313      	orrs	r3, r2
 80029c2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80029c4:	f7ff fd6d 	bl	80024a2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029c8:	f7fd fff2 	bl	80009b0 <HAL_GetTick>
 80029cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80029ce:	e009      	b.n	80029e4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029d0:	f7fd ffee 	bl	80009b0 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d902      	bls.n	80029e4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	73fb      	strb	r3, [r7, #15]
        break;
 80029e2:	e004      	b.n	80029ee <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80029e4:	f7ff fd7b 	bl	80024de <LL_RCC_PLLSAI1_IsReady>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d1f0      	bne.n	80029d0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d108      	bne.n	8002a06 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80029f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029f8:	691a      	ldr	r2, [r3, #16]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a02:	4313      	orrs	r3, r2
 8002a04:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e095      	b.n	8002b4e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d108      	bne.n	8002a3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a32:	d009      	beq.n	8002a48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	61da      	str	r2, [r3, #28]
 8002a3a:	e005      	b.n	8002a48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d106      	bne.n	8002a68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7fd fdc4 	bl	80005f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a88:	d902      	bls.n	8002a90 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	e002      	b.n	8002a96 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a94:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002a9e:	d007      	beq.n	8002ab0 <HAL_SPI_Init+0xa0>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002aa8:	d002      	beq.n	8002ab0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002af2:	ea42 0103 	orr.w	r1, r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002afa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	0c1b      	lsrs	r3, r3, #16
 8002b0c:	f003 0204 	and.w	r2, r3, #4
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b14:	f003 0310 	and.w	r3, r3, #16
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002b2c:	ea42 0103 	orr.w	r1, r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b08a      	sub	sp, #40	@ 0x28
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	60f8      	str	r0, [r7, #12]
 8002b5e:	60b9      	str	r1, [r7, #8]
 8002b60:	607a      	str	r2, [r7, #4]
 8002b62:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b64:	2301      	movs	r3, #1
 8002b66:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b68:	f7fd ff22 	bl	80009b0 <HAL_GetTick>
 8002b6c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002b74:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002b7c:	887b      	ldrh	r3, [r7, #2]
 8002b7e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8002b80:	887b      	ldrh	r3, [r7, #2]
 8002b82:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b84:	7ffb      	ldrb	r3, [r7, #31]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d00c      	beq.n	8002ba4 <HAL_SPI_TransmitReceive+0x4e>
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b90:	d106      	bne.n	8002ba0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d102      	bne.n	8002ba0 <HAL_SPI_TransmitReceive+0x4a>
 8002b9a:	7ffb      	ldrb	r3, [r7, #31]
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d001      	beq.n	8002ba4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e1f3      	b.n	8002f8c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d005      	beq.n	8002bb6 <HAL_SPI_TransmitReceive+0x60>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d002      	beq.n	8002bb6 <HAL_SPI_TransmitReceive+0x60>
 8002bb0:	887b      	ldrh	r3, [r7, #2]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e1e8      	b.n	8002f8c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_SPI_TransmitReceive+0x72>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e1e1      	b.n	8002f8c <HAL_SPI_TransmitReceive+0x436>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d003      	beq.n	8002be4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2205      	movs	r2, #5
 8002be0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	887a      	ldrh	r2, [r7, #2]
 8002bf4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	887a      	ldrh	r2, [r7, #2]
 8002bfc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	887a      	ldrh	r2, [r7, #2]
 8002c0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	887a      	ldrh	r2, [r7, #2]
 8002c10:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c26:	d802      	bhi.n	8002c2e <HAL_SPI_TransmitReceive+0xd8>
 8002c28:	8abb      	ldrh	r3, [r7, #20]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d908      	bls.n	8002c40 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	e007      	b.n	8002c50 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002c4e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c5a:	2b40      	cmp	r3, #64	@ 0x40
 8002c5c:	d007      	beq.n	8002c6e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c76:	f240 8083 	bls.w	8002d80 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <HAL_SPI_TransmitReceive+0x132>
 8002c82:	8afb      	ldrh	r3, [r7, #22]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d16f      	bne.n	8002d68 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c8c:	881a      	ldrh	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c98:	1c9a      	adds	r2, r3, #2
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cac:	e05c      	b.n	8002d68 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d11b      	bne.n	8002cf4 <HAL_SPI_TransmitReceive+0x19e>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d016      	beq.n	8002cf4 <HAL_SPI_TransmitReceive+0x19e>
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d113      	bne.n	8002cf4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd0:	881a      	ldrh	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cdc:	1c9a      	adds	r2, r3, #2
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d11c      	bne.n	8002d3c <HAL_SPI_TransmitReceive+0x1e6>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d016      	beq.n	8002d3c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68da      	ldr	r2, [r3, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d18:	b292      	uxth	r2, r2
 8002d1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d20:	1c9a      	adds	r2, r3, #2
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d3c:	f7fd fe38 	bl	80009b0 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d80d      	bhi.n	8002d68 <HAL_SPI_TransmitReceive+0x212>
 8002d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d52:	d009      	beq.n	8002d68 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e111      	b.n	8002f8c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d19d      	bne.n	8002cae <HAL_SPI_TransmitReceive+0x158>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d197      	bne.n	8002cae <HAL_SPI_TransmitReceive+0x158>
 8002d7e:	e0e5      	b.n	8002f4c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_SPI_TransmitReceive+0x23a>
 8002d88:	8afb      	ldrh	r3, [r7, #22]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	f040 80d1 	bne.w	8002f32 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d912      	bls.n	8002dc0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d9e:	881a      	ldrh	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002daa:	1c9a      	adds	r2, r3, #2
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	3b02      	subs	r3, #2
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002dbe:	e0b8      	b.n	8002f32 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	330c      	adds	r3, #12
 8002dca:	7812      	ldrb	r2, [r2, #0]
 8002dcc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd2:	1c5a      	adds	r2, r3, #1
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	3b01      	subs	r3, #1
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002de6:	e0a4      	b.n	8002f32 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d134      	bne.n	8002e60 <HAL_SPI_TransmitReceive+0x30a>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d02f      	beq.n	8002e60 <HAL_SPI_TransmitReceive+0x30a>
 8002e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d12c      	bne.n	8002e60 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d912      	bls.n	8002e36 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e14:	881a      	ldrh	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e20:	1c9a      	adds	r2, r3, #2
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	3b02      	subs	r3, #2
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e34:	e012      	b.n	8002e5c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	330c      	adds	r3, #12
 8002e40:	7812      	ldrb	r2, [r2, #0]
 8002e42:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d148      	bne.n	8002f00 <HAL_SPI_TransmitReceive+0x3aa>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d042      	beq.n	8002f00 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d923      	bls.n	8002ece <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e90:	b292      	uxth	r2, r2
 8002e92:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e98:	1c9a      	adds	r2, r3, #2
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	3b02      	subs	r3, #2
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d81f      	bhi.n	8002efc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	e016      	b.n	8002efc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f103 020c 	add.w	r2, r3, #12
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eda:	7812      	ldrb	r2, [r2, #0]
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002efc:	2301      	movs	r3, #1
 8002efe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f00:	f7fd fd56 	bl	80009b0 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d803      	bhi.n	8002f18 <HAL_SPI_TransmitReceive+0x3c2>
 8002f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f16:	d102      	bne.n	8002f1e <HAL_SPI_TransmitReceive+0x3c8>
 8002f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d109      	bne.n	8002f32 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e02c      	b.n	8002f8c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f47f af55 	bne.w	8002de8 <HAL_SPI_TransmitReceive+0x292>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f47f af4e 	bne.w	8002de8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f4c:	6a3a      	ldr	r2, [r7, #32]
 8002f4e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 f93d 	bl	80031d0 <SPI_EndRxTxTransaction>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d008      	beq.n	8002f6e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e00e      	b.n	8002f8c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
  }
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3728      	adds	r7, #40	@ 0x28
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	603b      	str	r3, [r7, #0]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002fa4:	f7fd fd04 	bl	80009b0 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fac:	1a9b      	subs	r3, r3, r2
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002fb4:	f7fd fcfc 	bl	80009b0 <HAL_GetTick>
 8002fb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002fba:	4b39      	ldr	r3, [pc, #228]	@ (80030a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	015b      	lsls	r3, r3, #5
 8002fc0:	0d1b      	lsrs	r3, r3, #20
 8002fc2:	69fa      	ldr	r2, [r7, #28]
 8002fc4:	fb02 f303 	mul.w	r3, r2, r3
 8002fc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fca:	e054      	b.n	8003076 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002fd2:	d050      	beq.n	8003076 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fd4:	f7fd fcec 	bl	80009b0 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	69fa      	ldr	r2, [r7, #28]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d902      	bls.n	8002fea <SPI_WaitFlagStateUntilTimeout+0x56>
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d13d      	bne.n	8003066 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ff8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003002:	d111      	bne.n	8003028 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800300c:	d004      	beq.n	8003018 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003016:	d107      	bne.n	8003028 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003026:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003030:	d10f      	bne.n	8003052 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003050:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e017      	b.n	8003096 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	3b01      	subs	r3, #1
 8003074:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	4013      	ands	r3, r2
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	429a      	cmp	r2, r3
 8003084:	bf0c      	ite	eq
 8003086:	2301      	moveq	r3, #1
 8003088:	2300      	movne	r3, #0
 800308a:	b2db      	uxtb	r3, r3
 800308c:	461a      	mov	r2, r3
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	429a      	cmp	r2, r3
 8003092:	d19b      	bne.n	8002fcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3720      	adds	r7, #32
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	20000008 	.word	0x20000008

080030a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08a      	sub	sp, #40	@ 0x28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80030b6:	f7fd fc7b 	bl	80009b0 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030be:	1a9b      	subs	r3, r3, r2
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	4413      	add	r3, r2
 80030c4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80030c6:	f7fd fc73 	bl	80009b0 <HAL_GetTick>
 80030ca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	330c      	adds	r3, #12
 80030d2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80030d4:	4b3d      	ldr	r3, [pc, #244]	@ (80031cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	00da      	lsls	r2, r3, #3
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	0d1b      	lsrs	r3, r3, #20
 80030e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030e6:	fb02 f303 	mul.w	r3, r2, r3
 80030ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80030ec:	e060      	b.n	80031b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80030f4:	d107      	bne.n	8003106 <SPI_WaitFifoStateUntilTimeout+0x62>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d104      	bne.n	8003106 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	b2db      	uxtb	r3, r3
 8003102:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003104:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800310c:	d050      	beq.n	80031b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800310e:	f7fd fc4f 	bl	80009b0 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800311a:	429a      	cmp	r2, r3
 800311c:	d902      	bls.n	8003124 <SPI_WaitFifoStateUntilTimeout+0x80>
 800311e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003120:	2b00      	cmp	r3, #0
 8003122:	d13d      	bne.n	80031a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003132:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800313c:	d111      	bne.n	8003162 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003146:	d004      	beq.n	8003152 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003150:	d107      	bne.n	8003162 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003160:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003166:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800316a:	d10f      	bne.n	800318c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800318a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e010      	b.n	80031c2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	3b01      	subs	r3, #1
 80031ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	4013      	ands	r3, r2
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d196      	bne.n	80030ee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3728      	adds	r7, #40	@ 0x28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000008 	.word	0x20000008

080031d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af02      	add	r7, sp, #8
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f7ff ff5b 	bl	80030a4 <SPI_WaitFifoStateUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d007      	beq.n	8003204 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031f8:	f043 0220 	orr.w	r2, r3, #32
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e027      	b.n	8003254 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2200      	movs	r2, #0
 800320c:	2180      	movs	r1, #128	@ 0x80
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f7ff fec0 	bl	8002f94 <SPI_WaitFlagStateUntilTimeout>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d007      	beq.n	800322a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800321e:	f043 0220 	orr.w	r2, r3, #32
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e014      	b.n	8003254 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2200      	movs	r2, #0
 8003232:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f7ff ff34 	bl	80030a4 <SPI_WaitFifoStateUntilTimeout>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d007      	beq.n	8003252 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003246:	f043 0220 	orr.w	r2, r3, #32
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e000      	b.n	8003254 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <std>:
 800325c:	2300      	movs	r3, #0
 800325e:	b510      	push	{r4, lr}
 8003260:	4604      	mov	r4, r0
 8003262:	e9c0 3300 	strd	r3, r3, [r0]
 8003266:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800326a:	6083      	str	r3, [r0, #8]
 800326c:	8181      	strh	r1, [r0, #12]
 800326e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003270:	81c2      	strh	r2, [r0, #14]
 8003272:	6183      	str	r3, [r0, #24]
 8003274:	4619      	mov	r1, r3
 8003276:	2208      	movs	r2, #8
 8003278:	305c      	adds	r0, #92	@ 0x5c
 800327a:	f000 f906 	bl	800348a <memset>
 800327e:	4b0d      	ldr	r3, [pc, #52]	@ (80032b4 <std+0x58>)
 8003280:	6263      	str	r3, [r4, #36]	@ 0x24
 8003282:	4b0d      	ldr	r3, [pc, #52]	@ (80032b8 <std+0x5c>)
 8003284:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003286:	4b0d      	ldr	r3, [pc, #52]	@ (80032bc <std+0x60>)
 8003288:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800328a:	4b0d      	ldr	r3, [pc, #52]	@ (80032c0 <std+0x64>)
 800328c:	6323      	str	r3, [r4, #48]	@ 0x30
 800328e:	4b0d      	ldr	r3, [pc, #52]	@ (80032c4 <std+0x68>)
 8003290:	6224      	str	r4, [r4, #32]
 8003292:	429c      	cmp	r4, r3
 8003294:	d006      	beq.n	80032a4 <std+0x48>
 8003296:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800329a:	4294      	cmp	r4, r2
 800329c:	d002      	beq.n	80032a4 <std+0x48>
 800329e:	33d0      	adds	r3, #208	@ 0xd0
 80032a0:	429c      	cmp	r4, r3
 80032a2:	d105      	bne.n	80032b0 <std+0x54>
 80032a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80032a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032ac:	f000 b966 	b.w	800357c <__retarget_lock_init_recursive>
 80032b0:	bd10      	pop	{r4, pc}
 80032b2:	bf00      	nop
 80032b4:	08003405 	.word	0x08003405
 80032b8:	08003427 	.word	0x08003427
 80032bc:	0800345f 	.word	0x0800345f
 80032c0:	08003483 	.word	0x08003483
 80032c4:	200000f8 	.word	0x200000f8

080032c8 <stdio_exit_handler>:
 80032c8:	4a02      	ldr	r2, [pc, #8]	@ (80032d4 <stdio_exit_handler+0xc>)
 80032ca:	4903      	ldr	r1, [pc, #12]	@ (80032d8 <stdio_exit_handler+0x10>)
 80032cc:	4803      	ldr	r0, [pc, #12]	@ (80032dc <stdio_exit_handler+0x14>)
 80032ce:	f000 b869 	b.w	80033a4 <_fwalk_sglue>
 80032d2:	bf00      	nop
 80032d4:	20000014 	.word	0x20000014
 80032d8:	08003e19 	.word	0x08003e19
 80032dc:	20000024 	.word	0x20000024

080032e0 <cleanup_stdio>:
 80032e0:	6841      	ldr	r1, [r0, #4]
 80032e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003314 <cleanup_stdio+0x34>)
 80032e4:	4299      	cmp	r1, r3
 80032e6:	b510      	push	{r4, lr}
 80032e8:	4604      	mov	r4, r0
 80032ea:	d001      	beq.n	80032f0 <cleanup_stdio+0x10>
 80032ec:	f000 fd94 	bl	8003e18 <_fflush_r>
 80032f0:	68a1      	ldr	r1, [r4, #8]
 80032f2:	4b09      	ldr	r3, [pc, #36]	@ (8003318 <cleanup_stdio+0x38>)
 80032f4:	4299      	cmp	r1, r3
 80032f6:	d002      	beq.n	80032fe <cleanup_stdio+0x1e>
 80032f8:	4620      	mov	r0, r4
 80032fa:	f000 fd8d 	bl	8003e18 <_fflush_r>
 80032fe:	68e1      	ldr	r1, [r4, #12]
 8003300:	4b06      	ldr	r3, [pc, #24]	@ (800331c <cleanup_stdio+0x3c>)
 8003302:	4299      	cmp	r1, r3
 8003304:	d004      	beq.n	8003310 <cleanup_stdio+0x30>
 8003306:	4620      	mov	r0, r4
 8003308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800330c:	f000 bd84 	b.w	8003e18 <_fflush_r>
 8003310:	bd10      	pop	{r4, pc}
 8003312:	bf00      	nop
 8003314:	200000f8 	.word	0x200000f8
 8003318:	20000160 	.word	0x20000160
 800331c:	200001c8 	.word	0x200001c8

08003320 <global_stdio_init.part.0>:
 8003320:	b510      	push	{r4, lr}
 8003322:	4b0b      	ldr	r3, [pc, #44]	@ (8003350 <global_stdio_init.part.0+0x30>)
 8003324:	4c0b      	ldr	r4, [pc, #44]	@ (8003354 <global_stdio_init.part.0+0x34>)
 8003326:	4a0c      	ldr	r2, [pc, #48]	@ (8003358 <global_stdio_init.part.0+0x38>)
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	4620      	mov	r0, r4
 800332c:	2200      	movs	r2, #0
 800332e:	2104      	movs	r1, #4
 8003330:	f7ff ff94 	bl	800325c <std>
 8003334:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003338:	2201      	movs	r2, #1
 800333a:	2109      	movs	r1, #9
 800333c:	f7ff ff8e 	bl	800325c <std>
 8003340:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003344:	2202      	movs	r2, #2
 8003346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800334a:	2112      	movs	r1, #18
 800334c:	f7ff bf86 	b.w	800325c <std>
 8003350:	20000230 	.word	0x20000230
 8003354:	200000f8 	.word	0x200000f8
 8003358:	080032c9 	.word	0x080032c9

0800335c <__sfp_lock_acquire>:
 800335c:	4801      	ldr	r0, [pc, #4]	@ (8003364 <__sfp_lock_acquire+0x8>)
 800335e:	f000 b90e 	b.w	800357e <__retarget_lock_acquire_recursive>
 8003362:	bf00      	nop
 8003364:	20000239 	.word	0x20000239

08003368 <__sfp_lock_release>:
 8003368:	4801      	ldr	r0, [pc, #4]	@ (8003370 <__sfp_lock_release+0x8>)
 800336a:	f000 b909 	b.w	8003580 <__retarget_lock_release_recursive>
 800336e:	bf00      	nop
 8003370:	20000239 	.word	0x20000239

08003374 <__sinit>:
 8003374:	b510      	push	{r4, lr}
 8003376:	4604      	mov	r4, r0
 8003378:	f7ff fff0 	bl	800335c <__sfp_lock_acquire>
 800337c:	6a23      	ldr	r3, [r4, #32]
 800337e:	b11b      	cbz	r3, 8003388 <__sinit+0x14>
 8003380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003384:	f7ff bff0 	b.w	8003368 <__sfp_lock_release>
 8003388:	4b04      	ldr	r3, [pc, #16]	@ (800339c <__sinit+0x28>)
 800338a:	6223      	str	r3, [r4, #32]
 800338c:	4b04      	ldr	r3, [pc, #16]	@ (80033a0 <__sinit+0x2c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1f5      	bne.n	8003380 <__sinit+0xc>
 8003394:	f7ff ffc4 	bl	8003320 <global_stdio_init.part.0>
 8003398:	e7f2      	b.n	8003380 <__sinit+0xc>
 800339a:	bf00      	nop
 800339c:	080032e1 	.word	0x080032e1
 80033a0:	20000230 	.word	0x20000230

080033a4 <_fwalk_sglue>:
 80033a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033a8:	4607      	mov	r7, r0
 80033aa:	4688      	mov	r8, r1
 80033ac:	4614      	mov	r4, r2
 80033ae:	2600      	movs	r6, #0
 80033b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80033b4:	f1b9 0901 	subs.w	r9, r9, #1
 80033b8:	d505      	bpl.n	80033c6 <_fwalk_sglue+0x22>
 80033ba:	6824      	ldr	r4, [r4, #0]
 80033bc:	2c00      	cmp	r4, #0
 80033be:	d1f7      	bne.n	80033b0 <_fwalk_sglue+0xc>
 80033c0:	4630      	mov	r0, r6
 80033c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033c6:	89ab      	ldrh	r3, [r5, #12]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d907      	bls.n	80033dc <_fwalk_sglue+0x38>
 80033cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033d0:	3301      	adds	r3, #1
 80033d2:	d003      	beq.n	80033dc <_fwalk_sglue+0x38>
 80033d4:	4629      	mov	r1, r5
 80033d6:	4638      	mov	r0, r7
 80033d8:	47c0      	blx	r8
 80033da:	4306      	orrs	r6, r0
 80033dc:	3568      	adds	r5, #104	@ 0x68
 80033de:	e7e9      	b.n	80033b4 <_fwalk_sglue+0x10>

080033e0 <iprintf>:
 80033e0:	b40f      	push	{r0, r1, r2, r3}
 80033e2:	b507      	push	{r0, r1, r2, lr}
 80033e4:	4906      	ldr	r1, [pc, #24]	@ (8003400 <iprintf+0x20>)
 80033e6:	ab04      	add	r3, sp, #16
 80033e8:	6808      	ldr	r0, [r1, #0]
 80033ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80033ee:	6881      	ldr	r1, [r0, #8]
 80033f0:	9301      	str	r3, [sp, #4]
 80033f2:	f000 f9e9 	bl	80037c8 <_vfiprintf_r>
 80033f6:	b003      	add	sp, #12
 80033f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80033fc:	b004      	add	sp, #16
 80033fe:	4770      	bx	lr
 8003400:	20000020 	.word	0x20000020

08003404 <__sread>:
 8003404:	b510      	push	{r4, lr}
 8003406:	460c      	mov	r4, r1
 8003408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800340c:	f000 f868 	bl	80034e0 <_read_r>
 8003410:	2800      	cmp	r0, #0
 8003412:	bfab      	itete	ge
 8003414:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003416:	89a3      	ldrhlt	r3, [r4, #12]
 8003418:	181b      	addge	r3, r3, r0
 800341a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800341e:	bfac      	ite	ge
 8003420:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003422:	81a3      	strhlt	r3, [r4, #12]
 8003424:	bd10      	pop	{r4, pc}

08003426 <__swrite>:
 8003426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800342a:	461f      	mov	r7, r3
 800342c:	898b      	ldrh	r3, [r1, #12]
 800342e:	05db      	lsls	r3, r3, #23
 8003430:	4605      	mov	r5, r0
 8003432:	460c      	mov	r4, r1
 8003434:	4616      	mov	r6, r2
 8003436:	d505      	bpl.n	8003444 <__swrite+0x1e>
 8003438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800343c:	2302      	movs	r3, #2
 800343e:	2200      	movs	r2, #0
 8003440:	f000 f83c 	bl	80034bc <_lseek_r>
 8003444:	89a3      	ldrh	r3, [r4, #12]
 8003446:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800344a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800344e:	81a3      	strh	r3, [r4, #12]
 8003450:	4632      	mov	r2, r6
 8003452:	463b      	mov	r3, r7
 8003454:	4628      	mov	r0, r5
 8003456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800345a:	f000 b853 	b.w	8003504 <_write_r>

0800345e <__sseek>:
 800345e:	b510      	push	{r4, lr}
 8003460:	460c      	mov	r4, r1
 8003462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003466:	f000 f829 	bl	80034bc <_lseek_r>
 800346a:	1c43      	adds	r3, r0, #1
 800346c:	89a3      	ldrh	r3, [r4, #12]
 800346e:	bf15      	itete	ne
 8003470:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003472:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003476:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800347a:	81a3      	strheq	r3, [r4, #12]
 800347c:	bf18      	it	ne
 800347e:	81a3      	strhne	r3, [r4, #12]
 8003480:	bd10      	pop	{r4, pc}

08003482 <__sclose>:
 8003482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003486:	f000 b809 	b.w	800349c <_close_r>

0800348a <memset>:
 800348a:	4402      	add	r2, r0
 800348c:	4603      	mov	r3, r0
 800348e:	4293      	cmp	r3, r2
 8003490:	d100      	bne.n	8003494 <memset+0xa>
 8003492:	4770      	bx	lr
 8003494:	f803 1b01 	strb.w	r1, [r3], #1
 8003498:	e7f9      	b.n	800348e <memset+0x4>
	...

0800349c <_close_r>:
 800349c:	b538      	push	{r3, r4, r5, lr}
 800349e:	4d06      	ldr	r5, [pc, #24]	@ (80034b8 <_close_r+0x1c>)
 80034a0:	2300      	movs	r3, #0
 80034a2:	4604      	mov	r4, r0
 80034a4:	4608      	mov	r0, r1
 80034a6:	602b      	str	r3, [r5, #0]
 80034a8:	f7fd f91e 	bl	80006e8 <_close>
 80034ac:	1c43      	adds	r3, r0, #1
 80034ae:	d102      	bne.n	80034b6 <_close_r+0x1a>
 80034b0:	682b      	ldr	r3, [r5, #0]
 80034b2:	b103      	cbz	r3, 80034b6 <_close_r+0x1a>
 80034b4:	6023      	str	r3, [r4, #0]
 80034b6:	bd38      	pop	{r3, r4, r5, pc}
 80034b8:	20000234 	.word	0x20000234

080034bc <_lseek_r>:
 80034bc:	b538      	push	{r3, r4, r5, lr}
 80034be:	4d07      	ldr	r5, [pc, #28]	@ (80034dc <_lseek_r+0x20>)
 80034c0:	4604      	mov	r4, r0
 80034c2:	4608      	mov	r0, r1
 80034c4:	4611      	mov	r1, r2
 80034c6:	2200      	movs	r2, #0
 80034c8:	602a      	str	r2, [r5, #0]
 80034ca:	461a      	mov	r2, r3
 80034cc:	f7fd f933 	bl	8000736 <_lseek>
 80034d0:	1c43      	adds	r3, r0, #1
 80034d2:	d102      	bne.n	80034da <_lseek_r+0x1e>
 80034d4:	682b      	ldr	r3, [r5, #0]
 80034d6:	b103      	cbz	r3, 80034da <_lseek_r+0x1e>
 80034d8:	6023      	str	r3, [r4, #0]
 80034da:	bd38      	pop	{r3, r4, r5, pc}
 80034dc:	20000234 	.word	0x20000234

080034e0 <_read_r>:
 80034e0:	b538      	push	{r3, r4, r5, lr}
 80034e2:	4d07      	ldr	r5, [pc, #28]	@ (8003500 <_read_r+0x20>)
 80034e4:	4604      	mov	r4, r0
 80034e6:	4608      	mov	r0, r1
 80034e8:	4611      	mov	r1, r2
 80034ea:	2200      	movs	r2, #0
 80034ec:	602a      	str	r2, [r5, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	f7fd f8dd 	bl	80006ae <_read>
 80034f4:	1c43      	adds	r3, r0, #1
 80034f6:	d102      	bne.n	80034fe <_read_r+0x1e>
 80034f8:	682b      	ldr	r3, [r5, #0]
 80034fa:	b103      	cbz	r3, 80034fe <_read_r+0x1e>
 80034fc:	6023      	str	r3, [r4, #0]
 80034fe:	bd38      	pop	{r3, r4, r5, pc}
 8003500:	20000234 	.word	0x20000234

08003504 <_write_r>:
 8003504:	b538      	push	{r3, r4, r5, lr}
 8003506:	4d07      	ldr	r5, [pc, #28]	@ (8003524 <_write_r+0x20>)
 8003508:	4604      	mov	r4, r0
 800350a:	4608      	mov	r0, r1
 800350c:	4611      	mov	r1, r2
 800350e:	2200      	movs	r2, #0
 8003510:	602a      	str	r2, [r5, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	f7fd f810 	bl	8000538 <_write>
 8003518:	1c43      	adds	r3, r0, #1
 800351a:	d102      	bne.n	8003522 <_write_r+0x1e>
 800351c:	682b      	ldr	r3, [r5, #0]
 800351e:	b103      	cbz	r3, 8003522 <_write_r+0x1e>
 8003520:	6023      	str	r3, [r4, #0]
 8003522:	bd38      	pop	{r3, r4, r5, pc}
 8003524:	20000234 	.word	0x20000234

08003528 <__errno>:
 8003528:	4b01      	ldr	r3, [pc, #4]	@ (8003530 <__errno+0x8>)
 800352a:	6818      	ldr	r0, [r3, #0]
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	20000020 	.word	0x20000020

08003534 <__libc_init_array>:
 8003534:	b570      	push	{r4, r5, r6, lr}
 8003536:	4d0d      	ldr	r5, [pc, #52]	@ (800356c <__libc_init_array+0x38>)
 8003538:	4c0d      	ldr	r4, [pc, #52]	@ (8003570 <__libc_init_array+0x3c>)
 800353a:	1b64      	subs	r4, r4, r5
 800353c:	10a4      	asrs	r4, r4, #2
 800353e:	2600      	movs	r6, #0
 8003540:	42a6      	cmp	r6, r4
 8003542:	d109      	bne.n	8003558 <__libc_init_array+0x24>
 8003544:	4d0b      	ldr	r5, [pc, #44]	@ (8003574 <__libc_init_array+0x40>)
 8003546:	4c0c      	ldr	r4, [pc, #48]	@ (8003578 <__libc_init_array+0x44>)
 8003548:	f000 fdb6 	bl	80040b8 <_init>
 800354c:	1b64      	subs	r4, r4, r5
 800354e:	10a4      	asrs	r4, r4, #2
 8003550:	2600      	movs	r6, #0
 8003552:	42a6      	cmp	r6, r4
 8003554:	d105      	bne.n	8003562 <__libc_init_array+0x2e>
 8003556:	bd70      	pop	{r4, r5, r6, pc}
 8003558:	f855 3b04 	ldr.w	r3, [r5], #4
 800355c:	4798      	blx	r3
 800355e:	3601      	adds	r6, #1
 8003560:	e7ee      	b.n	8003540 <__libc_init_array+0xc>
 8003562:	f855 3b04 	ldr.w	r3, [r5], #4
 8003566:	4798      	blx	r3
 8003568:	3601      	adds	r6, #1
 800356a:	e7f2      	b.n	8003552 <__libc_init_array+0x1e>
 800356c:	08004224 	.word	0x08004224
 8003570:	08004224 	.word	0x08004224
 8003574:	08004224 	.word	0x08004224
 8003578:	08004228 	.word	0x08004228

0800357c <__retarget_lock_init_recursive>:
 800357c:	4770      	bx	lr

0800357e <__retarget_lock_acquire_recursive>:
 800357e:	4770      	bx	lr

08003580 <__retarget_lock_release_recursive>:
 8003580:	4770      	bx	lr
	...

08003584 <_free_r>:
 8003584:	b538      	push	{r3, r4, r5, lr}
 8003586:	4605      	mov	r5, r0
 8003588:	2900      	cmp	r1, #0
 800358a:	d041      	beq.n	8003610 <_free_r+0x8c>
 800358c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003590:	1f0c      	subs	r4, r1, #4
 8003592:	2b00      	cmp	r3, #0
 8003594:	bfb8      	it	lt
 8003596:	18e4      	addlt	r4, r4, r3
 8003598:	f000 f8e0 	bl	800375c <__malloc_lock>
 800359c:	4a1d      	ldr	r2, [pc, #116]	@ (8003614 <_free_r+0x90>)
 800359e:	6813      	ldr	r3, [r2, #0]
 80035a0:	b933      	cbnz	r3, 80035b0 <_free_r+0x2c>
 80035a2:	6063      	str	r3, [r4, #4]
 80035a4:	6014      	str	r4, [r2, #0]
 80035a6:	4628      	mov	r0, r5
 80035a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035ac:	f000 b8dc 	b.w	8003768 <__malloc_unlock>
 80035b0:	42a3      	cmp	r3, r4
 80035b2:	d908      	bls.n	80035c6 <_free_r+0x42>
 80035b4:	6820      	ldr	r0, [r4, #0]
 80035b6:	1821      	adds	r1, r4, r0
 80035b8:	428b      	cmp	r3, r1
 80035ba:	bf01      	itttt	eq
 80035bc:	6819      	ldreq	r1, [r3, #0]
 80035be:	685b      	ldreq	r3, [r3, #4]
 80035c0:	1809      	addeq	r1, r1, r0
 80035c2:	6021      	streq	r1, [r4, #0]
 80035c4:	e7ed      	b.n	80035a2 <_free_r+0x1e>
 80035c6:	461a      	mov	r2, r3
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	b10b      	cbz	r3, 80035d0 <_free_r+0x4c>
 80035cc:	42a3      	cmp	r3, r4
 80035ce:	d9fa      	bls.n	80035c6 <_free_r+0x42>
 80035d0:	6811      	ldr	r1, [r2, #0]
 80035d2:	1850      	adds	r0, r2, r1
 80035d4:	42a0      	cmp	r0, r4
 80035d6:	d10b      	bne.n	80035f0 <_free_r+0x6c>
 80035d8:	6820      	ldr	r0, [r4, #0]
 80035da:	4401      	add	r1, r0
 80035dc:	1850      	adds	r0, r2, r1
 80035de:	4283      	cmp	r3, r0
 80035e0:	6011      	str	r1, [r2, #0]
 80035e2:	d1e0      	bne.n	80035a6 <_free_r+0x22>
 80035e4:	6818      	ldr	r0, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	6053      	str	r3, [r2, #4]
 80035ea:	4408      	add	r0, r1
 80035ec:	6010      	str	r0, [r2, #0]
 80035ee:	e7da      	b.n	80035a6 <_free_r+0x22>
 80035f0:	d902      	bls.n	80035f8 <_free_r+0x74>
 80035f2:	230c      	movs	r3, #12
 80035f4:	602b      	str	r3, [r5, #0]
 80035f6:	e7d6      	b.n	80035a6 <_free_r+0x22>
 80035f8:	6820      	ldr	r0, [r4, #0]
 80035fa:	1821      	adds	r1, r4, r0
 80035fc:	428b      	cmp	r3, r1
 80035fe:	bf04      	itt	eq
 8003600:	6819      	ldreq	r1, [r3, #0]
 8003602:	685b      	ldreq	r3, [r3, #4]
 8003604:	6063      	str	r3, [r4, #4]
 8003606:	bf04      	itt	eq
 8003608:	1809      	addeq	r1, r1, r0
 800360a:	6021      	streq	r1, [r4, #0]
 800360c:	6054      	str	r4, [r2, #4]
 800360e:	e7ca      	b.n	80035a6 <_free_r+0x22>
 8003610:	bd38      	pop	{r3, r4, r5, pc}
 8003612:	bf00      	nop
 8003614:	20000240 	.word	0x20000240

08003618 <sbrk_aligned>:
 8003618:	b570      	push	{r4, r5, r6, lr}
 800361a:	4e0f      	ldr	r6, [pc, #60]	@ (8003658 <sbrk_aligned+0x40>)
 800361c:	460c      	mov	r4, r1
 800361e:	6831      	ldr	r1, [r6, #0]
 8003620:	4605      	mov	r5, r0
 8003622:	b911      	cbnz	r1, 800362a <sbrk_aligned+0x12>
 8003624:	f000 fcb4 	bl	8003f90 <_sbrk_r>
 8003628:	6030      	str	r0, [r6, #0]
 800362a:	4621      	mov	r1, r4
 800362c:	4628      	mov	r0, r5
 800362e:	f000 fcaf 	bl	8003f90 <_sbrk_r>
 8003632:	1c43      	adds	r3, r0, #1
 8003634:	d103      	bne.n	800363e <sbrk_aligned+0x26>
 8003636:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800363a:	4620      	mov	r0, r4
 800363c:	bd70      	pop	{r4, r5, r6, pc}
 800363e:	1cc4      	adds	r4, r0, #3
 8003640:	f024 0403 	bic.w	r4, r4, #3
 8003644:	42a0      	cmp	r0, r4
 8003646:	d0f8      	beq.n	800363a <sbrk_aligned+0x22>
 8003648:	1a21      	subs	r1, r4, r0
 800364a:	4628      	mov	r0, r5
 800364c:	f000 fca0 	bl	8003f90 <_sbrk_r>
 8003650:	3001      	adds	r0, #1
 8003652:	d1f2      	bne.n	800363a <sbrk_aligned+0x22>
 8003654:	e7ef      	b.n	8003636 <sbrk_aligned+0x1e>
 8003656:	bf00      	nop
 8003658:	2000023c 	.word	0x2000023c

0800365c <_malloc_r>:
 800365c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003660:	1ccd      	adds	r5, r1, #3
 8003662:	f025 0503 	bic.w	r5, r5, #3
 8003666:	3508      	adds	r5, #8
 8003668:	2d0c      	cmp	r5, #12
 800366a:	bf38      	it	cc
 800366c:	250c      	movcc	r5, #12
 800366e:	2d00      	cmp	r5, #0
 8003670:	4606      	mov	r6, r0
 8003672:	db01      	blt.n	8003678 <_malloc_r+0x1c>
 8003674:	42a9      	cmp	r1, r5
 8003676:	d904      	bls.n	8003682 <_malloc_r+0x26>
 8003678:	230c      	movs	r3, #12
 800367a:	6033      	str	r3, [r6, #0]
 800367c:	2000      	movs	r0, #0
 800367e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003682:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003758 <_malloc_r+0xfc>
 8003686:	f000 f869 	bl	800375c <__malloc_lock>
 800368a:	f8d8 3000 	ldr.w	r3, [r8]
 800368e:	461c      	mov	r4, r3
 8003690:	bb44      	cbnz	r4, 80036e4 <_malloc_r+0x88>
 8003692:	4629      	mov	r1, r5
 8003694:	4630      	mov	r0, r6
 8003696:	f7ff ffbf 	bl	8003618 <sbrk_aligned>
 800369a:	1c43      	adds	r3, r0, #1
 800369c:	4604      	mov	r4, r0
 800369e:	d158      	bne.n	8003752 <_malloc_r+0xf6>
 80036a0:	f8d8 4000 	ldr.w	r4, [r8]
 80036a4:	4627      	mov	r7, r4
 80036a6:	2f00      	cmp	r7, #0
 80036a8:	d143      	bne.n	8003732 <_malloc_r+0xd6>
 80036aa:	2c00      	cmp	r4, #0
 80036ac:	d04b      	beq.n	8003746 <_malloc_r+0xea>
 80036ae:	6823      	ldr	r3, [r4, #0]
 80036b0:	4639      	mov	r1, r7
 80036b2:	4630      	mov	r0, r6
 80036b4:	eb04 0903 	add.w	r9, r4, r3
 80036b8:	f000 fc6a 	bl	8003f90 <_sbrk_r>
 80036bc:	4581      	cmp	r9, r0
 80036be:	d142      	bne.n	8003746 <_malloc_r+0xea>
 80036c0:	6821      	ldr	r1, [r4, #0]
 80036c2:	1a6d      	subs	r5, r5, r1
 80036c4:	4629      	mov	r1, r5
 80036c6:	4630      	mov	r0, r6
 80036c8:	f7ff ffa6 	bl	8003618 <sbrk_aligned>
 80036cc:	3001      	adds	r0, #1
 80036ce:	d03a      	beq.n	8003746 <_malloc_r+0xea>
 80036d0:	6823      	ldr	r3, [r4, #0]
 80036d2:	442b      	add	r3, r5
 80036d4:	6023      	str	r3, [r4, #0]
 80036d6:	f8d8 3000 	ldr.w	r3, [r8]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	bb62      	cbnz	r2, 8003738 <_malloc_r+0xdc>
 80036de:	f8c8 7000 	str.w	r7, [r8]
 80036e2:	e00f      	b.n	8003704 <_malloc_r+0xa8>
 80036e4:	6822      	ldr	r2, [r4, #0]
 80036e6:	1b52      	subs	r2, r2, r5
 80036e8:	d420      	bmi.n	800372c <_malloc_r+0xd0>
 80036ea:	2a0b      	cmp	r2, #11
 80036ec:	d917      	bls.n	800371e <_malloc_r+0xc2>
 80036ee:	1961      	adds	r1, r4, r5
 80036f0:	42a3      	cmp	r3, r4
 80036f2:	6025      	str	r5, [r4, #0]
 80036f4:	bf18      	it	ne
 80036f6:	6059      	strne	r1, [r3, #4]
 80036f8:	6863      	ldr	r3, [r4, #4]
 80036fa:	bf08      	it	eq
 80036fc:	f8c8 1000 	streq.w	r1, [r8]
 8003700:	5162      	str	r2, [r4, r5]
 8003702:	604b      	str	r3, [r1, #4]
 8003704:	4630      	mov	r0, r6
 8003706:	f000 f82f 	bl	8003768 <__malloc_unlock>
 800370a:	f104 000b 	add.w	r0, r4, #11
 800370e:	1d23      	adds	r3, r4, #4
 8003710:	f020 0007 	bic.w	r0, r0, #7
 8003714:	1ac2      	subs	r2, r0, r3
 8003716:	bf1c      	itt	ne
 8003718:	1a1b      	subne	r3, r3, r0
 800371a:	50a3      	strne	r3, [r4, r2]
 800371c:	e7af      	b.n	800367e <_malloc_r+0x22>
 800371e:	6862      	ldr	r2, [r4, #4]
 8003720:	42a3      	cmp	r3, r4
 8003722:	bf0c      	ite	eq
 8003724:	f8c8 2000 	streq.w	r2, [r8]
 8003728:	605a      	strne	r2, [r3, #4]
 800372a:	e7eb      	b.n	8003704 <_malloc_r+0xa8>
 800372c:	4623      	mov	r3, r4
 800372e:	6864      	ldr	r4, [r4, #4]
 8003730:	e7ae      	b.n	8003690 <_malloc_r+0x34>
 8003732:	463c      	mov	r4, r7
 8003734:	687f      	ldr	r7, [r7, #4]
 8003736:	e7b6      	b.n	80036a6 <_malloc_r+0x4a>
 8003738:	461a      	mov	r2, r3
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	42a3      	cmp	r3, r4
 800373e:	d1fb      	bne.n	8003738 <_malloc_r+0xdc>
 8003740:	2300      	movs	r3, #0
 8003742:	6053      	str	r3, [r2, #4]
 8003744:	e7de      	b.n	8003704 <_malloc_r+0xa8>
 8003746:	230c      	movs	r3, #12
 8003748:	6033      	str	r3, [r6, #0]
 800374a:	4630      	mov	r0, r6
 800374c:	f000 f80c 	bl	8003768 <__malloc_unlock>
 8003750:	e794      	b.n	800367c <_malloc_r+0x20>
 8003752:	6005      	str	r5, [r0, #0]
 8003754:	e7d6      	b.n	8003704 <_malloc_r+0xa8>
 8003756:	bf00      	nop
 8003758:	20000240 	.word	0x20000240

0800375c <__malloc_lock>:
 800375c:	4801      	ldr	r0, [pc, #4]	@ (8003764 <__malloc_lock+0x8>)
 800375e:	f7ff bf0e 	b.w	800357e <__retarget_lock_acquire_recursive>
 8003762:	bf00      	nop
 8003764:	20000238 	.word	0x20000238

08003768 <__malloc_unlock>:
 8003768:	4801      	ldr	r0, [pc, #4]	@ (8003770 <__malloc_unlock+0x8>)
 800376a:	f7ff bf09 	b.w	8003580 <__retarget_lock_release_recursive>
 800376e:	bf00      	nop
 8003770:	20000238 	.word	0x20000238

08003774 <__sfputc_r>:
 8003774:	6893      	ldr	r3, [r2, #8]
 8003776:	3b01      	subs	r3, #1
 8003778:	2b00      	cmp	r3, #0
 800377a:	b410      	push	{r4}
 800377c:	6093      	str	r3, [r2, #8]
 800377e:	da08      	bge.n	8003792 <__sfputc_r+0x1e>
 8003780:	6994      	ldr	r4, [r2, #24]
 8003782:	42a3      	cmp	r3, r4
 8003784:	db01      	blt.n	800378a <__sfputc_r+0x16>
 8003786:	290a      	cmp	r1, #10
 8003788:	d103      	bne.n	8003792 <__sfputc_r+0x1e>
 800378a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800378e:	f000 bb6b 	b.w	8003e68 <__swbuf_r>
 8003792:	6813      	ldr	r3, [r2, #0]
 8003794:	1c58      	adds	r0, r3, #1
 8003796:	6010      	str	r0, [r2, #0]
 8003798:	7019      	strb	r1, [r3, #0]
 800379a:	4608      	mov	r0, r1
 800379c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <__sfputs_r>:
 80037a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a4:	4606      	mov	r6, r0
 80037a6:	460f      	mov	r7, r1
 80037a8:	4614      	mov	r4, r2
 80037aa:	18d5      	adds	r5, r2, r3
 80037ac:	42ac      	cmp	r4, r5
 80037ae:	d101      	bne.n	80037b4 <__sfputs_r+0x12>
 80037b0:	2000      	movs	r0, #0
 80037b2:	e007      	b.n	80037c4 <__sfputs_r+0x22>
 80037b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037b8:	463a      	mov	r2, r7
 80037ba:	4630      	mov	r0, r6
 80037bc:	f7ff ffda 	bl	8003774 <__sfputc_r>
 80037c0:	1c43      	adds	r3, r0, #1
 80037c2:	d1f3      	bne.n	80037ac <__sfputs_r+0xa>
 80037c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080037c8 <_vfiprintf_r>:
 80037c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037cc:	460d      	mov	r5, r1
 80037ce:	b09d      	sub	sp, #116	@ 0x74
 80037d0:	4614      	mov	r4, r2
 80037d2:	4698      	mov	r8, r3
 80037d4:	4606      	mov	r6, r0
 80037d6:	b118      	cbz	r0, 80037e0 <_vfiprintf_r+0x18>
 80037d8:	6a03      	ldr	r3, [r0, #32]
 80037da:	b90b      	cbnz	r3, 80037e0 <_vfiprintf_r+0x18>
 80037dc:	f7ff fdca 	bl	8003374 <__sinit>
 80037e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80037e2:	07d9      	lsls	r1, r3, #31
 80037e4:	d405      	bmi.n	80037f2 <_vfiprintf_r+0x2a>
 80037e6:	89ab      	ldrh	r3, [r5, #12]
 80037e8:	059a      	lsls	r2, r3, #22
 80037ea:	d402      	bmi.n	80037f2 <_vfiprintf_r+0x2a>
 80037ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80037ee:	f7ff fec6 	bl	800357e <__retarget_lock_acquire_recursive>
 80037f2:	89ab      	ldrh	r3, [r5, #12]
 80037f4:	071b      	lsls	r3, r3, #28
 80037f6:	d501      	bpl.n	80037fc <_vfiprintf_r+0x34>
 80037f8:	692b      	ldr	r3, [r5, #16]
 80037fa:	b99b      	cbnz	r3, 8003824 <_vfiprintf_r+0x5c>
 80037fc:	4629      	mov	r1, r5
 80037fe:	4630      	mov	r0, r6
 8003800:	f000 fb70 	bl	8003ee4 <__swsetup_r>
 8003804:	b170      	cbz	r0, 8003824 <_vfiprintf_r+0x5c>
 8003806:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003808:	07dc      	lsls	r4, r3, #31
 800380a:	d504      	bpl.n	8003816 <_vfiprintf_r+0x4e>
 800380c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003810:	b01d      	add	sp, #116	@ 0x74
 8003812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003816:	89ab      	ldrh	r3, [r5, #12]
 8003818:	0598      	lsls	r0, r3, #22
 800381a:	d4f7      	bmi.n	800380c <_vfiprintf_r+0x44>
 800381c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800381e:	f7ff feaf 	bl	8003580 <__retarget_lock_release_recursive>
 8003822:	e7f3      	b.n	800380c <_vfiprintf_r+0x44>
 8003824:	2300      	movs	r3, #0
 8003826:	9309      	str	r3, [sp, #36]	@ 0x24
 8003828:	2320      	movs	r3, #32
 800382a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800382e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003832:	2330      	movs	r3, #48	@ 0x30
 8003834:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80039e4 <_vfiprintf_r+0x21c>
 8003838:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800383c:	f04f 0901 	mov.w	r9, #1
 8003840:	4623      	mov	r3, r4
 8003842:	469a      	mov	sl, r3
 8003844:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003848:	b10a      	cbz	r2, 800384e <_vfiprintf_r+0x86>
 800384a:	2a25      	cmp	r2, #37	@ 0x25
 800384c:	d1f9      	bne.n	8003842 <_vfiprintf_r+0x7a>
 800384e:	ebba 0b04 	subs.w	fp, sl, r4
 8003852:	d00b      	beq.n	800386c <_vfiprintf_r+0xa4>
 8003854:	465b      	mov	r3, fp
 8003856:	4622      	mov	r2, r4
 8003858:	4629      	mov	r1, r5
 800385a:	4630      	mov	r0, r6
 800385c:	f7ff ffa1 	bl	80037a2 <__sfputs_r>
 8003860:	3001      	adds	r0, #1
 8003862:	f000 80a7 	beq.w	80039b4 <_vfiprintf_r+0x1ec>
 8003866:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003868:	445a      	add	r2, fp
 800386a:	9209      	str	r2, [sp, #36]	@ 0x24
 800386c:	f89a 3000 	ldrb.w	r3, [sl]
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 809f 	beq.w	80039b4 <_vfiprintf_r+0x1ec>
 8003876:	2300      	movs	r3, #0
 8003878:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800387c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003880:	f10a 0a01 	add.w	sl, sl, #1
 8003884:	9304      	str	r3, [sp, #16]
 8003886:	9307      	str	r3, [sp, #28]
 8003888:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800388c:	931a      	str	r3, [sp, #104]	@ 0x68
 800388e:	4654      	mov	r4, sl
 8003890:	2205      	movs	r2, #5
 8003892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003896:	4853      	ldr	r0, [pc, #332]	@ (80039e4 <_vfiprintf_r+0x21c>)
 8003898:	f7fc fc72 	bl	8000180 <memchr>
 800389c:	9a04      	ldr	r2, [sp, #16]
 800389e:	b9d8      	cbnz	r0, 80038d8 <_vfiprintf_r+0x110>
 80038a0:	06d1      	lsls	r1, r2, #27
 80038a2:	bf44      	itt	mi
 80038a4:	2320      	movmi	r3, #32
 80038a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80038aa:	0713      	lsls	r3, r2, #28
 80038ac:	bf44      	itt	mi
 80038ae:	232b      	movmi	r3, #43	@ 0x2b
 80038b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80038b4:	f89a 3000 	ldrb.w	r3, [sl]
 80038b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80038ba:	d015      	beq.n	80038e8 <_vfiprintf_r+0x120>
 80038bc:	9a07      	ldr	r2, [sp, #28]
 80038be:	4654      	mov	r4, sl
 80038c0:	2000      	movs	r0, #0
 80038c2:	f04f 0c0a 	mov.w	ip, #10
 80038c6:	4621      	mov	r1, r4
 80038c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038cc:	3b30      	subs	r3, #48	@ 0x30
 80038ce:	2b09      	cmp	r3, #9
 80038d0:	d94b      	bls.n	800396a <_vfiprintf_r+0x1a2>
 80038d2:	b1b0      	cbz	r0, 8003902 <_vfiprintf_r+0x13a>
 80038d4:	9207      	str	r2, [sp, #28]
 80038d6:	e014      	b.n	8003902 <_vfiprintf_r+0x13a>
 80038d8:	eba0 0308 	sub.w	r3, r0, r8
 80038dc:	fa09 f303 	lsl.w	r3, r9, r3
 80038e0:	4313      	orrs	r3, r2
 80038e2:	9304      	str	r3, [sp, #16]
 80038e4:	46a2      	mov	sl, r4
 80038e6:	e7d2      	b.n	800388e <_vfiprintf_r+0xc6>
 80038e8:	9b03      	ldr	r3, [sp, #12]
 80038ea:	1d19      	adds	r1, r3, #4
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	9103      	str	r1, [sp, #12]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	bfbb      	ittet	lt
 80038f4:	425b      	neglt	r3, r3
 80038f6:	f042 0202 	orrlt.w	r2, r2, #2
 80038fa:	9307      	strge	r3, [sp, #28]
 80038fc:	9307      	strlt	r3, [sp, #28]
 80038fe:	bfb8      	it	lt
 8003900:	9204      	strlt	r2, [sp, #16]
 8003902:	7823      	ldrb	r3, [r4, #0]
 8003904:	2b2e      	cmp	r3, #46	@ 0x2e
 8003906:	d10a      	bne.n	800391e <_vfiprintf_r+0x156>
 8003908:	7863      	ldrb	r3, [r4, #1]
 800390a:	2b2a      	cmp	r3, #42	@ 0x2a
 800390c:	d132      	bne.n	8003974 <_vfiprintf_r+0x1ac>
 800390e:	9b03      	ldr	r3, [sp, #12]
 8003910:	1d1a      	adds	r2, r3, #4
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	9203      	str	r2, [sp, #12]
 8003916:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800391a:	3402      	adds	r4, #2
 800391c:	9305      	str	r3, [sp, #20]
 800391e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80039f4 <_vfiprintf_r+0x22c>
 8003922:	7821      	ldrb	r1, [r4, #0]
 8003924:	2203      	movs	r2, #3
 8003926:	4650      	mov	r0, sl
 8003928:	f7fc fc2a 	bl	8000180 <memchr>
 800392c:	b138      	cbz	r0, 800393e <_vfiprintf_r+0x176>
 800392e:	9b04      	ldr	r3, [sp, #16]
 8003930:	eba0 000a 	sub.w	r0, r0, sl
 8003934:	2240      	movs	r2, #64	@ 0x40
 8003936:	4082      	lsls	r2, r0
 8003938:	4313      	orrs	r3, r2
 800393a:	3401      	adds	r4, #1
 800393c:	9304      	str	r3, [sp, #16]
 800393e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003942:	4829      	ldr	r0, [pc, #164]	@ (80039e8 <_vfiprintf_r+0x220>)
 8003944:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003948:	2206      	movs	r2, #6
 800394a:	f7fc fc19 	bl	8000180 <memchr>
 800394e:	2800      	cmp	r0, #0
 8003950:	d03f      	beq.n	80039d2 <_vfiprintf_r+0x20a>
 8003952:	4b26      	ldr	r3, [pc, #152]	@ (80039ec <_vfiprintf_r+0x224>)
 8003954:	bb1b      	cbnz	r3, 800399e <_vfiprintf_r+0x1d6>
 8003956:	9b03      	ldr	r3, [sp, #12]
 8003958:	3307      	adds	r3, #7
 800395a:	f023 0307 	bic.w	r3, r3, #7
 800395e:	3308      	adds	r3, #8
 8003960:	9303      	str	r3, [sp, #12]
 8003962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003964:	443b      	add	r3, r7
 8003966:	9309      	str	r3, [sp, #36]	@ 0x24
 8003968:	e76a      	b.n	8003840 <_vfiprintf_r+0x78>
 800396a:	fb0c 3202 	mla	r2, ip, r2, r3
 800396e:	460c      	mov	r4, r1
 8003970:	2001      	movs	r0, #1
 8003972:	e7a8      	b.n	80038c6 <_vfiprintf_r+0xfe>
 8003974:	2300      	movs	r3, #0
 8003976:	3401      	adds	r4, #1
 8003978:	9305      	str	r3, [sp, #20]
 800397a:	4619      	mov	r1, r3
 800397c:	f04f 0c0a 	mov.w	ip, #10
 8003980:	4620      	mov	r0, r4
 8003982:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003986:	3a30      	subs	r2, #48	@ 0x30
 8003988:	2a09      	cmp	r2, #9
 800398a:	d903      	bls.n	8003994 <_vfiprintf_r+0x1cc>
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0c6      	beq.n	800391e <_vfiprintf_r+0x156>
 8003990:	9105      	str	r1, [sp, #20]
 8003992:	e7c4      	b.n	800391e <_vfiprintf_r+0x156>
 8003994:	fb0c 2101 	mla	r1, ip, r1, r2
 8003998:	4604      	mov	r4, r0
 800399a:	2301      	movs	r3, #1
 800399c:	e7f0      	b.n	8003980 <_vfiprintf_r+0x1b8>
 800399e:	ab03      	add	r3, sp, #12
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	462a      	mov	r2, r5
 80039a4:	4b12      	ldr	r3, [pc, #72]	@ (80039f0 <_vfiprintf_r+0x228>)
 80039a6:	a904      	add	r1, sp, #16
 80039a8:	4630      	mov	r0, r6
 80039aa:	f3af 8000 	nop.w
 80039ae:	4607      	mov	r7, r0
 80039b0:	1c78      	adds	r0, r7, #1
 80039b2:	d1d6      	bne.n	8003962 <_vfiprintf_r+0x19a>
 80039b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80039b6:	07d9      	lsls	r1, r3, #31
 80039b8:	d405      	bmi.n	80039c6 <_vfiprintf_r+0x1fe>
 80039ba:	89ab      	ldrh	r3, [r5, #12]
 80039bc:	059a      	lsls	r2, r3, #22
 80039be:	d402      	bmi.n	80039c6 <_vfiprintf_r+0x1fe>
 80039c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80039c2:	f7ff fddd 	bl	8003580 <__retarget_lock_release_recursive>
 80039c6:	89ab      	ldrh	r3, [r5, #12]
 80039c8:	065b      	lsls	r3, r3, #25
 80039ca:	f53f af1f 	bmi.w	800380c <_vfiprintf_r+0x44>
 80039ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80039d0:	e71e      	b.n	8003810 <_vfiprintf_r+0x48>
 80039d2:	ab03      	add	r3, sp, #12
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	462a      	mov	r2, r5
 80039d8:	4b05      	ldr	r3, [pc, #20]	@ (80039f0 <_vfiprintf_r+0x228>)
 80039da:	a904      	add	r1, sp, #16
 80039dc:	4630      	mov	r0, r6
 80039de:	f000 f879 	bl	8003ad4 <_printf_i>
 80039e2:	e7e4      	b.n	80039ae <_vfiprintf_r+0x1e6>
 80039e4:	080041e8 	.word	0x080041e8
 80039e8:	080041f2 	.word	0x080041f2
 80039ec:	00000000 	.word	0x00000000
 80039f0:	080037a3 	.word	0x080037a3
 80039f4:	080041ee 	.word	0x080041ee

080039f8 <_printf_common>:
 80039f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039fc:	4616      	mov	r6, r2
 80039fe:	4698      	mov	r8, r3
 8003a00:	688a      	ldr	r2, [r1, #8]
 8003a02:	690b      	ldr	r3, [r1, #16]
 8003a04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	bfb8      	it	lt
 8003a0c:	4613      	movlt	r3, r2
 8003a0e:	6033      	str	r3, [r6, #0]
 8003a10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003a14:	4607      	mov	r7, r0
 8003a16:	460c      	mov	r4, r1
 8003a18:	b10a      	cbz	r2, 8003a1e <_printf_common+0x26>
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	6033      	str	r3, [r6, #0]
 8003a1e:	6823      	ldr	r3, [r4, #0]
 8003a20:	0699      	lsls	r1, r3, #26
 8003a22:	bf42      	ittt	mi
 8003a24:	6833      	ldrmi	r3, [r6, #0]
 8003a26:	3302      	addmi	r3, #2
 8003a28:	6033      	strmi	r3, [r6, #0]
 8003a2a:	6825      	ldr	r5, [r4, #0]
 8003a2c:	f015 0506 	ands.w	r5, r5, #6
 8003a30:	d106      	bne.n	8003a40 <_printf_common+0x48>
 8003a32:	f104 0a19 	add.w	sl, r4, #25
 8003a36:	68e3      	ldr	r3, [r4, #12]
 8003a38:	6832      	ldr	r2, [r6, #0]
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	42ab      	cmp	r3, r5
 8003a3e:	dc26      	bgt.n	8003a8e <_printf_common+0x96>
 8003a40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003a44:	6822      	ldr	r2, [r4, #0]
 8003a46:	3b00      	subs	r3, #0
 8003a48:	bf18      	it	ne
 8003a4a:	2301      	movne	r3, #1
 8003a4c:	0692      	lsls	r2, r2, #26
 8003a4e:	d42b      	bmi.n	8003aa8 <_printf_common+0xb0>
 8003a50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003a54:	4641      	mov	r1, r8
 8003a56:	4638      	mov	r0, r7
 8003a58:	47c8      	blx	r9
 8003a5a:	3001      	adds	r0, #1
 8003a5c:	d01e      	beq.n	8003a9c <_printf_common+0xa4>
 8003a5e:	6823      	ldr	r3, [r4, #0]
 8003a60:	6922      	ldr	r2, [r4, #16]
 8003a62:	f003 0306 	and.w	r3, r3, #6
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	bf02      	ittt	eq
 8003a6a:	68e5      	ldreq	r5, [r4, #12]
 8003a6c:	6833      	ldreq	r3, [r6, #0]
 8003a6e:	1aed      	subeq	r5, r5, r3
 8003a70:	68a3      	ldr	r3, [r4, #8]
 8003a72:	bf0c      	ite	eq
 8003a74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a78:	2500      	movne	r5, #0
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	bfc4      	itt	gt
 8003a7e:	1a9b      	subgt	r3, r3, r2
 8003a80:	18ed      	addgt	r5, r5, r3
 8003a82:	2600      	movs	r6, #0
 8003a84:	341a      	adds	r4, #26
 8003a86:	42b5      	cmp	r5, r6
 8003a88:	d11a      	bne.n	8003ac0 <_printf_common+0xc8>
 8003a8a:	2000      	movs	r0, #0
 8003a8c:	e008      	b.n	8003aa0 <_printf_common+0xa8>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	4652      	mov	r2, sl
 8003a92:	4641      	mov	r1, r8
 8003a94:	4638      	mov	r0, r7
 8003a96:	47c8      	blx	r9
 8003a98:	3001      	adds	r0, #1
 8003a9a:	d103      	bne.n	8003aa4 <_printf_common+0xac>
 8003a9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aa4:	3501      	adds	r5, #1
 8003aa6:	e7c6      	b.n	8003a36 <_printf_common+0x3e>
 8003aa8:	18e1      	adds	r1, r4, r3
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	2030      	movs	r0, #48	@ 0x30
 8003aae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003ab2:	4422      	add	r2, r4
 8003ab4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ab8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003abc:	3302      	adds	r3, #2
 8003abe:	e7c7      	b.n	8003a50 <_printf_common+0x58>
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	4622      	mov	r2, r4
 8003ac4:	4641      	mov	r1, r8
 8003ac6:	4638      	mov	r0, r7
 8003ac8:	47c8      	blx	r9
 8003aca:	3001      	adds	r0, #1
 8003acc:	d0e6      	beq.n	8003a9c <_printf_common+0xa4>
 8003ace:	3601      	adds	r6, #1
 8003ad0:	e7d9      	b.n	8003a86 <_printf_common+0x8e>
	...

08003ad4 <_printf_i>:
 8003ad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ad8:	7e0f      	ldrb	r7, [r1, #24]
 8003ada:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003adc:	2f78      	cmp	r7, #120	@ 0x78
 8003ade:	4691      	mov	r9, r2
 8003ae0:	4680      	mov	r8, r0
 8003ae2:	460c      	mov	r4, r1
 8003ae4:	469a      	mov	sl, r3
 8003ae6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003aea:	d807      	bhi.n	8003afc <_printf_i+0x28>
 8003aec:	2f62      	cmp	r7, #98	@ 0x62
 8003aee:	d80a      	bhi.n	8003b06 <_printf_i+0x32>
 8003af0:	2f00      	cmp	r7, #0
 8003af2:	f000 80d1 	beq.w	8003c98 <_printf_i+0x1c4>
 8003af6:	2f58      	cmp	r7, #88	@ 0x58
 8003af8:	f000 80b8 	beq.w	8003c6c <_printf_i+0x198>
 8003afc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003b04:	e03a      	b.n	8003b7c <_printf_i+0xa8>
 8003b06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003b0a:	2b15      	cmp	r3, #21
 8003b0c:	d8f6      	bhi.n	8003afc <_printf_i+0x28>
 8003b0e:	a101      	add	r1, pc, #4	@ (adr r1, 8003b14 <_printf_i+0x40>)
 8003b10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b14:	08003b6d 	.word	0x08003b6d
 8003b18:	08003b81 	.word	0x08003b81
 8003b1c:	08003afd 	.word	0x08003afd
 8003b20:	08003afd 	.word	0x08003afd
 8003b24:	08003afd 	.word	0x08003afd
 8003b28:	08003afd 	.word	0x08003afd
 8003b2c:	08003b81 	.word	0x08003b81
 8003b30:	08003afd 	.word	0x08003afd
 8003b34:	08003afd 	.word	0x08003afd
 8003b38:	08003afd 	.word	0x08003afd
 8003b3c:	08003afd 	.word	0x08003afd
 8003b40:	08003c7f 	.word	0x08003c7f
 8003b44:	08003bab 	.word	0x08003bab
 8003b48:	08003c39 	.word	0x08003c39
 8003b4c:	08003afd 	.word	0x08003afd
 8003b50:	08003afd 	.word	0x08003afd
 8003b54:	08003ca1 	.word	0x08003ca1
 8003b58:	08003afd 	.word	0x08003afd
 8003b5c:	08003bab 	.word	0x08003bab
 8003b60:	08003afd 	.word	0x08003afd
 8003b64:	08003afd 	.word	0x08003afd
 8003b68:	08003c41 	.word	0x08003c41
 8003b6c:	6833      	ldr	r3, [r6, #0]
 8003b6e:	1d1a      	adds	r2, r3, #4
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6032      	str	r2, [r6, #0]
 8003b74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e09c      	b.n	8003cba <_printf_i+0x1e6>
 8003b80:	6833      	ldr	r3, [r6, #0]
 8003b82:	6820      	ldr	r0, [r4, #0]
 8003b84:	1d19      	adds	r1, r3, #4
 8003b86:	6031      	str	r1, [r6, #0]
 8003b88:	0606      	lsls	r6, r0, #24
 8003b8a:	d501      	bpl.n	8003b90 <_printf_i+0xbc>
 8003b8c:	681d      	ldr	r5, [r3, #0]
 8003b8e:	e003      	b.n	8003b98 <_printf_i+0xc4>
 8003b90:	0645      	lsls	r5, r0, #25
 8003b92:	d5fb      	bpl.n	8003b8c <_printf_i+0xb8>
 8003b94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003b98:	2d00      	cmp	r5, #0
 8003b9a:	da03      	bge.n	8003ba4 <_printf_i+0xd0>
 8003b9c:	232d      	movs	r3, #45	@ 0x2d
 8003b9e:	426d      	negs	r5, r5
 8003ba0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ba4:	4858      	ldr	r0, [pc, #352]	@ (8003d08 <_printf_i+0x234>)
 8003ba6:	230a      	movs	r3, #10
 8003ba8:	e011      	b.n	8003bce <_printf_i+0xfa>
 8003baa:	6821      	ldr	r1, [r4, #0]
 8003bac:	6833      	ldr	r3, [r6, #0]
 8003bae:	0608      	lsls	r0, r1, #24
 8003bb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003bb4:	d402      	bmi.n	8003bbc <_printf_i+0xe8>
 8003bb6:	0649      	lsls	r1, r1, #25
 8003bb8:	bf48      	it	mi
 8003bba:	b2ad      	uxthmi	r5, r5
 8003bbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8003bbe:	4852      	ldr	r0, [pc, #328]	@ (8003d08 <_printf_i+0x234>)
 8003bc0:	6033      	str	r3, [r6, #0]
 8003bc2:	bf14      	ite	ne
 8003bc4:	230a      	movne	r3, #10
 8003bc6:	2308      	moveq	r3, #8
 8003bc8:	2100      	movs	r1, #0
 8003bca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003bce:	6866      	ldr	r6, [r4, #4]
 8003bd0:	60a6      	str	r6, [r4, #8]
 8003bd2:	2e00      	cmp	r6, #0
 8003bd4:	db05      	blt.n	8003be2 <_printf_i+0x10e>
 8003bd6:	6821      	ldr	r1, [r4, #0]
 8003bd8:	432e      	orrs	r6, r5
 8003bda:	f021 0104 	bic.w	r1, r1, #4
 8003bde:	6021      	str	r1, [r4, #0]
 8003be0:	d04b      	beq.n	8003c7a <_printf_i+0x1a6>
 8003be2:	4616      	mov	r6, r2
 8003be4:	fbb5 f1f3 	udiv	r1, r5, r3
 8003be8:	fb03 5711 	mls	r7, r3, r1, r5
 8003bec:	5dc7      	ldrb	r7, [r0, r7]
 8003bee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003bf2:	462f      	mov	r7, r5
 8003bf4:	42bb      	cmp	r3, r7
 8003bf6:	460d      	mov	r5, r1
 8003bf8:	d9f4      	bls.n	8003be4 <_printf_i+0x110>
 8003bfa:	2b08      	cmp	r3, #8
 8003bfc:	d10b      	bne.n	8003c16 <_printf_i+0x142>
 8003bfe:	6823      	ldr	r3, [r4, #0]
 8003c00:	07df      	lsls	r7, r3, #31
 8003c02:	d508      	bpl.n	8003c16 <_printf_i+0x142>
 8003c04:	6923      	ldr	r3, [r4, #16]
 8003c06:	6861      	ldr	r1, [r4, #4]
 8003c08:	4299      	cmp	r1, r3
 8003c0a:	bfde      	ittt	le
 8003c0c:	2330      	movle	r3, #48	@ 0x30
 8003c0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c12:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003c16:	1b92      	subs	r2, r2, r6
 8003c18:	6122      	str	r2, [r4, #16]
 8003c1a:	f8cd a000 	str.w	sl, [sp]
 8003c1e:	464b      	mov	r3, r9
 8003c20:	aa03      	add	r2, sp, #12
 8003c22:	4621      	mov	r1, r4
 8003c24:	4640      	mov	r0, r8
 8003c26:	f7ff fee7 	bl	80039f8 <_printf_common>
 8003c2a:	3001      	adds	r0, #1
 8003c2c:	d14a      	bne.n	8003cc4 <_printf_i+0x1f0>
 8003c2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c32:	b004      	add	sp, #16
 8003c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c38:	6823      	ldr	r3, [r4, #0]
 8003c3a:	f043 0320 	orr.w	r3, r3, #32
 8003c3e:	6023      	str	r3, [r4, #0]
 8003c40:	4832      	ldr	r0, [pc, #200]	@ (8003d0c <_printf_i+0x238>)
 8003c42:	2778      	movs	r7, #120	@ 0x78
 8003c44:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003c48:	6823      	ldr	r3, [r4, #0]
 8003c4a:	6831      	ldr	r1, [r6, #0]
 8003c4c:	061f      	lsls	r7, r3, #24
 8003c4e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003c52:	d402      	bmi.n	8003c5a <_printf_i+0x186>
 8003c54:	065f      	lsls	r7, r3, #25
 8003c56:	bf48      	it	mi
 8003c58:	b2ad      	uxthmi	r5, r5
 8003c5a:	6031      	str	r1, [r6, #0]
 8003c5c:	07d9      	lsls	r1, r3, #31
 8003c5e:	bf44      	itt	mi
 8003c60:	f043 0320 	orrmi.w	r3, r3, #32
 8003c64:	6023      	strmi	r3, [r4, #0]
 8003c66:	b11d      	cbz	r5, 8003c70 <_printf_i+0x19c>
 8003c68:	2310      	movs	r3, #16
 8003c6a:	e7ad      	b.n	8003bc8 <_printf_i+0xf4>
 8003c6c:	4826      	ldr	r0, [pc, #152]	@ (8003d08 <_printf_i+0x234>)
 8003c6e:	e7e9      	b.n	8003c44 <_printf_i+0x170>
 8003c70:	6823      	ldr	r3, [r4, #0]
 8003c72:	f023 0320 	bic.w	r3, r3, #32
 8003c76:	6023      	str	r3, [r4, #0]
 8003c78:	e7f6      	b.n	8003c68 <_printf_i+0x194>
 8003c7a:	4616      	mov	r6, r2
 8003c7c:	e7bd      	b.n	8003bfa <_printf_i+0x126>
 8003c7e:	6833      	ldr	r3, [r6, #0]
 8003c80:	6825      	ldr	r5, [r4, #0]
 8003c82:	6961      	ldr	r1, [r4, #20]
 8003c84:	1d18      	adds	r0, r3, #4
 8003c86:	6030      	str	r0, [r6, #0]
 8003c88:	062e      	lsls	r6, r5, #24
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	d501      	bpl.n	8003c92 <_printf_i+0x1be>
 8003c8e:	6019      	str	r1, [r3, #0]
 8003c90:	e002      	b.n	8003c98 <_printf_i+0x1c4>
 8003c92:	0668      	lsls	r0, r5, #25
 8003c94:	d5fb      	bpl.n	8003c8e <_printf_i+0x1ba>
 8003c96:	8019      	strh	r1, [r3, #0]
 8003c98:	2300      	movs	r3, #0
 8003c9a:	6123      	str	r3, [r4, #16]
 8003c9c:	4616      	mov	r6, r2
 8003c9e:	e7bc      	b.n	8003c1a <_printf_i+0x146>
 8003ca0:	6833      	ldr	r3, [r6, #0]
 8003ca2:	1d1a      	adds	r2, r3, #4
 8003ca4:	6032      	str	r2, [r6, #0]
 8003ca6:	681e      	ldr	r6, [r3, #0]
 8003ca8:	6862      	ldr	r2, [r4, #4]
 8003caa:	2100      	movs	r1, #0
 8003cac:	4630      	mov	r0, r6
 8003cae:	f7fc fa67 	bl	8000180 <memchr>
 8003cb2:	b108      	cbz	r0, 8003cb8 <_printf_i+0x1e4>
 8003cb4:	1b80      	subs	r0, r0, r6
 8003cb6:	6060      	str	r0, [r4, #4]
 8003cb8:	6863      	ldr	r3, [r4, #4]
 8003cba:	6123      	str	r3, [r4, #16]
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003cc2:	e7aa      	b.n	8003c1a <_printf_i+0x146>
 8003cc4:	6923      	ldr	r3, [r4, #16]
 8003cc6:	4632      	mov	r2, r6
 8003cc8:	4649      	mov	r1, r9
 8003cca:	4640      	mov	r0, r8
 8003ccc:	47d0      	blx	sl
 8003cce:	3001      	adds	r0, #1
 8003cd0:	d0ad      	beq.n	8003c2e <_printf_i+0x15a>
 8003cd2:	6823      	ldr	r3, [r4, #0]
 8003cd4:	079b      	lsls	r3, r3, #30
 8003cd6:	d413      	bmi.n	8003d00 <_printf_i+0x22c>
 8003cd8:	68e0      	ldr	r0, [r4, #12]
 8003cda:	9b03      	ldr	r3, [sp, #12]
 8003cdc:	4298      	cmp	r0, r3
 8003cde:	bfb8      	it	lt
 8003ce0:	4618      	movlt	r0, r3
 8003ce2:	e7a6      	b.n	8003c32 <_printf_i+0x15e>
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	4632      	mov	r2, r6
 8003ce8:	4649      	mov	r1, r9
 8003cea:	4640      	mov	r0, r8
 8003cec:	47d0      	blx	sl
 8003cee:	3001      	adds	r0, #1
 8003cf0:	d09d      	beq.n	8003c2e <_printf_i+0x15a>
 8003cf2:	3501      	adds	r5, #1
 8003cf4:	68e3      	ldr	r3, [r4, #12]
 8003cf6:	9903      	ldr	r1, [sp, #12]
 8003cf8:	1a5b      	subs	r3, r3, r1
 8003cfa:	42ab      	cmp	r3, r5
 8003cfc:	dcf2      	bgt.n	8003ce4 <_printf_i+0x210>
 8003cfe:	e7eb      	b.n	8003cd8 <_printf_i+0x204>
 8003d00:	2500      	movs	r5, #0
 8003d02:	f104 0619 	add.w	r6, r4, #25
 8003d06:	e7f5      	b.n	8003cf4 <_printf_i+0x220>
 8003d08:	080041f9 	.word	0x080041f9
 8003d0c:	0800420a 	.word	0x0800420a

08003d10 <__sflush_r>:
 8003d10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d18:	0716      	lsls	r6, r2, #28
 8003d1a:	4605      	mov	r5, r0
 8003d1c:	460c      	mov	r4, r1
 8003d1e:	d454      	bmi.n	8003dca <__sflush_r+0xba>
 8003d20:	684b      	ldr	r3, [r1, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	dc02      	bgt.n	8003d2c <__sflush_r+0x1c>
 8003d26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	dd48      	ble.n	8003dbe <__sflush_r+0xae>
 8003d2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003d2e:	2e00      	cmp	r6, #0
 8003d30:	d045      	beq.n	8003dbe <__sflush_r+0xae>
 8003d32:	2300      	movs	r3, #0
 8003d34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003d38:	682f      	ldr	r7, [r5, #0]
 8003d3a:	6a21      	ldr	r1, [r4, #32]
 8003d3c:	602b      	str	r3, [r5, #0]
 8003d3e:	d030      	beq.n	8003da2 <__sflush_r+0x92>
 8003d40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003d42:	89a3      	ldrh	r3, [r4, #12]
 8003d44:	0759      	lsls	r1, r3, #29
 8003d46:	d505      	bpl.n	8003d54 <__sflush_r+0x44>
 8003d48:	6863      	ldr	r3, [r4, #4]
 8003d4a:	1ad2      	subs	r2, r2, r3
 8003d4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003d4e:	b10b      	cbz	r3, 8003d54 <__sflush_r+0x44>
 8003d50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003d52:	1ad2      	subs	r2, r2, r3
 8003d54:	2300      	movs	r3, #0
 8003d56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003d58:	6a21      	ldr	r1, [r4, #32]
 8003d5a:	4628      	mov	r0, r5
 8003d5c:	47b0      	blx	r6
 8003d5e:	1c43      	adds	r3, r0, #1
 8003d60:	89a3      	ldrh	r3, [r4, #12]
 8003d62:	d106      	bne.n	8003d72 <__sflush_r+0x62>
 8003d64:	6829      	ldr	r1, [r5, #0]
 8003d66:	291d      	cmp	r1, #29
 8003d68:	d82b      	bhi.n	8003dc2 <__sflush_r+0xb2>
 8003d6a:	4a2a      	ldr	r2, [pc, #168]	@ (8003e14 <__sflush_r+0x104>)
 8003d6c:	40ca      	lsrs	r2, r1
 8003d6e:	07d6      	lsls	r6, r2, #31
 8003d70:	d527      	bpl.n	8003dc2 <__sflush_r+0xb2>
 8003d72:	2200      	movs	r2, #0
 8003d74:	6062      	str	r2, [r4, #4]
 8003d76:	04d9      	lsls	r1, r3, #19
 8003d78:	6922      	ldr	r2, [r4, #16]
 8003d7a:	6022      	str	r2, [r4, #0]
 8003d7c:	d504      	bpl.n	8003d88 <__sflush_r+0x78>
 8003d7e:	1c42      	adds	r2, r0, #1
 8003d80:	d101      	bne.n	8003d86 <__sflush_r+0x76>
 8003d82:	682b      	ldr	r3, [r5, #0]
 8003d84:	b903      	cbnz	r3, 8003d88 <__sflush_r+0x78>
 8003d86:	6560      	str	r0, [r4, #84]	@ 0x54
 8003d88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003d8a:	602f      	str	r7, [r5, #0]
 8003d8c:	b1b9      	cbz	r1, 8003dbe <__sflush_r+0xae>
 8003d8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003d92:	4299      	cmp	r1, r3
 8003d94:	d002      	beq.n	8003d9c <__sflush_r+0x8c>
 8003d96:	4628      	mov	r0, r5
 8003d98:	f7ff fbf4 	bl	8003584 <_free_r>
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003da0:	e00d      	b.n	8003dbe <__sflush_r+0xae>
 8003da2:	2301      	movs	r3, #1
 8003da4:	4628      	mov	r0, r5
 8003da6:	47b0      	blx	r6
 8003da8:	4602      	mov	r2, r0
 8003daa:	1c50      	adds	r0, r2, #1
 8003dac:	d1c9      	bne.n	8003d42 <__sflush_r+0x32>
 8003dae:	682b      	ldr	r3, [r5, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0c6      	beq.n	8003d42 <__sflush_r+0x32>
 8003db4:	2b1d      	cmp	r3, #29
 8003db6:	d001      	beq.n	8003dbc <__sflush_r+0xac>
 8003db8:	2b16      	cmp	r3, #22
 8003dba:	d11e      	bne.n	8003dfa <__sflush_r+0xea>
 8003dbc:	602f      	str	r7, [r5, #0]
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	e022      	b.n	8003e08 <__sflush_r+0xf8>
 8003dc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003dc6:	b21b      	sxth	r3, r3
 8003dc8:	e01b      	b.n	8003e02 <__sflush_r+0xf2>
 8003dca:	690f      	ldr	r7, [r1, #16]
 8003dcc:	2f00      	cmp	r7, #0
 8003dce:	d0f6      	beq.n	8003dbe <__sflush_r+0xae>
 8003dd0:	0793      	lsls	r3, r2, #30
 8003dd2:	680e      	ldr	r6, [r1, #0]
 8003dd4:	bf08      	it	eq
 8003dd6:	694b      	ldreq	r3, [r1, #20]
 8003dd8:	600f      	str	r7, [r1, #0]
 8003dda:	bf18      	it	ne
 8003ddc:	2300      	movne	r3, #0
 8003dde:	eba6 0807 	sub.w	r8, r6, r7
 8003de2:	608b      	str	r3, [r1, #8]
 8003de4:	f1b8 0f00 	cmp.w	r8, #0
 8003de8:	dde9      	ble.n	8003dbe <__sflush_r+0xae>
 8003dea:	6a21      	ldr	r1, [r4, #32]
 8003dec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003dee:	4643      	mov	r3, r8
 8003df0:	463a      	mov	r2, r7
 8003df2:	4628      	mov	r0, r5
 8003df4:	47b0      	blx	r6
 8003df6:	2800      	cmp	r0, #0
 8003df8:	dc08      	bgt.n	8003e0c <__sflush_r+0xfc>
 8003dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e02:	81a3      	strh	r3, [r4, #12]
 8003e04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e0c:	4407      	add	r7, r0
 8003e0e:	eba8 0800 	sub.w	r8, r8, r0
 8003e12:	e7e7      	b.n	8003de4 <__sflush_r+0xd4>
 8003e14:	20400001 	.word	0x20400001

08003e18 <_fflush_r>:
 8003e18:	b538      	push	{r3, r4, r5, lr}
 8003e1a:	690b      	ldr	r3, [r1, #16]
 8003e1c:	4605      	mov	r5, r0
 8003e1e:	460c      	mov	r4, r1
 8003e20:	b913      	cbnz	r3, 8003e28 <_fflush_r+0x10>
 8003e22:	2500      	movs	r5, #0
 8003e24:	4628      	mov	r0, r5
 8003e26:	bd38      	pop	{r3, r4, r5, pc}
 8003e28:	b118      	cbz	r0, 8003e32 <_fflush_r+0x1a>
 8003e2a:	6a03      	ldr	r3, [r0, #32]
 8003e2c:	b90b      	cbnz	r3, 8003e32 <_fflush_r+0x1a>
 8003e2e:	f7ff faa1 	bl	8003374 <__sinit>
 8003e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0f3      	beq.n	8003e22 <_fflush_r+0xa>
 8003e3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003e3c:	07d0      	lsls	r0, r2, #31
 8003e3e:	d404      	bmi.n	8003e4a <_fflush_r+0x32>
 8003e40:	0599      	lsls	r1, r3, #22
 8003e42:	d402      	bmi.n	8003e4a <_fflush_r+0x32>
 8003e44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e46:	f7ff fb9a 	bl	800357e <__retarget_lock_acquire_recursive>
 8003e4a:	4628      	mov	r0, r5
 8003e4c:	4621      	mov	r1, r4
 8003e4e:	f7ff ff5f 	bl	8003d10 <__sflush_r>
 8003e52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e54:	07da      	lsls	r2, r3, #31
 8003e56:	4605      	mov	r5, r0
 8003e58:	d4e4      	bmi.n	8003e24 <_fflush_r+0xc>
 8003e5a:	89a3      	ldrh	r3, [r4, #12]
 8003e5c:	059b      	lsls	r3, r3, #22
 8003e5e:	d4e1      	bmi.n	8003e24 <_fflush_r+0xc>
 8003e60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e62:	f7ff fb8d 	bl	8003580 <__retarget_lock_release_recursive>
 8003e66:	e7dd      	b.n	8003e24 <_fflush_r+0xc>

08003e68 <__swbuf_r>:
 8003e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6a:	460e      	mov	r6, r1
 8003e6c:	4614      	mov	r4, r2
 8003e6e:	4605      	mov	r5, r0
 8003e70:	b118      	cbz	r0, 8003e7a <__swbuf_r+0x12>
 8003e72:	6a03      	ldr	r3, [r0, #32]
 8003e74:	b90b      	cbnz	r3, 8003e7a <__swbuf_r+0x12>
 8003e76:	f7ff fa7d 	bl	8003374 <__sinit>
 8003e7a:	69a3      	ldr	r3, [r4, #24]
 8003e7c:	60a3      	str	r3, [r4, #8]
 8003e7e:	89a3      	ldrh	r3, [r4, #12]
 8003e80:	071a      	lsls	r2, r3, #28
 8003e82:	d501      	bpl.n	8003e88 <__swbuf_r+0x20>
 8003e84:	6923      	ldr	r3, [r4, #16]
 8003e86:	b943      	cbnz	r3, 8003e9a <__swbuf_r+0x32>
 8003e88:	4621      	mov	r1, r4
 8003e8a:	4628      	mov	r0, r5
 8003e8c:	f000 f82a 	bl	8003ee4 <__swsetup_r>
 8003e90:	b118      	cbz	r0, 8003e9a <__swbuf_r+0x32>
 8003e92:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003e96:	4638      	mov	r0, r7
 8003e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	6922      	ldr	r2, [r4, #16]
 8003e9e:	1a98      	subs	r0, r3, r2
 8003ea0:	6963      	ldr	r3, [r4, #20]
 8003ea2:	b2f6      	uxtb	r6, r6
 8003ea4:	4283      	cmp	r3, r0
 8003ea6:	4637      	mov	r7, r6
 8003ea8:	dc05      	bgt.n	8003eb6 <__swbuf_r+0x4e>
 8003eaa:	4621      	mov	r1, r4
 8003eac:	4628      	mov	r0, r5
 8003eae:	f7ff ffb3 	bl	8003e18 <_fflush_r>
 8003eb2:	2800      	cmp	r0, #0
 8003eb4:	d1ed      	bne.n	8003e92 <__swbuf_r+0x2a>
 8003eb6:	68a3      	ldr	r3, [r4, #8]
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	60a3      	str	r3, [r4, #8]
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	6022      	str	r2, [r4, #0]
 8003ec2:	701e      	strb	r6, [r3, #0]
 8003ec4:	6962      	ldr	r2, [r4, #20]
 8003ec6:	1c43      	adds	r3, r0, #1
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d004      	beq.n	8003ed6 <__swbuf_r+0x6e>
 8003ecc:	89a3      	ldrh	r3, [r4, #12]
 8003ece:	07db      	lsls	r3, r3, #31
 8003ed0:	d5e1      	bpl.n	8003e96 <__swbuf_r+0x2e>
 8003ed2:	2e0a      	cmp	r6, #10
 8003ed4:	d1df      	bne.n	8003e96 <__swbuf_r+0x2e>
 8003ed6:	4621      	mov	r1, r4
 8003ed8:	4628      	mov	r0, r5
 8003eda:	f7ff ff9d 	bl	8003e18 <_fflush_r>
 8003ede:	2800      	cmp	r0, #0
 8003ee0:	d0d9      	beq.n	8003e96 <__swbuf_r+0x2e>
 8003ee2:	e7d6      	b.n	8003e92 <__swbuf_r+0x2a>

08003ee4 <__swsetup_r>:
 8003ee4:	b538      	push	{r3, r4, r5, lr}
 8003ee6:	4b29      	ldr	r3, [pc, #164]	@ (8003f8c <__swsetup_r+0xa8>)
 8003ee8:	4605      	mov	r5, r0
 8003eea:	6818      	ldr	r0, [r3, #0]
 8003eec:	460c      	mov	r4, r1
 8003eee:	b118      	cbz	r0, 8003ef8 <__swsetup_r+0x14>
 8003ef0:	6a03      	ldr	r3, [r0, #32]
 8003ef2:	b90b      	cbnz	r3, 8003ef8 <__swsetup_r+0x14>
 8003ef4:	f7ff fa3e 	bl	8003374 <__sinit>
 8003ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003efc:	0719      	lsls	r1, r3, #28
 8003efe:	d422      	bmi.n	8003f46 <__swsetup_r+0x62>
 8003f00:	06da      	lsls	r2, r3, #27
 8003f02:	d407      	bmi.n	8003f14 <__swsetup_r+0x30>
 8003f04:	2209      	movs	r2, #9
 8003f06:	602a      	str	r2, [r5, #0]
 8003f08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f0c:	81a3      	strh	r3, [r4, #12]
 8003f0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f12:	e033      	b.n	8003f7c <__swsetup_r+0x98>
 8003f14:	0758      	lsls	r0, r3, #29
 8003f16:	d512      	bpl.n	8003f3e <__swsetup_r+0x5a>
 8003f18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f1a:	b141      	cbz	r1, 8003f2e <__swsetup_r+0x4a>
 8003f1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003f20:	4299      	cmp	r1, r3
 8003f22:	d002      	beq.n	8003f2a <__swsetup_r+0x46>
 8003f24:	4628      	mov	r0, r5
 8003f26:	f7ff fb2d 	bl	8003584 <_free_r>
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8003f2e:	89a3      	ldrh	r3, [r4, #12]
 8003f30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003f34:	81a3      	strh	r3, [r4, #12]
 8003f36:	2300      	movs	r3, #0
 8003f38:	6063      	str	r3, [r4, #4]
 8003f3a:	6923      	ldr	r3, [r4, #16]
 8003f3c:	6023      	str	r3, [r4, #0]
 8003f3e:	89a3      	ldrh	r3, [r4, #12]
 8003f40:	f043 0308 	orr.w	r3, r3, #8
 8003f44:	81a3      	strh	r3, [r4, #12]
 8003f46:	6923      	ldr	r3, [r4, #16]
 8003f48:	b94b      	cbnz	r3, 8003f5e <__swsetup_r+0x7a>
 8003f4a:	89a3      	ldrh	r3, [r4, #12]
 8003f4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003f50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f54:	d003      	beq.n	8003f5e <__swsetup_r+0x7a>
 8003f56:	4621      	mov	r1, r4
 8003f58:	4628      	mov	r0, r5
 8003f5a:	f000 f84f 	bl	8003ffc <__smakebuf_r>
 8003f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f62:	f013 0201 	ands.w	r2, r3, #1
 8003f66:	d00a      	beq.n	8003f7e <__swsetup_r+0x9a>
 8003f68:	2200      	movs	r2, #0
 8003f6a:	60a2      	str	r2, [r4, #8]
 8003f6c:	6962      	ldr	r2, [r4, #20]
 8003f6e:	4252      	negs	r2, r2
 8003f70:	61a2      	str	r2, [r4, #24]
 8003f72:	6922      	ldr	r2, [r4, #16]
 8003f74:	b942      	cbnz	r2, 8003f88 <__swsetup_r+0xa4>
 8003f76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003f7a:	d1c5      	bne.n	8003f08 <__swsetup_r+0x24>
 8003f7c:	bd38      	pop	{r3, r4, r5, pc}
 8003f7e:	0799      	lsls	r1, r3, #30
 8003f80:	bf58      	it	pl
 8003f82:	6962      	ldrpl	r2, [r4, #20]
 8003f84:	60a2      	str	r2, [r4, #8]
 8003f86:	e7f4      	b.n	8003f72 <__swsetup_r+0x8e>
 8003f88:	2000      	movs	r0, #0
 8003f8a:	e7f7      	b.n	8003f7c <__swsetup_r+0x98>
 8003f8c:	20000020 	.word	0x20000020

08003f90 <_sbrk_r>:
 8003f90:	b538      	push	{r3, r4, r5, lr}
 8003f92:	4d06      	ldr	r5, [pc, #24]	@ (8003fac <_sbrk_r+0x1c>)
 8003f94:	2300      	movs	r3, #0
 8003f96:	4604      	mov	r4, r0
 8003f98:	4608      	mov	r0, r1
 8003f9a:	602b      	str	r3, [r5, #0]
 8003f9c:	f7fc fbd8 	bl	8000750 <_sbrk>
 8003fa0:	1c43      	adds	r3, r0, #1
 8003fa2:	d102      	bne.n	8003faa <_sbrk_r+0x1a>
 8003fa4:	682b      	ldr	r3, [r5, #0]
 8003fa6:	b103      	cbz	r3, 8003faa <_sbrk_r+0x1a>
 8003fa8:	6023      	str	r3, [r4, #0]
 8003faa:	bd38      	pop	{r3, r4, r5, pc}
 8003fac:	20000234 	.word	0x20000234

08003fb0 <__swhatbuf_r>:
 8003fb0:	b570      	push	{r4, r5, r6, lr}
 8003fb2:	460c      	mov	r4, r1
 8003fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fb8:	2900      	cmp	r1, #0
 8003fba:	b096      	sub	sp, #88	@ 0x58
 8003fbc:	4615      	mov	r5, r2
 8003fbe:	461e      	mov	r6, r3
 8003fc0:	da0d      	bge.n	8003fde <__swhatbuf_r+0x2e>
 8003fc2:	89a3      	ldrh	r3, [r4, #12]
 8003fc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003fc8:	f04f 0100 	mov.w	r1, #0
 8003fcc:	bf14      	ite	ne
 8003fce:	2340      	movne	r3, #64	@ 0x40
 8003fd0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	6031      	str	r1, [r6, #0]
 8003fd8:	602b      	str	r3, [r5, #0]
 8003fda:	b016      	add	sp, #88	@ 0x58
 8003fdc:	bd70      	pop	{r4, r5, r6, pc}
 8003fde:	466a      	mov	r2, sp
 8003fe0:	f000 f848 	bl	8004074 <_fstat_r>
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	dbec      	blt.n	8003fc2 <__swhatbuf_r+0x12>
 8003fe8:	9901      	ldr	r1, [sp, #4]
 8003fea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003fee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003ff2:	4259      	negs	r1, r3
 8003ff4:	4159      	adcs	r1, r3
 8003ff6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ffa:	e7eb      	b.n	8003fd4 <__swhatbuf_r+0x24>

08003ffc <__smakebuf_r>:
 8003ffc:	898b      	ldrh	r3, [r1, #12]
 8003ffe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004000:	079d      	lsls	r5, r3, #30
 8004002:	4606      	mov	r6, r0
 8004004:	460c      	mov	r4, r1
 8004006:	d507      	bpl.n	8004018 <__smakebuf_r+0x1c>
 8004008:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800400c:	6023      	str	r3, [r4, #0]
 800400e:	6123      	str	r3, [r4, #16]
 8004010:	2301      	movs	r3, #1
 8004012:	6163      	str	r3, [r4, #20]
 8004014:	b003      	add	sp, #12
 8004016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004018:	ab01      	add	r3, sp, #4
 800401a:	466a      	mov	r2, sp
 800401c:	f7ff ffc8 	bl	8003fb0 <__swhatbuf_r>
 8004020:	9f00      	ldr	r7, [sp, #0]
 8004022:	4605      	mov	r5, r0
 8004024:	4639      	mov	r1, r7
 8004026:	4630      	mov	r0, r6
 8004028:	f7ff fb18 	bl	800365c <_malloc_r>
 800402c:	b948      	cbnz	r0, 8004042 <__smakebuf_r+0x46>
 800402e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004032:	059a      	lsls	r2, r3, #22
 8004034:	d4ee      	bmi.n	8004014 <__smakebuf_r+0x18>
 8004036:	f023 0303 	bic.w	r3, r3, #3
 800403a:	f043 0302 	orr.w	r3, r3, #2
 800403e:	81a3      	strh	r3, [r4, #12]
 8004040:	e7e2      	b.n	8004008 <__smakebuf_r+0xc>
 8004042:	89a3      	ldrh	r3, [r4, #12]
 8004044:	6020      	str	r0, [r4, #0]
 8004046:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800404a:	81a3      	strh	r3, [r4, #12]
 800404c:	9b01      	ldr	r3, [sp, #4]
 800404e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004052:	b15b      	cbz	r3, 800406c <__smakebuf_r+0x70>
 8004054:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004058:	4630      	mov	r0, r6
 800405a:	f000 f81d 	bl	8004098 <_isatty_r>
 800405e:	b128      	cbz	r0, 800406c <__smakebuf_r+0x70>
 8004060:	89a3      	ldrh	r3, [r4, #12]
 8004062:	f023 0303 	bic.w	r3, r3, #3
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	81a3      	strh	r3, [r4, #12]
 800406c:	89a3      	ldrh	r3, [r4, #12]
 800406e:	431d      	orrs	r5, r3
 8004070:	81a5      	strh	r5, [r4, #12]
 8004072:	e7cf      	b.n	8004014 <__smakebuf_r+0x18>

08004074 <_fstat_r>:
 8004074:	b538      	push	{r3, r4, r5, lr}
 8004076:	4d07      	ldr	r5, [pc, #28]	@ (8004094 <_fstat_r+0x20>)
 8004078:	2300      	movs	r3, #0
 800407a:	4604      	mov	r4, r0
 800407c:	4608      	mov	r0, r1
 800407e:	4611      	mov	r1, r2
 8004080:	602b      	str	r3, [r5, #0]
 8004082:	f7fc fb3d 	bl	8000700 <_fstat>
 8004086:	1c43      	adds	r3, r0, #1
 8004088:	d102      	bne.n	8004090 <_fstat_r+0x1c>
 800408a:	682b      	ldr	r3, [r5, #0]
 800408c:	b103      	cbz	r3, 8004090 <_fstat_r+0x1c>
 800408e:	6023      	str	r3, [r4, #0]
 8004090:	bd38      	pop	{r3, r4, r5, pc}
 8004092:	bf00      	nop
 8004094:	20000234 	.word	0x20000234

08004098 <_isatty_r>:
 8004098:	b538      	push	{r3, r4, r5, lr}
 800409a:	4d06      	ldr	r5, [pc, #24]	@ (80040b4 <_isatty_r+0x1c>)
 800409c:	2300      	movs	r3, #0
 800409e:	4604      	mov	r4, r0
 80040a0:	4608      	mov	r0, r1
 80040a2:	602b      	str	r3, [r5, #0]
 80040a4:	f7fc fb3c 	bl	8000720 <_isatty>
 80040a8:	1c43      	adds	r3, r0, #1
 80040aa:	d102      	bne.n	80040b2 <_isatty_r+0x1a>
 80040ac:	682b      	ldr	r3, [r5, #0]
 80040ae:	b103      	cbz	r3, 80040b2 <_isatty_r+0x1a>
 80040b0:	6023      	str	r3, [r4, #0]
 80040b2:	bd38      	pop	{r3, r4, r5, pc}
 80040b4:	20000234 	.word	0x20000234

080040b8 <_init>:
 80040b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ba:	bf00      	nop
 80040bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040be:	bc08      	pop	{r3}
 80040c0:	469e      	mov	lr, r3
 80040c2:	4770      	bx	lr

080040c4 <_fini>:
 80040c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c6:	bf00      	nop
 80040c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ca:	bc08      	pop	{r3}
 80040cc:	469e      	mov	lr, r3
 80040ce:	4770      	bx	lr
