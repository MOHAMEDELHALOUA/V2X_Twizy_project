
V2X_OBU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082c0  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  08008400  08008400  00009400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008724  08008724  00009724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800872c  0800872c  0000972c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008730  08008730  00009730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  20000008  08008734  0000a008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001c5c  20000080  080087ac  0000a080  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20001cdc  080087ac  0000acdc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021c77  00000000  00000000  0000a0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000044eb  00000000  00000000  0002bd27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000020b0  00000000  00000000  00030218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000192c  00000000  00000000  000322c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000052ec  00000000  00000000  00033bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d5c9  00000000  00000000  00038ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ee146  00000000  00000000  000564a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001445ef  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009258  00000000  00000000  00144634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  0014d88c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000080 	.word	0x20000080
 800015c:	00000000 	.word	0x00000000
 8000160:	080083e8 	.word	0x080083e8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000084 	.word	0x20000084
 800017c:	080083e8 	.word	0x080083e8

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000554:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000558:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800055c:	f003 0301 	and.w	r3, r3, #1
 8000560:	2b00      	cmp	r3, #0
 8000562:	d013      	beq.n	800058c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000564:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000568:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800056c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000570:	2b00      	cmp	r3, #0
 8000572:	d00b      	beq.n	800058c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000574:	e000      	b.n	8000578 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000576:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000578:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d0f9      	beq.n	8000576 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000582:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	b2d2      	uxtb	r2, r2
 800058a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800058c:	687b      	ldr	r3, [r7, #4]
}
 800058e:	4618      	mov	r0, r3
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800059a:	b480      	push	{r7}
 800059c:	b085      	sub	sp, #20
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4313      	orrs	r3, r2
 80005b0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4013      	ands	r3, r2
 80005bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005be:	68fb      	ldr	r3, [r7, #12]
}
 80005c0:	bf00      	nop
 80005c2:	3714      	adds	r7, #20
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <ValidateReceivedData>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//THIS IS TO VALIDATE RECEIVED DATA
uint8_t ValidateReceivedData(Item *data) {
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
    // Check if at least one byte of MAC address is non-zero
    for (int i = 0; i < 6; i++) {
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	e00b      	b.n	80005f2 <ValidateReceivedData+0x26>
        if (data->MacAddress[i] != 0) {
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4413      	add	r3, r2
 80005e0:	3304      	adds	r3, #4
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <ValidateReceivedData+0x20>
            return 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	e006      	b.n	80005fa <ValidateReceivedData+0x2e>
    for (int i = 0; i < 6; i++) {
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	3301      	adds	r3, #1
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	2b05      	cmp	r3, #5
 80005f6:	ddf0      	ble.n	80005da <ValidateReceivedData+0xe>
        }
    }
    return 0;
 80005f8:	2300      	movs	r3, #0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
	...

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 fd58 	bl	80010c0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f846 	bl	80006a0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000614:	f000 f89c 	bl	8000750 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000618:	f000 f904 	bl	8000824 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800061c:	f000 f8b6 	bl	800078c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("STM32 will start receiving Item struct data via UART...\n");
 8000620:	4817      	ldr	r0, [pc, #92]	@ (8000680 <main+0x78>)
 8000622:	f007 f813 	bl	800764c <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000626:	f004 f8fd 	bl	8004824 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_TIMERS */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  UARTQueue = xQueueCreate(10, sizeof(Item));  // Increased queue size
 800062a:	2200      	movs	r2, #0
 800062c:	210c      	movs	r1, #12
 800062e:	200a      	movs	r0, #10
 8000630:	f004 fbbf 	bl	8004db2 <xQueueGenericCreate>
 8000634:	4603      	mov	r3, r0
 8000636:	4a13      	ldr	r2, [pc, #76]	@ (8000684 <main+0x7c>)
 8000638:	6013      	str	r3, [r2, #0]
  if (UARTQueue == NULL) {
 800063a:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <main+0x7c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d101      	bne.n	8000646 <main+0x3e>
      Error_Handler(); // Handle queue creation failure
 8000642:	f000 fa5c 	bl	8000afe <Error_Handler>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of SenderTask */
  SenderTaskHandle = osThreadNew(StartSenderTask, NULL, &SenderTask_attributes);
 8000646:	4a10      	ldr	r2, [pc, #64]	@ (8000688 <main+0x80>)
 8000648:	2100      	movs	r1, #0
 800064a:	4810      	ldr	r0, [pc, #64]	@ (800068c <main+0x84>)
 800064c:	f004 f934 	bl	80048b8 <osThreadNew>
 8000650:	4603      	mov	r3, r0
 8000652:	4a0f      	ldr	r2, [pc, #60]	@ (8000690 <main+0x88>)
 8000654:	6013      	str	r3, [r2, #0]

  /* creation of TskUART */
  TskUARTHandle = osThreadNew(StartTskUART, NULL, &TskUART_attributes);
 8000656:	4a0f      	ldr	r2, [pc, #60]	@ (8000694 <main+0x8c>)
 8000658:	2100      	movs	r1, #0
 800065a:	480f      	ldr	r0, [pc, #60]	@ (8000698 <main+0x90>)
 800065c:	f004 f92c 	bl	80048b8 <osThreadNew>
 8000660:	4603      	mov	r3, r0
 8000662:	4a0e      	ldr	r2, [pc, #56]	@ (800069c <main+0x94>)
 8000664:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 8000666:	2000      	movs	r0, #0
 8000668:	f000 fcd6 	bl	8001018 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 800066c:	2001      	movs	r0, #1
 800066e:	f000 fcd3 	bl	8001018 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000672:	2002      	movs	r0, #2
 8000674:	f000 fcd0 	bl	8001018 <BSP_LED_Init>

  /* Start scheduler */
  osKernelStart();
 8000678:	f004 f8f8 	bl	800486c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <main+0x74>
 8000680:	08008414 	.word	0x08008414
 8000684:	20000150 	.word	0x20000150
 8000688:	080085d8 	.word	0x080085d8
 800068c:	080008e9 	.word	0x080008e9
 8000690:	2000013c 	.word	0x2000013c
 8000694:	080085fc 	.word	0x080085fc
 8000698:	08000a09 	.word	0x08000a09
 800069c:	20000140 	.word	0x20000140

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b09a      	sub	sp, #104	@ 0x68
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	2248      	movs	r2, #72	@ 0x48
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f007 f8ac 	bl	800780c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]
 80006c2:	615a      	str	r2, [r3, #20]
 80006c4:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c6:	4b21      	ldr	r3, [pc, #132]	@ (800074c <SystemClock_Config+0xac>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80006ce:	4a1f      	ldr	r2, [pc, #124]	@ (800074c <SystemClock_Config+0xac>)
 80006d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006d4:	6013      	str	r3, [r2, #0]
 80006d6:	4b1d      	ldr	r3, [pc, #116]	@ (800074c <SystemClock_Config+0xac>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80006e2:	2322      	movs	r3, #34	@ 0x22
 80006e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006ec:	2301      	movs	r3, #1
 80006ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f0:	2340      	movs	r3, #64	@ 0x40
 80006f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006f4:	2300      	movs	r3, #0
 80006f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80006f8:	23a0      	movs	r3, #160	@ 0xa0
 80006fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 0320 	add.w	r3, r7, #32
 8000704:	4618      	mov	r0, r3
 8000706:	f001 fc27 	bl	8001f58 <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000710:	f000 f9f5 	bl	8000afe <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000714:	236f      	movs	r3, #111	@ 0x6f
 8000716:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2101      	movs	r1, #1
 8000734:	4618      	mov	r0, r3
 8000736:	f001 ff83 	bl	8002640 <HAL_RCC_ClockConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000740:	f000 f9dd 	bl	8000afe <Error_Handler>
  }
}
 8000744:	bf00      	nop
 8000746:	3768      	adds	r7, #104	@ 0x68
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	58000400 	.word	0x58000400

08000750 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b094      	sub	sp, #80	@ 0x50
 8000754:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000756:	463b      	mov	r3, r7
 8000758:	2250      	movs	r2, #80	@ 0x50
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f007 f855 	bl	800780c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000762:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000766:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000768:	2300      	movs	r3, #0
 800076a:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800076c:	2300      	movs	r3, #0
 800076e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000770:	463b      	mov	r3, r7
 8000772:	4618      	mov	r0, r3
 8000774:	f002 fbd3 	bl	8002f1e <HAL_RCCEx_PeriphCLKConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800077e:	f000 f9be 	bl	8000afe <Error_Handler>
  }
  /* USER CODE BEGIN Smps */
  /* USER CODE END Smps */
}
 8000782:	bf00      	nop
 8000784:	3750      	adds	r7, #80	@ 0x50
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000790:	4b22      	ldr	r3, [pc, #136]	@ (800081c <MX_USART1_UART_Init+0x90>)
 8000792:	4a23      	ldr	r2, [pc, #140]	@ (8000820 <MX_USART1_UART_Init+0x94>)
 8000794:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000796:	4b21      	ldr	r3, [pc, #132]	@ (800081c <MX_USART1_UART_Init+0x90>)
 8000798:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800079c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b1f      	ldr	r3, [pc, #124]	@ (800081c <MX_USART1_UART_Init+0x90>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b1d      	ldr	r3, [pc, #116]	@ (800081c <MX_USART1_UART_Init+0x90>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b1c      	ldr	r3, [pc, #112]	@ (800081c <MX_USART1_UART_Init+0x90>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b1a      	ldr	r3, [pc, #104]	@ (800081c <MX_USART1_UART_Init+0x90>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b19      	ldr	r3, [pc, #100]	@ (800081c <MX_USART1_UART_Init+0x90>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b17      	ldr	r3, [pc, #92]	@ (800081c <MX_USART1_UART_Init+0x90>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c2:	4b16      	ldr	r3, [pc, #88]	@ (800081c <MX_USART1_UART_Init+0x90>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007c8:	4b14      	ldr	r3, [pc, #80]	@ (800081c <MX_USART1_UART_Init+0x90>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ce:	4b13      	ldr	r3, [pc, #76]	@ (800081c <MX_USART1_UART_Init+0x90>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007d4:	4811      	ldr	r0, [pc, #68]	@ (800081c <MX_USART1_UART_Init+0x90>)
 80007d6:	f003 f8b1 	bl	800393c <HAL_UART_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80007e0:	f000 f98d 	bl	8000afe <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007e4:	2100      	movs	r1, #0
 80007e6:	480d      	ldr	r0, [pc, #52]	@ (800081c <MX_USART1_UART_Init+0x90>)
 80007e8:	f003 ff0e 	bl	8004608 <HAL_UARTEx_SetTxFifoThreshold>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80007f2:	f000 f984 	bl	8000afe <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f6:	2100      	movs	r1, #0
 80007f8:	4808      	ldr	r0, [pc, #32]	@ (800081c <MX_USART1_UART_Init+0x90>)
 80007fa:	f003 ff43 	bl	8004684 <HAL_UARTEx_SetRxFifoThreshold>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000804:	f000 f97b 	bl	8000afe <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000808:	4804      	ldr	r0, [pc, #16]	@ (800081c <MX_USART1_UART_Init+0x90>)
 800080a:	f003 fec4 	bl	8004596 <HAL_UARTEx_DisableFifoMode>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000814:	f000 f973 	bl	8000afe <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200000a8 	.word	0x200000a8
 8000820:	40013800 	.word	0x40013800

08000824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000838:	2004      	movs	r0, #4
 800083a:	f7ff feae 	bl	800059a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	2001      	movs	r0, #1
 8000840:	f7ff feab 	bl	800059a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000844:	2002      	movs	r0, #2
 8000846:	f7ff fea8 	bl	800059a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084a:	2008      	movs	r0, #8
 800084c:	f7ff fea5 	bl	800059a <LL_AHB2_GRP1_EnableClock>


  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000850:	2310      	movs	r3, #16
 8000852:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	4619      	mov	r1, r3
 8000860:	4811      	ldr	r0, [pc, #68]	@ (80008a8 <MX_GPIO_Init+0x84>)
 8000862:	f000 fd59 	bl	8001318 <HAL_GPIO_Init>


  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8000866:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800086a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086c:	2302      	movs	r3, #2
 800086e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000878:	230a      	movs	r3, #10
 800087a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	4619      	mov	r1, r3
 8000880:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000884:	f000 fd48 	bl	8001318 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000888:	2303      	movs	r3, #3
 800088a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	4619      	mov	r1, r3
 8000898:	4804      	ldr	r0, [pc, #16]	@ (80008ac <MX_GPIO_Init+0x88>)
 800089a:	f000 fd3d 	bl	8001318 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800089e:	bf00      	nop
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	48000800 	.word	0x48000800
 80008ac:	48000c00 	.word	0x48000c00

080008b0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	e009      	b.n	80008d6 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	1c5a      	adds	r2, r3, #1
 80008c6:	60ba      	str	r2, [r7, #8]
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fe3e 	bl	800054c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	3301      	adds	r3, #1
 80008d4:	617b      	str	r3, [r7, #20]
 80008d6:	697a      	ldr	r2, [r7, #20]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	429a      	cmp	r2, r3
 80008dc:	dbf1      	blt.n	80008c2 <_write+0x12>
  }
  return len;
 80008de:	687b      	ldr	r3, [r7, #4]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <StartSenderTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSenderTask */
void StartSenderTask(void *argument)
{
 80008e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ea:	b091      	sub	sp, #68	@ 0x44
 80008ec:	af04      	add	r7, sp, #16
 80008ee:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
    // Check if we have received data to process
    if (xQueueReceive(UARTQueue, &receivedItem, 0) == pdTRUE) {
 80008f0:	4b3d      	ldr	r3, [pc, #244]	@ (80009e8 <StartSenderTask+0x100>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f107 0110 	add.w	r1, r7, #16
 80008f8:	2200      	movs	r2, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f004 fc58 	bl	80051b0 <xQueueReceive>
 8000900:	4603      	mov	r3, r0
 8000902:	2b01      	cmp	r3, #1
 8000904:	d114      	bne.n	8000930 <StartSenderTask+0x48>
      printf("Received from ESP32 - Value: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 8000906:	6939      	ldr	r1, [r7, #16]
             receivedItem.value,
             receivedItem.MacAddress[0], receivedItem.MacAddress[1], receivedItem.MacAddress[2],
 8000908:	7d3b      	ldrb	r3, [r7, #20]
      printf("Received from ESP32 - Value: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 800090a:	461d      	mov	r5, r3
             receivedItem.MacAddress[0], receivedItem.MacAddress[1], receivedItem.MacAddress[2],
 800090c:	7d7b      	ldrb	r3, [r7, #21]
      printf("Received from ESP32 - Value: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 800090e:	461e      	mov	r6, r3
             receivedItem.MacAddress[0], receivedItem.MacAddress[1], receivedItem.MacAddress[2],
 8000910:	7dbb      	ldrb	r3, [r7, #22]
             receivedItem.MacAddress[3], receivedItem.MacAddress[4], receivedItem.MacAddress[5]);
 8000912:	7dfa      	ldrb	r2, [r7, #23]
 8000914:	7e38      	ldrb	r0, [r7, #24]
 8000916:	7e7c      	ldrb	r4, [r7, #25]
      printf("Received from ESP32 - Value: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 8000918:	9403      	str	r4, [sp, #12]
 800091a:	9002      	str	r0, [sp, #8]
 800091c:	9201      	str	r2, [sp, #4]
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	4633      	mov	r3, r6
 8000922:	462a      	mov	r2, r5
 8000924:	4831      	ldr	r0, [pc, #196]	@ (80009ec <StartSenderTask+0x104>)
 8000926:	f006 fe29 	bl	800757c <iprintf>

      BSP_LED_Toggle(LED_GREEN);
 800092a:	2001      	movs	r0, #1
 800092c:	f000 fbae 	bl	800108c <BSP_LED_Toggle>
    }

    // Send data to ESP32 periodically
    uint32_t current_time = HAL_GetTick();
 8000930:	f000 fbfa 	bl	8001128 <HAL_GetTick>
 8000934:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (current_time - last_tx_time >= UART_TX_INTERVAL) {
 8000936:	4b2e      	ldr	r3, [pc, #184]	@ (80009f0 <StartSenderTask+0x108>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000942:	d34c      	bcc.n	80009de <StartSenderTask+0xf6>
      // Prepare data to send
      itemToSend.value = ++message_counter;
 8000944:	4b2b      	ldr	r3, [pc, #172]	@ (80009f4 <StartSenderTask+0x10c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	3301      	adds	r3, #1
 800094a:	4a2a      	ldr	r2, [pc, #168]	@ (80009f4 <StartSenderTask+0x10c>)
 800094c:	6013      	str	r3, [r2, #0]
 800094e:	4b29      	ldr	r3, [pc, #164]	@ (80009f4 <StartSenderTask+0x10c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	61fb      	str	r3, [r7, #28]
      uint8_t stm32_mac[6] = {0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF}; // Dummy STM32 MAC
 8000954:	4a28      	ldr	r2, [pc, #160]	@ (80009f8 <StartSenderTask+0x110>)
 8000956:	f107 0308 	add.w	r3, r7, #8
 800095a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800095e:	6018      	str	r0, [r3, #0]
 8000960:	3304      	adds	r3, #4
 8000962:	8019      	strh	r1, [r3, #0]
      memcpy(itemToSend.MacAddress, stm32_mac, 6);
 8000964:	f107 0320 	add.w	r3, r7, #32
 8000968:	f107 0208 	add.w	r2, r7, #8
 800096c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000970:	6018      	str	r0, [r3, #0]
 8000972:	3304      	adds	r3, #4
 8000974:	8019      	strh	r1, [r3, #0]

      // Send struct data
      HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t*)&itemToSend, sizeof(Item), 1000);
 8000976:	f107 011c 	add.w	r1, r7, #28
 800097a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800097e:	220c      	movs	r2, #12
 8000980:	481e      	ldr	r0, [pc, #120]	@ (80009fc <StartSenderTask+0x114>)
 8000982:	f003 f86a 	bl	8003a5a <HAL_UART_Transmit>
 8000986:	4603      	mov	r3, r0
 8000988:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

      if (status == HAL_OK) {
 800098c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000990:	2b00      	cmp	r3, #0
 8000992:	d11b      	bne.n	80009cc <StartSenderTask+0xe4>
        printf("Sent to ESP32 - Value: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 8000994:	69f9      	ldr	r1, [r7, #28]
               itemToSend.value,
               itemToSend.MacAddress[0], itemToSend.MacAddress[1], itemToSend.MacAddress[2],
 8000996:	f897 3020 	ldrb.w	r3, [r7, #32]
        printf("Sent to ESP32 - Value: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 800099a:	461d      	mov	r5, r3
               itemToSend.MacAddress[0], itemToSend.MacAddress[1], itemToSend.MacAddress[2],
 800099c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
        printf("Sent to ESP32 - Value: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 80009a0:	461e      	mov	r6, r3
               itemToSend.MacAddress[0], itemToSend.MacAddress[1], itemToSend.MacAddress[2],
 80009a2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
               itemToSend.MacAddress[3], itemToSend.MacAddress[4], itemToSend.MacAddress[5]);
 80009a6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80009aa:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 80009ae:	f897 4025 	ldrb.w	r4, [r7, #37]	@ 0x25
        printf("Sent to ESP32 - Value: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 80009b2:	9403      	str	r4, [sp, #12]
 80009b4:	9002      	str	r0, [sp, #8]
 80009b6:	9201      	str	r2, [sp, #4]
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	4633      	mov	r3, r6
 80009bc:	462a      	mov	r2, r5
 80009be:	4810      	ldr	r0, [pc, #64]	@ (8000a00 <StartSenderTask+0x118>)
 80009c0:	f006 fddc 	bl	800757c <iprintf>
        BSP_LED_Toggle(LED_BLUE);
 80009c4:	2000      	movs	r0, #0
 80009c6:	f000 fb61 	bl	800108c <BSP_LED_Toggle>
 80009ca:	e005      	b.n	80009d8 <StartSenderTask+0xf0>
      } else {
        printf("Failed to send data to ESP32\n");
 80009cc:	480d      	ldr	r0, [pc, #52]	@ (8000a04 <StartSenderTask+0x11c>)
 80009ce:	f006 fe3d 	bl	800764c <puts>
        BSP_LED_Toggle(LED_RED);
 80009d2:	2002      	movs	r0, #2
 80009d4:	f000 fb5a 	bl	800108c <BSP_LED_Toggle>
      }

      last_tx_time = current_time;
 80009d8:	4a05      	ldr	r2, [pc, #20]	@ (80009f0 <StartSenderTask+0x108>)
 80009da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009dc:	6013      	str	r3, [r2, #0]
    }

    osDelay(100);
 80009de:	2064      	movs	r0, #100	@ 0x64
 80009e0:	f003 fffc 	bl	80049dc <osDelay>
  {
 80009e4:	e784      	b.n	80008f0 <StartSenderTask+0x8>
 80009e6:	bf00      	nop
 80009e8:	20000150 	.word	0x20000150
 80009ec:	0800844c 	.word	0x0800844c
 80009f0:	2000014c 	.word	0x2000014c
 80009f4:	20000148 	.word	0x20000148
 80009f8:	080084f4 	.word	0x080084f4
 80009fc:	200000a8 	.word	0x200000a8
 8000a00:	08008494 	.word	0x08008494
 8000a04:	080084d4 	.word	0x080084d4

08000a08 <StartTskUART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTskUART */
void StartTskUART(void *argument)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTskUART */
  /* Infinite loop */
  for(;;)
  {
    // Receive Item struct data from ESP32
    HAL_StatusTypeDef status = HAL_UART_Receive(&huart1, (uint8_t *)&receivedData, sizeof(Item), UART_TIMEOUT_MS);
 8000a10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a14:	220c      	movs	r2, #12
 8000a16:	4929      	ldr	r1, [pc, #164]	@ (8000abc <StartTskUART+0xb4>)
 8000a18:	4829      	ldr	r0, [pc, #164]	@ (8000ac0 <StartTskUART+0xb8>)
 8000a1a:	f003 f8ac 	bl	8003b76 <HAL_UART_Receive>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK) {
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d11a      	bne.n	8000a5e <StartTskUART+0x56>
      uart_timeout_counter = 0;
 8000a28:	4b26      	ldr	r3, [pc, #152]	@ (8000ac4 <StartTskUART+0xbc>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]

      // Validate received data
      if (ValidateReceivedData((Item*)&receivedData)) {
 8000a2e:	4823      	ldr	r0, [pc, #140]	@ (8000abc <StartTskUART+0xb4>)
 8000a30:	f7ff fdcc 	bl	80005cc <ValidateReceivedData>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d00d      	beq.n	8000a56 <StartTskUART+0x4e>
        // Send valid data to queue
        if (xQueueSend(UARTQueue, &receivedData, 0) != pdTRUE) {
 8000a3a:	4b23      	ldr	r3, [pc, #140]	@ (8000ac8 <StartTskUART+0xc0>)
 8000a3c:	6818      	ldr	r0, [r3, #0]
 8000a3e:	2300      	movs	r3, #0
 8000a40:	2200      	movs	r2, #0
 8000a42:	491e      	ldr	r1, [pc, #120]	@ (8000abc <StartTskUART+0xb4>)
 8000a44:	f004 fa14 	bl	8004e70 <xQueueGenericSend>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d032      	beq.n	8000ab4 <StartTskUART+0xac>
          printf("Queue full - message dropped\n");
 8000a4e:	481f      	ldr	r0, [pc, #124]	@ (8000acc <StartTskUART+0xc4>)
 8000a50:	f006 fdfc 	bl	800764c <puts>
 8000a54:	e02e      	b.n	8000ab4 <StartTskUART+0xac>
        }
      } else {
        printf("UART Warning - Received corrupted data with invalid MAC\n");
 8000a56:	481e      	ldr	r0, [pc, #120]	@ (8000ad0 <StartTskUART+0xc8>)
 8000a58:	f006 fdf8 	bl	800764c <puts>
 8000a5c:	e02a      	b.n	8000ab4 <StartTskUART+0xac>
      }
    }
    else if (status == HAL_TIMEOUT) {
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
 8000a60:	2b03      	cmp	r3, #3
 8000a62:	d117      	bne.n	8000a94 <StartTskUART+0x8c>
      uart_timeout_counter++;
 8000a64:	4b17      	ldr	r3, [pc, #92]	@ (8000ac4 <StartTskUART+0xbc>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	4a16      	ldr	r2, [pc, #88]	@ (8000ac4 <StartTskUART+0xbc>)
 8000a6c:	6013      	str	r3, [r2, #0]
      if (uart_timeout_counter % 100 == 0) {  // Reduced frequency of timeout messages
 8000a6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <StartTskUART+0xbc>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	4b18      	ldr	r3, [pc, #96]	@ (8000ad4 <StartTskUART+0xcc>)
 8000a74:	fba3 1302 	umull	r1, r3, r3, r2
 8000a78:	095b      	lsrs	r3, r3, #5
 8000a7a:	2164      	movs	r1, #100	@ 0x64
 8000a7c:	fb01 f303 	mul.w	r3, r1, r3
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d116      	bne.n	8000ab4 <StartTskUART+0xac>
        printf("UART Waiting for data... (%lu)\n", uart_timeout_counter);
 8000a86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <StartTskUART+0xbc>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4812      	ldr	r0, [pc, #72]	@ (8000ad8 <StartTskUART+0xd0>)
 8000a8e:	f006 fd75 	bl	800757c <iprintf>
 8000a92:	e00f      	b.n	8000ab4 <StartTskUART+0xac>
      }
    }
    else {
      printf("UART Error: %d, resetting...\n", status);
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
 8000a96:	4619      	mov	r1, r3
 8000a98:	4810      	ldr	r0, [pc, #64]	@ (8000adc <StartTskUART+0xd4>)
 8000a9a:	f006 fd6f 	bl	800757c <iprintf>
      HAL_UART_DeInit(&huart1);
 8000a9e:	4808      	ldr	r0, [pc, #32]	@ (8000ac0 <StartTskUART+0xb8>)
 8000aa0:	f002 ff9c 	bl	80039dc <HAL_UART_DeInit>
      osDelay(10);
 8000aa4:	200a      	movs	r0, #10
 8000aa6:	f003 ff99 	bl	80049dc <osDelay>
      MX_USART1_UART_Init();
 8000aaa:	f7ff fe6f 	bl	800078c <MX_USART1_UART_Init>
      uart_timeout_counter = 0;
 8000aae:	4b05      	ldr	r3, [pc, #20]	@ (8000ac4 <StartTskUART+0xbc>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
    }

    osDelay(10); // Small delay
 8000ab4:	200a      	movs	r0, #10
 8000ab6:	f003 ff91 	bl	80049dc <osDelay>
  {
 8000aba:	e7a9      	b.n	8000a10 <StartTskUART+0x8>
 8000abc:	2000009c 	.word	0x2000009c
 8000ac0:	200000a8 	.word	0x200000a8
 8000ac4:	20000144 	.word	0x20000144
 8000ac8:	20000150 	.word	0x20000150
 8000acc:	080084fc 	.word	0x080084fc
 8000ad0:	0800851c 	.word	0x0800851c
 8000ad4:	51eb851f 	.word	0x51eb851f
 8000ad8:	08008554 	.word	0x08008554
 8000adc:	08008574 	.word	0x08008574

08000ae0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000af0:	d101      	bne.n	8000af6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000af2:	f000 fb05 	bl	8001100 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b02:	b672      	cpsid	i
}
 8000b04:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b06:	bf00      	nop
 8000b08:	e7fd      	b.n	8000b06 <Error_Handler+0x8>

08000b0a <LL_AHB2_GRP1_EnableClock>:
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b085      	sub	sp, #20
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b18:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
}
 8000b30:	bf00      	nop
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b48:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000b4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b58:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b60:	68fb      	ldr	r3, [r7, #12]
}
 8000b62:	bf00      	nop
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000b76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b7a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b84:	4013      	ands	r3, r2
 8000b86:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	210f      	movs	r1, #15
 8000b9c:	f06f 0001 	mvn.w	r0, #1
 8000ba0:	f000 fb92 	bl	80012c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b09c      	sub	sp, #112	@ 0x70
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bc0:	f107 030c 	add.w	r3, r7, #12
 8000bc4:	2250      	movs	r2, #80	@ 0x50
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f006 fe1f 	bl	800780c <memset>
  if(huart->Instance==USART1)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a17      	ldr	r2, [pc, #92]	@ (8000c30 <HAL_UART_MspInit+0x88>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d126      	bne.n	8000c26 <HAL_UART_MspInit+0x7e>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	4618      	mov	r0, r3
 8000be6:	f002 f99a 	bl	8002f1e <HAL_RCCEx_PeriphCLKConfig>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bf0:	f7ff ff85 	bl	8000afe <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bf4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000bf8:	f7ff ffa0 	bl	8000b3c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f7ff ff84 	bl	8000b0a <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c02:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c06:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c14:	2307      	movs	r3, #7
 8000c16:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c22:	f000 fb79 	bl	8001318 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000c26:	bf00      	nop
 8000c28:	3770      	adds	r7, #112	@ 0x70
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40013800 	.word	0x40013800

08000c34 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a08      	ldr	r2, [pc, #32]	@ (8000c64 <HAL_UART_MspDeInit+0x30>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d109      	bne.n	8000c5a <HAL_UART_MspDeInit+0x26>
  {
    /* USER CODE BEGIN USART1_MspDeInit 0 */

    /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000c46:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000c4a:	f7ff ff90 	bl	8000b6e <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8000c4e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000c52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c56:	f000 fccf 	bl	80015f8 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN USART1_MspDeInit 1 */

    /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40013800 	.word	0x40013800

08000c68 <LL_APB1_GRP1_EnableClock>:
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000c70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c74:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000c80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c84:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
}
 8000c8e:	bf00      	nop
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08e      	sub	sp, #56	@ 0x38
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000cac:	2300      	movs	r3, #0
 8000cae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	6879      	ldr	r1, [r7, #4]
 8000cb6:	201c      	movs	r0, #28
 8000cb8:	f000 fb06 	bl	80012c8 <HAL_NVIC_SetPriority>
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cbc:	201c      	movs	r0, #28
 8000cbe:	f000 fb1d 	bl	80012fc <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f7ff ffd0 	bl	8000c68 <LL_APB1_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cc8:	f107 020c 	add.w	r2, r7, #12
 8000ccc:	f107 0310 	add.w	r3, r7, #16
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f001 fea0 	bl	8002a18 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cd8:	f001 fe72 	bl	80029c0 <HAL_RCC_GetPCLK1Freq>
 8000cdc:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ce0:	4a21      	ldr	r2, [pc, #132]	@ (8000d68 <HAL_InitTick+0xcc>)
 8000ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce6:	0c9b      	lsrs	r3, r3, #18
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000cec:	4b1f      	ldr	r3, [pc, #124]	@ (8000d6c <HAL_InitTick+0xd0>)
 8000cee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cf2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d6c <HAL_InitTick+0xd0>)
 8000cf6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cfa:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000cfc:	4a1b      	ldr	r2, [pc, #108]	@ (8000d6c <HAL_InitTick+0xd0>)
 8000cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d00:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000d02:	4b1a      	ldr	r3, [pc, #104]	@ (8000d6c <HAL_InitTick+0xd0>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d08:	4b18      	ldr	r3, [pc, #96]	@ (8000d6c <HAL_InitTick+0xd0>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 8000d0e:	4817      	ldr	r0, [pc, #92]	@ (8000d6c <HAL_InitTick+0xd0>)
 8000d10:	f002 fb8c 	bl	800342c <HAL_TIM_Base_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8000d1a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d11b      	bne.n	8000d5a <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000d22:	4812      	ldr	r0, [pc, #72]	@ (8000d6c <HAL_InitTick+0xd0>)
 8000d24:	f002 fbe4 	bl	80034f0 <HAL_TIM_Base_Start_IT>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8000d2e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d111      	bne.n	8000d5a <HAL_InitTick+0xbe>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d36:	201c      	movs	r0, #28
 8000d38:	f000 fae0 	bl	80012fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b0f      	cmp	r3, #15
 8000d40:	d808      	bhi.n	8000d54 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000d42:	2200      	movs	r2, #0
 8000d44:	6879      	ldr	r1, [r7, #4]
 8000d46:	201c      	movs	r0, #28
 8000d48:	f000 fabe 	bl	80012c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d4c:	4a08      	ldr	r2, [pc, #32]	@ (8000d70 <HAL_InitTick+0xd4>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6013      	str	r3, [r2, #0]
 8000d52:	e002      	b.n	8000d5a <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

 /* Return function status */
  return status;
 8000d5a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3738      	adds	r7, #56	@ 0x38
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	431bde83 	.word	0x431bde83
 8000d6c:	20000154 	.word	0x20000154
 8000d70:	20000018 	.word	0x20000018

08000d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <NMI_Handler+0x4>

08000d7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <HardFault_Handler+0x4>

08000d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <MemManage_Handler+0x4>

08000d8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <BusFault_Handler+0x4>

08000d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <UsageFault_Handler+0x4>

08000d9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000db0:	4802      	ldr	r0, [pc, #8]	@ (8000dbc <TIM2_IRQHandler+0x10>)
 8000db2:	f002 fbeb 	bl	800358c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000154 	.word	0x20000154

08000dc0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	e00a      	b.n	8000de8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dd2:	f3af 8000 	nop.w
 8000dd6:	4601      	mov	r1, r0
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	1c5a      	adds	r2, r3, #1
 8000ddc:	60ba      	str	r2, [r7, #8]
 8000dde:	b2ca      	uxtb	r2, r1
 8000de0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	3301      	adds	r3, #1
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697a      	ldr	r2, [r7, #20]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	dbf0      	blt.n	8000dd2 <_read+0x12>
  }

  return len;
 8000df0:	687b      	ldr	r3, [r7, #4]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <_close>:
  }
  return len;
}

int _close(int file)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
 8000e1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e22:	605a      	str	r2, [r3, #4]
  return 0;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <_isatty>:

int _isatty(int file)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e3a:	2301      	movs	r3, #1
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
	...

08000e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e6c:	4a14      	ldr	r2, [pc, #80]	@ (8000ec0 <_sbrk+0x5c>)
 8000e6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ec4 <_sbrk+0x60>)
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e78:	4b13      	ldr	r3, [pc, #76]	@ (8000ec8 <_sbrk+0x64>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d102      	bne.n	8000e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e80:	4b11      	ldr	r3, [pc, #68]	@ (8000ec8 <_sbrk+0x64>)
 8000e82:	4a12      	ldr	r2, [pc, #72]	@ (8000ecc <_sbrk+0x68>)
 8000e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e86:	4b10      	ldr	r3, [pc, #64]	@ (8000ec8 <_sbrk+0x64>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d207      	bcs.n	8000ea4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e94:	f006 fd66 	bl	8007964 <__errno>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ea2:	e009      	b.n	8000eb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea4:	4b08      	ldr	r3, [pc, #32]	@ (8000ec8 <_sbrk+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eaa:	4b07      	ldr	r3, [pc, #28]	@ (8000ec8 <_sbrk+0x64>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	4a05      	ldr	r2, [pc, #20]	@ (8000ec8 <_sbrk+0x64>)
 8000eb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20030000 	.word	0x20030000
 8000ec4:	00000400 	.word	0x00000400
 8000ec8:	200001a0 	.word	0x200001a0
 8000ecc:	20001ce0 	.word	0x20001ce0

08000ed0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000ed4:	4b24      	ldr	r3, [pc, #144]	@ (8000f68 <SystemInit+0x98>)
 8000ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000eda:	4a23      	ldr	r2, [pc, #140]	@ (8000f68 <SystemInit+0x98>)
 8000edc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ee0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ee4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000ef4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ef8:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000efc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000efe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f08:	4b18      	ldr	r3, [pc, #96]	@ (8000f6c <SystemInit+0x9c>)
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000f0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f1a:	f023 0305 	bic.w	r3, r3, #5
 8000f1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000f22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000f2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f2e:	f023 0301 	bic.w	r3, r3, #1
 8000f32:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000f36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f3a:	4a0d      	ldr	r2, [pc, #52]	@ (8000f70 <SystemInit+0xa0>)
 8000f3c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000f3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f42:	4a0b      	ldr	r2, [pc, #44]	@ (8000f70 <SystemInit+0xa0>)
 8000f44:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f54:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00
 8000f6c:	faf6fefb 	.word	0xfaf6fefb
 8000f70:	22041000 	.word	0x22041000

08000f74 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000f74:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f76:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f78:	3304      	adds	r3, #4

08000f7a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f7a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000f7e:	d3f9      	bcc.n	8000f74 <CopyDataInit>
  bx lr
 8000f80:	4770      	bx	lr

08000f82 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000f82:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000f84:	3004      	adds	r0, #4

08000f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000f86:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000f88:	d3fb      	bcc.n	8000f82 <FillZerobss>
  bx lr
 8000f8a:	4770      	bx	lr

08000f8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f8c:	480c      	ldr	r0, [pc, #48]	@ (8000fc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f8e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f90:	f7ff ff9e 	bl	8000ed0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000f94:	480b      	ldr	r0, [pc, #44]	@ (8000fc4 <LoopForever+0x6>)
 8000f96:	490c      	ldr	r1, [pc, #48]	@ (8000fc8 <LoopForever+0xa>)
 8000f98:	4a0c      	ldr	r2, [pc, #48]	@ (8000fcc <LoopForever+0xe>)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f7ff ffed 	bl	8000f7a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000fa0:	480b      	ldr	r0, [pc, #44]	@ (8000fd0 <LoopForever+0x12>)
 8000fa2:	490c      	ldr	r1, [pc, #48]	@ (8000fd4 <LoopForever+0x16>)
 8000fa4:	4a0c      	ldr	r2, [pc, #48]	@ (8000fd8 <LoopForever+0x1a>)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f7ff ffe7 	bl	8000f7a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000fac:	480b      	ldr	r0, [pc, #44]	@ (8000fdc <LoopForever+0x1e>)
 8000fae:	490c      	ldr	r1, [pc, #48]	@ (8000fe0 <LoopForever+0x22>)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f7ff ffe8 	bl	8000f86 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fb6:	f006 fcdb 	bl	8007970 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000fba:	f7ff fb25 	bl	8000608 <main>

08000fbe <LoopForever>:

LoopForever:
  b LoopForever
 8000fbe:	e7fe      	b.n	8000fbe <LoopForever>
  ldr   r0, =_estack
 8000fc0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	20000080 	.word	0x20000080
 8000fcc:	08008734 	.word	0x08008734
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000fd0:	20030000 	.word	0x20030000
 8000fd4:	20030000 	.word	0x20030000
 8000fd8:	080087ac 	.word	0x080087ac
  INIT_BSS _sbss, _ebss
 8000fdc:	20000080 	.word	0x20000080
 8000fe0:	20001cdc 	.word	0x20001cdc

08000fe4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC1_IRQHandler>

08000fe6 <LL_AHB2_GRP1_EnableClock>:
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b085      	sub	sp, #20
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000fee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ff2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ff4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ffe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001002:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4013      	ands	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800100a:	68fb      	ldr	r3, [r7, #12]
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8001022:	f107 030c 	add.w	r3, r7, #12
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001032:	2002      	movs	r0, #2
 8001034:	f7ff ffd7 	bl	8000fe6 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	4a12      	ldr	r2, [pc, #72]	@ (8001084 <BSP_LED_Init+0x6c>)
 800103c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001040:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001042:	2301      	movs	r3, #1
 8001044:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800104a:	2302      	movs	r3, #2
 800104c:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	4a0d      	ldr	r2, [pc, #52]	@ (8001088 <BSP_LED_Init+0x70>)
 8001052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001056:	f107 020c 	add.w	r2, r7, #12
 800105a:	4611      	mov	r1, r2
 800105c:	4618      	mov	r0, r3
 800105e:	f000 f95b 	bl	8001318 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	4a08      	ldr	r2, [pc, #32]	@ (8001088 <BSP_LED_Init+0x70>)
 8001066:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	4a05      	ldr	r2, [pc, #20]	@ (8001084 <BSP_LED_Init+0x6c>)
 800106e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001072:	2200      	movs	r2, #0
 8001074:	4619      	mov	r1, r3
 8001076:	f000 fb9d 	bl	80017b4 <HAL_GPIO_WritePin>
}
 800107a:	bf00      	nop
 800107c:	3720      	adds	r7, #32
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	080086c0 	.word	0x080086c0
 8001088:	2000000c 	.word	0x2000000c

0800108c <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	4a07      	ldr	r2, [pc, #28]	@ (80010b8 <BSP_LED_Toggle+0x2c>)
 800109a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	4906      	ldr	r1, [pc, #24]	@ (80010bc <BSP_LED_Toggle+0x30>)
 80010a2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010a6:	4619      	mov	r1, r3
 80010a8:	4610      	mov	r0, r2
 80010aa:	f000 fb9b 	bl	80017e4 <HAL_GPIO_TogglePin>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	2000000c 	.word	0x2000000c
 80010bc:	080086c0 	.word	0x080086c0

080010c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ca:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <HAL_Init+0x3c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a0b      	ldr	r2, [pc, #44]	@ (80010fc <HAL_Init+0x3c>)
 80010d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d6:	2003      	movs	r0, #3
 80010d8:	f000 f8eb 	bl	80012b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010dc:	200f      	movs	r0, #15
 80010de:	f7ff fddd 	bl	8000c9c <HAL_InitTick>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	e001      	b.n	80010f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010ee:	f7ff fd51 	bl	8000b94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010f2:	79fb      	ldrb	r3, [r7, #7]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	58004000 	.word	0x58004000

08001100 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001104:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <HAL_IncTick+0x20>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <HAL_IncTick+0x24>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4413      	add	r3, r2
 8001110:	4a04      	ldr	r2, [pc, #16]	@ (8001124 <HAL_IncTick+0x24>)
 8001112:	6013      	str	r3, [r2, #0]
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	2000001c 	.word	0x2000001c
 8001124:	200001a4 	.word	0x200001a4

08001128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return uwTick;
 800112c:	4b03      	ldr	r3, [pc, #12]	@ (800113c <HAL_GetTick+0x14>)
 800112e:	681b      	ldr	r3, [r3, #0]
}
 8001130:	4618      	mov	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	200001a4 	.word	0x200001a4

08001140 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001144:	4b03      	ldr	r3, [pc, #12]	@ (8001154 <HAL_GetTickPrio+0x14>)
 8001146:	681b      	ldr	r3, [r3, #0]
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000018 	.word	0x20000018

08001158 <__NVIC_SetPriorityGrouping>:
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001168:	4b0c      	ldr	r3, [pc, #48]	@ (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001174:	4013      	ands	r3, r2
 8001176:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001180:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001184:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800118a:	4a04      	ldr	r2, [pc, #16]	@ (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	60d3      	str	r3, [r2, #12]
}
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_GetPriorityGrouping>:
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a4:	4b04      	ldr	r3, [pc, #16]	@ (80011b8 <__NVIC_GetPriorityGrouping+0x18>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	f003 0307 	and.w	r3, r3, #7
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <__NVIC_EnableIRQ>:
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	db0b      	blt.n	80011e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	f003 021f 	and.w	r2, r3, #31
 80011d4:	4907      	ldr	r1, [pc, #28]	@ (80011f4 <__NVIC_EnableIRQ+0x38>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	095b      	lsrs	r3, r3, #5
 80011dc:	2001      	movs	r0, #1
 80011de:	fa00 f202 	lsl.w	r2, r0, r2
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000e100 	.word	0xe000e100

080011f8 <__NVIC_SetPriority>:
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	6039      	str	r1, [r7, #0]
 8001202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001208:	2b00      	cmp	r3, #0
 800120a:	db0a      	blt.n	8001222 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	b2da      	uxtb	r2, r3
 8001210:	490c      	ldr	r1, [pc, #48]	@ (8001244 <__NVIC_SetPriority+0x4c>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	0112      	lsls	r2, r2, #4
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	440b      	add	r3, r1
 800121c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001220:	e00a      	b.n	8001238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4908      	ldr	r1, [pc, #32]	@ (8001248 <__NVIC_SetPriority+0x50>)
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	3b04      	subs	r3, #4
 8001230:	0112      	lsls	r2, r2, #4
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	440b      	add	r3, r1
 8001236:	761a      	strb	r2, [r3, #24]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000e100 	.word	0xe000e100
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <NVIC_EncodePriority>:
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	@ 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f1c3 0307 	rsb	r3, r3, #7
 8001266:	2b04      	cmp	r3, #4
 8001268:	bf28      	it	cs
 800126a:	2304      	movcs	r3, #4
 800126c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3304      	adds	r3, #4
 8001272:	2b06      	cmp	r3, #6
 8001274:	d902      	bls.n	800127c <NVIC_EncodePriority+0x30>
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3b03      	subs	r3, #3
 800127a:	e000      	b.n	800127e <NVIC_EncodePriority+0x32>
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43da      	mvns	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	401a      	ands	r2, r3
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001294:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	fa01 f303 	lsl.w	r3, r1, r3
 800129e:	43d9      	mvns	r1, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	4313      	orrs	r3, r2
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3724      	adds	r7, #36	@ 0x24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ff4c 	bl	8001158 <__NVIC_SetPriorityGrouping>
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
 80012d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012d6:	f7ff ff63 	bl	80011a0 <__NVIC_GetPriorityGrouping>
 80012da:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	68b9      	ldr	r1, [r7, #8]
 80012e0:	6978      	ldr	r0, [r7, #20]
 80012e2:	f7ff ffb3 	bl	800124c <NVIC_EncodePriority>
 80012e6:	4602      	mov	r2, r0
 80012e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ec:	4611      	mov	r1, r2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff ff82 	bl	80011f8 <__NVIC_SetPriority>
}
 80012f4:	bf00      	nop
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff ff56 	bl	80011bc <__NVIC_EnableIRQ>
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001318:	b480      	push	{r7}
 800131a:	b087      	sub	sp, #28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001326:	e14c      	b.n	80015c2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	2101      	movs	r1, #1
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	fa01 f303 	lsl.w	r3, r1, r3
 8001334:	4013      	ands	r3, r2
 8001336:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 813e 	beq.w	80015bc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	2b01      	cmp	r3, #1
 800134a:	d005      	beq.n	8001358 <HAL_GPIO_Init+0x40>
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 0303 	and.w	r3, r3, #3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d130      	bne.n	80013ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	2203      	movs	r2, #3
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4013      	ands	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	68da      	ldr	r2, [r3, #12]
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800138e:	2201      	movs	r2, #1
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	091b      	lsrs	r3, r3, #4
 80013a4:	f003 0201 	and.w	r2, r3, #1
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	2b03      	cmp	r3, #3
 80013c4:	d017      	beq.n	80013f6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	2203      	movs	r2, #3
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43db      	mvns	r3, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d123      	bne.n	800144a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	08da      	lsrs	r2, r3, #3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3208      	adds	r2, #8
 800140a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800140e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	220f      	movs	r2, #15
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4013      	ands	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	691a      	ldr	r2, [r3, #16]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	f003 0307 	and.w	r3, r3, #7
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	08da      	lsrs	r2, r3, #3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3208      	adds	r2, #8
 8001444:	6939      	ldr	r1, [r7, #16]
 8001446:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	2203      	movs	r2, #3
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 0203 	and.w	r2, r3, #3
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4313      	orrs	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 8098 	beq.w	80015bc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800148c:	4a54      	ldr	r2, [pc, #336]	@ (80015e0 <HAL_GPIO_Init+0x2c8>)
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	089b      	lsrs	r3, r3, #2
 8001492:	3302      	adds	r3, #2
 8001494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001498:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	220f      	movs	r2, #15
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014b6:	d019      	beq.n	80014ec <HAL_GPIO_Init+0x1d4>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a4a      	ldr	r2, [pc, #296]	@ (80015e4 <HAL_GPIO_Init+0x2cc>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d013      	beq.n	80014e8 <HAL_GPIO_Init+0x1d0>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a49      	ldr	r2, [pc, #292]	@ (80015e8 <HAL_GPIO_Init+0x2d0>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d00d      	beq.n	80014e4 <HAL_GPIO_Init+0x1cc>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a48      	ldr	r2, [pc, #288]	@ (80015ec <HAL_GPIO_Init+0x2d4>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d007      	beq.n	80014e0 <HAL_GPIO_Init+0x1c8>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a47      	ldr	r2, [pc, #284]	@ (80015f0 <HAL_GPIO_Init+0x2d8>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d101      	bne.n	80014dc <HAL_GPIO_Init+0x1c4>
 80014d8:	2304      	movs	r3, #4
 80014da:	e008      	b.n	80014ee <HAL_GPIO_Init+0x1d6>
 80014dc:	2307      	movs	r3, #7
 80014de:	e006      	b.n	80014ee <HAL_GPIO_Init+0x1d6>
 80014e0:	2303      	movs	r3, #3
 80014e2:	e004      	b.n	80014ee <HAL_GPIO_Init+0x1d6>
 80014e4:	2302      	movs	r3, #2
 80014e6:	e002      	b.n	80014ee <HAL_GPIO_Init+0x1d6>
 80014e8:	2301      	movs	r3, #1
 80014ea:	e000      	b.n	80014ee <HAL_GPIO_Init+0x1d6>
 80014ec:	2300      	movs	r3, #0
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	f002 0203 	and.w	r2, r2, #3
 80014f4:	0092      	lsls	r2, r2, #2
 80014f6:	4093      	lsls	r3, r2
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014fe:	4938      	ldr	r1, [pc, #224]	@ (80015e0 <HAL_GPIO_Init+0x2c8>)
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	089b      	lsrs	r3, r3, #2
 8001504:	3302      	adds	r3, #2
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800150c:	4b39      	ldr	r3, [pc, #228]	@ (80015f4 <HAL_GPIO_Init+0x2dc>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	43db      	mvns	r3, r3
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001530:	4a30      	ldr	r2, [pc, #192]	@ (80015f4 <HAL_GPIO_Init+0x2dc>)
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001536:	4b2f      	ldr	r3, [pc, #188]	@ (80015f4 <HAL_GPIO_Init+0x2dc>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	43db      	mvns	r3, r3
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	4013      	ands	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4313      	orrs	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800155a:	4a26      	ldr	r2, [pc, #152]	@ (80015f4 <HAL_GPIO_Init+0x2dc>)
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001560:	4b24      	ldr	r3, [pc, #144]	@ (80015f4 <HAL_GPIO_Init+0x2dc>)
 8001562:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001566:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	43db      	mvns	r3, r3
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4313      	orrs	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001586:	4a1b      	ldr	r2, [pc, #108]	@ (80015f4 <HAL_GPIO_Init+0x2dc>)
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800158e:	4b19      	ldr	r3, [pc, #100]	@ (80015f4 <HAL_GPIO_Init+0x2dc>)
 8001590:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001594:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	43db      	mvns	r3, r3
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015b4:	4a0f      	ldr	r2, [pc, #60]	@ (80015f4 <HAL_GPIO_Init+0x2dc>)
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	3301      	adds	r3, #1
 80015c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	fa22 f303 	lsr.w	r3, r2, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f47f aeab 	bne.w	8001328 <HAL_GPIO_Init+0x10>
  }
}
 80015d2:	bf00      	nop
 80015d4:	bf00      	nop
 80015d6:	371c      	adds	r7, #28
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	40010000 	.word	0x40010000
 80015e4:	48000400 	.word	0x48000400
 80015e8:	48000800 	.word	0x48000800
 80015ec:	48000c00 	.word	0x48000c00
 80015f0:	48001000 	.word	0x48001000
 80015f4:	58000800 	.word	0x58000800

080015f8 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b087      	sub	sp, #28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001606:	e0bb      	b.n	8001780 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001608:	2201      	movs	r2, #1
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	4013      	ands	r3, r2
 8001614:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 80ae 	beq.w	800177a <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800161e:	4a5f      	ldr	r2, [pc, #380]	@ (800179c <HAL_GPIO_DeInit+0x1a4>)
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	089b      	lsrs	r3, r3, #2
 8001624:	3302      	adds	r3, #2
 8001626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	f003 0303 	and.w	r3, r3, #3
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	220f      	movs	r2, #15
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	4013      	ands	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001646:	d019      	beq.n	800167c <HAL_GPIO_DeInit+0x84>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a55      	ldr	r2, [pc, #340]	@ (80017a0 <HAL_GPIO_DeInit+0x1a8>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d013      	beq.n	8001678 <HAL_GPIO_DeInit+0x80>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a54      	ldr	r2, [pc, #336]	@ (80017a4 <HAL_GPIO_DeInit+0x1ac>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d00d      	beq.n	8001674 <HAL_GPIO_DeInit+0x7c>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a53      	ldr	r2, [pc, #332]	@ (80017a8 <HAL_GPIO_DeInit+0x1b0>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d007      	beq.n	8001670 <HAL_GPIO_DeInit+0x78>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a52      	ldr	r2, [pc, #328]	@ (80017ac <HAL_GPIO_DeInit+0x1b4>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d101      	bne.n	800166c <HAL_GPIO_DeInit+0x74>
 8001668:	2304      	movs	r3, #4
 800166a:	e008      	b.n	800167e <HAL_GPIO_DeInit+0x86>
 800166c:	2307      	movs	r3, #7
 800166e:	e006      	b.n	800167e <HAL_GPIO_DeInit+0x86>
 8001670:	2303      	movs	r3, #3
 8001672:	e004      	b.n	800167e <HAL_GPIO_DeInit+0x86>
 8001674:	2302      	movs	r3, #2
 8001676:	e002      	b.n	800167e <HAL_GPIO_DeInit+0x86>
 8001678:	2301      	movs	r3, #1
 800167a:	e000      	b.n	800167e <HAL_GPIO_DeInit+0x86>
 800167c:	2300      	movs	r3, #0
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	f002 0203 	and.w	r2, r2, #3
 8001684:	0092      	lsls	r2, r2, #2
 8001686:	4093      	lsls	r3, r2
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	429a      	cmp	r2, r3
 800168c:	d136      	bne.n	80016fc <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800168e:	4b48      	ldr	r3, [pc, #288]	@ (80017b0 <HAL_GPIO_DeInit+0x1b8>)
 8001690:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	43db      	mvns	r3, r3
 8001698:	4945      	ldr	r1, [pc, #276]	@ (80017b0 <HAL_GPIO_DeInit+0x1b8>)
 800169a:	4013      	ands	r3, r2
 800169c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80016a0:	4b43      	ldr	r3, [pc, #268]	@ (80017b0 <HAL_GPIO_DeInit+0x1b8>)
 80016a2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	4941      	ldr	r1, [pc, #260]	@ (80017b0 <HAL_GPIO_DeInit+0x1b8>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80016b2:	4b3f      	ldr	r3, [pc, #252]	@ (80017b0 <HAL_GPIO_DeInit+0x1b8>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	493d      	ldr	r1, [pc, #244]	@ (80017b0 <HAL_GPIO_DeInit+0x1b8>)
 80016bc:	4013      	ands	r3, r2
 80016be:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80016c0:	4b3b      	ldr	r3, [pc, #236]	@ (80017b0 <HAL_GPIO_DeInit+0x1b8>)
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	43db      	mvns	r3, r3
 80016c8:	4939      	ldr	r1, [pc, #228]	@ (80017b0 <HAL_GPIO_DeInit+0x1b8>)
 80016ca:	4013      	ands	r3, r2
 80016cc:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	220f      	movs	r2, #15
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80016de:	4a2f      	ldr	r2, [pc, #188]	@ (800179c <HAL_GPIO_DeInit+0x1a4>)
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	089b      	lsrs	r3, r3, #2
 80016e4:	3302      	adds	r3, #2
 80016e6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	43da      	mvns	r2, r3
 80016ee:	482b      	ldr	r0, [pc, #172]	@ (800179c <HAL_GPIO_DeInit+0x1a4>)
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	089b      	lsrs	r3, r3, #2
 80016f4:	400a      	ands	r2, r1
 80016f6:	3302      	adds	r3, #2
 80016f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	2103      	movs	r1, #3
 8001706:	fa01 f303 	lsl.w	r3, r1, r3
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	08da      	lsrs	r2, r3, #3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3208      	adds	r2, #8
 8001718:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	220f      	movs	r2, #15
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	08d2      	lsrs	r2, r2, #3
 8001730:	4019      	ands	r1, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3208      	adds	r2, #8
 8001736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68da      	ldr	r2, [r3, #12]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	2103      	movs	r1, #3
 8001744:	fa01 f303 	lsl.w	r3, r1, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	401a      	ands	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	2101      	movs	r1, #1
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	fa01 f303 	lsl.w	r3, r1, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	401a      	ands	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	2103      	movs	r1, #3
 800176e:	fa01 f303 	lsl.w	r3, r1, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	401a      	ands	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	609a      	str	r2, [r3, #8]
    }

    position++;
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	3301      	adds	r3, #1
 800177e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	fa22 f303 	lsr.w	r3, r2, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	f47f af3d 	bne.w	8001608 <HAL_GPIO_DeInit+0x10>
  }
}
 800178e:	bf00      	nop
 8001790:	bf00      	nop
 8001792:	371c      	adds	r7, #28
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	40010000 	.word	0x40010000
 80017a0:	48000400 	.word	0x48000400
 80017a4:	48000800 	.word	0x48000800
 80017a8:	48000c00 	.word	0x48000c00
 80017ac:	48001000 	.word	0x48001000
 80017b0:	58000800 	.word	0x58000800

080017b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	460b      	mov	r3, r1
 80017be:	807b      	strh	r3, [r7, #2]
 80017c0:	4613      	mov	r3, r2
 80017c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017c4:	787b      	ldrb	r3, [r7, #1]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017ca:	887a      	ldrh	r2, [r7, #2]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017d0:	e002      	b.n	80017d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017d2:	887a      	ldrh	r2, [r7, #2]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017f6:	887a      	ldrh	r2, [r7, #2]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4013      	ands	r3, r2
 80017fc:	041a      	lsls	r2, r3, #16
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	43d9      	mvns	r1, r3
 8001802:	887b      	ldrh	r3, [r7, #2]
 8001804:	400b      	ands	r3, r1
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	619a      	str	r2, [r3, #24]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800181c:	4b05      	ldr	r3, [pc, #20]	@ (8001834 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a04      	ldr	r2, [pc, #16]	@ (8001834 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001822:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001826:	6013      	str	r3, [r2, #0]
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	58000400 	.word	0x58000400

08001838 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800183c:	4b04      	ldr	r3, [pc, #16]	@ (8001850 <HAL_PWREx_GetVoltageRange+0x18>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001844:	4618      	mov	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	58000400 	.word	0x58000400

08001854 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001858:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001862:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001866:	d101      	bne.n	800186c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800187c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001886:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800189a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018a8:	6013      	str	r3, [r2, #0]
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80018b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80018c6:	d101      	bne.n	80018cc <LL_RCC_HSE_IsReady+0x18>
 80018c8:	2301      	movs	r3, #1
 80018ca:	e000      	b.n	80018ce <LL_RCC_HSE_IsReady+0x1a>
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80018dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ea:	6013      	str	r3, [r2, #0]
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80018fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001904:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001908:	6013      	str	r3, [r2, #0]
}
 800190a:	bf00      	nop
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001918:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001922:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001926:	d101      	bne.n	800192c <LL_RCC_HSI_IsReady+0x18>
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <LL_RCC_HSI_IsReady+0x1a>
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001940:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	061b      	lsls	r3, r3, #24
 800194e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001952:	4313      	orrs	r3, r2
 8001954:	604b      	str	r3, [r1, #4]
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001966:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800196a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800196e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001988:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800198c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001990:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001994:	f023 0301 	bic.w	r3, r3, #1
 8001998:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80019aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d101      	bne.n	80019be <LL_RCC_HSI48_IsReady+0x18>
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <LL_RCC_HSI48_IsReady+0x1a>
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019fc:	f023 0301 	bic.w	r3, r3, #1
 8001a00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a1e:	f043 0304 	orr.w	r3, r3, #4
 8001a22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a40:	f023 0304 	bic.w	r3, r3, #4
 8001a44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001a56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d101      	bne.n	8001a6a <LL_RCC_LSE_IsReady+0x18>
 8001a66:	2301      	movs	r3, #1
 8001a68:	e000      	b.n	8001a6c <LL_RCC_LSE_IsReady+0x1a>
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001a7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001a9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aa4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001aa8:	f023 0301 	bic.w	r3, r3, #1
 8001aac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001abe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d101      	bne.n	8001ad2 <LL_RCC_LSI1_IsReady+0x18>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <LL_RCC_LSI1_IsReady+0x1a>
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001ae2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001aee:	f043 0304 	orr.w	r3, r3, #4
 8001af2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001b04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b10:	f023 0304 	bic.w	r3, r3, #4
 8001b14:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001b26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d101      	bne.n	8001b3a <LL_RCC_LSI2_IsReady+0x18>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <LL_RCC_LSI2_IsReady+0x1a>
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001b4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b56:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	021b      	lsls	r3, r3, #8
 8001b5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b62:	4313      	orrs	r3, r2
 8001b64:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001b78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6013      	str	r3, [r2, #0]
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001b96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ba0:	f023 0301 	bic.w	r3, r3, #1
 8001ba4:	6013      	str	r3, [r2, #0]
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001bb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d101      	bne.n	8001bc6 <LL_RCC_MSI_IsReady+0x16>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <LL_RCC_MSI_IsReady+0x18>
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001bda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001be4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001c00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c0a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2bb0      	cmp	r3, #176	@ 0xb0
 8001c10:	d901      	bls.n	8001c16 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001c12:	23b0      	movs	r3, #176	@ 0xb0
 8001c14:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001c16:	687b      	ldr	r3, [r7, #4]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001c2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	021b      	lsls	r3, r3, #8
 8001c3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	604b      	str	r3, [r1, #4]
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001c56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f023 0203 	bic.w	r2, r3, #3
 8001c60:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	608b      	str	r3, [r1, #8]
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001c7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 030c 	and.w	r3, r3, #12
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001c96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ca0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	608b      	str	r3, [r1, #8]
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001cbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cc2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001cc6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001cea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cee:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001cf2:	f023 020f 	bic.w	r2, r3, #15
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001d18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	608b      	str	r3, [r1, #8]
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001d40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	608b      	str	r3, [r1, #8]
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001d64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8001d7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d80:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001d84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001d96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001db2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001dca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001de2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001dec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001df0:	6013      	str	r3, [r2, #0]
}
 8001df2:	bf00      	nop
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001e00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e0e:	6013      	str	r3, [r2, #0]
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001e1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e2c:	d101      	bne.n	8001e32 <LL_RCC_PLL_IsReady+0x18>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <LL_RCC_PLL_IsReady+0x1a>
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001e42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	0a1b      	lsrs	r3, r3, #8
 8001e4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001e5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001e74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001e8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	f003 0303 	and.w	r3, r3, #3
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001ea4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001eb2:	d101      	bne.n	8001eb8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e000      	b.n	8001eba <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001ec8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ecc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001ed8:	d101      	bne.n	8001ede <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001eee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ef2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001ef6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001efa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001efe:	d101      	bne.n	8001f04 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001f14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001f22:	d101      	bne.n	8001f28 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001f24:	2301      	movs	r3, #1
 8001f26:	e000      	b.n	8001f2a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001f38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001f46:	d101      	bne.n	8001f4c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e000      	b.n	8001f4e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f58:	b590      	push	{r4, r7, lr}
 8001f5a:	b08d      	sub	sp, #52	@ 0x34
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e363      	b.n	8002632 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0320 	and.w	r3, r3, #32
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 808d 	beq.w	8002092 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f78:	f7ff fe7d 	bl	8001c76 <LL_RCC_GetSysClkSource>
 8001f7c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f7e:	f7ff ff83 	bl	8001e88 <LL_RCC_PLL_GetMainSource>
 8001f82:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d005      	beq.n	8001f96 <HAL_RCC_OscConfig+0x3e>
 8001f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f8c:	2b0c      	cmp	r3, #12
 8001f8e:	d147      	bne.n	8002020 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d144      	bne.n	8002020 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e347      	b.n	8002632 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8001fa6:	f7ff fe28 	bl	8001bfa <LL_RCC_MSI_GetRange>
 8001faa:	4603      	mov	r3, r0
 8001fac:	429c      	cmp	r4, r3
 8001fae:	d914      	bls.n	8001fda <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f000 fd61 	bl	8002a7c <RCC_SetFlashLatencyFromMSIRange>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e336      	b.n	8002632 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff fe02 	bl	8001bd2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff fe26 	bl	8001c24 <LL_RCC_MSI_SetCalibTrimming>
 8001fd8:	e013      	b.n	8002002 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff fdf7 	bl	8001bd2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fe1b 	bl	8001c24 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 fd42 	bl	8002a7c <RCC_SetFlashLatencyFromMSIRange>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e317      	b.n	8002632 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002002:	f000 fcc9 	bl	8002998 <HAL_RCC_GetHCLKFreq>
 8002006:	4603      	mov	r3, r0
 8002008:	4aa4      	ldr	r2, [pc, #656]	@ (800229c <HAL_RCC_OscConfig+0x344>)
 800200a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800200c:	4ba4      	ldr	r3, [pc, #656]	@ (80022a0 <HAL_RCC_OscConfig+0x348>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fe43 	bl	8000c9c <HAL_InitTick>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d039      	beq.n	8002090 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e308      	b.n	8002632 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d01e      	beq.n	8002066 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002028:	f7ff fda4 	bl	8001b74 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800202c:	f7ff f87c 	bl	8001128 <HAL_GetTick>
 8002030:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002034:	f7ff f878 	bl	8001128 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e2f5      	b.n	8002632 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002046:	f7ff fdb3 	bl	8001bb0 <LL_RCC_MSI_IsReady>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0f1      	beq.n	8002034 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fdbc 	bl	8001bd2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff fde0 	bl	8001c24 <LL_RCC_MSI_SetCalibTrimming>
 8002064:	e015      	b.n	8002092 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002066:	f7ff fd94 	bl	8001b92 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800206a:	f7ff f85d 	bl	8001128 <HAL_GetTick>
 800206e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002072:	f7ff f859 	bl	8001128 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e2d6      	b.n	8002632 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002084:	f7ff fd94 	bl	8001bb0 <LL_RCC_MSI_IsReady>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f1      	bne.n	8002072 <HAL_RCC_OscConfig+0x11a>
 800208e:	e000      	b.n	8002092 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002090:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d047      	beq.n	800212e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800209e:	f7ff fdea 	bl	8001c76 <LL_RCC_GetSysClkSource>
 80020a2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020a4:	f7ff fef0 	bl	8001e88 <LL_RCC_PLL_GetMainSource>
 80020a8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	d005      	beq.n	80020bc <HAL_RCC_OscConfig+0x164>
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	2b0c      	cmp	r3, #12
 80020b4:	d108      	bne.n	80020c8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	2b03      	cmp	r3, #3
 80020ba:	d105      	bne.n	80020c8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d134      	bne.n	800212e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e2b4      	b.n	8002632 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020d0:	d102      	bne.n	80020d8 <HAL_RCC_OscConfig+0x180>
 80020d2:	f7ff fbd1 	bl	8001878 <LL_RCC_HSE_Enable>
 80020d6:	e001      	b.n	80020dc <HAL_RCC_OscConfig+0x184>
 80020d8:	f7ff fbdd 	bl	8001896 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d012      	beq.n	800210a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e4:	f7ff f820 	bl	8001128 <HAL_GetTick>
 80020e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ec:	f7ff f81c 	bl	8001128 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b64      	cmp	r3, #100	@ 0x64
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e299      	b.n	8002632 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80020fe:	f7ff fbd9 	bl	80018b4 <LL_RCC_HSE_IsReady>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0f1      	beq.n	80020ec <HAL_RCC_OscConfig+0x194>
 8002108:	e011      	b.n	800212e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210a:	f7ff f80d 	bl	8001128 <HAL_GetTick>
 800210e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002112:	f7ff f809 	bl	8001128 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b64      	cmp	r3, #100	@ 0x64
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e286      	b.n	8002632 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002124:	f7ff fbc6 	bl	80018b4 <LL_RCC_HSE_IsReady>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f1      	bne.n	8002112 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d04c      	beq.n	80021d4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800213a:	f7ff fd9c 	bl	8001c76 <LL_RCC_GetSysClkSource>
 800213e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002140:	f7ff fea2 	bl	8001e88 <LL_RCC_PLL_GetMainSource>
 8002144:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	2b04      	cmp	r3, #4
 800214a:	d005      	beq.n	8002158 <HAL_RCC_OscConfig+0x200>
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	2b0c      	cmp	r3, #12
 8002150:	d10e      	bne.n	8002170 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2b02      	cmp	r3, #2
 8002156:	d10b      	bne.n	8002170 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e266      	b.n	8002632 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fbe5 	bl	8001938 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800216e:	e031      	b.n	80021d4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d019      	beq.n	80021ac <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002178:	f7ff fbae 	bl	80018d8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217c:	f7fe ffd4 	bl	8001128 <HAL_GetTick>
 8002180:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002184:	f7fe ffd0 	bl	8001128 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e24d      	b.n	8002632 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002196:	f7ff fbbd 	bl	8001914 <LL_RCC_HSI_IsReady>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0f1      	beq.n	8002184 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fbc7 	bl	8001938 <LL_RCC_HSI_SetCalibTrimming>
 80021aa:	e013      	b.n	80021d4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ac:	f7ff fba3 	bl	80018f6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b0:	f7fe ffba 	bl	8001128 <HAL_GetTick>
 80021b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b8:	f7fe ffb6 	bl	8001128 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e233      	b.n	8002632 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80021ca:	f7ff fba3 	bl	8001914 <LL_RCC_HSI_IsReady>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1f1      	bne.n	80021b8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d106      	bne.n	80021ee <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 80a3 	beq.w	8002334 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d076      	beq.n	80022e4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0310 	and.w	r3, r3, #16
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d046      	beq.n	8002290 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002202:	f7ff fc5a 	bl	8001aba <LL_RCC_LSI1_IsReady>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d113      	bne.n	8002234 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800220c:	f7ff fc33 	bl	8001a76 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002210:	f7fe ff8a 	bl	8001128 <HAL_GetTick>
 8002214:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002218:	f7fe ff86 	bl	8001128 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e203      	b.n	8002632 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800222a:	f7ff fc46 	bl	8001aba <LL_RCC_LSI1_IsReady>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0f1      	beq.n	8002218 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002234:	f7ff fc53 	bl	8001ade <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7fe ff76 	bl	8001128 <HAL_GetTick>
 800223c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002240:	f7fe ff72 	bl	8001128 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b03      	cmp	r3, #3
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e1ef      	b.n	8002632 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002252:	f7ff fc66 	bl	8001b22 <LL_RCC_LSI2_IsReady>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0f1      	beq.n	8002240 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fc70 	bl	8001b46 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002266:	f7ff fc17 	bl	8001a98 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226a:	f7fe ff5d 	bl	8001128 <HAL_GetTick>
 800226e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002272:	f7fe ff59 	bl	8001128 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e1d6      	b.n	8002632 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002284:	f7ff fc19 	bl	8001aba <LL_RCC_LSI1_IsReady>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f1      	bne.n	8002272 <HAL_RCC_OscConfig+0x31a>
 800228e:	e051      	b.n	8002334 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002290:	f7ff fbf1 	bl	8001a76 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002294:	f7fe ff48 	bl	8001128 <HAL_GetTick>
 8002298:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800229a:	e00c      	b.n	80022b6 <HAL_RCC_OscConfig+0x35e>
 800229c:	20000008 	.word	0x20000008
 80022a0:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80022a4:	f7fe ff40 	bl	8001128 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e1bd      	b.n	8002632 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80022b6:	f7ff fc00 	bl	8001aba <LL_RCC_LSI1_IsReady>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f1      	beq.n	80022a4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80022c0:	f7ff fc1e 	bl	8001b00 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80022c6:	f7fe ff2f 	bl	8001128 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e1ac      	b.n	8002632 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80022d8:	f7ff fc23 	bl	8001b22 <LL_RCC_LSI2_IsReady>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f1      	bne.n	80022c6 <HAL_RCC_OscConfig+0x36e>
 80022e2:	e027      	b.n	8002334 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80022e4:	f7ff fc0c 	bl	8001b00 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e8:	f7fe ff1e 	bl	8001128 <HAL_GetTick>
 80022ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80022f0:	f7fe ff1a 	bl	8001128 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e197      	b.n	8002632 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002302:	f7ff fc0e 	bl	8001b22 <LL_RCC_LSI2_IsReady>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1f1      	bne.n	80022f0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800230c:	f7ff fbc4 	bl	8001a98 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002310:	f7fe ff0a 	bl	8001128 <HAL_GetTick>
 8002314:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002318:	f7fe ff06 	bl	8001128 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e183      	b.n	8002632 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800232a:	f7ff fbc6 	bl	8001aba <LL_RCC_LSI1_IsReady>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f1      	bne.n	8002318 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d05b      	beq.n	80023f8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002340:	4ba7      	ldr	r3, [pc, #668]	@ (80025e0 <HAL_RCC_OscConfig+0x688>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002348:	2b00      	cmp	r3, #0
 800234a:	d114      	bne.n	8002376 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800234c:	f7ff fa64 	bl	8001818 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002350:	f7fe feea 	bl	8001128 <HAL_GetTick>
 8002354:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002358:	f7fe fee6 	bl	8001128 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e163      	b.n	8002632 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800236a:	4b9d      	ldr	r3, [pc, #628]	@ (80025e0 <HAL_RCC_OscConfig+0x688>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d102      	bne.n	8002384 <HAL_RCC_OscConfig+0x42c>
 800237e:	f7ff fb24 	bl	80019ca <LL_RCC_LSE_Enable>
 8002382:	e00c      	b.n	800239e <HAL_RCC_OscConfig+0x446>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	2b05      	cmp	r3, #5
 800238a:	d104      	bne.n	8002396 <HAL_RCC_OscConfig+0x43e>
 800238c:	f7ff fb3f 	bl	8001a0e <LL_RCC_LSE_EnableBypass>
 8002390:	f7ff fb1b 	bl	80019ca <LL_RCC_LSE_Enable>
 8002394:	e003      	b.n	800239e <HAL_RCC_OscConfig+0x446>
 8002396:	f7ff fb29 	bl	80019ec <LL_RCC_LSE_Disable>
 800239a:	f7ff fb49 	bl	8001a30 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d014      	beq.n	80023d0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a6:	f7fe febf 	bl	8001128 <HAL_GetTick>
 80023aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80023ac:	e00a      	b.n	80023c4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ae:	f7fe febb 	bl	8001128 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023bc:	4293      	cmp	r3, r2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e136      	b.n	8002632 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80023c4:	f7ff fb45 	bl	8001a52 <LL_RCC_LSE_IsReady>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0ef      	beq.n	80023ae <HAL_RCC_OscConfig+0x456>
 80023ce:	e013      	b.n	80023f8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d0:	f7fe feaa 	bl	8001128 <HAL_GetTick>
 80023d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80023d6:	e00a      	b.n	80023ee <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d8:	f7fe fea6 	bl	8001128 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e121      	b.n	8002632 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80023ee:	f7ff fb30 	bl	8001a52 <LL_RCC_LSE_IsReady>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1ef      	bne.n	80023d8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002400:	2b00      	cmp	r3, #0
 8002402:	d02c      	beq.n	800245e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002408:	2b00      	cmp	r3, #0
 800240a:	d014      	beq.n	8002436 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800240c:	f7ff faa9 	bl	8001962 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002410:	f7fe fe8a 	bl	8001128 <HAL_GetTick>
 8002414:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002418:	f7fe fe86 	bl	8001128 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e103      	b.n	8002632 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800242a:	f7ff fabc 	bl	80019a6 <LL_RCC_HSI48_IsReady>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f1      	beq.n	8002418 <HAL_RCC_OscConfig+0x4c0>
 8002434:	e013      	b.n	800245e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002436:	f7ff faa5 	bl	8001984 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243a:	f7fe fe75 	bl	8001128 <HAL_GetTick>
 800243e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002442:	f7fe fe71 	bl	8001128 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e0ee      	b.n	8002632 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002454:	f7ff faa7 	bl	80019a6 <LL_RCC_HSI48_IsReady>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f1      	bne.n	8002442 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 80e4 	beq.w	8002630 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002468:	f7ff fc05 	bl	8001c76 <LL_RCC_GetSysClkSource>
 800246c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800246e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247a:	2b02      	cmp	r3, #2
 800247c:	f040 80b4 	bne.w	80025e8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f003 0203 	and.w	r2, r3, #3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248a:	429a      	cmp	r2, r3
 800248c:	d123      	bne.n	80024d6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002498:	429a      	cmp	r2, r3
 800249a:	d11c      	bne.n	80024d6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	0a1b      	lsrs	r3, r3, #8
 80024a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d114      	bne.n	80024d6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d10d      	bne.n	80024d6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d106      	bne.n	80024d6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d05d      	beq.n	8002592 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	2b0c      	cmp	r3, #12
 80024da:	d058      	beq.n	800258e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80024dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e0a1      	b.n	8002632 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80024ee:	f7ff fc85 	bl	8001dfc <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024f2:	f7fe fe19 	bl	8001128 <HAL_GetTick>
 80024f6:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fa:	f7fe fe15 	bl	8001128 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e092      	b.n	8002632 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800250c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1ef      	bne.n	80024fa <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800251a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	4b30      	ldr	r3, [pc, #192]	@ (80025e4 <HAL_RCC_OscConfig+0x68c>)
 8002522:	4013      	ands	r3, r2
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800252c:	4311      	orrs	r1, r2
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002532:	0212      	lsls	r2, r2, #8
 8002534:	4311      	orrs	r1, r2
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800253a:	4311      	orrs	r1, r2
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002540:	4311      	orrs	r1, r2
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002546:	430a      	orrs	r2, r1
 8002548:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800254c:	4313      	orrs	r3, r2
 800254e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002550:	f7ff fc45 	bl	8001dde <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002554:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800255e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002562:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002564:	f7fe fde0 	bl	8001128 <HAL_GetTick>
 8002568:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256c:	f7fe fddc 	bl	8001128 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e059      	b.n	8002632 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800257e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0ef      	beq.n	800256c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800258c:	e050      	b.n	8002630 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e04f      	b.n	8002632 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002592:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d147      	bne.n	8002630 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025a0:	f7ff fc1d 	bl	8001dde <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025b4:	f7fe fdb8 	bl	8001128 <HAL_GetTick>
 80025b8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025bc:	f7fe fdb4 	bl	8001128 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e031      	b.n	8002632 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0ef      	beq.n	80025bc <HAL_RCC_OscConfig+0x664>
 80025dc:	e028      	b.n	8002630 <HAL_RCC_OscConfig+0x6d8>
 80025de:	bf00      	nop
 80025e0:	58000400 	.word	0x58000400
 80025e4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	2b0c      	cmp	r3, #12
 80025ec:	d01e      	beq.n	800262c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ee:	f7ff fc05 	bl	8001dfc <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f2:	f7fe fd99 	bl	8001128 <HAL_GetTick>
 80025f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fa:	f7fe fd95 	bl	8001128 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e012      	b.n	8002632 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800260c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1ef      	bne.n	80025fa <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800261a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002624:	4b05      	ldr	r3, [pc, #20]	@ (800263c <HAL_RCC_OscConfig+0x6e4>)
 8002626:	4013      	ands	r3, r2
 8002628:	60cb      	str	r3, [r1, #12]
 800262a:	e001      	b.n	8002630 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3734      	adds	r7, #52	@ 0x34
 8002636:	46bd      	mov	sp, r7
 8002638:	bd90      	pop	{r4, r7, pc}
 800263a:	bf00      	nop
 800263c:	eefefffc 	.word	0xeefefffc

08002640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e12d      	b.n	80028b0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002654:	4b98      	ldr	r3, [pc, #608]	@ (80028b8 <HAL_RCC_ClockConfig+0x278>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d91b      	bls.n	800269a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002662:	4b95      	ldr	r3, [pc, #596]	@ (80028b8 <HAL_RCC_ClockConfig+0x278>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 0207 	bic.w	r2, r3, #7
 800266a:	4993      	ldr	r1, [pc, #588]	@ (80028b8 <HAL_RCC_ClockConfig+0x278>)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	4313      	orrs	r3, r2
 8002670:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002672:	f7fe fd59 	bl	8001128 <HAL_GetTick>
 8002676:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002678:	e008      	b.n	800268c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800267a:	f7fe fd55 	bl	8001128 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e111      	b.n	80028b0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800268c:	4b8a      	ldr	r3, [pc, #552]	@ (80028b8 <HAL_RCC_ClockConfig+0x278>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d1ef      	bne.n	800267a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d016      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff faef 	bl	8001c8e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026b0:	f7fe fd3a 	bl	8001128 <HAL_GetTick>
 80026b4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026b8:	f7fe fd36 	bl	8001128 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e0f2      	b.n	80028b0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80026ca:	f7ff fbe9 	bl	8001ea0 <LL_RCC_IsActiveFlag_HPRE>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0f1      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0320 	and.w	r3, r3, #32
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d016      	beq.n	800270e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff fae6 	bl	8001cb6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026ea:	f7fe fd1d 	bl	8001128 <HAL_GetTick>
 80026ee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026f2:	f7fe fd19 	bl	8001128 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e0d5      	b.n	80028b0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002704:	f7ff fbde 	bl	8001ec4 <LL_RCC_IsActiveFlag_C2HPRE>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f1      	beq.n	80026f2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002716:	2b00      	cmp	r3, #0
 8002718:	d016      	beq.n	8002748 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff fadf 	bl	8001ce2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002724:	f7fe fd00 	bl	8001128 <HAL_GetTick>
 8002728:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800272a:	e008      	b.n	800273e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800272c:	f7fe fcfc 	bl	8001128 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e0b8      	b.n	80028b0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800273e:	f7ff fbd4 	bl	8001eea <LL_RCC_IsActiveFlag_SHDHPRE>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0f1      	beq.n	800272c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b00      	cmp	r3, #0
 8002752:	d016      	beq.n	8002782 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff fad9 	bl	8001d10 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800275e:	f7fe fce3 	bl	8001128 <HAL_GetTick>
 8002762:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002764:	e008      	b.n	8002778 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002766:	f7fe fcdf 	bl	8001128 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e09b      	b.n	80028b0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002778:	f7ff fbca 	bl	8001f10 <LL_RCC_IsActiveFlag_PPRE1>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f1      	beq.n	8002766 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d017      	beq.n	80027be <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff facf 	bl	8001d38 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800279a:	f7fe fcc5 	bl	8001128 <HAL_GetTick>
 800279e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027a2:	f7fe fcc1 	bl	8001128 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e07d      	b.n	80028b0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80027b4:	f7ff fbbe 	bl	8001f34 <LL_RCC_IsActiveFlag_PPRE2>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f1      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d043      	beq.n	8002852 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d106      	bne.n	80027e0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80027d2:	f7ff f86f 	bl	80018b4 <LL_RCC_HSE_IsReady>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d11e      	bne.n	800281a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e067      	b.n	80028b0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	d106      	bne.n	80027f6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80027e8:	f7ff fb17 	bl	8001e1a <LL_RCC_PLL_IsReady>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d113      	bne.n	800281a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e05c      	b.n	80028b0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d106      	bne.n	800280c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80027fe:	f7ff f9d7 	bl	8001bb0 <LL_RCC_MSI_IsReady>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d108      	bne.n	800281a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e051      	b.n	80028b0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800280c:	f7ff f882 	bl	8001914 <LL_RCC_HSI_IsReady>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e04a      	b.n	80028b0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff fa15 	bl	8001c4e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002824:	f7fe fc80 	bl	8001128 <HAL_GetTick>
 8002828:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282a:	e00a      	b.n	8002842 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800282c:	f7fe fc7c 	bl	8001128 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800283a:	4293      	cmp	r3, r2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e036      	b.n	80028b0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002842:	f7ff fa18 	bl	8001c76 <LL_RCC_GetSysClkSource>
 8002846:	4602      	mov	r2, r0
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	429a      	cmp	r2, r3
 8002850:	d1ec      	bne.n	800282c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002852:	4b19      	ldr	r3, [pc, #100]	@ (80028b8 <HAL_RCC_ClockConfig+0x278>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d21b      	bcs.n	8002898 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002860:	4b15      	ldr	r3, [pc, #84]	@ (80028b8 <HAL_RCC_ClockConfig+0x278>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f023 0207 	bic.w	r2, r3, #7
 8002868:	4913      	ldr	r1, [pc, #76]	@ (80028b8 <HAL_RCC_ClockConfig+0x278>)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	4313      	orrs	r3, r2
 800286e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002870:	f7fe fc5a 	bl	8001128 <HAL_GetTick>
 8002874:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002876:	e008      	b.n	800288a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002878:	f7fe fc56 	bl	8001128 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e012      	b.n	80028b0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800288a:	4b0b      	ldr	r3, [pc, #44]	@ (80028b8 <HAL_RCC_ClockConfig+0x278>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	d1ef      	bne.n	8002878 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002898:	f000 f87e 	bl	8002998 <HAL_RCC_GetHCLKFreq>
 800289c:	4603      	mov	r3, r0
 800289e:	4a07      	ldr	r2, [pc, #28]	@ (80028bc <HAL_RCC_ClockConfig+0x27c>)
 80028a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80028a2:	f7fe fc4d 	bl	8001140 <HAL_GetTickPrio>
 80028a6:	4603      	mov	r3, r0
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fe f9f7 	bl	8000c9c <HAL_InitTick>
 80028ae:	4603      	mov	r3, r0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	58004000 	.word	0x58004000
 80028bc:	20000008 	.word	0x20000008

080028c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c0:	b590      	push	{r4, r7, lr}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028c6:	f7ff f9d6 	bl	8001c76 <LL_RCC_GetSysClkSource>
 80028ca:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10a      	bne.n	80028e8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80028d2:	f7ff f992 	bl	8001bfa <LL_RCC_MSI_GetRange>
 80028d6:	4603      	mov	r3, r0
 80028d8:	091b      	lsrs	r3, r3, #4
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	4a2b      	ldr	r2, [pc, #172]	@ (800298c <HAL_RCC_GetSysClockFreq+0xcc>)
 80028e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	e04b      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d102      	bne.n	80028f4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028ee:	4b28      	ldr	r3, [pc, #160]	@ (8002990 <HAL_RCC_GetSysClockFreq+0xd0>)
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	e045      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b08      	cmp	r3, #8
 80028f8:	d10a      	bne.n	8002910 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80028fa:	f7fe ffab 	bl	8001854 <LL_RCC_HSE_IsEnabledDiv2>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b01      	cmp	r3, #1
 8002902:	d102      	bne.n	800290a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002904:	4b22      	ldr	r3, [pc, #136]	@ (8002990 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	e03a      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800290a:	4b22      	ldr	r3, [pc, #136]	@ (8002994 <HAL_RCC_GetSysClockFreq+0xd4>)
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	e037      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002910:	f7ff faba 	bl	8001e88 <LL_RCC_PLL_GetMainSource>
 8002914:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	2b02      	cmp	r3, #2
 800291a:	d003      	beq.n	8002924 <HAL_RCC_GetSysClockFreq+0x64>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	2b03      	cmp	r3, #3
 8002920:	d003      	beq.n	800292a <HAL_RCC_GetSysClockFreq+0x6a>
 8002922:	e00d      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002924:	4b1a      	ldr	r3, [pc, #104]	@ (8002990 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002926:	60bb      	str	r3, [r7, #8]
        break;
 8002928:	e015      	b.n	8002956 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800292a:	f7fe ff93 	bl	8001854 <LL_RCC_HSE_IsEnabledDiv2>
 800292e:	4603      	mov	r3, r0
 8002930:	2b01      	cmp	r3, #1
 8002932:	d102      	bne.n	800293a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002934:	4b16      	ldr	r3, [pc, #88]	@ (8002990 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002936:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002938:	e00d      	b.n	8002956 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800293a:	4b16      	ldr	r3, [pc, #88]	@ (8002994 <HAL_RCC_GetSysClockFreq+0xd4>)
 800293c:	60bb      	str	r3, [r7, #8]
        break;
 800293e:	e00a      	b.n	8002956 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002940:	f7ff f95b 	bl	8001bfa <LL_RCC_MSI_GetRange>
 8002944:	4603      	mov	r3, r0
 8002946:	091b      	lsrs	r3, r3, #4
 8002948:	f003 030f 	and.w	r3, r3, #15
 800294c:	4a0f      	ldr	r2, [pc, #60]	@ (800298c <HAL_RCC_GetSysClockFreq+0xcc>)
 800294e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002952:	60bb      	str	r3, [r7, #8]
        break;
 8002954:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002956:	f7ff fa72 	bl	8001e3e <LL_RCC_PLL_GetN>
 800295a:	4602      	mov	r2, r0
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	fb03 f402 	mul.w	r4, r3, r2
 8002962:	f7ff fa85 	bl	8001e70 <LL_RCC_PLL_GetDivider>
 8002966:	4603      	mov	r3, r0
 8002968:	091b      	lsrs	r3, r3, #4
 800296a:	3301      	adds	r3, #1
 800296c:	fbb4 f4f3 	udiv	r4, r4, r3
 8002970:	f7ff fa72 	bl	8001e58 <LL_RCC_PLL_GetR>
 8002974:	4603      	mov	r3, r0
 8002976:	0f5b      	lsrs	r3, r3, #29
 8002978:	3301      	adds	r3, #1
 800297a:	fbb4 f3f3 	udiv	r3, r4, r3
 800297e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002980:	68fb      	ldr	r3, [r7, #12]
}
 8002982:	4618      	mov	r0, r3
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	bd90      	pop	{r4, r7, pc}
 800298a:	bf00      	nop
 800298c:	08008680 	.word	0x08008680
 8002990:	00f42400 	.word	0x00f42400
 8002994:	01e84800 	.word	0x01e84800

08002998 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002998:	b598      	push	{r3, r4, r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800299c:	f7ff ff90 	bl	80028c0 <HAL_RCC_GetSysClockFreq>
 80029a0:	4604      	mov	r4, r0
 80029a2:	f7ff f9dd 	bl	8001d60 <LL_RCC_GetAHBPrescaler>
 80029a6:	4603      	mov	r3, r0
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	4a03      	ldr	r2, [pc, #12]	@ (80029bc <HAL_RCC_GetHCLKFreq+0x24>)
 80029b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	bd98      	pop	{r3, r4, r7, pc}
 80029bc:	08008620 	.word	0x08008620

080029c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029c0:	b598      	push	{r3, r4, r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80029c4:	f7ff ffe8 	bl	8002998 <HAL_RCC_GetHCLKFreq>
 80029c8:	4604      	mov	r4, r0
 80029ca:	f7ff f9f0 	bl	8001dae <LL_RCC_GetAPB1Prescaler>
 80029ce:	4603      	mov	r3, r0
 80029d0:	0a1b      	lsrs	r3, r3, #8
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	4a04      	ldr	r2, [pc, #16]	@ (80029e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	bd98      	pop	{r3, r4, r7, pc}
 80029e8:	08008660 	.word	0x08008660

080029ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029ec:	b598      	push	{r3, r4, r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80029f0:	f7ff ffd2 	bl	8002998 <HAL_RCC_GetHCLKFreq>
 80029f4:	4604      	mov	r4, r0
 80029f6:	f7ff f9e6 	bl	8001dc6 <LL_RCC_GetAPB2Prescaler>
 80029fa:	4603      	mov	r3, r0
 80029fc:	0adb      	lsrs	r3, r3, #11
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	4a04      	ldr	r2, [pc, #16]	@ (8002a14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a08:	f003 031f 	and.w	r3, r3, #31
 8002a0c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	bd98      	pop	{r3, r4, r7, pc}
 8002a14:	08008660 	.word	0x08008660

08002a18 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	226f      	movs	r2, #111	@ 0x6f
 8002a26:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8002a28:	f7ff f925 	bl	8001c76 <LL_RCC_GetSysClkSource>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8002a32:	f7ff f995 	bl	8001d60 <LL_RCC_GetAHBPrescaler>
 8002a36:	4602      	mov	r2, r0
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8002a3c:	f7ff f9b7 	bl	8001dae <LL_RCC_GetAPB1Prescaler>
 8002a40:	4602      	mov	r2, r0
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8002a46:	f7ff f9be 	bl	8001dc6 <LL_RCC_GetAPB2Prescaler>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8002a50:	f7ff f992 	bl	8001d78 <LL_C2_RCC_GetAHBPrescaler>
 8002a54:	4602      	mov	r2, r0
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8002a5a:	f7ff f99a 	bl	8001d92 <LL_RCC_GetAHB4Prescaler>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002a64:	4b04      	ldr	r3, [pc, #16]	@ (8002a78 <HAL_RCC_GetClockConfig+0x60>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0207 	and.w	r2, r3, #7
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	601a      	str	r2, [r3, #0]
}
 8002a70:	bf00      	nop
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	58004000 	.word	0x58004000

08002a7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002a7c:	b590      	push	{r4, r7, lr}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2bb0      	cmp	r3, #176	@ 0xb0
 8002a88:	d903      	bls.n	8002a92 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002a8a:	4b15      	ldr	r3, [pc, #84]	@ (8002ae0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	e007      	b.n	8002aa2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	091b      	lsrs	r3, r3, #4
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	4a11      	ldr	r2, [pc, #68]	@ (8002ae0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002aa2:	f7ff f976 	bl	8001d92 <LL_RCC_GetAHB4Prescaler>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	091b      	lsrs	r3, r3, #4
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	4a0d      	ldr	r2, [pc, #52]	@ (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aba:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac4:	0c9c      	lsrs	r4, r3, #18
 8002ac6:	f7fe feb7 	bl	8001838 <HAL_PWREx_GetVoltageRange>
 8002aca:	4603      	mov	r3, r0
 8002acc:	4619      	mov	r1, r3
 8002ace:	4620      	mov	r0, r4
 8002ad0:	f000 f80c 	bl	8002aec <RCC_SetFlashLatency>
 8002ad4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd90      	pop	{r4, r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	08008680 	.word	0x08008680
 8002ae4:	08008620 	.word	0x08008620
 8002ae8:	431bde83 	.word	0x431bde83

08002aec <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002aec:	b590      	push	{r4, r7, lr}
 8002aee:	b093      	sub	sp, #76	@ 0x4c
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002af6:	4b37      	ldr	r3, [pc, #220]	@ (8002bd4 <RCC_SetFlashLatency+0xe8>)
 8002af8:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002afc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002afe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002b02:	4a35      	ldr	r2, [pc, #212]	@ (8002bd8 <RCC_SetFlashLatency+0xec>)
 8002b04:	f107 031c 	add.w	r3, r7, #28
 8002b08:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002b0e:	4b33      	ldr	r3, [pc, #204]	@ (8002bdc <RCC_SetFlashLatency+0xf0>)
 8002b10:	f107 040c 	add.w	r4, r7, #12
 8002b14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b24:	d11a      	bne.n	8002b5c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b26:	2300      	movs	r3, #0
 8002b28:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b2a:	e013      	b.n	8002b54 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002b2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	3348      	adds	r3, #72	@ 0x48
 8002b32:	443b      	add	r3, r7
 8002b34:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d807      	bhi.n	8002b4e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	3348      	adds	r3, #72	@ 0x48
 8002b44:	443b      	add	r3, r7
 8002b46:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002b4a:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002b4c:	e020      	b.n	8002b90 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b50:	3301      	adds	r3, #1
 8002b52:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d9e8      	bls.n	8002b2c <RCC_SetFlashLatency+0x40>
 8002b5a:	e019      	b.n	8002b90 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b60:	e013      	b.n	8002b8a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002b62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	3348      	adds	r3, #72	@ 0x48
 8002b68:	443b      	add	r3, r7
 8002b6a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d807      	bhi.n	8002b84 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	3348      	adds	r3, #72	@ 0x48
 8002b7a:	443b      	add	r3, r7
 8002b7c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002b80:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002b82:	e005      	b.n	8002b90 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002b84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b86:	3301      	adds	r3, #1
 8002b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d9e8      	bls.n	8002b62 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002b90:	4b13      	ldr	r3, [pc, #76]	@ (8002be0 <RCC_SetFlashLatency+0xf4>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f023 0207 	bic.w	r2, r3, #7
 8002b98:	4911      	ldr	r1, [pc, #68]	@ (8002be0 <RCC_SetFlashLatency+0xf4>)
 8002b9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002ba0:	f7fe fac2 	bl	8001128 <HAL_GetTick>
 8002ba4:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002ba6:	e008      	b.n	8002bba <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002ba8:	f7fe fabe 	bl	8001128 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e007      	b.n	8002bca <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002bba:	4b09      	ldr	r3, [pc, #36]	@ (8002be0 <RCC_SetFlashLatency+0xf4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d1ef      	bne.n	8002ba8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	374c      	adds	r7, #76	@ 0x4c
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd90      	pop	{r4, r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	08008594 	.word	0x08008594
 8002bd8:	080085a4 	.word	0x080085a4
 8002bdc:	080085b0 	.word	0x080085b0
 8002be0:	58004000 	.word	0x58004000

08002be4 <LL_RCC_LSE_IsEnabled>:
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002be8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <LL_RCC_LSE_IsEnabled+0x18>
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e000      	b.n	8002bfe <LL_RCC_LSE_IsEnabled+0x1a>
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <LL_RCC_LSE_IsReady>:
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002c0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d101      	bne.n	8002c20 <LL_RCC_LSE_IsReady+0x18>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <LL_RCC_LSE_IsReady+0x1a>
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <LL_RCC_SetRFWKPClockSource>:
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002c34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c3c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <LL_RCC_SetSMPSClockSource>:
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002c60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c66:	f023 0203 	bic.w	r2, r3, #3
 8002c6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <LL_RCC_SetSMPSPrescaler>:
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002c88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002c92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <LL_RCC_SetUSARTClockSource>:
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002cb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb8:	f023 0203 	bic.w	r2, r3, #3
 8002cbc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <LL_RCC_SetLPUARTClockSource>:
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002cdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ce4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ce8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <LL_RCC_SetI2CClockSource>:
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002d08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d0c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	091b      	lsrs	r3, r3, #4
 8002d14:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	401a      	ands	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002d24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <LL_RCC_SetLPTIMClockSource>:
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002d42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d46:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	0c1b      	lsrs	r3, r3, #16
 8002d4e:	041b      	lsls	r3, r3, #16
 8002d50:	43db      	mvns	r3, r3
 8002d52:	401a      	ands	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	041b      	lsls	r3, r3, #16
 8002d58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <LL_RCC_SetSAIClockSource>:
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002d76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d7e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <LL_RCC_SetRNGClockSource>:
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002da2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002daa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002dae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <LL_RCC_SetCLK48ClockSource>:
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002dce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002dda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <LL_RCC_SetUSBClockSource>:
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7ff ffe3 	bl	8002dc6 <LL_RCC_SetCLK48ClockSource>
}
 8002e00:	bf00      	nop
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <LL_RCC_SetADCClockSource>:
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002e10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e18:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002e1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <LL_RCC_SetRTCClockSource>:
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002e3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <LL_RCC_GetRTCClockSource>:
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002e64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <LL_RCC_ForceBackupDomainReset>:
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002e7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002e92:	bf00      	nop
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <LL_RCC_ReleaseBackupDomainReset>:
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ea8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002eac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <LL_RCC_PLLSAI1_Enable>:
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002ec2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ecc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ed0:	6013      	str	r3, [r2, #0]
}
 8002ed2:	bf00      	nop
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <LL_RCC_PLLSAI1_Disable>:
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002ee0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002eea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002eee:	6013      	str	r3, [r2, #0]
}
 8002ef0:	bf00      	nop
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <LL_RCC_PLLSAI1_IsReady>:
{
 8002efa:	b480      	push	{r7}
 8002efc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002efe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f0c:	d101      	bne.n	8002f12 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b088      	sub	sp, #32
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002f26:	2300      	movs	r3, #0
 8002f28:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d034      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f42:	d021      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002f44:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f48:	d81b      	bhi.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f4e:	d01d      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002f50:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f54:	d815      	bhi.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00b      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002f5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f5e:	d110      	bne.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002f60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f6e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002f70:	e00d      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3304      	adds	r3, #4
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 f947 	bl	800320a <RCCEx_PLLSAI1_ConfigNP>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002f80:	e005      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	77fb      	strb	r3, [r7, #31]
        break;
 8002f86:	e002      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002f88:	bf00      	nop
 8002f8a:	e000      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002f8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f8e:	7ffb      	ldrb	r3, [r7, #31]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d105      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff fee8 	bl	8002d6e <LL_RCC_SetSAIClockSource>
 8002f9e:	e001      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa0:	7ffb      	ldrb	r3, [r7, #31]
 8002fa2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d046      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002fb0:	f7ff ff56 	bl	8002e60 <LL_RCC_GetRTCClockSource>
 8002fb4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d03c      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002fc0:	f7fe fc2a 	bl	8001818 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d105      	bne.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff ff30 	bl	8002e34 <LL_RCC_SetRTCClockSource>
 8002fd4:	e02e      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002fd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fde:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002fe0:	f7ff ff4b 	bl	8002e7a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002fe4:	f7ff ff5a 	bl	8002e9c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002ff6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003000:	f7ff fdf0 	bl	8002be4 <LL_RCC_LSE_IsEnabled>
 8003004:	4603      	mov	r3, r0
 8003006:	2b01      	cmp	r3, #1
 8003008:	d114      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800300a:	f7fe f88d 	bl	8001128 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003010:	e00b      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003012:	f7fe f889 	bl	8001128 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003020:	4293      	cmp	r3, r2
 8003022:	d902      	bls.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	77fb      	strb	r3, [r7, #31]
              break;
 8003028:	e004      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800302a:	f7ff fded 	bl	8002c08 <LL_RCC_LSE_IsReady>
 800302e:	4603      	mov	r3, r0
 8003030:	2b01      	cmp	r3, #1
 8003032:	d1ee      	bne.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003034:	7ffb      	ldrb	r3, [r7, #31]
 8003036:	77bb      	strb	r3, [r7, #30]
 8003038:	e001      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800303a:	7ffb      	ldrb	r3, [r7, #31]
 800303c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d004      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff fe2a 	bl	8002ca8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d004      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff fe35 	bl	8002cd4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0310 	and.w	r3, r3, #16
 8003072:	2b00      	cmp	r3, #0
 8003074:	d004      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff fe5d 	bl	8002d3a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0320 	and.w	r3, r3, #32
 8003088:	2b00      	cmp	r3, #0
 800308a:	d004      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff fe52 	bl	8002d3a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0304 	and.w	r3, r3, #4
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d004      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff fe2a 	bl	8002d00 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d004      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff fe1f 	bl	8002d00 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d022      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff fe8d 	bl	8002df2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030e0:	d107      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80030e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030f0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030fa:	d10b      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3304      	adds	r3, #4
 8003100:	4618      	mov	r0, r3
 8003102:	f000 f8dd 	bl	80032c0 <RCCEx_PLLSAI1_ConfigNQ>
 8003106:	4603      	mov	r3, r0
 8003108:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800310a:	7ffb      	ldrb	r3, [r7, #31]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003110:	7ffb      	ldrb	r3, [r7, #31]
 8003112:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800311c:	2b00      	cmp	r3, #0
 800311e:	d02b      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003128:	d008      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800312e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003132:	d003      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003138:	2b00      	cmp	r3, #0
 800313a:	d105      	bne.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff fe2a 	bl	8002d9a <LL_RCC_SetRNGClockSource>
 8003146:	e00a      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800314c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	2000      	movs	r0, #0
 8003154:	f7ff fe21 	bl	8002d9a <LL_RCC_SetRNGClockSource>
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f7ff fe34 	bl	8002dc6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003162:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003166:	d107      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003168:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003172:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003176:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003180:	2b00      	cmp	r3, #0
 8003182:	d022      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fe3d 	bl	8002e08 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003192:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003196:	d107      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003198:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031a6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031b0:	d10b      	bne.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3304      	adds	r3, #4
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 f8dd 	bl	8003376 <RCCEx_PLLSAI1_ConfigNR>
 80031bc:	4603      	mov	r3, r0
 80031be:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80031c0:	7ffb      	ldrb	r3, [r7, #31]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80031c6:	7ffb      	ldrb	r3, [r7, #31]
 80031c8:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d004      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff fd26 	bl	8002c2c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d009      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff fd45 	bl	8002c80 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff fd2c 	bl	8002c58 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003200:	7fbb      	ldrb	r3, [r7, #30]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3720      	adds	r7, #32
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003216:	f7ff fe61 	bl	8002edc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800321a:	f7fd ff85 	bl	8001128 <HAL_GetTick>
 800321e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003220:	e009      	b.n	8003236 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003222:	f7fd ff81 	bl	8001128 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d902      	bls.n	8003236 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	73fb      	strb	r3, [r7, #15]
      break;
 8003234:	e004      	b.n	8003240 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003236:	f7ff fe60 	bl	8002efa <LL_RCC_PLLSAI1_IsReady>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f0      	bne.n	8003222 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003240:	7bfb      	ldrb	r3, [r7, #15]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d137      	bne.n	80032b6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003246:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	021b      	lsls	r3, r3, #8
 8003256:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800325a:	4313      	orrs	r3, r2
 800325c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800325e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003270:	4313      	orrs	r3, r2
 8003272:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003274:	f7ff fe23 	bl	8002ebe <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003278:	f7fd ff56 	bl	8001128 <HAL_GetTick>
 800327c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800327e:	e009      	b.n	8003294 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003280:	f7fd ff52 	bl	8001128 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d902      	bls.n	8003294 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	73fb      	strb	r3, [r7, #15]
        break;
 8003292:	e004      	b.n	800329e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003294:	f7ff fe31 	bl	8002efa <LL_RCC_PLLSAI1_IsReady>
 8003298:	4603      	mov	r3, r0
 800329a:	2b01      	cmp	r3, #1
 800329c:	d1f0      	bne.n	8003280 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800329e:	7bfb      	ldrb	r3, [r7, #15]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d108      	bne.n	80032b6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80032a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032a8:	691a      	ldr	r2, [r3, #16]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032b2:	4313      	orrs	r3, r2
 80032b4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80032cc:	f7ff fe06 	bl	8002edc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80032d0:	f7fd ff2a 	bl	8001128 <HAL_GetTick>
 80032d4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80032d6:	e009      	b.n	80032ec <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032d8:	f7fd ff26 	bl	8001128 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d902      	bls.n	80032ec <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	73fb      	strb	r3, [r7, #15]
      break;
 80032ea:	e004      	b.n	80032f6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80032ec:	f7ff fe05 	bl	8002efa <LL_RCC_PLLSAI1_IsReady>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f0      	bne.n	80032d8 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d137      	bne.n	800336c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80032fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	021b      	lsls	r3, r3, #8
 800330c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003310:	4313      	orrs	r3, r2
 8003312:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003314:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003326:	4313      	orrs	r3, r2
 8003328:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800332a:	f7ff fdc8 	bl	8002ebe <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800332e:	f7fd fefb 	bl	8001128 <HAL_GetTick>
 8003332:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003334:	e009      	b.n	800334a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003336:	f7fd fef7 	bl	8001128 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d902      	bls.n	800334a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	73fb      	strb	r3, [r7, #15]
        break;
 8003348:	e004      	b.n	8003354 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800334a:	f7ff fdd6 	bl	8002efa <LL_RCC_PLLSAI1_IsReady>
 800334e:	4603      	mov	r3, r0
 8003350:	2b01      	cmp	r3, #1
 8003352:	d1f0      	bne.n	8003336 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003354:	7bfb      	ldrb	r3, [r7, #15]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d108      	bne.n	800336c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800335a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003368:	4313      	orrs	r3, r2
 800336a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800336c:	7bfb      	ldrb	r3, [r7, #15]
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003382:	f7ff fdab 	bl	8002edc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003386:	f7fd fecf 	bl	8001128 <HAL_GetTick>
 800338a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800338c:	e009      	b.n	80033a2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800338e:	f7fd fecb 	bl	8001128 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d902      	bls.n	80033a2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	73fb      	strb	r3, [r7, #15]
      break;
 80033a0:	e004      	b.n	80033ac <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80033a2:	f7ff fdaa 	bl	8002efa <LL_RCC_PLLSAI1_IsReady>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1f0      	bne.n	800338e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d137      	bne.n	8003422 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80033b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	021b      	lsls	r3, r3, #8
 80033c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033c6:	4313      	orrs	r3, r2
 80033c8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80033ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033dc:	4313      	orrs	r3, r2
 80033de:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80033e0:	f7ff fd6d 	bl	8002ebe <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033e4:	f7fd fea0 	bl	8001128 <HAL_GetTick>
 80033e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033ea:	e009      	b.n	8003400 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033ec:	f7fd fe9c 	bl	8001128 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d902      	bls.n	8003400 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	73fb      	strb	r3, [r7, #15]
        break;
 80033fe:	e004      	b.n	800340a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003400:	f7ff fd7b 	bl	8002efa <LL_RCC_PLLSAI1_IsReady>
 8003404:	4603      	mov	r3, r0
 8003406:	2b01      	cmp	r3, #1
 8003408:	d1f0      	bne.n	80033ec <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800340a:	7bfb      	ldrb	r3, [r7, #15]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d108      	bne.n	8003422 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003414:	691a      	ldr	r2, [r3, #16]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800341e:	4313      	orrs	r3, r2
 8003420:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003422:	7bfb      	ldrb	r3, [r7, #15]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e049      	b.n	80034d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d106      	bne.n	8003458 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f841 	bl	80034da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3304      	adds	r3, #4
 8003468:	4619      	mov	r1, r3
 800346a:	4610      	mov	r0, r2
 800346c:	f000 f9be 	bl	80037ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
	...

080034f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b01      	cmp	r3, #1
 8003502:	d001      	beq.n	8003508 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e036      	b.n	8003576 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2202      	movs	r2, #2
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68da      	ldr	r2, [r3, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 0201 	orr.w	r2, r2, #1
 800351e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a17      	ldr	r2, [pc, #92]	@ (8003584 <HAL_TIM_Base_Start_IT+0x94>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d004      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x44>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003532:	d115      	bne.n	8003560 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	4b13      	ldr	r3, [pc, #76]	@ (8003588 <HAL_TIM_Base_Start_IT+0x98>)
 800353c:	4013      	ands	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2b06      	cmp	r3, #6
 8003544:	d015      	beq.n	8003572 <HAL_TIM_Base_Start_IT+0x82>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800354c:	d011      	beq.n	8003572 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f042 0201 	orr.w	r2, r2, #1
 800355c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800355e:	e008      	b.n	8003572 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	e000      	b.n	8003574 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003572:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40012c00 	.word	0x40012c00
 8003588:	00010007 	.word	0x00010007

0800358c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d020      	beq.n	80035f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d01b      	beq.n	80035f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f06f 0202 	mvn.w	r2, #2
 80035c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f8e9 	bl	80037ae <HAL_TIM_IC_CaptureCallback>
 80035dc:	e005      	b.n	80035ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f8db 	bl	800379a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f8ec 	bl	80037c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	f003 0304 	and.w	r3, r3, #4
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d020      	beq.n	800363c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	d01b      	beq.n	800363c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f06f 0204 	mvn.w	r2, #4
 800360c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2202      	movs	r2, #2
 8003612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f8c3 	bl	80037ae <HAL_TIM_IC_CaptureCallback>
 8003628:	e005      	b.n	8003636 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f8b5 	bl	800379a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f8c6 	bl	80037c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b00      	cmp	r3, #0
 8003644:	d020      	beq.n	8003688 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b00      	cmp	r3, #0
 800364e:	d01b      	beq.n	8003688 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f06f 0208 	mvn.w	r2, #8
 8003658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2204      	movs	r2, #4
 800365e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f89d 	bl	80037ae <HAL_TIM_IC_CaptureCallback>
 8003674:	e005      	b.n	8003682 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f88f 	bl	800379a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f8a0 	bl	80037c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	f003 0310 	and.w	r3, r3, #16
 800368e:	2b00      	cmp	r3, #0
 8003690:	d020      	beq.n	80036d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f003 0310 	and.w	r3, r3, #16
 8003698:	2b00      	cmp	r3, #0
 800369a:	d01b      	beq.n	80036d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f06f 0210 	mvn.w	r2, #16
 80036a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2208      	movs	r2, #8
 80036aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f877 	bl	80037ae <HAL_TIM_IC_CaptureCallback>
 80036c0:	e005      	b.n	80036ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f869 	bl	800379a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f87a 	bl	80037c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00c      	beq.n	80036f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d007      	beq.n	80036f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f06f 0201 	mvn.w	r2, #1
 80036f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7fd f9f4 	bl	8000ae0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d104      	bne.n	800370c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00c      	beq.n	8003726 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003712:	2b00      	cmp	r3, #0
 8003714:	d007      	beq.n	8003726 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800371e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f8d7 	bl	80038d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00c      	beq.n	800374a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003736:	2b00      	cmp	r3, #0
 8003738:	d007      	beq.n	800374a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f8cf 	bl	80038e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00c      	beq.n	800376e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800375a:	2b00      	cmp	r3, #0
 800375c:	d007      	beq.n	800376e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f834 	bl	80037d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00c      	beq.n	8003792 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f003 0320 	and.w	r3, r3, #32
 800377e:	2b00      	cmp	r3, #0
 8003780:	d007      	beq.n	8003792 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f06f 0220 	mvn.w	r2, #32
 800378a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f897 	bl	80038c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003792:	bf00      	nop
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
	...

080037ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a2d      	ldr	r2, [pc, #180]	@ (80038b4 <TIM_Base_SetConfig+0xc8>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d003      	beq.n	800380c <TIM_Base_SetConfig+0x20>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800380a:	d108      	bne.n	800381e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	4313      	orrs	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a24      	ldr	r2, [pc, #144]	@ (80038b4 <TIM_Base_SetConfig+0xc8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d00b      	beq.n	800383e <TIM_Base_SetConfig+0x52>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800382c:	d007      	beq.n	800383e <TIM_Base_SetConfig+0x52>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a21      	ldr	r2, [pc, #132]	@ (80038b8 <TIM_Base_SetConfig+0xcc>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d003      	beq.n	800383e <TIM_Base_SetConfig+0x52>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a20      	ldr	r2, [pc, #128]	@ (80038bc <TIM_Base_SetConfig+0xd0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d108      	bne.n	8003850 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	4313      	orrs	r3, r2
 800384e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	4313      	orrs	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a10      	ldr	r2, [pc, #64]	@ (80038b4 <TIM_Base_SetConfig+0xc8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d007      	beq.n	8003886 <TIM_Base_SetConfig+0x9a>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a0f      	ldr	r2, [pc, #60]	@ (80038b8 <TIM_Base_SetConfig+0xcc>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d003      	beq.n	8003886 <TIM_Base_SetConfig+0x9a>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a0e      	ldr	r2, [pc, #56]	@ (80038bc <TIM_Base_SetConfig+0xd0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d103      	bne.n	800388e <TIM_Base_SetConfig+0xa2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	691a      	ldr	r2, [r3, #16]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f043 0204 	orr.w	r2, r3, #4
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	601a      	str	r2, [r3, #0]
}
 80038a6:	bf00      	nop
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	40012c00 	.word	0x40012c00
 80038b8:	40014400 	.word	0x40014400
 80038bc:	40014800 	.word	0x40014800

080038c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <LL_RCC_GetUSARTClockSource>:
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003908:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4013      	ands	r3, r2
}
 8003910:	4618      	mov	r0, r3
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <LL_RCC_GetLPUARTClockSource>:
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003924:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003928:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4013      	ands	r3, r2
}
 8003930:	4618      	mov	r0, r3
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e042      	b.n	80039d4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003954:	2b00      	cmp	r3, #0
 8003956:	d106      	bne.n	8003966 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7fd f921 	bl	8000ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2224      	movs	r2, #36	@ 0x24
 800396a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0201 	bic.w	r2, r2, #1
 800397c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 fbe6 	bl	8004158 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f9bb 	bl	8003d08 <UART_SetConfig>
 8003992:	4603      	mov	r3, r0
 8003994:	2b01      	cmp	r3, #1
 8003996:	d101      	bne.n	800399c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e01b      	b.n	80039d4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689a      	ldr	r2, [r3, #8]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0201 	orr.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 fc65 	bl	800429c <UART_CheckIdleState>
 80039d2:	4603      	mov	r3, r0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e031      	b.n	8003a52 <HAL_UART_DeInit+0x76>
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
#else
  assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */

  huart->gState = HAL_UART_STATE_BUSY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2224      	movs	r2, #36	@ 0x24
 80039f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0201 	bic.w	r2, r2, #1
 8003a04:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2200      	movs	r2, #0
 8003a14:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7fd f908 	bl	8000c34 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b08a      	sub	sp, #40	@ 0x28
 8003a5e:	af02      	add	r7, sp, #8
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	603b      	str	r3, [r7, #0]
 8003a66:	4613      	mov	r3, r2
 8003a68:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a70:	2b20      	cmp	r3, #32
 8003a72:	d17b      	bne.n	8003b6c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d002      	beq.n	8003a80 <HAL_UART_Transmit+0x26>
 8003a7a:	88fb      	ldrh	r3, [r7, #6]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e074      	b.n	8003b6e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2221      	movs	r2, #33	@ 0x21
 8003a90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a94:	f7fd fb48 	bl	8001128 <HAL_GetTick>
 8003a98:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	88fa      	ldrh	r2, [r7, #6]
 8003a9e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	88fa      	ldrh	r2, [r7, #6]
 8003aa6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ab2:	d108      	bne.n	8003ac6 <HAL_UART_Transmit+0x6c>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d104      	bne.n	8003ac6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003abc:	2300      	movs	r3, #0
 8003abe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	61bb      	str	r3, [r7, #24]
 8003ac4:	e003      	b.n	8003ace <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aca:	2300      	movs	r3, #0
 8003acc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ace:	e030      	b.n	8003b32 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	2180      	movs	r1, #128	@ 0x80
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 fc88 	bl	80043f0 <UART_WaitOnFlagUntilTimeout>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d005      	beq.n	8003af2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e03d      	b.n	8003b6e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10b      	bne.n	8003b10 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	461a      	mov	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b06:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	3302      	adds	r3, #2
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	e007      	b.n	8003b20 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	781a      	ldrb	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1c8      	bne.n	8003ad0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2200      	movs	r2, #0
 8003b46:	2140      	movs	r1, #64	@ 0x40
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 fc51 	bl	80043f0 <UART_WaitOnFlagUntilTimeout>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d005      	beq.n	8003b60 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e006      	b.n	8003b6e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	e000      	b.n	8003b6e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003b6c:	2302      	movs	r3, #2
  }
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3720      	adds	r7, #32
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b08a      	sub	sp, #40	@ 0x28
 8003b7a:	af02      	add	r7, sp, #8
 8003b7c:	60f8      	str	r0, [r7, #12]
 8003b7e:	60b9      	str	r1, [r7, #8]
 8003b80:	603b      	str	r3, [r7, #0]
 8003b82:	4613      	mov	r3, r2
 8003b84:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b8c:	2b20      	cmp	r3, #32
 8003b8e:	f040 80b5 	bne.w	8003cfc <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <HAL_UART_Receive+0x28>
 8003b98:	88fb      	ldrh	r3, [r7, #6]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e0ad      	b.n	8003cfe <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2222      	movs	r2, #34	@ 0x22
 8003bae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bb8:	f7fd fab6 	bl	8001128 <HAL_GetTick>
 8003bbc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	88fa      	ldrh	r2, [r7, #6]
 8003bc2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	88fa      	ldrh	r2, [r7, #6]
 8003bca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bd6:	d10e      	bne.n	8003bf6 <HAL_UART_Receive+0x80>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d105      	bne.n	8003bec <HAL_UART_Receive+0x76>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003be6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003bea:	e02d      	b.n	8003c48 <HAL_UART_Receive+0xd2>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	22ff      	movs	r2, #255	@ 0xff
 8003bf0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003bf4:	e028      	b.n	8003c48 <HAL_UART_Receive+0xd2>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10d      	bne.n	8003c1a <HAL_UART_Receive+0xa4>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d104      	bne.n	8003c10 <HAL_UART_Receive+0x9a>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	22ff      	movs	r2, #255	@ 0xff
 8003c0a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003c0e:	e01b      	b.n	8003c48 <HAL_UART_Receive+0xd2>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	227f      	movs	r2, #127	@ 0x7f
 8003c14:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003c18:	e016      	b.n	8003c48 <HAL_UART_Receive+0xd2>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c22:	d10d      	bne.n	8003c40 <HAL_UART_Receive+0xca>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d104      	bne.n	8003c36 <HAL_UART_Receive+0xc0>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	227f      	movs	r2, #127	@ 0x7f
 8003c30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003c34:	e008      	b.n	8003c48 <HAL_UART_Receive+0xd2>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	223f      	movs	r2, #63	@ 0x3f
 8003c3a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003c3e:	e003      	b.n	8003c48 <HAL_UART_Receive+0xd2>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003c4e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c58:	d108      	bne.n	8003c6c <HAL_UART_Receive+0xf6>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d104      	bne.n	8003c6c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	61bb      	str	r3, [r7, #24]
 8003c6a:	e003      	b.n	8003c74 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c70:	2300      	movs	r3, #0
 8003c72:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003c74:	e036      	b.n	8003ce4 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	2120      	movs	r1, #32
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 fbb5 	bl	80043f0 <UART_WaitOnFlagUntilTimeout>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d005      	beq.n	8003c98 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e032      	b.n	8003cfe <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10c      	bne.n	8003cb8 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	8a7b      	ldrh	r3, [r7, #18]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	3302      	adds	r3, #2
 8003cb4:	61bb      	str	r3, [r7, #24]
 8003cb6:	e00c      	b.n	8003cd2 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	8a7b      	ldrh	r3, [r7, #18]
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1c2      	bne.n	8003c76 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	e000      	b.n	8003cfe <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8003cfc:	2302      	movs	r3, #2
  }
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3720      	adds	r7, #32
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
	...

08003d08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d0c:	b08c      	sub	sp, #48	@ 0x30
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	431a      	orrs	r2, r3
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	69db      	ldr	r3, [r3, #28]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	4baf      	ldr	r3, [pc, #700]	@ (8003ff4 <UART_SetConfig+0x2ec>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	6812      	ldr	r2, [r2, #0]
 8003d3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d40:	430b      	orrs	r3, r1
 8003d42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4aa4      	ldr	r2, [pc, #656]	@ (8003ff8 <UART_SetConfig+0x2f0>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d004      	beq.n	8003d74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d70:	4313      	orrs	r3, r2
 8003d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003d7e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	6812      	ldr	r2, [r2, #0]
 8003d86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d88:	430b      	orrs	r3, r1
 8003d8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d92:	f023 010f 	bic.w	r1, r3, #15
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a95      	ldr	r2, [pc, #596]	@ (8003ffc <UART_SetConfig+0x2f4>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d125      	bne.n	8003df8 <UART_SetConfig+0xf0>
 8003dac:	2003      	movs	r0, #3
 8003dae:	f7ff fda5 	bl	80038fc <LL_RCC_GetUSARTClockSource>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d81b      	bhi.n	8003df0 <UART_SetConfig+0xe8>
 8003db8:	a201      	add	r2, pc, #4	@ (adr r2, 8003dc0 <UART_SetConfig+0xb8>)
 8003dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbe:	bf00      	nop
 8003dc0:	08003dd1 	.word	0x08003dd1
 8003dc4:	08003de1 	.word	0x08003de1
 8003dc8:	08003dd9 	.word	0x08003dd9
 8003dcc:	08003de9 	.word	0x08003de9
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dd6:	e042      	b.n	8003e5e <UART_SetConfig+0x156>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dde:	e03e      	b.n	8003e5e <UART_SetConfig+0x156>
 8003de0:	2304      	movs	r3, #4
 8003de2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003de6:	e03a      	b.n	8003e5e <UART_SetConfig+0x156>
 8003de8:	2308      	movs	r3, #8
 8003dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dee:	e036      	b.n	8003e5e <UART_SetConfig+0x156>
 8003df0:	2310      	movs	r3, #16
 8003df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003df6:	e032      	b.n	8003e5e <UART_SetConfig+0x156>
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a7e      	ldr	r2, [pc, #504]	@ (8003ff8 <UART_SetConfig+0x2f0>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d12a      	bne.n	8003e58 <UART_SetConfig+0x150>
 8003e02:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8003e06:	f7ff fd89 	bl	800391c <LL_RCC_GetLPUARTClockSource>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e10:	d01a      	beq.n	8003e48 <UART_SetConfig+0x140>
 8003e12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e16:	d81b      	bhi.n	8003e50 <UART_SetConfig+0x148>
 8003e18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e1c:	d00c      	beq.n	8003e38 <UART_SetConfig+0x130>
 8003e1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e22:	d815      	bhi.n	8003e50 <UART_SetConfig+0x148>
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <UART_SetConfig+0x128>
 8003e28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e2c:	d008      	beq.n	8003e40 <UART_SetConfig+0x138>
 8003e2e:	e00f      	b.n	8003e50 <UART_SetConfig+0x148>
 8003e30:	2300      	movs	r3, #0
 8003e32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e36:	e012      	b.n	8003e5e <UART_SetConfig+0x156>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e3e:	e00e      	b.n	8003e5e <UART_SetConfig+0x156>
 8003e40:	2304      	movs	r3, #4
 8003e42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e46:	e00a      	b.n	8003e5e <UART_SetConfig+0x156>
 8003e48:	2308      	movs	r3, #8
 8003e4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e4e:	e006      	b.n	8003e5e <UART_SetConfig+0x156>
 8003e50:	2310      	movs	r3, #16
 8003e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e56:	e002      	b.n	8003e5e <UART_SetConfig+0x156>
 8003e58:	2310      	movs	r3, #16
 8003e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a65      	ldr	r2, [pc, #404]	@ (8003ff8 <UART_SetConfig+0x2f0>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	f040 8097 	bne.w	8003f98 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e6a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d823      	bhi.n	8003eba <UART_SetConfig+0x1b2>
 8003e72:	a201      	add	r2, pc, #4	@ (adr r2, 8003e78 <UART_SetConfig+0x170>)
 8003e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e78:	08003e9d 	.word	0x08003e9d
 8003e7c:	08003ebb 	.word	0x08003ebb
 8003e80:	08003ea5 	.word	0x08003ea5
 8003e84:	08003ebb 	.word	0x08003ebb
 8003e88:	08003eab 	.word	0x08003eab
 8003e8c:	08003ebb 	.word	0x08003ebb
 8003e90:	08003ebb 	.word	0x08003ebb
 8003e94:	08003ebb 	.word	0x08003ebb
 8003e98:	08003eb3 	.word	0x08003eb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e9c:	f7fe fd90 	bl	80029c0 <HAL_RCC_GetPCLK1Freq>
 8003ea0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ea2:	e010      	b.n	8003ec6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ea4:	4b56      	ldr	r3, [pc, #344]	@ (8004000 <UART_SetConfig+0x2f8>)
 8003ea6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ea8:	e00d      	b.n	8003ec6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eaa:	f7fe fd09 	bl	80028c0 <HAL_RCC_GetSysClockFreq>
 8003eae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003eb0:	e009      	b.n	8003ec6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003eb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003eb8:	e005      	b.n	8003ec6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003ec4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 812b 	beq.w	8004124 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed2:	4a4c      	ldr	r2, [pc, #304]	@ (8004004 <UART_SetConfig+0x2fc>)
 8003ed4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003edc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	4413      	add	r3, r2
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d305      	bcc.n	8003efe <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d903      	bls.n	8003f06 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003f04:	e10e      	b.n	8004124 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f08:	2200      	movs	r2, #0
 8003f0a:	60bb      	str	r3, [r7, #8]
 8003f0c:	60fa      	str	r2, [r7, #12]
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f12:	4a3c      	ldr	r2, [pc, #240]	@ (8004004 <UART_SetConfig+0x2fc>)
 8003f14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	603b      	str	r3, [r7, #0]
 8003f1e:	607a      	str	r2, [r7, #4]
 8003f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f28:	f7fc f97a 	bl	8000220 <__aeabi_uldivmod>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4610      	mov	r0, r2
 8003f32:	4619      	mov	r1, r3
 8003f34:	f04f 0200 	mov.w	r2, #0
 8003f38:	f04f 0300 	mov.w	r3, #0
 8003f3c:	020b      	lsls	r3, r1, #8
 8003f3e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003f42:	0202      	lsls	r2, r0, #8
 8003f44:	6979      	ldr	r1, [r7, #20]
 8003f46:	6849      	ldr	r1, [r1, #4]
 8003f48:	0849      	lsrs	r1, r1, #1
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	460c      	mov	r4, r1
 8003f4e:	4605      	mov	r5, r0
 8003f50:	eb12 0804 	adds.w	r8, r2, r4
 8003f54:	eb43 0905 	adc.w	r9, r3, r5
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	469a      	mov	sl, r3
 8003f60:	4693      	mov	fp, r2
 8003f62:	4652      	mov	r2, sl
 8003f64:	465b      	mov	r3, fp
 8003f66:	4640      	mov	r0, r8
 8003f68:	4649      	mov	r1, r9
 8003f6a:	f7fc f959 	bl	8000220 <__aeabi_uldivmod>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	4613      	mov	r3, r2
 8003f74:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f7c:	d308      	bcc.n	8003f90 <UART_SetConfig+0x288>
 8003f7e:	6a3b      	ldr	r3, [r7, #32]
 8003f80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f84:	d204      	bcs.n	8003f90 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6a3a      	ldr	r2, [r7, #32]
 8003f8c:	60da      	str	r2, [r3, #12]
 8003f8e:	e0c9      	b.n	8004124 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003f96:	e0c5      	b.n	8004124 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fa0:	d16d      	bne.n	800407e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003fa2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	2b07      	cmp	r3, #7
 8003faa:	d82d      	bhi.n	8004008 <UART_SetConfig+0x300>
 8003fac:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb4 <UART_SetConfig+0x2ac>)
 8003fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb2:	bf00      	nop
 8003fb4:	08003fd5 	.word	0x08003fd5
 8003fb8:	08003fdd 	.word	0x08003fdd
 8003fbc:	08004009 	.word	0x08004009
 8003fc0:	08003fe3 	.word	0x08003fe3
 8003fc4:	08004009 	.word	0x08004009
 8003fc8:	08004009 	.word	0x08004009
 8003fcc:	08004009 	.word	0x08004009
 8003fd0:	08003feb 	.word	0x08003feb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fd4:	f7fe fd0a 	bl	80029ec <HAL_RCC_GetPCLK2Freq>
 8003fd8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003fda:	e01b      	b.n	8004014 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fdc:	4b08      	ldr	r3, [pc, #32]	@ (8004000 <UART_SetConfig+0x2f8>)
 8003fde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003fe0:	e018      	b.n	8004014 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fe2:	f7fe fc6d 	bl	80028c0 <HAL_RCC_GetSysClockFreq>
 8003fe6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003fe8:	e014      	b.n	8004014 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ff0:	e010      	b.n	8004014 <UART_SetConfig+0x30c>
 8003ff2:	bf00      	nop
 8003ff4:	cfff69f3 	.word	0xcfff69f3
 8003ff8:	40008000 	.word	0x40008000
 8003ffc:	40013800 	.word	0x40013800
 8004000:	00f42400 	.word	0x00f42400
 8004004:	080086c8 	.word	0x080086c8
      default:
        pclk = 0U;
 8004008:	2300      	movs	r3, #0
 800400a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004012:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 8084 	beq.w	8004124 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004020:	4a4b      	ldr	r2, [pc, #300]	@ (8004150 <UART_SetConfig+0x448>)
 8004022:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004026:	461a      	mov	r2, r3
 8004028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402a:	fbb3 f3f2 	udiv	r3, r3, r2
 800402e:	005a      	lsls	r2, r3, #1
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	085b      	lsrs	r3, r3, #1
 8004036:	441a      	add	r2, r3
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004040:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	2b0f      	cmp	r3, #15
 8004046:	d916      	bls.n	8004076 <UART_SetConfig+0x36e>
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800404e:	d212      	bcs.n	8004076 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	b29b      	uxth	r3, r3
 8004054:	f023 030f 	bic.w	r3, r3, #15
 8004058:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	085b      	lsrs	r3, r3, #1
 800405e:	b29b      	uxth	r3, r3
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	b29a      	uxth	r2, r3
 8004066:	8bfb      	ldrh	r3, [r7, #30]
 8004068:	4313      	orrs	r3, r2
 800406a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	8bfa      	ldrh	r2, [r7, #30]
 8004072:	60da      	str	r2, [r3, #12]
 8004074:	e056      	b.n	8004124 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800407c:	e052      	b.n	8004124 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800407e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004082:	3b01      	subs	r3, #1
 8004084:	2b07      	cmp	r3, #7
 8004086:	d822      	bhi.n	80040ce <UART_SetConfig+0x3c6>
 8004088:	a201      	add	r2, pc, #4	@ (adr r2, 8004090 <UART_SetConfig+0x388>)
 800408a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408e:	bf00      	nop
 8004090:	080040b1 	.word	0x080040b1
 8004094:	080040b9 	.word	0x080040b9
 8004098:	080040cf 	.word	0x080040cf
 800409c:	080040bf 	.word	0x080040bf
 80040a0:	080040cf 	.word	0x080040cf
 80040a4:	080040cf 	.word	0x080040cf
 80040a8:	080040cf 	.word	0x080040cf
 80040ac:	080040c7 	.word	0x080040c7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040b0:	f7fe fc9c 	bl	80029ec <HAL_RCC_GetPCLK2Freq>
 80040b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80040b6:	e010      	b.n	80040da <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040b8:	4b26      	ldr	r3, [pc, #152]	@ (8004154 <UART_SetConfig+0x44c>)
 80040ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80040bc:	e00d      	b.n	80040da <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040be:	f7fe fbff 	bl	80028c0 <HAL_RCC_GetSysClockFreq>
 80040c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80040c4:	e009      	b.n	80040da <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80040cc:	e005      	b.n	80040da <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80040ce:	2300      	movs	r3, #0
 80040d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80040d8:	bf00      	nop
    }

    if (pclk != 0U)
 80040da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d021      	beq.n	8004124 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e4:	4a1a      	ldr	r2, [pc, #104]	@ (8004150 <UART_SetConfig+0x448>)
 80040e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040ea:	461a      	mov	r2, r3
 80040ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	085b      	lsrs	r3, r3, #1
 80040f8:	441a      	add	r2, r3
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004102:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	2b0f      	cmp	r3, #15
 8004108:	d909      	bls.n	800411e <UART_SetConfig+0x416>
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004110:	d205      	bcs.n	800411e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	b29a      	uxth	r2, r3
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	60da      	str	r2, [r3, #12]
 800411c:	e002      	b.n	8004124 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	2201      	movs	r2, #1
 8004128:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	2201      	movs	r2, #1
 8004130:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	2200      	movs	r2, #0
 8004138:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2200      	movs	r2, #0
 800413e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004140:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004144:	4618      	mov	r0, r3
 8004146:	3730      	adds	r7, #48	@ 0x30
 8004148:	46bd      	mov	sp, r7
 800414a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800414e:	bf00      	nop
 8004150:	080086c8 	.word	0x080086c8
 8004154:	00f42400 	.word	0x00f42400

08004158 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ca:	f003 0304 	and.w	r3, r3, #4
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ec:	f003 0310 	and.w	r3, r3, #16
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420e:	f003 0320 	and.w	r3, r3, #32
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004234:	2b00      	cmp	r3, #0
 8004236:	d01a      	beq.n	800426e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004252:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004256:	d10a      	bne.n	800426e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	605a      	str	r2, [r3, #4]
  }
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b098      	sub	sp, #96	@ 0x60
 80042a0:	af02      	add	r7, sp, #8
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042ac:	f7fc ff3c 	bl	8001128 <HAL_GetTick>
 80042b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0308 	and.w	r3, r3, #8
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d12f      	bne.n	8004320 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042c8:	2200      	movs	r2, #0
 80042ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f88e 	bl	80043f0 <UART_WaitOnFlagUntilTimeout>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d022      	beq.n	8004320 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e2:	e853 3f00 	ldrex	r3, [r3]
 80042e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	461a      	mov	r2, r3
 80042f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80042fa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004300:	e841 2300 	strex	r3, r2, [r1]
 8004304:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1e6      	bne.n	80042da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2220      	movs	r2, #32
 8004310:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e063      	b.n	80043e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0304 	and.w	r3, r3, #4
 800432a:	2b04      	cmp	r3, #4
 800432c:	d149      	bne.n	80043c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800432e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004336:	2200      	movs	r2, #0
 8004338:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 f857 	bl	80043f0 <UART_WaitOnFlagUntilTimeout>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d03c      	beq.n	80043c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004350:	e853 3f00 	ldrex	r3, [r3]
 8004354:	623b      	str	r3, [r7, #32]
   return(result);
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800435c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	461a      	mov	r2, r3
 8004364:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004366:	633b      	str	r3, [r7, #48]	@ 0x30
 8004368:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800436c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800436e:	e841 2300 	strex	r3, r2, [r1]
 8004372:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1e6      	bne.n	8004348 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	3308      	adds	r3, #8
 8004380:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	e853 3f00 	ldrex	r3, [r3]
 8004388:	60fb      	str	r3, [r7, #12]
   return(result);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f023 0301 	bic.w	r3, r3, #1
 8004390:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3308      	adds	r3, #8
 8004398:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800439a:	61fa      	str	r2, [r7, #28]
 800439c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439e:	69b9      	ldr	r1, [r7, #24]
 80043a0:	69fa      	ldr	r2, [r7, #28]
 80043a2:	e841 2300 	strex	r3, r2, [r1]
 80043a6:	617b      	str	r3, [r7, #20]
   return(result);
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1e5      	bne.n	800437a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2220      	movs	r2, #32
 80043b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e012      	b.n	80043e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3758      	adds	r7, #88	@ 0x58
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	603b      	str	r3, [r7, #0]
 80043fc:	4613      	mov	r3, r2
 80043fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004400:	e04f      	b.n	80044a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004408:	d04b      	beq.n	80044a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800440a:	f7fc fe8d 	bl	8001128 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	429a      	cmp	r2, r3
 8004418:	d302      	bcc.n	8004420 <UART_WaitOnFlagUntilTimeout+0x30>
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e04e      	b.n	80044c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0304 	and.w	r3, r3, #4
 800442e:	2b00      	cmp	r3, #0
 8004430:	d037      	beq.n	80044a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2b80      	cmp	r3, #128	@ 0x80
 8004436:	d034      	beq.n	80044a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2b40      	cmp	r3, #64	@ 0x40
 800443c:	d031      	beq.n	80044a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	f003 0308 	and.w	r3, r3, #8
 8004448:	2b08      	cmp	r3, #8
 800444a:	d110      	bne.n	800446e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2208      	movs	r2, #8
 8004452:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 f838 	bl	80044ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2208      	movs	r2, #8
 800445e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e029      	b.n	80044c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004478:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800447c:	d111      	bne.n	80044a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004486:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 f81e 	bl	80044ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2220      	movs	r2, #32
 8004492:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e00f      	b.n	80044c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	69da      	ldr	r2, [r3, #28]
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4013      	ands	r3, r2
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	bf0c      	ite	eq
 80044b2:	2301      	moveq	r3, #1
 80044b4:	2300      	movne	r3, #0
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	461a      	mov	r2, r3
 80044ba:	79fb      	ldrb	r3, [r7, #7]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d0a0      	beq.n	8004402 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b095      	sub	sp, #84	@ 0x54
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044da:	e853 3f00 	ldrex	r3, [r3]
 80044de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	461a      	mov	r2, r3
 80044ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80044f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044f8:	e841 2300 	strex	r3, r2, [r1]
 80044fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1e6      	bne.n	80044d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3308      	adds	r3, #8
 800450a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450c:	6a3b      	ldr	r3, [r7, #32]
 800450e:	e853 3f00 	ldrex	r3, [r3]
 8004512:	61fb      	str	r3, [r7, #28]
   return(result);
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800451a:	f023 0301 	bic.w	r3, r3, #1
 800451e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3308      	adds	r3, #8
 8004526:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004528:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800452a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800452e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004530:	e841 2300 	strex	r3, r2, [r1]
 8004534:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1e3      	bne.n	8004504 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004540:	2b01      	cmp	r3, #1
 8004542:	d118      	bne.n	8004576 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	e853 3f00 	ldrex	r3, [r3]
 8004550:	60bb      	str	r3, [r7, #8]
   return(result);
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	f023 0310 	bic.w	r3, r3, #16
 8004558:	647b      	str	r3, [r7, #68]	@ 0x44
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	461a      	mov	r2, r3
 8004560:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004562:	61bb      	str	r3, [r7, #24]
 8004564:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004566:	6979      	ldr	r1, [r7, #20]
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	e841 2300 	strex	r3, r2, [r1]
 800456e:	613b      	str	r3, [r7, #16]
   return(result);
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1e6      	bne.n	8004544 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2220      	movs	r2, #32
 800457a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800458a:	bf00      	nop
 800458c:	3754      	adds	r7, #84	@ 0x54
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004596:	b480      	push	{r7}
 8004598:	b085      	sub	sp, #20
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d101      	bne.n	80045ac <HAL_UARTEx_DisableFifoMode+0x16>
 80045a8:	2302      	movs	r3, #2
 80045aa:	e027      	b.n	80045fc <HAL_UARTEx_DisableFifoMode+0x66>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2224      	movs	r2, #36	@ 0x24
 80045b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0201 	bic.w	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80045da:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004618:	2b01      	cmp	r3, #1
 800461a:	d101      	bne.n	8004620 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800461c:	2302      	movs	r3, #2
 800461e:	e02d      	b.n	800467c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2224      	movs	r2, #36	@ 0x24
 800462c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0201 	bic.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f84f 	bl	8004700 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2220      	movs	r2, #32
 800466e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004694:	2b01      	cmp	r3, #1
 8004696:	d101      	bne.n	800469c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004698:	2302      	movs	r3, #2
 800469a:	e02d      	b.n	80046f8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2224      	movs	r2, #36	@ 0x24
 80046a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0201 	bic.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f811 	bl	8004700 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800470c:	2b00      	cmp	r3, #0
 800470e:	d108      	bne.n	8004722 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004720:	e031      	b.n	8004786 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004722:	2308      	movs	r3, #8
 8004724:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004726:	2308      	movs	r3, #8
 8004728:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	0e5b      	lsrs	r3, r3, #25
 8004732:	b2db      	uxtb	r3, r3
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	0f5b      	lsrs	r3, r3, #29
 8004742:	b2db      	uxtb	r3, r3
 8004744:	f003 0307 	and.w	r3, r3, #7
 8004748:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800474a:	7bbb      	ldrb	r3, [r7, #14]
 800474c:	7b3a      	ldrb	r2, [r7, #12]
 800474e:	4911      	ldr	r1, [pc, #68]	@ (8004794 <UARTEx_SetNbDataToProcess+0x94>)
 8004750:	5c8a      	ldrb	r2, [r1, r2]
 8004752:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004756:	7b3a      	ldrb	r2, [r7, #12]
 8004758:	490f      	ldr	r1, [pc, #60]	@ (8004798 <UARTEx_SetNbDataToProcess+0x98>)
 800475a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800475c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004760:	b29a      	uxth	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004768:	7bfb      	ldrb	r3, [r7, #15]
 800476a:	7b7a      	ldrb	r2, [r7, #13]
 800476c:	4909      	ldr	r1, [pc, #36]	@ (8004794 <UARTEx_SetNbDataToProcess+0x94>)
 800476e:	5c8a      	ldrb	r2, [r1, r2]
 8004770:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004774:	7b7a      	ldrb	r2, [r7, #13]
 8004776:	4908      	ldr	r1, [pc, #32]	@ (8004798 <UARTEx_SetNbDataToProcess+0x98>)
 8004778:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800477a:	fb93 f3f2 	sdiv	r3, r3, r2
 800477e:	b29a      	uxth	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004786:	bf00      	nop
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	080086e0 	.word	0x080086e0
 8004798:	080086e8 	.word	0x080086e8

0800479c <__NVIC_SetPriority>:
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	4603      	mov	r3, r0
 80047a4:	6039      	str	r1, [r7, #0]
 80047a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	db0a      	blt.n	80047c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	490c      	ldr	r1, [pc, #48]	@ (80047e8 <__NVIC_SetPriority+0x4c>)
 80047b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ba:	0112      	lsls	r2, r2, #4
 80047bc:	b2d2      	uxtb	r2, r2
 80047be:	440b      	add	r3, r1
 80047c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80047c4:	e00a      	b.n	80047dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	4908      	ldr	r1, [pc, #32]	@ (80047ec <__NVIC_SetPriority+0x50>)
 80047cc:	79fb      	ldrb	r3, [r7, #7]
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	3b04      	subs	r3, #4
 80047d4:	0112      	lsls	r2, r2, #4
 80047d6:	b2d2      	uxtb	r2, r2
 80047d8:	440b      	add	r3, r1
 80047da:	761a      	strb	r2, [r3, #24]
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	e000e100 	.word	0xe000e100
 80047ec:	e000ed00 	.word	0xe000ed00

080047f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80047f4:	4b05      	ldr	r3, [pc, #20]	@ (800480c <SysTick_Handler+0x1c>)
 80047f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80047f8:	f001 fd82 	bl	8006300 <xTaskGetSchedulerState>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d001      	beq.n	8004806 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004802:	f002 fb79 	bl	8006ef8 <xPortSysTickHandler>
  }
}
 8004806:	bf00      	nop
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	e000e010 	.word	0xe000e010

08004810 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004814:	2100      	movs	r1, #0
 8004816:	f06f 0004 	mvn.w	r0, #4
 800481a:	f7ff ffbf 	bl	800479c <__NVIC_SetPriority>
#endif
}
 800481e:	bf00      	nop
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800482a:	f3ef 8305 	mrs	r3, IPSR
 800482e:	603b      	str	r3, [r7, #0]
  return(result);
 8004830:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004836:	f06f 0305 	mvn.w	r3, #5
 800483a:	607b      	str	r3, [r7, #4]
 800483c:	e00c      	b.n	8004858 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800483e:	4b0a      	ldr	r3, [pc, #40]	@ (8004868 <osKernelInitialize+0x44>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d105      	bne.n	8004852 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004846:	4b08      	ldr	r3, [pc, #32]	@ (8004868 <osKernelInitialize+0x44>)
 8004848:	2201      	movs	r2, #1
 800484a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800484c:	2300      	movs	r3, #0
 800484e:	607b      	str	r3, [r7, #4]
 8004850:	e002      	b.n	8004858 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004852:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004856:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004858:	687b      	ldr	r3, [r7, #4]
}
 800485a:	4618      	mov	r0, r3
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	200001a8 	.word	0x200001a8

0800486c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004872:	f3ef 8305 	mrs	r3, IPSR
 8004876:	603b      	str	r3, [r7, #0]
  return(result);
 8004878:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <osKernelStart+0x1a>
    stat = osErrorISR;
 800487e:	f06f 0305 	mvn.w	r3, #5
 8004882:	607b      	str	r3, [r7, #4]
 8004884:	e010      	b.n	80048a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004886:	4b0b      	ldr	r3, [pc, #44]	@ (80048b4 <osKernelStart+0x48>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d109      	bne.n	80048a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800488e:	f7ff ffbf 	bl	8004810 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004892:	4b08      	ldr	r3, [pc, #32]	@ (80048b4 <osKernelStart+0x48>)
 8004894:	2202      	movs	r2, #2
 8004896:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004898:	f001 f8ce 	bl	8005a38 <vTaskStartScheduler>
      stat = osOK;
 800489c:	2300      	movs	r3, #0
 800489e:	607b      	str	r3, [r7, #4]
 80048a0:	e002      	b.n	80048a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80048a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80048a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80048a8:	687b      	ldr	r3, [r7, #4]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	200001a8 	.word	0x200001a8

080048b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b08e      	sub	sp, #56	@ 0x38
 80048bc:	af04      	add	r7, sp, #16
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80048c4:	2300      	movs	r3, #0
 80048c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048c8:	f3ef 8305 	mrs	r3, IPSR
 80048cc:	617b      	str	r3, [r7, #20]
  return(result);
 80048ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d17e      	bne.n	80049d2 <osThreadNew+0x11a>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d07b      	beq.n	80049d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80048da:	2380      	movs	r3, #128	@ 0x80
 80048dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80048de:	2318      	movs	r3, #24
 80048e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80048e2:	2300      	movs	r3, #0
 80048e4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80048e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80048ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d045      	beq.n	800497e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d002      	beq.n	8004900 <osThreadNew+0x48>
        name = attr->name;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d008      	beq.n	8004926 <osThreadNew+0x6e>
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	2b38      	cmp	r3, #56	@ 0x38
 8004918:	d805      	bhi.n	8004926 <osThreadNew+0x6e>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <osThreadNew+0x72>
        return (NULL);
 8004926:	2300      	movs	r3, #0
 8004928:	e054      	b.n	80049d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	089b      	lsrs	r3, r3, #2
 8004938:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00e      	beq.n	8004960 <osThreadNew+0xa8>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	2ba7      	cmp	r3, #167	@ 0xa7
 8004948:	d90a      	bls.n	8004960 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800494e:	2b00      	cmp	r3, #0
 8004950:	d006      	beq.n	8004960 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <osThreadNew+0xa8>
        mem = 1;
 800495a:	2301      	movs	r3, #1
 800495c:	61bb      	str	r3, [r7, #24]
 800495e:	e010      	b.n	8004982 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10c      	bne.n	8004982 <osThreadNew+0xca>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d108      	bne.n	8004982 <osThreadNew+0xca>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d104      	bne.n	8004982 <osThreadNew+0xca>
          mem = 0;
 8004978:	2300      	movs	r3, #0
 800497a:	61bb      	str	r3, [r7, #24]
 800497c:	e001      	b.n	8004982 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800497e:	2300      	movs	r3, #0
 8004980:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d110      	bne.n	80049aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004990:	9202      	str	r2, [sp, #8]
 8004992:	9301      	str	r3, [sp, #4]
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	6a3a      	ldr	r2, [r7, #32]
 800499c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 fe56 	bl	8005650 <xTaskCreateStatic>
 80049a4:	4603      	mov	r3, r0
 80049a6:	613b      	str	r3, [r7, #16]
 80049a8:	e013      	b.n	80049d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d110      	bne.n	80049d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	f107 0310 	add.w	r3, r7, #16
 80049b8:	9301      	str	r3, [sp, #4]
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 fea4 	bl	8005710 <xTaskCreate>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d001      	beq.n	80049d2 <osThreadNew+0x11a>
            hTask = NULL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80049d2:	693b      	ldr	r3, [r7, #16]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3728      	adds	r7, #40	@ 0x28
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049e4:	f3ef 8305 	mrs	r3, IPSR
 80049e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80049ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <osDelay+0x1c>
    stat = osErrorISR;
 80049f0:	f06f 0305 	mvn.w	r3, #5
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	e007      	b.n	8004a08 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80049f8:	2300      	movs	r3, #0
 80049fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 ffe2 	bl	80059cc <vTaskDelay>
    }
  }

  return (stat);
 8004a08:	68fb      	ldr	r3, [r7, #12]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
	...

08004a14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4a07      	ldr	r2, [pc, #28]	@ (8004a40 <vApplicationGetIdleTaskMemory+0x2c>)
 8004a24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	4a06      	ldr	r2, [pc, #24]	@ (8004a44 <vApplicationGetIdleTaskMemory+0x30>)
 8004a2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2280      	movs	r2, #128	@ 0x80
 8004a30:	601a      	str	r2, [r3, #0]
}
 8004a32:	bf00      	nop
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	200001ac 	.word	0x200001ac
 8004a44:	20000254 	.word	0x20000254

08004a48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4a07      	ldr	r2, [pc, #28]	@ (8004a74 <vApplicationGetTimerTaskMemory+0x2c>)
 8004a58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	4a06      	ldr	r2, [pc, #24]	@ (8004a78 <vApplicationGetTimerTaskMemory+0x30>)
 8004a5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a66:	601a      	str	r2, [r3, #0]
}
 8004a68:	bf00      	nop
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	20000454 	.word	0x20000454
 8004a78:	200004fc 	.word	0x200004fc

08004a7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f103 0208 	add.w	r2, r3, #8
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f103 0208 	add.w	r2, r3, #8
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f103 0208 	add.w	r2, r3, #8
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b085      	sub	sp, #20
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	1c5a      	adds	r2, r3, #1
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	601a      	str	r2, [r3, #0]
}
 8004b12:	bf00      	nop
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b085      	sub	sp, #20
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b34:	d103      	bne.n	8004b3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	e00c      	b.n	8004b58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	3308      	adds	r3, #8
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	e002      	b.n	8004b4c <vListInsert+0x2e>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d2f6      	bcs.n	8004b46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	601a      	str	r2, [r3, #0]
}
 8004b84:	bf00      	nop
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6892      	ldr	r2, [r2, #8]
 8004ba6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6852      	ldr	r2, [r2, #4]
 8004bb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d103      	bne.n	8004bc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	1e5a      	subs	r2, r3, #1
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10b      	bne.n	8004c10 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bfc:	f383 8811 	msr	BASEPRI, r3
 8004c00:	f3bf 8f6f 	isb	sy
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004c0a:	bf00      	nop
 8004c0c:	bf00      	nop
 8004c0e:	e7fd      	b.n	8004c0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004c10:	f002 f8e2 	bl	8006dd8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c1c:	68f9      	ldr	r1, [r7, #12]
 8004c1e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004c20:	fb01 f303 	mul.w	r3, r1, r3
 8004c24:	441a      	add	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c40:	3b01      	subs	r3, #1
 8004c42:	68f9      	ldr	r1, [r7, #12]
 8004c44:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004c46:	fb01 f303 	mul.w	r3, r1, r3
 8004c4a:	441a      	add	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	22ff      	movs	r2, #255	@ 0xff
 8004c54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	22ff      	movs	r2, #255	@ 0xff
 8004c5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d114      	bne.n	8004c90 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d01a      	beq.n	8004ca4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	3310      	adds	r3, #16
 8004c72:	4618      	mov	r0, r3
 8004c74:	f001 f97e 	bl	8005f74 <xTaskRemoveFromEventList>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d012      	beq.n	8004ca4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb4 <xQueueGenericReset+0xd0>)
 8004c80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	e009      	b.n	8004ca4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	3310      	adds	r3, #16
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff fef1 	bl	8004a7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	3324      	adds	r3, #36	@ 0x24
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7ff feec 	bl	8004a7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004ca4:	f002 f8ca 	bl	8006e3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ca8:	2301      	movs	r3, #1
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	e000ed04 	.word	0xe000ed04

08004cb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b08e      	sub	sp, #56	@ 0x38
 8004cbc:	af02      	add	r7, sp, #8
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
 8004cc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10b      	bne.n	8004ce4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd0:	f383 8811 	msr	BASEPRI, r3
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004cde:	bf00      	nop
 8004ce0:	bf00      	nop
 8004ce2:	e7fd      	b.n	8004ce0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10b      	bne.n	8004d02 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cee:	f383 8811 	msr	BASEPRI, r3
 8004cf2:	f3bf 8f6f 	isb	sy
 8004cf6:	f3bf 8f4f 	dsb	sy
 8004cfa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004cfc:	bf00      	nop
 8004cfe:	bf00      	nop
 8004d00:	e7fd      	b.n	8004cfe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d002      	beq.n	8004d0e <xQueueGenericCreateStatic+0x56>
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <xQueueGenericCreateStatic+0x5a>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e000      	b.n	8004d14 <xQueueGenericCreateStatic+0x5c>
 8004d12:	2300      	movs	r3, #0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10b      	bne.n	8004d30 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1c:	f383 8811 	msr	BASEPRI, r3
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	623b      	str	r3, [r7, #32]
}
 8004d2a:	bf00      	nop
 8004d2c:	bf00      	nop
 8004d2e:	e7fd      	b.n	8004d2c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d102      	bne.n	8004d3c <xQueueGenericCreateStatic+0x84>
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <xQueueGenericCreateStatic+0x88>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e000      	b.n	8004d42 <xQueueGenericCreateStatic+0x8a>
 8004d40:	2300      	movs	r3, #0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10b      	bne.n	8004d5e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d4a:	f383 8811 	msr	BASEPRI, r3
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	61fb      	str	r3, [r7, #28]
}
 8004d58:	bf00      	nop
 8004d5a:	bf00      	nop
 8004d5c:	e7fd      	b.n	8004d5a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d5e:	2350      	movs	r3, #80	@ 0x50
 8004d60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2b50      	cmp	r3, #80	@ 0x50
 8004d66:	d00b      	beq.n	8004d80 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	61bb      	str	r3, [r7, #24]
}
 8004d7a:	bf00      	nop
 8004d7c:	bf00      	nop
 8004d7e:	e7fd      	b.n	8004d7c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004d80:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00d      	beq.n	8004da8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d94:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	68b9      	ldr	r1, [r7, #8]
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f000 f840 	bl	8004e28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3730      	adds	r7, #48	@ 0x30
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b08a      	sub	sp, #40	@ 0x28
 8004db6:	af02      	add	r7, sp, #8
 8004db8:	60f8      	str	r0, [r7, #12]
 8004dba:	60b9      	str	r1, [r7, #8]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10b      	bne.n	8004dde <xQueueGenericCreate+0x2c>
	__asm volatile
 8004dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dca:	f383 8811 	msr	BASEPRI, r3
 8004dce:	f3bf 8f6f 	isb	sy
 8004dd2:	f3bf 8f4f 	dsb	sy
 8004dd6:	613b      	str	r3, [r7, #16]
}
 8004dd8:	bf00      	nop
 8004dda:	bf00      	nop
 8004ddc:	e7fd      	b.n	8004dda <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	fb02 f303 	mul.w	r3, r2, r3
 8004de6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	3350      	adds	r3, #80	@ 0x50
 8004dec:	4618      	mov	r0, r3
 8004dee:	f002 f915 	bl	800701c <pvPortMalloc>
 8004df2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d011      	beq.n	8004e1e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	3350      	adds	r3, #80	@ 0x50
 8004e02:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e0c:	79fa      	ldrb	r2, [r7, #7]
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	4613      	mov	r3, r2
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	68b9      	ldr	r1, [r7, #8]
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f000 f805 	bl	8004e28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e1e:	69bb      	ldr	r3, [r7, #24]
	}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3720      	adds	r7, #32
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
 8004e34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d103      	bne.n	8004e44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	e002      	b.n	8004e4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e56:	2101      	movs	r1, #1
 8004e58:	69b8      	ldr	r0, [r7, #24]
 8004e5a:	f7ff fec3 	bl	8004be4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	78fa      	ldrb	r2, [r7, #3]
 8004e62:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e66:	bf00      	nop
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
	...

08004e70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b08e      	sub	sp, #56	@ 0x38
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
 8004e7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10b      	bne.n	8004ea4 <xQueueGenericSend+0x34>
	__asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e9e:	bf00      	nop
 8004ea0:	bf00      	nop
 8004ea2:	e7fd      	b.n	8004ea0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d103      	bne.n	8004eb2 <xQueueGenericSend+0x42>
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <xQueueGenericSend+0x46>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e000      	b.n	8004eb8 <xQueueGenericSend+0x48>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10b      	bne.n	8004ed4 <xQueueGenericSend+0x64>
	__asm volatile
 8004ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec0:	f383 8811 	msr	BASEPRI, r3
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ece:	bf00      	nop
 8004ed0:	bf00      	nop
 8004ed2:	e7fd      	b.n	8004ed0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d103      	bne.n	8004ee2 <xQueueGenericSend+0x72>
 8004eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d101      	bne.n	8004ee6 <xQueueGenericSend+0x76>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e000      	b.n	8004ee8 <xQueueGenericSend+0x78>
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10b      	bne.n	8004f04 <xQueueGenericSend+0x94>
	__asm volatile
 8004eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef0:	f383 8811 	msr	BASEPRI, r3
 8004ef4:	f3bf 8f6f 	isb	sy
 8004ef8:	f3bf 8f4f 	dsb	sy
 8004efc:	623b      	str	r3, [r7, #32]
}
 8004efe:	bf00      	nop
 8004f00:	bf00      	nop
 8004f02:	e7fd      	b.n	8004f00 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f04:	f001 f9fc 	bl	8006300 <xTaskGetSchedulerState>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d102      	bne.n	8004f14 <xQueueGenericSend+0xa4>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <xQueueGenericSend+0xa8>
 8004f14:	2301      	movs	r3, #1
 8004f16:	e000      	b.n	8004f1a <xQueueGenericSend+0xaa>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10b      	bne.n	8004f36 <xQueueGenericSend+0xc6>
	__asm volatile
 8004f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	61fb      	str	r3, [r7, #28]
}
 8004f30:	bf00      	nop
 8004f32:	bf00      	nop
 8004f34:	e7fd      	b.n	8004f32 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f36:	f001 ff4f 	bl	8006dd8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d302      	bcc.n	8004f4c <xQueueGenericSend+0xdc>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d129      	bne.n	8004fa0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	68b9      	ldr	r1, [r7, #8]
 8004f50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f52:	f000 fa0f 	bl	8005374 <prvCopyDataToQueue>
 8004f56:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d010      	beq.n	8004f82 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f62:	3324      	adds	r3, #36	@ 0x24
 8004f64:	4618      	mov	r0, r3
 8004f66:	f001 f805 	bl	8005f74 <xTaskRemoveFromEventList>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d013      	beq.n	8004f98 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004f70:	4b3f      	ldr	r3, [pc, #252]	@ (8005070 <xQueueGenericSend+0x200>)
 8004f72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	e00a      	b.n	8004f98 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d007      	beq.n	8004f98 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004f88:	4b39      	ldr	r3, [pc, #228]	@ (8005070 <xQueueGenericSend+0x200>)
 8004f8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	f3bf 8f4f 	dsb	sy
 8004f94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004f98:	f001 ff50 	bl	8006e3c <vPortExitCritical>
				return pdPASS;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e063      	b.n	8005068 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d103      	bne.n	8004fae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fa6:	f001 ff49 	bl	8006e3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004faa:	2300      	movs	r3, #0
 8004fac:	e05c      	b.n	8005068 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d106      	bne.n	8004fc2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fb4:	f107 0314 	add.w	r3, r7, #20
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f001 f83f 	bl	800603c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fc2:	f001 ff3b 	bl	8006e3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fc6:	f000 fda7 	bl	8005b18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fca:	f001 ff05 	bl	8006dd8 <vPortEnterCritical>
 8004fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fd4:	b25b      	sxtb	r3, r3
 8004fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fda:	d103      	bne.n	8004fe4 <xQueueGenericSend+0x174>
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004fea:	b25b      	sxtb	r3, r3
 8004fec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ff0:	d103      	bne.n	8004ffa <xQueueGenericSend+0x18a>
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ffa:	f001 ff1f 	bl	8006e3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ffe:	1d3a      	adds	r2, r7, #4
 8005000:	f107 0314 	add.w	r3, r7, #20
 8005004:	4611      	mov	r1, r2
 8005006:	4618      	mov	r0, r3
 8005008:	f001 f82e 	bl	8006068 <xTaskCheckForTimeOut>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d124      	bne.n	800505c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005012:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005014:	f000 faa6 	bl	8005564 <prvIsQueueFull>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d018      	beq.n	8005050 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800501e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005020:	3310      	adds	r3, #16
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	4611      	mov	r1, r2
 8005026:	4618      	mov	r0, r3
 8005028:	f000 ff52 	bl	8005ed0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800502c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800502e:	f000 fa31 	bl	8005494 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005032:	f000 fd7f 	bl	8005b34 <xTaskResumeAll>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	f47f af7c 	bne.w	8004f36 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800503e:	4b0c      	ldr	r3, [pc, #48]	@ (8005070 <xQueueGenericSend+0x200>)
 8005040:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	f3bf 8f4f 	dsb	sy
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	e772      	b.n	8004f36 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005050:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005052:	f000 fa1f 	bl	8005494 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005056:	f000 fd6d 	bl	8005b34 <xTaskResumeAll>
 800505a:	e76c      	b.n	8004f36 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800505c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800505e:	f000 fa19 	bl	8005494 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005062:	f000 fd67 	bl	8005b34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005066:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005068:	4618      	mov	r0, r3
 800506a:	3738      	adds	r7, #56	@ 0x38
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	e000ed04 	.word	0xe000ed04

08005074 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b090      	sub	sp, #64	@ 0x40
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
 8005080:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10b      	bne.n	80050a4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800508c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005090:	f383 8811 	msr	BASEPRI, r3
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800509e:	bf00      	nop
 80050a0:	bf00      	nop
 80050a2:	e7fd      	b.n	80050a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d103      	bne.n	80050b2 <xQueueGenericSendFromISR+0x3e>
 80050aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <xQueueGenericSendFromISR+0x42>
 80050b2:	2301      	movs	r3, #1
 80050b4:	e000      	b.n	80050b8 <xQueueGenericSendFromISR+0x44>
 80050b6:	2300      	movs	r3, #0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10b      	bne.n	80050d4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80050bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80050ce:	bf00      	nop
 80050d0:	bf00      	nop
 80050d2:	e7fd      	b.n	80050d0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d103      	bne.n	80050e2 <xQueueGenericSendFromISR+0x6e>
 80050da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d101      	bne.n	80050e6 <xQueueGenericSendFromISR+0x72>
 80050e2:	2301      	movs	r3, #1
 80050e4:	e000      	b.n	80050e8 <xQueueGenericSendFromISR+0x74>
 80050e6:	2300      	movs	r3, #0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10b      	bne.n	8005104 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80050ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f0:	f383 8811 	msr	BASEPRI, r3
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	623b      	str	r3, [r7, #32]
}
 80050fe:	bf00      	nop
 8005100:	bf00      	nop
 8005102:	e7fd      	b.n	8005100 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005104:	f001 ff48 	bl	8006f98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005108:	f3ef 8211 	mrs	r2, BASEPRI
 800510c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005110:	f383 8811 	msr	BASEPRI, r3
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	61fa      	str	r2, [r7, #28]
 800511e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005120:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005122:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005126:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800512c:	429a      	cmp	r2, r3
 800512e:	d302      	bcc.n	8005136 <xQueueGenericSendFromISR+0xc2>
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	2b02      	cmp	r3, #2
 8005134:	d12f      	bne.n	8005196 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005138:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800513c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005144:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	68b9      	ldr	r1, [r7, #8]
 800514a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800514c:	f000 f912 	bl	8005374 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005150:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005154:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005158:	d112      	bne.n	8005180 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800515a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800515c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515e:	2b00      	cmp	r3, #0
 8005160:	d016      	beq.n	8005190 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005164:	3324      	adds	r3, #36	@ 0x24
 8005166:	4618      	mov	r0, r3
 8005168:	f000 ff04 	bl	8005f74 <xTaskRemoveFromEventList>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00e      	beq.n	8005190 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00b      	beq.n	8005190 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	e007      	b.n	8005190 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005180:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005184:	3301      	adds	r3, #1
 8005186:	b2db      	uxtb	r3, r3
 8005188:	b25a      	sxtb	r2, r3
 800518a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800518c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005190:	2301      	movs	r3, #1
 8005192:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005194:	e001      	b.n	800519a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005196:	2300      	movs	r3, #0
 8005198:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800519a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800519c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80051a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80051a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3740      	adds	r7, #64	@ 0x40
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b08c      	sub	sp, #48	@ 0x30
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80051bc:	2300      	movs	r3, #0
 80051be:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80051c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10b      	bne.n	80051e2 <xQueueReceive+0x32>
	__asm volatile
 80051ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ce:	f383 8811 	msr	BASEPRI, r3
 80051d2:	f3bf 8f6f 	isb	sy
 80051d6:	f3bf 8f4f 	dsb	sy
 80051da:	623b      	str	r3, [r7, #32]
}
 80051dc:	bf00      	nop
 80051de:	bf00      	nop
 80051e0:	e7fd      	b.n	80051de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d103      	bne.n	80051f0 <xQueueReceive+0x40>
 80051e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <xQueueReceive+0x44>
 80051f0:	2301      	movs	r3, #1
 80051f2:	e000      	b.n	80051f6 <xQueueReceive+0x46>
 80051f4:	2300      	movs	r3, #0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10b      	bne.n	8005212 <xQueueReceive+0x62>
	__asm volatile
 80051fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	61fb      	str	r3, [r7, #28]
}
 800520c:	bf00      	nop
 800520e:	bf00      	nop
 8005210:	e7fd      	b.n	800520e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005212:	f001 f875 	bl	8006300 <xTaskGetSchedulerState>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d102      	bne.n	8005222 <xQueueReceive+0x72>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <xQueueReceive+0x76>
 8005222:	2301      	movs	r3, #1
 8005224:	e000      	b.n	8005228 <xQueueReceive+0x78>
 8005226:	2300      	movs	r3, #0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10b      	bne.n	8005244 <xQueueReceive+0x94>
	__asm volatile
 800522c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	61bb      	str	r3, [r7, #24]
}
 800523e:	bf00      	nop
 8005240:	bf00      	nop
 8005242:	e7fd      	b.n	8005240 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005244:	f001 fdc8 	bl	8006dd8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800524c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800524e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005250:	2b00      	cmp	r3, #0
 8005252:	d01f      	beq.n	8005294 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005254:	68b9      	ldr	r1, [r7, #8]
 8005256:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005258:	f000 f8f6 	bl	8005448 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800525c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525e:	1e5a      	subs	r2, r3, #1
 8005260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005262:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00f      	beq.n	800528c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800526c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800526e:	3310      	adds	r3, #16
 8005270:	4618      	mov	r0, r3
 8005272:	f000 fe7f 	bl	8005f74 <xTaskRemoveFromEventList>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d007      	beq.n	800528c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800527c:	4b3c      	ldr	r3, [pc, #240]	@ (8005370 <xQueueReceive+0x1c0>)
 800527e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800528c:	f001 fdd6 	bl	8006e3c <vPortExitCritical>
				return pdPASS;
 8005290:	2301      	movs	r3, #1
 8005292:	e069      	b.n	8005368 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d103      	bne.n	80052a2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800529a:	f001 fdcf 	bl	8006e3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800529e:	2300      	movs	r3, #0
 80052a0:	e062      	b.n	8005368 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d106      	bne.n	80052b6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052a8:	f107 0310 	add.w	r3, r7, #16
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 fec5 	bl	800603c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052b2:	2301      	movs	r3, #1
 80052b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052b6:	f001 fdc1 	bl	8006e3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052ba:	f000 fc2d 	bl	8005b18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052be:	f001 fd8b 	bl	8006dd8 <vPortEnterCritical>
 80052c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052c8:	b25b      	sxtb	r3, r3
 80052ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052ce:	d103      	bne.n	80052d8 <xQueueReceive+0x128>
 80052d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052de:	b25b      	sxtb	r3, r3
 80052e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052e4:	d103      	bne.n	80052ee <xQueueReceive+0x13e>
 80052e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052ee:	f001 fda5 	bl	8006e3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052f2:	1d3a      	adds	r2, r7, #4
 80052f4:	f107 0310 	add.w	r3, r7, #16
 80052f8:	4611      	mov	r1, r2
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 feb4 	bl	8006068 <xTaskCheckForTimeOut>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d123      	bne.n	800534e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005306:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005308:	f000 f916 	bl	8005538 <prvIsQueueEmpty>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d017      	beq.n	8005342 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005314:	3324      	adds	r3, #36	@ 0x24
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	4611      	mov	r1, r2
 800531a:	4618      	mov	r0, r3
 800531c:	f000 fdd8 	bl	8005ed0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005320:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005322:	f000 f8b7 	bl	8005494 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005326:	f000 fc05 	bl	8005b34 <xTaskResumeAll>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d189      	bne.n	8005244 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005330:	4b0f      	ldr	r3, [pc, #60]	@ (8005370 <xQueueReceive+0x1c0>)
 8005332:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	e780      	b.n	8005244 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005342:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005344:	f000 f8a6 	bl	8005494 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005348:	f000 fbf4 	bl	8005b34 <xTaskResumeAll>
 800534c:	e77a      	b.n	8005244 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800534e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005350:	f000 f8a0 	bl	8005494 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005354:	f000 fbee 	bl	8005b34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005358:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800535a:	f000 f8ed 	bl	8005538 <prvIsQueueEmpty>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	f43f af6f 	beq.w	8005244 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005366:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005368:	4618      	mov	r0, r3
 800536a:	3730      	adds	r7, #48	@ 0x30
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	e000ed04 	.word	0xe000ed04

08005374 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005380:	2300      	movs	r3, #0
 8005382:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005388:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10d      	bne.n	80053ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d14d      	bne.n	8005436 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 ffcc 	bl	800633c <xTaskPriorityDisinherit>
 80053a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	609a      	str	r2, [r3, #8]
 80053ac:	e043      	b.n	8005436 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d119      	bne.n	80053e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6858      	ldr	r0, [r3, #4]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053bc:	461a      	mov	r2, r3
 80053be:	68b9      	ldr	r1, [r7, #8]
 80053c0:	f002 fafd 	bl	80079be <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053cc:	441a      	add	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d32b      	bcc.n	8005436 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	605a      	str	r2, [r3, #4]
 80053e6:	e026      	b.n	8005436 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	68d8      	ldr	r0, [r3, #12]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f0:	461a      	mov	r2, r3
 80053f2:	68b9      	ldr	r1, [r7, #8]
 80053f4:	f002 fae3 	bl	80079be <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	68da      	ldr	r2, [r3, #12]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005400:	425b      	negs	r3, r3
 8005402:	441a      	add	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	429a      	cmp	r2, r3
 8005412:	d207      	bcs.n	8005424 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541c:	425b      	negs	r3, r3
 800541e:	441a      	add	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b02      	cmp	r3, #2
 8005428:	d105      	bne.n	8005436 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	3b01      	subs	r3, #1
 8005434:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1c5a      	adds	r2, r3, #1
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800543e:	697b      	ldr	r3, [r7, #20]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005456:	2b00      	cmp	r3, #0
 8005458:	d018      	beq.n	800548c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68da      	ldr	r2, [r3, #12]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005462:	441a      	add	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68da      	ldr	r2, [r3, #12]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	429a      	cmp	r2, r3
 8005472:	d303      	bcc.n	800547c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68d9      	ldr	r1, [r3, #12]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005484:	461a      	mov	r2, r3
 8005486:	6838      	ldr	r0, [r7, #0]
 8005488:	f002 fa99 	bl	80079be <memcpy>
	}
}
 800548c:	bf00      	nop
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800549c:	f001 fc9c 	bl	8006dd8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054a8:	e011      	b.n	80054ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d012      	beq.n	80054d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	3324      	adds	r3, #36	@ 0x24
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 fd5c 	bl	8005f74 <xTaskRemoveFromEventList>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80054c2:	f000 fe35 	bl	8006130 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
 80054c8:	3b01      	subs	r3, #1
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	dce9      	bgt.n	80054aa <prvUnlockQueue+0x16>
 80054d6:	e000      	b.n	80054da <prvUnlockQueue+0x46>
					break;
 80054d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	22ff      	movs	r2, #255	@ 0xff
 80054de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80054e2:	f001 fcab 	bl	8006e3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80054e6:	f001 fc77 	bl	8006dd8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054f2:	e011      	b.n	8005518 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d012      	beq.n	8005522 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	3310      	adds	r3, #16
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fd37 	bl	8005f74 <xTaskRemoveFromEventList>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800550c:	f000 fe10 	bl	8006130 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005510:	7bbb      	ldrb	r3, [r7, #14]
 8005512:	3b01      	subs	r3, #1
 8005514:	b2db      	uxtb	r3, r3
 8005516:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005518:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800551c:	2b00      	cmp	r3, #0
 800551e:	dce9      	bgt.n	80054f4 <prvUnlockQueue+0x60>
 8005520:	e000      	b.n	8005524 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005522:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	22ff      	movs	r2, #255	@ 0xff
 8005528:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800552c:	f001 fc86 	bl	8006e3c <vPortExitCritical>
}
 8005530:	bf00      	nop
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005540:	f001 fc4a 	bl	8006dd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005548:	2b00      	cmp	r3, #0
 800554a:	d102      	bne.n	8005552 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800554c:	2301      	movs	r3, #1
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	e001      	b.n	8005556 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005552:	2300      	movs	r3, #0
 8005554:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005556:	f001 fc71 	bl	8006e3c <vPortExitCritical>

	return xReturn;
 800555a:	68fb      	ldr	r3, [r7, #12]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800556c:	f001 fc34 	bl	8006dd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005578:	429a      	cmp	r2, r3
 800557a:	d102      	bne.n	8005582 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800557c:	2301      	movs	r3, #1
 800557e:	60fb      	str	r3, [r7, #12]
 8005580:	e001      	b.n	8005586 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005582:	2300      	movs	r3, #0
 8005584:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005586:	f001 fc59 	bl	8006e3c <vPortExitCritical>

	return xReturn;
 800558a:	68fb      	ldr	r3, [r7, #12]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800559e:	2300      	movs	r3, #0
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	e014      	b.n	80055ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80055a4:	4a0f      	ldr	r2, [pc, #60]	@ (80055e4 <vQueueAddToRegistry+0x50>)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10b      	bne.n	80055c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80055b0:	490c      	ldr	r1, [pc, #48]	@ (80055e4 <vQueueAddToRegistry+0x50>)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80055ba:	4a0a      	ldr	r2, [pc, #40]	@ (80055e4 <vQueueAddToRegistry+0x50>)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	4413      	add	r3, r2
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80055c6:	e006      	b.n	80055d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	3301      	adds	r3, #1
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2b07      	cmp	r3, #7
 80055d2:	d9e7      	bls.n	80055a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80055d4:	bf00      	nop
 80055d6:	bf00      	nop
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	200008fc 	.word	0x200008fc

080055e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80055f8:	f001 fbee 	bl	8006dd8 <vPortEnterCritical>
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005602:	b25b      	sxtb	r3, r3
 8005604:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005608:	d103      	bne.n	8005612 <vQueueWaitForMessageRestricted+0x2a>
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005618:	b25b      	sxtb	r3, r3
 800561a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800561e:	d103      	bne.n	8005628 <vQueueWaitForMessageRestricted+0x40>
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005628:	f001 fc08 	bl	8006e3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005630:	2b00      	cmp	r3, #0
 8005632:	d106      	bne.n	8005642 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	3324      	adds	r3, #36	@ 0x24
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	68b9      	ldr	r1, [r7, #8]
 800563c:	4618      	mov	r0, r3
 800563e:	f000 fc6d 	bl	8005f1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005642:	6978      	ldr	r0, [r7, #20]
 8005644:	f7ff ff26 	bl	8005494 <prvUnlockQueue>
	}
 8005648:	bf00      	nop
 800564a:	3718      	adds	r7, #24
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005650:	b580      	push	{r7, lr}
 8005652:	b08e      	sub	sp, #56	@ 0x38
 8005654:	af04      	add	r7, sp, #16
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
 800565c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800565e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10b      	bne.n	800567c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	623b      	str	r3, [r7, #32]
}
 8005676:	bf00      	nop
 8005678:	bf00      	nop
 800567a:	e7fd      	b.n	8005678 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800567c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10b      	bne.n	800569a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	61fb      	str	r3, [r7, #28]
}
 8005694:	bf00      	nop
 8005696:	bf00      	nop
 8005698:	e7fd      	b.n	8005696 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800569a:	23a8      	movs	r3, #168	@ 0xa8
 800569c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	2ba8      	cmp	r3, #168	@ 0xa8
 80056a2:	d00b      	beq.n	80056bc <xTaskCreateStatic+0x6c>
	__asm volatile
 80056a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a8:	f383 8811 	msr	BASEPRI, r3
 80056ac:	f3bf 8f6f 	isb	sy
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	61bb      	str	r3, [r7, #24]
}
 80056b6:	bf00      	nop
 80056b8:	bf00      	nop
 80056ba:	e7fd      	b.n	80056b8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80056bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80056be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d01e      	beq.n	8005702 <xTaskCreateStatic+0xb2>
 80056c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d01b      	beq.n	8005702 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056cc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056d2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056dc:	2300      	movs	r3, #0
 80056de:	9303      	str	r3, [sp, #12]
 80056e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e2:	9302      	str	r3, [sp, #8]
 80056e4:	f107 0314 	add.w	r3, r7, #20
 80056e8:	9301      	str	r3, [sp, #4]
 80056ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	68b9      	ldr	r1, [r7, #8]
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 f851 	bl	800579c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80056fc:	f000 f8f6 	bl	80058ec <prvAddNewTaskToReadyList>
 8005700:	e001      	b.n	8005706 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005702:	2300      	movs	r3, #0
 8005704:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005706:	697b      	ldr	r3, [r7, #20]
	}
 8005708:	4618      	mov	r0, r3
 800570a:	3728      	adds	r7, #40	@ 0x28
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005710:	b580      	push	{r7, lr}
 8005712:	b08c      	sub	sp, #48	@ 0x30
 8005714:	af04      	add	r7, sp, #16
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	603b      	str	r3, [r7, #0]
 800571c:	4613      	mov	r3, r2
 800571e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005720:	88fb      	ldrh	r3, [r7, #6]
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4618      	mov	r0, r3
 8005726:	f001 fc79 	bl	800701c <pvPortMalloc>
 800572a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00e      	beq.n	8005750 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005732:	20a8      	movs	r0, #168	@ 0xa8
 8005734:	f001 fc72 	bl	800701c <pvPortMalloc>
 8005738:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d003      	beq.n	8005748 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	631a      	str	r2, [r3, #48]	@ 0x30
 8005746:	e005      	b.n	8005754 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005748:	6978      	ldr	r0, [r7, #20]
 800574a:	f001 fd35 	bl	80071b8 <vPortFree>
 800574e:	e001      	b.n	8005754 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005750:	2300      	movs	r3, #0
 8005752:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d017      	beq.n	800578a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005762:	88fa      	ldrh	r2, [r7, #6]
 8005764:	2300      	movs	r3, #0
 8005766:	9303      	str	r3, [sp, #12]
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	9302      	str	r3, [sp, #8]
 800576c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800576e:	9301      	str	r3, [sp, #4]
 8005770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	68b9      	ldr	r1, [r7, #8]
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 f80f 	bl	800579c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800577e:	69f8      	ldr	r0, [r7, #28]
 8005780:	f000 f8b4 	bl	80058ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005784:	2301      	movs	r3, #1
 8005786:	61bb      	str	r3, [r7, #24]
 8005788:	e002      	b.n	8005790 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800578a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800578e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005790:	69bb      	ldr	r3, [r7, #24]
	}
 8005792:	4618      	mov	r0, r3
 8005794:	3720      	adds	r7, #32
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
	...

0800579c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b088      	sub	sp, #32
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
 80057a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80057aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ac:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	461a      	mov	r2, r3
 80057b4:	21a5      	movs	r1, #165	@ 0xa5
 80057b6:	f002 f829 	bl	800780c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80057ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80057c4:	3b01      	subs	r3, #1
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4413      	add	r3, r2
 80057ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	f023 0307 	bic.w	r3, r3, #7
 80057d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	f003 0307 	and.w	r3, r3, #7
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00b      	beq.n	80057f6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80057de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	617b      	str	r3, [r7, #20]
}
 80057f0:	bf00      	nop
 80057f2:	bf00      	nop
 80057f4:	e7fd      	b.n	80057f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d01f      	beq.n	800583c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057fc:	2300      	movs	r3, #0
 80057fe:	61fb      	str	r3, [r7, #28]
 8005800:	e012      	b.n	8005828 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	4413      	add	r3, r2
 8005808:	7819      	ldrb	r1, [r3, #0]
 800580a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	4413      	add	r3, r2
 8005810:	3334      	adds	r3, #52	@ 0x34
 8005812:	460a      	mov	r2, r1
 8005814:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	4413      	add	r3, r2
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d006      	beq.n	8005830 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	3301      	adds	r3, #1
 8005826:	61fb      	str	r3, [r7, #28]
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	2b0f      	cmp	r3, #15
 800582c:	d9e9      	bls.n	8005802 <prvInitialiseNewTask+0x66>
 800582e:	e000      	b.n	8005832 <prvInitialiseNewTask+0x96>
			{
				break;
 8005830:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800583a:	e003      	b.n	8005844 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800583c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583e:	2200      	movs	r2, #0
 8005840:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005846:	2b37      	cmp	r3, #55	@ 0x37
 8005848:	d901      	bls.n	800584e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800584a:	2337      	movs	r3, #55	@ 0x37
 800584c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800584e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005850:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005852:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005856:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005858:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800585a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585c:	2200      	movs	r2, #0
 800585e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005862:	3304      	adds	r3, #4
 8005864:	4618      	mov	r0, r3
 8005866:	f7ff f929 	bl	8004abc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800586a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800586c:	3318      	adds	r3, #24
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff f924 	bl	8004abc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005876:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005878:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800587a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800587c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005882:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005886:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005888:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800588a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800588c:	2200      	movs	r2, #0
 800588e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005894:	2200      	movs	r2, #0
 8005896:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800589a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589c:	3354      	adds	r3, #84	@ 0x54
 800589e:	224c      	movs	r2, #76	@ 0x4c
 80058a0:	2100      	movs	r1, #0
 80058a2:	4618      	mov	r0, r3
 80058a4:	f001 ffb2 	bl	800780c <memset>
 80058a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058aa:	4a0d      	ldr	r2, [pc, #52]	@ (80058e0 <prvInitialiseNewTask+0x144>)
 80058ac:	659a      	str	r2, [r3, #88]	@ 0x58
 80058ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b0:	4a0c      	ldr	r2, [pc, #48]	@ (80058e4 <prvInitialiseNewTask+0x148>)
 80058b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80058b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b6:	4a0c      	ldr	r2, [pc, #48]	@ (80058e8 <prvInitialiseNewTask+0x14c>)
 80058b8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	68f9      	ldr	r1, [r7, #12]
 80058be:	69b8      	ldr	r0, [r7, #24]
 80058c0:	f001 f95a 	bl	8006b78 <pxPortInitialiseStack>
 80058c4:	4602      	mov	r2, r0
 80058c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80058ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058d6:	bf00      	nop
 80058d8:	3720      	adds	r7, #32
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	20001b90 	.word	0x20001b90
 80058e4:	20001bf8 	.word	0x20001bf8
 80058e8:	20001c60 	.word	0x20001c60

080058ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80058f4:	f001 fa70 	bl	8006dd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80058f8:	4b2d      	ldr	r3, [pc, #180]	@ (80059b0 <prvAddNewTaskToReadyList+0xc4>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3301      	adds	r3, #1
 80058fe:	4a2c      	ldr	r2, [pc, #176]	@ (80059b0 <prvAddNewTaskToReadyList+0xc4>)
 8005900:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005902:	4b2c      	ldr	r3, [pc, #176]	@ (80059b4 <prvAddNewTaskToReadyList+0xc8>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d109      	bne.n	800591e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800590a:	4a2a      	ldr	r2, [pc, #168]	@ (80059b4 <prvAddNewTaskToReadyList+0xc8>)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005910:	4b27      	ldr	r3, [pc, #156]	@ (80059b0 <prvAddNewTaskToReadyList+0xc4>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d110      	bne.n	800593a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005918:	f000 fc2e 	bl	8006178 <prvInitialiseTaskLists>
 800591c:	e00d      	b.n	800593a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800591e:	4b26      	ldr	r3, [pc, #152]	@ (80059b8 <prvAddNewTaskToReadyList+0xcc>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d109      	bne.n	800593a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005926:	4b23      	ldr	r3, [pc, #140]	@ (80059b4 <prvAddNewTaskToReadyList+0xc8>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005930:	429a      	cmp	r2, r3
 8005932:	d802      	bhi.n	800593a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005934:	4a1f      	ldr	r2, [pc, #124]	@ (80059b4 <prvAddNewTaskToReadyList+0xc8>)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800593a:	4b20      	ldr	r3, [pc, #128]	@ (80059bc <prvAddNewTaskToReadyList+0xd0>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	3301      	adds	r3, #1
 8005940:	4a1e      	ldr	r2, [pc, #120]	@ (80059bc <prvAddNewTaskToReadyList+0xd0>)
 8005942:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005944:	4b1d      	ldr	r3, [pc, #116]	@ (80059bc <prvAddNewTaskToReadyList+0xd0>)
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005950:	4b1b      	ldr	r3, [pc, #108]	@ (80059c0 <prvAddNewTaskToReadyList+0xd4>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	429a      	cmp	r2, r3
 8005956:	d903      	bls.n	8005960 <prvAddNewTaskToReadyList+0x74>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595c:	4a18      	ldr	r2, [pc, #96]	@ (80059c0 <prvAddNewTaskToReadyList+0xd4>)
 800595e:	6013      	str	r3, [r2, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005964:	4613      	mov	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4a15      	ldr	r2, [pc, #84]	@ (80059c4 <prvAddNewTaskToReadyList+0xd8>)
 800596e:	441a      	add	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	3304      	adds	r3, #4
 8005974:	4619      	mov	r1, r3
 8005976:	4610      	mov	r0, r2
 8005978:	f7ff f8ad 	bl	8004ad6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800597c:	f001 fa5e 	bl	8006e3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005980:	4b0d      	ldr	r3, [pc, #52]	@ (80059b8 <prvAddNewTaskToReadyList+0xcc>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00e      	beq.n	80059a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005988:	4b0a      	ldr	r3, [pc, #40]	@ (80059b4 <prvAddNewTaskToReadyList+0xc8>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005992:	429a      	cmp	r2, r3
 8005994:	d207      	bcs.n	80059a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005996:	4b0c      	ldr	r3, [pc, #48]	@ (80059c8 <prvAddNewTaskToReadyList+0xdc>)
 8005998:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800599c:	601a      	str	r2, [r3, #0]
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059a6:	bf00      	nop
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	20000e10 	.word	0x20000e10
 80059b4:	2000093c 	.word	0x2000093c
 80059b8:	20000e1c 	.word	0x20000e1c
 80059bc:	20000e2c 	.word	0x20000e2c
 80059c0:	20000e18 	.word	0x20000e18
 80059c4:	20000940 	.word	0x20000940
 80059c8:	e000ed04 	.word	0xe000ed04

080059cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80059d4:	2300      	movs	r3, #0
 80059d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d018      	beq.n	8005a10 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80059de:	4b14      	ldr	r3, [pc, #80]	@ (8005a30 <vTaskDelay+0x64>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00b      	beq.n	80059fe <vTaskDelay+0x32>
	__asm volatile
 80059e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ea:	f383 8811 	msr	BASEPRI, r3
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	f3bf 8f4f 	dsb	sy
 80059f6:	60bb      	str	r3, [r7, #8]
}
 80059f8:	bf00      	nop
 80059fa:	bf00      	nop
 80059fc:	e7fd      	b.n	80059fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80059fe:	f000 f88b 	bl	8005b18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a02:	2100      	movs	r1, #0
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 fd09 	bl	800641c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a0a:	f000 f893 	bl	8005b34 <xTaskResumeAll>
 8005a0e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d107      	bne.n	8005a26 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005a16:	4b07      	ldr	r3, [pc, #28]	@ (8005a34 <vTaskDelay+0x68>)
 8005a18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a1c:	601a      	str	r2, [r3, #0]
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a26:	bf00      	nop
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	20000e38 	.word	0x20000e38
 8005a34:	e000ed04 	.word	0xe000ed04

08005a38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b08a      	sub	sp, #40	@ 0x28
 8005a3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a42:	2300      	movs	r3, #0
 8005a44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a46:	463a      	mov	r2, r7
 8005a48:	1d39      	adds	r1, r7, #4
 8005a4a:	f107 0308 	add.w	r3, r7, #8
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7fe ffe0 	bl	8004a14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a54:	6839      	ldr	r1, [r7, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	9202      	str	r2, [sp, #8]
 8005a5c:	9301      	str	r3, [sp, #4]
 8005a5e:	2300      	movs	r3, #0
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	2300      	movs	r3, #0
 8005a64:	460a      	mov	r2, r1
 8005a66:	4924      	ldr	r1, [pc, #144]	@ (8005af8 <vTaskStartScheduler+0xc0>)
 8005a68:	4824      	ldr	r0, [pc, #144]	@ (8005afc <vTaskStartScheduler+0xc4>)
 8005a6a:	f7ff fdf1 	bl	8005650 <xTaskCreateStatic>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	4a23      	ldr	r2, [pc, #140]	@ (8005b00 <vTaskStartScheduler+0xc8>)
 8005a72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a74:	4b22      	ldr	r3, [pc, #136]	@ (8005b00 <vTaskStartScheduler+0xc8>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	617b      	str	r3, [r7, #20]
 8005a80:	e001      	b.n	8005a86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a82:	2300      	movs	r3, #0
 8005a84:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d102      	bne.n	8005a92 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005a8c:	f000 fd1a 	bl	80064c4 <xTimerCreateTimerTask>
 8005a90:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d11b      	bne.n	8005ad0 <vTaskStartScheduler+0x98>
	__asm volatile
 8005a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a9c:	f383 8811 	msr	BASEPRI, r3
 8005aa0:	f3bf 8f6f 	isb	sy
 8005aa4:	f3bf 8f4f 	dsb	sy
 8005aa8:	613b      	str	r3, [r7, #16]
}
 8005aaa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005aac:	4b15      	ldr	r3, [pc, #84]	@ (8005b04 <vTaskStartScheduler+0xcc>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	3354      	adds	r3, #84	@ 0x54
 8005ab2:	4a15      	ldr	r2, [pc, #84]	@ (8005b08 <vTaskStartScheduler+0xd0>)
 8005ab4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ab6:	4b15      	ldr	r3, [pc, #84]	@ (8005b0c <vTaskStartScheduler+0xd4>)
 8005ab8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005abc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005abe:	4b14      	ldr	r3, [pc, #80]	@ (8005b10 <vTaskStartScheduler+0xd8>)
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ac4:	4b13      	ldr	r3, [pc, #76]	@ (8005b14 <vTaskStartScheduler+0xdc>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005aca:	f001 f8e1 	bl	8006c90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ace:	e00f      	b.n	8005af0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ad6:	d10b      	bne.n	8005af0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005adc:	f383 8811 	msr	BASEPRI, r3
 8005ae0:	f3bf 8f6f 	isb	sy
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	60fb      	str	r3, [r7, #12]
}
 8005aea:	bf00      	nop
 8005aec:	bf00      	nop
 8005aee:	e7fd      	b.n	8005aec <vTaskStartScheduler+0xb4>
}
 8005af0:	bf00      	nop
 8005af2:	3718      	adds	r7, #24
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	080085c0 	.word	0x080085c0
 8005afc:	08006149 	.word	0x08006149
 8005b00:	20000e34 	.word	0x20000e34
 8005b04:	2000093c 	.word	0x2000093c
 8005b08:	20000030 	.word	0x20000030
 8005b0c:	20000e30 	.word	0x20000e30
 8005b10:	20000e1c 	.word	0x20000e1c
 8005b14:	20000e14 	.word	0x20000e14

08005b18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b18:	b480      	push	{r7}
 8005b1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005b1c:	4b04      	ldr	r3, [pc, #16]	@ (8005b30 <vTaskSuspendAll+0x18>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3301      	adds	r3, #1
 8005b22:	4a03      	ldr	r2, [pc, #12]	@ (8005b30 <vTaskSuspendAll+0x18>)
 8005b24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005b26:	bf00      	nop
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	20000e38 	.word	0x20000e38

08005b34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b42:	4b42      	ldr	r3, [pc, #264]	@ (8005c4c <xTaskResumeAll+0x118>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10b      	bne.n	8005b62 <xTaskResumeAll+0x2e>
	__asm volatile
 8005b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b4e:	f383 8811 	msr	BASEPRI, r3
 8005b52:	f3bf 8f6f 	isb	sy
 8005b56:	f3bf 8f4f 	dsb	sy
 8005b5a:	603b      	str	r3, [r7, #0]
}
 8005b5c:	bf00      	nop
 8005b5e:	bf00      	nop
 8005b60:	e7fd      	b.n	8005b5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b62:	f001 f939 	bl	8006dd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b66:	4b39      	ldr	r3, [pc, #228]	@ (8005c4c <xTaskResumeAll+0x118>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	4a37      	ldr	r2, [pc, #220]	@ (8005c4c <xTaskResumeAll+0x118>)
 8005b6e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b70:	4b36      	ldr	r3, [pc, #216]	@ (8005c4c <xTaskResumeAll+0x118>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d162      	bne.n	8005c3e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b78:	4b35      	ldr	r3, [pc, #212]	@ (8005c50 <xTaskResumeAll+0x11c>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d05e      	beq.n	8005c3e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b80:	e02f      	b.n	8005be2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b82:	4b34      	ldr	r3, [pc, #208]	@ (8005c54 <xTaskResumeAll+0x120>)
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	3318      	adds	r3, #24
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7fe fffe 	bl	8004b90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	3304      	adds	r3, #4
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7fe fff9 	bl	8004b90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8005c58 <xTaskResumeAll+0x124>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d903      	bls.n	8005bb2 <xTaskResumeAll+0x7e>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bae:	4a2a      	ldr	r2, [pc, #168]	@ (8005c58 <xTaskResumeAll+0x124>)
 8005bb0:	6013      	str	r3, [r2, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4a27      	ldr	r2, [pc, #156]	@ (8005c5c <xTaskResumeAll+0x128>)
 8005bc0:	441a      	add	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	3304      	adds	r3, #4
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	4610      	mov	r0, r2
 8005bca:	f7fe ff84 	bl	8004ad6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bd2:	4b23      	ldr	r3, [pc, #140]	@ (8005c60 <xTaskResumeAll+0x12c>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d302      	bcc.n	8005be2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005bdc:	4b21      	ldr	r3, [pc, #132]	@ (8005c64 <xTaskResumeAll+0x130>)
 8005bde:	2201      	movs	r2, #1
 8005be0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005be2:	4b1c      	ldr	r3, [pc, #112]	@ (8005c54 <xTaskResumeAll+0x120>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1cb      	bne.n	8005b82 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d001      	beq.n	8005bf4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005bf0:	f000 fb66 	bl	80062c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005bf4:	4b1c      	ldr	r3, [pc, #112]	@ (8005c68 <xTaskResumeAll+0x134>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d010      	beq.n	8005c22 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c00:	f000 f846 	bl	8005c90 <xTaskIncrementTick>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d002      	beq.n	8005c10 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005c0a:	4b16      	ldr	r3, [pc, #88]	@ (8005c64 <xTaskResumeAll+0x130>)
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	3b01      	subs	r3, #1
 8005c14:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1f1      	bne.n	8005c00 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005c1c:	4b12      	ldr	r3, [pc, #72]	@ (8005c68 <xTaskResumeAll+0x134>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c22:	4b10      	ldr	r3, [pc, #64]	@ (8005c64 <xTaskResumeAll+0x130>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d009      	beq.n	8005c3e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8005c6c <xTaskResumeAll+0x138>)
 8005c30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c34:	601a      	str	r2, [r3, #0]
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c3e:	f001 f8fd 	bl	8006e3c <vPortExitCritical>

	return xAlreadyYielded;
 8005c42:	68bb      	ldr	r3, [r7, #8]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	20000e38 	.word	0x20000e38
 8005c50:	20000e10 	.word	0x20000e10
 8005c54:	20000dd0 	.word	0x20000dd0
 8005c58:	20000e18 	.word	0x20000e18
 8005c5c:	20000940 	.word	0x20000940
 8005c60:	2000093c 	.word	0x2000093c
 8005c64:	20000e24 	.word	0x20000e24
 8005c68:	20000e20 	.word	0x20000e20
 8005c6c:	e000ed04 	.word	0xe000ed04

08005c70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c76:	4b05      	ldr	r3, [pc, #20]	@ (8005c8c <xTaskGetTickCount+0x1c>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c7c:	687b      	ldr	r3, [r7, #4]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	20000e14 	.word	0x20000e14

08005c90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c96:	2300      	movs	r3, #0
 8005c98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c9a:	4b4f      	ldr	r3, [pc, #316]	@ (8005dd8 <xTaskIncrementTick+0x148>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f040 8090 	bne.w	8005dc4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ca4:	4b4d      	ldr	r3, [pc, #308]	@ (8005ddc <xTaskIncrementTick+0x14c>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005cac:	4a4b      	ldr	r2, [pc, #300]	@ (8005ddc <xTaskIncrementTick+0x14c>)
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d121      	bne.n	8005cfc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005cb8:	4b49      	ldr	r3, [pc, #292]	@ (8005de0 <xTaskIncrementTick+0x150>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00b      	beq.n	8005cda <xTaskIncrementTick+0x4a>
	__asm volatile
 8005cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	603b      	str	r3, [r7, #0]
}
 8005cd4:	bf00      	nop
 8005cd6:	bf00      	nop
 8005cd8:	e7fd      	b.n	8005cd6 <xTaskIncrementTick+0x46>
 8005cda:	4b41      	ldr	r3, [pc, #260]	@ (8005de0 <xTaskIncrementTick+0x150>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	4b40      	ldr	r3, [pc, #256]	@ (8005de4 <xTaskIncrementTick+0x154>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a3e      	ldr	r2, [pc, #248]	@ (8005de0 <xTaskIncrementTick+0x150>)
 8005ce6:	6013      	str	r3, [r2, #0]
 8005ce8:	4a3e      	ldr	r2, [pc, #248]	@ (8005de4 <xTaskIncrementTick+0x154>)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6013      	str	r3, [r2, #0]
 8005cee:	4b3e      	ldr	r3, [pc, #248]	@ (8005de8 <xTaskIncrementTick+0x158>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	4a3c      	ldr	r2, [pc, #240]	@ (8005de8 <xTaskIncrementTick+0x158>)
 8005cf6:	6013      	str	r3, [r2, #0]
 8005cf8:	f000 fae2 	bl	80062c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005cfc:	4b3b      	ldr	r3, [pc, #236]	@ (8005dec <xTaskIncrementTick+0x15c>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d349      	bcc.n	8005d9a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d06:	4b36      	ldr	r3, [pc, #216]	@ (8005de0 <xTaskIncrementTick+0x150>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d104      	bne.n	8005d1a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d10:	4b36      	ldr	r3, [pc, #216]	@ (8005dec <xTaskIncrementTick+0x15c>)
 8005d12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d16:	601a      	str	r2, [r3, #0]
					break;
 8005d18:	e03f      	b.n	8005d9a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d1a:	4b31      	ldr	r3, [pc, #196]	@ (8005de0 <xTaskIncrementTick+0x150>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d203      	bcs.n	8005d3a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d32:	4a2e      	ldr	r2, [pc, #184]	@ (8005dec <xTaskIncrementTick+0x15c>)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d38:	e02f      	b.n	8005d9a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	3304      	adds	r3, #4
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7fe ff26 	bl	8004b90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d004      	beq.n	8005d56 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	3318      	adds	r3, #24
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7fe ff1d 	bl	8004b90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d5a:	4b25      	ldr	r3, [pc, #148]	@ (8005df0 <xTaskIncrementTick+0x160>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d903      	bls.n	8005d6a <xTaskIncrementTick+0xda>
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d66:	4a22      	ldr	r2, [pc, #136]	@ (8005df0 <xTaskIncrementTick+0x160>)
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d6e:	4613      	mov	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4a1f      	ldr	r2, [pc, #124]	@ (8005df4 <xTaskIncrementTick+0x164>)
 8005d78:	441a      	add	r2, r3
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	3304      	adds	r3, #4
 8005d7e:	4619      	mov	r1, r3
 8005d80:	4610      	mov	r0, r2
 8005d82:	f7fe fea8 	bl	8004ad6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8005df8 <xTaskIncrementTick+0x168>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d3b8      	bcc.n	8005d06 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005d94:	2301      	movs	r3, #1
 8005d96:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d98:	e7b5      	b.n	8005d06 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d9a:	4b17      	ldr	r3, [pc, #92]	@ (8005df8 <xTaskIncrementTick+0x168>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005da0:	4914      	ldr	r1, [pc, #80]	@ (8005df4 <xTaskIncrementTick+0x164>)
 8005da2:	4613      	mov	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	440b      	add	r3, r1
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d901      	bls.n	8005db6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005db2:	2301      	movs	r3, #1
 8005db4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005db6:	4b11      	ldr	r3, [pc, #68]	@ (8005dfc <xTaskIncrementTick+0x16c>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d007      	beq.n	8005dce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	617b      	str	r3, [r7, #20]
 8005dc2:	e004      	b.n	8005dce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8005e00 <xTaskIncrementTick+0x170>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	4a0d      	ldr	r2, [pc, #52]	@ (8005e00 <xTaskIncrementTick+0x170>)
 8005dcc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005dce:	697b      	ldr	r3, [r7, #20]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3718      	adds	r7, #24
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	20000e38 	.word	0x20000e38
 8005ddc:	20000e14 	.word	0x20000e14
 8005de0:	20000dc8 	.word	0x20000dc8
 8005de4:	20000dcc 	.word	0x20000dcc
 8005de8:	20000e28 	.word	0x20000e28
 8005dec:	20000e30 	.word	0x20000e30
 8005df0:	20000e18 	.word	0x20000e18
 8005df4:	20000940 	.word	0x20000940
 8005df8:	2000093c 	.word	0x2000093c
 8005dfc:	20000e24 	.word	0x20000e24
 8005e00:	20000e20 	.word	0x20000e20

08005e04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e0a:	4b2b      	ldr	r3, [pc, #172]	@ (8005eb8 <vTaskSwitchContext+0xb4>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d003      	beq.n	8005e1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e12:	4b2a      	ldr	r3, [pc, #168]	@ (8005ebc <vTaskSwitchContext+0xb8>)
 8005e14:	2201      	movs	r2, #1
 8005e16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e18:	e047      	b.n	8005eaa <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005e1a:	4b28      	ldr	r3, [pc, #160]	@ (8005ebc <vTaskSwitchContext+0xb8>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e20:	4b27      	ldr	r3, [pc, #156]	@ (8005ec0 <vTaskSwitchContext+0xbc>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	60fb      	str	r3, [r7, #12]
 8005e26:	e011      	b.n	8005e4c <vTaskSwitchContext+0x48>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10b      	bne.n	8005e46 <vTaskSwitchContext+0x42>
	__asm volatile
 8005e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	607b      	str	r3, [r7, #4]
}
 8005e40:	bf00      	nop
 8005e42:	bf00      	nop
 8005e44:	e7fd      	b.n	8005e42 <vTaskSwitchContext+0x3e>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	60fb      	str	r3, [r7, #12]
 8005e4c:	491d      	ldr	r1, [pc, #116]	@ (8005ec4 <vTaskSwitchContext+0xc0>)
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	4613      	mov	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4413      	add	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	440b      	add	r3, r1
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d0e3      	beq.n	8005e28 <vTaskSwitchContext+0x24>
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	4613      	mov	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4a16      	ldr	r2, [pc, #88]	@ (8005ec4 <vTaskSwitchContext+0xc0>)
 8005e6c:	4413      	add	r3, r2
 8005e6e:	60bb      	str	r3, [r7, #8]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	605a      	str	r2, [r3, #4]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	3308      	adds	r3, #8
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d104      	bne.n	8005e90 <vTaskSwitchContext+0x8c>
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	605a      	str	r2, [r3, #4]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	4a0c      	ldr	r2, [pc, #48]	@ (8005ec8 <vTaskSwitchContext+0xc4>)
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	4a09      	ldr	r2, [pc, #36]	@ (8005ec0 <vTaskSwitchContext+0xbc>)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ea0:	4b09      	ldr	r3, [pc, #36]	@ (8005ec8 <vTaskSwitchContext+0xc4>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3354      	adds	r3, #84	@ 0x54
 8005ea6:	4a09      	ldr	r2, [pc, #36]	@ (8005ecc <vTaskSwitchContext+0xc8>)
 8005ea8:	6013      	str	r3, [r2, #0]
}
 8005eaa:	bf00      	nop
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	20000e38 	.word	0x20000e38
 8005ebc:	20000e24 	.word	0x20000e24
 8005ec0:	20000e18 	.word	0x20000e18
 8005ec4:	20000940 	.word	0x20000940
 8005ec8:	2000093c 	.word	0x2000093c
 8005ecc:	20000030 	.word	0x20000030

08005ed0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10b      	bne.n	8005ef8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	60fb      	str	r3, [r7, #12]
}
 8005ef2:	bf00      	nop
 8005ef4:	bf00      	nop
 8005ef6:	e7fd      	b.n	8005ef4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ef8:	4b07      	ldr	r3, [pc, #28]	@ (8005f18 <vTaskPlaceOnEventList+0x48>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3318      	adds	r3, #24
 8005efe:	4619      	mov	r1, r3
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f7fe fe0c 	bl	8004b1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f06:	2101      	movs	r1, #1
 8005f08:	6838      	ldr	r0, [r7, #0]
 8005f0a:	f000 fa87 	bl	800641c <prvAddCurrentTaskToDelayedList>
}
 8005f0e:	bf00      	nop
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	2000093c 	.word	0x2000093c

08005f1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10b      	bne.n	8005f46 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	617b      	str	r3, [r7, #20]
}
 8005f40:	bf00      	nop
 8005f42:	bf00      	nop
 8005f44:	e7fd      	b.n	8005f42 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f46:	4b0a      	ldr	r3, [pc, #40]	@ (8005f70 <vTaskPlaceOnEventListRestricted+0x54>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	3318      	adds	r3, #24
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f7fe fdc1 	bl	8004ad6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d002      	beq.n	8005f60 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005f5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f5e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f60:	6879      	ldr	r1, [r7, #4]
 8005f62:	68b8      	ldr	r0, [r7, #8]
 8005f64:	f000 fa5a 	bl	800641c <prvAddCurrentTaskToDelayedList>
	}
 8005f68:	bf00      	nop
 8005f6a:	3718      	adds	r7, #24
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	2000093c 	.word	0x2000093c

08005f74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10b      	bne.n	8005fa2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8e:	f383 8811 	msr	BASEPRI, r3
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	60fb      	str	r3, [r7, #12]
}
 8005f9c:	bf00      	nop
 8005f9e:	bf00      	nop
 8005fa0:	e7fd      	b.n	8005f9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	3318      	adds	r3, #24
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fe fdf2 	bl	8004b90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fac:	4b1d      	ldr	r3, [pc, #116]	@ (8006024 <xTaskRemoveFromEventList+0xb0>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d11d      	bne.n	8005ff0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	3304      	adds	r3, #4
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7fe fde9 	bl	8004b90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fc2:	4b19      	ldr	r3, [pc, #100]	@ (8006028 <xTaskRemoveFromEventList+0xb4>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d903      	bls.n	8005fd2 <xTaskRemoveFromEventList+0x5e>
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fce:	4a16      	ldr	r2, [pc, #88]	@ (8006028 <xTaskRemoveFromEventList+0xb4>)
 8005fd0:	6013      	str	r3, [r2, #0]
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4413      	add	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4a13      	ldr	r2, [pc, #76]	@ (800602c <xTaskRemoveFromEventList+0xb8>)
 8005fe0:	441a      	add	r2, r3
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	3304      	adds	r3, #4
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	4610      	mov	r0, r2
 8005fea:	f7fe fd74 	bl	8004ad6 <vListInsertEnd>
 8005fee:	e005      	b.n	8005ffc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	3318      	adds	r3, #24
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	480e      	ldr	r0, [pc, #56]	@ (8006030 <xTaskRemoveFromEventList+0xbc>)
 8005ff8:	f7fe fd6d 	bl	8004ad6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006000:	4b0c      	ldr	r3, [pc, #48]	@ (8006034 <xTaskRemoveFromEventList+0xc0>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006006:	429a      	cmp	r2, r3
 8006008:	d905      	bls.n	8006016 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800600a:	2301      	movs	r3, #1
 800600c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800600e:	4b0a      	ldr	r3, [pc, #40]	@ (8006038 <xTaskRemoveFromEventList+0xc4>)
 8006010:	2201      	movs	r2, #1
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	e001      	b.n	800601a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006016:	2300      	movs	r3, #0
 8006018:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800601a:	697b      	ldr	r3, [r7, #20]
}
 800601c:	4618      	mov	r0, r3
 800601e:	3718      	adds	r7, #24
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	20000e38 	.word	0x20000e38
 8006028:	20000e18 	.word	0x20000e18
 800602c:	20000940 	.word	0x20000940
 8006030:	20000dd0 	.word	0x20000dd0
 8006034:	2000093c 	.word	0x2000093c
 8006038:	20000e24 	.word	0x20000e24

0800603c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006044:	4b06      	ldr	r3, [pc, #24]	@ (8006060 <vTaskInternalSetTimeOutState+0x24>)
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800604c:	4b05      	ldr	r3, [pc, #20]	@ (8006064 <vTaskInternalSetTimeOutState+0x28>)
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	605a      	str	r2, [r3, #4]
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr
 8006060:	20000e28 	.word	0x20000e28
 8006064:	20000e14 	.word	0x20000e14

08006068 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b088      	sub	sp, #32
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10b      	bne.n	8006090 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800607c:	f383 8811 	msr	BASEPRI, r3
 8006080:	f3bf 8f6f 	isb	sy
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	613b      	str	r3, [r7, #16]
}
 800608a:	bf00      	nop
 800608c:	bf00      	nop
 800608e:	e7fd      	b.n	800608c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10b      	bne.n	80060ae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800609a:	f383 8811 	msr	BASEPRI, r3
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	60fb      	str	r3, [r7, #12]
}
 80060a8:	bf00      	nop
 80060aa:	bf00      	nop
 80060ac:	e7fd      	b.n	80060aa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80060ae:	f000 fe93 	bl	8006dd8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80060b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006128 <xTaskCheckForTimeOut+0xc0>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060ca:	d102      	bne.n	80060d2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80060cc:	2300      	movs	r3, #0
 80060ce:	61fb      	str	r3, [r7, #28]
 80060d0:	e023      	b.n	800611a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	4b15      	ldr	r3, [pc, #84]	@ (800612c <xTaskCheckForTimeOut+0xc4>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d007      	beq.n	80060ee <xTaskCheckForTimeOut+0x86>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d302      	bcc.n	80060ee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80060e8:	2301      	movs	r3, #1
 80060ea:	61fb      	str	r3, [r7, #28]
 80060ec:	e015      	b.n	800611a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d20b      	bcs.n	8006110 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	1ad2      	subs	r2, r2, r3
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f7ff ff99 	bl	800603c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800610a:	2300      	movs	r3, #0
 800610c:	61fb      	str	r3, [r7, #28]
 800610e:	e004      	b.n	800611a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	2200      	movs	r2, #0
 8006114:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006116:	2301      	movs	r3, #1
 8006118:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800611a:	f000 fe8f 	bl	8006e3c <vPortExitCritical>

	return xReturn;
 800611e:	69fb      	ldr	r3, [r7, #28]
}
 8006120:	4618      	mov	r0, r3
 8006122:	3720      	adds	r7, #32
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	20000e14 	.word	0x20000e14
 800612c:	20000e28 	.word	0x20000e28

08006130 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006130:	b480      	push	{r7}
 8006132:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006134:	4b03      	ldr	r3, [pc, #12]	@ (8006144 <vTaskMissedYield+0x14>)
 8006136:	2201      	movs	r2, #1
 8006138:	601a      	str	r2, [r3, #0]
}
 800613a:	bf00      	nop
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr
 8006144:	20000e24 	.word	0x20000e24

08006148 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006150:	f000 f852 	bl	80061f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006154:	4b06      	ldr	r3, [pc, #24]	@ (8006170 <prvIdleTask+0x28>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d9f9      	bls.n	8006150 <prvIdleTask+0x8>
			{
				taskYIELD();
 800615c:	4b05      	ldr	r3, [pc, #20]	@ (8006174 <prvIdleTask+0x2c>)
 800615e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	f3bf 8f4f 	dsb	sy
 8006168:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800616c:	e7f0      	b.n	8006150 <prvIdleTask+0x8>
 800616e:	bf00      	nop
 8006170:	20000940 	.word	0x20000940
 8006174:	e000ed04 	.word	0xe000ed04

08006178 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800617e:	2300      	movs	r3, #0
 8006180:	607b      	str	r3, [r7, #4]
 8006182:	e00c      	b.n	800619e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	4613      	mov	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4413      	add	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4a12      	ldr	r2, [pc, #72]	@ (80061d8 <prvInitialiseTaskLists+0x60>)
 8006190:	4413      	add	r3, r2
 8006192:	4618      	mov	r0, r3
 8006194:	f7fe fc72 	bl	8004a7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	3301      	adds	r3, #1
 800619c:	607b      	str	r3, [r7, #4]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b37      	cmp	r3, #55	@ 0x37
 80061a2:	d9ef      	bls.n	8006184 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80061a4:	480d      	ldr	r0, [pc, #52]	@ (80061dc <prvInitialiseTaskLists+0x64>)
 80061a6:	f7fe fc69 	bl	8004a7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80061aa:	480d      	ldr	r0, [pc, #52]	@ (80061e0 <prvInitialiseTaskLists+0x68>)
 80061ac:	f7fe fc66 	bl	8004a7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80061b0:	480c      	ldr	r0, [pc, #48]	@ (80061e4 <prvInitialiseTaskLists+0x6c>)
 80061b2:	f7fe fc63 	bl	8004a7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80061b6:	480c      	ldr	r0, [pc, #48]	@ (80061e8 <prvInitialiseTaskLists+0x70>)
 80061b8:	f7fe fc60 	bl	8004a7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80061bc:	480b      	ldr	r0, [pc, #44]	@ (80061ec <prvInitialiseTaskLists+0x74>)
 80061be:	f7fe fc5d 	bl	8004a7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80061c2:	4b0b      	ldr	r3, [pc, #44]	@ (80061f0 <prvInitialiseTaskLists+0x78>)
 80061c4:	4a05      	ldr	r2, [pc, #20]	@ (80061dc <prvInitialiseTaskLists+0x64>)
 80061c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061c8:	4b0a      	ldr	r3, [pc, #40]	@ (80061f4 <prvInitialiseTaskLists+0x7c>)
 80061ca:	4a05      	ldr	r2, [pc, #20]	@ (80061e0 <prvInitialiseTaskLists+0x68>)
 80061cc:	601a      	str	r2, [r3, #0]
}
 80061ce:	bf00      	nop
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	20000940 	.word	0x20000940
 80061dc:	20000da0 	.word	0x20000da0
 80061e0:	20000db4 	.word	0x20000db4
 80061e4:	20000dd0 	.word	0x20000dd0
 80061e8:	20000de4 	.word	0x20000de4
 80061ec:	20000dfc 	.word	0x20000dfc
 80061f0:	20000dc8 	.word	0x20000dc8
 80061f4:	20000dcc 	.word	0x20000dcc

080061f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061fe:	e019      	b.n	8006234 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006200:	f000 fdea 	bl	8006dd8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006204:	4b10      	ldr	r3, [pc, #64]	@ (8006248 <prvCheckTasksWaitingTermination+0x50>)
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	3304      	adds	r3, #4
 8006210:	4618      	mov	r0, r3
 8006212:	f7fe fcbd 	bl	8004b90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006216:	4b0d      	ldr	r3, [pc, #52]	@ (800624c <prvCheckTasksWaitingTermination+0x54>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	3b01      	subs	r3, #1
 800621c:	4a0b      	ldr	r2, [pc, #44]	@ (800624c <prvCheckTasksWaitingTermination+0x54>)
 800621e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006220:	4b0b      	ldr	r3, [pc, #44]	@ (8006250 <prvCheckTasksWaitingTermination+0x58>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	3b01      	subs	r3, #1
 8006226:	4a0a      	ldr	r2, [pc, #40]	@ (8006250 <prvCheckTasksWaitingTermination+0x58>)
 8006228:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800622a:	f000 fe07 	bl	8006e3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f810 	bl	8006254 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006234:	4b06      	ldr	r3, [pc, #24]	@ (8006250 <prvCheckTasksWaitingTermination+0x58>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1e1      	bne.n	8006200 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800623c:	bf00      	nop
 800623e:	bf00      	nop
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	20000de4 	.word	0x20000de4
 800624c:	20000e10 	.word	0x20000e10
 8006250:	20000df8 	.word	0x20000df8

08006254 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	3354      	adds	r3, #84	@ 0x54
 8006260:	4618      	mov	r0, r3
 8006262:	f001 faeb 	bl	800783c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800626c:	2b00      	cmp	r3, #0
 800626e:	d108      	bne.n	8006282 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006274:	4618      	mov	r0, r3
 8006276:	f000 ff9f 	bl	80071b8 <vPortFree>
				vPortFree( pxTCB );
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 ff9c 	bl	80071b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006280:	e019      	b.n	80062b6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006288:	2b01      	cmp	r3, #1
 800628a:	d103      	bne.n	8006294 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 ff93 	bl	80071b8 <vPortFree>
	}
 8006292:	e010      	b.n	80062b6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800629a:	2b02      	cmp	r3, #2
 800629c:	d00b      	beq.n	80062b6 <prvDeleteTCB+0x62>
	__asm volatile
 800629e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	60fb      	str	r3, [r7, #12]
}
 80062b0:	bf00      	nop
 80062b2:	bf00      	nop
 80062b4:	e7fd      	b.n	80062b2 <prvDeleteTCB+0x5e>
	}
 80062b6:	bf00      	nop
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
	...

080062c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062c6:	4b0c      	ldr	r3, [pc, #48]	@ (80062f8 <prvResetNextTaskUnblockTime+0x38>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d104      	bne.n	80062da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80062d0:	4b0a      	ldr	r3, [pc, #40]	@ (80062fc <prvResetNextTaskUnblockTime+0x3c>)
 80062d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80062d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80062d8:	e008      	b.n	80062ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062da:	4b07      	ldr	r3, [pc, #28]	@ (80062f8 <prvResetNextTaskUnblockTime+0x38>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	4a04      	ldr	r2, [pc, #16]	@ (80062fc <prvResetNextTaskUnblockTime+0x3c>)
 80062ea:	6013      	str	r3, [r2, #0]
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr
 80062f8:	20000dc8 	.word	0x20000dc8
 80062fc:	20000e30 	.word	0x20000e30

08006300 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006306:	4b0b      	ldr	r3, [pc, #44]	@ (8006334 <xTaskGetSchedulerState+0x34>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d102      	bne.n	8006314 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800630e:	2301      	movs	r3, #1
 8006310:	607b      	str	r3, [r7, #4]
 8006312:	e008      	b.n	8006326 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006314:	4b08      	ldr	r3, [pc, #32]	@ (8006338 <xTaskGetSchedulerState+0x38>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d102      	bne.n	8006322 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800631c:	2302      	movs	r3, #2
 800631e:	607b      	str	r3, [r7, #4]
 8006320:	e001      	b.n	8006326 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006322:	2300      	movs	r3, #0
 8006324:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006326:	687b      	ldr	r3, [r7, #4]
	}
 8006328:	4618      	mov	r0, r3
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	20000e1c 	.word	0x20000e1c
 8006338:	20000e38 	.word	0x20000e38

0800633c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006348:	2300      	movs	r3, #0
 800634a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d058      	beq.n	8006404 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006352:	4b2f      	ldr	r3, [pc, #188]	@ (8006410 <xTaskPriorityDisinherit+0xd4>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	429a      	cmp	r2, r3
 800635a:	d00b      	beq.n	8006374 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800635c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006360:	f383 8811 	msr	BASEPRI, r3
 8006364:	f3bf 8f6f 	isb	sy
 8006368:	f3bf 8f4f 	dsb	sy
 800636c:	60fb      	str	r3, [r7, #12]
}
 800636e:	bf00      	nop
 8006370:	bf00      	nop
 8006372:	e7fd      	b.n	8006370 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10b      	bne.n	8006394 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800637c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006380:	f383 8811 	msr	BASEPRI, r3
 8006384:	f3bf 8f6f 	isb	sy
 8006388:	f3bf 8f4f 	dsb	sy
 800638c:	60bb      	str	r3, [r7, #8]
}
 800638e:	bf00      	nop
 8006390:	bf00      	nop
 8006392:	e7fd      	b.n	8006390 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006398:	1e5a      	subs	r2, r3, #1
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d02c      	beq.n	8006404 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d128      	bne.n	8006404 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	3304      	adds	r3, #4
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7fe fbea 	bl	8004b90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063d4:	4b0f      	ldr	r3, [pc, #60]	@ (8006414 <xTaskPriorityDisinherit+0xd8>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d903      	bls.n	80063e4 <xTaskPriorityDisinherit+0xa8>
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e0:	4a0c      	ldr	r2, [pc, #48]	@ (8006414 <xTaskPriorityDisinherit+0xd8>)
 80063e2:	6013      	str	r3, [r2, #0]
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063e8:	4613      	mov	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	4a09      	ldr	r2, [pc, #36]	@ (8006418 <xTaskPriorityDisinherit+0xdc>)
 80063f2:	441a      	add	r2, r3
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	3304      	adds	r3, #4
 80063f8:	4619      	mov	r1, r3
 80063fa:	4610      	mov	r0, r2
 80063fc:	f7fe fb6b 	bl	8004ad6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006400:	2301      	movs	r3, #1
 8006402:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006404:	697b      	ldr	r3, [r7, #20]
	}
 8006406:	4618      	mov	r0, r3
 8006408:	3718      	adds	r7, #24
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	2000093c 	.word	0x2000093c
 8006414:	20000e18 	.word	0x20000e18
 8006418:	20000940 	.word	0x20000940

0800641c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006426:	4b21      	ldr	r3, [pc, #132]	@ (80064ac <prvAddCurrentTaskToDelayedList+0x90>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800642c:	4b20      	ldr	r3, [pc, #128]	@ (80064b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	3304      	adds	r3, #4
 8006432:	4618      	mov	r0, r3
 8006434:	f7fe fbac 	bl	8004b90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800643e:	d10a      	bne.n	8006456 <prvAddCurrentTaskToDelayedList+0x3a>
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d007      	beq.n	8006456 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006446:	4b1a      	ldr	r3, [pc, #104]	@ (80064b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	3304      	adds	r3, #4
 800644c:	4619      	mov	r1, r3
 800644e:	4819      	ldr	r0, [pc, #100]	@ (80064b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006450:	f7fe fb41 	bl	8004ad6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006454:	e026      	b.n	80064a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4413      	add	r3, r2
 800645c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800645e:	4b14      	ldr	r3, [pc, #80]	@ (80064b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	429a      	cmp	r2, r3
 800646c:	d209      	bcs.n	8006482 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800646e:	4b12      	ldr	r3, [pc, #72]	@ (80064b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	4b0f      	ldr	r3, [pc, #60]	@ (80064b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3304      	adds	r3, #4
 8006478:	4619      	mov	r1, r3
 800647a:	4610      	mov	r0, r2
 800647c:	f7fe fb4f 	bl	8004b1e <vListInsert>
}
 8006480:	e010      	b.n	80064a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006482:	4b0e      	ldr	r3, [pc, #56]	@ (80064bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	4b0a      	ldr	r3, [pc, #40]	@ (80064b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	3304      	adds	r3, #4
 800648c:	4619      	mov	r1, r3
 800648e:	4610      	mov	r0, r2
 8006490:	f7fe fb45 	bl	8004b1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006494:	4b0a      	ldr	r3, [pc, #40]	@ (80064c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	429a      	cmp	r2, r3
 800649c:	d202      	bcs.n	80064a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800649e:	4a08      	ldr	r2, [pc, #32]	@ (80064c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	6013      	str	r3, [r2, #0]
}
 80064a4:	bf00      	nop
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	20000e14 	.word	0x20000e14
 80064b0:	2000093c 	.word	0x2000093c
 80064b4:	20000dfc 	.word	0x20000dfc
 80064b8:	20000dcc 	.word	0x20000dcc
 80064bc:	20000dc8 	.word	0x20000dc8
 80064c0:	20000e30 	.word	0x20000e30

080064c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b08a      	sub	sp, #40	@ 0x28
 80064c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80064ca:	2300      	movs	r3, #0
 80064cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80064ce:	f000 fb13 	bl	8006af8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80064d2:	4b1d      	ldr	r3, [pc, #116]	@ (8006548 <xTimerCreateTimerTask+0x84>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d021      	beq.n	800651e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80064da:	2300      	movs	r3, #0
 80064dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80064de:	2300      	movs	r3, #0
 80064e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80064e2:	1d3a      	adds	r2, r7, #4
 80064e4:	f107 0108 	add.w	r1, r7, #8
 80064e8:	f107 030c 	add.w	r3, r7, #12
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7fe faab 	bl	8004a48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80064f2:	6879      	ldr	r1, [r7, #4]
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	9202      	str	r2, [sp, #8]
 80064fa:	9301      	str	r3, [sp, #4]
 80064fc:	2302      	movs	r3, #2
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	2300      	movs	r3, #0
 8006502:	460a      	mov	r2, r1
 8006504:	4911      	ldr	r1, [pc, #68]	@ (800654c <xTimerCreateTimerTask+0x88>)
 8006506:	4812      	ldr	r0, [pc, #72]	@ (8006550 <xTimerCreateTimerTask+0x8c>)
 8006508:	f7ff f8a2 	bl	8005650 <xTaskCreateStatic>
 800650c:	4603      	mov	r3, r0
 800650e:	4a11      	ldr	r2, [pc, #68]	@ (8006554 <xTimerCreateTimerTask+0x90>)
 8006510:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006512:	4b10      	ldr	r3, [pc, #64]	@ (8006554 <xTimerCreateTimerTask+0x90>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800651a:	2301      	movs	r3, #1
 800651c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d10b      	bne.n	800653c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006528:	f383 8811 	msr	BASEPRI, r3
 800652c:	f3bf 8f6f 	isb	sy
 8006530:	f3bf 8f4f 	dsb	sy
 8006534:	613b      	str	r3, [r7, #16]
}
 8006536:	bf00      	nop
 8006538:	bf00      	nop
 800653a:	e7fd      	b.n	8006538 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800653c:	697b      	ldr	r3, [r7, #20]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	20000e6c 	.word	0x20000e6c
 800654c:	080085c8 	.word	0x080085c8
 8006550:	08006691 	.word	0x08006691
 8006554:	20000e70 	.word	0x20000e70

08006558 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b08a      	sub	sp, #40	@ 0x28
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
 8006564:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006566:	2300      	movs	r3, #0
 8006568:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10b      	bne.n	8006588 <xTimerGenericCommand+0x30>
	__asm volatile
 8006570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	623b      	str	r3, [r7, #32]
}
 8006582:	bf00      	nop
 8006584:	bf00      	nop
 8006586:	e7fd      	b.n	8006584 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006588:	4b19      	ldr	r3, [pc, #100]	@ (80065f0 <xTimerGenericCommand+0x98>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d02a      	beq.n	80065e6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2b05      	cmp	r3, #5
 80065a0:	dc18      	bgt.n	80065d4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80065a2:	f7ff fead 	bl	8006300 <xTaskGetSchedulerState>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d109      	bne.n	80065c0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80065ac:	4b10      	ldr	r3, [pc, #64]	@ (80065f0 <xTimerGenericCommand+0x98>)
 80065ae:	6818      	ldr	r0, [r3, #0]
 80065b0:	f107 0110 	add.w	r1, r7, #16
 80065b4:	2300      	movs	r3, #0
 80065b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065b8:	f7fe fc5a 	bl	8004e70 <xQueueGenericSend>
 80065bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80065be:	e012      	b.n	80065e6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80065c0:	4b0b      	ldr	r3, [pc, #44]	@ (80065f0 <xTimerGenericCommand+0x98>)
 80065c2:	6818      	ldr	r0, [r3, #0]
 80065c4:	f107 0110 	add.w	r1, r7, #16
 80065c8:	2300      	movs	r3, #0
 80065ca:	2200      	movs	r2, #0
 80065cc:	f7fe fc50 	bl	8004e70 <xQueueGenericSend>
 80065d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80065d2:	e008      	b.n	80065e6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80065d4:	4b06      	ldr	r3, [pc, #24]	@ (80065f0 <xTimerGenericCommand+0x98>)
 80065d6:	6818      	ldr	r0, [r3, #0]
 80065d8:	f107 0110 	add.w	r1, r7, #16
 80065dc:	2300      	movs	r3, #0
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	f7fe fd48 	bl	8005074 <xQueueGenericSendFromISR>
 80065e4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80065e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3728      	adds	r7, #40	@ 0x28
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	20000e6c 	.word	0x20000e6c

080065f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b088      	sub	sp, #32
 80065f8:	af02      	add	r7, sp, #8
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065fe:	4b23      	ldr	r3, [pc, #140]	@ (800668c <prvProcessExpiredTimer+0x98>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	3304      	adds	r3, #4
 800660c:	4618      	mov	r0, r3
 800660e:	f7fe fabf 	bl	8004b90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006618:	f003 0304 	and.w	r3, r3, #4
 800661c:	2b00      	cmp	r3, #0
 800661e:	d023      	beq.n	8006668 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	699a      	ldr	r2, [r3, #24]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	18d1      	adds	r1, r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	683a      	ldr	r2, [r7, #0]
 800662c:	6978      	ldr	r0, [r7, #20]
 800662e:	f000 f8d5 	bl	80067dc <prvInsertTimerInActiveList>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d020      	beq.n	800667a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006638:	2300      	movs	r3, #0
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	2300      	movs	r3, #0
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	2100      	movs	r1, #0
 8006642:	6978      	ldr	r0, [r7, #20]
 8006644:	f7ff ff88 	bl	8006558 <xTimerGenericCommand>
 8006648:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d114      	bne.n	800667a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006654:	f383 8811 	msr	BASEPRI, r3
 8006658:	f3bf 8f6f 	isb	sy
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	60fb      	str	r3, [r7, #12]
}
 8006662:	bf00      	nop
 8006664:	bf00      	nop
 8006666:	e7fd      	b.n	8006664 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800666e:	f023 0301 	bic.w	r3, r3, #1
 8006672:	b2da      	uxtb	r2, r3
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	6978      	ldr	r0, [r7, #20]
 8006680:	4798      	blx	r3
}
 8006682:	bf00      	nop
 8006684:	3718      	adds	r7, #24
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	20000e64 	.word	0x20000e64

08006690 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006698:	f107 0308 	add.w	r3, r7, #8
 800669c:	4618      	mov	r0, r3
 800669e:	f000 f859 	bl	8006754 <prvGetNextExpireTime>
 80066a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	4619      	mov	r1, r3
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f000 f805 	bl	80066b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80066ae:	f000 f8d7 	bl	8006860 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80066b2:	bf00      	nop
 80066b4:	e7f0      	b.n	8006698 <prvTimerTask+0x8>
	...

080066b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80066c2:	f7ff fa29 	bl	8005b18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066c6:	f107 0308 	add.w	r3, r7, #8
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 f866 	bl	800679c <prvSampleTimeNow>
 80066d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d130      	bne.n	800673a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10a      	bne.n	80066f4 <prvProcessTimerOrBlockTask+0x3c>
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d806      	bhi.n	80066f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80066e6:	f7ff fa25 	bl	8005b34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80066ea:	68f9      	ldr	r1, [r7, #12]
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f7ff ff81 	bl	80065f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80066f2:	e024      	b.n	800673e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d008      	beq.n	800670c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80066fa:	4b13      	ldr	r3, [pc, #76]	@ (8006748 <prvProcessTimerOrBlockTask+0x90>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d101      	bne.n	8006708 <prvProcessTimerOrBlockTask+0x50>
 8006704:	2301      	movs	r3, #1
 8006706:	e000      	b.n	800670a <prvProcessTimerOrBlockTask+0x52>
 8006708:	2300      	movs	r3, #0
 800670a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800670c:	4b0f      	ldr	r3, [pc, #60]	@ (800674c <prvProcessTimerOrBlockTask+0x94>)
 800670e:	6818      	ldr	r0, [r3, #0]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	4619      	mov	r1, r3
 800671a:	f7fe ff65 	bl	80055e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800671e:	f7ff fa09 	bl	8005b34 <xTaskResumeAll>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10a      	bne.n	800673e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006728:	4b09      	ldr	r3, [pc, #36]	@ (8006750 <prvProcessTimerOrBlockTask+0x98>)
 800672a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800672e:	601a      	str	r2, [r3, #0]
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	f3bf 8f6f 	isb	sy
}
 8006738:	e001      	b.n	800673e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800673a:	f7ff f9fb 	bl	8005b34 <xTaskResumeAll>
}
 800673e:	bf00      	nop
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	20000e68 	.word	0x20000e68
 800674c:	20000e6c 	.word	0x20000e6c
 8006750:	e000ed04 	.word	0xe000ed04

08006754 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800675c:	4b0e      	ldr	r3, [pc, #56]	@ (8006798 <prvGetNextExpireTime+0x44>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <prvGetNextExpireTime+0x16>
 8006766:	2201      	movs	r2, #1
 8006768:	e000      	b.n	800676c <prvGetNextExpireTime+0x18>
 800676a:	2200      	movs	r2, #0
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d105      	bne.n	8006784 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006778:	4b07      	ldr	r3, [pc, #28]	@ (8006798 <prvGetNextExpireTime+0x44>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	60fb      	str	r3, [r7, #12]
 8006782:	e001      	b.n	8006788 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006784:	2300      	movs	r3, #0
 8006786:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006788:	68fb      	ldr	r3, [r7, #12]
}
 800678a:	4618      	mov	r0, r3
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	20000e64 	.word	0x20000e64

0800679c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80067a4:	f7ff fa64 	bl	8005c70 <xTaskGetTickCount>
 80067a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80067aa:	4b0b      	ldr	r3, [pc, #44]	@ (80067d8 <prvSampleTimeNow+0x3c>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d205      	bcs.n	80067c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80067b4:	f000 f93a 	bl	8006a2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	e002      	b.n	80067c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80067c6:	4a04      	ldr	r2, [pc, #16]	@ (80067d8 <prvSampleTimeNow+0x3c>)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80067cc:	68fb      	ldr	r3, [r7, #12]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	20000e74 	.word	0x20000e74

080067dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
 80067e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80067ea:	2300      	movs	r3, #0
 80067ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d812      	bhi.n	8006828 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	1ad2      	subs	r2, r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	429a      	cmp	r2, r3
 800680e:	d302      	bcc.n	8006816 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006810:	2301      	movs	r3, #1
 8006812:	617b      	str	r3, [r7, #20]
 8006814:	e01b      	b.n	800684e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006816:	4b10      	ldr	r3, [pc, #64]	@ (8006858 <prvInsertTimerInActiveList+0x7c>)
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	3304      	adds	r3, #4
 800681e:	4619      	mov	r1, r3
 8006820:	4610      	mov	r0, r2
 8006822:	f7fe f97c 	bl	8004b1e <vListInsert>
 8006826:	e012      	b.n	800684e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	429a      	cmp	r2, r3
 800682e:	d206      	bcs.n	800683e <prvInsertTimerInActiveList+0x62>
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	429a      	cmp	r2, r3
 8006836:	d302      	bcc.n	800683e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006838:	2301      	movs	r3, #1
 800683a:	617b      	str	r3, [r7, #20]
 800683c:	e007      	b.n	800684e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800683e:	4b07      	ldr	r3, [pc, #28]	@ (800685c <prvInsertTimerInActiveList+0x80>)
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	3304      	adds	r3, #4
 8006846:	4619      	mov	r1, r3
 8006848:	4610      	mov	r0, r2
 800684a:	f7fe f968 	bl	8004b1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800684e:	697b      	ldr	r3, [r7, #20]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3718      	adds	r7, #24
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	20000e68 	.word	0x20000e68
 800685c:	20000e64 	.word	0x20000e64

08006860 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b08e      	sub	sp, #56	@ 0x38
 8006864:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006866:	e0ce      	b.n	8006a06 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	da19      	bge.n	80068a2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800686e:	1d3b      	adds	r3, r7, #4
 8006870:	3304      	adds	r3, #4
 8006872:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10b      	bne.n	8006892 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800687a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800687e:	f383 8811 	msr	BASEPRI, r3
 8006882:	f3bf 8f6f 	isb	sy
 8006886:	f3bf 8f4f 	dsb	sy
 800688a:	61fb      	str	r3, [r7, #28]
}
 800688c:	bf00      	nop
 800688e:	bf00      	nop
 8006890:	e7fd      	b.n	800688e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006898:	6850      	ldr	r0, [r2, #4]
 800689a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800689c:	6892      	ldr	r2, [r2, #8]
 800689e:	4611      	mov	r1, r2
 80068a0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f2c0 80ae 	blt.w	8006a06 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80068ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d004      	beq.n	80068c0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b8:	3304      	adds	r3, #4
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fe f968 	bl	8004b90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80068c0:	463b      	mov	r3, r7
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7ff ff6a 	bl	800679c <prvSampleTimeNow>
 80068c8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2b09      	cmp	r3, #9
 80068ce:	f200 8097 	bhi.w	8006a00 <prvProcessReceivedCommands+0x1a0>
 80068d2:	a201      	add	r2, pc, #4	@ (adr r2, 80068d8 <prvProcessReceivedCommands+0x78>)
 80068d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d8:	08006901 	.word	0x08006901
 80068dc:	08006901 	.word	0x08006901
 80068e0:	08006901 	.word	0x08006901
 80068e4:	08006977 	.word	0x08006977
 80068e8:	0800698b 	.word	0x0800698b
 80068ec:	080069d7 	.word	0x080069d7
 80068f0:	08006901 	.word	0x08006901
 80068f4:	08006901 	.word	0x08006901
 80068f8:	08006977 	.word	0x08006977
 80068fc:	0800698b 	.word	0x0800698b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006902:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006906:	f043 0301 	orr.w	r3, r3, #1
 800690a:	b2da      	uxtb	r2, r3
 800690c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800690e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	18d1      	adds	r1, r2, r3
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800691e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006920:	f7ff ff5c 	bl	80067dc <prvInsertTimerInActiveList>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d06c      	beq.n	8006a04 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800692a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006930:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006934:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006938:	f003 0304 	and.w	r3, r3, #4
 800693c:	2b00      	cmp	r3, #0
 800693e:	d061      	beq.n	8006a04 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	441a      	add	r2, r3
 8006948:	2300      	movs	r3, #0
 800694a:	9300      	str	r3, [sp, #0]
 800694c:	2300      	movs	r3, #0
 800694e:	2100      	movs	r1, #0
 8006950:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006952:	f7ff fe01 	bl	8006558 <xTimerGenericCommand>
 8006956:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d152      	bne.n	8006a04 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800695e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006962:	f383 8811 	msr	BASEPRI, r3
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	61bb      	str	r3, [r7, #24]
}
 8006970:	bf00      	nop
 8006972:	bf00      	nop
 8006974:	e7fd      	b.n	8006972 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006978:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800697c:	f023 0301 	bic.w	r3, r3, #1
 8006980:	b2da      	uxtb	r2, r3
 8006982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006984:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006988:	e03d      	b.n	8006a06 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800698a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800698c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006990:	f043 0301 	orr.w	r3, r3, #1
 8006994:	b2da      	uxtb	r2, r3
 8006996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006998:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800699c:	68ba      	ldr	r2, [r7, #8]
 800699e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80069a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10b      	bne.n	80069c2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80069aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ae:	f383 8811 	msr	BASEPRI, r3
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	617b      	str	r3, [r7, #20]
}
 80069bc:	bf00      	nop
 80069be:	bf00      	nop
 80069c0:	e7fd      	b.n	80069be <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80069c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c4:	699a      	ldr	r2, [r3, #24]
 80069c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c8:	18d1      	adds	r1, r2, r3
 80069ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069d0:	f7ff ff04 	bl	80067dc <prvInsertTimerInActiveList>
					break;
 80069d4:	e017      	b.n	8006a06 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80069d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d103      	bne.n	80069ec <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80069e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069e6:	f000 fbe7 	bl	80071b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80069ea:	e00c      	b.n	8006a06 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069f2:	f023 0301 	bic.w	r3, r3, #1
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80069fe:	e002      	b.n	8006a06 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006a00:	bf00      	nop
 8006a02:	e000      	b.n	8006a06 <prvProcessReceivedCommands+0x1a6>
					break;
 8006a04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a06:	4b08      	ldr	r3, [pc, #32]	@ (8006a28 <prvProcessReceivedCommands+0x1c8>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	1d39      	adds	r1, r7, #4
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7fe fbce 	bl	80051b0 <xQueueReceive>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f47f af26 	bne.w	8006868 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006a1c:	bf00      	nop
 8006a1e:	bf00      	nop
 8006a20:	3730      	adds	r7, #48	@ 0x30
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	20000e6c 	.word	0x20000e6c

08006a2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b088      	sub	sp, #32
 8006a30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a32:	e049      	b.n	8006ac8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a34:	4b2e      	ldr	r3, [pc, #184]	@ (8006af0 <prvSwitchTimerLists+0xc4>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a3e:	4b2c      	ldr	r3, [pc, #176]	@ (8006af0 <prvSwitchTimerLists+0xc4>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	3304      	adds	r3, #4
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7fe f89f 	bl	8004b90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a60:	f003 0304 	and.w	r3, r3, #4
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d02f      	beq.n	8006ac8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	4413      	add	r3, r2
 8006a70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d90e      	bls.n	8006a98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a86:	4b1a      	ldr	r3, [pc, #104]	@ (8006af0 <prvSwitchTimerLists+0xc4>)
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	4619      	mov	r1, r3
 8006a90:	4610      	mov	r0, r2
 8006a92:	f7fe f844 	bl	8004b1e <vListInsert>
 8006a96:	e017      	b.n	8006ac8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a98:	2300      	movs	r3, #0
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f7ff fd58 	bl	8006558 <xTimerGenericCommand>
 8006aa8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10b      	bne.n	8006ac8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab4:	f383 8811 	msr	BASEPRI, r3
 8006ab8:	f3bf 8f6f 	isb	sy
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	603b      	str	r3, [r7, #0]
}
 8006ac2:	bf00      	nop
 8006ac4:	bf00      	nop
 8006ac6:	e7fd      	b.n	8006ac4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ac8:	4b09      	ldr	r3, [pc, #36]	@ (8006af0 <prvSwitchTimerLists+0xc4>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1b0      	bne.n	8006a34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006ad2:	4b07      	ldr	r3, [pc, #28]	@ (8006af0 <prvSwitchTimerLists+0xc4>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006ad8:	4b06      	ldr	r3, [pc, #24]	@ (8006af4 <prvSwitchTimerLists+0xc8>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a04      	ldr	r2, [pc, #16]	@ (8006af0 <prvSwitchTimerLists+0xc4>)
 8006ade:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006ae0:	4a04      	ldr	r2, [pc, #16]	@ (8006af4 <prvSwitchTimerLists+0xc8>)
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	6013      	str	r3, [r2, #0]
}
 8006ae6:	bf00      	nop
 8006ae8:	3718      	adds	r7, #24
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	20000e64 	.word	0x20000e64
 8006af4:	20000e68 	.word	0x20000e68

08006af8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006afe:	f000 f96b 	bl	8006dd8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006b02:	4b15      	ldr	r3, [pc, #84]	@ (8006b58 <prvCheckForValidListAndQueue+0x60>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d120      	bne.n	8006b4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006b0a:	4814      	ldr	r0, [pc, #80]	@ (8006b5c <prvCheckForValidListAndQueue+0x64>)
 8006b0c:	f7fd ffb6 	bl	8004a7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006b10:	4813      	ldr	r0, [pc, #76]	@ (8006b60 <prvCheckForValidListAndQueue+0x68>)
 8006b12:	f7fd ffb3 	bl	8004a7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006b16:	4b13      	ldr	r3, [pc, #76]	@ (8006b64 <prvCheckForValidListAndQueue+0x6c>)
 8006b18:	4a10      	ldr	r2, [pc, #64]	@ (8006b5c <prvCheckForValidListAndQueue+0x64>)
 8006b1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006b1c:	4b12      	ldr	r3, [pc, #72]	@ (8006b68 <prvCheckForValidListAndQueue+0x70>)
 8006b1e:	4a10      	ldr	r2, [pc, #64]	@ (8006b60 <prvCheckForValidListAndQueue+0x68>)
 8006b20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006b22:	2300      	movs	r3, #0
 8006b24:	9300      	str	r3, [sp, #0]
 8006b26:	4b11      	ldr	r3, [pc, #68]	@ (8006b6c <prvCheckForValidListAndQueue+0x74>)
 8006b28:	4a11      	ldr	r2, [pc, #68]	@ (8006b70 <prvCheckForValidListAndQueue+0x78>)
 8006b2a:	2110      	movs	r1, #16
 8006b2c:	200a      	movs	r0, #10
 8006b2e:	f7fe f8c3 	bl	8004cb8 <xQueueGenericCreateStatic>
 8006b32:	4603      	mov	r3, r0
 8006b34:	4a08      	ldr	r2, [pc, #32]	@ (8006b58 <prvCheckForValidListAndQueue+0x60>)
 8006b36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006b38:	4b07      	ldr	r3, [pc, #28]	@ (8006b58 <prvCheckForValidListAndQueue+0x60>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d005      	beq.n	8006b4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006b40:	4b05      	ldr	r3, [pc, #20]	@ (8006b58 <prvCheckForValidListAndQueue+0x60>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	490b      	ldr	r1, [pc, #44]	@ (8006b74 <prvCheckForValidListAndQueue+0x7c>)
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fe fd24 	bl	8005594 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b4c:	f000 f976 	bl	8006e3c <vPortExitCritical>
}
 8006b50:	bf00      	nop
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	20000e6c 	.word	0x20000e6c
 8006b5c:	20000e3c 	.word	0x20000e3c
 8006b60:	20000e50 	.word	0x20000e50
 8006b64:	20000e64 	.word	0x20000e64
 8006b68:	20000e68 	.word	0x20000e68
 8006b6c:	20000f18 	.word	0x20000f18
 8006b70:	20000e78 	.word	0x20000e78
 8006b74:	080085d0 	.word	0x080085d0

08006b78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	3b04      	subs	r3, #4
 8006b88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006b90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	3b04      	subs	r3, #4
 8006b96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	f023 0201 	bic.w	r2, r3, #1
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	3b04      	subs	r3, #4
 8006ba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ba8:	4a0c      	ldr	r2, [pc, #48]	@ (8006bdc <pxPortInitialiseStack+0x64>)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	3b14      	subs	r3, #20
 8006bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	3b04      	subs	r3, #4
 8006bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f06f 0202 	mvn.w	r2, #2
 8006bc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	3b20      	subs	r3, #32
 8006bcc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006bce:	68fb      	ldr	r3, [r7, #12]
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3714      	adds	r7, #20
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr
 8006bdc:	08006be1 	.word	0x08006be1

08006be0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006be6:	2300      	movs	r3, #0
 8006be8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006bea:	4b13      	ldr	r3, [pc, #76]	@ (8006c38 <prvTaskExitError+0x58>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bf2:	d00b      	beq.n	8006c0c <prvTaskExitError+0x2c>
	__asm volatile
 8006bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf8:	f383 8811 	msr	BASEPRI, r3
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	60fb      	str	r3, [r7, #12]
}
 8006c06:	bf00      	nop
 8006c08:	bf00      	nop
 8006c0a:	e7fd      	b.n	8006c08 <prvTaskExitError+0x28>
	__asm volatile
 8006c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c10:	f383 8811 	msr	BASEPRI, r3
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	60bb      	str	r3, [r7, #8]
}
 8006c1e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c20:	bf00      	nop
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d0fc      	beq.n	8006c22 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c28:	bf00      	nop
 8006c2a:	bf00      	nop
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	20000020 	.word	0x20000020
 8006c3c:	00000000 	.word	0x00000000

08006c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c40:	4b07      	ldr	r3, [pc, #28]	@ (8006c60 <pxCurrentTCBConst2>)
 8006c42:	6819      	ldr	r1, [r3, #0]
 8006c44:	6808      	ldr	r0, [r1, #0]
 8006c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c4a:	f380 8809 	msr	PSP, r0
 8006c4e:	f3bf 8f6f 	isb	sy
 8006c52:	f04f 0000 	mov.w	r0, #0
 8006c56:	f380 8811 	msr	BASEPRI, r0
 8006c5a:	4770      	bx	lr
 8006c5c:	f3af 8000 	nop.w

08006c60 <pxCurrentTCBConst2>:
 8006c60:	2000093c 	.word	0x2000093c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c64:	bf00      	nop
 8006c66:	bf00      	nop

08006c68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c68:	4808      	ldr	r0, [pc, #32]	@ (8006c8c <prvPortStartFirstTask+0x24>)
 8006c6a:	6800      	ldr	r0, [r0, #0]
 8006c6c:	6800      	ldr	r0, [r0, #0]
 8006c6e:	f380 8808 	msr	MSP, r0
 8006c72:	f04f 0000 	mov.w	r0, #0
 8006c76:	f380 8814 	msr	CONTROL, r0
 8006c7a:	b662      	cpsie	i
 8006c7c:	b661      	cpsie	f
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	f3bf 8f6f 	isb	sy
 8006c86:	df00      	svc	0
 8006c88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c8a:	bf00      	nop
 8006c8c:	e000ed08 	.word	0xe000ed08

08006c90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006c96:	4b47      	ldr	r3, [pc, #284]	@ (8006db4 <xPortStartScheduler+0x124>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a47      	ldr	r2, [pc, #284]	@ (8006db8 <xPortStartScheduler+0x128>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d10b      	bne.n	8006cb8 <xPortStartScheduler+0x28>
	__asm volatile
 8006ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	60fb      	str	r3, [r7, #12]
}
 8006cb2:	bf00      	nop
 8006cb4:	bf00      	nop
 8006cb6:	e7fd      	b.n	8006cb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006cb8:	4b3e      	ldr	r3, [pc, #248]	@ (8006db4 <xPortStartScheduler+0x124>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a3f      	ldr	r2, [pc, #252]	@ (8006dbc <xPortStartScheduler+0x12c>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d10b      	bne.n	8006cda <xPortStartScheduler+0x4a>
	__asm volatile
 8006cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc6:	f383 8811 	msr	BASEPRI, r3
 8006cca:	f3bf 8f6f 	isb	sy
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	613b      	str	r3, [r7, #16]
}
 8006cd4:	bf00      	nop
 8006cd6:	bf00      	nop
 8006cd8:	e7fd      	b.n	8006cd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006cda:	4b39      	ldr	r3, [pc, #228]	@ (8006dc0 <xPortStartScheduler+0x130>)
 8006cdc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	22ff      	movs	r2, #255	@ 0xff
 8006cea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006cf4:	78fb      	ldrb	r3, [r7, #3]
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006cfc:	b2da      	uxtb	r2, r3
 8006cfe:	4b31      	ldr	r3, [pc, #196]	@ (8006dc4 <xPortStartScheduler+0x134>)
 8006d00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d02:	4b31      	ldr	r3, [pc, #196]	@ (8006dc8 <xPortStartScheduler+0x138>)
 8006d04:	2207      	movs	r2, #7
 8006d06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d08:	e009      	b.n	8006d1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006d0a:	4b2f      	ldr	r3, [pc, #188]	@ (8006dc8 <xPortStartScheduler+0x138>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	4a2d      	ldr	r2, [pc, #180]	@ (8006dc8 <xPortStartScheduler+0x138>)
 8006d12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d14:	78fb      	ldrb	r3, [r7, #3]
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	005b      	lsls	r3, r3, #1
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d1e:	78fb      	ldrb	r3, [r7, #3]
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d26:	2b80      	cmp	r3, #128	@ 0x80
 8006d28:	d0ef      	beq.n	8006d0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d2a:	4b27      	ldr	r3, [pc, #156]	@ (8006dc8 <xPortStartScheduler+0x138>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f1c3 0307 	rsb	r3, r3, #7
 8006d32:	2b04      	cmp	r3, #4
 8006d34:	d00b      	beq.n	8006d4e <xPortStartScheduler+0xbe>
	__asm volatile
 8006d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d3a:	f383 8811 	msr	BASEPRI, r3
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	60bb      	str	r3, [r7, #8]
}
 8006d48:	bf00      	nop
 8006d4a:	bf00      	nop
 8006d4c:	e7fd      	b.n	8006d4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8006dc8 <xPortStartScheduler+0x138>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	021b      	lsls	r3, r3, #8
 8006d54:	4a1c      	ldr	r2, [pc, #112]	@ (8006dc8 <xPortStartScheduler+0x138>)
 8006d56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d58:	4b1b      	ldr	r3, [pc, #108]	@ (8006dc8 <xPortStartScheduler+0x138>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006d60:	4a19      	ldr	r2, [pc, #100]	@ (8006dc8 <xPortStartScheduler+0x138>)
 8006d62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	b2da      	uxtb	r2, r3
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d6c:	4b17      	ldr	r3, [pc, #92]	@ (8006dcc <xPortStartScheduler+0x13c>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a16      	ldr	r2, [pc, #88]	@ (8006dcc <xPortStartScheduler+0x13c>)
 8006d72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006d76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d78:	4b14      	ldr	r3, [pc, #80]	@ (8006dcc <xPortStartScheduler+0x13c>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a13      	ldr	r2, [pc, #76]	@ (8006dcc <xPortStartScheduler+0x13c>)
 8006d7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006d82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d84:	f000 f8da 	bl	8006f3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d88:	4b11      	ldr	r3, [pc, #68]	@ (8006dd0 <xPortStartScheduler+0x140>)
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006d8e:	f000 f8f9 	bl	8006f84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d92:	4b10      	ldr	r3, [pc, #64]	@ (8006dd4 <xPortStartScheduler+0x144>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a0f      	ldr	r2, [pc, #60]	@ (8006dd4 <xPortStartScheduler+0x144>)
 8006d98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006d9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d9e:	f7ff ff63 	bl	8006c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006da2:	f7ff f82f 	bl	8005e04 <vTaskSwitchContext>
	prvTaskExitError();
 8006da6:	f7ff ff1b 	bl	8006be0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3718      	adds	r7, #24
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	e000ed00 	.word	0xe000ed00
 8006db8:	410fc271 	.word	0x410fc271
 8006dbc:	410fc270 	.word	0x410fc270
 8006dc0:	e000e400 	.word	0xe000e400
 8006dc4:	20000f68 	.word	0x20000f68
 8006dc8:	20000f6c 	.word	0x20000f6c
 8006dcc:	e000ed20 	.word	0xe000ed20
 8006dd0:	20000020 	.word	0x20000020
 8006dd4:	e000ef34 	.word	0xe000ef34

08006dd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8006dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de2:	f383 8811 	msr	BASEPRI, r3
 8006de6:	f3bf 8f6f 	isb	sy
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	607b      	str	r3, [r7, #4]
}
 8006df0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006df2:	4b10      	ldr	r3, [pc, #64]	@ (8006e34 <vPortEnterCritical+0x5c>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	3301      	adds	r3, #1
 8006df8:	4a0e      	ldr	r2, [pc, #56]	@ (8006e34 <vPortEnterCritical+0x5c>)
 8006dfa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8006e34 <vPortEnterCritical+0x5c>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d110      	bne.n	8006e26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e04:	4b0c      	ldr	r3, [pc, #48]	@ (8006e38 <vPortEnterCritical+0x60>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00b      	beq.n	8006e26 <vPortEnterCritical+0x4e>
	__asm volatile
 8006e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	603b      	str	r3, [r7, #0]
}
 8006e20:	bf00      	nop
 8006e22:	bf00      	nop
 8006e24:	e7fd      	b.n	8006e22 <vPortEnterCritical+0x4a>
	}
}
 8006e26:	bf00      	nop
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	20000020 	.word	0x20000020
 8006e38:	e000ed04 	.word	0xe000ed04

08006e3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e42:	4b12      	ldr	r3, [pc, #72]	@ (8006e8c <vPortExitCritical+0x50>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10b      	bne.n	8006e62 <vPortExitCritical+0x26>
	__asm volatile
 8006e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e4e:	f383 8811 	msr	BASEPRI, r3
 8006e52:	f3bf 8f6f 	isb	sy
 8006e56:	f3bf 8f4f 	dsb	sy
 8006e5a:	607b      	str	r3, [r7, #4]
}
 8006e5c:	bf00      	nop
 8006e5e:	bf00      	nop
 8006e60:	e7fd      	b.n	8006e5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006e62:	4b0a      	ldr	r3, [pc, #40]	@ (8006e8c <vPortExitCritical+0x50>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3b01      	subs	r3, #1
 8006e68:	4a08      	ldr	r2, [pc, #32]	@ (8006e8c <vPortExitCritical+0x50>)
 8006e6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e6c:	4b07      	ldr	r3, [pc, #28]	@ (8006e8c <vPortExitCritical+0x50>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d105      	bne.n	8006e80 <vPortExitCritical+0x44>
 8006e74:	2300      	movs	r3, #0
 8006e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	f383 8811 	msr	BASEPRI, r3
}
 8006e7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr
 8006e8c:	20000020 	.word	0x20000020

08006e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e90:	f3ef 8009 	mrs	r0, PSP
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	4b15      	ldr	r3, [pc, #84]	@ (8006ef0 <pxCurrentTCBConst>)
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	f01e 0f10 	tst.w	lr, #16
 8006ea0:	bf08      	it	eq
 8006ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eaa:	6010      	str	r0, [r2, #0]
 8006eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006eb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006eb4:	f380 8811 	msr	BASEPRI, r0
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f7fe ffa0 	bl	8005e04 <vTaskSwitchContext>
 8006ec4:	f04f 0000 	mov.w	r0, #0
 8006ec8:	f380 8811 	msr	BASEPRI, r0
 8006ecc:	bc09      	pop	{r0, r3}
 8006ece:	6819      	ldr	r1, [r3, #0]
 8006ed0:	6808      	ldr	r0, [r1, #0]
 8006ed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed6:	f01e 0f10 	tst.w	lr, #16
 8006eda:	bf08      	it	eq
 8006edc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ee0:	f380 8809 	msr	PSP, r0
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	f3af 8000 	nop.w

08006ef0 <pxCurrentTCBConst>:
 8006ef0:	2000093c 	.word	0x2000093c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ef4:	bf00      	nop
 8006ef6:	bf00      	nop

08006ef8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
	__asm volatile
 8006efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f02:	f383 8811 	msr	BASEPRI, r3
 8006f06:	f3bf 8f6f 	isb	sy
 8006f0a:	f3bf 8f4f 	dsb	sy
 8006f0e:	607b      	str	r3, [r7, #4]
}
 8006f10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006f12:	f7fe febd 	bl	8005c90 <xTaskIncrementTick>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d003      	beq.n	8006f24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f1c:	4b06      	ldr	r3, [pc, #24]	@ (8006f38 <xPortSysTickHandler+0x40>)
 8006f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	2300      	movs	r3, #0
 8006f26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	f383 8811 	msr	BASEPRI, r3
}
 8006f2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f30:	bf00      	nop
 8006f32:	3708      	adds	r7, #8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	e000ed04 	.word	0xe000ed04

08006f3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f40:	4b0b      	ldr	r3, [pc, #44]	@ (8006f70 <vPortSetupTimerInterrupt+0x34>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f46:	4b0b      	ldr	r3, [pc, #44]	@ (8006f74 <vPortSetupTimerInterrupt+0x38>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006f78 <vPortSetupTimerInterrupt+0x3c>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a0a      	ldr	r2, [pc, #40]	@ (8006f7c <vPortSetupTimerInterrupt+0x40>)
 8006f52:	fba2 2303 	umull	r2, r3, r2, r3
 8006f56:	099b      	lsrs	r3, r3, #6
 8006f58:	4a09      	ldr	r2, [pc, #36]	@ (8006f80 <vPortSetupTimerInterrupt+0x44>)
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f5e:	4b04      	ldr	r3, [pc, #16]	@ (8006f70 <vPortSetupTimerInterrupt+0x34>)
 8006f60:	2207      	movs	r2, #7
 8006f62:	601a      	str	r2, [r3, #0]
}
 8006f64:	bf00      	nop
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	e000e010 	.word	0xe000e010
 8006f74:	e000e018 	.word	0xe000e018
 8006f78:	20000008 	.word	0x20000008
 8006f7c:	10624dd3 	.word	0x10624dd3
 8006f80:	e000e014 	.word	0xe000e014

08006f84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006f84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006f94 <vPortEnableVFP+0x10>
 8006f88:	6801      	ldr	r1, [r0, #0]
 8006f8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006f8e:	6001      	str	r1, [r0, #0]
 8006f90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006f92:	bf00      	nop
 8006f94:	e000ed88 	.word	0xe000ed88

08006f98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f9e:	f3ef 8305 	mrs	r3, IPSR
 8006fa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2b0f      	cmp	r3, #15
 8006fa8:	d915      	bls.n	8006fd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006faa:	4a18      	ldr	r2, [pc, #96]	@ (800700c <vPortValidateInterruptPriority+0x74>)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4413      	add	r3, r2
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006fb4:	4b16      	ldr	r3, [pc, #88]	@ (8007010 <vPortValidateInterruptPriority+0x78>)
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	7afa      	ldrb	r2, [r7, #11]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d20b      	bcs.n	8006fd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	607b      	str	r3, [r7, #4]
}
 8006fd0:	bf00      	nop
 8006fd2:	bf00      	nop
 8006fd4:	e7fd      	b.n	8006fd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8007014 <vPortValidateInterruptPriority+0x7c>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006fde:	4b0e      	ldr	r3, [pc, #56]	@ (8007018 <vPortValidateInterruptPriority+0x80>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d90b      	bls.n	8006ffe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fea:	f383 8811 	msr	BASEPRI, r3
 8006fee:	f3bf 8f6f 	isb	sy
 8006ff2:	f3bf 8f4f 	dsb	sy
 8006ff6:	603b      	str	r3, [r7, #0]
}
 8006ff8:	bf00      	nop
 8006ffa:	bf00      	nop
 8006ffc:	e7fd      	b.n	8006ffa <vPortValidateInterruptPriority+0x62>
	}
 8006ffe:	bf00      	nop
 8007000:	3714      	adds	r7, #20
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	e000e3f0 	.word	0xe000e3f0
 8007010:	20000f68 	.word	0x20000f68
 8007014:	e000ed0c 	.word	0xe000ed0c
 8007018:	20000f6c 	.word	0x20000f6c

0800701c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b08a      	sub	sp, #40	@ 0x28
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007024:	2300      	movs	r3, #0
 8007026:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007028:	f7fe fd76 	bl	8005b18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800702c:	4b5c      	ldr	r3, [pc, #368]	@ (80071a0 <pvPortMalloc+0x184>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d101      	bne.n	8007038 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007034:	f000 f924 	bl	8007280 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007038:	4b5a      	ldr	r3, [pc, #360]	@ (80071a4 <pvPortMalloc+0x188>)
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4013      	ands	r3, r2
 8007040:	2b00      	cmp	r3, #0
 8007042:	f040 8095 	bne.w	8007170 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d01e      	beq.n	800708a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800704c:	2208      	movs	r2, #8
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4413      	add	r3, r2
 8007052:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f003 0307 	and.w	r3, r3, #7
 800705a:	2b00      	cmp	r3, #0
 800705c:	d015      	beq.n	800708a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f023 0307 	bic.w	r3, r3, #7
 8007064:	3308      	adds	r3, #8
 8007066:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f003 0307 	and.w	r3, r3, #7
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00b      	beq.n	800708a <pvPortMalloc+0x6e>
	__asm volatile
 8007072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007076:	f383 8811 	msr	BASEPRI, r3
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	617b      	str	r3, [r7, #20]
}
 8007084:	bf00      	nop
 8007086:	bf00      	nop
 8007088:	e7fd      	b.n	8007086 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d06f      	beq.n	8007170 <pvPortMalloc+0x154>
 8007090:	4b45      	ldr	r3, [pc, #276]	@ (80071a8 <pvPortMalloc+0x18c>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	429a      	cmp	r2, r3
 8007098:	d86a      	bhi.n	8007170 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800709a:	4b44      	ldr	r3, [pc, #272]	@ (80071ac <pvPortMalloc+0x190>)
 800709c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800709e:	4b43      	ldr	r3, [pc, #268]	@ (80071ac <pvPortMalloc+0x190>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070a4:	e004      	b.n	80070b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80070a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80070aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d903      	bls.n	80070c2 <pvPortMalloc+0xa6>
 80070ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1f1      	bne.n	80070a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80070c2:	4b37      	ldr	r3, [pc, #220]	@ (80071a0 <pvPortMalloc+0x184>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d051      	beq.n	8007170 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2208      	movs	r2, #8
 80070d2:	4413      	add	r3, r2
 80070d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80070d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	6a3b      	ldr	r3, [r7, #32]
 80070dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80070de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e0:	685a      	ldr	r2, [r3, #4]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	1ad2      	subs	r2, r2, r3
 80070e6:	2308      	movs	r3, #8
 80070e8:	005b      	lsls	r3, r3, #1
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d920      	bls.n	8007130 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80070ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4413      	add	r3, r2
 80070f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	f003 0307 	and.w	r3, r3, #7
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00b      	beq.n	8007118 <pvPortMalloc+0xfc>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	613b      	str	r3, [r7, #16]
}
 8007112:	bf00      	nop
 8007114:	bf00      	nop
 8007116:	e7fd      	b.n	8007114 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	1ad2      	subs	r2, r2, r3
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800712a:	69b8      	ldr	r0, [r7, #24]
 800712c:	f000 f90a 	bl	8007344 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007130:	4b1d      	ldr	r3, [pc, #116]	@ (80071a8 <pvPortMalloc+0x18c>)
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	4a1b      	ldr	r2, [pc, #108]	@ (80071a8 <pvPortMalloc+0x18c>)
 800713c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800713e:	4b1a      	ldr	r3, [pc, #104]	@ (80071a8 <pvPortMalloc+0x18c>)
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	4b1b      	ldr	r3, [pc, #108]	@ (80071b0 <pvPortMalloc+0x194>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	429a      	cmp	r2, r3
 8007148:	d203      	bcs.n	8007152 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800714a:	4b17      	ldr	r3, [pc, #92]	@ (80071a8 <pvPortMalloc+0x18c>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a18      	ldr	r2, [pc, #96]	@ (80071b0 <pvPortMalloc+0x194>)
 8007150:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007154:	685a      	ldr	r2, [r3, #4]
 8007156:	4b13      	ldr	r3, [pc, #76]	@ (80071a4 <pvPortMalloc+0x188>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	431a      	orrs	r2, r3
 800715c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007162:	2200      	movs	r2, #0
 8007164:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007166:	4b13      	ldr	r3, [pc, #76]	@ (80071b4 <pvPortMalloc+0x198>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3301      	adds	r3, #1
 800716c:	4a11      	ldr	r2, [pc, #68]	@ (80071b4 <pvPortMalloc+0x198>)
 800716e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007170:	f7fe fce0 	bl	8005b34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	f003 0307 	and.w	r3, r3, #7
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00b      	beq.n	8007196 <pvPortMalloc+0x17a>
	__asm volatile
 800717e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007182:	f383 8811 	msr	BASEPRI, r3
 8007186:	f3bf 8f6f 	isb	sy
 800718a:	f3bf 8f4f 	dsb	sy
 800718e:	60fb      	str	r3, [r7, #12]
}
 8007190:	bf00      	nop
 8007192:	bf00      	nop
 8007194:	e7fd      	b.n	8007192 <pvPortMalloc+0x176>
	return pvReturn;
 8007196:	69fb      	ldr	r3, [r7, #28]
}
 8007198:	4618      	mov	r0, r3
 800719a:	3728      	adds	r7, #40	@ 0x28
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	20001b78 	.word	0x20001b78
 80071a4:	20001b8c 	.word	0x20001b8c
 80071a8:	20001b7c 	.word	0x20001b7c
 80071ac:	20001b70 	.word	0x20001b70
 80071b0:	20001b80 	.word	0x20001b80
 80071b4:	20001b84 	.word	0x20001b84

080071b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d04f      	beq.n	800726a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80071ca:	2308      	movs	r3, #8
 80071cc:	425b      	negs	r3, r3
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	4413      	add	r3, r2
 80071d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	4b25      	ldr	r3, [pc, #148]	@ (8007274 <vPortFree+0xbc>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4013      	ands	r3, r2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10b      	bne.n	80071fe <vPortFree+0x46>
	__asm volatile
 80071e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ea:	f383 8811 	msr	BASEPRI, r3
 80071ee:	f3bf 8f6f 	isb	sy
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	60fb      	str	r3, [r7, #12]
}
 80071f8:	bf00      	nop
 80071fa:	bf00      	nop
 80071fc:	e7fd      	b.n	80071fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00b      	beq.n	800721e <vPortFree+0x66>
	__asm volatile
 8007206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800720a:	f383 8811 	msr	BASEPRI, r3
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f3bf 8f4f 	dsb	sy
 8007216:	60bb      	str	r3, [r7, #8]
}
 8007218:	bf00      	nop
 800721a:	bf00      	nop
 800721c:	e7fd      	b.n	800721a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	685a      	ldr	r2, [r3, #4]
 8007222:	4b14      	ldr	r3, [pc, #80]	@ (8007274 <vPortFree+0xbc>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4013      	ands	r3, r2
 8007228:	2b00      	cmp	r3, #0
 800722a:	d01e      	beq.n	800726a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d11a      	bne.n	800726a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	685a      	ldr	r2, [r3, #4]
 8007238:	4b0e      	ldr	r3, [pc, #56]	@ (8007274 <vPortFree+0xbc>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	43db      	mvns	r3, r3
 800723e:	401a      	ands	r2, r3
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007244:	f7fe fc68 	bl	8005b18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	685a      	ldr	r2, [r3, #4]
 800724c:	4b0a      	ldr	r3, [pc, #40]	@ (8007278 <vPortFree+0xc0>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4413      	add	r3, r2
 8007252:	4a09      	ldr	r2, [pc, #36]	@ (8007278 <vPortFree+0xc0>)
 8007254:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007256:	6938      	ldr	r0, [r7, #16]
 8007258:	f000 f874 	bl	8007344 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800725c:	4b07      	ldr	r3, [pc, #28]	@ (800727c <vPortFree+0xc4>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3301      	adds	r3, #1
 8007262:	4a06      	ldr	r2, [pc, #24]	@ (800727c <vPortFree+0xc4>)
 8007264:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007266:	f7fe fc65 	bl	8005b34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800726a:	bf00      	nop
 800726c:	3718      	adds	r7, #24
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	20001b8c 	.word	0x20001b8c
 8007278:	20001b7c 	.word	0x20001b7c
 800727c:	20001b88 	.word	0x20001b88

08007280 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007286:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800728a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800728c:	4b27      	ldr	r3, [pc, #156]	@ (800732c <prvHeapInit+0xac>)
 800728e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f003 0307 	and.w	r3, r3, #7
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00c      	beq.n	80072b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	3307      	adds	r3, #7
 800729e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f023 0307 	bic.w	r3, r3, #7
 80072a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80072a8:	68ba      	ldr	r2, [r7, #8]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	4a1f      	ldr	r2, [pc, #124]	@ (800732c <prvHeapInit+0xac>)
 80072b0:	4413      	add	r3, r2
 80072b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80072b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007330 <prvHeapInit+0xb0>)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80072be:	4b1c      	ldr	r3, [pc, #112]	@ (8007330 <prvHeapInit+0xb0>)
 80072c0:	2200      	movs	r2, #0
 80072c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	4413      	add	r3, r2
 80072ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80072cc:	2208      	movs	r2, #8
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	1a9b      	subs	r3, r3, r2
 80072d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f023 0307 	bic.w	r3, r3, #7
 80072da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	4a15      	ldr	r2, [pc, #84]	@ (8007334 <prvHeapInit+0xb4>)
 80072e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80072e2:	4b14      	ldr	r3, [pc, #80]	@ (8007334 <prvHeapInit+0xb4>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2200      	movs	r2, #0
 80072e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80072ea:	4b12      	ldr	r3, [pc, #72]	@ (8007334 <prvHeapInit+0xb4>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2200      	movs	r2, #0
 80072f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	1ad2      	subs	r2, r2, r3
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007300:	4b0c      	ldr	r3, [pc, #48]	@ (8007334 <prvHeapInit+0xb4>)
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	4a0a      	ldr	r2, [pc, #40]	@ (8007338 <prvHeapInit+0xb8>)
 800730e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	4a09      	ldr	r2, [pc, #36]	@ (800733c <prvHeapInit+0xbc>)
 8007316:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007318:	4b09      	ldr	r3, [pc, #36]	@ (8007340 <prvHeapInit+0xc0>)
 800731a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800731e:	601a      	str	r2, [r3, #0]
}
 8007320:	bf00      	nop
 8007322:	3714      	adds	r7, #20
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr
 800732c:	20000f70 	.word	0x20000f70
 8007330:	20001b70 	.word	0x20001b70
 8007334:	20001b78 	.word	0x20001b78
 8007338:	20001b80 	.word	0x20001b80
 800733c:	20001b7c 	.word	0x20001b7c
 8007340:	20001b8c 	.word	0x20001b8c

08007344 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800734c:	4b28      	ldr	r3, [pc, #160]	@ (80073f0 <prvInsertBlockIntoFreeList+0xac>)
 800734e:	60fb      	str	r3, [r7, #12]
 8007350:	e002      	b.n	8007358 <prvInsertBlockIntoFreeList+0x14>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	60fb      	str	r3, [r7, #12]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	429a      	cmp	r2, r3
 8007360:	d8f7      	bhi.n	8007352 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	68ba      	ldr	r2, [r7, #8]
 800736c:	4413      	add	r3, r2
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	429a      	cmp	r2, r3
 8007372:	d108      	bne.n	8007386 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	685a      	ldr	r2, [r3, #4]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	441a      	add	r2, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	441a      	add	r2, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	429a      	cmp	r2, r3
 8007398:	d118      	bne.n	80073cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	4b15      	ldr	r3, [pc, #84]	@ (80073f4 <prvInsertBlockIntoFreeList+0xb0>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d00d      	beq.n	80073c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685a      	ldr	r2, [r3, #4]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	441a      	add	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	601a      	str	r2, [r3, #0]
 80073c0:	e008      	b.n	80073d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80073c2:	4b0c      	ldr	r3, [pc, #48]	@ (80073f4 <prvInsertBlockIntoFreeList+0xb0>)
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	601a      	str	r2, [r3, #0]
 80073ca:	e003      	b.n	80073d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d002      	beq.n	80073e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073e2:	bf00      	nop
 80073e4:	3714      	adds	r7, #20
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	20001b70 	.word	0x20001b70
 80073f4:	20001b78 	.word	0x20001b78

080073f8 <std>:
 80073f8:	2300      	movs	r3, #0
 80073fa:	b510      	push	{r4, lr}
 80073fc:	4604      	mov	r4, r0
 80073fe:	e9c0 3300 	strd	r3, r3, [r0]
 8007402:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007406:	6083      	str	r3, [r0, #8]
 8007408:	8181      	strh	r1, [r0, #12]
 800740a:	6643      	str	r3, [r0, #100]	@ 0x64
 800740c:	81c2      	strh	r2, [r0, #14]
 800740e:	6183      	str	r3, [r0, #24]
 8007410:	4619      	mov	r1, r3
 8007412:	2208      	movs	r2, #8
 8007414:	305c      	adds	r0, #92	@ 0x5c
 8007416:	f000 f9f9 	bl	800780c <memset>
 800741a:	4b0d      	ldr	r3, [pc, #52]	@ (8007450 <std+0x58>)
 800741c:	6263      	str	r3, [r4, #36]	@ 0x24
 800741e:	4b0d      	ldr	r3, [pc, #52]	@ (8007454 <std+0x5c>)
 8007420:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007422:	4b0d      	ldr	r3, [pc, #52]	@ (8007458 <std+0x60>)
 8007424:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007426:	4b0d      	ldr	r3, [pc, #52]	@ (800745c <std+0x64>)
 8007428:	6323      	str	r3, [r4, #48]	@ 0x30
 800742a:	4b0d      	ldr	r3, [pc, #52]	@ (8007460 <std+0x68>)
 800742c:	6224      	str	r4, [r4, #32]
 800742e:	429c      	cmp	r4, r3
 8007430:	d006      	beq.n	8007440 <std+0x48>
 8007432:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007436:	4294      	cmp	r4, r2
 8007438:	d002      	beq.n	8007440 <std+0x48>
 800743a:	33d0      	adds	r3, #208	@ 0xd0
 800743c:	429c      	cmp	r4, r3
 800743e:	d105      	bne.n	800744c <std+0x54>
 8007440:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007448:	f000 bab6 	b.w	80079b8 <__retarget_lock_init_recursive>
 800744c:	bd10      	pop	{r4, pc}
 800744e:	bf00      	nop
 8007450:	0800765d 	.word	0x0800765d
 8007454:	0800767f 	.word	0x0800767f
 8007458:	080076b7 	.word	0x080076b7
 800745c:	080076db 	.word	0x080076db
 8007460:	20001b90 	.word	0x20001b90

08007464 <stdio_exit_handler>:
 8007464:	4a02      	ldr	r2, [pc, #8]	@ (8007470 <stdio_exit_handler+0xc>)
 8007466:	4903      	ldr	r1, [pc, #12]	@ (8007474 <stdio_exit_handler+0x10>)
 8007468:	4803      	ldr	r0, [pc, #12]	@ (8007478 <stdio_exit_handler+0x14>)
 800746a:	f000 b869 	b.w	8007540 <_fwalk_sglue>
 800746e:	bf00      	nop
 8007470:	20000024 	.word	0x20000024
 8007474:	08008271 	.word	0x08008271
 8007478:	20000034 	.word	0x20000034

0800747c <cleanup_stdio>:
 800747c:	6841      	ldr	r1, [r0, #4]
 800747e:	4b0c      	ldr	r3, [pc, #48]	@ (80074b0 <cleanup_stdio+0x34>)
 8007480:	4299      	cmp	r1, r3
 8007482:	b510      	push	{r4, lr}
 8007484:	4604      	mov	r4, r0
 8007486:	d001      	beq.n	800748c <cleanup_stdio+0x10>
 8007488:	f000 fef2 	bl	8008270 <_fflush_r>
 800748c:	68a1      	ldr	r1, [r4, #8]
 800748e:	4b09      	ldr	r3, [pc, #36]	@ (80074b4 <cleanup_stdio+0x38>)
 8007490:	4299      	cmp	r1, r3
 8007492:	d002      	beq.n	800749a <cleanup_stdio+0x1e>
 8007494:	4620      	mov	r0, r4
 8007496:	f000 feeb 	bl	8008270 <_fflush_r>
 800749a:	68e1      	ldr	r1, [r4, #12]
 800749c:	4b06      	ldr	r3, [pc, #24]	@ (80074b8 <cleanup_stdio+0x3c>)
 800749e:	4299      	cmp	r1, r3
 80074a0:	d004      	beq.n	80074ac <cleanup_stdio+0x30>
 80074a2:	4620      	mov	r0, r4
 80074a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074a8:	f000 bee2 	b.w	8008270 <_fflush_r>
 80074ac:	bd10      	pop	{r4, pc}
 80074ae:	bf00      	nop
 80074b0:	20001b90 	.word	0x20001b90
 80074b4:	20001bf8 	.word	0x20001bf8
 80074b8:	20001c60 	.word	0x20001c60

080074bc <global_stdio_init.part.0>:
 80074bc:	b510      	push	{r4, lr}
 80074be:	4b0b      	ldr	r3, [pc, #44]	@ (80074ec <global_stdio_init.part.0+0x30>)
 80074c0:	4c0b      	ldr	r4, [pc, #44]	@ (80074f0 <global_stdio_init.part.0+0x34>)
 80074c2:	4a0c      	ldr	r2, [pc, #48]	@ (80074f4 <global_stdio_init.part.0+0x38>)
 80074c4:	601a      	str	r2, [r3, #0]
 80074c6:	4620      	mov	r0, r4
 80074c8:	2200      	movs	r2, #0
 80074ca:	2104      	movs	r1, #4
 80074cc:	f7ff ff94 	bl	80073f8 <std>
 80074d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80074d4:	2201      	movs	r2, #1
 80074d6:	2109      	movs	r1, #9
 80074d8:	f7ff ff8e 	bl	80073f8 <std>
 80074dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80074e0:	2202      	movs	r2, #2
 80074e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074e6:	2112      	movs	r1, #18
 80074e8:	f7ff bf86 	b.w	80073f8 <std>
 80074ec:	20001cc8 	.word	0x20001cc8
 80074f0:	20001b90 	.word	0x20001b90
 80074f4:	08007465 	.word	0x08007465

080074f8 <__sfp_lock_acquire>:
 80074f8:	4801      	ldr	r0, [pc, #4]	@ (8007500 <__sfp_lock_acquire+0x8>)
 80074fa:	f000 ba5e 	b.w	80079ba <__retarget_lock_acquire_recursive>
 80074fe:	bf00      	nop
 8007500:	20001cd1 	.word	0x20001cd1

08007504 <__sfp_lock_release>:
 8007504:	4801      	ldr	r0, [pc, #4]	@ (800750c <__sfp_lock_release+0x8>)
 8007506:	f000 ba59 	b.w	80079bc <__retarget_lock_release_recursive>
 800750a:	bf00      	nop
 800750c:	20001cd1 	.word	0x20001cd1

08007510 <__sinit>:
 8007510:	b510      	push	{r4, lr}
 8007512:	4604      	mov	r4, r0
 8007514:	f7ff fff0 	bl	80074f8 <__sfp_lock_acquire>
 8007518:	6a23      	ldr	r3, [r4, #32]
 800751a:	b11b      	cbz	r3, 8007524 <__sinit+0x14>
 800751c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007520:	f7ff bff0 	b.w	8007504 <__sfp_lock_release>
 8007524:	4b04      	ldr	r3, [pc, #16]	@ (8007538 <__sinit+0x28>)
 8007526:	6223      	str	r3, [r4, #32]
 8007528:	4b04      	ldr	r3, [pc, #16]	@ (800753c <__sinit+0x2c>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1f5      	bne.n	800751c <__sinit+0xc>
 8007530:	f7ff ffc4 	bl	80074bc <global_stdio_init.part.0>
 8007534:	e7f2      	b.n	800751c <__sinit+0xc>
 8007536:	bf00      	nop
 8007538:	0800747d 	.word	0x0800747d
 800753c:	20001cc8 	.word	0x20001cc8

08007540 <_fwalk_sglue>:
 8007540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007544:	4607      	mov	r7, r0
 8007546:	4688      	mov	r8, r1
 8007548:	4614      	mov	r4, r2
 800754a:	2600      	movs	r6, #0
 800754c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007550:	f1b9 0901 	subs.w	r9, r9, #1
 8007554:	d505      	bpl.n	8007562 <_fwalk_sglue+0x22>
 8007556:	6824      	ldr	r4, [r4, #0]
 8007558:	2c00      	cmp	r4, #0
 800755a:	d1f7      	bne.n	800754c <_fwalk_sglue+0xc>
 800755c:	4630      	mov	r0, r6
 800755e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007562:	89ab      	ldrh	r3, [r5, #12]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d907      	bls.n	8007578 <_fwalk_sglue+0x38>
 8007568:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800756c:	3301      	adds	r3, #1
 800756e:	d003      	beq.n	8007578 <_fwalk_sglue+0x38>
 8007570:	4629      	mov	r1, r5
 8007572:	4638      	mov	r0, r7
 8007574:	47c0      	blx	r8
 8007576:	4306      	orrs	r6, r0
 8007578:	3568      	adds	r5, #104	@ 0x68
 800757a:	e7e9      	b.n	8007550 <_fwalk_sglue+0x10>

0800757c <iprintf>:
 800757c:	b40f      	push	{r0, r1, r2, r3}
 800757e:	b507      	push	{r0, r1, r2, lr}
 8007580:	4906      	ldr	r1, [pc, #24]	@ (800759c <iprintf+0x20>)
 8007582:	ab04      	add	r3, sp, #16
 8007584:	6808      	ldr	r0, [r1, #0]
 8007586:	f853 2b04 	ldr.w	r2, [r3], #4
 800758a:	6881      	ldr	r1, [r0, #8]
 800758c:	9301      	str	r3, [sp, #4]
 800758e:	f000 fb47 	bl	8007c20 <_vfiprintf_r>
 8007592:	b003      	add	sp, #12
 8007594:	f85d eb04 	ldr.w	lr, [sp], #4
 8007598:	b004      	add	sp, #16
 800759a:	4770      	bx	lr
 800759c:	20000030 	.word	0x20000030

080075a0 <_puts_r>:
 80075a0:	6a03      	ldr	r3, [r0, #32]
 80075a2:	b570      	push	{r4, r5, r6, lr}
 80075a4:	6884      	ldr	r4, [r0, #8]
 80075a6:	4605      	mov	r5, r0
 80075a8:	460e      	mov	r6, r1
 80075aa:	b90b      	cbnz	r3, 80075b0 <_puts_r+0x10>
 80075ac:	f7ff ffb0 	bl	8007510 <__sinit>
 80075b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80075b2:	07db      	lsls	r3, r3, #31
 80075b4:	d405      	bmi.n	80075c2 <_puts_r+0x22>
 80075b6:	89a3      	ldrh	r3, [r4, #12]
 80075b8:	0598      	lsls	r0, r3, #22
 80075ba:	d402      	bmi.n	80075c2 <_puts_r+0x22>
 80075bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075be:	f000 f9fc 	bl	80079ba <__retarget_lock_acquire_recursive>
 80075c2:	89a3      	ldrh	r3, [r4, #12]
 80075c4:	0719      	lsls	r1, r3, #28
 80075c6:	d502      	bpl.n	80075ce <_puts_r+0x2e>
 80075c8:	6923      	ldr	r3, [r4, #16]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d135      	bne.n	800763a <_puts_r+0x9a>
 80075ce:	4621      	mov	r1, r4
 80075d0:	4628      	mov	r0, r5
 80075d2:	f000 f8c5 	bl	8007760 <__swsetup_r>
 80075d6:	b380      	cbz	r0, 800763a <_puts_r+0x9a>
 80075d8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80075dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80075de:	07da      	lsls	r2, r3, #31
 80075e0:	d405      	bmi.n	80075ee <_puts_r+0x4e>
 80075e2:	89a3      	ldrh	r3, [r4, #12]
 80075e4:	059b      	lsls	r3, r3, #22
 80075e6:	d402      	bmi.n	80075ee <_puts_r+0x4e>
 80075e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075ea:	f000 f9e7 	bl	80079bc <__retarget_lock_release_recursive>
 80075ee:	4628      	mov	r0, r5
 80075f0:	bd70      	pop	{r4, r5, r6, pc}
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	da04      	bge.n	8007600 <_puts_r+0x60>
 80075f6:	69a2      	ldr	r2, [r4, #24]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	dc17      	bgt.n	800762c <_puts_r+0x8c>
 80075fc:	290a      	cmp	r1, #10
 80075fe:	d015      	beq.n	800762c <_puts_r+0x8c>
 8007600:	6823      	ldr	r3, [r4, #0]
 8007602:	1c5a      	adds	r2, r3, #1
 8007604:	6022      	str	r2, [r4, #0]
 8007606:	7019      	strb	r1, [r3, #0]
 8007608:	68a3      	ldr	r3, [r4, #8]
 800760a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800760e:	3b01      	subs	r3, #1
 8007610:	60a3      	str	r3, [r4, #8]
 8007612:	2900      	cmp	r1, #0
 8007614:	d1ed      	bne.n	80075f2 <_puts_r+0x52>
 8007616:	2b00      	cmp	r3, #0
 8007618:	da11      	bge.n	800763e <_puts_r+0x9e>
 800761a:	4622      	mov	r2, r4
 800761c:	210a      	movs	r1, #10
 800761e:	4628      	mov	r0, r5
 8007620:	f000 f85f 	bl	80076e2 <__swbuf_r>
 8007624:	3001      	adds	r0, #1
 8007626:	d0d7      	beq.n	80075d8 <_puts_r+0x38>
 8007628:	250a      	movs	r5, #10
 800762a:	e7d7      	b.n	80075dc <_puts_r+0x3c>
 800762c:	4622      	mov	r2, r4
 800762e:	4628      	mov	r0, r5
 8007630:	f000 f857 	bl	80076e2 <__swbuf_r>
 8007634:	3001      	adds	r0, #1
 8007636:	d1e7      	bne.n	8007608 <_puts_r+0x68>
 8007638:	e7ce      	b.n	80075d8 <_puts_r+0x38>
 800763a:	3e01      	subs	r6, #1
 800763c:	e7e4      	b.n	8007608 <_puts_r+0x68>
 800763e:	6823      	ldr	r3, [r4, #0]
 8007640:	1c5a      	adds	r2, r3, #1
 8007642:	6022      	str	r2, [r4, #0]
 8007644:	220a      	movs	r2, #10
 8007646:	701a      	strb	r2, [r3, #0]
 8007648:	e7ee      	b.n	8007628 <_puts_r+0x88>
	...

0800764c <puts>:
 800764c:	4b02      	ldr	r3, [pc, #8]	@ (8007658 <puts+0xc>)
 800764e:	4601      	mov	r1, r0
 8007650:	6818      	ldr	r0, [r3, #0]
 8007652:	f7ff bfa5 	b.w	80075a0 <_puts_r>
 8007656:	bf00      	nop
 8007658:	20000030 	.word	0x20000030

0800765c <__sread>:
 800765c:	b510      	push	{r4, lr}
 800765e:	460c      	mov	r4, r1
 8007660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007664:	f000 f95a 	bl	800791c <_read_r>
 8007668:	2800      	cmp	r0, #0
 800766a:	bfab      	itete	ge
 800766c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800766e:	89a3      	ldrhlt	r3, [r4, #12]
 8007670:	181b      	addge	r3, r3, r0
 8007672:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007676:	bfac      	ite	ge
 8007678:	6563      	strge	r3, [r4, #84]	@ 0x54
 800767a:	81a3      	strhlt	r3, [r4, #12]
 800767c:	bd10      	pop	{r4, pc}

0800767e <__swrite>:
 800767e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007682:	461f      	mov	r7, r3
 8007684:	898b      	ldrh	r3, [r1, #12]
 8007686:	05db      	lsls	r3, r3, #23
 8007688:	4605      	mov	r5, r0
 800768a:	460c      	mov	r4, r1
 800768c:	4616      	mov	r6, r2
 800768e:	d505      	bpl.n	800769c <__swrite+0x1e>
 8007690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007694:	2302      	movs	r3, #2
 8007696:	2200      	movs	r2, #0
 8007698:	f000 f92e 	bl	80078f8 <_lseek_r>
 800769c:	89a3      	ldrh	r3, [r4, #12]
 800769e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076a6:	81a3      	strh	r3, [r4, #12]
 80076a8:	4632      	mov	r2, r6
 80076aa:	463b      	mov	r3, r7
 80076ac:	4628      	mov	r0, r5
 80076ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076b2:	f000 b945 	b.w	8007940 <_write_r>

080076b6 <__sseek>:
 80076b6:	b510      	push	{r4, lr}
 80076b8:	460c      	mov	r4, r1
 80076ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076be:	f000 f91b 	bl	80078f8 <_lseek_r>
 80076c2:	1c43      	adds	r3, r0, #1
 80076c4:	89a3      	ldrh	r3, [r4, #12]
 80076c6:	bf15      	itete	ne
 80076c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80076ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80076ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80076d2:	81a3      	strheq	r3, [r4, #12]
 80076d4:	bf18      	it	ne
 80076d6:	81a3      	strhne	r3, [r4, #12]
 80076d8:	bd10      	pop	{r4, pc}

080076da <__sclose>:
 80076da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076de:	f000 b89d 	b.w	800781c <_close_r>

080076e2 <__swbuf_r>:
 80076e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e4:	460e      	mov	r6, r1
 80076e6:	4614      	mov	r4, r2
 80076e8:	4605      	mov	r5, r0
 80076ea:	b118      	cbz	r0, 80076f4 <__swbuf_r+0x12>
 80076ec:	6a03      	ldr	r3, [r0, #32]
 80076ee:	b90b      	cbnz	r3, 80076f4 <__swbuf_r+0x12>
 80076f0:	f7ff ff0e 	bl	8007510 <__sinit>
 80076f4:	69a3      	ldr	r3, [r4, #24]
 80076f6:	60a3      	str	r3, [r4, #8]
 80076f8:	89a3      	ldrh	r3, [r4, #12]
 80076fa:	071a      	lsls	r2, r3, #28
 80076fc:	d501      	bpl.n	8007702 <__swbuf_r+0x20>
 80076fe:	6923      	ldr	r3, [r4, #16]
 8007700:	b943      	cbnz	r3, 8007714 <__swbuf_r+0x32>
 8007702:	4621      	mov	r1, r4
 8007704:	4628      	mov	r0, r5
 8007706:	f000 f82b 	bl	8007760 <__swsetup_r>
 800770a:	b118      	cbz	r0, 8007714 <__swbuf_r+0x32>
 800770c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007710:	4638      	mov	r0, r7
 8007712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007714:	6823      	ldr	r3, [r4, #0]
 8007716:	6922      	ldr	r2, [r4, #16]
 8007718:	1a98      	subs	r0, r3, r2
 800771a:	6963      	ldr	r3, [r4, #20]
 800771c:	b2f6      	uxtb	r6, r6
 800771e:	4283      	cmp	r3, r0
 8007720:	4637      	mov	r7, r6
 8007722:	dc05      	bgt.n	8007730 <__swbuf_r+0x4e>
 8007724:	4621      	mov	r1, r4
 8007726:	4628      	mov	r0, r5
 8007728:	f000 fda2 	bl	8008270 <_fflush_r>
 800772c:	2800      	cmp	r0, #0
 800772e:	d1ed      	bne.n	800770c <__swbuf_r+0x2a>
 8007730:	68a3      	ldr	r3, [r4, #8]
 8007732:	3b01      	subs	r3, #1
 8007734:	60a3      	str	r3, [r4, #8]
 8007736:	6823      	ldr	r3, [r4, #0]
 8007738:	1c5a      	adds	r2, r3, #1
 800773a:	6022      	str	r2, [r4, #0]
 800773c:	701e      	strb	r6, [r3, #0]
 800773e:	6962      	ldr	r2, [r4, #20]
 8007740:	1c43      	adds	r3, r0, #1
 8007742:	429a      	cmp	r2, r3
 8007744:	d004      	beq.n	8007750 <__swbuf_r+0x6e>
 8007746:	89a3      	ldrh	r3, [r4, #12]
 8007748:	07db      	lsls	r3, r3, #31
 800774a:	d5e1      	bpl.n	8007710 <__swbuf_r+0x2e>
 800774c:	2e0a      	cmp	r6, #10
 800774e:	d1df      	bne.n	8007710 <__swbuf_r+0x2e>
 8007750:	4621      	mov	r1, r4
 8007752:	4628      	mov	r0, r5
 8007754:	f000 fd8c 	bl	8008270 <_fflush_r>
 8007758:	2800      	cmp	r0, #0
 800775a:	d0d9      	beq.n	8007710 <__swbuf_r+0x2e>
 800775c:	e7d6      	b.n	800770c <__swbuf_r+0x2a>
	...

08007760 <__swsetup_r>:
 8007760:	b538      	push	{r3, r4, r5, lr}
 8007762:	4b29      	ldr	r3, [pc, #164]	@ (8007808 <__swsetup_r+0xa8>)
 8007764:	4605      	mov	r5, r0
 8007766:	6818      	ldr	r0, [r3, #0]
 8007768:	460c      	mov	r4, r1
 800776a:	b118      	cbz	r0, 8007774 <__swsetup_r+0x14>
 800776c:	6a03      	ldr	r3, [r0, #32]
 800776e:	b90b      	cbnz	r3, 8007774 <__swsetup_r+0x14>
 8007770:	f7ff fece 	bl	8007510 <__sinit>
 8007774:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007778:	0719      	lsls	r1, r3, #28
 800777a:	d422      	bmi.n	80077c2 <__swsetup_r+0x62>
 800777c:	06da      	lsls	r2, r3, #27
 800777e:	d407      	bmi.n	8007790 <__swsetup_r+0x30>
 8007780:	2209      	movs	r2, #9
 8007782:	602a      	str	r2, [r5, #0]
 8007784:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007788:	81a3      	strh	r3, [r4, #12]
 800778a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800778e:	e033      	b.n	80077f8 <__swsetup_r+0x98>
 8007790:	0758      	lsls	r0, r3, #29
 8007792:	d512      	bpl.n	80077ba <__swsetup_r+0x5a>
 8007794:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007796:	b141      	cbz	r1, 80077aa <__swsetup_r+0x4a>
 8007798:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800779c:	4299      	cmp	r1, r3
 800779e:	d002      	beq.n	80077a6 <__swsetup_r+0x46>
 80077a0:	4628      	mov	r0, r5
 80077a2:	f000 f91b 	bl	80079dc <_free_r>
 80077a6:	2300      	movs	r3, #0
 80077a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80077aa:	89a3      	ldrh	r3, [r4, #12]
 80077ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80077b0:	81a3      	strh	r3, [r4, #12]
 80077b2:	2300      	movs	r3, #0
 80077b4:	6063      	str	r3, [r4, #4]
 80077b6:	6923      	ldr	r3, [r4, #16]
 80077b8:	6023      	str	r3, [r4, #0]
 80077ba:	89a3      	ldrh	r3, [r4, #12]
 80077bc:	f043 0308 	orr.w	r3, r3, #8
 80077c0:	81a3      	strh	r3, [r4, #12]
 80077c2:	6923      	ldr	r3, [r4, #16]
 80077c4:	b94b      	cbnz	r3, 80077da <__swsetup_r+0x7a>
 80077c6:	89a3      	ldrh	r3, [r4, #12]
 80077c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80077cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077d0:	d003      	beq.n	80077da <__swsetup_r+0x7a>
 80077d2:	4621      	mov	r1, r4
 80077d4:	4628      	mov	r0, r5
 80077d6:	f000 fd99 	bl	800830c <__smakebuf_r>
 80077da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077de:	f013 0201 	ands.w	r2, r3, #1
 80077e2:	d00a      	beq.n	80077fa <__swsetup_r+0x9a>
 80077e4:	2200      	movs	r2, #0
 80077e6:	60a2      	str	r2, [r4, #8]
 80077e8:	6962      	ldr	r2, [r4, #20]
 80077ea:	4252      	negs	r2, r2
 80077ec:	61a2      	str	r2, [r4, #24]
 80077ee:	6922      	ldr	r2, [r4, #16]
 80077f0:	b942      	cbnz	r2, 8007804 <__swsetup_r+0xa4>
 80077f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80077f6:	d1c5      	bne.n	8007784 <__swsetup_r+0x24>
 80077f8:	bd38      	pop	{r3, r4, r5, pc}
 80077fa:	0799      	lsls	r1, r3, #30
 80077fc:	bf58      	it	pl
 80077fe:	6962      	ldrpl	r2, [r4, #20]
 8007800:	60a2      	str	r2, [r4, #8]
 8007802:	e7f4      	b.n	80077ee <__swsetup_r+0x8e>
 8007804:	2000      	movs	r0, #0
 8007806:	e7f7      	b.n	80077f8 <__swsetup_r+0x98>
 8007808:	20000030 	.word	0x20000030

0800780c <memset>:
 800780c:	4402      	add	r2, r0
 800780e:	4603      	mov	r3, r0
 8007810:	4293      	cmp	r3, r2
 8007812:	d100      	bne.n	8007816 <memset+0xa>
 8007814:	4770      	bx	lr
 8007816:	f803 1b01 	strb.w	r1, [r3], #1
 800781a:	e7f9      	b.n	8007810 <memset+0x4>

0800781c <_close_r>:
 800781c:	b538      	push	{r3, r4, r5, lr}
 800781e:	4d06      	ldr	r5, [pc, #24]	@ (8007838 <_close_r+0x1c>)
 8007820:	2300      	movs	r3, #0
 8007822:	4604      	mov	r4, r0
 8007824:	4608      	mov	r0, r1
 8007826:	602b      	str	r3, [r5, #0]
 8007828:	f7f9 fae7 	bl	8000dfa <_close>
 800782c:	1c43      	adds	r3, r0, #1
 800782e:	d102      	bne.n	8007836 <_close_r+0x1a>
 8007830:	682b      	ldr	r3, [r5, #0]
 8007832:	b103      	cbz	r3, 8007836 <_close_r+0x1a>
 8007834:	6023      	str	r3, [r4, #0]
 8007836:	bd38      	pop	{r3, r4, r5, pc}
 8007838:	20001ccc 	.word	0x20001ccc

0800783c <_reclaim_reent>:
 800783c:	4b2d      	ldr	r3, [pc, #180]	@ (80078f4 <_reclaim_reent+0xb8>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4283      	cmp	r3, r0
 8007842:	b570      	push	{r4, r5, r6, lr}
 8007844:	4604      	mov	r4, r0
 8007846:	d053      	beq.n	80078f0 <_reclaim_reent+0xb4>
 8007848:	69c3      	ldr	r3, [r0, #28]
 800784a:	b31b      	cbz	r3, 8007894 <_reclaim_reent+0x58>
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	b163      	cbz	r3, 800786a <_reclaim_reent+0x2e>
 8007850:	2500      	movs	r5, #0
 8007852:	69e3      	ldr	r3, [r4, #28]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	5959      	ldr	r1, [r3, r5]
 8007858:	b9b1      	cbnz	r1, 8007888 <_reclaim_reent+0x4c>
 800785a:	3504      	adds	r5, #4
 800785c:	2d80      	cmp	r5, #128	@ 0x80
 800785e:	d1f8      	bne.n	8007852 <_reclaim_reent+0x16>
 8007860:	69e3      	ldr	r3, [r4, #28]
 8007862:	4620      	mov	r0, r4
 8007864:	68d9      	ldr	r1, [r3, #12]
 8007866:	f000 f8b9 	bl	80079dc <_free_r>
 800786a:	69e3      	ldr	r3, [r4, #28]
 800786c:	6819      	ldr	r1, [r3, #0]
 800786e:	b111      	cbz	r1, 8007876 <_reclaim_reent+0x3a>
 8007870:	4620      	mov	r0, r4
 8007872:	f000 f8b3 	bl	80079dc <_free_r>
 8007876:	69e3      	ldr	r3, [r4, #28]
 8007878:	689d      	ldr	r5, [r3, #8]
 800787a:	b15d      	cbz	r5, 8007894 <_reclaim_reent+0x58>
 800787c:	4629      	mov	r1, r5
 800787e:	4620      	mov	r0, r4
 8007880:	682d      	ldr	r5, [r5, #0]
 8007882:	f000 f8ab 	bl	80079dc <_free_r>
 8007886:	e7f8      	b.n	800787a <_reclaim_reent+0x3e>
 8007888:	680e      	ldr	r6, [r1, #0]
 800788a:	4620      	mov	r0, r4
 800788c:	f000 f8a6 	bl	80079dc <_free_r>
 8007890:	4631      	mov	r1, r6
 8007892:	e7e1      	b.n	8007858 <_reclaim_reent+0x1c>
 8007894:	6961      	ldr	r1, [r4, #20]
 8007896:	b111      	cbz	r1, 800789e <_reclaim_reent+0x62>
 8007898:	4620      	mov	r0, r4
 800789a:	f000 f89f 	bl	80079dc <_free_r>
 800789e:	69e1      	ldr	r1, [r4, #28]
 80078a0:	b111      	cbz	r1, 80078a8 <_reclaim_reent+0x6c>
 80078a2:	4620      	mov	r0, r4
 80078a4:	f000 f89a 	bl	80079dc <_free_r>
 80078a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80078aa:	b111      	cbz	r1, 80078b2 <_reclaim_reent+0x76>
 80078ac:	4620      	mov	r0, r4
 80078ae:	f000 f895 	bl	80079dc <_free_r>
 80078b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078b4:	b111      	cbz	r1, 80078bc <_reclaim_reent+0x80>
 80078b6:	4620      	mov	r0, r4
 80078b8:	f000 f890 	bl	80079dc <_free_r>
 80078bc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80078be:	b111      	cbz	r1, 80078c6 <_reclaim_reent+0x8a>
 80078c0:	4620      	mov	r0, r4
 80078c2:	f000 f88b 	bl	80079dc <_free_r>
 80078c6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80078c8:	b111      	cbz	r1, 80078d0 <_reclaim_reent+0x94>
 80078ca:	4620      	mov	r0, r4
 80078cc:	f000 f886 	bl	80079dc <_free_r>
 80078d0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80078d2:	b111      	cbz	r1, 80078da <_reclaim_reent+0x9e>
 80078d4:	4620      	mov	r0, r4
 80078d6:	f000 f881 	bl	80079dc <_free_r>
 80078da:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80078dc:	b111      	cbz	r1, 80078e4 <_reclaim_reent+0xa8>
 80078de:	4620      	mov	r0, r4
 80078e0:	f000 f87c 	bl	80079dc <_free_r>
 80078e4:	6a23      	ldr	r3, [r4, #32]
 80078e6:	b11b      	cbz	r3, 80078f0 <_reclaim_reent+0xb4>
 80078e8:	4620      	mov	r0, r4
 80078ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80078ee:	4718      	bx	r3
 80078f0:	bd70      	pop	{r4, r5, r6, pc}
 80078f2:	bf00      	nop
 80078f4:	20000030 	.word	0x20000030

080078f8 <_lseek_r>:
 80078f8:	b538      	push	{r3, r4, r5, lr}
 80078fa:	4d07      	ldr	r5, [pc, #28]	@ (8007918 <_lseek_r+0x20>)
 80078fc:	4604      	mov	r4, r0
 80078fe:	4608      	mov	r0, r1
 8007900:	4611      	mov	r1, r2
 8007902:	2200      	movs	r2, #0
 8007904:	602a      	str	r2, [r5, #0]
 8007906:	461a      	mov	r2, r3
 8007908:	f7f9 fa9e 	bl	8000e48 <_lseek>
 800790c:	1c43      	adds	r3, r0, #1
 800790e:	d102      	bne.n	8007916 <_lseek_r+0x1e>
 8007910:	682b      	ldr	r3, [r5, #0]
 8007912:	b103      	cbz	r3, 8007916 <_lseek_r+0x1e>
 8007914:	6023      	str	r3, [r4, #0]
 8007916:	bd38      	pop	{r3, r4, r5, pc}
 8007918:	20001ccc 	.word	0x20001ccc

0800791c <_read_r>:
 800791c:	b538      	push	{r3, r4, r5, lr}
 800791e:	4d07      	ldr	r5, [pc, #28]	@ (800793c <_read_r+0x20>)
 8007920:	4604      	mov	r4, r0
 8007922:	4608      	mov	r0, r1
 8007924:	4611      	mov	r1, r2
 8007926:	2200      	movs	r2, #0
 8007928:	602a      	str	r2, [r5, #0]
 800792a:	461a      	mov	r2, r3
 800792c:	f7f9 fa48 	bl	8000dc0 <_read>
 8007930:	1c43      	adds	r3, r0, #1
 8007932:	d102      	bne.n	800793a <_read_r+0x1e>
 8007934:	682b      	ldr	r3, [r5, #0]
 8007936:	b103      	cbz	r3, 800793a <_read_r+0x1e>
 8007938:	6023      	str	r3, [r4, #0]
 800793a:	bd38      	pop	{r3, r4, r5, pc}
 800793c:	20001ccc 	.word	0x20001ccc

08007940 <_write_r>:
 8007940:	b538      	push	{r3, r4, r5, lr}
 8007942:	4d07      	ldr	r5, [pc, #28]	@ (8007960 <_write_r+0x20>)
 8007944:	4604      	mov	r4, r0
 8007946:	4608      	mov	r0, r1
 8007948:	4611      	mov	r1, r2
 800794a:	2200      	movs	r2, #0
 800794c:	602a      	str	r2, [r5, #0]
 800794e:	461a      	mov	r2, r3
 8007950:	f7f8 ffae 	bl	80008b0 <_write>
 8007954:	1c43      	adds	r3, r0, #1
 8007956:	d102      	bne.n	800795e <_write_r+0x1e>
 8007958:	682b      	ldr	r3, [r5, #0]
 800795a:	b103      	cbz	r3, 800795e <_write_r+0x1e>
 800795c:	6023      	str	r3, [r4, #0]
 800795e:	bd38      	pop	{r3, r4, r5, pc}
 8007960:	20001ccc 	.word	0x20001ccc

08007964 <__errno>:
 8007964:	4b01      	ldr	r3, [pc, #4]	@ (800796c <__errno+0x8>)
 8007966:	6818      	ldr	r0, [r3, #0]
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	20000030 	.word	0x20000030

08007970 <__libc_init_array>:
 8007970:	b570      	push	{r4, r5, r6, lr}
 8007972:	4d0d      	ldr	r5, [pc, #52]	@ (80079a8 <__libc_init_array+0x38>)
 8007974:	4c0d      	ldr	r4, [pc, #52]	@ (80079ac <__libc_init_array+0x3c>)
 8007976:	1b64      	subs	r4, r4, r5
 8007978:	10a4      	asrs	r4, r4, #2
 800797a:	2600      	movs	r6, #0
 800797c:	42a6      	cmp	r6, r4
 800797e:	d109      	bne.n	8007994 <__libc_init_array+0x24>
 8007980:	4d0b      	ldr	r5, [pc, #44]	@ (80079b0 <__libc_init_array+0x40>)
 8007982:	4c0c      	ldr	r4, [pc, #48]	@ (80079b4 <__libc_init_array+0x44>)
 8007984:	f000 fd30 	bl	80083e8 <_init>
 8007988:	1b64      	subs	r4, r4, r5
 800798a:	10a4      	asrs	r4, r4, #2
 800798c:	2600      	movs	r6, #0
 800798e:	42a6      	cmp	r6, r4
 8007990:	d105      	bne.n	800799e <__libc_init_array+0x2e>
 8007992:	bd70      	pop	{r4, r5, r6, pc}
 8007994:	f855 3b04 	ldr.w	r3, [r5], #4
 8007998:	4798      	blx	r3
 800799a:	3601      	adds	r6, #1
 800799c:	e7ee      	b.n	800797c <__libc_init_array+0xc>
 800799e:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a2:	4798      	blx	r3
 80079a4:	3601      	adds	r6, #1
 80079a6:	e7f2      	b.n	800798e <__libc_init_array+0x1e>
 80079a8:	0800872c 	.word	0x0800872c
 80079ac:	0800872c 	.word	0x0800872c
 80079b0:	0800872c 	.word	0x0800872c
 80079b4:	08008730 	.word	0x08008730

080079b8 <__retarget_lock_init_recursive>:
 80079b8:	4770      	bx	lr

080079ba <__retarget_lock_acquire_recursive>:
 80079ba:	4770      	bx	lr

080079bc <__retarget_lock_release_recursive>:
 80079bc:	4770      	bx	lr

080079be <memcpy>:
 80079be:	440a      	add	r2, r1
 80079c0:	4291      	cmp	r1, r2
 80079c2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80079c6:	d100      	bne.n	80079ca <memcpy+0xc>
 80079c8:	4770      	bx	lr
 80079ca:	b510      	push	{r4, lr}
 80079cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079d4:	4291      	cmp	r1, r2
 80079d6:	d1f9      	bne.n	80079cc <memcpy+0xe>
 80079d8:	bd10      	pop	{r4, pc}
	...

080079dc <_free_r>:
 80079dc:	b538      	push	{r3, r4, r5, lr}
 80079de:	4605      	mov	r5, r0
 80079e0:	2900      	cmp	r1, #0
 80079e2:	d041      	beq.n	8007a68 <_free_r+0x8c>
 80079e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079e8:	1f0c      	subs	r4, r1, #4
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	bfb8      	it	lt
 80079ee:	18e4      	addlt	r4, r4, r3
 80079f0:	f000 f8e0 	bl	8007bb4 <__malloc_lock>
 80079f4:	4a1d      	ldr	r2, [pc, #116]	@ (8007a6c <_free_r+0x90>)
 80079f6:	6813      	ldr	r3, [r2, #0]
 80079f8:	b933      	cbnz	r3, 8007a08 <_free_r+0x2c>
 80079fa:	6063      	str	r3, [r4, #4]
 80079fc:	6014      	str	r4, [r2, #0]
 80079fe:	4628      	mov	r0, r5
 8007a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a04:	f000 b8dc 	b.w	8007bc0 <__malloc_unlock>
 8007a08:	42a3      	cmp	r3, r4
 8007a0a:	d908      	bls.n	8007a1e <_free_r+0x42>
 8007a0c:	6820      	ldr	r0, [r4, #0]
 8007a0e:	1821      	adds	r1, r4, r0
 8007a10:	428b      	cmp	r3, r1
 8007a12:	bf01      	itttt	eq
 8007a14:	6819      	ldreq	r1, [r3, #0]
 8007a16:	685b      	ldreq	r3, [r3, #4]
 8007a18:	1809      	addeq	r1, r1, r0
 8007a1a:	6021      	streq	r1, [r4, #0]
 8007a1c:	e7ed      	b.n	80079fa <_free_r+0x1e>
 8007a1e:	461a      	mov	r2, r3
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	b10b      	cbz	r3, 8007a28 <_free_r+0x4c>
 8007a24:	42a3      	cmp	r3, r4
 8007a26:	d9fa      	bls.n	8007a1e <_free_r+0x42>
 8007a28:	6811      	ldr	r1, [r2, #0]
 8007a2a:	1850      	adds	r0, r2, r1
 8007a2c:	42a0      	cmp	r0, r4
 8007a2e:	d10b      	bne.n	8007a48 <_free_r+0x6c>
 8007a30:	6820      	ldr	r0, [r4, #0]
 8007a32:	4401      	add	r1, r0
 8007a34:	1850      	adds	r0, r2, r1
 8007a36:	4283      	cmp	r3, r0
 8007a38:	6011      	str	r1, [r2, #0]
 8007a3a:	d1e0      	bne.n	80079fe <_free_r+0x22>
 8007a3c:	6818      	ldr	r0, [r3, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	6053      	str	r3, [r2, #4]
 8007a42:	4408      	add	r0, r1
 8007a44:	6010      	str	r0, [r2, #0]
 8007a46:	e7da      	b.n	80079fe <_free_r+0x22>
 8007a48:	d902      	bls.n	8007a50 <_free_r+0x74>
 8007a4a:	230c      	movs	r3, #12
 8007a4c:	602b      	str	r3, [r5, #0]
 8007a4e:	e7d6      	b.n	80079fe <_free_r+0x22>
 8007a50:	6820      	ldr	r0, [r4, #0]
 8007a52:	1821      	adds	r1, r4, r0
 8007a54:	428b      	cmp	r3, r1
 8007a56:	bf04      	itt	eq
 8007a58:	6819      	ldreq	r1, [r3, #0]
 8007a5a:	685b      	ldreq	r3, [r3, #4]
 8007a5c:	6063      	str	r3, [r4, #4]
 8007a5e:	bf04      	itt	eq
 8007a60:	1809      	addeq	r1, r1, r0
 8007a62:	6021      	streq	r1, [r4, #0]
 8007a64:	6054      	str	r4, [r2, #4]
 8007a66:	e7ca      	b.n	80079fe <_free_r+0x22>
 8007a68:	bd38      	pop	{r3, r4, r5, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20001cd8 	.word	0x20001cd8

08007a70 <sbrk_aligned>:
 8007a70:	b570      	push	{r4, r5, r6, lr}
 8007a72:	4e0f      	ldr	r6, [pc, #60]	@ (8007ab0 <sbrk_aligned+0x40>)
 8007a74:	460c      	mov	r4, r1
 8007a76:	6831      	ldr	r1, [r6, #0]
 8007a78:	4605      	mov	r5, r0
 8007a7a:	b911      	cbnz	r1, 8007a82 <sbrk_aligned+0x12>
 8007a7c:	f000 fca4 	bl	80083c8 <_sbrk_r>
 8007a80:	6030      	str	r0, [r6, #0]
 8007a82:	4621      	mov	r1, r4
 8007a84:	4628      	mov	r0, r5
 8007a86:	f000 fc9f 	bl	80083c8 <_sbrk_r>
 8007a8a:	1c43      	adds	r3, r0, #1
 8007a8c:	d103      	bne.n	8007a96 <sbrk_aligned+0x26>
 8007a8e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007a92:	4620      	mov	r0, r4
 8007a94:	bd70      	pop	{r4, r5, r6, pc}
 8007a96:	1cc4      	adds	r4, r0, #3
 8007a98:	f024 0403 	bic.w	r4, r4, #3
 8007a9c:	42a0      	cmp	r0, r4
 8007a9e:	d0f8      	beq.n	8007a92 <sbrk_aligned+0x22>
 8007aa0:	1a21      	subs	r1, r4, r0
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	f000 fc90 	bl	80083c8 <_sbrk_r>
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	d1f2      	bne.n	8007a92 <sbrk_aligned+0x22>
 8007aac:	e7ef      	b.n	8007a8e <sbrk_aligned+0x1e>
 8007aae:	bf00      	nop
 8007ab0:	20001cd4 	.word	0x20001cd4

08007ab4 <_malloc_r>:
 8007ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ab8:	1ccd      	adds	r5, r1, #3
 8007aba:	f025 0503 	bic.w	r5, r5, #3
 8007abe:	3508      	adds	r5, #8
 8007ac0:	2d0c      	cmp	r5, #12
 8007ac2:	bf38      	it	cc
 8007ac4:	250c      	movcc	r5, #12
 8007ac6:	2d00      	cmp	r5, #0
 8007ac8:	4606      	mov	r6, r0
 8007aca:	db01      	blt.n	8007ad0 <_malloc_r+0x1c>
 8007acc:	42a9      	cmp	r1, r5
 8007ace:	d904      	bls.n	8007ada <_malloc_r+0x26>
 8007ad0:	230c      	movs	r3, #12
 8007ad2:	6033      	str	r3, [r6, #0]
 8007ad4:	2000      	movs	r0, #0
 8007ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ada:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007bb0 <_malloc_r+0xfc>
 8007ade:	f000 f869 	bl	8007bb4 <__malloc_lock>
 8007ae2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ae6:	461c      	mov	r4, r3
 8007ae8:	bb44      	cbnz	r4, 8007b3c <_malloc_r+0x88>
 8007aea:	4629      	mov	r1, r5
 8007aec:	4630      	mov	r0, r6
 8007aee:	f7ff ffbf 	bl	8007a70 <sbrk_aligned>
 8007af2:	1c43      	adds	r3, r0, #1
 8007af4:	4604      	mov	r4, r0
 8007af6:	d158      	bne.n	8007baa <_malloc_r+0xf6>
 8007af8:	f8d8 4000 	ldr.w	r4, [r8]
 8007afc:	4627      	mov	r7, r4
 8007afe:	2f00      	cmp	r7, #0
 8007b00:	d143      	bne.n	8007b8a <_malloc_r+0xd6>
 8007b02:	2c00      	cmp	r4, #0
 8007b04:	d04b      	beq.n	8007b9e <_malloc_r+0xea>
 8007b06:	6823      	ldr	r3, [r4, #0]
 8007b08:	4639      	mov	r1, r7
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	eb04 0903 	add.w	r9, r4, r3
 8007b10:	f000 fc5a 	bl	80083c8 <_sbrk_r>
 8007b14:	4581      	cmp	r9, r0
 8007b16:	d142      	bne.n	8007b9e <_malloc_r+0xea>
 8007b18:	6821      	ldr	r1, [r4, #0]
 8007b1a:	1a6d      	subs	r5, r5, r1
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	4630      	mov	r0, r6
 8007b20:	f7ff ffa6 	bl	8007a70 <sbrk_aligned>
 8007b24:	3001      	adds	r0, #1
 8007b26:	d03a      	beq.n	8007b9e <_malloc_r+0xea>
 8007b28:	6823      	ldr	r3, [r4, #0]
 8007b2a:	442b      	add	r3, r5
 8007b2c:	6023      	str	r3, [r4, #0]
 8007b2e:	f8d8 3000 	ldr.w	r3, [r8]
 8007b32:	685a      	ldr	r2, [r3, #4]
 8007b34:	bb62      	cbnz	r2, 8007b90 <_malloc_r+0xdc>
 8007b36:	f8c8 7000 	str.w	r7, [r8]
 8007b3a:	e00f      	b.n	8007b5c <_malloc_r+0xa8>
 8007b3c:	6822      	ldr	r2, [r4, #0]
 8007b3e:	1b52      	subs	r2, r2, r5
 8007b40:	d420      	bmi.n	8007b84 <_malloc_r+0xd0>
 8007b42:	2a0b      	cmp	r2, #11
 8007b44:	d917      	bls.n	8007b76 <_malloc_r+0xc2>
 8007b46:	1961      	adds	r1, r4, r5
 8007b48:	42a3      	cmp	r3, r4
 8007b4a:	6025      	str	r5, [r4, #0]
 8007b4c:	bf18      	it	ne
 8007b4e:	6059      	strne	r1, [r3, #4]
 8007b50:	6863      	ldr	r3, [r4, #4]
 8007b52:	bf08      	it	eq
 8007b54:	f8c8 1000 	streq.w	r1, [r8]
 8007b58:	5162      	str	r2, [r4, r5]
 8007b5a:	604b      	str	r3, [r1, #4]
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	f000 f82f 	bl	8007bc0 <__malloc_unlock>
 8007b62:	f104 000b 	add.w	r0, r4, #11
 8007b66:	1d23      	adds	r3, r4, #4
 8007b68:	f020 0007 	bic.w	r0, r0, #7
 8007b6c:	1ac2      	subs	r2, r0, r3
 8007b6e:	bf1c      	itt	ne
 8007b70:	1a1b      	subne	r3, r3, r0
 8007b72:	50a3      	strne	r3, [r4, r2]
 8007b74:	e7af      	b.n	8007ad6 <_malloc_r+0x22>
 8007b76:	6862      	ldr	r2, [r4, #4]
 8007b78:	42a3      	cmp	r3, r4
 8007b7a:	bf0c      	ite	eq
 8007b7c:	f8c8 2000 	streq.w	r2, [r8]
 8007b80:	605a      	strne	r2, [r3, #4]
 8007b82:	e7eb      	b.n	8007b5c <_malloc_r+0xa8>
 8007b84:	4623      	mov	r3, r4
 8007b86:	6864      	ldr	r4, [r4, #4]
 8007b88:	e7ae      	b.n	8007ae8 <_malloc_r+0x34>
 8007b8a:	463c      	mov	r4, r7
 8007b8c:	687f      	ldr	r7, [r7, #4]
 8007b8e:	e7b6      	b.n	8007afe <_malloc_r+0x4a>
 8007b90:	461a      	mov	r2, r3
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	42a3      	cmp	r3, r4
 8007b96:	d1fb      	bne.n	8007b90 <_malloc_r+0xdc>
 8007b98:	2300      	movs	r3, #0
 8007b9a:	6053      	str	r3, [r2, #4]
 8007b9c:	e7de      	b.n	8007b5c <_malloc_r+0xa8>
 8007b9e:	230c      	movs	r3, #12
 8007ba0:	6033      	str	r3, [r6, #0]
 8007ba2:	4630      	mov	r0, r6
 8007ba4:	f000 f80c 	bl	8007bc0 <__malloc_unlock>
 8007ba8:	e794      	b.n	8007ad4 <_malloc_r+0x20>
 8007baa:	6005      	str	r5, [r0, #0]
 8007bac:	e7d6      	b.n	8007b5c <_malloc_r+0xa8>
 8007bae:	bf00      	nop
 8007bb0:	20001cd8 	.word	0x20001cd8

08007bb4 <__malloc_lock>:
 8007bb4:	4801      	ldr	r0, [pc, #4]	@ (8007bbc <__malloc_lock+0x8>)
 8007bb6:	f7ff bf00 	b.w	80079ba <__retarget_lock_acquire_recursive>
 8007bba:	bf00      	nop
 8007bbc:	20001cd0 	.word	0x20001cd0

08007bc0 <__malloc_unlock>:
 8007bc0:	4801      	ldr	r0, [pc, #4]	@ (8007bc8 <__malloc_unlock+0x8>)
 8007bc2:	f7ff befb 	b.w	80079bc <__retarget_lock_release_recursive>
 8007bc6:	bf00      	nop
 8007bc8:	20001cd0 	.word	0x20001cd0

08007bcc <__sfputc_r>:
 8007bcc:	6893      	ldr	r3, [r2, #8]
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	b410      	push	{r4}
 8007bd4:	6093      	str	r3, [r2, #8]
 8007bd6:	da08      	bge.n	8007bea <__sfputc_r+0x1e>
 8007bd8:	6994      	ldr	r4, [r2, #24]
 8007bda:	42a3      	cmp	r3, r4
 8007bdc:	db01      	blt.n	8007be2 <__sfputc_r+0x16>
 8007bde:	290a      	cmp	r1, #10
 8007be0:	d103      	bne.n	8007bea <__sfputc_r+0x1e>
 8007be2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007be6:	f7ff bd7c 	b.w	80076e2 <__swbuf_r>
 8007bea:	6813      	ldr	r3, [r2, #0]
 8007bec:	1c58      	adds	r0, r3, #1
 8007bee:	6010      	str	r0, [r2, #0]
 8007bf0:	7019      	strb	r1, [r3, #0]
 8007bf2:	4608      	mov	r0, r1
 8007bf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <__sfputs_r>:
 8007bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bfc:	4606      	mov	r6, r0
 8007bfe:	460f      	mov	r7, r1
 8007c00:	4614      	mov	r4, r2
 8007c02:	18d5      	adds	r5, r2, r3
 8007c04:	42ac      	cmp	r4, r5
 8007c06:	d101      	bne.n	8007c0c <__sfputs_r+0x12>
 8007c08:	2000      	movs	r0, #0
 8007c0a:	e007      	b.n	8007c1c <__sfputs_r+0x22>
 8007c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c10:	463a      	mov	r2, r7
 8007c12:	4630      	mov	r0, r6
 8007c14:	f7ff ffda 	bl	8007bcc <__sfputc_r>
 8007c18:	1c43      	adds	r3, r0, #1
 8007c1a:	d1f3      	bne.n	8007c04 <__sfputs_r+0xa>
 8007c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c20 <_vfiprintf_r>:
 8007c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c24:	460d      	mov	r5, r1
 8007c26:	b09d      	sub	sp, #116	@ 0x74
 8007c28:	4614      	mov	r4, r2
 8007c2a:	4698      	mov	r8, r3
 8007c2c:	4606      	mov	r6, r0
 8007c2e:	b118      	cbz	r0, 8007c38 <_vfiprintf_r+0x18>
 8007c30:	6a03      	ldr	r3, [r0, #32]
 8007c32:	b90b      	cbnz	r3, 8007c38 <_vfiprintf_r+0x18>
 8007c34:	f7ff fc6c 	bl	8007510 <__sinit>
 8007c38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c3a:	07d9      	lsls	r1, r3, #31
 8007c3c:	d405      	bmi.n	8007c4a <_vfiprintf_r+0x2a>
 8007c3e:	89ab      	ldrh	r3, [r5, #12]
 8007c40:	059a      	lsls	r2, r3, #22
 8007c42:	d402      	bmi.n	8007c4a <_vfiprintf_r+0x2a>
 8007c44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c46:	f7ff feb8 	bl	80079ba <__retarget_lock_acquire_recursive>
 8007c4a:	89ab      	ldrh	r3, [r5, #12]
 8007c4c:	071b      	lsls	r3, r3, #28
 8007c4e:	d501      	bpl.n	8007c54 <_vfiprintf_r+0x34>
 8007c50:	692b      	ldr	r3, [r5, #16]
 8007c52:	b99b      	cbnz	r3, 8007c7c <_vfiprintf_r+0x5c>
 8007c54:	4629      	mov	r1, r5
 8007c56:	4630      	mov	r0, r6
 8007c58:	f7ff fd82 	bl	8007760 <__swsetup_r>
 8007c5c:	b170      	cbz	r0, 8007c7c <_vfiprintf_r+0x5c>
 8007c5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c60:	07dc      	lsls	r4, r3, #31
 8007c62:	d504      	bpl.n	8007c6e <_vfiprintf_r+0x4e>
 8007c64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c68:	b01d      	add	sp, #116	@ 0x74
 8007c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c6e:	89ab      	ldrh	r3, [r5, #12]
 8007c70:	0598      	lsls	r0, r3, #22
 8007c72:	d4f7      	bmi.n	8007c64 <_vfiprintf_r+0x44>
 8007c74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c76:	f7ff fea1 	bl	80079bc <__retarget_lock_release_recursive>
 8007c7a:	e7f3      	b.n	8007c64 <_vfiprintf_r+0x44>
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c80:	2320      	movs	r3, #32
 8007c82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c86:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c8a:	2330      	movs	r3, #48	@ 0x30
 8007c8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007e3c <_vfiprintf_r+0x21c>
 8007c90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c94:	f04f 0901 	mov.w	r9, #1
 8007c98:	4623      	mov	r3, r4
 8007c9a:	469a      	mov	sl, r3
 8007c9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ca0:	b10a      	cbz	r2, 8007ca6 <_vfiprintf_r+0x86>
 8007ca2:	2a25      	cmp	r2, #37	@ 0x25
 8007ca4:	d1f9      	bne.n	8007c9a <_vfiprintf_r+0x7a>
 8007ca6:	ebba 0b04 	subs.w	fp, sl, r4
 8007caa:	d00b      	beq.n	8007cc4 <_vfiprintf_r+0xa4>
 8007cac:	465b      	mov	r3, fp
 8007cae:	4622      	mov	r2, r4
 8007cb0:	4629      	mov	r1, r5
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	f7ff ffa1 	bl	8007bfa <__sfputs_r>
 8007cb8:	3001      	adds	r0, #1
 8007cba:	f000 80a7 	beq.w	8007e0c <_vfiprintf_r+0x1ec>
 8007cbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cc0:	445a      	add	r2, fp
 8007cc2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f000 809f 	beq.w	8007e0c <_vfiprintf_r+0x1ec>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007cd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cd8:	f10a 0a01 	add.w	sl, sl, #1
 8007cdc:	9304      	str	r3, [sp, #16]
 8007cde:	9307      	str	r3, [sp, #28]
 8007ce0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ce4:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ce6:	4654      	mov	r4, sl
 8007ce8:	2205      	movs	r2, #5
 8007cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cee:	4853      	ldr	r0, [pc, #332]	@ (8007e3c <_vfiprintf_r+0x21c>)
 8007cf0:	f7f8 fa46 	bl	8000180 <memchr>
 8007cf4:	9a04      	ldr	r2, [sp, #16]
 8007cf6:	b9d8      	cbnz	r0, 8007d30 <_vfiprintf_r+0x110>
 8007cf8:	06d1      	lsls	r1, r2, #27
 8007cfa:	bf44      	itt	mi
 8007cfc:	2320      	movmi	r3, #32
 8007cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d02:	0713      	lsls	r3, r2, #28
 8007d04:	bf44      	itt	mi
 8007d06:	232b      	movmi	r3, #43	@ 0x2b
 8007d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8007d10:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d12:	d015      	beq.n	8007d40 <_vfiprintf_r+0x120>
 8007d14:	9a07      	ldr	r2, [sp, #28]
 8007d16:	4654      	mov	r4, sl
 8007d18:	2000      	movs	r0, #0
 8007d1a:	f04f 0c0a 	mov.w	ip, #10
 8007d1e:	4621      	mov	r1, r4
 8007d20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d24:	3b30      	subs	r3, #48	@ 0x30
 8007d26:	2b09      	cmp	r3, #9
 8007d28:	d94b      	bls.n	8007dc2 <_vfiprintf_r+0x1a2>
 8007d2a:	b1b0      	cbz	r0, 8007d5a <_vfiprintf_r+0x13a>
 8007d2c:	9207      	str	r2, [sp, #28]
 8007d2e:	e014      	b.n	8007d5a <_vfiprintf_r+0x13a>
 8007d30:	eba0 0308 	sub.w	r3, r0, r8
 8007d34:	fa09 f303 	lsl.w	r3, r9, r3
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	9304      	str	r3, [sp, #16]
 8007d3c:	46a2      	mov	sl, r4
 8007d3e:	e7d2      	b.n	8007ce6 <_vfiprintf_r+0xc6>
 8007d40:	9b03      	ldr	r3, [sp, #12]
 8007d42:	1d19      	adds	r1, r3, #4
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	9103      	str	r1, [sp, #12]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	bfbb      	ittet	lt
 8007d4c:	425b      	neglt	r3, r3
 8007d4e:	f042 0202 	orrlt.w	r2, r2, #2
 8007d52:	9307      	strge	r3, [sp, #28]
 8007d54:	9307      	strlt	r3, [sp, #28]
 8007d56:	bfb8      	it	lt
 8007d58:	9204      	strlt	r2, [sp, #16]
 8007d5a:	7823      	ldrb	r3, [r4, #0]
 8007d5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d5e:	d10a      	bne.n	8007d76 <_vfiprintf_r+0x156>
 8007d60:	7863      	ldrb	r3, [r4, #1]
 8007d62:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d64:	d132      	bne.n	8007dcc <_vfiprintf_r+0x1ac>
 8007d66:	9b03      	ldr	r3, [sp, #12]
 8007d68:	1d1a      	adds	r2, r3, #4
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	9203      	str	r2, [sp, #12]
 8007d6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d72:	3402      	adds	r4, #2
 8007d74:	9305      	str	r3, [sp, #20]
 8007d76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007e4c <_vfiprintf_r+0x22c>
 8007d7a:	7821      	ldrb	r1, [r4, #0]
 8007d7c:	2203      	movs	r2, #3
 8007d7e:	4650      	mov	r0, sl
 8007d80:	f7f8 f9fe 	bl	8000180 <memchr>
 8007d84:	b138      	cbz	r0, 8007d96 <_vfiprintf_r+0x176>
 8007d86:	9b04      	ldr	r3, [sp, #16]
 8007d88:	eba0 000a 	sub.w	r0, r0, sl
 8007d8c:	2240      	movs	r2, #64	@ 0x40
 8007d8e:	4082      	lsls	r2, r0
 8007d90:	4313      	orrs	r3, r2
 8007d92:	3401      	adds	r4, #1
 8007d94:	9304      	str	r3, [sp, #16]
 8007d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d9a:	4829      	ldr	r0, [pc, #164]	@ (8007e40 <_vfiprintf_r+0x220>)
 8007d9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007da0:	2206      	movs	r2, #6
 8007da2:	f7f8 f9ed 	bl	8000180 <memchr>
 8007da6:	2800      	cmp	r0, #0
 8007da8:	d03f      	beq.n	8007e2a <_vfiprintf_r+0x20a>
 8007daa:	4b26      	ldr	r3, [pc, #152]	@ (8007e44 <_vfiprintf_r+0x224>)
 8007dac:	bb1b      	cbnz	r3, 8007df6 <_vfiprintf_r+0x1d6>
 8007dae:	9b03      	ldr	r3, [sp, #12]
 8007db0:	3307      	adds	r3, #7
 8007db2:	f023 0307 	bic.w	r3, r3, #7
 8007db6:	3308      	adds	r3, #8
 8007db8:	9303      	str	r3, [sp, #12]
 8007dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dbc:	443b      	add	r3, r7
 8007dbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dc0:	e76a      	b.n	8007c98 <_vfiprintf_r+0x78>
 8007dc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dc6:	460c      	mov	r4, r1
 8007dc8:	2001      	movs	r0, #1
 8007dca:	e7a8      	b.n	8007d1e <_vfiprintf_r+0xfe>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	3401      	adds	r4, #1
 8007dd0:	9305      	str	r3, [sp, #20]
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	f04f 0c0a 	mov.w	ip, #10
 8007dd8:	4620      	mov	r0, r4
 8007dda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dde:	3a30      	subs	r2, #48	@ 0x30
 8007de0:	2a09      	cmp	r2, #9
 8007de2:	d903      	bls.n	8007dec <_vfiprintf_r+0x1cc>
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d0c6      	beq.n	8007d76 <_vfiprintf_r+0x156>
 8007de8:	9105      	str	r1, [sp, #20]
 8007dea:	e7c4      	b.n	8007d76 <_vfiprintf_r+0x156>
 8007dec:	fb0c 2101 	mla	r1, ip, r1, r2
 8007df0:	4604      	mov	r4, r0
 8007df2:	2301      	movs	r3, #1
 8007df4:	e7f0      	b.n	8007dd8 <_vfiprintf_r+0x1b8>
 8007df6:	ab03      	add	r3, sp, #12
 8007df8:	9300      	str	r3, [sp, #0]
 8007dfa:	462a      	mov	r2, r5
 8007dfc:	4b12      	ldr	r3, [pc, #72]	@ (8007e48 <_vfiprintf_r+0x228>)
 8007dfe:	a904      	add	r1, sp, #16
 8007e00:	4630      	mov	r0, r6
 8007e02:	f3af 8000 	nop.w
 8007e06:	4607      	mov	r7, r0
 8007e08:	1c78      	adds	r0, r7, #1
 8007e0a:	d1d6      	bne.n	8007dba <_vfiprintf_r+0x19a>
 8007e0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e0e:	07d9      	lsls	r1, r3, #31
 8007e10:	d405      	bmi.n	8007e1e <_vfiprintf_r+0x1fe>
 8007e12:	89ab      	ldrh	r3, [r5, #12]
 8007e14:	059a      	lsls	r2, r3, #22
 8007e16:	d402      	bmi.n	8007e1e <_vfiprintf_r+0x1fe>
 8007e18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e1a:	f7ff fdcf 	bl	80079bc <__retarget_lock_release_recursive>
 8007e1e:	89ab      	ldrh	r3, [r5, #12]
 8007e20:	065b      	lsls	r3, r3, #25
 8007e22:	f53f af1f 	bmi.w	8007c64 <_vfiprintf_r+0x44>
 8007e26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e28:	e71e      	b.n	8007c68 <_vfiprintf_r+0x48>
 8007e2a:	ab03      	add	r3, sp, #12
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	462a      	mov	r2, r5
 8007e30:	4b05      	ldr	r3, [pc, #20]	@ (8007e48 <_vfiprintf_r+0x228>)
 8007e32:	a904      	add	r1, sp, #16
 8007e34:	4630      	mov	r0, r6
 8007e36:	f000 f879 	bl	8007f2c <_printf_i>
 8007e3a:	e7e4      	b.n	8007e06 <_vfiprintf_r+0x1e6>
 8007e3c:	080086f0 	.word	0x080086f0
 8007e40:	080086fa 	.word	0x080086fa
 8007e44:	00000000 	.word	0x00000000
 8007e48:	08007bfb 	.word	0x08007bfb
 8007e4c:	080086f6 	.word	0x080086f6

08007e50 <_printf_common>:
 8007e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e54:	4616      	mov	r6, r2
 8007e56:	4698      	mov	r8, r3
 8007e58:	688a      	ldr	r2, [r1, #8]
 8007e5a:	690b      	ldr	r3, [r1, #16]
 8007e5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007e60:	4293      	cmp	r3, r2
 8007e62:	bfb8      	it	lt
 8007e64:	4613      	movlt	r3, r2
 8007e66:	6033      	str	r3, [r6, #0]
 8007e68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007e6c:	4607      	mov	r7, r0
 8007e6e:	460c      	mov	r4, r1
 8007e70:	b10a      	cbz	r2, 8007e76 <_printf_common+0x26>
 8007e72:	3301      	adds	r3, #1
 8007e74:	6033      	str	r3, [r6, #0]
 8007e76:	6823      	ldr	r3, [r4, #0]
 8007e78:	0699      	lsls	r1, r3, #26
 8007e7a:	bf42      	ittt	mi
 8007e7c:	6833      	ldrmi	r3, [r6, #0]
 8007e7e:	3302      	addmi	r3, #2
 8007e80:	6033      	strmi	r3, [r6, #0]
 8007e82:	6825      	ldr	r5, [r4, #0]
 8007e84:	f015 0506 	ands.w	r5, r5, #6
 8007e88:	d106      	bne.n	8007e98 <_printf_common+0x48>
 8007e8a:	f104 0a19 	add.w	sl, r4, #25
 8007e8e:	68e3      	ldr	r3, [r4, #12]
 8007e90:	6832      	ldr	r2, [r6, #0]
 8007e92:	1a9b      	subs	r3, r3, r2
 8007e94:	42ab      	cmp	r3, r5
 8007e96:	dc26      	bgt.n	8007ee6 <_printf_common+0x96>
 8007e98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e9c:	6822      	ldr	r2, [r4, #0]
 8007e9e:	3b00      	subs	r3, #0
 8007ea0:	bf18      	it	ne
 8007ea2:	2301      	movne	r3, #1
 8007ea4:	0692      	lsls	r2, r2, #26
 8007ea6:	d42b      	bmi.n	8007f00 <_printf_common+0xb0>
 8007ea8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007eac:	4641      	mov	r1, r8
 8007eae:	4638      	mov	r0, r7
 8007eb0:	47c8      	blx	r9
 8007eb2:	3001      	adds	r0, #1
 8007eb4:	d01e      	beq.n	8007ef4 <_printf_common+0xa4>
 8007eb6:	6823      	ldr	r3, [r4, #0]
 8007eb8:	6922      	ldr	r2, [r4, #16]
 8007eba:	f003 0306 	and.w	r3, r3, #6
 8007ebe:	2b04      	cmp	r3, #4
 8007ec0:	bf02      	ittt	eq
 8007ec2:	68e5      	ldreq	r5, [r4, #12]
 8007ec4:	6833      	ldreq	r3, [r6, #0]
 8007ec6:	1aed      	subeq	r5, r5, r3
 8007ec8:	68a3      	ldr	r3, [r4, #8]
 8007eca:	bf0c      	ite	eq
 8007ecc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ed0:	2500      	movne	r5, #0
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	bfc4      	itt	gt
 8007ed6:	1a9b      	subgt	r3, r3, r2
 8007ed8:	18ed      	addgt	r5, r5, r3
 8007eda:	2600      	movs	r6, #0
 8007edc:	341a      	adds	r4, #26
 8007ede:	42b5      	cmp	r5, r6
 8007ee0:	d11a      	bne.n	8007f18 <_printf_common+0xc8>
 8007ee2:	2000      	movs	r0, #0
 8007ee4:	e008      	b.n	8007ef8 <_printf_common+0xa8>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	4652      	mov	r2, sl
 8007eea:	4641      	mov	r1, r8
 8007eec:	4638      	mov	r0, r7
 8007eee:	47c8      	blx	r9
 8007ef0:	3001      	adds	r0, #1
 8007ef2:	d103      	bne.n	8007efc <_printf_common+0xac>
 8007ef4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007efc:	3501      	adds	r5, #1
 8007efe:	e7c6      	b.n	8007e8e <_printf_common+0x3e>
 8007f00:	18e1      	adds	r1, r4, r3
 8007f02:	1c5a      	adds	r2, r3, #1
 8007f04:	2030      	movs	r0, #48	@ 0x30
 8007f06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007f0a:	4422      	add	r2, r4
 8007f0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007f10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007f14:	3302      	adds	r3, #2
 8007f16:	e7c7      	b.n	8007ea8 <_printf_common+0x58>
 8007f18:	2301      	movs	r3, #1
 8007f1a:	4622      	mov	r2, r4
 8007f1c:	4641      	mov	r1, r8
 8007f1e:	4638      	mov	r0, r7
 8007f20:	47c8      	blx	r9
 8007f22:	3001      	adds	r0, #1
 8007f24:	d0e6      	beq.n	8007ef4 <_printf_common+0xa4>
 8007f26:	3601      	adds	r6, #1
 8007f28:	e7d9      	b.n	8007ede <_printf_common+0x8e>
	...

08007f2c <_printf_i>:
 8007f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f30:	7e0f      	ldrb	r7, [r1, #24]
 8007f32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007f34:	2f78      	cmp	r7, #120	@ 0x78
 8007f36:	4691      	mov	r9, r2
 8007f38:	4680      	mov	r8, r0
 8007f3a:	460c      	mov	r4, r1
 8007f3c:	469a      	mov	sl, r3
 8007f3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007f42:	d807      	bhi.n	8007f54 <_printf_i+0x28>
 8007f44:	2f62      	cmp	r7, #98	@ 0x62
 8007f46:	d80a      	bhi.n	8007f5e <_printf_i+0x32>
 8007f48:	2f00      	cmp	r7, #0
 8007f4a:	f000 80d1 	beq.w	80080f0 <_printf_i+0x1c4>
 8007f4e:	2f58      	cmp	r7, #88	@ 0x58
 8007f50:	f000 80b8 	beq.w	80080c4 <_printf_i+0x198>
 8007f54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007f5c:	e03a      	b.n	8007fd4 <_printf_i+0xa8>
 8007f5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007f62:	2b15      	cmp	r3, #21
 8007f64:	d8f6      	bhi.n	8007f54 <_printf_i+0x28>
 8007f66:	a101      	add	r1, pc, #4	@ (adr r1, 8007f6c <_printf_i+0x40>)
 8007f68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f6c:	08007fc5 	.word	0x08007fc5
 8007f70:	08007fd9 	.word	0x08007fd9
 8007f74:	08007f55 	.word	0x08007f55
 8007f78:	08007f55 	.word	0x08007f55
 8007f7c:	08007f55 	.word	0x08007f55
 8007f80:	08007f55 	.word	0x08007f55
 8007f84:	08007fd9 	.word	0x08007fd9
 8007f88:	08007f55 	.word	0x08007f55
 8007f8c:	08007f55 	.word	0x08007f55
 8007f90:	08007f55 	.word	0x08007f55
 8007f94:	08007f55 	.word	0x08007f55
 8007f98:	080080d7 	.word	0x080080d7
 8007f9c:	08008003 	.word	0x08008003
 8007fa0:	08008091 	.word	0x08008091
 8007fa4:	08007f55 	.word	0x08007f55
 8007fa8:	08007f55 	.word	0x08007f55
 8007fac:	080080f9 	.word	0x080080f9
 8007fb0:	08007f55 	.word	0x08007f55
 8007fb4:	08008003 	.word	0x08008003
 8007fb8:	08007f55 	.word	0x08007f55
 8007fbc:	08007f55 	.word	0x08007f55
 8007fc0:	08008099 	.word	0x08008099
 8007fc4:	6833      	ldr	r3, [r6, #0]
 8007fc6:	1d1a      	adds	r2, r3, #4
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	6032      	str	r2, [r6, #0]
 8007fcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007fd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e09c      	b.n	8008112 <_printf_i+0x1e6>
 8007fd8:	6833      	ldr	r3, [r6, #0]
 8007fda:	6820      	ldr	r0, [r4, #0]
 8007fdc:	1d19      	adds	r1, r3, #4
 8007fde:	6031      	str	r1, [r6, #0]
 8007fe0:	0606      	lsls	r6, r0, #24
 8007fe2:	d501      	bpl.n	8007fe8 <_printf_i+0xbc>
 8007fe4:	681d      	ldr	r5, [r3, #0]
 8007fe6:	e003      	b.n	8007ff0 <_printf_i+0xc4>
 8007fe8:	0645      	lsls	r5, r0, #25
 8007fea:	d5fb      	bpl.n	8007fe4 <_printf_i+0xb8>
 8007fec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007ff0:	2d00      	cmp	r5, #0
 8007ff2:	da03      	bge.n	8007ffc <_printf_i+0xd0>
 8007ff4:	232d      	movs	r3, #45	@ 0x2d
 8007ff6:	426d      	negs	r5, r5
 8007ff8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ffc:	4858      	ldr	r0, [pc, #352]	@ (8008160 <_printf_i+0x234>)
 8007ffe:	230a      	movs	r3, #10
 8008000:	e011      	b.n	8008026 <_printf_i+0xfa>
 8008002:	6821      	ldr	r1, [r4, #0]
 8008004:	6833      	ldr	r3, [r6, #0]
 8008006:	0608      	lsls	r0, r1, #24
 8008008:	f853 5b04 	ldr.w	r5, [r3], #4
 800800c:	d402      	bmi.n	8008014 <_printf_i+0xe8>
 800800e:	0649      	lsls	r1, r1, #25
 8008010:	bf48      	it	mi
 8008012:	b2ad      	uxthmi	r5, r5
 8008014:	2f6f      	cmp	r7, #111	@ 0x6f
 8008016:	4852      	ldr	r0, [pc, #328]	@ (8008160 <_printf_i+0x234>)
 8008018:	6033      	str	r3, [r6, #0]
 800801a:	bf14      	ite	ne
 800801c:	230a      	movne	r3, #10
 800801e:	2308      	moveq	r3, #8
 8008020:	2100      	movs	r1, #0
 8008022:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008026:	6866      	ldr	r6, [r4, #4]
 8008028:	60a6      	str	r6, [r4, #8]
 800802a:	2e00      	cmp	r6, #0
 800802c:	db05      	blt.n	800803a <_printf_i+0x10e>
 800802e:	6821      	ldr	r1, [r4, #0]
 8008030:	432e      	orrs	r6, r5
 8008032:	f021 0104 	bic.w	r1, r1, #4
 8008036:	6021      	str	r1, [r4, #0]
 8008038:	d04b      	beq.n	80080d2 <_printf_i+0x1a6>
 800803a:	4616      	mov	r6, r2
 800803c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008040:	fb03 5711 	mls	r7, r3, r1, r5
 8008044:	5dc7      	ldrb	r7, [r0, r7]
 8008046:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800804a:	462f      	mov	r7, r5
 800804c:	42bb      	cmp	r3, r7
 800804e:	460d      	mov	r5, r1
 8008050:	d9f4      	bls.n	800803c <_printf_i+0x110>
 8008052:	2b08      	cmp	r3, #8
 8008054:	d10b      	bne.n	800806e <_printf_i+0x142>
 8008056:	6823      	ldr	r3, [r4, #0]
 8008058:	07df      	lsls	r7, r3, #31
 800805a:	d508      	bpl.n	800806e <_printf_i+0x142>
 800805c:	6923      	ldr	r3, [r4, #16]
 800805e:	6861      	ldr	r1, [r4, #4]
 8008060:	4299      	cmp	r1, r3
 8008062:	bfde      	ittt	le
 8008064:	2330      	movle	r3, #48	@ 0x30
 8008066:	f806 3c01 	strble.w	r3, [r6, #-1]
 800806a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800806e:	1b92      	subs	r2, r2, r6
 8008070:	6122      	str	r2, [r4, #16]
 8008072:	f8cd a000 	str.w	sl, [sp]
 8008076:	464b      	mov	r3, r9
 8008078:	aa03      	add	r2, sp, #12
 800807a:	4621      	mov	r1, r4
 800807c:	4640      	mov	r0, r8
 800807e:	f7ff fee7 	bl	8007e50 <_printf_common>
 8008082:	3001      	adds	r0, #1
 8008084:	d14a      	bne.n	800811c <_printf_i+0x1f0>
 8008086:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800808a:	b004      	add	sp, #16
 800808c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008090:	6823      	ldr	r3, [r4, #0]
 8008092:	f043 0320 	orr.w	r3, r3, #32
 8008096:	6023      	str	r3, [r4, #0]
 8008098:	4832      	ldr	r0, [pc, #200]	@ (8008164 <_printf_i+0x238>)
 800809a:	2778      	movs	r7, #120	@ 0x78
 800809c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80080a0:	6823      	ldr	r3, [r4, #0]
 80080a2:	6831      	ldr	r1, [r6, #0]
 80080a4:	061f      	lsls	r7, r3, #24
 80080a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80080aa:	d402      	bmi.n	80080b2 <_printf_i+0x186>
 80080ac:	065f      	lsls	r7, r3, #25
 80080ae:	bf48      	it	mi
 80080b0:	b2ad      	uxthmi	r5, r5
 80080b2:	6031      	str	r1, [r6, #0]
 80080b4:	07d9      	lsls	r1, r3, #31
 80080b6:	bf44      	itt	mi
 80080b8:	f043 0320 	orrmi.w	r3, r3, #32
 80080bc:	6023      	strmi	r3, [r4, #0]
 80080be:	b11d      	cbz	r5, 80080c8 <_printf_i+0x19c>
 80080c0:	2310      	movs	r3, #16
 80080c2:	e7ad      	b.n	8008020 <_printf_i+0xf4>
 80080c4:	4826      	ldr	r0, [pc, #152]	@ (8008160 <_printf_i+0x234>)
 80080c6:	e7e9      	b.n	800809c <_printf_i+0x170>
 80080c8:	6823      	ldr	r3, [r4, #0]
 80080ca:	f023 0320 	bic.w	r3, r3, #32
 80080ce:	6023      	str	r3, [r4, #0]
 80080d0:	e7f6      	b.n	80080c0 <_printf_i+0x194>
 80080d2:	4616      	mov	r6, r2
 80080d4:	e7bd      	b.n	8008052 <_printf_i+0x126>
 80080d6:	6833      	ldr	r3, [r6, #0]
 80080d8:	6825      	ldr	r5, [r4, #0]
 80080da:	6961      	ldr	r1, [r4, #20]
 80080dc:	1d18      	adds	r0, r3, #4
 80080de:	6030      	str	r0, [r6, #0]
 80080e0:	062e      	lsls	r6, r5, #24
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	d501      	bpl.n	80080ea <_printf_i+0x1be>
 80080e6:	6019      	str	r1, [r3, #0]
 80080e8:	e002      	b.n	80080f0 <_printf_i+0x1c4>
 80080ea:	0668      	lsls	r0, r5, #25
 80080ec:	d5fb      	bpl.n	80080e6 <_printf_i+0x1ba>
 80080ee:	8019      	strh	r1, [r3, #0]
 80080f0:	2300      	movs	r3, #0
 80080f2:	6123      	str	r3, [r4, #16]
 80080f4:	4616      	mov	r6, r2
 80080f6:	e7bc      	b.n	8008072 <_printf_i+0x146>
 80080f8:	6833      	ldr	r3, [r6, #0]
 80080fa:	1d1a      	adds	r2, r3, #4
 80080fc:	6032      	str	r2, [r6, #0]
 80080fe:	681e      	ldr	r6, [r3, #0]
 8008100:	6862      	ldr	r2, [r4, #4]
 8008102:	2100      	movs	r1, #0
 8008104:	4630      	mov	r0, r6
 8008106:	f7f8 f83b 	bl	8000180 <memchr>
 800810a:	b108      	cbz	r0, 8008110 <_printf_i+0x1e4>
 800810c:	1b80      	subs	r0, r0, r6
 800810e:	6060      	str	r0, [r4, #4]
 8008110:	6863      	ldr	r3, [r4, #4]
 8008112:	6123      	str	r3, [r4, #16]
 8008114:	2300      	movs	r3, #0
 8008116:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800811a:	e7aa      	b.n	8008072 <_printf_i+0x146>
 800811c:	6923      	ldr	r3, [r4, #16]
 800811e:	4632      	mov	r2, r6
 8008120:	4649      	mov	r1, r9
 8008122:	4640      	mov	r0, r8
 8008124:	47d0      	blx	sl
 8008126:	3001      	adds	r0, #1
 8008128:	d0ad      	beq.n	8008086 <_printf_i+0x15a>
 800812a:	6823      	ldr	r3, [r4, #0]
 800812c:	079b      	lsls	r3, r3, #30
 800812e:	d413      	bmi.n	8008158 <_printf_i+0x22c>
 8008130:	68e0      	ldr	r0, [r4, #12]
 8008132:	9b03      	ldr	r3, [sp, #12]
 8008134:	4298      	cmp	r0, r3
 8008136:	bfb8      	it	lt
 8008138:	4618      	movlt	r0, r3
 800813a:	e7a6      	b.n	800808a <_printf_i+0x15e>
 800813c:	2301      	movs	r3, #1
 800813e:	4632      	mov	r2, r6
 8008140:	4649      	mov	r1, r9
 8008142:	4640      	mov	r0, r8
 8008144:	47d0      	blx	sl
 8008146:	3001      	adds	r0, #1
 8008148:	d09d      	beq.n	8008086 <_printf_i+0x15a>
 800814a:	3501      	adds	r5, #1
 800814c:	68e3      	ldr	r3, [r4, #12]
 800814e:	9903      	ldr	r1, [sp, #12]
 8008150:	1a5b      	subs	r3, r3, r1
 8008152:	42ab      	cmp	r3, r5
 8008154:	dcf2      	bgt.n	800813c <_printf_i+0x210>
 8008156:	e7eb      	b.n	8008130 <_printf_i+0x204>
 8008158:	2500      	movs	r5, #0
 800815a:	f104 0619 	add.w	r6, r4, #25
 800815e:	e7f5      	b.n	800814c <_printf_i+0x220>
 8008160:	08008701 	.word	0x08008701
 8008164:	08008712 	.word	0x08008712

08008168 <__sflush_r>:
 8008168:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800816c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008170:	0716      	lsls	r6, r2, #28
 8008172:	4605      	mov	r5, r0
 8008174:	460c      	mov	r4, r1
 8008176:	d454      	bmi.n	8008222 <__sflush_r+0xba>
 8008178:	684b      	ldr	r3, [r1, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	dc02      	bgt.n	8008184 <__sflush_r+0x1c>
 800817e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008180:	2b00      	cmp	r3, #0
 8008182:	dd48      	ble.n	8008216 <__sflush_r+0xae>
 8008184:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008186:	2e00      	cmp	r6, #0
 8008188:	d045      	beq.n	8008216 <__sflush_r+0xae>
 800818a:	2300      	movs	r3, #0
 800818c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008190:	682f      	ldr	r7, [r5, #0]
 8008192:	6a21      	ldr	r1, [r4, #32]
 8008194:	602b      	str	r3, [r5, #0]
 8008196:	d030      	beq.n	80081fa <__sflush_r+0x92>
 8008198:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800819a:	89a3      	ldrh	r3, [r4, #12]
 800819c:	0759      	lsls	r1, r3, #29
 800819e:	d505      	bpl.n	80081ac <__sflush_r+0x44>
 80081a0:	6863      	ldr	r3, [r4, #4]
 80081a2:	1ad2      	subs	r2, r2, r3
 80081a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80081a6:	b10b      	cbz	r3, 80081ac <__sflush_r+0x44>
 80081a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80081aa:	1ad2      	subs	r2, r2, r3
 80081ac:	2300      	movs	r3, #0
 80081ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80081b0:	6a21      	ldr	r1, [r4, #32]
 80081b2:	4628      	mov	r0, r5
 80081b4:	47b0      	blx	r6
 80081b6:	1c43      	adds	r3, r0, #1
 80081b8:	89a3      	ldrh	r3, [r4, #12]
 80081ba:	d106      	bne.n	80081ca <__sflush_r+0x62>
 80081bc:	6829      	ldr	r1, [r5, #0]
 80081be:	291d      	cmp	r1, #29
 80081c0:	d82b      	bhi.n	800821a <__sflush_r+0xb2>
 80081c2:	4a2a      	ldr	r2, [pc, #168]	@ (800826c <__sflush_r+0x104>)
 80081c4:	40ca      	lsrs	r2, r1
 80081c6:	07d6      	lsls	r6, r2, #31
 80081c8:	d527      	bpl.n	800821a <__sflush_r+0xb2>
 80081ca:	2200      	movs	r2, #0
 80081cc:	6062      	str	r2, [r4, #4]
 80081ce:	04d9      	lsls	r1, r3, #19
 80081d0:	6922      	ldr	r2, [r4, #16]
 80081d2:	6022      	str	r2, [r4, #0]
 80081d4:	d504      	bpl.n	80081e0 <__sflush_r+0x78>
 80081d6:	1c42      	adds	r2, r0, #1
 80081d8:	d101      	bne.n	80081de <__sflush_r+0x76>
 80081da:	682b      	ldr	r3, [r5, #0]
 80081dc:	b903      	cbnz	r3, 80081e0 <__sflush_r+0x78>
 80081de:	6560      	str	r0, [r4, #84]	@ 0x54
 80081e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081e2:	602f      	str	r7, [r5, #0]
 80081e4:	b1b9      	cbz	r1, 8008216 <__sflush_r+0xae>
 80081e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081ea:	4299      	cmp	r1, r3
 80081ec:	d002      	beq.n	80081f4 <__sflush_r+0x8c>
 80081ee:	4628      	mov	r0, r5
 80081f0:	f7ff fbf4 	bl	80079dc <_free_r>
 80081f4:	2300      	movs	r3, #0
 80081f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80081f8:	e00d      	b.n	8008216 <__sflush_r+0xae>
 80081fa:	2301      	movs	r3, #1
 80081fc:	4628      	mov	r0, r5
 80081fe:	47b0      	blx	r6
 8008200:	4602      	mov	r2, r0
 8008202:	1c50      	adds	r0, r2, #1
 8008204:	d1c9      	bne.n	800819a <__sflush_r+0x32>
 8008206:	682b      	ldr	r3, [r5, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d0c6      	beq.n	800819a <__sflush_r+0x32>
 800820c:	2b1d      	cmp	r3, #29
 800820e:	d001      	beq.n	8008214 <__sflush_r+0xac>
 8008210:	2b16      	cmp	r3, #22
 8008212:	d11e      	bne.n	8008252 <__sflush_r+0xea>
 8008214:	602f      	str	r7, [r5, #0]
 8008216:	2000      	movs	r0, #0
 8008218:	e022      	b.n	8008260 <__sflush_r+0xf8>
 800821a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800821e:	b21b      	sxth	r3, r3
 8008220:	e01b      	b.n	800825a <__sflush_r+0xf2>
 8008222:	690f      	ldr	r7, [r1, #16]
 8008224:	2f00      	cmp	r7, #0
 8008226:	d0f6      	beq.n	8008216 <__sflush_r+0xae>
 8008228:	0793      	lsls	r3, r2, #30
 800822a:	680e      	ldr	r6, [r1, #0]
 800822c:	bf08      	it	eq
 800822e:	694b      	ldreq	r3, [r1, #20]
 8008230:	600f      	str	r7, [r1, #0]
 8008232:	bf18      	it	ne
 8008234:	2300      	movne	r3, #0
 8008236:	eba6 0807 	sub.w	r8, r6, r7
 800823a:	608b      	str	r3, [r1, #8]
 800823c:	f1b8 0f00 	cmp.w	r8, #0
 8008240:	dde9      	ble.n	8008216 <__sflush_r+0xae>
 8008242:	6a21      	ldr	r1, [r4, #32]
 8008244:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008246:	4643      	mov	r3, r8
 8008248:	463a      	mov	r2, r7
 800824a:	4628      	mov	r0, r5
 800824c:	47b0      	blx	r6
 800824e:	2800      	cmp	r0, #0
 8008250:	dc08      	bgt.n	8008264 <__sflush_r+0xfc>
 8008252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800825a:	81a3      	strh	r3, [r4, #12]
 800825c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008264:	4407      	add	r7, r0
 8008266:	eba8 0800 	sub.w	r8, r8, r0
 800826a:	e7e7      	b.n	800823c <__sflush_r+0xd4>
 800826c:	20400001 	.word	0x20400001

08008270 <_fflush_r>:
 8008270:	b538      	push	{r3, r4, r5, lr}
 8008272:	690b      	ldr	r3, [r1, #16]
 8008274:	4605      	mov	r5, r0
 8008276:	460c      	mov	r4, r1
 8008278:	b913      	cbnz	r3, 8008280 <_fflush_r+0x10>
 800827a:	2500      	movs	r5, #0
 800827c:	4628      	mov	r0, r5
 800827e:	bd38      	pop	{r3, r4, r5, pc}
 8008280:	b118      	cbz	r0, 800828a <_fflush_r+0x1a>
 8008282:	6a03      	ldr	r3, [r0, #32]
 8008284:	b90b      	cbnz	r3, 800828a <_fflush_r+0x1a>
 8008286:	f7ff f943 	bl	8007510 <__sinit>
 800828a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d0f3      	beq.n	800827a <_fflush_r+0xa>
 8008292:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008294:	07d0      	lsls	r0, r2, #31
 8008296:	d404      	bmi.n	80082a2 <_fflush_r+0x32>
 8008298:	0599      	lsls	r1, r3, #22
 800829a:	d402      	bmi.n	80082a2 <_fflush_r+0x32>
 800829c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800829e:	f7ff fb8c 	bl	80079ba <__retarget_lock_acquire_recursive>
 80082a2:	4628      	mov	r0, r5
 80082a4:	4621      	mov	r1, r4
 80082a6:	f7ff ff5f 	bl	8008168 <__sflush_r>
 80082aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082ac:	07da      	lsls	r2, r3, #31
 80082ae:	4605      	mov	r5, r0
 80082b0:	d4e4      	bmi.n	800827c <_fflush_r+0xc>
 80082b2:	89a3      	ldrh	r3, [r4, #12]
 80082b4:	059b      	lsls	r3, r3, #22
 80082b6:	d4e1      	bmi.n	800827c <_fflush_r+0xc>
 80082b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082ba:	f7ff fb7f 	bl	80079bc <__retarget_lock_release_recursive>
 80082be:	e7dd      	b.n	800827c <_fflush_r+0xc>

080082c0 <__swhatbuf_r>:
 80082c0:	b570      	push	{r4, r5, r6, lr}
 80082c2:	460c      	mov	r4, r1
 80082c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082c8:	2900      	cmp	r1, #0
 80082ca:	b096      	sub	sp, #88	@ 0x58
 80082cc:	4615      	mov	r5, r2
 80082ce:	461e      	mov	r6, r3
 80082d0:	da0d      	bge.n	80082ee <__swhatbuf_r+0x2e>
 80082d2:	89a3      	ldrh	r3, [r4, #12]
 80082d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80082d8:	f04f 0100 	mov.w	r1, #0
 80082dc:	bf14      	ite	ne
 80082de:	2340      	movne	r3, #64	@ 0x40
 80082e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80082e4:	2000      	movs	r0, #0
 80082e6:	6031      	str	r1, [r6, #0]
 80082e8:	602b      	str	r3, [r5, #0]
 80082ea:	b016      	add	sp, #88	@ 0x58
 80082ec:	bd70      	pop	{r4, r5, r6, pc}
 80082ee:	466a      	mov	r2, sp
 80082f0:	f000 f848 	bl	8008384 <_fstat_r>
 80082f4:	2800      	cmp	r0, #0
 80082f6:	dbec      	blt.n	80082d2 <__swhatbuf_r+0x12>
 80082f8:	9901      	ldr	r1, [sp, #4]
 80082fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80082fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008302:	4259      	negs	r1, r3
 8008304:	4159      	adcs	r1, r3
 8008306:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800830a:	e7eb      	b.n	80082e4 <__swhatbuf_r+0x24>

0800830c <__smakebuf_r>:
 800830c:	898b      	ldrh	r3, [r1, #12]
 800830e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008310:	079d      	lsls	r5, r3, #30
 8008312:	4606      	mov	r6, r0
 8008314:	460c      	mov	r4, r1
 8008316:	d507      	bpl.n	8008328 <__smakebuf_r+0x1c>
 8008318:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800831c:	6023      	str	r3, [r4, #0]
 800831e:	6123      	str	r3, [r4, #16]
 8008320:	2301      	movs	r3, #1
 8008322:	6163      	str	r3, [r4, #20]
 8008324:	b003      	add	sp, #12
 8008326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008328:	ab01      	add	r3, sp, #4
 800832a:	466a      	mov	r2, sp
 800832c:	f7ff ffc8 	bl	80082c0 <__swhatbuf_r>
 8008330:	9f00      	ldr	r7, [sp, #0]
 8008332:	4605      	mov	r5, r0
 8008334:	4639      	mov	r1, r7
 8008336:	4630      	mov	r0, r6
 8008338:	f7ff fbbc 	bl	8007ab4 <_malloc_r>
 800833c:	b948      	cbnz	r0, 8008352 <__smakebuf_r+0x46>
 800833e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008342:	059a      	lsls	r2, r3, #22
 8008344:	d4ee      	bmi.n	8008324 <__smakebuf_r+0x18>
 8008346:	f023 0303 	bic.w	r3, r3, #3
 800834a:	f043 0302 	orr.w	r3, r3, #2
 800834e:	81a3      	strh	r3, [r4, #12]
 8008350:	e7e2      	b.n	8008318 <__smakebuf_r+0xc>
 8008352:	89a3      	ldrh	r3, [r4, #12]
 8008354:	6020      	str	r0, [r4, #0]
 8008356:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800835a:	81a3      	strh	r3, [r4, #12]
 800835c:	9b01      	ldr	r3, [sp, #4]
 800835e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008362:	b15b      	cbz	r3, 800837c <__smakebuf_r+0x70>
 8008364:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008368:	4630      	mov	r0, r6
 800836a:	f000 f81d 	bl	80083a8 <_isatty_r>
 800836e:	b128      	cbz	r0, 800837c <__smakebuf_r+0x70>
 8008370:	89a3      	ldrh	r3, [r4, #12]
 8008372:	f023 0303 	bic.w	r3, r3, #3
 8008376:	f043 0301 	orr.w	r3, r3, #1
 800837a:	81a3      	strh	r3, [r4, #12]
 800837c:	89a3      	ldrh	r3, [r4, #12]
 800837e:	431d      	orrs	r5, r3
 8008380:	81a5      	strh	r5, [r4, #12]
 8008382:	e7cf      	b.n	8008324 <__smakebuf_r+0x18>

08008384 <_fstat_r>:
 8008384:	b538      	push	{r3, r4, r5, lr}
 8008386:	4d07      	ldr	r5, [pc, #28]	@ (80083a4 <_fstat_r+0x20>)
 8008388:	2300      	movs	r3, #0
 800838a:	4604      	mov	r4, r0
 800838c:	4608      	mov	r0, r1
 800838e:	4611      	mov	r1, r2
 8008390:	602b      	str	r3, [r5, #0]
 8008392:	f7f8 fd3e 	bl	8000e12 <_fstat>
 8008396:	1c43      	adds	r3, r0, #1
 8008398:	d102      	bne.n	80083a0 <_fstat_r+0x1c>
 800839a:	682b      	ldr	r3, [r5, #0]
 800839c:	b103      	cbz	r3, 80083a0 <_fstat_r+0x1c>
 800839e:	6023      	str	r3, [r4, #0]
 80083a0:	bd38      	pop	{r3, r4, r5, pc}
 80083a2:	bf00      	nop
 80083a4:	20001ccc 	.word	0x20001ccc

080083a8 <_isatty_r>:
 80083a8:	b538      	push	{r3, r4, r5, lr}
 80083aa:	4d06      	ldr	r5, [pc, #24]	@ (80083c4 <_isatty_r+0x1c>)
 80083ac:	2300      	movs	r3, #0
 80083ae:	4604      	mov	r4, r0
 80083b0:	4608      	mov	r0, r1
 80083b2:	602b      	str	r3, [r5, #0]
 80083b4:	f7f8 fd3d 	bl	8000e32 <_isatty>
 80083b8:	1c43      	adds	r3, r0, #1
 80083ba:	d102      	bne.n	80083c2 <_isatty_r+0x1a>
 80083bc:	682b      	ldr	r3, [r5, #0]
 80083be:	b103      	cbz	r3, 80083c2 <_isatty_r+0x1a>
 80083c0:	6023      	str	r3, [r4, #0]
 80083c2:	bd38      	pop	{r3, r4, r5, pc}
 80083c4:	20001ccc 	.word	0x20001ccc

080083c8 <_sbrk_r>:
 80083c8:	b538      	push	{r3, r4, r5, lr}
 80083ca:	4d06      	ldr	r5, [pc, #24]	@ (80083e4 <_sbrk_r+0x1c>)
 80083cc:	2300      	movs	r3, #0
 80083ce:	4604      	mov	r4, r0
 80083d0:	4608      	mov	r0, r1
 80083d2:	602b      	str	r3, [r5, #0]
 80083d4:	f7f8 fd46 	bl	8000e64 <_sbrk>
 80083d8:	1c43      	adds	r3, r0, #1
 80083da:	d102      	bne.n	80083e2 <_sbrk_r+0x1a>
 80083dc:	682b      	ldr	r3, [r5, #0]
 80083de:	b103      	cbz	r3, 80083e2 <_sbrk_r+0x1a>
 80083e0:	6023      	str	r3, [r4, #0]
 80083e2:	bd38      	pop	{r3, r4, r5, pc}
 80083e4:	20001ccc 	.word	0x20001ccc

080083e8 <_init>:
 80083e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ea:	bf00      	nop
 80083ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ee:	bc08      	pop	{r3}
 80083f0:	469e      	mov	lr, r3
 80083f2:	4770      	bx	lr

080083f4 <_fini>:
 80083f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083f6:	bf00      	nop
 80083f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083fa:	bc08      	pop	{r3}
 80083fc:	469e      	mov	lr, r3
 80083fe:	4770      	bx	lr
