
V2X_OBU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008688  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  080087c8  080087c8  000097c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008bcc  08008bcc  00009bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008bd4  08008bd4  00009bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008bd8  08008bd8  00009bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  20000008  08008bdc  0000a008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001cfc  20000080  08008c54  0000a080  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20001d7c  08008c54  0000ad7c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021e49  00000000  00000000  0000a0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000044fc  00000000  00000000  0002bef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000020d8  00000000  00000000  000303f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000194c  00000000  00000000  000324d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000052f8  00000000  00000000  00033e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d794  00000000  00000000  00039114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ee251  00000000  00000000  000568a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00144af9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009370  00000000  00000000  00144b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  0014deac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000080 	.word	0x20000080
 800015c:	00000000 	.word	0x00000000
 8000160:	080087b0 	.word	0x080087b0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000084 	.word	0x20000084
 800017c:	080087b0 	.word	0x080087b0

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000554:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000558:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800055c:	f003 0301 	and.w	r3, r3, #1
 8000560:	2b00      	cmp	r3, #0
 8000562:	d013      	beq.n	800058c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000564:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000568:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800056c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000570:	2b00      	cmp	r3, #0
 8000572:	d00b      	beq.n	800058c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000574:	e000      	b.n	8000578 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000576:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000578:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d0f9      	beq.n	8000576 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000582:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	b2d2      	uxtb	r2, r2
 800058a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800058c:	687b      	ldr	r3, [r7, #4]
}
 800058e:	4618      	mov	r0, r3
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800059a:	b480      	push	{r7}
 800059c:	b085      	sub	sp, #20
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4313      	orrs	r3, r2
 80005b0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4013      	ands	r3, r2
 80005bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005be:	68fb      	ldr	r3, [r7, #12]
}
 80005c0:	bf00      	nop
 80005c2:	3714      	adds	r7, #20
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <ValidateReceivedData>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//THIS IS TO VALIDATE RECEIVED DATA
uint8_t ValidateReceivedData(Item *data) {
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
    // Check if at least one byte of MAC address is non-zero
    for (int i = 0; i < 6; i++) {
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	e00b      	b.n	80005f2 <ValidateReceivedData+0x26>
        if (data->MacAddress[i] != 0) {
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4413      	add	r3, r2
 80005e0:	3304      	adds	r3, #4
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <ValidateReceivedData+0x20>
            return 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	e006      	b.n	80005fa <ValidateReceivedData+0x2e>
    for (int i = 0; i < 6; i++) {
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	3301      	adds	r3, #1
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	2b05      	cmp	r3, #5
 80005f6:	ddf0      	ble.n	80005da <ValidateReceivedData+0xe>
        }
    }
    return 0;
 80005f8:	2300      	movs	r3, #0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
	...

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 fefc 	bl	8001408 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f874 	bl	80006fc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000614:	f000 f8ca 	bl	80007ac <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000618:	f000 f97e 	bl	8000918 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800061c:	f000 f930 	bl	8000880 <MX_USART1_UART_Init>
  MX_LPUART1_UART_Init();
 8000620:	f000 f8e2 	bl	80007e8 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("STM32 will start receiving Item struct data via UART...\n");
 8000624:	4826      	ldr	r0, [pc, #152]	@ (80006c0 <main+0xb8>)
 8000626:	f007 f9c1 	bl	80079ac <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800062a:	f004 fa9f 	bl	8004b6c <osKernelInitialize>

  /* USER CODE BEGIN RTOS_TIMERS */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  UARTQueue = xQueueCreate(10, sizeof(Item));  // Increased queue size
 800062e:	2200      	movs	r2, #0
 8000630:	210c      	movs	r1, #12
 8000632:	200a      	movs	r0, #10
 8000634:	f004 fd61 	bl	80050fa <xQueueGenericCreate>
 8000638:	4603      	mov	r3, r0
 800063a:	4a22      	ldr	r2, [pc, #136]	@ (80006c4 <main+0xbc>)
 800063c:	6013      	str	r3, [r2, #0]
  if (UARTQueue == NULL) {
 800063e:	4b21      	ldr	r3, [pc, #132]	@ (80006c4 <main+0xbc>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d101      	bne.n	800064a <main+0x42>
      Error_Handler(); // Handle queue creation failure
 8000646:	f000 fb7a 	bl	8000d3e <Error_Handler>
  }
  UARTQueue2 = xQueueCreate(10, sizeof(Item));  // Increased queue size
 800064a:	2200      	movs	r2, #0
 800064c:	210c      	movs	r1, #12
 800064e:	200a      	movs	r0, #10
 8000650:	f004 fd53 	bl	80050fa <xQueueGenericCreate>
 8000654:	4603      	mov	r3, r0
 8000656:	4a1c      	ldr	r2, [pc, #112]	@ (80006c8 <main+0xc0>)
 8000658:	6013      	str	r3, [r2, #0]
  if (UARTQueue2 == NULL) {
 800065a:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <main+0xc0>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d101      	bne.n	8000666 <main+0x5e>
      Error_Handler(); // Handle queue creation failure
 8000662:	f000 fb6c 	bl	8000d3e <Error_Handler>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of SenderTask */
  SenderTaskHandle = osThreadNew(StartSenderTask, NULL, &SenderTask_attributes);
 8000666:	4a19      	ldr	r2, [pc, #100]	@ (80006cc <main+0xc4>)
 8000668:	2100      	movs	r1, #0
 800066a:	4819      	ldr	r0, [pc, #100]	@ (80006d0 <main+0xc8>)
 800066c:	f004 fac8 	bl	8004c00 <osThreadNew>
 8000670:	4603      	mov	r3, r0
 8000672:	4a18      	ldr	r2, [pc, #96]	@ (80006d4 <main+0xcc>)
 8000674:	6013      	str	r3, [r2, #0]

  /* creation of TskUART */
  TskUARTHandle = osThreadNew(StartTskUART, NULL, &TskUART_attributes);
 8000676:	4a18      	ldr	r2, [pc, #96]	@ (80006d8 <main+0xd0>)
 8000678:	2100      	movs	r1, #0
 800067a:	4818      	ldr	r0, [pc, #96]	@ (80006dc <main+0xd4>)
 800067c:	f004 fac0 	bl	8004c00 <osThreadNew>
 8000680:	4603      	mov	r3, r0
 8000682:	4a17      	ldr	r2, [pc, #92]	@ (80006e0 <main+0xd8>)
 8000684:	6013      	str	r3, [r2, #0]

  /* creation of SenderTask2 */
  SenderTask2Handle = osThreadNew(StartSenderTask2, NULL, &SenderTask2_attributes);
 8000686:	4a17      	ldr	r2, [pc, #92]	@ (80006e4 <main+0xdc>)
 8000688:	2100      	movs	r1, #0
 800068a:	4817      	ldr	r0, [pc, #92]	@ (80006e8 <main+0xe0>)
 800068c:	f004 fab8 	bl	8004c00 <osThreadNew>
 8000690:	4603      	mov	r3, r0
 8000692:	4a16      	ldr	r2, [pc, #88]	@ (80006ec <main+0xe4>)
 8000694:	6013      	str	r3, [r2, #0]

  /* creation of TskUART2 */
  TskUART2Handle = osThreadNew(StartTskUART2, NULL, &TskUART2_attributes);
 8000696:	4a16      	ldr	r2, [pc, #88]	@ (80006f0 <main+0xe8>)
 8000698:	2100      	movs	r1, #0
 800069a:	4816      	ldr	r0, [pc, #88]	@ (80006f4 <main+0xec>)
 800069c:	f004 fab0 	bl	8004c00 <osThreadNew>
 80006a0:	4603      	mov	r3, r0
 80006a2:	4a15      	ldr	r2, [pc, #84]	@ (80006f8 <main+0xf0>)
 80006a4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 80006a6:	2000      	movs	r0, #0
 80006a8:	f000 fe5a 	bl	8001360 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80006ac:	2001      	movs	r0, #1
 80006ae:	f000 fe57 	bl	8001360 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80006b2:	2002      	movs	r0, #2
 80006b4:	f000 fe54 	bl	8001360 <BSP_LED_Init>

  /* Start scheduler */
  osKernelStart();
 80006b8:	f004 fa7c 	bl	8004bb4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006bc:	bf00      	nop
 80006be:	e7fd      	b.n	80006bc <main+0xb4>
 80006c0:	080087f4 	.word	0x080087f4
 80006c4:	200001ec 	.word	0x200001ec
 80006c8:	200001f0 	.word	0x200001f0
 80006cc:	08008a38 	.word	0x08008a38
 80006d0:	08000a51 	.word	0x08000a51
 80006d4:	200001d0 	.word	0x200001d0
 80006d8:	08008a5c 	.word	0x08008a5c
 80006dc:	08000b6d 	.word	0x08000b6d
 80006e0:	200001d4 	.word	0x200001d4
 80006e4:	08008a80 	.word	0x08008a80
 80006e8:	080009dd 	.word	0x080009dd
 80006ec:	200001d8 	.word	0x200001d8
 80006f0:	08008aa4 	.word	0x08008aa4
 80006f4:	08000c45 	.word	0x08000c45
 80006f8:	200001dc 	.word	0x200001dc

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b09a      	sub	sp, #104	@ 0x68
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	2248      	movs	r2, #72	@ 0x48
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f007 fa2e 	bl	8007b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]
 800071e:	615a      	str	r2, [r3, #20]
 8000720:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000722:	4b21      	ldr	r3, [pc, #132]	@ (80007a8 <SystemClock_Config+0xac>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800072a:	4a1f      	ldr	r2, [pc, #124]	@ (80007a8 <SystemClock_Config+0xac>)
 800072c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000730:	6013      	str	r3, [r2, #0]
 8000732:	4b1d      	ldr	r3, [pc, #116]	@ (80007a8 <SystemClock_Config+0xac>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800073e:	2322      	movs	r3, #34	@ 0x22
 8000740:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000742:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000746:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000748:	2301      	movs	r3, #1
 800074a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074c:	2340      	movs	r3, #64	@ 0x40
 800074e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000750:	2300      	movs	r3, #0
 8000752:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000754:	23a0      	movs	r3, #160	@ 0xa0
 8000756:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000758:	2300      	movs	r3, #0
 800075a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 0320 	add.w	r3, r7, #32
 8000760:	4618      	mov	r0, r3
 8000762:	f001 fd9d 	bl	80022a0 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800076c:	f000 fae7 	bl	8000d3e <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000770:	236f      	movs	r3, #111	@ 0x6f
 8000772:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2101      	movs	r1, #1
 8000790:	4618      	mov	r0, r3
 8000792:	f002 f8f9 	bl	8002988 <HAL_RCC_ClockConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800079c:	f000 facf 	bl	8000d3e <Error_Handler>
  }
}
 80007a0:	bf00      	nop
 80007a2:	3768      	adds	r7, #104	@ 0x68
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	58000400 	.word	0x58000400

080007ac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b094      	sub	sp, #80	@ 0x50
 80007b0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007b2:	463b      	mov	r3, r7
 80007b4:	2250      	movs	r2, #80	@ 0x50
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f007 f9d7 	bl	8007b6c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80007be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80007c4:	2300      	movs	r3, #0
 80007c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007cc:	463b      	mov	r3, r7
 80007ce:	4618      	mov	r0, r3
 80007d0:	f002 fd49 	bl	8003266 <HAL_RCCEx_PeriphCLKConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80007da:	f000 fab0 	bl	8000d3e <Error_Handler>
  }
  /* USER CODE BEGIN Smps */
  /* USER CODE END Smps */
}
 80007de:	bf00      	nop
 80007e0:	3750      	adds	r7, #80	@ 0x50
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007ec:	4b22      	ldr	r3, [pc, #136]	@ (8000878 <MX_LPUART1_UART_Init+0x90>)
 80007ee:	4a23      	ldr	r2, [pc, #140]	@ (800087c <MX_LPUART1_UART_Init+0x94>)
 80007f0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80007f2:	4b21      	ldr	r3, [pc, #132]	@ (8000878 <MX_LPUART1_UART_Init+0x90>)
 80007f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000878 <MX_LPUART1_UART_Init+0x90>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b1d      	ldr	r3, [pc, #116]	@ (8000878 <MX_LPUART1_UART_Init+0x90>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000806:	4b1c      	ldr	r3, [pc, #112]	@ (8000878 <MX_LPUART1_UART_Init+0x90>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b1a      	ldr	r3, [pc, #104]	@ (8000878 <MX_LPUART1_UART_Init+0x90>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <MX_LPUART1_UART_Init+0x90>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000818:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <MX_LPUART1_UART_Init+0x90>)
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800081e:	4b16      	ldr	r3, [pc, #88]	@ (8000878 <MX_LPUART1_UART_Init+0x90>)
 8000820:	2200      	movs	r2, #0
 8000822:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000824:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <MX_LPUART1_UART_Init+0x90>)
 8000826:	2200      	movs	r2, #0
 8000828:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800082a:	4b13      	ldr	r3, [pc, #76]	@ (8000878 <MX_LPUART1_UART_Init+0x90>)
 800082c:	2200      	movs	r2, #0
 800082e:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000830:	4811      	ldr	r0, [pc, #68]	@ (8000878 <MX_LPUART1_UART_Init+0x90>)
 8000832:	f003 fa27 	bl	8003c84 <HAL_UART_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800083c:	f000 fa7f 	bl	8000d3e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000840:	2100      	movs	r1, #0
 8000842:	480d      	ldr	r0, [pc, #52]	@ (8000878 <MX_LPUART1_UART_Init+0x90>)
 8000844:	f004 f884 	bl	8004950 <HAL_UARTEx_SetTxFifoThreshold>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800084e:	f000 fa76 	bl	8000d3e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000852:	2100      	movs	r1, #0
 8000854:	4808      	ldr	r0, [pc, #32]	@ (8000878 <MX_LPUART1_UART_Init+0x90>)
 8000856:	f004 f8b9 	bl	80049cc <HAL_UARTEx_SetRxFifoThreshold>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000860:	f000 fa6d 	bl	8000d3e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000864:	4804      	ldr	r0, [pc, #16]	@ (8000878 <MX_LPUART1_UART_Init+0x90>)
 8000866:	f004 f83a 	bl	80048de <HAL_UARTEx_DisableFifoMode>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000870:	f000 fa65 	bl	8000d3e <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	200000a8 	.word	0x200000a8
 800087c:	40008000 	.word	0x40008000

08000880 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000884:	4b22      	ldr	r3, [pc, #136]	@ (8000910 <MX_USART1_UART_Init+0x90>)
 8000886:	4a23      	ldr	r2, [pc, #140]	@ (8000914 <MX_USART1_UART_Init+0x94>)
 8000888:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800088a:	4b21      	ldr	r3, [pc, #132]	@ (8000910 <MX_USART1_UART_Init+0x90>)
 800088c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000890:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000892:	4b1f      	ldr	r3, [pc, #124]	@ (8000910 <MX_USART1_UART_Init+0x90>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000898:	4b1d      	ldr	r3, [pc, #116]	@ (8000910 <MX_USART1_UART_Init+0x90>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800089e:	4b1c      	ldr	r3, [pc, #112]	@ (8000910 <MX_USART1_UART_Init+0x90>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000910 <MX_USART1_UART_Init+0x90>)
 80008a6:	220c      	movs	r2, #12
 80008a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008aa:	4b19      	ldr	r3, [pc, #100]	@ (8000910 <MX_USART1_UART_Init+0x90>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b0:	4b17      	ldr	r3, [pc, #92]	@ (8000910 <MX_USART1_UART_Init+0x90>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b6:	4b16      	ldr	r3, [pc, #88]	@ (8000910 <MX_USART1_UART_Init+0x90>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008bc:	4b14      	ldr	r3, [pc, #80]	@ (8000910 <MX_USART1_UART_Init+0x90>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c2:	4b13      	ldr	r3, [pc, #76]	@ (8000910 <MX_USART1_UART_Init+0x90>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c8:	4811      	ldr	r0, [pc, #68]	@ (8000910 <MX_USART1_UART_Init+0x90>)
 80008ca:	f003 f9db 	bl	8003c84 <HAL_UART_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008d4:	f000 fa33 	bl	8000d3e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d8:	2100      	movs	r1, #0
 80008da:	480d      	ldr	r0, [pc, #52]	@ (8000910 <MX_USART1_UART_Init+0x90>)
 80008dc:	f004 f838 	bl	8004950 <HAL_UARTEx_SetTxFifoThreshold>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008e6:	f000 fa2a 	bl	8000d3e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ea:	2100      	movs	r1, #0
 80008ec:	4808      	ldr	r0, [pc, #32]	@ (8000910 <MX_USART1_UART_Init+0x90>)
 80008ee:	f004 f86d 	bl	80049cc <HAL_UARTEx_SetRxFifoThreshold>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008f8:	f000 fa21 	bl	8000d3e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008fc:	4804      	ldr	r0, [pc, #16]	@ (8000910 <MX_USART1_UART_Init+0x90>)
 80008fe:	f003 ffee 	bl	80048de <HAL_UARTEx_DisableFifoMode>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000908:	f000 fa19 	bl	8000d3e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	2000013c 	.word	0x2000013c
 8000914:	40013800 	.word	0x40013800

08000918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092c:	2004      	movs	r0, #4
 800092e:	f7ff fe34 	bl	800059a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	2001      	movs	r0, #1
 8000934:	f7ff fe31 	bl	800059a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000938:	2002      	movs	r0, #2
 800093a:	f7ff fe2e 	bl	800059a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800093e:	2008      	movs	r0, #8
 8000940:	f7ff fe2b 	bl	800059a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000944:	2310      	movs	r3, #16
 8000946:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	4619      	mov	r1, r3
 8000954:	4811      	ldr	r0, [pc, #68]	@ (800099c <MX_GPIO_Init+0x84>)
 8000956:	f000 fe83 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 800095a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800095e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800096c:	230a      	movs	r3, #10
 800096e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	4619      	mov	r1, r3
 8000974:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000978:	f000 fe72 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 800097c:	2303      	movs	r3, #3
 800097e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000980:	2300      	movs	r3, #0
 8000982:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	4619      	mov	r1, r3
 800098c:	4804      	ldr	r0, [pc, #16]	@ (80009a0 <MX_GPIO_Init+0x88>)
 800098e:	f000 fe67 	bl	8001660 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000992:	bf00      	nop
 8000994:	3718      	adds	r7, #24
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	48000800 	.word	0x48000800
 80009a0:	48000c00 	.word	0x48000c00

080009a4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	e009      	b.n	80009ca <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	1c5a      	adds	r2, r3, #1
 80009ba:	60ba      	str	r2, [r7, #8]
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fdc4 	bl	800054c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	3301      	adds	r3, #1
 80009c8:	617b      	str	r3, [r7, #20]
 80009ca:	697a      	ldr	r2, [r7, #20]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	dbf1      	blt.n	80009b6 <_write+0x12>
  }
  return len;
 80009d2:	687b      	ldr	r3, [r7, #4]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <StartSenderTask2>:

void StartSenderTask2(void *argument)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	@ 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
    // Check if we have received data to process
    if (xQueueReceive(UARTQueue, &receivedCANFrame, 0) == pdTRUE) {
 80009e4:	4b17      	ldr	r3, [pc, #92]	@ (8000a44 <StartSenderTask2+0x68>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f107 0108 	add.w	r1, r7, #8
 80009ec:	2200      	movs	r2, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f004 fd82 	bl	80054f8 <xQueueReceive>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d11f      	bne.n	8000a3a <StartSenderTask2+0x5e>
      printf("Received from CAN Bus | CAN_ID: 0x%lX | DLC: %u | DATA:",receivedCANFrame.can_id,receivedCANFrame.dlc);
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	7b3a      	ldrb	r2, [r7, #12]
 80009fe:	4619      	mov	r1, r3
 8000a00:	4811      	ldr	r0, [pc, #68]	@ (8000a48 <StartSenderTask2+0x6c>)
 8000a02:	f006 ff63 	bl	80078cc <iprintf>
      for (int i = 0; i < receivedCANFrame.dlc; i++) {
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a0a:	e00b      	b.n	8000a24 <StartSenderTask2+0x48>
          printf("%02X ", receivedCANFrame.data[i]);
 8000a0c:	f107 020d 	add.w	r2, r7, #13
 8000a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a12:	4413      	add	r3, r2
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	4619      	mov	r1, r3
 8000a18:	480c      	ldr	r0, [pc, #48]	@ (8000a4c <StartSenderTask2+0x70>)
 8000a1a:	f006 ff57 	bl	80078cc <iprintf>
      for (int i = 0; i < receivedCANFrame.dlc; i++) {
 8000a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a20:	3301      	adds	r3, #1
 8000a22:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a24:	7b3b      	ldrb	r3, [r7, #12]
 8000a26:	461a      	mov	r2, r3
 8000a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	dbee      	blt.n	8000a0c <StartSenderTask2+0x30>
      }
      printf("\n");
 8000a2e:	200a      	movs	r0, #10
 8000a30:	f006 ff5e 	bl	80078f0 <putchar>
      BSP_LED_Toggle(LED_BLUE);
 8000a34:	2000      	movs	r0, #0
 8000a36:	f000 fccd 	bl	80013d4 <BSP_LED_Toggle>
    }
    osDelay(100);
 8000a3a:	2064      	movs	r0, #100	@ 0x64
 8000a3c:	f004 f972 	bl	8004d24 <osDelay>
    if (xQueueReceive(UARTQueue, &receivedCANFrame, 0) == pdTRUE) {
 8000a40:	e7d0      	b.n	80009e4 <StartSenderTask2+0x8>
 8000a42:	bf00      	nop
 8000a44:	200001ec 	.word	0x200001ec
 8000a48:	0800882c 	.word	0x0800882c
 8000a4c:	08008864 	.word	0x08008864

08000a50 <StartSenderTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSenderTask */
void StartSenderTask(void *argument)
{
 8000a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a52:	b091      	sub	sp, #68	@ 0x44
 8000a54:	af04      	add	r7, sp, #16
 8000a56:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
    // Check if we have received data to process
    if (xQueueReceive(UARTQueue, &receivedItem, 0) == pdTRUE) {
 8000a58:	4b3c      	ldr	r3, [pc, #240]	@ (8000b4c <StartSenderTask+0xfc>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f107 0110 	add.w	r1, r7, #16
 8000a60:	2200      	movs	r2, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f004 fd48 	bl	80054f8 <xQueueReceive>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d114      	bne.n	8000a98 <StartSenderTask+0x48>
      printf("Received from ESP32 - Value: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 8000a6e:	6939      	ldr	r1, [r7, #16]
             receivedItem.value,
             receivedItem.MacAddress[0], receivedItem.MacAddress[1], receivedItem.MacAddress[2],
 8000a70:	7d3b      	ldrb	r3, [r7, #20]
      printf("Received from ESP32 - Value: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 8000a72:	461d      	mov	r5, r3
             receivedItem.MacAddress[0], receivedItem.MacAddress[1], receivedItem.MacAddress[2],
 8000a74:	7d7b      	ldrb	r3, [r7, #21]
      printf("Received from ESP32 - Value: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 8000a76:	461e      	mov	r6, r3
             receivedItem.MacAddress[0], receivedItem.MacAddress[1], receivedItem.MacAddress[2],
 8000a78:	7dbb      	ldrb	r3, [r7, #22]
             receivedItem.MacAddress[3], receivedItem.MacAddress[4], receivedItem.MacAddress[5]);
 8000a7a:	7dfa      	ldrb	r2, [r7, #23]
 8000a7c:	7e38      	ldrb	r0, [r7, #24]
 8000a7e:	7e7c      	ldrb	r4, [r7, #25]
      printf("Received from ESP32 - Value: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 8000a80:	9403      	str	r4, [sp, #12]
 8000a82:	9002      	str	r0, [sp, #8]
 8000a84:	9201      	str	r2, [sp, #4]
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	4633      	mov	r3, r6
 8000a8a:	462a      	mov	r2, r5
 8000a8c:	4830      	ldr	r0, [pc, #192]	@ (8000b50 <StartSenderTask+0x100>)
 8000a8e:	f006 ff1d 	bl	80078cc <iprintf>

      BSP_LED_Toggle(LED_GREEN);
 8000a92:	2001      	movs	r0, #1
 8000a94:	f000 fc9e 	bl	80013d4 <BSP_LED_Toggle>
    }

    // Send data to ESP32 periodically
    uint32_t current_time = HAL_GetTick();
 8000a98:	f000 fcea 	bl	8001470 <HAL_GetTick>
 8000a9c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (current_time - last_tx_time >= UART_TX_INTERVAL) {
 8000a9e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b54 <StartSenderTask+0x104>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	2b63      	cmp	r3, #99	@ 0x63
 8000aa8:	d94c      	bls.n	8000b44 <StartSenderTask+0xf4>
      // Prepare data to send
      itemToSend.value = ++message_counter;
 8000aaa:	4b2b      	ldr	r3, [pc, #172]	@ (8000b58 <StartSenderTask+0x108>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	4a29      	ldr	r2, [pc, #164]	@ (8000b58 <StartSenderTask+0x108>)
 8000ab2:	6013      	str	r3, [r2, #0]
 8000ab4:	4b28      	ldr	r3, [pc, #160]	@ (8000b58 <StartSenderTask+0x108>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	61fb      	str	r3, [r7, #28]
      uint8_t stm32_mac[6] = {0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF}; // Dummy STM32 MAC
 8000aba:	4a28      	ldr	r2, [pc, #160]	@ (8000b5c <StartSenderTask+0x10c>)
 8000abc:	f107 0308 	add.w	r3, r7, #8
 8000ac0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ac4:	6018      	str	r0, [r3, #0]
 8000ac6:	3304      	adds	r3, #4
 8000ac8:	8019      	strh	r1, [r3, #0]
      memcpy(itemToSend.MacAddress, stm32_mac, 6);
 8000aca:	f107 0320 	add.w	r3, r7, #32
 8000ace:	f107 0208 	add.w	r2, r7, #8
 8000ad2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ad6:	6018      	str	r0, [r3, #0]
 8000ad8:	3304      	adds	r3, #4
 8000ada:	8019      	strh	r1, [r3, #0]

      // Send struct data
      HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t*)&itemToSend, sizeof(Item), 1000);
 8000adc:	f107 011c 	add.w	r1, r7, #28
 8000ae0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ae4:	220c      	movs	r2, #12
 8000ae6:	481e      	ldr	r0, [pc, #120]	@ (8000b60 <StartSenderTask+0x110>)
 8000ae8:	f003 f95b 	bl	8003da2 <HAL_UART_Transmit>
 8000aec:	4603      	mov	r3, r0
 8000aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

      if (status == HAL_OK) {
 8000af2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d11b      	bne.n	8000b32 <StartSenderTask+0xe2>
        printf("Sent to ESP32 - Value: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 8000afa:	69f9      	ldr	r1, [r7, #28]
               itemToSend.value,
               itemToSend.MacAddress[0], itemToSend.MacAddress[1], itemToSend.MacAddress[2],
 8000afc:	f897 3020 	ldrb.w	r3, [r7, #32]
        printf("Sent to ESP32 - Value: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 8000b00:	461d      	mov	r5, r3
               itemToSend.MacAddress[0], itemToSend.MacAddress[1], itemToSend.MacAddress[2],
 8000b02:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
        printf("Sent to ESP32 - Value: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 8000b06:	461e      	mov	r6, r3
               itemToSend.MacAddress[0], itemToSend.MacAddress[1], itemToSend.MacAddress[2],
 8000b08:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
               itemToSend.MacAddress[3], itemToSend.MacAddress[4], itemToSend.MacAddress[5]);
 8000b0c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000b10:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8000b14:	f897 4025 	ldrb.w	r4, [r7, #37]	@ 0x25
        printf("Sent to ESP32 - Value: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 8000b18:	9403      	str	r4, [sp, #12]
 8000b1a:	9002      	str	r0, [sp, #8]
 8000b1c:	9201      	str	r2, [sp, #4]
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	4633      	mov	r3, r6
 8000b22:	462a      	mov	r2, r5
 8000b24:	480f      	ldr	r0, [pc, #60]	@ (8000b64 <StartSenderTask+0x114>)
 8000b26:	f006 fed1 	bl	80078cc <iprintf>
        BSP_LED_Toggle(LED_BLUE);
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f000 fc52 	bl	80013d4 <BSP_LED_Toggle>
 8000b30:	e005      	b.n	8000b3e <StartSenderTask+0xee>
      } else {
        printf("Failed to send data to ESP32\n");
 8000b32:	480d      	ldr	r0, [pc, #52]	@ (8000b68 <StartSenderTask+0x118>)
 8000b34:	f006 ff3a 	bl	80079ac <puts>
        BSP_LED_Toggle(LED_RED);
 8000b38:	2002      	movs	r0, #2
 8000b3a:	f000 fc4b 	bl	80013d4 <BSP_LED_Toggle>
      }

      last_tx_time = current_time;
 8000b3e:	4a05      	ldr	r2, [pc, #20]	@ (8000b54 <StartSenderTask+0x104>)
 8000b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b42:	6013      	str	r3, [r2, #0]
    }

    osDelay(100);
 8000b44:	2064      	movs	r0, #100	@ 0x64
 8000b46:	f004 f8ed 	bl	8004d24 <osDelay>
  {
 8000b4a:	e785      	b.n	8000a58 <StartSenderTask+0x8>
 8000b4c:	200001ec 	.word	0x200001ec
 8000b50:	0800886c 	.word	0x0800886c
 8000b54:	200001e8 	.word	0x200001e8
 8000b58:	200001e4 	.word	0x200001e4
 8000b5c:	08008914 	.word	0x08008914
 8000b60:	2000013c 	.word	0x2000013c
 8000b64:	080088b4 	.word	0x080088b4
 8000b68:	080088f4 	.word	0x080088f4

08000b6c <StartTskUART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTskUART */
void StartTskUART(void *argument)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTskUART */
  /* Infinite loop */
  for(;;)
  {
    // Receive Item struct data from ESP32
    HAL_StatusTypeDef status = HAL_UART_Receive(&huart1, (uint8_t *)&receivedData, sizeof(Item), UART_TIMEOUT_MS);
 8000b74:	2364      	movs	r3, #100	@ 0x64
 8000b76:	220c      	movs	r2, #12
 8000b78:	4929      	ldr	r1, [pc, #164]	@ (8000c20 <StartTskUART+0xb4>)
 8000b7a:	482a      	ldr	r0, [pc, #168]	@ (8000c24 <StartTskUART+0xb8>)
 8000b7c:	f003 f99f 	bl	8003ebe <HAL_UART_Receive>
 8000b80:	4603      	mov	r3, r0
 8000b82:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK) {
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d11a      	bne.n	8000bc0 <StartTskUART+0x54>
      uart_timeout_counter = 0;
 8000b8a:	4b27      	ldr	r3, [pc, #156]	@ (8000c28 <StartTskUART+0xbc>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]

      // Validate received data
      if (ValidateReceivedData((Item*)&receivedData)) {
 8000b90:	4823      	ldr	r0, [pc, #140]	@ (8000c20 <StartTskUART+0xb4>)
 8000b92:	f7ff fd1b 	bl	80005cc <ValidateReceivedData>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d00d      	beq.n	8000bb8 <StartTskUART+0x4c>
        // Send valid data to queue
        if (xQueueSend(UARTQueue, &receivedData, 0) != pdTRUE) {
 8000b9c:	4b23      	ldr	r3, [pc, #140]	@ (8000c2c <StartTskUART+0xc0>)
 8000b9e:	6818      	ldr	r0, [r3, #0]
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	491e      	ldr	r1, [pc, #120]	@ (8000c20 <StartTskUART+0xb4>)
 8000ba6:	f004 fb07 	bl	80051b8 <xQueueGenericSend>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d032      	beq.n	8000c16 <StartTskUART+0xaa>
          printf("Queue full - message dropped\n");
 8000bb0:	481f      	ldr	r0, [pc, #124]	@ (8000c30 <StartTskUART+0xc4>)
 8000bb2:	f006 fefb 	bl	80079ac <puts>
 8000bb6:	e02e      	b.n	8000c16 <StartTskUART+0xaa>
        }
      } else {
        printf("UART Warning - Received corrupted data with invalid MAC\n");
 8000bb8:	481e      	ldr	r0, [pc, #120]	@ (8000c34 <StartTskUART+0xc8>)
 8000bba:	f006 fef7 	bl	80079ac <puts>
 8000bbe:	e02a      	b.n	8000c16 <StartTskUART+0xaa>
      }
    }
    else if (status == HAL_TIMEOUT) {
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	2b03      	cmp	r3, #3
 8000bc4:	d117      	bne.n	8000bf6 <StartTskUART+0x8a>
      uart_timeout_counter++;
 8000bc6:	4b18      	ldr	r3, [pc, #96]	@ (8000c28 <StartTskUART+0xbc>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	4a16      	ldr	r2, [pc, #88]	@ (8000c28 <StartTskUART+0xbc>)
 8000bce:	6013      	str	r3, [r2, #0]
      if (uart_timeout_counter % 100 == 0) {  // Reduced frequency of timeout messages
 8000bd0:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <StartTskUART+0xbc>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <StartTskUART+0xcc>)
 8000bd6:	fba3 1302 	umull	r1, r3, r3, r2
 8000bda:	095b      	lsrs	r3, r3, #5
 8000bdc:	2164      	movs	r1, #100	@ 0x64
 8000bde:	fb01 f303 	mul.w	r3, r1, r3
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d116      	bne.n	8000c16 <StartTskUART+0xaa>
        printf("UART Waiting for data... (%lu)\n", uart_timeout_counter);
 8000be8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <StartTskUART+0xbc>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4619      	mov	r1, r3
 8000bee:	4813      	ldr	r0, [pc, #76]	@ (8000c3c <StartTskUART+0xd0>)
 8000bf0:	f006 fe6c 	bl	80078cc <iprintf>
 8000bf4:	e00f      	b.n	8000c16 <StartTskUART+0xaa>
      }
    }
    else {
      printf("UART Error: %d, resetting...\n", status);
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4811      	ldr	r0, [pc, #68]	@ (8000c40 <StartTskUART+0xd4>)
 8000bfc:	f006 fe66 	bl	80078cc <iprintf>
      HAL_UART_DeInit(&huart1);
 8000c00:	4808      	ldr	r0, [pc, #32]	@ (8000c24 <StartTskUART+0xb8>)
 8000c02:	f003 f88f 	bl	8003d24 <HAL_UART_DeInit>
      osDelay(10);
 8000c06:	200a      	movs	r0, #10
 8000c08:	f004 f88c 	bl	8004d24 <osDelay>
      MX_USART1_UART_Init();
 8000c0c:	f7ff fe38 	bl	8000880 <MX_USART1_UART_Init>
      uart_timeout_counter = 0;
 8000c10:	4b05      	ldr	r3, [pc, #20]	@ (8000c28 <StartTskUART+0xbc>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
    }

    osDelay(10); // Small delay
 8000c16:	200a      	movs	r0, #10
 8000c18:	f004 f884 	bl	8004d24 <osDelay>
  {
 8000c1c:	e7aa      	b.n	8000b74 <StartTskUART+0x8>
 8000c1e:	bf00      	nop
 8000c20:	2000009c 	.word	0x2000009c
 8000c24:	2000013c 	.word	0x2000013c
 8000c28:	200001e0 	.word	0x200001e0
 8000c2c:	200001ec 	.word	0x200001ec
 8000c30:	0800891c 	.word	0x0800891c
 8000c34:	0800893c 	.word	0x0800893c
 8000c38:	51eb851f 	.word	0x51eb851f
 8000c3c:	08008974 	.word	0x08008974
 8000c40:	08008994 	.word	0x08008994

08000c44 <StartTskUART2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTskUART2 */
void StartTskUART2(void *argument)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTskUART2 */
  /* Infinite loop */
  for(;;)
  {
    // Receive CANFrame struct data from ESP32
    HAL_StatusTypeDef status = HAL_UART_Receive(&huart1, (uint8_t *)&receivedData, sizeof(CANFrame), UART_TIMEOUT_MS);
 8000c4c:	2364      	movs	r3, #100	@ 0x64
 8000c4e:	2210      	movs	r2, #16
 8000c50:	492a      	ldr	r1, [pc, #168]	@ (8000cfc <StartTskUART2+0xb8>)
 8000c52:	482b      	ldr	r0, [pc, #172]	@ (8000d00 <StartTskUART2+0xbc>)
 8000c54:	f003 f933 	bl	8003ebe <HAL_UART_Receive>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d120      	bne.n	8000ca4 <StartTskUART2+0x60>
      uart_timeout_counter = 0;
 8000c62:	4b28      	ldr	r3, [pc, #160]	@ (8000d04 <StartTskUART2+0xc0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
      // Validate received data
      if (ValidateReceivedData((CANFrame*)&receivedData)) {
 8000c68:	4824      	ldr	r0, [pc, #144]	@ (8000cfc <StartTskUART2+0xb8>)
 8000c6a:	f7ff fcaf 	bl	80005cc <ValidateReceivedData>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d010      	beq.n	8000c96 <StartTskUART2+0x52>
        // Send valid data to queue
        if (xQueueSend(UARTQueue, (const void *)&receivedData, 0) != pdTRUE) {
 8000c74:	4b24      	ldr	r3, [pc, #144]	@ (8000d08 <StartTskUART2+0xc4>)
 8000c76:	6818      	ldr	r0, [r3, #0]
 8000c78:	2300      	movs	r3, #0
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	491f      	ldr	r1, [pc, #124]	@ (8000cfc <StartTskUART2+0xb8>)
 8000c7e:	f004 fa9b 	bl	80051b8 <xQueueGenericSend>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d002      	beq.n	8000c8e <StartTskUART2+0x4a>
          printf("Queue full - message dropped\n");
 8000c88:	4820      	ldr	r0, [pc, #128]	@ (8000d0c <StartTskUART2+0xc8>)
 8000c8a:	f006 fe8f 	bl	80079ac <puts>
        }
        BSP_LED_Toggle(LED_GREEN); // Indicate successful reception
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f000 fba0 	bl	80013d4 <BSP_LED_Toggle>
 8000c94:	e7da      	b.n	8000c4c <StartTskUART2+0x8>
      } else {
        printf("UART Warning - Received corrupted data with invalid CAN frame\n");
 8000c96:	481e      	ldr	r0, [pc, #120]	@ (8000d10 <StartTskUART2+0xcc>)
 8000c98:	f006 fe88 	bl	80079ac <puts>
        BSP_LED_Toggle(LED_RED); // Indicate error
 8000c9c:	2002      	movs	r0, #2
 8000c9e:	f000 fb99 	bl	80013d4 <BSP_LED_Toggle>
 8000ca2:	e7d3      	b.n	8000c4c <StartTskUART2+0x8>
      }
    }
    else if (status == HAL_TIMEOUT) {
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
 8000ca6:	2b03      	cmp	r3, #3
 8000ca8:	d117      	bne.n	8000cda <StartTskUART2+0x96>
      uart_timeout_counter++;
 8000caa:	4b16      	ldr	r3, [pc, #88]	@ (8000d04 <StartTskUART2+0xc0>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	4a14      	ldr	r2, [pc, #80]	@ (8000d04 <StartTskUART2+0xc0>)
 8000cb2:	6013      	str	r3, [r2, #0]
      if (uart_timeout_counter % 100 == 0) {  // Reduced frequency of timeout messages
 8000cb4:	4b13      	ldr	r3, [pc, #76]	@ (8000d04 <StartTskUART2+0xc0>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b16      	ldr	r3, [pc, #88]	@ (8000d14 <StartTskUART2+0xd0>)
 8000cba:	fba3 1302 	umull	r1, r3, r3, r2
 8000cbe:	095b      	lsrs	r3, r3, #5
 8000cc0:	2164      	movs	r1, #100	@ 0x64
 8000cc2:	fb01 f303 	mul.w	r3, r1, r3
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d1bf      	bne.n	8000c4c <StartTskUART2+0x8>
        printf("UART Waiting for data... (%lu)\n", uart_timeout_counter);
 8000ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8000d04 <StartTskUART2+0xc0>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4811      	ldr	r0, [pc, #68]	@ (8000d18 <StartTskUART2+0xd4>)
 8000cd4:	f006 fdfa 	bl	80078cc <iprintf>
 8000cd8:	e7b8      	b.n	8000c4c <StartTskUART2+0x8>
      }
    }
    else {
      printf("UART Error: %d, resetting...\n", status);
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480f      	ldr	r0, [pc, #60]	@ (8000d1c <StartTskUART2+0xd8>)
 8000ce0:	f006 fdf4 	bl	80078cc <iprintf>
      HAL_UART_DeInit(&huart1);
 8000ce4:	4806      	ldr	r0, [pc, #24]	@ (8000d00 <StartTskUART2+0xbc>)
 8000ce6:	f003 f81d 	bl	8003d24 <HAL_UART_DeInit>
      osDelay(10);
 8000cea:	200a      	movs	r0, #10
 8000cec:	f004 f81a 	bl	8004d24 <osDelay>
      MX_USART1_UART_Init();
 8000cf0:	f7ff fdc6 	bl	8000880 <MX_USART1_UART_Init>
      uart_timeout_counter = 0;
 8000cf4:	4b03      	ldr	r3, [pc, #12]	@ (8000d04 <StartTskUART2+0xc0>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
  {
 8000cfa:	e7a7      	b.n	8000c4c <StartTskUART2+0x8>
 8000cfc:	2000009c 	.word	0x2000009c
 8000d00:	2000013c 	.word	0x2000013c
 8000d04:	200001e0 	.word	0x200001e0
 8000d08:	200001ec 	.word	0x200001ec
 8000d0c:	0800891c 	.word	0x0800891c
 8000d10:	080089b4 	.word	0x080089b4
 8000d14:	51eb851f 	.word	0x51eb851f
 8000d18:	08008974 	.word	0x08008974
 8000d1c:	08008994 	.word	0x08008994

08000d20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d30:	d101      	bne.n	8000d36 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000d32:	f000 fb89 	bl	8001448 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d42:	b672      	cpsid	i
}
 8000d44:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d46:	bf00      	nop
 8000d48:	e7fd      	b.n	8000d46 <Error_Handler+0x8>

08000d4a <LL_AHB2_GRP1_EnableClock>:
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b085      	sub	sp, #20
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d88:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000d8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000d94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000da0:	68fb      	ldr	r3, [r7, #12]
}
 8000da2:	bf00      	nop
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <LL_APB1_GRP2_DisableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_DisableClock(uint32_t Periphs)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8000db6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	65cb      	str	r3, [r1, #92]	@ 0x5c
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ddc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000de0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000de2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000df0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4013      	ands	r3, r2
 8000df6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000df8:	68fb      	ldr	r3, [r7, #12]
}
 8000dfa:	bf00      	nop
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b083      	sub	sp, #12
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000e0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e12:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	43db      	mvns	r3, r3
 8000e18:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e30:	2200      	movs	r2, #0
 8000e32:	210f      	movs	r1, #15
 8000e34:	f06f 0001 	mvn.w	r0, #1
 8000e38:	f000 fbea 	bl	8001610 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b09c      	sub	sp, #112	@ 0x70
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e58:	f107 030c 	add.w	r3, r7, #12
 8000e5c:	2250      	movs	r2, #80	@ 0x50
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f006 fe83 	bl	8007b6c <memset>
  if(huart->Instance==LPUART1)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a36      	ldr	r2, [pc, #216]	@ (8000f44 <HAL_UART_MspInit+0x104>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d139      	bne.n	8000ee4 <HAL_UART_MspInit+0xa4>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000e70:	2302      	movs	r3, #2
 8000e72:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000e74:	2300      	movs	r3, #0
 8000e76:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e78:	f107 030c 	add.w	r3, r7, #12
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f002 f9f2 	bl	8003266 <HAL_RCCEx_PeriphCLKConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e88:	f7ff ff59 	bl	8000d3e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f7ff ff75 	bl	8000d7c <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	2001      	movs	r0, #1
 8000e94:	f7ff ff59 	bl	8000d4a <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e98:	2002      	movs	r0, #2
 8000e9a:	f7ff ff56 	bl	8000d4a <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e9e:	2308      	movs	r3, #8
 8000ea0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000eae:	2308      	movs	r3, #8
 8000eb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ebc:	f000 fbd0 	bl	8001660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ec0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ec4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000ed2:	2308      	movs	r3, #8
 8000ed4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000eda:	4619      	mov	r1, r3
 8000edc:	481a      	ldr	r0, [pc, #104]	@ (8000f48 <HAL_UART_MspInit+0x108>)
 8000ede:	f000 fbbf 	bl	8001660 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ee2:	e02b      	b.n	8000f3c <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART1)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a18      	ldr	r2, [pc, #96]	@ (8000f4c <HAL_UART_MspInit+0x10c>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d126      	bne.n	8000f3c <HAL_UART_MspInit+0xfc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ef6:	f107 030c 	add.w	r3, r7, #12
 8000efa:	4618      	mov	r0, r3
 8000efc:	f002 f9b3 	bl	8003266 <HAL_RCCEx_PeriphCLKConfig>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_UART_MspInit+0xca>
      Error_Handler();
 8000f06:	f7ff ff1a 	bl	8000d3e <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f0a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000f0e:	f7ff ff61 	bl	8000dd4 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	2001      	movs	r0, #1
 8000f14:	f7ff ff19 	bl	8000d4a <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f18:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f2a:	2307      	movs	r3, #7
 8000f2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f32:	4619      	mov	r1, r3
 8000f34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f38:	f000 fb92 	bl	8001660 <HAL_GPIO_Init>
}
 8000f3c:	bf00      	nop
 8000f3e:	3770      	adds	r7, #112	@ 0x70
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40008000 	.word	0x40008000
 8000f48:	48000400 	.word	0x48000400
 8000f4c:	40013800 	.word	0x40013800

08000f50 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if(huart->Instance==LPUART1)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a11      	ldr	r2, [pc, #68]	@ (8000fa4 <HAL_UART_MspDeInit+0x54>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d10d      	bne.n	8000f7e <HAL_UART_MspDeInit+0x2e>
  {
    /* USER CODE BEGIN LPUART1_MspDeInit 0 */

    /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8000f62:	2001      	movs	r0, #1
 8000f64:	f7ff ff23 	bl	8000dae <LL_APB1_GRP2_DisableClock>

    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3);
 8000f68:	2108      	movs	r1, #8
 8000f6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f6e:	f000 fce7 	bl	8001940 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8000f72:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f76:	480c      	ldr	r0, [pc, #48]	@ (8000fa8 <HAL_UART_MspDeInit+0x58>)
 8000f78:	f000 fce2 	bl	8001940 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN USART1_MspDeInit 1 */

    /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8000f7c:	e00e      	b.n	8000f9c <HAL_UART_MspDeInit+0x4c>
  else if(huart->Instance==USART1)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a0a      	ldr	r2, [pc, #40]	@ (8000fac <HAL_UART_MspDeInit+0x5c>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d109      	bne.n	8000f9c <HAL_UART_MspDeInit+0x4c>
    __HAL_RCC_USART1_CLK_DISABLE();
 8000f88:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000f8c:	f7ff ff3b 	bl	8000e06 <LL_APB2_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8000f90:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000f94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f98:	f000 fcd2 	bl	8001940 <HAL_GPIO_DeInit>
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40008000 	.word	0x40008000
 8000fa8:	48000400 	.word	0x48000400
 8000fac:	40013800 	.word	0x40013800

08000fb0 <LL_APB1_GRP1_EnableClock>:
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000fb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fbc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000fbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000fc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fcc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
}
 8000fd6:	bf00      	nop
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08e      	sub	sp, #56	@ 0x38
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	6879      	ldr	r1, [r7, #4]
 8000ffe:	201c      	movs	r0, #28
 8001000:	f000 fb06 	bl	8001610 <HAL_NVIC_SetPriority>
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001004:	201c      	movs	r0, #28
 8001006:	f000 fb1d 	bl	8001644 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800100a:	2001      	movs	r0, #1
 800100c:	f7ff ffd0 	bl	8000fb0 <LL_APB1_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001010:	f107 020c 	add.w	r2, r7, #12
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	4611      	mov	r1, r2
 800101a:	4618      	mov	r0, r3
 800101c:	f001 fea0 	bl	8002d60 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001020:	f001 fe72 	bl	8002d08 <HAL_RCC_GetPCLK1Freq>
 8001024:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001028:	4a21      	ldr	r2, [pc, #132]	@ (80010b0 <HAL_InitTick+0xcc>)
 800102a:	fba2 2303 	umull	r2, r3, r2, r3
 800102e:	0c9b      	lsrs	r3, r3, #18
 8001030:	3b01      	subs	r3, #1
 8001032:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001034:	4b1f      	ldr	r3, [pc, #124]	@ (80010b4 <HAL_InitTick+0xd0>)
 8001036:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800103a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800103c:	4b1d      	ldr	r3, [pc, #116]	@ (80010b4 <HAL_InitTick+0xd0>)
 800103e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001042:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001044:	4a1b      	ldr	r2, [pc, #108]	@ (80010b4 <HAL_InitTick+0xd0>)
 8001046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001048:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800104a:	4b1a      	ldr	r3, [pc, #104]	@ (80010b4 <HAL_InitTick+0xd0>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001050:	4b18      	ldr	r3, [pc, #96]	@ (80010b4 <HAL_InitTick+0xd0>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 8001056:	4817      	ldr	r0, [pc, #92]	@ (80010b4 <HAL_InitTick+0xd0>)
 8001058:	f002 fb8c 	bl	8003774 <HAL_TIM_Base_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8001062:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001066:	2b00      	cmp	r3, #0
 8001068:	d11b      	bne.n	80010a2 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800106a:	4812      	ldr	r0, [pc, #72]	@ (80010b4 <HAL_InitTick+0xd0>)
 800106c:	f002 fbe4 	bl	8003838 <HAL_TIM_Base_Start_IT>
 8001070:	4603      	mov	r3, r0
 8001072:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8001076:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800107a:	2b00      	cmp	r3, #0
 800107c:	d111      	bne.n	80010a2 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800107e:	201c      	movs	r0, #28
 8001080:	f000 fae0 	bl	8001644 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b0f      	cmp	r3, #15
 8001088:	d808      	bhi.n	800109c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800108a:	2200      	movs	r2, #0
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	201c      	movs	r0, #28
 8001090:	f000 fabe 	bl	8001610 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001094:	4a08      	ldr	r2, [pc, #32]	@ (80010b8 <HAL_InitTick+0xd4>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	e002      	b.n	80010a2 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

 /* Return function status */
  return status;
 80010a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3738      	adds	r7, #56	@ 0x38
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	431bde83 	.word	0x431bde83
 80010b4:	200001f4 	.word	0x200001f4
 80010b8:	20000018 	.word	0x20000018

080010bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <NMI_Handler+0x4>

080010c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <HardFault_Handler+0x4>

080010cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <MemManage_Handler+0x4>

080010d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <BusFault_Handler+0x4>

080010dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <UsageFault_Handler+0x4>

080010e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010f8:	4802      	ldr	r0, [pc, #8]	@ (8001104 <TIM2_IRQHandler+0x10>)
 80010fa:	f002 fbeb 	bl	80038d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200001f4 	.word	0x200001f4

08001108 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	e00a      	b.n	8001130 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800111a:	f3af 8000 	nop.w
 800111e:	4601      	mov	r1, r0
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	1c5a      	adds	r2, r3, #1
 8001124:	60ba      	str	r2, [r7, #8]
 8001126:	b2ca      	uxtb	r2, r1
 8001128:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	3301      	adds	r3, #1
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	429a      	cmp	r2, r3
 8001136:	dbf0      	blt.n	800111a <_read+0x12>
  }

  return len;
 8001138:	687b      	ldr	r3, [r7, #4]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800114a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800114e:	4618      	mov	r0, r3
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
 8001162:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800116a:	605a      	str	r2, [r3, #4]
  return 0;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <_isatty>:

int _isatty(int file)
{
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b4:	4a14      	ldr	r2, [pc, #80]	@ (8001208 <_sbrk+0x5c>)
 80011b6:	4b15      	ldr	r3, [pc, #84]	@ (800120c <_sbrk+0x60>)
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011c0:	4b13      	ldr	r3, [pc, #76]	@ (8001210 <_sbrk+0x64>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d102      	bne.n	80011ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c8:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <_sbrk+0x64>)
 80011ca:	4a12      	ldr	r2, [pc, #72]	@ (8001214 <_sbrk+0x68>)
 80011cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ce:	4b10      	ldr	r3, [pc, #64]	@ (8001210 <_sbrk+0x64>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d207      	bcs.n	80011ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011dc:	f006 fd72 	bl	8007cc4 <__errno>
 80011e0:	4603      	mov	r3, r0
 80011e2:	220c      	movs	r2, #12
 80011e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011ea:	e009      	b.n	8001200 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011ec:	4b08      	ldr	r3, [pc, #32]	@ (8001210 <_sbrk+0x64>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011f2:	4b07      	ldr	r3, [pc, #28]	@ (8001210 <_sbrk+0x64>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4413      	add	r3, r2
 80011fa:	4a05      	ldr	r2, [pc, #20]	@ (8001210 <_sbrk+0x64>)
 80011fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011fe:	68fb      	ldr	r3, [r7, #12]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20030000 	.word	0x20030000
 800120c:	00000400 	.word	0x00000400
 8001210:	20000240 	.word	0x20000240
 8001214:	20001d80 	.word	0x20001d80

08001218 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800121c:	4b24      	ldr	r3, [pc, #144]	@ (80012b0 <SystemInit+0x98>)
 800121e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001222:	4a23      	ldr	r2, [pc, #140]	@ (80012b0 <SystemInit+0x98>)
 8001224:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001228:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800122c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800123c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001240:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001244:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001246:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001250:	4b18      	ldr	r3, [pc, #96]	@ (80012b4 <SystemInit+0x9c>)
 8001252:	4013      	ands	r3, r2
 8001254:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001256:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800125a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800125e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001262:	f023 0305 	bic.w	r3, r3, #5
 8001266:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800126a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800126e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001272:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001276:	f023 0301 	bic.w	r3, r3, #1
 800127a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800127e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001282:	4a0d      	ldr	r2, [pc, #52]	@ (80012b8 <SystemInit+0xa0>)
 8001284:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001286:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800128a:	4a0b      	ldr	r2, [pc, #44]	@ (80012b8 <SystemInit+0xa0>)
 800128c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800128e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001298:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800129c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800129e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012a2:	2200      	movs	r2, #0
 80012a4:	619a      	str	r2, [r3, #24]
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00
 80012b4:	faf6fefb 	.word	0xfaf6fefb
 80012b8:	22041000 	.word	0x22041000

080012bc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80012bc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012be:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c0:	3304      	adds	r3, #4

080012c2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80012c6:	d3f9      	bcc.n	80012bc <CopyDataInit>
  bx lr
 80012c8:	4770      	bx	lr

080012ca <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80012ca:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80012cc:	3004      	adds	r0, #4

080012ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80012ce:	4288      	cmp	r0, r1
  bcc FillZerobss
 80012d0:	d3fb      	bcc.n	80012ca <FillZerobss>
  bx lr
 80012d2:	4770      	bx	lr

080012d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012d4:	480c      	ldr	r0, [pc, #48]	@ (8001308 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012d8:	f7ff ff9e 	bl	8001218 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80012dc:	480b      	ldr	r0, [pc, #44]	@ (800130c <LoopForever+0x6>)
 80012de:	490c      	ldr	r1, [pc, #48]	@ (8001310 <LoopForever+0xa>)
 80012e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001314 <LoopForever+0xe>)
 80012e2:	2300      	movs	r3, #0
 80012e4:	f7ff ffed 	bl	80012c2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80012e8:	480b      	ldr	r0, [pc, #44]	@ (8001318 <LoopForever+0x12>)
 80012ea:	490c      	ldr	r1, [pc, #48]	@ (800131c <LoopForever+0x16>)
 80012ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001320 <LoopForever+0x1a>)
 80012ee:	2300      	movs	r3, #0
 80012f0:	f7ff ffe7 	bl	80012c2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80012f4:	480b      	ldr	r0, [pc, #44]	@ (8001324 <LoopForever+0x1e>)
 80012f6:	490c      	ldr	r1, [pc, #48]	@ (8001328 <LoopForever+0x22>)
 80012f8:	2300      	movs	r3, #0
 80012fa:	f7ff ffe8 	bl	80012ce <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012fe:	f006 fce7 	bl	8007cd0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001302:	f7ff f981 	bl	8000608 <main>

08001306 <LoopForever>:

LoopForever:
  b LoopForever
 8001306:	e7fe      	b.n	8001306 <LoopForever>
  ldr   r0, =_estack
 8001308:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800130c:	20000008 	.word	0x20000008
 8001310:	20000080 	.word	0x20000080
 8001314:	08008bdc 	.word	0x08008bdc
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001318:	20030000 	.word	0x20030000
 800131c:	20030000 	.word	0x20030000
 8001320:	08008c54 	.word	0x08008c54
  INIT_BSS _sbss, _ebss
 8001324:	20000080 	.word	0x20000080
 8001328:	20001d7c 	.word	0x20001d7c

0800132c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800132c:	e7fe      	b.n	800132c <ADC1_IRQHandler>

0800132e <LL_AHB2_GRP1_EnableClock>:
{
 800132e:	b480      	push	{r7}
 8001330:	b085      	sub	sp, #20
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001336:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800133a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800133c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4313      	orrs	r3, r2
 8001344:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001346:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800134a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4013      	ands	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001352:	68fb      	ldr	r3, [r7, #12]
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800137a:	2002      	movs	r0, #2
 800137c:	f7ff ffd7 	bl	800132e <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	4a12      	ldr	r2, [pc, #72]	@ (80013cc <BSP_LED_Init+0x6c>)
 8001384:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001388:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	2301      	movs	r3, #1
 800138c:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001392:	2302      	movs	r3, #2
 8001394:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	4a0d      	ldr	r2, [pc, #52]	@ (80013d0 <BSP_LED_Init+0x70>)
 800139a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139e:	f107 020c 	add.w	r2, r7, #12
 80013a2:	4611      	mov	r1, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 f95b 	bl	8001660 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	4a08      	ldr	r2, [pc, #32]	@ (80013d0 <BSP_LED_Init+0x70>)
 80013ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	4a05      	ldr	r2, [pc, #20]	@ (80013cc <BSP_LED_Init+0x6c>)
 80013b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013ba:	2200      	movs	r2, #0
 80013bc:	4619      	mov	r1, r3
 80013be:	f000 fb9d 	bl	8001afc <HAL_GPIO_WritePin>
}
 80013c2:	bf00      	nop
 80013c4:	3720      	adds	r7, #32
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	08008b68 	.word	0x08008b68
 80013d0:	2000000c 	.word	0x2000000c

080013d4 <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	4a07      	ldr	r2, [pc, #28]	@ (8001400 <BSP_LED_Toggle+0x2c>)
 80013e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	4906      	ldr	r1, [pc, #24]	@ (8001404 <BSP_LED_Toggle+0x30>)
 80013ea:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013ee:	4619      	mov	r1, r3
 80013f0:	4610      	mov	r0, r2
 80013f2:	f000 fb9b 	bl	8001b2c <HAL_GPIO_TogglePin>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	2000000c 	.word	0x2000000c
 8001404:	08008b68 	.word	0x08008b68

08001408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001412:	4b0c      	ldr	r3, [pc, #48]	@ (8001444 <HAL_Init+0x3c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a0b      	ldr	r2, [pc, #44]	@ (8001444 <HAL_Init+0x3c>)
 8001418:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800141c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800141e:	2003      	movs	r0, #3
 8001420:	f000 f8eb 	bl	80015fa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001424:	200f      	movs	r0, #15
 8001426:	f7ff fddd 	bl	8000fe4 <HAL_InitTick>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d002      	beq.n	8001436 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	71fb      	strb	r3, [r7, #7]
 8001434:	e001      	b.n	800143a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001436:	f7ff fcf9 	bl	8000e2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800143a:	79fb      	ldrb	r3, [r7, #7]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	58004000 	.word	0x58004000

08001448 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800144c:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <HAL_IncTick+0x20>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	4b06      	ldr	r3, [pc, #24]	@ (800146c <HAL_IncTick+0x24>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4413      	add	r3, r2
 8001458:	4a04      	ldr	r2, [pc, #16]	@ (800146c <HAL_IncTick+0x24>)
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	2000001c 	.word	0x2000001c
 800146c:	20000244 	.word	0x20000244

08001470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return uwTick;
 8001474:	4b03      	ldr	r3, [pc, #12]	@ (8001484 <HAL_GetTick+0x14>)
 8001476:	681b      	ldr	r3, [r3, #0]
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	20000244 	.word	0x20000244

08001488 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800148c:	4b03      	ldr	r3, [pc, #12]	@ (800149c <HAL_GetTickPrio+0x14>)
 800148e:	681b      	ldr	r3, [r3, #0]
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20000018 	.word	0x20000018

080014a0 <__NVIC_SetPriorityGrouping>:
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b0:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014bc:	4013      	ands	r3, r2
 80014be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d2:	4a04      	ldr	r2, [pc, #16]	@ (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	60d3      	str	r3, [r2, #12]
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_GetPriorityGrouping>:
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ec:	4b04      	ldr	r3, [pc, #16]	@ (8001500 <__NVIC_GetPriorityGrouping+0x18>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	f003 0307 	and.w	r3, r3, #7
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_EnableIRQ>:
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	2b00      	cmp	r3, #0
 8001514:	db0b      	blt.n	800152e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	f003 021f 	and.w	r2, r3, #31
 800151c:	4907      	ldr	r1, [pc, #28]	@ (800153c <__NVIC_EnableIRQ+0x38>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	095b      	lsrs	r3, r3, #5
 8001524:	2001      	movs	r0, #1
 8001526:	fa00 f202 	lsl.w	r2, r0, r2
 800152a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000e100 	.word	0xe000e100

08001540 <__NVIC_SetPriority>:
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	6039      	str	r1, [r7, #0]
 800154a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	2b00      	cmp	r3, #0
 8001552:	db0a      	blt.n	800156a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	b2da      	uxtb	r2, r3
 8001558:	490c      	ldr	r1, [pc, #48]	@ (800158c <__NVIC_SetPriority+0x4c>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	0112      	lsls	r2, r2, #4
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	440b      	add	r3, r1
 8001564:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001568:	e00a      	b.n	8001580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4908      	ldr	r1, [pc, #32]	@ (8001590 <__NVIC_SetPriority+0x50>)
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	3b04      	subs	r3, #4
 8001578:	0112      	lsls	r2, r2, #4
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	440b      	add	r3, r1
 800157e:	761a      	strb	r2, [r3, #24]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000e100 	.word	0xe000e100
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <NVIC_EncodePriority>:
{
 8001594:	b480      	push	{r7}
 8001596:	b089      	sub	sp, #36	@ 0x24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f1c3 0307 	rsb	r3, r3, #7
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	bf28      	it	cs
 80015b2:	2304      	movcs	r3, #4
 80015b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3304      	adds	r3, #4
 80015ba:	2b06      	cmp	r3, #6
 80015bc:	d902      	bls.n	80015c4 <NVIC_EncodePriority+0x30>
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3b03      	subs	r3, #3
 80015c2:	e000      	b.n	80015c6 <NVIC_EncodePriority+0x32>
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43da      	mvns	r2, r3
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	401a      	ands	r2, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	fa01 f303 	lsl.w	r3, r1, r3
 80015e6:	43d9      	mvns	r1, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ec:	4313      	orrs	r3, r2
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3724      	adds	r7, #36	@ 0x24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff ff4c 	bl	80014a0 <__NVIC_SetPriorityGrouping>
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
 800161c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800161e:	f7ff ff63 	bl	80014e8 <__NVIC_GetPriorityGrouping>
 8001622:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	68b9      	ldr	r1, [r7, #8]
 8001628:	6978      	ldr	r0, [r7, #20]
 800162a:	f7ff ffb3 	bl	8001594 <NVIC_EncodePriority>
 800162e:	4602      	mov	r2, r0
 8001630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001634:	4611      	mov	r1, r2
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff ff82 	bl	8001540 <__NVIC_SetPriority>
}
 800163c:	bf00      	nop
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ff56 	bl	8001504 <__NVIC_EnableIRQ>
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001660:	b480      	push	{r7}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800166e:	e14c      	b.n	800190a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	2101      	movs	r1, #1
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	fa01 f303 	lsl.w	r3, r1, r3
 800167c:	4013      	ands	r3, r2
 800167e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 813e 	beq.w	8001904 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	2b01      	cmp	r3, #1
 8001692:	d005      	beq.n	80016a0 <HAL_GPIO_Init+0x40>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d130      	bne.n	8001702 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	2203      	movs	r2, #3
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	68da      	ldr	r2, [r3, #12]
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016d6:	2201      	movs	r2, #1
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	091b      	lsrs	r3, r3, #4
 80016ec:	f003 0201 	and.w	r2, r3, #1
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	2b03      	cmp	r3, #3
 800170c:	d017      	beq.n	800173e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	2203      	movs	r2, #3
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d123      	bne.n	8001792 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	08da      	lsrs	r2, r3, #3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3208      	adds	r2, #8
 8001752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001756:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	220f      	movs	r2, #15
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	691a      	ldr	r2, [r3, #16]
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f003 0307 	and.w	r3, r3, #7
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4313      	orrs	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	08da      	lsrs	r2, r3, #3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3208      	adds	r2, #8
 800178c:	6939      	ldr	r1, [r7, #16]
 800178e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	2203      	movs	r2, #3
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4013      	ands	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f003 0203 	and.w	r2, r3, #3
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 8098 	beq.w	8001904 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80017d4:	4a54      	ldr	r2, [pc, #336]	@ (8001928 <HAL_GPIO_Init+0x2c8>)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	089b      	lsrs	r3, r3, #2
 80017da:	3302      	adds	r3, #2
 80017dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	220f      	movs	r2, #15
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80017fe:	d019      	beq.n	8001834 <HAL_GPIO_Init+0x1d4>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a4a      	ldr	r2, [pc, #296]	@ (800192c <HAL_GPIO_Init+0x2cc>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d013      	beq.n	8001830 <HAL_GPIO_Init+0x1d0>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a49      	ldr	r2, [pc, #292]	@ (8001930 <HAL_GPIO_Init+0x2d0>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d00d      	beq.n	800182c <HAL_GPIO_Init+0x1cc>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a48      	ldr	r2, [pc, #288]	@ (8001934 <HAL_GPIO_Init+0x2d4>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d007      	beq.n	8001828 <HAL_GPIO_Init+0x1c8>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a47      	ldr	r2, [pc, #284]	@ (8001938 <HAL_GPIO_Init+0x2d8>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d101      	bne.n	8001824 <HAL_GPIO_Init+0x1c4>
 8001820:	2304      	movs	r3, #4
 8001822:	e008      	b.n	8001836 <HAL_GPIO_Init+0x1d6>
 8001824:	2307      	movs	r3, #7
 8001826:	e006      	b.n	8001836 <HAL_GPIO_Init+0x1d6>
 8001828:	2303      	movs	r3, #3
 800182a:	e004      	b.n	8001836 <HAL_GPIO_Init+0x1d6>
 800182c:	2302      	movs	r3, #2
 800182e:	e002      	b.n	8001836 <HAL_GPIO_Init+0x1d6>
 8001830:	2301      	movs	r3, #1
 8001832:	e000      	b.n	8001836 <HAL_GPIO_Init+0x1d6>
 8001834:	2300      	movs	r3, #0
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	f002 0203 	and.w	r2, r2, #3
 800183c:	0092      	lsls	r2, r2, #2
 800183e:	4093      	lsls	r3, r2
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4313      	orrs	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001846:	4938      	ldr	r1, [pc, #224]	@ (8001928 <HAL_GPIO_Init+0x2c8>)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	089b      	lsrs	r3, r3, #2
 800184c:	3302      	adds	r3, #2
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001854:	4b39      	ldr	r3, [pc, #228]	@ (800193c <HAL_GPIO_Init+0x2dc>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	43db      	mvns	r3, r3
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	4013      	ands	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001878:	4a30      	ldr	r2, [pc, #192]	@ (800193c <HAL_GPIO_Init+0x2dc>)
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800187e:	4b2f      	ldr	r3, [pc, #188]	@ (800193c <HAL_GPIO_Init+0x2dc>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	43db      	mvns	r3, r3
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	4013      	ands	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4313      	orrs	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018a2:	4a26      	ldr	r2, [pc, #152]	@ (800193c <HAL_GPIO_Init+0x2dc>)
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018a8:	4b24      	ldr	r3, [pc, #144]	@ (800193c <HAL_GPIO_Init+0x2dc>)
 80018aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4013      	ands	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018ce:	4a1b      	ldr	r2, [pc, #108]	@ (800193c <HAL_GPIO_Init+0x2dc>)
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80018d6:	4b19      	ldr	r3, [pc, #100]	@ (800193c <HAL_GPIO_Init+0x2dc>)
 80018d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018fc:	4a0f      	ldr	r2, [pc, #60]	@ (800193c <HAL_GPIO_Init+0x2dc>)
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	3301      	adds	r3, #1
 8001908:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	fa22 f303 	lsr.w	r3, r2, r3
 8001914:	2b00      	cmp	r3, #0
 8001916:	f47f aeab 	bne.w	8001670 <HAL_GPIO_Init+0x10>
  }
}
 800191a:	bf00      	nop
 800191c:	bf00      	nop
 800191e:	371c      	adds	r7, #28
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	40010000 	.word	0x40010000
 800192c:	48000400 	.word	0x48000400
 8001930:	48000800 	.word	0x48000800
 8001934:	48000c00 	.word	0x48000c00
 8001938:	48001000 	.word	0x48001000
 800193c:	58000800 	.word	0x58000800

08001940 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001940:	b480      	push	{r7}
 8001942:	b087      	sub	sp, #28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800194e:	e0bb      	b.n	8001ac8 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001950:	2201      	movs	r2, #1
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 80ae 	beq.w	8001ac2 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001966:	4a5f      	ldr	r2, [pc, #380]	@ (8001ae4 <HAL_GPIO_DeInit+0x1a4>)
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	089b      	lsrs	r3, r3, #2
 800196c:	3302      	adds	r3, #2
 800196e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001972:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	220f      	movs	r2, #15
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	4013      	ands	r3, r2
 8001986:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800198e:	d019      	beq.n	80019c4 <HAL_GPIO_DeInit+0x84>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a55      	ldr	r2, [pc, #340]	@ (8001ae8 <HAL_GPIO_DeInit+0x1a8>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d013      	beq.n	80019c0 <HAL_GPIO_DeInit+0x80>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a54      	ldr	r2, [pc, #336]	@ (8001aec <HAL_GPIO_DeInit+0x1ac>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d00d      	beq.n	80019bc <HAL_GPIO_DeInit+0x7c>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a53      	ldr	r2, [pc, #332]	@ (8001af0 <HAL_GPIO_DeInit+0x1b0>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d007      	beq.n	80019b8 <HAL_GPIO_DeInit+0x78>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a52      	ldr	r2, [pc, #328]	@ (8001af4 <HAL_GPIO_DeInit+0x1b4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d101      	bne.n	80019b4 <HAL_GPIO_DeInit+0x74>
 80019b0:	2304      	movs	r3, #4
 80019b2:	e008      	b.n	80019c6 <HAL_GPIO_DeInit+0x86>
 80019b4:	2307      	movs	r3, #7
 80019b6:	e006      	b.n	80019c6 <HAL_GPIO_DeInit+0x86>
 80019b8:	2303      	movs	r3, #3
 80019ba:	e004      	b.n	80019c6 <HAL_GPIO_DeInit+0x86>
 80019bc:	2302      	movs	r3, #2
 80019be:	e002      	b.n	80019c6 <HAL_GPIO_DeInit+0x86>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e000      	b.n	80019c6 <HAL_GPIO_DeInit+0x86>
 80019c4:	2300      	movs	r3, #0
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	f002 0203 	and.w	r2, r2, #3
 80019cc:	0092      	lsls	r2, r2, #2
 80019ce:	4093      	lsls	r3, r2
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d136      	bne.n	8001a44 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80019d6:	4b48      	ldr	r3, [pc, #288]	@ (8001af8 <HAL_GPIO_DeInit+0x1b8>)
 80019d8:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	43db      	mvns	r3, r3
 80019e0:	4945      	ldr	r1, [pc, #276]	@ (8001af8 <HAL_GPIO_DeInit+0x1b8>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80019e8:	4b43      	ldr	r3, [pc, #268]	@ (8001af8 <HAL_GPIO_DeInit+0x1b8>)
 80019ea:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	4941      	ldr	r1, [pc, #260]	@ (8001af8 <HAL_GPIO_DeInit+0x1b8>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80019fa:	4b3f      	ldr	r3, [pc, #252]	@ (8001af8 <HAL_GPIO_DeInit+0x1b8>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	493d      	ldr	r1, [pc, #244]	@ (8001af8 <HAL_GPIO_DeInit+0x1b8>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8001a08:	4b3b      	ldr	r3, [pc, #236]	@ (8001af8 <HAL_GPIO_DeInit+0x1b8>)
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	4939      	ldr	r1, [pc, #228]	@ (8001af8 <HAL_GPIO_DeInit+0x1b8>)
 8001a12:	4013      	ands	r3, r2
 8001a14:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	220f      	movs	r2, #15
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001a26:	4a2f      	ldr	r2, [pc, #188]	@ (8001ae4 <HAL_GPIO_DeInit+0x1a4>)
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	089b      	lsrs	r3, r3, #2
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	43da      	mvns	r2, r3
 8001a36:	482b      	ldr	r0, [pc, #172]	@ (8001ae4 <HAL_GPIO_DeInit+0x1a4>)
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	089b      	lsrs	r3, r3, #2
 8001a3c:	400a      	ands	r2, r1
 8001a3e:	3302      	adds	r3, #2
 8001a40:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	2103      	movs	r1, #3
 8001a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a52:	431a      	orrs	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	08da      	lsrs	r2, r3, #3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3208      	adds	r2, #8
 8001a60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	220f      	movs	r2, #15
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	08d2      	lsrs	r2, r2, #3
 8001a78:	4019      	ands	r1, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3208      	adds	r2, #8
 8001a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	2103      	movs	r1, #3
 8001a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	401a      	ands	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	2103      	movs	r1, #3
 8001ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aba:	43db      	mvns	r3, r3
 8001abc:	401a      	ands	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
    }

    position++;
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f47f af3d 	bne.w	8001950 <HAL_GPIO_DeInit+0x10>
  }
}
 8001ad6:	bf00      	nop
 8001ad8:	bf00      	nop
 8001ada:	371c      	adds	r7, #28
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	40010000 	.word	0x40010000
 8001ae8:	48000400 	.word	0x48000400
 8001aec:	48000800 	.word	0x48000800
 8001af0:	48000c00 	.word	0x48000c00
 8001af4:	48001000 	.word	0x48001000
 8001af8:	58000800 	.word	0x58000800

08001afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	807b      	strh	r3, [r7, #2]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b0c:	787b      	ldrb	r3, [r7, #1]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b12:	887a      	ldrh	r2, [r7, #2]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b18:	e002      	b.n	8001b20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b1a:	887a      	ldrh	r2, [r7, #2]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b3e:	887a      	ldrh	r2, [r7, #2]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4013      	ands	r3, r2
 8001b44:	041a      	lsls	r2, r3, #16
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	43d9      	mvns	r1, r3
 8001b4a:	887b      	ldrh	r3, [r7, #2]
 8001b4c:	400b      	ands	r3, r1
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	619a      	str	r2, [r3, #24]
}
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b64:	4b05      	ldr	r3, [pc, #20]	@ (8001b7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a04      	ldr	r2, [pc, #16]	@ (8001b7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b6e:	6013      	str	r3, [r2, #0]
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	58000400 	.word	0x58000400

08001b80 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001b84:	4b04      	ldr	r3, [pc, #16]	@ (8001b98 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	58000400 	.word	0x58000400

08001b9c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001ba0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001baa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001bae:	d101      	bne.n	8001bb4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e000      	b.n	8001bb6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001bc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bd2:	6013      	str	r3, [r2, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001be2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bf0:	6013      	str	r3, [r2, #0]
}
 8001bf2:	bf00      	nop
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001c00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001c0e:	d101      	bne.n	8001c14 <LL_RCC_HSE_IsReady+0x18>
 8001c10:	2301      	movs	r3, #1
 8001c12:	e000      	b.n	8001c16 <LL_RCC_HSE_IsReady+0x1a>
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001c24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c32:	6013      	str	r3, [r2, #0]
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001c42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c50:	6013      	str	r3, [r2, #0]
}
 8001c52:	bf00      	nop
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001c60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c6e:	d101      	bne.n	8001c74 <LL_RCC_HSI_IsReady+0x18>
 8001c70:	2301      	movs	r3, #1
 8001c72:	e000      	b.n	8001c76 <LL_RCC_HSI_IsReady+0x1a>
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001c88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	061b      	lsls	r3, r3, #24
 8001c96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	604b      	str	r3, [r1, #4]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001cae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001cb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001cd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001cd8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cdc:	f023 0301 	bic.w	r3, r3, #1
 8001ce0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001cf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d101      	bne.n	8001d06 <LL_RCC_HSI48_IsReady+0x18>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <LL_RCC_HSI48_IsReady+0x1a>
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d44:	f023 0301 	bic.w	r3, r3, #1
 8001d48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001d5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d66:	f043 0304 	orr.w	r3, r3, #4
 8001d6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001d6e:	bf00      	nop
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001d7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d88:	f023 0304 	bic.w	r3, r3, #4
 8001d8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001d9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d101      	bne.n	8001db2 <LL_RCC_LSE_IsReady+0x18>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <LL_RCC_LSE_IsReady+0x1a>
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001dc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001dd6:	bf00      	nop
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001de4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001df0:	f023 0301 	bic.w	r3, r3, #1
 8001df4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001e06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d101      	bne.n	8001e1a <LL_RCC_LSI1_IsReady+0x18>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <LL_RCC_LSI1_IsReady+0x1a>
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001e2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e36:	f043 0304 	orr.w	r3, r3, #4
 8001e3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001e3e:	bf00      	nop
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001e4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e58:	f023 0304 	bic.w	r3, r3, #4
 8001e5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001e6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d101      	bne.n	8001e82 <LL_RCC_LSI2_IsReady+0x18>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <LL_RCC_LSI2_IsReady+0x1a>
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001e96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e9e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	021b      	lsls	r3, r3, #8
 8001ea6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001ec0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6013      	str	r3, [r2, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001ede:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ee8:	f023 0301 	bic.w	r3, r3, #1
 8001eec:	6013      	str	r3, [r2, #0]
}
 8001eee:	bf00      	nop
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001efc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d101      	bne.n	8001f0e <LL_RCC_MSI_IsReady+0x16>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <LL_RCC_MSI_IsReady+0x18>
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001f22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	600b      	str	r3, [r1, #0]
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001f48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f52:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2bb0      	cmp	r3, #176	@ 0xb0
 8001f58:	d901      	bls.n	8001f5e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001f5a:	23b0      	movs	r3, #176	@ 0xb0
 8001f5c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001f5e:	687b      	ldr	r3, [r7, #4]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001f74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	021b      	lsls	r3, r3, #8
 8001f82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f86:	4313      	orrs	r3, r2
 8001f88:	604b      	str	r3, [r1, #4]
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001f9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f023 0203 	bic.w	r2, r3, #3
 8001fa8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	608b      	str	r3, [r1, #8]
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001fc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 030c 	and.w	r3, r3, #12
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001fde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fe8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	608b      	str	r3, [r1, #8]
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002006:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800200a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800200e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002012:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4313      	orrs	r3, r2
 800201a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002032:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002036:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800203a:	f023 020f 	bic.w	r2, r3, #15
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002046:	4313      	orrs	r3, r2
 8002048:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002060:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800206a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4313      	orrs	r3, r2
 8002072:	608b      	str	r3, [r1, #8]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002088:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002092:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4313      	orrs	r3, r2
 800209a:	608b      	str	r3, [r1, #8]
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80020ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80020c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80020cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80020de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80020e6:	011b      	lsls	r3, r3, #4
 80020e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80020fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002104:	4618      	mov	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002112:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800211c:	4618      	mov	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800212a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002134:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002138:	6013      	str	r3, [r2, #0]
}
 800213a:	bf00      	nop
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002148:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002152:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002156:	6013      	str	r3, [r2, #0]
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002166:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002170:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002174:	d101      	bne.n	800217a <LL_RCC_PLL_IsReady+0x18>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <LL_RCC_PLL_IsReady+0x1a>
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800218a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	0a1b      	lsrs	r3, r3, #8
 8002192:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002196:	4618      	mov	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80021a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80021bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80021d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	f003 0303 	and.w	r3, r3, #3
}
 80021de:	4618      	mov	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80021ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021fa:	d101      	bne.n	8002200 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002210:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002214:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002220:	d101      	bne.n	8002226 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002236:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800223a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800223e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002242:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002246:	d101      	bne.n	800224c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002248:	2301      	movs	r3, #1
 800224a:	e000      	b.n	800224e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800225c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002266:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800226a:	d101      	bne.n	8002270 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002280:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800228a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800228e:	d101      	bne.n	8002294 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022a0:	b590      	push	{r4, r7, lr}
 80022a2:	b08d      	sub	sp, #52	@ 0x34
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e363      	b.n	800297a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 808d 	beq.w	80023da <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022c0:	f7ff fe7d 	bl	8001fbe <LL_RCC_GetSysClkSource>
 80022c4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022c6:	f7ff ff83 	bl	80021d0 <LL_RCC_PLL_GetMainSource>
 80022ca:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80022cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d005      	beq.n	80022de <HAL_RCC_OscConfig+0x3e>
 80022d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022d4:	2b0c      	cmp	r3, #12
 80022d6:	d147      	bne.n	8002368 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80022d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d144      	bne.n	8002368 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e347      	b.n	800297a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80022ee:	f7ff fe28 	bl	8001f42 <LL_RCC_MSI_GetRange>
 80022f2:	4603      	mov	r3, r0
 80022f4:	429c      	cmp	r4, r3
 80022f6:	d914      	bls.n	8002322 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fc:	4618      	mov	r0, r3
 80022fe:	f000 fd61 	bl	8002dc4 <RCC_SetFlashLatencyFromMSIRange>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e336      	b.n	800297a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff fe02 	bl	8001f1a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fe26 	bl	8001f6c <LL_RCC_MSI_SetCalibTrimming>
 8002320:	e013      	b.n	800234a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff fdf7 	bl	8001f1a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fe1b 	bl	8001f6c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233a:	4618      	mov	r0, r3
 800233c:	f000 fd42 	bl	8002dc4 <RCC_SetFlashLatencyFromMSIRange>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e317      	b.n	800297a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800234a:	f000 fcc9 	bl	8002ce0 <HAL_RCC_GetHCLKFreq>
 800234e:	4603      	mov	r3, r0
 8002350:	4aa4      	ldr	r2, [pc, #656]	@ (80025e4 <HAL_RCC_OscConfig+0x344>)
 8002352:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002354:	4ba4      	ldr	r3, [pc, #656]	@ (80025e8 <HAL_RCC_OscConfig+0x348>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f7fe fe43 	bl	8000fe4 <HAL_InitTick>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d039      	beq.n	80023d8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e308      	b.n	800297a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d01e      	beq.n	80023ae <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002370:	f7ff fda4 	bl	8001ebc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002374:	f7ff f87c 	bl	8001470 <HAL_GetTick>
 8002378:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800237c:	f7ff f878 	bl	8001470 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e2f5      	b.n	800297a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800238e:	f7ff fdb3 	bl	8001ef8 <LL_RCC_MSI_IsReady>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f1      	beq.n	800237c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fdbc 	bl	8001f1a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fde0 	bl	8001f6c <LL_RCC_MSI_SetCalibTrimming>
 80023ac:	e015      	b.n	80023da <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023ae:	f7ff fd94 	bl	8001eda <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023b2:	f7ff f85d 	bl	8001470 <HAL_GetTick>
 80023b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023ba:	f7ff f859 	bl	8001470 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e2d6      	b.n	800297a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80023cc:	f7ff fd94 	bl	8001ef8 <LL_RCC_MSI_IsReady>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f1      	bne.n	80023ba <HAL_RCC_OscConfig+0x11a>
 80023d6:	e000      	b.n	80023da <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80023d8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d047      	beq.n	8002476 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023e6:	f7ff fdea 	bl	8001fbe <LL_RCC_GetSysClkSource>
 80023ea:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023ec:	f7ff fef0 	bl	80021d0 <LL_RCC_PLL_GetMainSource>
 80023f0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	d005      	beq.n	8002404 <HAL_RCC_OscConfig+0x164>
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	2b0c      	cmp	r3, #12
 80023fc:	d108      	bne.n	8002410 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	2b03      	cmp	r3, #3
 8002402:	d105      	bne.n	8002410 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d134      	bne.n	8002476 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e2b4      	b.n	800297a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002418:	d102      	bne.n	8002420 <HAL_RCC_OscConfig+0x180>
 800241a:	f7ff fbd1 	bl	8001bc0 <LL_RCC_HSE_Enable>
 800241e:	e001      	b.n	8002424 <HAL_RCC_OscConfig+0x184>
 8002420:	f7ff fbdd 	bl	8001bde <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d012      	beq.n	8002452 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242c:	f7ff f820 	bl	8001470 <HAL_GetTick>
 8002430:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002434:	f7ff f81c 	bl	8001470 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b64      	cmp	r3, #100	@ 0x64
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e299      	b.n	800297a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002446:	f7ff fbd9 	bl	8001bfc <LL_RCC_HSE_IsReady>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0f1      	beq.n	8002434 <HAL_RCC_OscConfig+0x194>
 8002450:	e011      	b.n	8002476 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002452:	f7ff f80d 	bl	8001470 <HAL_GetTick>
 8002456:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800245a:	f7ff f809 	bl	8001470 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b64      	cmp	r3, #100	@ 0x64
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e286      	b.n	800297a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800246c:	f7ff fbc6 	bl	8001bfc <LL_RCC_HSE_IsReady>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f1      	bne.n	800245a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d04c      	beq.n	800251c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002482:	f7ff fd9c 	bl	8001fbe <LL_RCC_GetSysClkSource>
 8002486:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002488:	f7ff fea2 	bl	80021d0 <LL_RCC_PLL_GetMainSource>
 800248c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	2b04      	cmp	r3, #4
 8002492:	d005      	beq.n	80024a0 <HAL_RCC_OscConfig+0x200>
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	2b0c      	cmp	r3, #12
 8002498:	d10e      	bne.n	80024b8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d10b      	bne.n	80024b8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e266      	b.n	800297a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fbe5 	bl	8001c80 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80024b6:	e031      	b.n	800251c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d019      	beq.n	80024f4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024c0:	f7ff fbae 	bl	8001c20 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c4:	f7fe ffd4 	bl	8001470 <HAL_GetTick>
 80024c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024cc:	f7fe ffd0 	bl	8001470 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e24d      	b.n	800297a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80024de:	f7ff fbbd 	bl	8001c5c <LL_RCC_HSI_IsReady>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0f1      	beq.n	80024cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff fbc7 	bl	8001c80 <LL_RCC_HSI_SetCalibTrimming>
 80024f2:	e013      	b.n	800251c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024f4:	f7ff fba3 	bl	8001c3e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f8:	f7fe ffba 	bl	8001470 <HAL_GetTick>
 80024fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002500:	f7fe ffb6 	bl	8001470 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e233      	b.n	800297a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002512:	f7ff fba3 	bl	8001c5c <LL_RCC_HSI_IsReady>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1f1      	bne.n	8002500 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	2b00      	cmp	r3, #0
 8002526:	d106      	bne.n	8002536 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 80a3 	beq.w	800267c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d076      	beq.n	800262c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0310 	and.w	r3, r3, #16
 8002546:	2b00      	cmp	r3, #0
 8002548:	d046      	beq.n	80025d8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800254a:	f7ff fc5a 	bl	8001e02 <LL_RCC_LSI1_IsReady>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d113      	bne.n	800257c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002554:	f7ff fc33 	bl	8001dbe <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002558:	f7fe ff8a 	bl	8001470 <HAL_GetTick>
 800255c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002560:	f7fe ff86 	bl	8001470 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e203      	b.n	800297a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002572:	f7ff fc46 	bl	8001e02 <LL_RCC_LSI1_IsReady>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f1      	beq.n	8002560 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800257c:	f7ff fc53 	bl	8001e26 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002580:	f7fe ff76 	bl	8001470 <HAL_GetTick>
 8002584:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002588:	f7fe ff72 	bl	8001470 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b03      	cmp	r3, #3
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e1ef      	b.n	800297a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800259a:	f7ff fc66 	bl	8001e6a <LL_RCC_LSI2_IsReady>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f1      	beq.n	8002588 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff fc70 	bl	8001e8e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80025ae:	f7ff fc17 	bl	8001de0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b2:	f7fe ff5d 	bl	8001470 <HAL_GetTick>
 80025b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80025ba:	f7fe ff59 	bl	8001470 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e1d6      	b.n	800297a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80025cc:	f7ff fc19 	bl	8001e02 <LL_RCC_LSI1_IsReady>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f1      	bne.n	80025ba <HAL_RCC_OscConfig+0x31a>
 80025d6:	e051      	b.n	800267c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80025d8:	f7ff fbf1 	bl	8001dbe <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025dc:	f7fe ff48 	bl	8001470 <HAL_GetTick>
 80025e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80025e2:	e00c      	b.n	80025fe <HAL_RCC_OscConfig+0x35e>
 80025e4:	20000008 	.word	0x20000008
 80025e8:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80025ec:	f7fe ff40 	bl	8001470 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e1bd      	b.n	800297a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80025fe:	f7ff fc00 	bl	8001e02 <LL_RCC_LSI1_IsReady>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0f1      	beq.n	80025ec <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002608:	f7ff fc1e 	bl	8001e48 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800260e:	f7fe ff2f 	bl	8001470 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b03      	cmp	r3, #3
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e1ac      	b.n	800297a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002620:	f7ff fc23 	bl	8001e6a <LL_RCC_LSI2_IsReady>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f1      	bne.n	800260e <HAL_RCC_OscConfig+0x36e>
 800262a:	e027      	b.n	800267c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800262c:	f7ff fc0c 	bl	8001e48 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002630:	f7fe ff1e 	bl	8001470 <HAL_GetTick>
 8002634:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002638:	f7fe ff1a 	bl	8001470 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b03      	cmp	r3, #3
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e197      	b.n	800297a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800264a:	f7ff fc0e 	bl	8001e6a <LL_RCC_LSI2_IsReady>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1f1      	bne.n	8002638 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002654:	f7ff fbc4 	bl	8001de0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002658:	f7fe ff0a 	bl	8001470 <HAL_GetTick>
 800265c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002660:	f7fe ff06 	bl	8001470 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e183      	b.n	800297a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002672:	f7ff fbc6 	bl	8001e02 <LL_RCC_LSI1_IsReady>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1f1      	bne.n	8002660 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	d05b      	beq.n	8002740 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002688:	4ba7      	ldr	r3, [pc, #668]	@ (8002928 <HAL_RCC_OscConfig+0x688>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002690:	2b00      	cmp	r3, #0
 8002692:	d114      	bne.n	80026be <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002694:	f7ff fa64 	bl	8001b60 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002698:	f7fe feea 	bl	8001470 <HAL_GetTick>
 800269c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a0:	f7fe fee6 	bl	8001470 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e163      	b.n	800297a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026b2:	4b9d      	ldr	r3, [pc, #628]	@ (8002928 <HAL_RCC_OscConfig+0x688>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d102      	bne.n	80026cc <HAL_RCC_OscConfig+0x42c>
 80026c6:	f7ff fb24 	bl	8001d12 <LL_RCC_LSE_Enable>
 80026ca:	e00c      	b.n	80026e6 <HAL_RCC_OscConfig+0x446>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b05      	cmp	r3, #5
 80026d2:	d104      	bne.n	80026de <HAL_RCC_OscConfig+0x43e>
 80026d4:	f7ff fb3f 	bl	8001d56 <LL_RCC_LSE_EnableBypass>
 80026d8:	f7ff fb1b 	bl	8001d12 <LL_RCC_LSE_Enable>
 80026dc:	e003      	b.n	80026e6 <HAL_RCC_OscConfig+0x446>
 80026de:	f7ff fb29 	bl	8001d34 <LL_RCC_LSE_Disable>
 80026e2:	f7ff fb49 	bl	8001d78 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d014      	beq.n	8002718 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ee:	f7fe febf 	bl	8001470 <HAL_GetTick>
 80026f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80026f4:	e00a      	b.n	800270c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f6:	f7fe febb 	bl	8001470 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002704:	4293      	cmp	r3, r2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e136      	b.n	800297a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800270c:	f7ff fb45 	bl	8001d9a <LL_RCC_LSE_IsReady>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0ef      	beq.n	80026f6 <HAL_RCC_OscConfig+0x456>
 8002716:	e013      	b.n	8002740 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002718:	f7fe feaa 	bl	8001470 <HAL_GetTick>
 800271c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800271e:	e00a      	b.n	8002736 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002720:	f7fe fea6 	bl	8001470 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800272e:	4293      	cmp	r3, r2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e121      	b.n	800297a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002736:	f7ff fb30 	bl	8001d9a <LL_RCC_LSE_IsReady>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1ef      	bne.n	8002720 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002748:	2b00      	cmp	r3, #0
 800274a:	d02c      	beq.n	80027a6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002750:	2b00      	cmp	r3, #0
 8002752:	d014      	beq.n	800277e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002754:	f7ff faa9 	bl	8001caa <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002758:	f7fe fe8a 	bl	8001470 <HAL_GetTick>
 800275c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002760:	f7fe fe86 	bl	8001470 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e103      	b.n	800297a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002772:	f7ff fabc 	bl	8001cee <LL_RCC_HSI48_IsReady>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0f1      	beq.n	8002760 <HAL_RCC_OscConfig+0x4c0>
 800277c:	e013      	b.n	80027a6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800277e:	f7ff faa5 	bl	8001ccc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002782:	f7fe fe75 	bl	8001470 <HAL_GetTick>
 8002786:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800278a:	f7fe fe71 	bl	8001470 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e0ee      	b.n	800297a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800279c:	f7ff faa7 	bl	8001cee <LL_RCC_HSI48_IsReady>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f1      	bne.n	800278a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 80e4 	beq.w	8002978 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027b0:	f7ff fc05 	bl	8001fbe <LL_RCC_GetSysClkSource>
 80027b4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80027b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	f040 80b4 	bne.w	8002930 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f003 0203 	and.w	r2, r3, #3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d123      	bne.n	800281e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d11c      	bne.n	800281e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	0a1b      	lsrs	r3, r3, #8
 80027e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d114      	bne.n	800281e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80027fe:	429a      	cmp	r2, r3
 8002800:	d10d      	bne.n	800281e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800280c:	429a      	cmp	r2, r3
 800280e:	d106      	bne.n	800281e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800281a:	429a      	cmp	r2, r3
 800281c:	d05d      	beq.n	80028da <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	2b0c      	cmp	r3, #12
 8002822:	d058      	beq.n	80028d6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002824:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e0a1      	b.n	800297a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002836:	f7ff fc85 	bl	8002144 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800283a:	f7fe fe19 	bl	8001470 <HAL_GetTick>
 800283e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002842:	f7fe fe15 	bl	8001470 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e092      	b.n	800297a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002854:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1ef      	bne.n	8002842 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002862:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	4b30      	ldr	r3, [pc, #192]	@ (800292c <HAL_RCC_OscConfig+0x68c>)
 800286a:	4013      	ands	r3, r2
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002874:	4311      	orrs	r1, r2
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800287a:	0212      	lsls	r2, r2, #8
 800287c:	4311      	orrs	r1, r2
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002882:	4311      	orrs	r1, r2
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002888:	4311      	orrs	r1, r2
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800288e:	430a      	orrs	r2, r1
 8002890:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002894:	4313      	orrs	r3, r2
 8002896:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002898:	f7ff fc45 	bl	8002126 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800289c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028ac:	f7fe fde0 	bl	8001470 <HAL_GetTick>
 80028b0:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b4:	f7fe fddc 	bl	8001470 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e059      	b.n	800297a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0ef      	beq.n	80028b4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028d4:	e050      	b.n	8002978 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e04f      	b.n	800297a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d147      	bne.n	8002978 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028e8:	f7ff fc1d 	bl	8002126 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028fc:	f7fe fdb8 	bl	8001470 <HAL_GetTick>
 8002900:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002904:	f7fe fdb4 	bl	8001470 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e031      	b.n	800297a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002916:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0ef      	beq.n	8002904 <HAL_RCC_OscConfig+0x664>
 8002924:	e028      	b.n	8002978 <HAL_RCC_OscConfig+0x6d8>
 8002926:	bf00      	nop
 8002928:	58000400 	.word	0x58000400
 800292c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	2b0c      	cmp	r3, #12
 8002934:	d01e      	beq.n	8002974 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002936:	f7ff fc05 	bl	8002144 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293a:	f7fe fd99 	bl	8001470 <HAL_GetTick>
 800293e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002942:	f7fe fd95 	bl	8001470 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e012      	b.n	800297a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002954:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1ef      	bne.n	8002942 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002962:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002966:	68da      	ldr	r2, [r3, #12]
 8002968:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800296c:	4b05      	ldr	r3, [pc, #20]	@ (8002984 <HAL_RCC_OscConfig+0x6e4>)
 800296e:	4013      	ands	r3, r2
 8002970:	60cb      	str	r3, [r1, #12]
 8002972:	e001      	b.n	8002978 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3734      	adds	r7, #52	@ 0x34
 800297e:	46bd      	mov	sp, r7
 8002980:	bd90      	pop	{r4, r7, pc}
 8002982:	bf00      	nop
 8002984:	eefefffc 	.word	0xeefefffc

08002988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e12d      	b.n	8002bf8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800299c:	4b98      	ldr	r3, [pc, #608]	@ (8002c00 <HAL_RCC_ClockConfig+0x278>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d91b      	bls.n	80029e2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029aa:	4b95      	ldr	r3, [pc, #596]	@ (8002c00 <HAL_RCC_ClockConfig+0x278>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f023 0207 	bic.w	r2, r3, #7
 80029b2:	4993      	ldr	r1, [pc, #588]	@ (8002c00 <HAL_RCC_ClockConfig+0x278>)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ba:	f7fe fd59 	bl	8001470 <HAL_GetTick>
 80029be:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80029c2:	f7fe fd55 	bl	8001470 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e111      	b.n	8002bf8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d4:	4b8a      	ldr	r3, [pc, #552]	@ (8002c00 <HAL_RCC_ClockConfig+0x278>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d1ef      	bne.n	80029c2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d016      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff faef 	bl	8001fd6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80029f8:	f7fe fd3a 	bl	8001470 <HAL_GetTick>
 80029fc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a00:	f7fe fd36 	bl	8001470 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e0f2      	b.n	8002bf8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002a12:	f7ff fbe9 	bl	80021e8 <LL_RCC_IsActiveFlag_HPRE>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0f1      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0320 	and.w	r3, r3, #32
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d016      	beq.n	8002a56 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff fae6 	bl	8001ffe <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a32:	f7fe fd1d 	bl	8001470 <HAL_GetTick>
 8002a36:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a3a:	f7fe fd19 	bl	8001470 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e0d5      	b.n	8002bf8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002a4c:	f7ff fbde 	bl	800220c <LL_RCC_IsActiveFlag_C2HPRE>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0f1      	beq.n	8002a3a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d016      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff fadf 	bl	800202a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a6c:	f7fe fd00 	bl	8001470 <HAL_GetTick>
 8002a70:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a74:	f7fe fcfc 	bl	8001470 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e0b8      	b.n	8002bf8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002a86:	f7ff fbd4 	bl	8002232 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f1      	beq.n	8002a74 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d016      	beq.n	8002aca <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fad9 	bl	8002058 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002aa6:	f7fe fce3 	bl	8001470 <HAL_GetTick>
 8002aaa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002aae:	f7fe fcdf 	bl	8001470 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e09b      	b.n	8002bf8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002ac0:	f7ff fbca 	bl	8002258 <LL_RCC_IsActiveFlag_PPRE1>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0f1      	beq.n	8002aae <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d017      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff facf 	bl	8002080 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ae2:	f7fe fcc5 	bl	8001470 <HAL_GetTick>
 8002ae6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002aea:	f7fe fcc1 	bl	8001470 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e07d      	b.n	8002bf8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002afc:	f7ff fbbe 	bl	800227c <LL_RCC_IsActiveFlag_PPRE2>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f1      	beq.n	8002aea <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d043      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d106      	bne.n	8002b28 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002b1a:	f7ff f86f 	bl	8001bfc <LL_RCC_HSE_IsReady>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d11e      	bne.n	8002b62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e067      	b.n	8002bf8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d106      	bne.n	8002b3e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002b30:	f7ff fb17 	bl	8002162 <LL_RCC_PLL_IsReady>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d113      	bne.n	8002b62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e05c      	b.n	8002bf8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d106      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002b46:	f7ff f9d7 	bl	8001ef8 <LL_RCC_MSI_IsReady>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d108      	bne.n	8002b62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e051      	b.n	8002bf8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002b54:	f7ff f882 	bl	8001c5c <LL_RCC_HSI_IsReady>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e04a      	b.n	8002bf8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff fa15 	bl	8001f96 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b6c:	f7fe fc80 	bl	8001470 <HAL_GetTick>
 8002b70:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b72:	e00a      	b.n	8002b8a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b74:	f7fe fc7c 	bl	8001470 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e036      	b.n	8002bf8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8a:	f7ff fa18 	bl	8001fbe <LL_RCC_GetSysClkSource>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d1ec      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b9a:	4b19      	ldr	r3, [pc, #100]	@ (8002c00 <HAL_RCC_ClockConfig+0x278>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d21b      	bcs.n	8002be0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba8:	4b15      	ldr	r3, [pc, #84]	@ (8002c00 <HAL_RCC_ClockConfig+0x278>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f023 0207 	bic.w	r2, r3, #7
 8002bb0:	4913      	ldr	r1, [pc, #76]	@ (8002c00 <HAL_RCC_ClockConfig+0x278>)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bb8:	f7fe fc5a 	bl	8001470 <HAL_GetTick>
 8002bbc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002bc0:	f7fe fc56 	bl	8001470 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e012      	b.n	8002bf8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8002c00 <HAL_RCC_ClockConfig+0x278>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d1ef      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002be0:	f000 f87e 	bl	8002ce0 <HAL_RCC_GetHCLKFreq>
 8002be4:	4603      	mov	r3, r0
 8002be6:	4a07      	ldr	r2, [pc, #28]	@ (8002c04 <HAL_RCC_ClockConfig+0x27c>)
 8002be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002bea:	f7fe fc4d 	bl	8001488 <HAL_GetTickPrio>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7fe f9f7 	bl	8000fe4 <HAL_InitTick>
 8002bf6:	4603      	mov	r3, r0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	58004000 	.word	0x58004000
 8002c04:	20000008 	.word	0x20000008

08002c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c08:	b590      	push	{r4, r7, lr}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c0e:	f7ff f9d6 	bl	8001fbe <LL_RCC_GetSysClkSource>
 8002c12:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10a      	bne.n	8002c30 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002c1a:	f7ff f992 	bl	8001f42 <LL_RCC_MSI_GetRange>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	091b      	lsrs	r3, r3, #4
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	4a2b      	ldr	r2, [pc, #172]	@ (8002cd4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	e04b      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d102      	bne.n	8002c3c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c36:	4b28      	ldr	r3, [pc, #160]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	e045      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d10a      	bne.n	8002c58 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002c42:	f7fe ffab 	bl	8001b9c <LL_RCC_HSE_IsEnabledDiv2>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d102      	bne.n	8002c52 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002c4c:	4b22      	ldr	r3, [pc, #136]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	e03a      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002c52:	4b22      	ldr	r3, [pc, #136]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	e037      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002c58:	f7ff faba 	bl	80021d0 <LL_RCC_PLL_GetMainSource>
 8002c5c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d003      	beq.n	8002c6c <HAL_RCC_GetSysClockFreq+0x64>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	d003      	beq.n	8002c72 <HAL_RCC_GetSysClockFreq+0x6a>
 8002c6a:	e00d      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c6e:	60bb      	str	r3, [r7, #8]
        break;
 8002c70:	e015      	b.n	8002c9e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002c72:	f7fe ff93 	bl	8001b9c <LL_RCC_HSE_IsEnabledDiv2>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d102      	bne.n	8002c82 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002c7c:	4b16      	ldr	r3, [pc, #88]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c7e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002c80:	e00d      	b.n	8002c9e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002c82:	4b16      	ldr	r3, [pc, #88]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002c84:	60bb      	str	r3, [r7, #8]
        break;
 8002c86:	e00a      	b.n	8002c9e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002c88:	f7ff f95b 	bl	8001f42 <LL_RCC_MSI_GetRange>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	091b      	lsrs	r3, r3, #4
 8002c90:	f003 030f 	and.w	r3, r3, #15
 8002c94:	4a0f      	ldr	r2, [pc, #60]	@ (8002cd4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c9a:	60bb      	str	r3, [r7, #8]
        break;
 8002c9c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002c9e:	f7ff fa72 	bl	8002186 <LL_RCC_PLL_GetN>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	fb03 f402 	mul.w	r4, r3, r2
 8002caa:	f7ff fa85 	bl	80021b8 <LL_RCC_PLL_GetDivider>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	091b      	lsrs	r3, r3, #4
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	fbb4 f4f3 	udiv	r4, r4, r3
 8002cb8:	f7ff fa72 	bl	80021a0 <LL_RCC_PLL_GetR>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	0f5b      	lsrs	r3, r3, #29
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	fbb4 f3f3 	udiv	r3, r4, r3
 8002cc6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd90      	pop	{r4, r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	08008b28 	.word	0x08008b28
 8002cd8:	00f42400 	.word	0x00f42400
 8002cdc:	01e84800 	.word	0x01e84800

08002ce0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ce0:	b598      	push	{r3, r4, r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002ce4:	f7ff ff90 	bl	8002c08 <HAL_RCC_GetSysClockFreq>
 8002ce8:	4604      	mov	r4, r0
 8002cea:	f7ff f9dd 	bl	80020a8 <LL_RCC_GetAHBPrescaler>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	091b      	lsrs	r3, r3, #4
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	4a03      	ldr	r2, [pc, #12]	@ (8002d04 <HAL_RCC_GetHCLKFreq+0x24>)
 8002cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cfc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	bd98      	pop	{r3, r4, r7, pc}
 8002d04:	08008ac8 	.word	0x08008ac8

08002d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d08:	b598      	push	{r3, r4, r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002d0c:	f7ff ffe8 	bl	8002ce0 <HAL_RCC_GetHCLKFreq>
 8002d10:	4604      	mov	r4, r0
 8002d12:	f7ff f9f0 	bl	80020f6 <LL_RCC_GetAPB1Prescaler>
 8002d16:	4603      	mov	r3, r0
 8002d18:	0a1b      	lsrs	r3, r3, #8
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	4a04      	ldr	r2, [pc, #16]	@ (8002d30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d24:	f003 031f 	and.w	r3, r3, #31
 8002d28:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	bd98      	pop	{r3, r4, r7, pc}
 8002d30:	08008b08 	.word	0x08008b08

08002d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d34:	b598      	push	{r3, r4, r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002d38:	f7ff ffd2 	bl	8002ce0 <HAL_RCC_GetHCLKFreq>
 8002d3c:	4604      	mov	r4, r0
 8002d3e:	f7ff f9e6 	bl	800210e <LL_RCC_GetAPB2Prescaler>
 8002d42:	4603      	mov	r3, r0
 8002d44:	0adb      	lsrs	r3, r3, #11
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	4a04      	ldr	r2, [pc, #16]	@ (8002d5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d50:	f003 031f 	and.w	r3, r3, #31
 8002d54:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	bd98      	pop	{r3, r4, r7, pc}
 8002d5c:	08008b08 	.word	0x08008b08

08002d60 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	226f      	movs	r2, #111	@ 0x6f
 8002d6e:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8002d70:	f7ff f925 	bl	8001fbe <LL_RCC_GetSysClkSource>
 8002d74:	4602      	mov	r2, r0
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8002d7a:	f7ff f995 	bl	80020a8 <LL_RCC_GetAHBPrescaler>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8002d84:	f7ff f9b7 	bl	80020f6 <LL_RCC_GetAPB1Prescaler>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8002d8e:	f7ff f9be 	bl	800210e <LL_RCC_GetAPB2Prescaler>
 8002d92:	4602      	mov	r2, r0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8002d98:	f7ff f992 	bl	80020c0 <LL_C2_RCC_GetAHBPrescaler>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8002da2:	f7ff f99a 	bl	80020da <LL_RCC_GetAHB4Prescaler>
 8002da6:	4602      	mov	r2, r0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002dac:	4b04      	ldr	r3, [pc, #16]	@ (8002dc0 <HAL_RCC_GetClockConfig+0x60>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0207 	and.w	r2, r3, #7
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	601a      	str	r2, [r3, #0]
}
 8002db8:	bf00      	nop
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	58004000 	.word	0x58004000

08002dc4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002dc4:	b590      	push	{r4, r7, lr}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2bb0      	cmp	r3, #176	@ 0xb0
 8002dd0:	d903      	bls.n	8002dda <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002dd2:	4b15      	ldr	r3, [pc, #84]	@ (8002e28 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	e007      	b.n	8002dea <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	4a11      	ldr	r2, [pc, #68]	@ (8002e28 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002dea:	f7ff f976 	bl	80020da <LL_RCC_GetAHB4Prescaler>
 8002dee:	4603      	mov	r3, r0
 8002df0:	091b      	lsrs	r3, r3, #4
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	4a0d      	ldr	r2, [pc, #52]	@ (8002e2c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e02:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	4a0a      	ldr	r2, [pc, #40]	@ (8002e30 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002e08:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0c:	0c9c      	lsrs	r4, r3, #18
 8002e0e:	f7fe feb7 	bl	8001b80 <HAL_PWREx_GetVoltageRange>
 8002e12:	4603      	mov	r3, r0
 8002e14:	4619      	mov	r1, r3
 8002e16:	4620      	mov	r0, r4
 8002e18:	f000 f80c 	bl	8002e34 <RCC_SetFlashLatency>
 8002e1c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd90      	pop	{r4, r7, pc}
 8002e26:	bf00      	nop
 8002e28:	08008b28 	.word	0x08008b28
 8002e2c:	08008ac8 	.word	0x08008ac8
 8002e30:	431bde83 	.word	0x431bde83

08002e34 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002e34:	b590      	push	{r4, r7, lr}
 8002e36:	b093      	sub	sp, #76	@ 0x4c
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002e3e:	4b37      	ldr	r3, [pc, #220]	@ (8002f1c <RCC_SetFlashLatency+0xe8>)
 8002e40:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002e44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002e4a:	4a35      	ldr	r2, [pc, #212]	@ (8002f20 <RCC_SetFlashLatency+0xec>)
 8002e4c:	f107 031c 	add.w	r3, r7, #28
 8002e50:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002e56:	4b33      	ldr	r3, [pc, #204]	@ (8002f24 <RCC_SetFlashLatency+0xf0>)
 8002e58:	f107 040c 	add.w	r4, r7, #12
 8002e5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002e62:	2300      	movs	r3, #0
 8002e64:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e6c:	d11a      	bne.n	8002ea4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002e6e:	2300      	movs	r3, #0
 8002e70:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e72:	e013      	b.n	8002e9c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002e74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	3348      	adds	r3, #72	@ 0x48
 8002e7a:	443b      	add	r3, r7
 8002e7c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d807      	bhi.n	8002e96 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002e86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	3348      	adds	r3, #72	@ 0x48
 8002e8c:	443b      	add	r3, r7
 8002e8e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002e92:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002e94:	e020      	b.n	8002ed8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002e96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e98:	3301      	adds	r3, #1
 8002e9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	d9e8      	bls.n	8002e74 <RCC_SetFlashLatency+0x40>
 8002ea2:	e019      	b.n	8002ed8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ea8:	e013      	b.n	8002ed2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002eaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	3348      	adds	r3, #72	@ 0x48
 8002eb0:	443b      	add	r3, r7
 8002eb2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d807      	bhi.n	8002ecc <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002ebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	3348      	adds	r3, #72	@ 0x48
 8002ec2:	443b      	add	r3, r7
 8002ec4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002ec8:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002eca:	e005      	b.n	8002ed8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002ecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ece:	3301      	adds	r3, #1
 8002ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d9e8      	bls.n	8002eaa <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002ed8:	4b13      	ldr	r3, [pc, #76]	@ (8002f28 <RCC_SetFlashLatency+0xf4>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f023 0207 	bic.w	r2, r3, #7
 8002ee0:	4911      	ldr	r1, [pc, #68]	@ (8002f28 <RCC_SetFlashLatency+0xf4>)
 8002ee2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002ee8:	f7fe fac2 	bl	8001470 <HAL_GetTick>
 8002eec:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002eee:	e008      	b.n	8002f02 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002ef0:	f7fe fabe 	bl	8001470 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e007      	b.n	8002f12 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002f02:	4b09      	ldr	r3, [pc, #36]	@ (8002f28 <RCC_SetFlashLatency+0xf4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d1ef      	bne.n	8002ef0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	374c      	adds	r7, #76	@ 0x4c
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd90      	pop	{r4, r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	080089f4 	.word	0x080089f4
 8002f20:	08008a04 	.word	0x08008a04
 8002f24:	08008a10 	.word	0x08008a10
 8002f28:	58004000 	.word	0x58004000

08002f2c <LL_RCC_LSE_IsEnabled>:
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002f30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <LL_RCC_LSE_IsEnabled+0x18>
 8002f40:	2301      	movs	r3, #1
 8002f42:	e000      	b.n	8002f46 <LL_RCC_LSE_IsEnabled+0x1a>
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <LL_RCC_LSE_IsReady>:
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002f54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d101      	bne.n	8002f68 <LL_RCC_LSE_IsReady+0x18>
 8002f64:	2301      	movs	r3, #1
 8002f66:	e000      	b.n	8002f6a <LL_RCC_LSE_IsReady+0x1a>
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <LL_RCC_SetRFWKPClockSource>:
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002f7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f84:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <LL_RCC_SetSMPSClockSource>:
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002fa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fae:	f023 0203 	bic.w	r2, r3, #3
 8002fb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <LL_RCC_SetSMPSPrescaler>:
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002fd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002fda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <LL_RCC_SetUSARTClockSource>:
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002ff8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003000:	f023 0203 	bic.w	r2, r3, #3
 8003004:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4313      	orrs	r3, r2
 800300c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <LL_RCC_SetLPUARTClockSource>:
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003024:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800302c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003030:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <LL_RCC_SetI2CClockSource>:
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003050:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003054:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	091b      	lsrs	r3, r3, #4
 800305c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003060:	43db      	mvns	r3, r3
 8003062:	401a      	ands	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800306c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <LL_RCC_SetLPTIMClockSource>:
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800308a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800308e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	0c1b      	lsrs	r3, r3, #16
 8003096:	041b      	lsls	r3, r3, #16
 8003098:	43db      	mvns	r3, r3
 800309a:	401a      	ands	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	041b      	lsls	r3, r3, #16
 80030a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <LL_RCC_SetSAIClockSource>:
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80030be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <LL_RCC_SetRNGClockSource>:
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80030ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030f2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80030f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <LL_RCC_SetCLK48ClockSource>:
{
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003116:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800311a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800311e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003122:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <LL_RCC_SetUSBClockSource>:
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b082      	sub	sp, #8
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7ff ffe3 	bl	800310e <LL_RCC_SetCLK48ClockSource>
}
 8003148:	bf00      	nop
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <LL_RCC_SetADCClockSource>:
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003158:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800315c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003160:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003164:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <LL_RCC_SetRTCClockSource>:
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800318c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003190:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4313      	orrs	r3, r2
 8003198:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <LL_RCC_GetRTCClockSource>:
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80031ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <LL_RCC_ForceBackupDomainReset>:
{
 80031c2:	b480      	push	{r7}
 80031c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80031c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80031da:	bf00      	nop
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <LL_RCC_ReleaseBackupDomainReset>:
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80031e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80031fc:	bf00      	nop
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <LL_RCC_PLLSAI1_Enable>:
{
 8003206:	b480      	push	{r7}
 8003208:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800320a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003214:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003218:	6013      	str	r3, [r2, #0]
}
 800321a:	bf00      	nop
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <LL_RCC_PLLSAI1_Disable>:
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003232:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003236:	6013      	str	r3, [r2, #0]
}
 8003238:	bf00      	nop
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <LL_RCC_PLLSAI1_IsReady>:
{
 8003242:	b480      	push	{r7}
 8003244:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003246:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003250:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003254:	d101      	bne.n	800325a <LL_RCC_PLLSAI1_IsReady+0x18>
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b088      	sub	sp, #32
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800326e:	2300      	movs	r3, #0
 8003270:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003272:	2300      	movs	r3, #0
 8003274:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800327e:	2b00      	cmp	r3, #0
 8003280:	d034      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003286:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800328a:	d021      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800328c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003290:	d81b      	bhi.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003292:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003296:	d01d      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003298:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800329c:	d815      	bhi.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x64>
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00b      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x54>
 80032a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032a6:	d110      	bne.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80032a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032b6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80032b8:	e00d      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	3304      	adds	r3, #4
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 f947 	bl	8003552 <RCCEx_PLLSAI1_ConfigNP>
 80032c4:	4603      	mov	r3, r0
 80032c6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80032c8:	e005      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	77fb      	strb	r3, [r7, #31]
        break;
 80032ce:	e002      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80032d0:	bf00      	nop
 80032d2:	e000      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80032d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032d6:	7ffb      	ldrb	r3, [r7, #31]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d105      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff fee8 	bl	80030b6 <LL_RCC_SetSAIClockSource>
 80032e6:	e001      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e8:	7ffb      	ldrb	r3, [r7, #31]
 80032ea:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d046      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80032f8:	f7ff ff56 	bl	80031a8 <LL_RCC_GetRTCClockSource>
 80032fc:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	429a      	cmp	r2, r3
 8003306:	d03c      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003308:	f7fe fc2a 	bl	8001b60 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d105      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff ff30 	bl	800317c <LL_RCC_SetRTCClockSource>
 800331c:	e02e      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800331e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003326:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003328:	f7ff ff4b 	bl	80031c2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800332c:	f7ff ff5a 	bl	80031e4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	4313      	orrs	r3, r2
 800333c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800333e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003348:	f7ff fdf0 	bl	8002f2c <LL_RCC_LSE_IsEnabled>
 800334c:	4603      	mov	r3, r0
 800334e:	2b01      	cmp	r3, #1
 8003350:	d114      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003352:	f7fe f88d 	bl	8001470 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003358:	e00b      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800335a:	f7fe f889 	bl	8001470 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003368:	4293      	cmp	r3, r2
 800336a:	d902      	bls.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	77fb      	strb	r3, [r7, #31]
              break;
 8003370:	e004      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003372:	f7ff fded 	bl	8002f50 <LL_RCC_LSE_IsReady>
 8003376:	4603      	mov	r3, r0
 8003378:	2b01      	cmp	r3, #1
 800337a:	d1ee      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800337c:	7ffb      	ldrb	r3, [r7, #31]
 800337e:	77bb      	strb	r3, [r7, #30]
 8003380:	e001      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003382:	7ffb      	ldrb	r3, [r7, #31]
 8003384:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d004      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff fe2a 	bl	8002ff0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d004      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff fe35 	bl	800301c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0310 	and.w	r3, r3, #16
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d004      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff fe5d 	bl	8003082 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0320 	and.w	r3, r3, #32
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d004      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff fe52 	bl	8003082 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d004      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff fe2a 	bl	8003048 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d004      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff fe1f 	bl	8003048 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003412:	2b00      	cmp	r3, #0
 8003414:	d022      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff fe8d 	bl	800313a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003424:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003428:	d107      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800342a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003434:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003438:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800343e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003442:	d10b      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3304      	adds	r3, #4
 8003448:	4618      	mov	r0, r3
 800344a:	f000 f8dd 	bl	8003608 <RCCEx_PLLSAI1_ConfigNQ>
 800344e:	4603      	mov	r3, r0
 8003450:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003452:	7ffb      	ldrb	r3, [r7, #31]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003458:	7ffb      	ldrb	r3, [r7, #31]
 800345a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003464:	2b00      	cmp	r3, #0
 8003466:	d02b      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800346c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003470:	d008      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003476:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800347a:	d003      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003480:	2b00      	cmp	r3, #0
 8003482:	d105      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff fe2a 	bl	80030e2 <LL_RCC_SetRNGClockSource>
 800348e:	e00a      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003494:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	2000      	movs	r0, #0
 800349c:	f7ff fe21 	bl	80030e2 <LL_RCC_SetRNGClockSource>
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f7ff fe34 	bl	800310e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034aa:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80034ae:	d107      	bne.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80034b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d022      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff fe3d 	bl	8003150 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034de:	d107      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80034e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034ee:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034f8:	d10b      	bne.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3304      	adds	r3, #4
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 f8dd 	bl	80036be <RCCEx_PLLSAI1_ConfigNR>
 8003504:	4603      	mov	r3, r0
 8003506:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003508:	7ffb      	ldrb	r3, [r7, #31]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800350e:	7ffb      	ldrb	r3, [r7, #31]
 8003510:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d004      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff fd26 	bl	8002f74 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d009      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff fd45 	bl	8002fc8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff fd2c 	bl	8002fa0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003548:	7fbb      	ldrb	r3, [r7, #30]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3720      	adds	r7, #32
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b084      	sub	sp, #16
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800355e:	f7ff fe61 	bl	8003224 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003562:	f7fd ff85 	bl	8001470 <HAL_GetTick>
 8003566:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003568:	e009      	b.n	800357e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800356a:	f7fd ff81 	bl	8001470 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d902      	bls.n	800357e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	73fb      	strb	r3, [r7, #15]
      break;
 800357c:	e004      	b.n	8003588 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800357e:	f7ff fe60 	bl	8003242 <LL_RCC_PLLSAI1_IsReady>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1f0      	bne.n	800356a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d137      	bne.n	80035fe <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800358e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	021b      	lsls	r3, r3, #8
 800359e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035a2:	4313      	orrs	r3, r2
 80035a4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80035a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035b8:	4313      	orrs	r3, r2
 80035ba:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80035bc:	f7ff fe23 	bl	8003206 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035c0:	f7fd ff56 	bl	8001470 <HAL_GetTick>
 80035c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80035c6:	e009      	b.n	80035dc <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035c8:	f7fd ff52 	bl	8001470 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d902      	bls.n	80035dc <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	73fb      	strb	r3, [r7, #15]
        break;
 80035da:	e004      	b.n	80035e6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80035dc:	f7ff fe31 	bl	8003242 <LL_RCC_PLLSAI1_IsReady>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d1f0      	bne.n	80035c8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80035e6:	7bfb      	ldrb	r3, [r7, #15]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d108      	bne.n	80035fe <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80035ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035f0:	691a      	ldr	r2, [r3, #16]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035fa:	4313      	orrs	r3, r2
 80035fc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003610:	2300      	movs	r3, #0
 8003612:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003614:	f7ff fe06 	bl	8003224 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003618:	f7fd ff2a 	bl	8001470 <HAL_GetTick>
 800361c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800361e:	e009      	b.n	8003634 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003620:	f7fd ff26 	bl	8001470 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d902      	bls.n	8003634 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	73fb      	strb	r3, [r7, #15]
      break;
 8003632:	e004      	b.n	800363e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003634:	f7ff fe05 	bl	8003242 <LL_RCC_PLLSAI1_IsReady>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f0      	bne.n	8003620 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800363e:	7bfb      	ldrb	r3, [r7, #15]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d137      	bne.n	80036b4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003644:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	021b      	lsls	r3, r3, #8
 8003654:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003658:	4313      	orrs	r3, r2
 800365a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800365c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800366e:	4313      	orrs	r3, r2
 8003670:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003672:	f7ff fdc8 	bl	8003206 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003676:	f7fd fefb 	bl	8001470 <HAL_GetTick>
 800367a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800367c:	e009      	b.n	8003692 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800367e:	f7fd fef7 	bl	8001470 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d902      	bls.n	8003692 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	73fb      	strb	r3, [r7, #15]
        break;
 8003690:	e004      	b.n	800369c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003692:	f7ff fdd6 	bl	8003242 <LL_RCC_PLLSAI1_IsReady>
 8003696:	4603      	mov	r3, r0
 8003698:	2b01      	cmp	r3, #1
 800369a:	d1f0      	bne.n	800367e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d108      	bne.n	80036b4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80036a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036a6:	691a      	ldr	r2, [r3, #16]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036b0:	4313      	orrs	r3, r2
 80036b2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80036ca:	f7ff fdab 	bl	8003224 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80036ce:	f7fd fecf 	bl	8001470 <HAL_GetTick>
 80036d2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80036d4:	e009      	b.n	80036ea <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036d6:	f7fd fecb 	bl	8001470 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d902      	bls.n	80036ea <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	73fb      	strb	r3, [r7, #15]
      break;
 80036e8:	e004      	b.n	80036f4 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80036ea:	f7ff fdaa 	bl	8003242 <LL_RCC_PLLSAI1_IsReady>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1f0      	bne.n	80036d6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d137      	bne.n	800376a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80036fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	021b      	lsls	r3, r3, #8
 800370a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800370e:	4313      	orrs	r3, r2
 8003710:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003712:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003724:	4313      	orrs	r3, r2
 8003726:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003728:	f7ff fd6d 	bl	8003206 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800372c:	f7fd fea0 	bl	8001470 <HAL_GetTick>
 8003730:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003732:	e009      	b.n	8003748 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003734:	f7fd fe9c 	bl	8001470 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d902      	bls.n	8003748 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	73fb      	strb	r3, [r7, #15]
        break;
 8003746:	e004      	b.n	8003752 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003748:	f7ff fd7b 	bl	8003242 <LL_RCC_PLLSAI1_IsReady>
 800374c:	4603      	mov	r3, r0
 800374e:	2b01      	cmp	r3, #1
 8003750:	d1f0      	bne.n	8003734 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003752:	7bfb      	ldrb	r3, [r7, #15]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d108      	bne.n	800376a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003758:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800375c:	691a      	ldr	r2, [r3, #16]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003766:	4313      	orrs	r3, r2
 8003768:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800376a:	7bfb      	ldrb	r3, [r7, #15]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e049      	b.n	800381a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d106      	bne.n	80037a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f841 	bl	8003822 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2202      	movs	r2, #2
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3304      	adds	r3, #4
 80037b0:	4619      	mov	r1, r3
 80037b2:	4610      	mov	r0, r2
 80037b4:	f000 f9be 	bl	8003b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
	...

08003838 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b01      	cmp	r3, #1
 800384a:	d001      	beq.n	8003850 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e036      	b.n	80038be <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0201 	orr.w	r2, r2, #1
 8003866:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a17      	ldr	r2, [pc, #92]	@ (80038cc <HAL_TIM_Base_Start_IT+0x94>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d004      	beq.n	800387c <HAL_TIM_Base_Start_IT+0x44>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800387a:	d115      	bne.n	80038a8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	4b13      	ldr	r3, [pc, #76]	@ (80038d0 <HAL_TIM_Base_Start_IT+0x98>)
 8003884:	4013      	ands	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2b06      	cmp	r3, #6
 800388c:	d015      	beq.n	80038ba <HAL_TIM_Base_Start_IT+0x82>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003894:	d011      	beq.n	80038ba <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f042 0201 	orr.w	r2, r2, #1
 80038a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a6:	e008      	b.n	80038ba <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0201 	orr.w	r2, r2, #1
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	e000      	b.n	80038bc <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40012c00 	.word	0x40012c00
 80038d0:	00010007 	.word	0x00010007

080038d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d020      	beq.n	8003938 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d01b      	beq.n	8003938 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f06f 0202 	mvn.w	r2, #2
 8003908:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f8e9 	bl	8003af6 <HAL_TIM_IC_CaptureCallback>
 8003924:	e005      	b.n	8003932 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f8db 	bl	8003ae2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f8ec 	bl	8003b0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	f003 0304 	and.w	r3, r3, #4
 800393e:	2b00      	cmp	r3, #0
 8003940:	d020      	beq.n	8003984 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	d01b      	beq.n	8003984 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f06f 0204 	mvn.w	r2, #4
 8003954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2202      	movs	r2, #2
 800395a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f8c3 	bl	8003af6 <HAL_TIM_IC_CaptureCallback>
 8003970:	e005      	b.n	800397e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f8b5 	bl	8003ae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f8c6 	bl	8003b0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d020      	beq.n	80039d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b00      	cmp	r3, #0
 8003996:	d01b      	beq.n	80039d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f06f 0208 	mvn.w	r2, #8
 80039a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2204      	movs	r2, #4
 80039a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f89d 	bl	8003af6 <HAL_TIM_IC_CaptureCallback>
 80039bc:	e005      	b.n	80039ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f88f 	bl	8003ae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f8a0 	bl	8003b0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f003 0310 	and.w	r3, r3, #16
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d020      	beq.n	8003a1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f003 0310 	and.w	r3, r3, #16
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d01b      	beq.n	8003a1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f06f 0210 	mvn.w	r2, #16
 80039ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2208      	movs	r2, #8
 80039f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f877 	bl	8003af6 <HAL_TIM_IC_CaptureCallback>
 8003a08:	e005      	b.n	8003a16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f869 	bl	8003ae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f87a 	bl	8003b0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00c      	beq.n	8003a40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d007      	beq.n	8003a40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f06f 0201 	mvn.w	r2, #1
 8003a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7fd f970 	bl	8000d20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d104      	bne.n	8003a54 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00c      	beq.n	8003a6e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f8d7 	bl	8003c1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00c      	beq.n	8003a92 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d007      	beq.n	8003a92 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f8cf 	bl	8003c30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00c      	beq.n	8003ab6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d007      	beq.n	8003ab6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f834 	bl	8003b1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	f003 0320 	and.w	r3, r3, #32
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00c      	beq.n	8003ada <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f003 0320 	and.w	r3, r3, #32
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d007      	beq.n	8003ada <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f06f 0220 	mvn.w	r2, #32
 8003ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f897 	bl	8003c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ada:	bf00      	nop
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
	...

08003b34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a2d      	ldr	r2, [pc, #180]	@ (8003bfc <TIM_Base_SetConfig+0xc8>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d003      	beq.n	8003b54 <TIM_Base_SetConfig+0x20>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b52:	d108      	bne.n	8003b66 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a24      	ldr	r2, [pc, #144]	@ (8003bfc <TIM_Base_SetConfig+0xc8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00b      	beq.n	8003b86 <TIM_Base_SetConfig+0x52>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b74:	d007      	beq.n	8003b86 <TIM_Base_SetConfig+0x52>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a21      	ldr	r2, [pc, #132]	@ (8003c00 <TIM_Base_SetConfig+0xcc>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d003      	beq.n	8003b86 <TIM_Base_SetConfig+0x52>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a20      	ldr	r2, [pc, #128]	@ (8003c04 <TIM_Base_SetConfig+0xd0>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d108      	bne.n	8003b98 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a10      	ldr	r2, [pc, #64]	@ (8003bfc <TIM_Base_SetConfig+0xc8>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d007      	beq.n	8003bce <TIM_Base_SetConfig+0x9a>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a0f      	ldr	r2, [pc, #60]	@ (8003c00 <TIM_Base_SetConfig+0xcc>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d003      	beq.n	8003bce <TIM_Base_SetConfig+0x9a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a0e      	ldr	r2, [pc, #56]	@ (8003c04 <TIM_Base_SetConfig+0xd0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d103      	bne.n	8003bd6 <TIM_Base_SetConfig+0xa2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	691a      	ldr	r2, [r3, #16]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f043 0204 	orr.w	r2, r3, #4
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	601a      	str	r2, [r3, #0]
}
 8003bee:	bf00      	nop
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	40012c00 	.word	0x40012c00
 8003c00:	40014400 	.word	0x40014400
 8003c04:	40014800 	.word	0x40014800

08003c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <LL_RCC_GetUSARTClockSource>:
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003c4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c50:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4013      	ands	r3, r2
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <LL_RCC_GetLPUARTClockSource>:
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003c6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c70:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4013      	ands	r3, r2
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e042      	b.n	8003d1c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d106      	bne.n	8003cae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7fd f8c9 	bl	8000e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2224      	movs	r2, #36	@ 0x24
 8003cb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 0201 	bic.w	r2, r2, #1
 8003cc4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d002      	beq.n	8003cd4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fbe6 	bl	80044a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f9bb 	bl	8004050 <UART_SetConfig>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d101      	bne.n	8003ce4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e01b      	b.n	8003d1c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cf2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 fc65 	bl	80045e4 <UART_CheckIdleState>
 8003d1a:	4603      	mov	r3, r0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e031      	b.n	8003d9a <HAL_UART_DeInit+0x76>
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
#else
  assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */

  huart->gState = HAL_UART_STATE_BUSY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2224      	movs	r2, #36	@ 0x24
 8003d3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0201 	bic.w	r2, r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2200      	movs	r2, #0
 8003d54:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2200      	movs	r2, #0
 8003d64:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7fd f8f2 	bl	8000f50 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b08a      	sub	sp, #40	@ 0x28
 8003da6:	af02      	add	r7, sp, #8
 8003da8:	60f8      	str	r0, [r7, #12]
 8003daa:	60b9      	str	r1, [r7, #8]
 8003dac:	603b      	str	r3, [r7, #0]
 8003dae:	4613      	mov	r3, r2
 8003db0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db8:	2b20      	cmp	r3, #32
 8003dba:	d17b      	bne.n	8003eb4 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d002      	beq.n	8003dc8 <HAL_UART_Transmit+0x26>
 8003dc2:	88fb      	ldrh	r3, [r7, #6]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e074      	b.n	8003eb6 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2221      	movs	r2, #33	@ 0x21
 8003dd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ddc:	f7fd fb48 	bl	8001470 <HAL_GetTick>
 8003de0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	88fa      	ldrh	r2, [r7, #6]
 8003de6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	88fa      	ldrh	r2, [r7, #6]
 8003dee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dfa:	d108      	bne.n	8003e0e <HAL_UART_Transmit+0x6c>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d104      	bne.n	8003e0e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e04:	2300      	movs	r3, #0
 8003e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	61bb      	str	r3, [r7, #24]
 8003e0c:	e003      	b.n	8003e16 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e16:	e030      	b.n	8003e7a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	2180      	movs	r1, #128	@ 0x80
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 fc88 	bl	8004738 <UART_WaitOnFlagUntilTimeout>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2220      	movs	r2, #32
 8003e32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e03d      	b.n	8003eb6 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10b      	bne.n	8003e58 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	881b      	ldrh	r3, [r3, #0]
 8003e44:	461a      	mov	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e4e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	3302      	adds	r3, #2
 8003e54:	61bb      	str	r3, [r7, #24]
 8003e56:	e007      	b.n	8003e68 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	781a      	ldrb	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	3301      	adds	r3, #1
 8003e66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1c8      	bne.n	8003e18 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2140      	movs	r1, #64	@ 0x40
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 fc51 	bl	8004738 <UART_WaitOnFlagUntilTimeout>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d005      	beq.n	8003ea8 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e006      	b.n	8003eb6 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	e000      	b.n	8003eb6 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003eb4:	2302      	movs	r3, #2
  }
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3720      	adds	r7, #32
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b08a      	sub	sp, #40	@ 0x28
 8003ec2:	af02      	add	r7, sp, #8
 8003ec4:	60f8      	str	r0, [r7, #12]
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	603b      	str	r3, [r7, #0]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ed4:	2b20      	cmp	r3, #32
 8003ed6:	f040 80b5 	bne.w	8004044 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <HAL_UART_Receive+0x28>
 8003ee0:	88fb      	ldrh	r3, [r7, #6]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e0ad      	b.n	8004046 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2222      	movs	r2, #34	@ 0x22
 8003ef6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f00:	f7fd fab6 	bl	8001470 <HAL_GetTick>
 8003f04:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	88fa      	ldrh	r2, [r7, #6]
 8003f0a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	88fa      	ldrh	r2, [r7, #6]
 8003f12:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f1e:	d10e      	bne.n	8003f3e <HAL_UART_Receive+0x80>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d105      	bne.n	8003f34 <HAL_UART_Receive+0x76>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003f2e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003f32:	e02d      	b.n	8003f90 <HAL_UART_Receive+0xd2>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	22ff      	movs	r2, #255	@ 0xff
 8003f38:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003f3c:	e028      	b.n	8003f90 <HAL_UART_Receive+0xd2>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10d      	bne.n	8003f62 <HAL_UART_Receive+0xa4>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d104      	bne.n	8003f58 <HAL_UART_Receive+0x9a>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	22ff      	movs	r2, #255	@ 0xff
 8003f52:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003f56:	e01b      	b.n	8003f90 <HAL_UART_Receive+0xd2>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	227f      	movs	r2, #127	@ 0x7f
 8003f5c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003f60:	e016      	b.n	8003f90 <HAL_UART_Receive+0xd2>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f6a:	d10d      	bne.n	8003f88 <HAL_UART_Receive+0xca>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d104      	bne.n	8003f7e <HAL_UART_Receive+0xc0>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	227f      	movs	r2, #127	@ 0x7f
 8003f78:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003f7c:	e008      	b.n	8003f90 <HAL_UART_Receive+0xd2>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	223f      	movs	r2, #63	@ 0x3f
 8003f82:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003f86:	e003      	b.n	8003f90 <HAL_UART_Receive+0xd2>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003f96:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fa0:	d108      	bne.n	8003fb4 <HAL_UART_Receive+0xf6>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d104      	bne.n	8003fb4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	61bb      	str	r3, [r7, #24]
 8003fb2:	e003      	b.n	8003fbc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003fbc:	e036      	b.n	800402c <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2120      	movs	r1, #32
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 fbb5 	bl	8004738 <UART_WaitOnFlagUntilTimeout>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d005      	beq.n	8003fe0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e032      	b.n	8004046 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10c      	bne.n	8004000 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	8a7b      	ldrh	r3, [r7, #18]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	3302      	adds	r3, #2
 8003ffc:	61bb      	str	r3, [r7, #24]
 8003ffe:	e00c      	b.n	800401a <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004006:	b2da      	uxtb	r2, r3
 8004008:	8a7b      	ldrh	r3, [r7, #18]
 800400a:	b2db      	uxtb	r3, r3
 800400c:	4013      	ands	r3, r2
 800400e:	b2da      	uxtb	r2, r3
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	3301      	adds	r3, #1
 8004018:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004020:	b29b      	uxth	r3, r3
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004032:	b29b      	uxth	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1c2      	bne.n	8003fbe <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2220      	movs	r2, #32
 800403c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8004040:	2300      	movs	r3, #0
 8004042:	e000      	b.n	8004046 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8004044:	2302      	movs	r3, #2
  }
}
 8004046:	4618      	mov	r0, r3
 8004048:	3720      	adds	r7, #32
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
	...

08004050 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004054:	b08c      	sub	sp, #48	@ 0x30
 8004056:	af00      	add	r7, sp, #0
 8004058:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	431a      	orrs	r2, r3
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	431a      	orrs	r2, r3
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	4313      	orrs	r3, r2
 8004076:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	4baf      	ldr	r3, [pc, #700]	@ (800433c <UART_SetConfig+0x2ec>)
 8004080:	4013      	ands	r3, r2
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	6812      	ldr	r2, [r2, #0]
 8004086:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004088:	430b      	orrs	r3, r1
 800408a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	68da      	ldr	r2, [r3, #12]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4aa4      	ldr	r2, [pc, #656]	@ (8004340 <UART_SetConfig+0x2f0>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d004      	beq.n	80040bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040b8:	4313      	orrs	r3, r2
 80040ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80040c6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	6812      	ldr	r2, [r2, #0]
 80040ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040d0:	430b      	orrs	r3, r1
 80040d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040da:	f023 010f 	bic.w	r1, r3, #15
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a95      	ldr	r2, [pc, #596]	@ (8004344 <UART_SetConfig+0x2f4>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d125      	bne.n	8004140 <UART_SetConfig+0xf0>
 80040f4:	2003      	movs	r0, #3
 80040f6:	f7ff fda5 	bl	8003c44 <LL_RCC_GetUSARTClockSource>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b03      	cmp	r3, #3
 80040fe:	d81b      	bhi.n	8004138 <UART_SetConfig+0xe8>
 8004100:	a201      	add	r2, pc, #4	@ (adr r2, 8004108 <UART_SetConfig+0xb8>)
 8004102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004106:	bf00      	nop
 8004108:	08004119 	.word	0x08004119
 800410c:	08004129 	.word	0x08004129
 8004110:	08004121 	.word	0x08004121
 8004114:	08004131 	.word	0x08004131
 8004118:	2301      	movs	r3, #1
 800411a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800411e:	e042      	b.n	80041a6 <UART_SetConfig+0x156>
 8004120:	2302      	movs	r3, #2
 8004122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004126:	e03e      	b.n	80041a6 <UART_SetConfig+0x156>
 8004128:	2304      	movs	r3, #4
 800412a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800412e:	e03a      	b.n	80041a6 <UART_SetConfig+0x156>
 8004130:	2308      	movs	r3, #8
 8004132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004136:	e036      	b.n	80041a6 <UART_SetConfig+0x156>
 8004138:	2310      	movs	r3, #16
 800413a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800413e:	e032      	b.n	80041a6 <UART_SetConfig+0x156>
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a7e      	ldr	r2, [pc, #504]	@ (8004340 <UART_SetConfig+0x2f0>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d12a      	bne.n	80041a0 <UART_SetConfig+0x150>
 800414a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800414e:	f7ff fd89 	bl	8003c64 <LL_RCC_GetLPUARTClockSource>
 8004152:	4603      	mov	r3, r0
 8004154:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004158:	d01a      	beq.n	8004190 <UART_SetConfig+0x140>
 800415a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800415e:	d81b      	bhi.n	8004198 <UART_SetConfig+0x148>
 8004160:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004164:	d00c      	beq.n	8004180 <UART_SetConfig+0x130>
 8004166:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800416a:	d815      	bhi.n	8004198 <UART_SetConfig+0x148>
 800416c:	2b00      	cmp	r3, #0
 800416e:	d003      	beq.n	8004178 <UART_SetConfig+0x128>
 8004170:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004174:	d008      	beq.n	8004188 <UART_SetConfig+0x138>
 8004176:	e00f      	b.n	8004198 <UART_SetConfig+0x148>
 8004178:	2300      	movs	r3, #0
 800417a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800417e:	e012      	b.n	80041a6 <UART_SetConfig+0x156>
 8004180:	2302      	movs	r3, #2
 8004182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004186:	e00e      	b.n	80041a6 <UART_SetConfig+0x156>
 8004188:	2304      	movs	r3, #4
 800418a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800418e:	e00a      	b.n	80041a6 <UART_SetConfig+0x156>
 8004190:	2308      	movs	r3, #8
 8004192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004196:	e006      	b.n	80041a6 <UART_SetConfig+0x156>
 8004198:	2310      	movs	r3, #16
 800419a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800419e:	e002      	b.n	80041a6 <UART_SetConfig+0x156>
 80041a0:	2310      	movs	r3, #16
 80041a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a65      	ldr	r2, [pc, #404]	@ (8004340 <UART_SetConfig+0x2f0>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	f040 8097 	bne.w	80042e0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	d823      	bhi.n	8004202 <UART_SetConfig+0x1b2>
 80041ba:	a201      	add	r2, pc, #4	@ (adr r2, 80041c0 <UART_SetConfig+0x170>)
 80041bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c0:	080041e5 	.word	0x080041e5
 80041c4:	08004203 	.word	0x08004203
 80041c8:	080041ed 	.word	0x080041ed
 80041cc:	08004203 	.word	0x08004203
 80041d0:	080041f3 	.word	0x080041f3
 80041d4:	08004203 	.word	0x08004203
 80041d8:	08004203 	.word	0x08004203
 80041dc:	08004203 	.word	0x08004203
 80041e0:	080041fb 	.word	0x080041fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041e4:	f7fe fd90 	bl	8002d08 <HAL_RCC_GetPCLK1Freq>
 80041e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80041ea:	e010      	b.n	800420e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041ec:	4b56      	ldr	r3, [pc, #344]	@ (8004348 <UART_SetConfig+0x2f8>)
 80041ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80041f0:	e00d      	b.n	800420e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041f2:	f7fe fd09 	bl	8002c08 <HAL_RCC_GetSysClockFreq>
 80041f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80041f8:	e009      	b.n	800420e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004200:	e005      	b.n	800420e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800420c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800420e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 812b 	beq.w	800446c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421a:	4a4c      	ldr	r2, [pc, #304]	@ (800434c <UART_SetConfig+0x2fc>)
 800421c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004220:	461a      	mov	r2, r3
 8004222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004224:	fbb3 f3f2 	udiv	r3, r3, r2
 8004228:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	4613      	mov	r3, r2
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	4413      	add	r3, r2
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	429a      	cmp	r2, r3
 8004238:	d305      	bcc.n	8004246 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	429a      	cmp	r2, r3
 8004244:	d903      	bls.n	800424e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800424c:	e10e      	b.n	800446c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800424e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004250:	2200      	movs	r2, #0
 8004252:	60bb      	str	r3, [r7, #8]
 8004254:	60fa      	str	r2, [r7, #12]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425a:	4a3c      	ldr	r2, [pc, #240]	@ (800434c <UART_SetConfig+0x2fc>)
 800425c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004260:	b29b      	uxth	r3, r3
 8004262:	2200      	movs	r2, #0
 8004264:	603b      	str	r3, [r7, #0]
 8004266:	607a      	str	r2, [r7, #4]
 8004268:	e9d7 2300 	ldrd	r2, r3, [r7]
 800426c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004270:	f7fb ffd6 	bl	8000220 <__aeabi_uldivmod>
 8004274:	4602      	mov	r2, r0
 8004276:	460b      	mov	r3, r1
 8004278:	4610      	mov	r0, r2
 800427a:	4619      	mov	r1, r3
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	020b      	lsls	r3, r1, #8
 8004286:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800428a:	0202      	lsls	r2, r0, #8
 800428c:	6979      	ldr	r1, [r7, #20]
 800428e:	6849      	ldr	r1, [r1, #4]
 8004290:	0849      	lsrs	r1, r1, #1
 8004292:	2000      	movs	r0, #0
 8004294:	460c      	mov	r4, r1
 8004296:	4605      	mov	r5, r0
 8004298:	eb12 0804 	adds.w	r8, r2, r4
 800429c:	eb43 0905 	adc.w	r9, r3, r5
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	469a      	mov	sl, r3
 80042a8:	4693      	mov	fp, r2
 80042aa:	4652      	mov	r2, sl
 80042ac:	465b      	mov	r3, fp
 80042ae:	4640      	mov	r0, r8
 80042b0:	4649      	mov	r1, r9
 80042b2:	f7fb ffb5 	bl	8000220 <__aeabi_uldivmod>
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	4613      	mov	r3, r2
 80042bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042c4:	d308      	bcc.n	80042d8 <UART_SetConfig+0x288>
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042cc:	d204      	bcs.n	80042d8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6a3a      	ldr	r2, [r7, #32]
 80042d4:	60da      	str	r2, [r3, #12]
 80042d6:	e0c9      	b.n	800446c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80042de:	e0c5      	b.n	800446c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042e8:	d16d      	bne.n	80043c6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80042ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80042ee:	3b01      	subs	r3, #1
 80042f0:	2b07      	cmp	r3, #7
 80042f2:	d82d      	bhi.n	8004350 <UART_SetConfig+0x300>
 80042f4:	a201      	add	r2, pc, #4	@ (adr r2, 80042fc <UART_SetConfig+0x2ac>)
 80042f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fa:	bf00      	nop
 80042fc:	0800431d 	.word	0x0800431d
 8004300:	08004325 	.word	0x08004325
 8004304:	08004351 	.word	0x08004351
 8004308:	0800432b 	.word	0x0800432b
 800430c:	08004351 	.word	0x08004351
 8004310:	08004351 	.word	0x08004351
 8004314:	08004351 	.word	0x08004351
 8004318:	08004333 	.word	0x08004333
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800431c:	f7fe fd0a 	bl	8002d34 <HAL_RCC_GetPCLK2Freq>
 8004320:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004322:	e01b      	b.n	800435c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004324:	4b08      	ldr	r3, [pc, #32]	@ (8004348 <UART_SetConfig+0x2f8>)
 8004326:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004328:	e018      	b.n	800435c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800432a:	f7fe fc6d 	bl	8002c08 <HAL_RCC_GetSysClockFreq>
 800432e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004330:	e014      	b.n	800435c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004332:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004336:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004338:	e010      	b.n	800435c <UART_SetConfig+0x30c>
 800433a:	bf00      	nop
 800433c:	cfff69f3 	.word	0xcfff69f3
 8004340:	40008000 	.word	0x40008000
 8004344:	40013800 	.word	0x40013800
 8004348:	00f42400 	.word	0x00f42400
 800434c:	08008b70 	.word	0x08008b70
      default:
        pclk = 0U;
 8004350:	2300      	movs	r3, #0
 8004352:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800435a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800435c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 8084 	beq.w	800446c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004368:	4a4b      	ldr	r2, [pc, #300]	@ (8004498 <UART_SetConfig+0x448>)
 800436a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800436e:	461a      	mov	r2, r3
 8004370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004372:	fbb3 f3f2 	udiv	r3, r3, r2
 8004376:	005a      	lsls	r2, r3, #1
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	085b      	lsrs	r3, r3, #1
 800437e:	441a      	add	r2, r3
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	fbb2 f3f3 	udiv	r3, r2, r3
 8004388:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	2b0f      	cmp	r3, #15
 800438e:	d916      	bls.n	80043be <UART_SetConfig+0x36e>
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004396:	d212      	bcs.n	80043be <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	b29b      	uxth	r3, r3
 800439c:	f023 030f 	bic.w	r3, r3, #15
 80043a0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043a2:	6a3b      	ldr	r3, [r7, #32]
 80043a4:	085b      	lsrs	r3, r3, #1
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	8bfb      	ldrh	r3, [r7, #30]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	8bfa      	ldrh	r2, [r7, #30]
 80043ba:	60da      	str	r2, [r3, #12]
 80043bc:	e056      	b.n	800446c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80043c4:	e052      	b.n	800446c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80043ca:	3b01      	subs	r3, #1
 80043cc:	2b07      	cmp	r3, #7
 80043ce:	d822      	bhi.n	8004416 <UART_SetConfig+0x3c6>
 80043d0:	a201      	add	r2, pc, #4	@ (adr r2, 80043d8 <UART_SetConfig+0x388>)
 80043d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d6:	bf00      	nop
 80043d8:	080043f9 	.word	0x080043f9
 80043dc:	08004401 	.word	0x08004401
 80043e0:	08004417 	.word	0x08004417
 80043e4:	08004407 	.word	0x08004407
 80043e8:	08004417 	.word	0x08004417
 80043ec:	08004417 	.word	0x08004417
 80043f0:	08004417 	.word	0x08004417
 80043f4:	0800440f 	.word	0x0800440f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043f8:	f7fe fc9c 	bl	8002d34 <HAL_RCC_GetPCLK2Freq>
 80043fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80043fe:	e010      	b.n	8004422 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004400:	4b26      	ldr	r3, [pc, #152]	@ (800449c <UART_SetConfig+0x44c>)
 8004402:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004404:	e00d      	b.n	8004422 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004406:	f7fe fbff 	bl	8002c08 <HAL_RCC_GetSysClockFreq>
 800440a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800440c:	e009      	b.n	8004422 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800440e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004412:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004414:	e005      	b.n	8004422 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004416:	2300      	movs	r3, #0
 8004418:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004420:	bf00      	nop
    }

    if (pclk != 0U)
 8004422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004424:	2b00      	cmp	r3, #0
 8004426:	d021      	beq.n	800446c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442c:	4a1a      	ldr	r2, [pc, #104]	@ (8004498 <UART_SetConfig+0x448>)
 800442e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004432:	461a      	mov	r2, r3
 8004434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004436:	fbb3 f2f2 	udiv	r2, r3, r2
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	085b      	lsrs	r3, r3, #1
 8004440:	441a      	add	r2, r3
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	fbb2 f3f3 	udiv	r3, r2, r3
 800444a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	2b0f      	cmp	r3, #15
 8004450:	d909      	bls.n	8004466 <UART_SetConfig+0x416>
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004458:	d205      	bcs.n	8004466 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	b29a      	uxth	r2, r3
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	60da      	str	r2, [r3, #12]
 8004464:	e002      	b.n	800446c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	2201      	movs	r2, #1
 8004470:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	2201      	movs	r2, #1
 8004478:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2200      	movs	r2, #0
 8004480:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2200      	movs	r2, #0
 8004486:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004488:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800448c:	4618      	mov	r0, r3
 800448e:	3730      	adds	r7, #48	@ 0x30
 8004490:	46bd      	mov	sp, r7
 8004492:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004496:	bf00      	nop
 8004498:	08008b70 	.word	0x08008b70
 800449c:	00f42400 	.word	0x00f42400

080044a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ac:	f003 0308 	and.w	r3, r3, #8
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00a      	beq.n	80044ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00a      	beq.n	800450e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004512:	f003 0304 	and.w	r3, r3, #4
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00a      	beq.n	8004530 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004534:	f003 0310 	and.w	r3, r3, #16
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00a      	beq.n	8004552 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004556:	f003 0320 	and.w	r3, r3, #32
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00a      	beq.n	8004574 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01a      	beq.n	80045b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800459e:	d10a      	bne.n	80045b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	605a      	str	r2, [r3, #4]
  }
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b098      	sub	sp, #96	@ 0x60
 80045e8:	af02      	add	r7, sp, #8
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045f4:	f7fc ff3c 	bl	8001470 <HAL_GetTick>
 80045f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b08      	cmp	r3, #8
 8004606:	d12f      	bne.n	8004668 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004608:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004610:	2200      	movs	r2, #0
 8004612:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f88e 	bl	8004738 <UART_WaitOnFlagUntilTimeout>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d022      	beq.n	8004668 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800462a:	e853 3f00 	ldrex	r3, [r3]
 800462e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004632:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004636:	653b      	str	r3, [r7, #80]	@ 0x50
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	461a      	mov	r2, r3
 800463e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004640:	647b      	str	r3, [r7, #68]	@ 0x44
 8004642:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004644:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004646:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004648:	e841 2300 	strex	r3, r2, [r1]
 800464c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800464e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1e6      	bne.n	8004622 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2220      	movs	r2, #32
 8004658:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e063      	b.n	8004730 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0304 	and.w	r3, r3, #4
 8004672:	2b04      	cmp	r3, #4
 8004674:	d149      	bne.n	800470a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004676:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800467e:	2200      	movs	r2, #0
 8004680:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f857 	bl	8004738 <UART_WaitOnFlagUntilTimeout>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d03c      	beq.n	800470a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004698:	e853 3f00 	ldrex	r3, [r3]
 800469c:	623b      	str	r3, [r7, #32]
   return(result);
 800469e:	6a3b      	ldr	r3, [r7, #32]
 80046a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	461a      	mov	r2, r3
 80046ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80046b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046b6:	e841 2300 	strex	r3, r2, [r1]
 80046ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1e6      	bne.n	8004690 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	3308      	adds	r3, #8
 80046c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	e853 3f00 	ldrex	r3, [r3]
 80046d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f023 0301 	bic.w	r3, r3, #1
 80046d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	3308      	adds	r3, #8
 80046e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046e2:	61fa      	str	r2, [r7, #28]
 80046e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e6:	69b9      	ldr	r1, [r7, #24]
 80046e8:	69fa      	ldr	r2, [r7, #28]
 80046ea:	e841 2300 	strex	r3, r2, [r1]
 80046ee:	617b      	str	r3, [r7, #20]
   return(result);
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1e5      	bne.n	80046c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e012      	b.n	8004730 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2220      	movs	r2, #32
 800470e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2220      	movs	r2, #32
 8004716:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3758      	adds	r7, #88	@ 0x58
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	4613      	mov	r3, r2
 8004746:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004748:	e04f      	b.n	80047ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004750:	d04b      	beq.n	80047ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004752:	f7fc fe8d 	bl	8001470 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	429a      	cmp	r2, r3
 8004760:	d302      	bcc.n	8004768 <UART_WaitOnFlagUntilTimeout+0x30>
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e04e      	b.n	800480a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	2b00      	cmp	r3, #0
 8004778:	d037      	beq.n	80047ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2b80      	cmp	r3, #128	@ 0x80
 800477e:	d034      	beq.n	80047ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2b40      	cmp	r3, #64	@ 0x40
 8004784:	d031      	beq.n	80047ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b08      	cmp	r3, #8
 8004792:	d110      	bne.n	80047b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2208      	movs	r2, #8
 800479a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 f838 	bl	8004812 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2208      	movs	r2, #8
 80047a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e029      	b.n	800480a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047c4:	d111      	bne.n	80047ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f000 f81e 	bl	8004812 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2220      	movs	r2, #32
 80047da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e00f      	b.n	800480a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	69da      	ldr	r2, [r3, #28]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	4013      	ands	r3, r2
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	bf0c      	ite	eq
 80047fa:	2301      	moveq	r3, #1
 80047fc:	2300      	movne	r3, #0
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	461a      	mov	r2, r3
 8004802:	79fb      	ldrb	r3, [r7, #7]
 8004804:	429a      	cmp	r2, r3
 8004806:	d0a0      	beq.n	800474a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004812:	b480      	push	{r7}
 8004814:	b095      	sub	sp, #84	@ 0x54
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004822:	e853 3f00 	ldrex	r3, [r3]
 8004826:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800482a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800482e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	461a      	mov	r2, r3
 8004836:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004838:	643b      	str	r3, [r7, #64]	@ 0x40
 800483a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800483e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004840:	e841 2300 	strex	r3, r2, [r1]
 8004844:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1e6      	bne.n	800481a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3308      	adds	r3, #8
 8004852:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	e853 3f00 	ldrex	r3, [r3]
 800485a:	61fb      	str	r3, [r7, #28]
   return(result);
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004862:	f023 0301 	bic.w	r3, r3, #1
 8004866:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3308      	adds	r3, #8
 800486e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004870:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004872:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004874:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004876:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004878:	e841 2300 	strex	r3, r2, [r1]
 800487c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800487e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1e3      	bne.n	800484c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004888:	2b01      	cmp	r3, #1
 800488a:	d118      	bne.n	80048be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	e853 3f00 	ldrex	r3, [r3]
 8004898:	60bb      	str	r3, [r7, #8]
   return(result);
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	f023 0310 	bic.w	r3, r3, #16
 80048a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	461a      	mov	r2, r3
 80048a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048aa:	61bb      	str	r3, [r7, #24]
 80048ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ae:	6979      	ldr	r1, [r7, #20]
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	e841 2300 	strex	r3, r2, [r1]
 80048b6:	613b      	str	r3, [r7, #16]
   return(result);
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1e6      	bne.n	800488c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2220      	movs	r2, #32
 80048c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80048d2:	bf00      	nop
 80048d4:	3754      	adds	r7, #84	@ 0x54
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80048de:	b480      	push	{r7}
 80048e0:	b085      	sub	sp, #20
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d101      	bne.n	80048f4 <HAL_UARTEx_DisableFifoMode+0x16>
 80048f0:	2302      	movs	r3, #2
 80048f2:	e027      	b.n	8004944 <HAL_UARTEx_DisableFifoMode+0x66>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2224      	movs	r2, #36	@ 0x24
 8004900:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0201 	bic.w	r2, r2, #1
 800491a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004922:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2220      	movs	r2, #32
 8004936:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004960:	2b01      	cmp	r3, #1
 8004962:	d101      	bne.n	8004968 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004964:	2302      	movs	r3, #2
 8004966:	e02d      	b.n	80049c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2224      	movs	r2, #36	@ 0x24
 8004974:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 0201 	bic.w	r2, r2, #1
 800498e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f84f 	bl	8004a48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d101      	bne.n	80049e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80049e0:	2302      	movs	r3, #2
 80049e2:	e02d      	b.n	8004a40 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2224      	movs	r2, #36	@ 0x24
 80049f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 0201 	bic.w	r2, r2, #1
 8004a0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f811 	bl	8004a48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d108      	bne.n	8004a6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004a68:	e031      	b.n	8004ace <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004a6a:	2308      	movs	r3, #8
 8004a6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004a6e:	2308      	movs	r3, #8
 8004a70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	0e5b      	lsrs	r3, r3, #25
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	0f5b      	lsrs	r3, r3, #29
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a92:	7bbb      	ldrb	r3, [r7, #14]
 8004a94:	7b3a      	ldrb	r2, [r7, #12]
 8004a96:	4911      	ldr	r1, [pc, #68]	@ (8004adc <UARTEx_SetNbDataToProcess+0x94>)
 8004a98:	5c8a      	ldrb	r2, [r1, r2]
 8004a9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004a9e:	7b3a      	ldrb	r2, [r7, #12]
 8004aa0:	490f      	ldr	r1, [pc, #60]	@ (8004ae0 <UARTEx_SetNbDataToProcess+0x98>)
 8004aa2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004aa4:	fb93 f3f2 	sdiv	r3, r3, r2
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	7b7a      	ldrb	r2, [r7, #13]
 8004ab4:	4909      	ldr	r1, [pc, #36]	@ (8004adc <UARTEx_SetNbDataToProcess+0x94>)
 8004ab6:	5c8a      	ldrb	r2, [r1, r2]
 8004ab8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004abc:	7b7a      	ldrb	r2, [r7, #13]
 8004abe:	4908      	ldr	r1, [pc, #32]	@ (8004ae0 <UARTEx_SetNbDataToProcess+0x98>)
 8004ac0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ac2:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004ace:	bf00      	nop
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	08008b88 	.word	0x08008b88
 8004ae0:	08008b90 	.word	0x08008b90

08004ae4 <__NVIC_SetPriority>:
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	4603      	mov	r3, r0
 8004aec:	6039      	str	r1, [r7, #0]
 8004aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	db0a      	blt.n	8004b0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	490c      	ldr	r1, [pc, #48]	@ (8004b30 <__NVIC_SetPriority+0x4c>)
 8004afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b02:	0112      	lsls	r2, r2, #4
 8004b04:	b2d2      	uxtb	r2, r2
 8004b06:	440b      	add	r3, r1
 8004b08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004b0c:	e00a      	b.n	8004b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	4908      	ldr	r1, [pc, #32]	@ (8004b34 <__NVIC_SetPriority+0x50>)
 8004b14:	79fb      	ldrb	r3, [r7, #7]
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	3b04      	subs	r3, #4
 8004b1c:	0112      	lsls	r2, r2, #4
 8004b1e:	b2d2      	uxtb	r2, r2
 8004b20:	440b      	add	r3, r1
 8004b22:	761a      	strb	r2, [r3, #24]
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	e000e100 	.word	0xe000e100
 8004b34:	e000ed00 	.word	0xe000ed00

08004b38 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004b3c:	4b05      	ldr	r3, [pc, #20]	@ (8004b54 <SysTick_Handler+0x1c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004b40:	f001 fd82 	bl	8006648 <xTaskGetSchedulerState>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d001      	beq.n	8004b4e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004b4a:	f002 fb7d 	bl	8007248 <xPortSysTickHandler>
  }
}
 8004b4e:	bf00      	nop
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	e000e010 	.word	0xe000e010

08004b58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	f06f 0004 	mvn.w	r0, #4
 8004b62:	f7ff ffbf 	bl	8004ae4 <__NVIC_SetPriority>
#endif
}
 8004b66:	bf00      	nop
 8004b68:	bd80      	pop	{r7, pc}
	...

08004b6c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b72:	f3ef 8305 	mrs	r3, IPSR
 8004b76:	603b      	str	r3, [r7, #0]
  return(result);
 8004b78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004b7e:	f06f 0305 	mvn.w	r3, #5
 8004b82:	607b      	str	r3, [r7, #4]
 8004b84:	e00c      	b.n	8004ba0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004b86:	4b0a      	ldr	r3, [pc, #40]	@ (8004bb0 <osKernelInitialize+0x44>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d105      	bne.n	8004b9a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004b8e:	4b08      	ldr	r3, [pc, #32]	@ (8004bb0 <osKernelInitialize+0x44>)
 8004b90:	2201      	movs	r2, #1
 8004b92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004b94:	2300      	movs	r3, #0
 8004b96:	607b      	str	r3, [r7, #4]
 8004b98:	e002      	b.n	8004ba0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004b9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004b9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ba0:	687b      	ldr	r3, [r7, #4]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	20000248 	.word	0x20000248

08004bb4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bba:	f3ef 8305 	mrs	r3, IPSR
 8004bbe:	603b      	str	r3, [r7, #0]
  return(result);
 8004bc0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <osKernelStart+0x1a>
    stat = osErrorISR;
 8004bc6:	f06f 0305 	mvn.w	r3, #5
 8004bca:	607b      	str	r3, [r7, #4]
 8004bcc:	e010      	b.n	8004bf0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004bce:	4b0b      	ldr	r3, [pc, #44]	@ (8004bfc <osKernelStart+0x48>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d109      	bne.n	8004bea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004bd6:	f7ff ffbf 	bl	8004b58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004bda:	4b08      	ldr	r3, [pc, #32]	@ (8004bfc <osKernelStart+0x48>)
 8004bdc:	2202      	movs	r2, #2
 8004bde:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004be0:	f001 f8ce 	bl	8005d80 <vTaskStartScheduler>
      stat = osOK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	607b      	str	r3, [r7, #4]
 8004be8:	e002      	b.n	8004bf0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004bea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004bee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004bf0:	687b      	ldr	r3, [r7, #4]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	20000248 	.word	0x20000248

08004c00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b08e      	sub	sp, #56	@ 0x38
 8004c04:	af04      	add	r7, sp, #16
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c10:	f3ef 8305 	mrs	r3, IPSR
 8004c14:	617b      	str	r3, [r7, #20]
  return(result);
 8004c16:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d17e      	bne.n	8004d1a <osThreadNew+0x11a>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d07b      	beq.n	8004d1a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004c22:	2380      	movs	r3, #128	@ 0x80
 8004c24:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004c26:	2318      	movs	r3, #24
 8004c28:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004c2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c32:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d045      	beq.n	8004cc6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d002      	beq.n	8004c48 <osThreadNew+0x48>
        name = attr->name;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d008      	beq.n	8004c6e <osThreadNew+0x6e>
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	2b38      	cmp	r3, #56	@ 0x38
 8004c60:	d805      	bhi.n	8004c6e <osThreadNew+0x6e>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <osThreadNew+0x72>
        return (NULL);
 8004c6e:	2300      	movs	r3, #0
 8004c70:	e054      	b.n	8004d1c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	089b      	lsrs	r3, r3, #2
 8004c80:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00e      	beq.n	8004ca8 <osThreadNew+0xa8>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	2ba7      	cmp	r3, #167	@ 0xa7
 8004c90:	d90a      	bls.n	8004ca8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d006      	beq.n	8004ca8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d002      	beq.n	8004ca8 <osThreadNew+0xa8>
        mem = 1;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	61bb      	str	r3, [r7, #24]
 8004ca6:	e010      	b.n	8004cca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10c      	bne.n	8004cca <osThreadNew+0xca>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d108      	bne.n	8004cca <osThreadNew+0xca>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d104      	bne.n	8004cca <osThreadNew+0xca>
          mem = 0;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	61bb      	str	r3, [r7, #24]
 8004cc4:	e001      	b.n	8004cca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d110      	bne.n	8004cf2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004cd8:	9202      	str	r2, [sp, #8]
 8004cda:	9301      	str	r3, [sp, #4]
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	6a3a      	ldr	r2, [r7, #32]
 8004ce4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 fe56 	bl	8005998 <xTaskCreateStatic>
 8004cec:	4603      	mov	r3, r0
 8004cee:	613b      	str	r3, [r7, #16]
 8004cf0:	e013      	b.n	8004d1a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d110      	bne.n	8004d1a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004cf8:	6a3b      	ldr	r3, [r7, #32]
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	f107 0310 	add.w	r3, r7, #16
 8004d00:	9301      	str	r3, [sp, #4]
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 fea4 	bl	8005a58 <xTaskCreate>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d001      	beq.n	8004d1a <osThreadNew+0x11a>
            hTask = NULL;
 8004d16:	2300      	movs	r3, #0
 8004d18:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004d1a:	693b      	ldr	r3, [r7, #16]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3728      	adds	r7, #40	@ 0x28
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d2c:	f3ef 8305 	mrs	r3, IPSR
 8004d30:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d32:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d003      	beq.n	8004d40 <osDelay+0x1c>
    stat = osErrorISR;
 8004d38:	f06f 0305 	mvn.w	r3, #5
 8004d3c:	60fb      	str	r3, [r7, #12]
 8004d3e:	e007      	b.n	8004d50 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004d40:	2300      	movs	r3, #0
 8004d42:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d002      	beq.n	8004d50 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 ffe2 	bl	8005d14 <vTaskDelay>
    }
  }

  return (stat);
 8004d50:	68fb      	ldr	r3, [r7, #12]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
	...

08004d5c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4a07      	ldr	r2, [pc, #28]	@ (8004d88 <vApplicationGetIdleTaskMemory+0x2c>)
 8004d6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	4a06      	ldr	r2, [pc, #24]	@ (8004d8c <vApplicationGetIdleTaskMemory+0x30>)
 8004d72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2280      	movs	r2, #128	@ 0x80
 8004d78:	601a      	str	r2, [r3, #0]
}
 8004d7a:	bf00      	nop
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	2000024c 	.word	0x2000024c
 8004d8c:	200002f4 	.word	0x200002f4

08004d90 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4a07      	ldr	r2, [pc, #28]	@ (8004dbc <vApplicationGetTimerTaskMemory+0x2c>)
 8004da0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	4a06      	ldr	r2, [pc, #24]	@ (8004dc0 <vApplicationGetTimerTaskMemory+0x30>)
 8004da6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004dae:	601a      	str	r2, [r3, #0]
}
 8004db0:	bf00      	nop
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	200004f4 	.word	0x200004f4
 8004dc0:	2000059c 	.word	0x2000059c

08004dc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f103 0208 	add.w	r2, r3, #8
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004ddc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f103 0208 	add.w	r2, r3, #8
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f103 0208 	add.w	r2, r3, #8
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b085      	sub	sp, #20
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
 8004e26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	601a      	str	r2, [r3, #0]
}
 8004e5a:	bf00      	nop
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e66:	b480      	push	{r7}
 8004e68:	b085      	sub	sp, #20
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e7c:	d103      	bne.n	8004e86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	e00c      	b.n	8004ea0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	3308      	adds	r3, #8
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	e002      	b.n	8004e94 <vListInsert+0x2e>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d2f6      	bcs.n	8004e8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	1c5a      	adds	r2, r3, #1
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	601a      	str	r2, [r3, #0]
}
 8004ecc:	bf00      	nop
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	6892      	ldr	r2, [r2, #8]
 8004eee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6852      	ldr	r2, [r2, #4]
 8004ef8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d103      	bne.n	8004f0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	1e5a      	subs	r2, r3, #1
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3714      	adds	r7, #20
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10b      	bne.n	8004f58 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004f52:	bf00      	nop
 8004f54:	bf00      	nop
 8004f56:	e7fd      	b.n	8004f54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004f58:	f002 f8e6 	bl	8007128 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f64:	68f9      	ldr	r1, [r7, #12]
 8004f66:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004f68:	fb01 f303 	mul.w	r3, r1, r3
 8004f6c:	441a      	add	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	68f9      	ldr	r1, [r7, #12]
 8004f8c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004f8e:	fb01 f303 	mul.w	r3, r1, r3
 8004f92:	441a      	add	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	22ff      	movs	r2, #255	@ 0xff
 8004f9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	22ff      	movs	r2, #255	@ 0xff
 8004fa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d114      	bne.n	8004fd8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d01a      	beq.n	8004fec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	3310      	adds	r3, #16
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f001 f97e 	bl	80062bc <xTaskRemoveFromEventList>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d012      	beq.n	8004fec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8004ffc <xQueueGenericReset+0xd0>)
 8004fc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	f3bf 8f6f 	isb	sy
 8004fd6:	e009      	b.n	8004fec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	3310      	adds	r3, #16
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7ff fef1 	bl	8004dc4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3324      	adds	r3, #36	@ 0x24
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7ff feec 	bl	8004dc4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004fec:	f002 f8ce 	bl	800718c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ff0:	2301      	movs	r3, #1
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	e000ed04 	.word	0xe000ed04

08005000 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005000:	b580      	push	{r7, lr}
 8005002:	b08e      	sub	sp, #56	@ 0x38
 8005004:	af02      	add	r7, sp, #8
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
 800500c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10b      	bne.n	800502c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005018:	f383 8811 	msr	BASEPRI, r3
 800501c:	f3bf 8f6f 	isb	sy
 8005020:	f3bf 8f4f 	dsb	sy
 8005024:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005026:	bf00      	nop
 8005028:	bf00      	nop
 800502a:	e7fd      	b.n	8005028 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10b      	bne.n	800504a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005044:	bf00      	nop
 8005046:	bf00      	nop
 8005048:	e7fd      	b.n	8005046 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <xQueueGenericCreateStatic+0x56>
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <xQueueGenericCreateStatic+0x5a>
 8005056:	2301      	movs	r3, #1
 8005058:	e000      	b.n	800505c <xQueueGenericCreateStatic+0x5c>
 800505a:	2300      	movs	r3, #0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10b      	bne.n	8005078 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	623b      	str	r3, [r7, #32]
}
 8005072:	bf00      	nop
 8005074:	bf00      	nop
 8005076:	e7fd      	b.n	8005074 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d102      	bne.n	8005084 <xQueueGenericCreateStatic+0x84>
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <xQueueGenericCreateStatic+0x88>
 8005084:	2301      	movs	r3, #1
 8005086:	e000      	b.n	800508a <xQueueGenericCreateStatic+0x8a>
 8005088:	2300      	movs	r3, #0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10b      	bne.n	80050a6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800508e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	61fb      	str	r3, [r7, #28]
}
 80050a0:	bf00      	nop
 80050a2:	bf00      	nop
 80050a4:	e7fd      	b.n	80050a2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80050a6:	2350      	movs	r3, #80	@ 0x50
 80050a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2b50      	cmp	r3, #80	@ 0x50
 80050ae:	d00b      	beq.n	80050c8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80050b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	61bb      	str	r3, [r7, #24]
}
 80050c2:	bf00      	nop
 80050c4:	bf00      	nop
 80050c6:	e7fd      	b.n	80050c4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80050c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80050ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00d      	beq.n	80050f0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80050d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80050dc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80050e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	4613      	mov	r3, r2
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f000 f840 	bl	8005170 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80050f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3730      	adds	r7, #48	@ 0x30
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b08a      	sub	sp, #40	@ 0x28
 80050fe:	af02      	add	r7, sp, #8
 8005100:	60f8      	str	r0, [r7, #12]
 8005102:	60b9      	str	r1, [r7, #8]
 8005104:	4613      	mov	r3, r2
 8005106:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10b      	bne.n	8005126 <xQueueGenericCreate+0x2c>
	__asm volatile
 800510e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	613b      	str	r3, [r7, #16]
}
 8005120:	bf00      	nop
 8005122:	bf00      	nop
 8005124:	e7fd      	b.n	8005122 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	fb02 f303 	mul.w	r3, r2, r3
 800512e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	3350      	adds	r3, #80	@ 0x50
 8005134:	4618      	mov	r0, r3
 8005136:	f002 f919 	bl	800736c <pvPortMalloc>
 800513a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d011      	beq.n	8005166 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	3350      	adds	r3, #80	@ 0x50
 800514a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005154:	79fa      	ldrb	r2, [r7, #7]
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	4613      	mov	r3, r2
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 f805 	bl	8005170 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005166:	69bb      	ldr	r3, [r7, #24]
	}
 8005168:	4618      	mov	r0, r3
 800516a:	3720      	adds	r7, #32
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
 800517c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d103      	bne.n	800518c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	601a      	str	r2, [r3, #0]
 800518a:	e002      	b.n	8005192 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800519e:	2101      	movs	r1, #1
 80051a0:	69b8      	ldr	r0, [r7, #24]
 80051a2:	f7ff fec3 	bl	8004f2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	78fa      	ldrb	r2, [r7, #3]
 80051aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80051ae:	bf00      	nop
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08e      	sub	sp, #56	@ 0x38
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
 80051c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80051c6:	2300      	movs	r3, #0
 80051c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80051ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10b      	bne.n	80051ec <xQueueGenericSend+0x34>
	__asm volatile
 80051d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80051e6:	bf00      	nop
 80051e8:	bf00      	nop
 80051ea:	e7fd      	b.n	80051e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d103      	bne.n	80051fa <xQueueGenericSend+0x42>
 80051f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <xQueueGenericSend+0x46>
 80051fa:	2301      	movs	r3, #1
 80051fc:	e000      	b.n	8005200 <xQueueGenericSend+0x48>
 80051fe:	2300      	movs	r3, #0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10b      	bne.n	800521c <xQueueGenericSend+0x64>
	__asm volatile
 8005204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005208:	f383 8811 	msr	BASEPRI, r3
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005216:	bf00      	nop
 8005218:	bf00      	nop
 800521a:	e7fd      	b.n	8005218 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	2b02      	cmp	r3, #2
 8005220:	d103      	bne.n	800522a <xQueueGenericSend+0x72>
 8005222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005226:	2b01      	cmp	r3, #1
 8005228:	d101      	bne.n	800522e <xQueueGenericSend+0x76>
 800522a:	2301      	movs	r3, #1
 800522c:	e000      	b.n	8005230 <xQueueGenericSend+0x78>
 800522e:	2300      	movs	r3, #0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10b      	bne.n	800524c <xQueueGenericSend+0x94>
	__asm volatile
 8005234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005238:	f383 8811 	msr	BASEPRI, r3
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	623b      	str	r3, [r7, #32]
}
 8005246:	bf00      	nop
 8005248:	bf00      	nop
 800524a:	e7fd      	b.n	8005248 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800524c:	f001 f9fc 	bl	8006648 <xTaskGetSchedulerState>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d102      	bne.n	800525c <xQueueGenericSend+0xa4>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <xQueueGenericSend+0xa8>
 800525c:	2301      	movs	r3, #1
 800525e:	e000      	b.n	8005262 <xQueueGenericSend+0xaa>
 8005260:	2300      	movs	r3, #0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10b      	bne.n	800527e <xQueueGenericSend+0xc6>
	__asm volatile
 8005266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800526a:	f383 8811 	msr	BASEPRI, r3
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	f3bf 8f4f 	dsb	sy
 8005276:	61fb      	str	r3, [r7, #28]
}
 8005278:	bf00      	nop
 800527a:	bf00      	nop
 800527c:	e7fd      	b.n	800527a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800527e:	f001 ff53 	bl	8007128 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005284:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800528a:	429a      	cmp	r2, r3
 800528c:	d302      	bcc.n	8005294 <xQueueGenericSend+0xdc>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b02      	cmp	r3, #2
 8005292:	d129      	bne.n	80052e8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005294:	683a      	ldr	r2, [r7, #0]
 8005296:	68b9      	ldr	r1, [r7, #8]
 8005298:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800529a:	f000 fa0f 	bl	80056bc <prvCopyDataToQueue>
 800529e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d010      	beq.n	80052ca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052aa:	3324      	adds	r3, #36	@ 0x24
 80052ac:	4618      	mov	r0, r3
 80052ae:	f001 f805 	bl	80062bc <xTaskRemoveFromEventList>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d013      	beq.n	80052e0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80052b8:	4b3f      	ldr	r3, [pc, #252]	@ (80053b8 <xQueueGenericSend+0x200>)
 80052ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052be:	601a      	str	r2, [r3, #0]
 80052c0:	f3bf 8f4f 	dsb	sy
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	e00a      	b.n	80052e0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80052ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d007      	beq.n	80052e0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80052d0:	4b39      	ldr	r3, [pc, #228]	@ (80053b8 <xQueueGenericSend+0x200>)
 80052d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80052e0:	f001 ff54 	bl	800718c <vPortExitCritical>
				return pdPASS;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e063      	b.n	80053b0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d103      	bne.n	80052f6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052ee:	f001 ff4d 	bl	800718c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80052f2:	2300      	movs	r3, #0
 80052f4:	e05c      	b.n	80053b0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d106      	bne.n	800530a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052fc:	f107 0314 	add.w	r3, r7, #20
 8005300:	4618      	mov	r0, r3
 8005302:	f001 f83f 	bl	8006384 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005306:	2301      	movs	r3, #1
 8005308:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800530a:	f001 ff3f 	bl	800718c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800530e:	f000 fda7 	bl	8005e60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005312:	f001 ff09 	bl	8007128 <vPortEnterCritical>
 8005316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005318:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800531c:	b25b      	sxtb	r3, r3
 800531e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005322:	d103      	bne.n	800532c <xQueueGenericSend+0x174>
 8005324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800532c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005332:	b25b      	sxtb	r3, r3
 8005334:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005338:	d103      	bne.n	8005342 <xQueueGenericSend+0x18a>
 800533a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005342:	f001 ff23 	bl	800718c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005346:	1d3a      	adds	r2, r7, #4
 8005348:	f107 0314 	add.w	r3, r7, #20
 800534c:	4611      	mov	r1, r2
 800534e:	4618      	mov	r0, r3
 8005350:	f001 f82e 	bl	80063b0 <xTaskCheckForTimeOut>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d124      	bne.n	80053a4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800535a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800535c:	f000 faa6 	bl	80058ac <prvIsQueueFull>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d018      	beq.n	8005398 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005368:	3310      	adds	r3, #16
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	4611      	mov	r1, r2
 800536e:	4618      	mov	r0, r3
 8005370:	f000 ff52 	bl	8006218 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005374:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005376:	f000 fa31 	bl	80057dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800537a:	f000 fd7f 	bl	8005e7c <xTaskResumeAll>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	f47f af7c 	bne.w	800527e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005386:	4b0c      	ldr	r3, [pc, #48]	@ (80053b8 <xQueueGenericSend+0x200>)
 8005388:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800538c:	601a      	str	r2, [r3, #0]
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	e772      	b.n	800527e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005398:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800539a:	f000 fa1f 	bl	80057dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800539e:	f000 fd6d 	bl	8005e7c <xTaskResumeAll>
 80053a2:	e76c      	b.n	800527e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80053a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80053a6:	f000 fa19 	bl	80057dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053aa:	f000 fd67 	bl	8005e7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80053ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3738      	adds	r7, #56	@ 0x38
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	e000ed04 	.word	0xe000ed04

080053bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b090      	sub	sp, #64	@ 0x40
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
 80053c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80053ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10b      	bne.n	80053ec <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80053d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80053e6:	bf00      	nop
 80053e8:	bf00      	nop
 80053ea:	e7fd      	b.n	80053e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d103      	bne.n	80053fa <xQueueGenericSendFromISR+0x3e>
 80053f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <xQueueGenericSendFromISR+0x42>
 80053fa:	2301      	movs	r3, #1
 80053fc:	e000      	b.n	8005400 <xQueueGenericSendFromISR+0x44>
 80053fe:	2300      	movs	r3, #0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10b      	bne.n	800541c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005408:	f383 8811 	msr	BASEPRI, r3
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005416:	bf00      	nop
 8005418:	bf00      	nop
 800541a:	e7fd      	b.n	8005418 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	2b02      	cmp	r3, #2
 8005420:	d103      	bne.n	800542a <xQueueGenericSendFromISR+0x6e>
 8005422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005426:	2b01      	cmp	r3, #1
 8005428:	d101      	bne.n	800542e <xQueueGenericSendFromISR+0x72>
 800542a:	2301      	movs	r3, #1
 800542c:	e000      	b.n	8005430 <xQueueGenericSendFromISR+0x74>
 800542e:	2300      	movs	r3, #0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10b      	bne.n	800544c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005438:	f383 8811 	msr	BASEPRI, r3
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	623b      	str	r3, [r7, #32]
}
 8005446:	bf00      	nop
 8005448:	bf00      	nop
 800544a:	e7fd      	b.n	8005448 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800544c:	f001 ff4c 	bl	80072e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005450:	f3ef 8211 	mrs	r2, BASEPRI
 8005454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	61fa      	str	r2, [r7, #28]
 8005466:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005468:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800546a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800546c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800546e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005474:	429a      	cmp	r2, r3
 8005476:	d302      	bcc.n	800547e <xQueueGenericSendFromISR+0xc2>
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	2b02      	cmp	r3, #2
 800547c:	d12f      	bne.n	80054de <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800547e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005480:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005484:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800548a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800548c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	68b9      	ldr	r1, [r7, #8]
 8005492:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005494:	f000 f912 	bl	80056bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005498:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800549c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054a0:	d112      	bne.n	80054c8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d016      	beq.n	80054d8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ac:	3324      	adds	r3, #36	@ 0x24
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 ff04 	bl	80062bc <xTaskRemoveFromEventList>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00e      	beq.n	80054d8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00b      	beq.n	80054d8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	e007      	b.n	80054d8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80054c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80054cc:	3301      	adds	r3, #1
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	b25a      	sxtb	r2, r3
 80054d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80054d8:	2301      	movs	r3, #1
 80054da:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80054dc:	e001      	b.n	80054e2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80054de:	2300      	movs	r3, #0
 80054e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80054ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3740      	adds	r7, #64	@ 0x40
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b08c      	sub	sp, #48	@ 0x30
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005504:	2300      	movs	r3, #0
 8005506:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800550c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10b      	bne.n	800552a <xQueueReceive+0x32>
	__asm volatile
 8005512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	623b      	str	r3, [r7, #32]
}
 8005524:	bf00      	nop
 8005526:	bf00      	nop
 8005528:	e7fd      	b.n	8005526 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d103      	bne.n	8005538 <xQueueReceive+0x40>
 8005530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <xQueueReceive+0x44>
 8005538:	2301      	movs	r3, #1
 800553a:	e000      	b.n	800553e <xQueueReceive+0x46>
 800553c:	2300      	movs	r3, #0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10b      	bne.n	800555a <xQueueReceive+0x62>
	__asm volatile
 8005542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005546:	f383 8811 	msr	BASEPRI, r3
 800554a:	f3bf 8f6f 	isb	sy
 800554e:	f3bf 8f4f 	dsb	sy
 8005552:	61fb      	str	r3, [r7, #28]
}
 8005554:	bf00      	nop
 8005556:	bf00      	nop
 8005558:	e7fd      	b.n	8005556 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800555a:	f001 f875 	bl	8006648 <xTaskGetSchedulerState>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d102      	bne.n	800556a <xQueueReceive+0x72>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <xQueueReceive+0x76>
 800556a:	2301      	movs	r3, #1
 800556c:	e000      	b.n	8005570 <xQueueReceive+0x78>
 800556e:	2300      	movs	r3, #0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10b      	bne.n	800558c <xQueueReceive+0x94>
	__asm volatile
 8005574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005578:	f383 8811 	msr	BASEPRI, r3
 800557c:	f3bf 8f6f 	isb	sy
 8005580:	f3bf 8f4f 	dsb	sy
 8005584:	61bb      	str	r3, [r7, #24]
}
 8005586:	bf00      	nop
 8005588:	bf00      	nop
 800558a:	e7fd      	b.n	8005588 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800558c:	f001 fdcc 	bl	8007128 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005594:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005598:	2b00      	cmp	r3, #0
 800559a:	d01f      	beq.n	80055dc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800559c:	68b9      	ldr	r1, [r7, #8]
 800559e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055a0:	f000 f8f6 	bl	8005790 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80055a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a6:	1e5a      	subs	r2, r3, #1
 80055a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055aa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00f      	beq.n	80055d4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b6:	3310      	adds	r3, #16
 80055b8:	4618      	mov	r0, r3
 80055ba:	f000 fe7f 	bl	80062bc <xTaskRemoveFromEventList>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d007      	beq.n	80055d4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80055c4:	4b3c      	ldr	r3, [pc, #240]	@ (80056b8 <xQueueReceive+0x1c0>)
 80055c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80055d4:	f001 fdda 	bl	800718c <vPortExitCritical>
				return pdPASS;
 80055d8:	2301      	movs	r3, #1
 80055da:	e069      	b.n	80056b0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d103      	bne.n	80055ea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055e2:	f001 fdd3 	bl	800718c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80055e6:	2300      	movs	r3, #0
 80055e8:	e062      	b.n	80056b0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d106      	bne.n	80055fe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055f0:	f107 0310 	add.w	r3, r7, #16
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 fec5 	bl	8006384 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055fa:	2301      	movs	r3, #1
 80055fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055fe:	f001 fdc5 	bl	800718c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005602:	f000 fc2d 	bl	8005e60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005606:	f001 fd8f 	bl	8007128 <vPortEnterCritical>
 800560a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005610:	b25b      	sxtb	r3, r3
 8005612:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005616:	d103      	bne.n	8005620 <xQueueReceive+0x128>
 8005618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005622:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005626:	b25b      	sxtb	r3, r3
 8005628:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800562c:	d103      	bne.n	8005636 <xQueueReceive+0x13e>
 800562e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005636:	f001 fda9 	bl	800718c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800563a:	1d3a      	adds	r2, r7, #4
 800563c:	f107 0310 	add.w	r3, r7, #16
 8005640:	4611      	mov	r1, r2
 8005642:	4618      	mov	r0, r3
 8005644:	f000 feb4 	bl	80063b0 <xTaskCheckForTimeOut>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d123      	bne.n	8005696 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800564e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005650:	f000 f916 	bl	8005880 <prvIsQueueEmpty>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d017      	beq.n	800568a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800565a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800565c:	3324      	adds	r3, #36	@ 0x24
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	4611      	mov	r1, r2
 8005662:	4618      	mov	r0, r3
 8005664:	f000 fdd8 	bl	8006218 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005668:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800566a:	f000 f8b7 	bl	80057dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800566e:	f000 fc05 	bl	8005e7c <xTaskResumeAll>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d189      	bne.n	800558c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005678:	4b0f      	ldr	r3, [pc, #60]	@ (80056b8 <xQueueReceive+0x1c0>)
 800567a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800567e:	601a      	str	r2, [r3, #0]
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	e780      	b.n	800558c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800568a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800568c:	f000 f8a6 	bl	80057dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005690:	f000 fbf4 	bl	8005e7c <xTaskResumeAll>
 8005694:	e77a      	b.n	800558c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005696:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005698:	f000 f8a0 	bl	80057dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800569c:	f000 fbee 	bl	8005e7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056a2:	f000 f8ed 	bl	8005880 <prvIsQueueEmpty>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f43f af6f 	beq.w	800558c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80056ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3730      	adds	r7, #48	@ 0x30
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	e000ed04 	.word	0xe000ed04

080056bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80056c8:	2300      	movs	r3, #0
 80056ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10d      	bne.n	80056f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d14d      	bne.n	800577e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 ffcc 	bl	8006684 <xTaskPriorityDisinherit>
 80056ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	609a      	str	r2, [r3, #8]
 80056f4:	e043      	b.n	800577e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d119      	bne.n	8005730 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6858      	ldr	r0, [r3, #4]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005704:	461a      	mov	r2, r3
 8005706:	68b9      	ldr	r1, [r7, #8]
 8005708:	f002 fb09 	bl	8007d1e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005714:	441a      	add	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	429a      	cmp	r2, r3
 8005724:	d32b      	bcc.n	800577e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	605a      	str	r2, [r3, #4]
 800572e:	e026      	b.n	800577e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	68d8      	ldr	r0, [r3, #12]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005738:	461a      	mov	r2, r3
 800573a:	68b9      	ldr	r1, [r7, #8]
 800573c:	f002 faef 	bl	8007d1e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	68da      	ldr	r2, [r3, #12]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005748:	425b      	negs	r3, r3
 800574a:	441a      	add	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	68da      	ldr	r2, [r3, #12]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	429a      	cmp	r2, r3
 800575a:	d207      	bcs.n	800576c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005764:	425b      	negs	r3, r3
 8005766:	441a      	add	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b02      	cmp	r3, #2
 8005770:	d105      	bne.n	800577e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	3b01      	subs	r3, #1
 800577c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005786:	697b      	ldr	r3, [r7, #20]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3718      	adds	r7, #24
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d018      	beq.n	80057d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68da      	ldr	r2, [r3, #12]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057aa:	441a      	add	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68da      	ldr	r2, [r3, #12]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d303      	bcc.n	80057c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68d9      	ldr	r1, [r3, #12]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057cc:	461a      	mov	r2, r3
 80057ce:	6838      	ldr	r0, [r7, #0]
 80057d0:	f002 faa5 	bl	8007d1e <memcpy>
	}
}
 80057d4:	bf00      	nop
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80057e4:	f001 fca0 	bl	8007128 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057f0:	e011      	b.n	8005816 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d012      	beq.n	8005820 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	3324      	adds	r3, #36	@ 0x24
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 fd5c 	bl	80062bc <xTaskRemoveFromEventList>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d001      	beq.n	800580e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800580a:	f000 fe35 	bl	8006478 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800580e:	7bfb      	ldrb	r3, [r7, #15]
 8005810:	3b01      	subs	r3, #1
 8005812:	b2db      	uxtb	r3, r3
 8005814:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800581a:	2b00      	cmp	r3, #0
 800581c:	dce9      	bgt.n	80057f2 <prvUnlockQueue+0x16>
 800581e:	e000      	b.n	8005822 <prvUnlockQueue+0x46>
					break;
 8005820:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	22ff      	movs	r2, #255	@ 0xff
 8005826:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800582a:	f001 fcaf 	bl	800718c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800582e:	f001 fc7b 	bl	8007128 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005838:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800583a:	e011      	b.n	8005860 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d012      	beq.n	800586a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	3310      	adds	r3, #16
 8005848:	4618      	mov	r0, r3
 800584a:	f000 fd37 	bl	80062bc <xTaskRemoveFromEventList>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005854:	f000 fe10 	bl	8006478 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005858:	7bbb      	ldrb	r3, [r7, #14]
 800585a:	3b01      	subs	r3, #1
 800585c:	b2db      	uxtb	r3, r3
 800585e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005860:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005864:	2b00      	cmp	r3, #0
 8005866:	dce9      	bgt.n	800583c <prvUnlockQueue+0x60>
 8005868:	e000      	b.n	800586c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800586a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	22ff      	movs	r2, #255	@ 0xff
 8005870:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005874:	f001 fc8a 	bl	800718c <vPortExitCritical>
}
 8005878:	bf00      	nop
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005888:	f001 fc4e 	bl	8007128 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005890:	2b00      	cmp	r3, #0
 8005892:	d102      	bne.n	800589a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005894:	2301      	movs	r3, #1
 8005896:	60fb      	str	r3, [r7, #12]
 8005898:	e001      	b.n	800589e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800589a:	2300      	movs	r3, #0
 800589c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800589e:	f001 fc75 	bl	800718c <vPortExitCritical>

	return xReturn;
 80058a2:	68fb      	ldr	r3, [r7, #12]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80058b4:	f001 fc38 	bl	8007128 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d102      	bne.n	80058ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80058c4:	2301      	movs	r3, #1
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	e001      	b.n	80058ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80058ca:	2300      	movs	r3, #0
 80058cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058ce:	f001 fc5d 	bl	800718c <vPortExitCritical>

	return xReturn;
 80058d2:	68fb      	ldr	r3, [r7, #12]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058e6:	2300      	movs	r3, #0
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	e014      	b.n	8005916 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80058ec:	4a0f      	ldr	r2, [pc, #60]	@ (800592c <vQueueAddToRegistry+0x50>)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10b      	bne.n	8005910 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80058f8:	490c      	ldr	r1, [pc, #48]	@ (800592c <vQueueAddToRegistry+0x50>)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005902:	4a0a      	ldr	r2, [pc, #40]	@ (800592c <vQueueAddToRegistry+0x50>)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	00db      	lsls	r3, r3, #3
 8005908:	4413      	add	r3, r2
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800590e:	e006      	b.n	800591e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	3301      	adds	r3, #1
 8005914:	60fb      	str	r3, [r7, #12]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2b07      	cmp	r3, #7
 800591a:	d9e7      	bls.n	80058ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800591c:	bf00      	nop
 800591e:	bf00      	nop
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	2000099c 	.word	0x2000099c

08005930 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005940:	f001 fbf2 	bl	8007128 <vPortEnterCritical>
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800594a:	b25b      	sxtb	r3, r3
 800594c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005950:	d103      	bne.n	800595a <vQueueWaitForMessageRestricted+0x2a>
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005960:	b25b      	sxtb	r3, r3
 8005962:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005966:	d103      	bne.n	8005970 <vQueueWaitForMessageRestricted+0x40>
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005970:	f001 fc0c 	bl	800718c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005978:	2b00      	cmp	r3, #0
 800597a:	d106      	bne.n	800598a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	3324      	adds	r3, #36	@ 0x24
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	68b9      	ldr	r1, [r7, #8]
 8005984:	4618      	mov	r0, r3
 8005986:	f000 fc6d 	bl	8006264 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800598a:	6978      	ldr	r0, [r7, #20]
 800598c:	f7ff ff26 	bl	80057dc <prvUnlockQueue>
	}
 8005990:	bf00      	nop
 8005992:	3718      	adds	r7, #24
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005998:	b580      	push	{r7, lr}
 800599a:	b08e      	sub	sp, #56	@ 0x38
 800599c:	af04      	add	r7, sp, #16
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
 80059a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80059a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10b      	bne.n	80059c4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80059ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059b0:	f383 8811 	msr	BASEPRI, r3
 80059b4:	f3bf 8f6f 	isb	sy
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	623b      	str	r3, [r7, #32]
}
 80059be:	bf00      	nop
 80059c0:	bf00      	nop
 80059c2:	e7fd      	b.n	80059c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80059c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10b      	bne.n	80059e2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80059ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	61fb      	str	r3, [r7, #28]
}
 80059dc:	bf00      	nop
 80059de:	bf00      	nop
 80059e0:	e7fd      	b.n	80059de <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80059e2:	23a8      	movs	r3, #168	@ 0xa8
 80059e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	2ba8      	cmp	r3, #168	@ 0xa8
 80059ea:	d00b      	beq.n	8005a04 <xTaskCreateStatic+0x6c>
	__asm volatile
 80059ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f0:	f383 8811 	msr	BASEPRI, r3
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	61bb      	str	r3, [r7, #24]
}
 80059fe:	bf00      	nop
 8005a00:	bf00      	nop
 8005a02:	e7fd      	b.n	8005a00 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005a04:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d01e      	beq.n	8005a4a <xTaskCreateStatic+0xb2>
 8005a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d01b      	beq.n	8005a4a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a14:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a1a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1e:	2202      	movs	r2, #2
 8005a20:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a24:	2300      	movs	r3, #0
 8005a26:	9303      	str	r3, [sp, #12]
 8005a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2a:	9302      	str	r3, [sp, #8]
 8005a2c:	f107 0314 	add.w	r3, r7, #20
 8005a30:	9301      	str	r3, [sp, #4]
 8005a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a34:	9300      	str	r3, [sp, #0]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	68b9      	ldr	r1, [r7, #8]
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f000 f851 	bl	8005ae4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005a44:	f000 f8f6 	bl	8005c34 <prvAddNewTaskToReadyList>
 8005a48:	e001      	b.n	8005a4e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a4e:	697b      	ldr	r3, [r7, #20]
	}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3728      	adds	r7, #40	@ 0x28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b08c      	sub	sp, #48	@ 0x30
 8005a5c:	af04      	add	r7, sp, #16
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	603b      	str	r3, [r7, #0]
 8005a64:	4613      	mov	r3, r2
 8005a66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a68:	88fb      	ldrh	r3, [r7, #6]
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f001 fc7d 	bl	800736c <pvPortMalloc>
 8005a72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00e      	beq.n	8005a98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a7a:	20a8      	movs	r0, #168	@ 0xa8
 8005a7c:	f001 fc76 	bl	800736c <pvPortMalloc>
 8005a80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d003      	beq.n	8005a90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a8e:	e005      	b.n	8005a9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a90:	6978      	ldr	r0, [r7, #20]
 8005a92:	f001 fd39 	bl	8007508 <vPortFree>
 8005a96:	e001      	b.n	8005a9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d017      	beq.n	8005ad2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005aaa:	88fa      	ldrh	r2, [r7, #6]
 8005aac:	2300      	movs	r3, #0
 8005aae:	9303      	str	r3, [sp, #12]
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	9302      	str	r3, [sp, #8]
 8005ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ab6:	9301      	str	r3, [sp, #4]
 8005ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	68b9      	ldr	r1, [r7, #8]
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 f80f 	bl	8005ae4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ac6:	69f8      	ldr	r0, [r7, #28]
 8005ac8:	f000 f8b4 	bl	8005c34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005acc:	2301      	movs	r3, #1
 8005ace:	61bb      	str	r3, [r7, #24]
 8005ad0:	e002      	b.n	8005ad8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ad2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005ad6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ad8:	69bb      	ldr	r3, [r7, #24]
	}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3720      	adds	r7, #32
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
	...

08005ae4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b088      	sub	sp, #32
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
 8005af0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	461a      	mov	r2, r3
 8005afc:	21a5      	movs	r1, #165	@ 0xa5
 8005afe:	f002 f835 	bl	8007b6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	f023 0307 	bic.w	r3, r3, #7
 8005b1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	f003 0307 	and.w	r3, r3, #7
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00b      	beq.n	8005b3e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b2a:	f383 8811 	msr	BASEPRI, r3
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	617b      	str	r3, [r7, #20]
}
 8005b38:	bf00      	nop
 8005b3a:	bf00      	nop
 8005b3c:	e7fd      	b.n	8005b3a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d01f      	beq.n	8005b84 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b44:	2300      	movs	r3, #0
 8005b46:	61fb      	str	r3, [r7, #28]
 8005b48:	e012      	b.n	8005b70 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	4413      	add	r3, r2
 8005b50:	7819      	ldrb	r1, [r3, #0]
 8005b52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	4413      	add	r3, r2
 8005b58:	3334      	adds	r3, #52	@ 0x34
 8005b5a:	460a      	mov	r2, r1
 8005b5c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	4413      	add	r3, r2
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d006      	beq.n	8005b78 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	61fb      	str	r3, [r7, #28]
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	2b0f      	cmp	r3, #15
 8005b74:	d9e9      	bls.n	8005b4a <prvInitialiseNewTask+0x66>
 8005b76:	e000      	b.n	8005b7a <prvInitialiseNewTask+0x96>
			{
				break;
 8005b78:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b82:	e003      	b.n	8005b8c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b8e:	2b37      	cmp	r3, #55	@ 0x37
 8005b90:	d901      	bls.n	8005b96 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b92:	2337      	movs	r3, #55	@ 0x37
 8005b94:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b9a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ba0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005baa:	3304      	adds	r3, #4
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7ff f929 	bl	8004e04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb4:	3318      	adds	r3, #24
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7ff f924 	bl	8004e04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bc0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bd0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be4:	3354      	adds	r3, #84	@ 0x54
 8005be6:	224c      	movs	r2, #76	@ 0x4c
 8005be8:	2100      	movs	r1, #0
 8005bea:	4618      	mov	r0, r3
 8005bec:	f001 ffbe 	bl	8007b6c <memset>
 8005bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf2:	4a0d      	ldr	r2, [pc, #52]	@ (8005c28 <prvInitialiseNewTask+0x144>)
 8005bf4:	659a      	str	r2, [r3, #88]	@ 0x58
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf8:	4a0c      	ldr	r2, [pc, #48]	@ (8005c2c <prvInitialiseNewTask+0x148>)
 8005bfa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfe:	4a0c      	ldr	r2, [pc, #48]	@ (8005c30 <prvInitialiseNewTask+0x14c>)
 8005c00:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	68f9      	ldr	r1, [r7, #12]
 8005c06:	69b8      	ldr	r0, [r7, #24]
 8005c08:	f001 f95a 	bl	8006ec0 <pxPortInitialiseStack>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d002      	beq.n	8005c1e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c1e:	bf00      	nop
 8005c20:	3720      	adds	r7, #32
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	20001c30 	.word	0x20001c30
 8005c2c:	20001c98 	.word	0x20001c98
 8005c30:	20001d00 	.word	0x20001d00

08005c34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c3c:	f001 fa74 	bl	8007128 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c40:	4b2d      	ldr	r3, [pc, #180]	@ (8005cf8 <prvAddNewTaskToReadyList+0xc4>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3301      	adds	r3, #1
 8005c46:	4a2c      	ldr	r2, [pc, #176]	@ (8005cf8 <prvAddNewTaskToReadyList+0xc4>)
 8005c48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c4a:	4b2c      	ldr	r3, [pc, #176]	@ (8005cfc <prvAddNewTaskToReadyList+0xc8>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d109      	bne.n	8005c66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c52:	4a2a      	ldr	r2, [pc, #168]	@ (8005cfc <prvAddNewTaskToReadyList+0xc8>)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c58:	4b27      	ldr	r3, [pc, #156]	@ (8005cf8 <prvAddNewTaskToReadyList+0xc4>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d110      	bne.n	8005c82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c60:	f000 fc2e 	bl	80064c0 <prvInitialiseTaskLists>
 8005c64:	e00d      	b.n	8005c82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c66:	4b26      	ldr	r3, [pc, #152]	@ (8005d00 <prvAddNewTaskToReadyList+0xcc>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d109      	bne.n	8005c82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c6e:	4b23      	ldr	r3, [pc, #140]	@ (8005cfc <prvAddNewTaskToReadyList+0xc8>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d802      	bhi.n	8005c82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c7c:	4a1f      	ldr	r2, [pc, #124]	@ (8005cfc <prvAddNewTaskToReadyList+0xc8>)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c82:	4b20      	ldr	r3, [pc, #128]	@ (8005d04 <prvAddNewTaskToReadyList+0xd0>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3301      	adds	r3, #1
 8005c88:	4a1e      	ldr	r2, [pc, #120]	@ (8005d04 <prvAddNewTaskToReadyList+0xd0>)
 8005c8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005c8c:	4b1d      	ldr	r3, [pc, #116]	@ (8005d04 <prvAddNewTaskToReadyList+0xd0>)
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c98:	4b1b      	ldr	r3, [pc, #108]	@ (8005d08 <prvAddNewTaskToReadyList+0xd4>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d903      	bls.n	8005ca8 <prvAddNewTaskToReadyList+0x74>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca4:	4a18      	ldr	r2, [pc, #96]	@ (8005d08 <prvAddNewTaskToReadyList+0xd4>)
 8005ca6:	6013      	str	r3, [r2, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cac:	4613      	mov	r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	4413      	add	r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4a15      	ldr	r2, [pc, #84]	@ (8005d0c <prvAddNewTaskToReadyList+0xd8>)
 8005cb6:	441a      	add	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	3304      	adds	r3, #4
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	f7ff f8ad 	bl	8004e1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005cc4:	f001 fa62 	bl	800718c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8005d00 <prvAddNewTaskToReadyList+0xcc>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00e      	beq.n	8005cee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8005cfc <prvAddNewTaskToReadyList+0xc8>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d207      	bcs.n	8005cee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005cde:	4b0c      	ldr	r3, [pc, #48]	@ (8005d10 <prvAddNewTaskToReadyList+0xdc>)
 8005ce0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cee:	bf00      	nop
 8005cf0:	3708      	adds	r7, #8
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20000eb0 	.word	0x20000eb0
 8005cfc:	200009dc 	.word	0x200009dc
 8005d00:	20000ebc 	.word	0x20000ebc
 8005d04:	20000ecc 	.word	0x20000ecc
 8005d08:	20000eb8 	.word	0x20000eb8
 8005d0c:	200009e0 	.word	0x200009e0
 8005d10:	e000ed04 	.word	0xe000ed04

08005d14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d018      	beq.n	8005d58 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005d26:	4b14      	ldr	r3, [pc, #80]	@ (8005d78 <vTaskDelay+0x64>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00b      	beq.n	8005d46 <vTaskDelay+0x32>
	__asm volatile
 8005d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d32:	f383 8811 	msr	BASEPRI, r3
 8005d36:	f3bf 8f6f 	isb	sy
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	60bb      	str	r3, [r7, #8]
}
 8005d40:	bf00      	nop
 8005d42:	bf00      	nop
 8005d44:	e7fd      	b.n	8005d42 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005d46:	f000 f88b 	bl	8005e60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 fd09 	bl	8006764 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d52:	f000 f893 	bl	8005e7c <xTaskResumeAll>
 8005d56:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d107      	bne.n	8005d6e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005d5e:	4b07      	ldr	r3, [pc, #28]	@ (8005d7c <vTaskDelay+0x68>)
 8005d60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d6e:	bf00      	nop
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	20000ed8 	.word	0x20000ed8
 8005d7c:	e000ed04 	.word	0xe000ed04

08005d80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b08a      	sub	sp, #40	@ 0x28
 8005d84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d86:	2300      	movs	r3, #0
 8005d88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d8e:	463a      	mov	r2, r7
 8005d90:	1d39      	adds	r1, r7, #4
 8005d92:	f107 0308 	add.w	r3, r7, #8
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7fe ffe0 	bl	8004d5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d9c:	6839      	ldr	r1, [r7, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	9202      	str	r2, [sp, #8]
 8005da4:	9301      	str	r3, [sp, #4]
 8005da6:	2300      	movs	r3, #0
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	2300      	movs	r3, #0
 8005dac:	460a      	mov	r2, r1
 8005dae:	4924      	ldr	r1, [pc, #144]	@ (8005e40 <vTaskStartScheduler+0xc0>)
 8005db0:	4824      	ldr	r0, [pc, #144]	@ (8005e44 <vTaskStartScheduler+0xc4>)
 8005db2:	f7ff fdf1 	bl	8005998 <xTaskCreateStatic>
 8005db6:	4603      	mov	r3, r0
 8005db8:	4a23      	ldr	r2, [pc, #140]	@ (8005e48 <vTaskStartScheduler+0xc8>)
 8005dba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005dbc:	4b22      	ldr	r3, [pc, #136]	@ (8005e48 <vTaskStartScheduler+0xc8>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d002      	beq.n	8005dca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	617b      	str	r3, [r7, #20]
 8005dc8:	e001      	b.n	8005dce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d102      	bne.n	8005dda <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005dd4:	f000 fd1a 	bl	800680c <xTimerCreateTimerTask>
 8005dd8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d11b      	bne.n	8005e18 <vTaskStartScheduler+0x98>
	__asm volatile
 8005de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	613b      	str	r3, [r7, #16]
}
 8005df2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005df4:	4b15      	ldr	r3, [pc, #84]	@ (8005e4c <vTaskStartScheduler+0xcc>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	3354      	adds	r3, #84	@ 0x54
 8005dfa:	4a15      	ldr	r2, [pc, #84]	@ (8005e50 <vTaskStartScheduler+0xd0>)
 8005dfc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005dfe:	4b15      	ldr	r3, [pc, #84]	@ (8005e54 <vTaskStartScheduler+0xd4>)
 8005e00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e04:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005e06:	4b14      	ldr	r3, [pc, #80]	@ (8005e58 <vTaskStartScheduler+0xd8>)
 8005e08:	2201      	movs	r2, #1
 8005e0a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005e0c:	4b13      	ldr	r3, [pc, #76]	@ (8005e5c <vTaskStartScheduler+0xdc>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005e12:	f001 f8e5 	bl	8006fe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005e16:	e00f      	b.n	8005e38 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e1e:	d10b      	bne.n	8005e38 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e24:	f383 8811 	msr	BASEPRI, r3
 8005e28:	f3bf 8f6f 	isb	sy
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	60fb      	str	r3, [r7, #12]
}
 8005e32:	bf00      	nop
 8005e34:	bf00      	nop
 8005e36:	e7fd      	b.n	8005e34 <vTaskStartScheduler+0xb4>
}
 8005e38:	bf00      	nop
 8005e3a:	3718      	adds	r7, #24
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	08008a20 	.word	0x08008a20
 8005e44:	08006491 	.word	0x08006491
 8005e48:	20000ed4 	.word	0x20000ed4
 8005e4c:	200009dc 	.word	0x200009dc
 8005e50:	20000030 	.word	0x20000030
 8005e54:	20000ed0 	.word	0x20000ed0
 8005e58:	20000ebc 	.word	0x20000ebc
 8005e5c:	20000eb4 	.word	0x20000eb4

08005e60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e60:	b480      	push	{r7}
 8005e62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005e64:	4b04      	ldr	r3, [pc, #16]	@ (8005e78 <vTaskSuspendAll+0x18>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	4a03      	ldr	r2, [pc, #12]	@ (8005e78 <vTaskSuspendAll+0x18>)
 8005e6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005e6e:	bf00      	nop
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	20000ed8 	.word	0x20000ed8

08005e7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e82:	2300      	movs	r3, #0
 8005e84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e86:	2300      	movs	r3, #0
 8005e88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e8a:	4b42      	ldr	r3, [pc, #264]	@ (8005f94 <xTaskResumeAll+0x118>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10b      	bne.n	8005eaa <xTaskResumeAll+0x2e>
	__asm volatile
 8005e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	603b      	str	r3, [r7, #0]
}
 8005ea4:	bf00      	nop
 8005ea6:	bf00      	nop
 8005ea8:	e7fd      	b.n	8005ea6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005eaa:	f001 f93d 	bl	8007128 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005eae:	4b39      	ldr	r3, [pc, #228]	@ (8005f94 <xTaskResumeAll+0x118>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	4a37      	ldr	r2, [pc, #220]	@ (8005f94 <xTaskResumeAll+0x118>)
 8005eb6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005eb8:	4b36      	ldr	r3, [pc, #216]	@ (8005f94 <xTaskResumeAll+0x118>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d162      	bne.n	8005f86 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ec0:	4b35      	ldr	r3, [pc, #212]	@ (8005f98 <xTaskResumeAll+0x11c>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d05e      	beq.n	8005f86 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ec8:	e02f      	b.n	8005f2a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eca:	4b34      	ldr	r3, [pc, #208]	@ (8005f9c <xTaskResumeAll+0x120>)
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	3318      	adds	r3, #24
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7fe fffe 	bl	8004ed8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	3304      	adds	r3, #4
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7fe fff9 	bl	8004ed8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eea:	4b2d      	ldr	r3, [pc, #180]	@ (8005fa0 <xTaskResumeAll+0x124>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d903      	bls.n	8005efa <xTaskResumeAll+0x7e>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef6:	4a2a      	ldr	r2, [pc, #168]	@ (8005fa0 <xTaskResumeAll+0x124>)
 8005ef8:	6013      	str	r3, [r2, #0]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005efe:	4613      	mov	r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4a27      	ldr	r2, [pc, #156]	@ (8005fa4 <xTaskResumeAll+0x128>)
 8005f08:	441a      	add	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	4619      	mov	r1, r3
 8005f10:	4610      	mov	r0, r2
 8005f12:	f7fe ff84 	bl	8004e1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f1a:	4b23      	ldr	r3, [pc, #140]	@ (8005fa8 <xTaskResumeAll+0x12c>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d302      	bcc.n	8005f2a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005f24:	4b21      	ldr	r3, [pc, #132]	@ (8005fac <xTaskResumeAll+0x130>)
 8005f26:	2201      	movs	r2, #1
 8005f28:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8005f9c <xTaskResumeAll+0x120>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1cb      	bne.n	8005eca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f38:	f000 fb66 	bl	8006608 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8005fb0 <xTaskResumeAll+0x134>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d010      	beq.n	8005f6a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f48:	f000 f846 	bl	8005fd8 <xTaskIncrementTick>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d002      	beq.n	8005f58 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005f52:	4b16      	ldr	r3, [pc, #88]	@ (8005fac <xTaskResumeAll+0x130>)
 8005f54:	2201      	movs	r2, #1
 8005f56:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1f1      	bne.n	8005f48 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005f64:	4b12      	ldr	r3, [pc, #72]	@ (8005fb0 <xTaskResumeAll+0x134>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f6a:	4b10      	ldr	r3, [pc, #64]	@ (8005fac <xTaskResumeAll+0x130>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d009      	beq.n	8005f86 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f72:	2301      	movs	r3, #1
 8005f74:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f76:	4b0f      	ldr	r3, [pc, #60]	@ (8005fb4 <xTaskResumeAll+0x138>)
 8005f78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f86:	f001 f901 	bl	800718c <vPortExitCritical>

	return xAlreadyYielded;
 8005f8a:	68bb      	ldr	r3, [r7, #8]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	20000ed8 	.word	0x20000ed8
 8005f98:	20000eb0 	.word	0x20000eb0
 8005f9c:	20000e70 	.word	0x20000e70
 8005fa0:	20000eb8 	.word	0x20000eb8
 8005fa4:	200009e0 	.word	0x200009e0
 8005fa8:	200009dc 	.word	0x200009dc
 8005fac:	20000ec4 	.word	0x20000ec4
 8005fb0:	20000ec0 	.word	0x20000ec0
 8005fb4:	e000ed04 	.word	0xe000ed04

08005fb8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005fbe:	4b05      	ldr	r3, [pc, #20]	@ (8005fd4 <xTaskGetTickCount+0x1c>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005fc4:	687b      	ldr	r3, [r7, #4]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	20000eb4 	.word	0x20000eb4

08005fd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fe2:	4b4f      	ldr	r3, [pc, #316]	@ (8006120 <xTaskIncrementTick+0x148>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f040 8090 	bne.w	800610c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005fec:	4b4d      	ldr	r3, [pc, #308]	@ (8006124 <xTaskIncrementTick+0x14c>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ff4:	4a4b      	ldr	r2, [pc, #300]	@ (8006124 <xTaskIncrementTick+0x14c>)
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d121      	bne.n	8006044 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006000:	4b49      	ldr	r3, [pc, #292]	@ (8006128 <xTaskIncrementTick+0x150>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00b      	beq.n	8006022 <xTaskIncrementTick+0x4a>
	__asm volatile
 800600a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800600e:	f383 8811 	msr	BASEPRI, r3
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	603b      	str	r3, [r7, #0]
}
 800601c:	bf00      	nop
 800601e:	bf00      	nop
 8006020:	e7fd      	b.n	800601e <xTaskIncrementTick+0x46>
 8006022:	4b41      	ldr	r3, [pc, #260]	@ (8006128 <xTaskIncrementTick+0x150>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	4b40      	ldr	r3, [pc, #256]	@ (800612c <xTaskIncrementTick+0x154>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a3e      	ldr	r2, [pc, #248]	@ (8006128 <xTaskIncrementTick+0x150>)
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	4a3e      	ldr	r2, [pc, #248]	@ (800612c <xTaskIncrementTick+0x154>)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6013      	str	r3, [r2, #0]
 8006036:	4b3e      	ldr	r3, [pc, #248]	@ (8006130 <xTaskIncrementTick+0x158>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	3301      	adds	r3, #1
 800603c:	4a3c      	ldr	r2, [pc, #240]	@ (8006130 <xTaskIncrementTick+0x158>)
 800603e:	6013      	str	r3, [r2, #0]
 8006040:	f000 fae2 	bl	8006608 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006044:	4b3b      	ldr	r3, [pc, #236]	@ (8006134 <xTaskIncrementTick+0x15c>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	429a      	cmp	r2, r3
 800604c:	d349      	bcc.n	80060e2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800604e:	4b36      	ldr	r3, [pc, #216]	@ (8006128 <xTaskIncrementTick+0x150>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d104      	bne.n	8006062 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006058:	4b36      	ldr	r3, [pc, #216]	@ (8006134 <xTaskIncrementTick+0x15c>)
 800605a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800605e:	601a      	str	r2, [r3, #0]
					break;
 8006060:	e03f      	b.n	80060e2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006062:	4b31      	ldr	r3, [pc, #196]	@ (8006128 <xTaskIncrementTick+0x150>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	429a      	cmp	r2, r3
 8006078:	d203      	bcs.n	8006082 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800607a:	4a2e      	ldr	r2, [pc, #184]	@ (8006134 <xTaskIncrementTick+0x15c>)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006080:	e02f      	b.n	80060e2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	3304      	adds	r3, #4
 8006086:	4618      	mov	r0, r3
 8006088:	f7fe ff26 	bl	8004ed8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006090:	2b00      	cmp	r3, #0
 8006092:	d004      	beq.n	800609e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	3318      	adds	r3, #24
 8006098:	4618      	mov	r0, r3
 800609a:	f7fe ff1d 	bl	8004ed8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060a2:	4b25      	ldr	r3, [pc, #148]	@ (8006138 <xTaskIncrementTick+0x160>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d903      	bls.n	80060b2 <xTaskIncrementTick+0xda>
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ae:	4a22      	ldr	r2, [pc, #136]	@ (8006138 <xTaskIncrementTick+0x160>)
 80060b0:	6013      	str	r3, [r2, #0]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060b6:	4613      	mov	r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4413      	add	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4a1f      	ldr	r2, [pc, #124]	@ (800613c <xTaskIncrementTick+0x164>)
 80060c0:	441a      	add	r2, r3
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	3304      	adds	r3, #4
 80060c6:	4619      	mov	r1, r3
 80060c8:	4610      	mov	r0, r2
 80060ca:	f7fe fea8 	bl	8004e1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006140 <xTaskIncrementTick+0x168>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d8:	429a      	cmp	r2, r3
 80060da:	d3b8      	bcc.n	800604e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80060dc:	2301      	movs	r3, #1
 80060de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060e0:	e7b5      	b.n	800604e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80060e2:	4b17      	ldr	r3, [pc, #92]	@ (8006140 <xTaskIncrementTick+0x168>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060e8:	4914      	ldr	r1, [pc, #80]	@ (800613c <xTaskIncrementTick+0x164>)
 80060ea:	4613      	mov	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	4413      	add	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	440b      	add	r3, r1
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d901      	bls.n	80060fe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80060fa:	2301      	movs	r3, #1
 80060fc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80060fe:	4b11      	ldr	r3, [pc, #68]	@ (8006144 <xTaskIncrementTick+0x16c>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d007      	beq.n	8006116 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006106:	2301      	movs	r3, #1
 8006108:	617b      	str	r3, [r7, #20]
 800610a:	e004      	b.n	8006116 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800610c:	4b0e      	ldr	r3, [pc, #56]	@ (8006148 <xTaskIncrementTick+0x170>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	3301      	adds	r3, #1
 8006112:	4a0d      	ldr	r2, [pc, #52]	@ (8006148 <xTaskIncrementTick+0x170>)
 8006114:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006116:	697b      	ldr	r3, [r7, #20]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3718      	adds	r7, #24
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	20000ed8 	.word	0x20000ed8
 8006124:	20000eb4 	.word	0x20000eb4
 8006128:	20000e68 	.word	0x20000e68
 800612c:	20000e6c 	.word	0x20000e6c
 8006130:	20000ec8 	.word	0x20000ec8
 8006134:	20000ed0 	.word	0x20000ed0
 8006138:	20000eb8 	.word	0x20000eb8
 800613c:	200009e0 	.word	0x200009e0
 8006140:	200009dc 	.word	0x200009dc
 8006144:	20000ec4 	.word	0x20000ec4
 8006148:	20000ec0 	.word	0x20000ec0

0800614c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006152:	4b2b      	ldr	r3, [pc, #172]	@ (8006200 <vTaskSwitchContext+0xb4>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800615a:	4b2a      	ldr	r3, [pc, #168]	@ (8006204 <vTaskSwitchContext+0xb8>)
 800615c:	2201      	movs	r2, #1
 800615e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006160:	e047      	b.n	80061f2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006162:	4b28      	ldr	r3, [pc, #160]	@ (8006204 <vTaskSwitchContext+0xb8>)
 8006164:	2200      	movs	r2, #0
 8006166:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006168:	4b27      	ldr	r3, [pc, #156]	@ (8006208 <vTaskSwitchContext+0xbc>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	60fb      	str	r3, [r7, #12]
 800616e:	e011      	b.n	8006194 <vTaskSwitchContext+0x48>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10b      	bne.n	800618e <vTaskSwitchContext+0x42>
	__asm volatile
 8006176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800617a:	f383 8811 	msr	BASEPRI, r3
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	607b      	str	r3, [r7, #4]
}
 8006188:	bf00      	nop
 800618a:	bf00      	nop
 800618c:	e7fd      	b.n	800618a <vTaskSwitchContext+0x3e>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	3b01      	subs	r3, #1
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	491d      	ldr	r1, [pc, #116]	@ (800620c <vTaskSwitchContext+0xc0>)
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	4613      	mov	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	440b      	add	r3, r1
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d0e3      	beq.n	8006170 <vTaskSwitchContext+0x24>
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	4613      	mov	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4413      	add	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4a16      	ldr	r2, [pc, #88]	@ (800620c <vTaskSwitchContext+0xc0>)
 80061b4:	4413      	add	r3, r2
 80061b6:	60bb      	str	r3, [r7, #8]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	605a      	str	r2, [r3, #4]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	3308      	adds	r3, #8
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d104      	bne.n	80061d8 <vTaskSwitchContext+0x8c>
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	605a      	str	r2, [r3, #4]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	4a0c      	ldr	r2, [pc, #48]	@ (8006210 <vTaskSwitchContext+0xc4>)
 80061e0:	6013      	str	r3, [r2, #0]
 80061e2:	4a09      	ldr	r2, [pc, #36]	@ (8006208 <vTaskSwitchContext+0xbc>)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80061e8:	4b09      	ldr	r3, [pc, #36]	@ (8006210 <vTaskSwitchContext+0xc4>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3354      	adds	r3, #84	@ 0x54
 80061ee:	4a09      	ldr	r2, [pc, #36]	@ (8006214 <vTaskSwitchContext+0xc8>)
 80061f0:	6013      	str	r3, [r2, #0]
}
 80061f2:	bf00      	nop
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	20000ed8 	.word	0x20000ed8
 8006204:	20000ec4 	.word	0x20000ec4
 8006208:	20000eb8 	.word	0x20000eb8
 800620c:	200009e0 	.word	0x200009e0
 8006210:	200009dc 	.word	0x200009dc
 8006214:	20000030 	.word	0x20000030

08006218 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d10b      	bne.n	8006240 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800622c:	f383 8811 	msr	BASEPRI, r3
 8006230:	f3bf 8f6f 	isb	sy
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	60fb      	str	r3, [r7, #12]
}
 800623a:	bf00      	nop
 800623c:	bf00      	nop
 800623e:	e7fd      	b.n	800623c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006240:	4b07      	ldr	r3, [pc, #28]	@ (8006260 <vTaskPlaceOnEventList+0x48>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	3318      	adds	r3, #24
 8006246:	4619      	mov	r1, r3
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f7fe fe0c 	bl	8004e66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800624e:	2101      	movs	r1, #1
 8006250:	6838      	ldr	r0, [r7, #0]
 8006252:	f000 fa87 	bl	8006764 <prvAddCurrentTaskToDelayedList>
}
 8006256:	bf00      	nop
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	200009dc 	.word	0x200009dc

08006264 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10b      	bne.n	800628e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800627a:	f383 8811 	msr	BASEPRI, r3
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	617b      	str	r3, [r7, #20]
}
 8006288:	bf00      	nop
 800628a:	bf00      	nop
 800628c:	e7fd      	b.n	800628a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800628e:	4b0a      	ldr	r3, [pc, #40]	@ (80062b8 <vTaskPlaceOnEventListRestricted+0x54>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	3318      	adds	r3, #24
 8006294:	4619      	mov	r1, r3
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f7fe fdc1 	bl	8004e1e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d002      	beq.n	80062a8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80062a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80062a6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80062a8:	6879      	ldr	r1, [r7, #4]
 80062aa:	68b8      	ldr	r0, [r7, #8]
 80062ac:	f000 fa5a 	bl	8006764 <prvAddCurrentTaskToDelayedList>
	}
 80062b0:	bf00      	nop
 80062b2:	3718      	adds	r7, #24
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	200009dc 	.word	0x200009dc

080062bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10b      	bne.n	80062ea <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80062d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	60fb      	str	r3, [r7, #12]
}
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop
 80062e8:	e7fd      	b.n	80062e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	3318      	adds	r3, #24
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7fe fdf2 	bl	8004ed8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062f4:	4b1d      	ldr	r3, [pc, #116]	@ (800636c <xTaskRemoveFromEventList+0xb0>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d11d      	bne.n	8006338 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	3304      	adds	r3, #4
 8006300:	4618      	mov	r0, r3
 8006302:	f7fe fde9 	bl	8004ed8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800630a:	4b19      	ldr	r3, [pc, #100]	@ (8006370 <xTaskRemoveFromEventList+0xb4>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	429a      	cmp	r2, r3
 8006310:	d903      	bls.n	800631a <xTaskRemoveFromEventList+0x5e>
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006316:	4a16      	ldr	r2, [pc, #88]	@ (8006370 <xTaskRemoveFromEventList+0xb4>)
 8006318:	6013      	str	r3, [r2, #0]
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800631e:	4613      	mov	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4a13      	ldr	r2, [pc, #76]	@ (8006374 <xTaskRemoveFromEventList+0xb8>)
 8006328:	441a      	add	r2, r3
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	3304      	adds	r3, #4
 800632e:	4619      	mov	r1, r3
 8006330:	4610      	mov	r0, r2
 8006332:	f7fe fd74 	bl	8004e1e <vListInsertEnd>
 8006336:	e005      	b.n	8006344 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	3318      	adds	r3, #24
 800633c:	4619      	mov	r1, r3
 800633e:	480e      	ldr	r0, [pc, #56]	@ (8006378 <xTaskRemoveFromEventList+0xbc>)
 8006340:	f7fe fd6d 	bl	8004e1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006348:	4b0c      	ldr	r3, [pc, #48]	@ (800637c <xTaskRemoveFromEventList+0xc0>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634e:	429a      	cmp	r2, r3
 8006350:	d905      	bls.n	800635e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006352:	2301      	movs	r3, #1
 8006354:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006356:	4b0a      	ldr	r3, [pc, #40]	@ (8006380 <xTaskRemoveFromEventList+0xc4>)
 8006358:	2201      	movs	r2, #1
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	e001      	b.n	8006362 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800635e:	2300      	movs	r3, #0
 8006360:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006362:	697b      	ldr	r3, [r7, #20]
}
 8006364:	4618      	mov	r0, r3
 8006366:	3718      	adds	r7, #24
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	20000ed8 	.word	0x20000ed8
 8006370:	20000eb8 	.word	0x20000eb8
 8006374:	200009e0 	.word	0x200009e0
 8006378:	20000e70 	.word	0x20000e70
 800637c:	200009dc 	.word	0x200009dc
 8006380:	20000ec4 	.word	0x20000ec4

08006384 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800638c:	4b06      	ldr	r3, [pc, #24]	@ (80063a8 <vTaskInternalSetTimeOutState+0x24>)
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006394:	4b05      	ldr	r3, [pc, #20]	@ (80063ac <vTaskInternalSetTimeOutState+0x28>)
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	605a      	str	r2, [r3, #4]
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr
 80063a8:	20000ec8 	.word	0x20000ec8
 80063ac:	20000eb4 	.word	0x20000eb4

080063b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b088      	sub	sp, #32
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10b      	bne.n	80063d8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80063c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	613b      	str	r3, [r7, #16]
}
 80063d2:	bf00      	nop
 80063d4:	bf00      	nop
 80063d6:	e7fd      	b.n	80063d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10b      	bne.n	80063f6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80063de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	60fb      	str	r3, [r7, #12]
}
 80063f0:	bf00      	nop
 80063f2:	bf00      	nop
 80063f4:	e7fd      	b.n	80063f2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80063f6:	f000 fe97 	bl	8007128 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80063fa:	4b1d      	ldr	r3, [pc, #116]	@ (8006470 <xTaskCheckForTimeOut+0xc0>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006412:	d102      	bne.n	800641a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006414:	2300      	movs	r3, #0
 8006416:	61fb      	str	r3, [r7, #28]
 8006418:	e023      	b.n	8006462 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	4b15      	ldr	r3, [pc, #84]	@ (8006474 <xTaskCheckForTimeOut+0xc4>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	429a      	cmp	r2, r3
 8006424:	d007      	beq.n	8006436 <xTaskCheckForTimeOut+0x86>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	429a      	cmp	r2, r3
 800642e:	d302      	bcc.n	8006436 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006430:	2301      	movs	r3, #1
 8006432:	61fb      	str	r3, [r7, #28]
 8006434:	e015      	b.n	8006462 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	429a      	cmp	r2, r3
 800643e:	d20b      	bcs.n	8006458 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	1ad2      	subs	r2, r2, r3
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f7ff ff99 	bl	8006384 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006452:	2300      	movs	r3, #0
 8006454:	61fb      	str	r3, [r7, #28]
 8006456:	e004      	b.n	8006462 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2200      	movs	r2, #0
 800645c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800645e:	2301      	movs	r3, #1
 8006460:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006462:	f000 fe93 	bl	800718c <vPortExitCritical>

	return xReturn;
 8006466:	69fb      	ldr	r3, [r7, #28]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3720      	adds	r7, #32
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	20000eb4 	.word	0x20000eb4
 8006474:	20000ec8 	.word	0x20000ec8

08006478 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006478:	b480      	push	{r7}
 800647a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800647c:	4b03      	ldr	r3, [pc, #12]	@ (800648c <vTaskMissedYield+0x14>)
 800647e:	2201      	movs	r2, #1
 8006480:	601a      	str	r2, [r3, #0]
}
 8006482:	bf00      	nop
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	20000ec4 	.word	0x20000ec4

08006490 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006498:	f000 f852 	bl	8006540 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800649c:	4b06      	ldr	r3, [pc, #24]	@ (80064b8 <prvIdleTask+0x28>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d9f9      	bls.n	8006498 <prvIdleTask+0x8>
			{
				taskYIELD();
 80064a4:	4b05      	ldr	r3, [pc, #20]	@ (80064bc <prvIdleTask+0x2c>)
 80064a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80064b4:	e7f0      	b.n	8006498 <prvIdleTask+0x8>
 80064b6:	bf00      	nop
 80064b8:	200009e0 	.word	0x200009e0
 80064bc:	e000ed04 	.word	0xe000ed04

080064c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064c6:	2300      	movs	r3, #0
 80064c8:	607b      	str	r3, [r7, #4]
 80064ca:	e00c      	b.n	80064e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	4613      	mov	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	4413      	add	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4a12      	ldr	r2, [pc, #72]	@ (8006520 <prvInitialiseTaskLists+0x60>)
 80064d8:	4413      	add	r3, r2
 80064da:	4618      	mov	r0, r3
 80064dc:	f7fe fc72 	bl	8004dc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	3301      	adds	r3, #1
 80064e4:	607b      	str	r3, [r7, #4]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2b37      	cmp	r3, #55	@ 0x37
 80064ea:	d9ef      	bls.n	80064cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80064ec:	480d      	ldr	r0, [pc, #52]	@ (8006524 <prvInitialiseTaskLists+0x64>)
 80064ee:	f7fe fc69 	bl	8004dc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80064f2:	480d      	ldr	r0, [pc, #52]	@ (8006528 <prvInitialiseTaskLists+0x68>)
 80064f4:	f7fe fc66 	bl	8004dc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80064f8:	480c      	ldr	r0, [pc, #48]	@ (800652c <prvInitialiseTaskLists+0x6c>)
 80064fa:	f7fe fc63 	bl	8004dc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80064fe:	480c      	ldr	r0, [pc, #48]	@ (8006530 <prvInitialiseTaskLists+0x70>)
 8006500:	f7fe fc60 	bl	8004dc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006504:	480b      	ldr	r0, [pc, #44]	@ (8006534 <prvInitialiseTaskLists+0x74>)
 8006506:	f7fe fc5d 	bl	8004dc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800650a:	4b0b      	ldr	r3, [pc, #44]	@ (8006538 <prvInitialiseTaskLists+0x78>)
 800650c:	4a05      	ldr	r2, [pc, #20]	@ (8006524 <prvInitialiseTaskLists+0x64>)
 800650e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006510:	4b0a      	ldr	r3, [pc, #40]	@ (800653c <prvInitialiseTaskLists+0x7c>)
 8006512:	4a05      	ldr	r2, [pc, #20]	@ (8006528 <prvInitialiseTaskLists+0x68>)
 8006514:	601a      	str	r2, [r3, #0]
}
 8006516:	bf00      	nop
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	200009e0 	.word	0x200009e0
 8006524:	20000e40 	.word	0x20000e40
 8006528:	20000e54 	.word	0x20000e54
 800652c:	20000e70 	.word	0x20000e70
 8006530:	20000e84 	.word	0x20000e84
 8006534:	20000e9c 	.word	0x20000e9c
 8006538:	20000e68 	.word	0x20000e68
 800653c:	20000e6c 	.word	0x20000e6c

08006540 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006546:	e019      	b.n	800657c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006548:	f000 fdee 	bl	8007128 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800654c:	4b10      	ldr	r3, [pc, #64]	@ (8006590 <prvCheckTasksWaitingTermination+0x50>)
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	3304      	adds	r3, #4
 8006558:	4618      	mov	r0, r3
 800655a:	f7fe fcbd 	bl	8004ed8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800655e:	4b0d      	ldr	r3, [pc, #52]	@ (8006594 <prvCheckTasksWaitingTermination+0x54>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	3b01      	subs	r3, #1
 8006564:	4a0b      	ldr	r2, [pc, #44]	@ (8006594 <prvCheckTasksWaitingTermination+0x54>)
 8006566:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006568:	4b0b      	ldr	r3, [pc, #44]	@ (8006598 <prvCheckTasksWaitingTermination+0x58>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3b01      	subs	r3, #1
 800656e:	4a0a      	ldr	r2, [pc, #40]	@ (8006598 <prvCheckTasksWaitingTermination+0x58>)
 8006570:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006572:	f000 fe0b 	bl	800718c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f810 	bl	800659c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800657c:	4b06      	ldr	r3, [pc, #24]	@ (8006598 <prvCheckTasksWaitingTermination+0x58>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1e1      	bne.n	8006548 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006584:	bf00      	nop
 8006586:	bf00      	nop
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	20000e84 	.word	0x20000e84
 8006594:	20000eb0 	.word	0x20000eb0
 8006598:	20000e98 	.word	0x20000e98

0800659c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	3354      	adds	r3, #84	@ 0x54
 80065a8:	4618      	mov	r0, r3
 80065aa:	f001 faf7 	bl	8007b9c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d108      	bne.n	80065ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065bc:	4618      	mov	r0, r3
 80065be:	f000 ffa3 	bl	8007508 <vPortFree>
				vPortFree( pxTCB );
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 ffa0 	bl	8007508 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80065c8:	e019      	b.n	80065fe <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d103      	bne.n	80065dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 ff97 	bl	8007508 <vPortFree>
	}
 80065da:	e010      	b.n	80065fe <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d00b      	beq.n	80065fe <prvDeleteTCB+0x62>
	__asm volatile
 80065e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ea:	f383 8811 	msr	BASEPRI, r3
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	60fb      	str	r3, [r7, #12]
}
 80065f8:	bf00      	nop
 80065fa:	bf00      	nop
 80065fc:	e7fd      	b.n	80065fa <prvDeleteTCB+0x5e>
	}
 80065fe:	bf00      	nop
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
	...

08006608 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800660e:	4b0c      	ldr	r3, [pc, #48]	@ (8006640 <prvResetNextTaskUnblockTime+0x38>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d104      	bne.n	8006622 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006618:	4b0a      	ldr	r3, [pc, #40]	@ (8006644 <prvResetNextTaskUnblockTime+0x3c>)
 800661a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800661e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006620:	e008      	b.n	8006634 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006622:	4b07      	ldr	r3, [pc, #28]	@ (8006640 <prvResetNextTaskUnblockTime+0x38>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	4a04      	ldr	r2, [pc, #16]	@ (8006644 <prvResetNextTaskUnblockTime+0x3c>)
 8006632:	6013      	str	r3, [r2, #0]
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	20000e68 	.word	0x20000e68
 8006644:	20000ed0 	.word	0x20000ed0

08006648 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800664e:	4b0b      	ldr	r3, [pc, #44]	@ (800667c <xTaskGetSchedulerState+0x34>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d102      	bne.n	800665c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006656:	2301      	movs	r3, #1
 8006658:	607b      	str	r3, [r7, #4]
 800665a:	e008      	b.n	800666e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800665c:	4b08      	ldr	r3, [pc, #32]	@ (8006680 <xTaskGetSchedulerState+0x38>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d102      	bne.n	800666a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006664:	2302      	movs	r3, #2
 8006666:	607b      	str	r3, [r7, #4]
 8006668:	e001      	b.n	800666e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800666a:	2300      	movs	r3, #0
 800666c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800666e:	687b      	ldr	r3, [r7, #4]
	}
 8006670:	4618      	mov	r0, r3
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	20000ebc 	.word	0x20000ebc
 8006680:	20000ed8 	.word	0x20000ed8

08006684 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006684:	b580      	push	{r7, lr}
 8006686:	b086      	sub	sp, #24
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006690:	2300      	movs	r3, #0
 8006692:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d058      	beq.n	800674c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800669a:	4b2f      	ldr	r3, [pc, #188]	@ (8006758 <xTaskPriorityDisinherit+0xd4>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d00b      	beq.n	80066bc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80066a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a8:	f383 8811 	msr	BASEPRI, r3
 80066ac:	f3bf 8f6f 	isb	sy
 80066b0:	f3bf 8f4f 	dsb	sy
 80066b4:	60fb      	str	r3, [r7, #12]
}
 80066b6:	bf00      	nop
 80066b8:	bf00      	nop
 80066ba:	e7fd      	b.n	80066b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10b      	bne.n	80066dc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80066c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c8:	f383 8811 	msr	BASEPRI, r3
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	60bb      	str	r3, [r7, #8]
}
 80066d6:	bf00      	nop
 80066d8:	bf00      	nop
 80066da:	e7fd      	b.n	80066d8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066e0:	1e5a      	subs	r2, r3, #1
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d02c      	beq.n	800674c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d128      	bne.n	800674c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	3304      	adds	r3, #4
 80066fe:	4618      	mov	r0, r3
 8006700:	f7fe fbea 	bl	8004ed8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006710:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800671c:	4b0f      	ldr	r3, [pc, #60]	@ (800675c <xTaskPriorityDisinherit+0xd8>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	429a      	cmp	r2, r3
 8006722:	d903      	bls.n	800672c <xTaskPriorityDisinherit+0xa8>
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006728:	4a0c      	ldr	r2, [pc, #48]	@ (800675c <xTaskPriorityDisinherit+0xd8>)
 800672a:	6013      	str	r3, [r2, #0]
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006730:	4613      	mov	r3, r2
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	4413      	add	r3, r2
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	4a09      	ldr	r2, [pc, #36]	@ (8006760 <xTaskPriorityDisinherit+0xdc>)
 800673a:	441a      	add	r2, r3
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	3304      	adds	r3, #4
 8006740:	4619      	mov	r1, r3
 8006742:	4610      	mov	r0, r2
 8006744:	f7fe fb6b 	bl	8004e1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006748:	2301      	movs	r3, #1
 800674a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800674c:	697b      	ldr	r3, [r7, #20]
	}
 800674e:	4618      	mov	r0, r3
 8006750:	3718      	adds	r7, #24
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	200009dc 	.word	0x200009dc
 800675c:	20000eb8 	.word	0x20000eb8
 8006760:	200009e0 	.word	0x200009e0

08006764 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800676e:	4b21      	ldr	r3, [pc, #132]	@ (80067f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006774:	4b20      	ldr	r3, [pc, #128]	@ (80067f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3304      	adds	r3, #4
 800677a:	4618      	mov	r0, r3
 800677c:	f7fe fbac 	bl	8004ed8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006786:	d10a      	bne.n	800679e <prvAddCurrentTaskToDelayedList+0x3a>
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d007      	beq.n	800679e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800678e:	4b1a      	ldr	r3, [pc, #104]	@ (80067f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	3304      	adds	r3, #4
 8006794:	4619      	mov	r1, r3
 8006796:	4819      	ldr	r0, [pc, #100]	@ (80067fc <prvAddCurrentTaskToDelayedList+0x98>)
 8006798:	f7fe fb41 	bl	8004e1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800679c:	e026      	b.n	80067ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4413      	add	r3, r2
 80067a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80067a6:	4b14      	ldr	r3, [pc, #80]	@ (80067f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d209      	bcs.n	80067ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067b6:	4b12      	ldr	r3, [pc, #72]	@ (8006800 <prvAddCurrentTaskToDelayedList+0x9c>)
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	4b0f      	ldr	r3, [pc, #60]	@ (80067f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	3304      	adds	r3, #4
 80067c0:	4619      	mov	r1, r3
 80067c2:	4610      	mov	r0, r2
 80067c4:	f7fe fb4f 	bl	8004e66 <vListInsert>
}
 80067c8:	e010      	b.n	80067ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067ca:	4b0e      	ldr	r3, [pc, #56]	@ (8006804 <prvAddCurrentTaskToDelayedList+0xa0>)
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	4b0a      	ldr	r3, [pc, #40]	@ (80067f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3304      	adds	r3, #4
 80067d4:	4619      	mov	r1, r3
 80067d6:	4610      	mov	r0, r2
 80067d8:	f7fe fb45 	bl	8004e66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80067dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006808 <prvAddCurrentTaskToDelayedList+0xa4>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d202      	bcs.n	80067ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80067e6:	4a08      	ldr	r2, [pc, #32]	@ (8006808 <prvAddCurrentTaskToDelayedList+0xa4>)
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	6013      	str	r3, [r2, #0]
}
 80067ec:	bf00      	nop
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	20000eb4 	.word	0x20000eb4
 80067f8:	200009dc 	.word	0x200009dc
 80067fc:	20000e9c 	.word	0x20000e9c
 8006800:	20000e6c 	.word	0x20000e6c
 8006804:	20000e68 	.word	0x20000e68
 8006808:	20000ed0 	.word	0x20000ed0

0800680c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b08a      	sub	sp, #40	@ 0x28
 8006810:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006812:	2300      	movs	r3, #0
 8006814:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006816:	f000 fb13 	bl	8006e40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800681a:	4b1d      	ldr	r3, [pc, #116]	@ (8006890 <xTimerCreateTimerTask+0x84>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d021      	beq.n	8006866 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006822:	2300      	movs	r3, #0
 8006824:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006826:	2300      	movs	r3, #0
 8006828:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800682a:	1d3a      	adds	r2, r7, #4
 800682c:	f107 0108 	add.w	r1, r7, #8
 8006830:	f107 030c 	add.w	r3, r7, #12
 8006834:	4618      	mov	r0, r3
 8006836:	f7fe faab 	bl	8004d90 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800683a:	6879      	ldr	r1, [r7, #4]
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	9202      	str	r2, [sp, #8]
 8006842:	9301      	str	r3, [sp, #4]
 8006844:	2302      	movs	r3, #2
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	2300      	movs	r3, #0
 800684a:	460a      	mov	r2, r1
 800684c:	4911      	ldr	r1, [pc, #68]	@ (8006894 <xTimerCreateTimerTask+0x88>)
 800684e:	4812      	ldr	r0, [pc, #72]	@ (8006898 <xTimerCreateTimerTask+0x8c>)
 8006850:	f7ff f8a2 	bl	8005998 <xTaskCreateStatic>
 8006854:	4603      	mov	r3, r0
 8006856:	4a11      	ldr	r2, [pc, #68]	@ (800689c <xTimerCreateTimerTask+0x90>)
 8006858:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800685a:	4b10      	ldr	r3, [pc, #64]	@ (800689c <xTimerCreateTimerTask+0x90>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006862:	2301      	movs	r3, #1
 8006864:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10b      	bne.n	8006884 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800686c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006870:	f383 8811 	msr	BASEPRI, r3
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	613b      	str	r3, [r7, #16]
}
 800687e:	bf00      	nop
 8006880:	bf00      	nop
 8006882:	e7fd      	b.n	8006880 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006884:	697b      	ldr	r3, [r7, #20]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3718      	adds	r7, #24
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	20000f0c 	.word	0x20000f0c
 8006894:	08008a28 	.word	0x08008a28
 8006898:	080069d9 	.word	0x080069d9
 800689c:	20000f10 	.word	0x20000f10

080068a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b08a      	sub	sp, #40	@ 0x28
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
 80068ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80068ae:	2300      	movs	r3, #0
 80068b0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10b      	bne.n	80068d0 <xTimerGenericCommand+0x30>
	__asm volatile
 80068b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068bc:	f383 8811 	msr	BASEPRI, r3
 80068c0:	f3bf 8f6f 	isb	sy
 80068c4:	f3bf 8f4f 	dsb	sy
 80068c8:	623b      	str	r3, [r7, #32]
}
 80068ca:	bf00      	nop
 80068cc:	bf00      	nop
 80068ce:	e7fd      	b.n	80068cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80068d0:	4b19      	ldr	r3, [pc, #100]	@ (8006938 <xTimerGenericCommand+0x98>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d02a      	beq.n	800692e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2b05      	cmp	r3, #5
 80068e8:	dc18      	bgt.n	800691c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80068ea:	f7ff fead 	bl	8006648 <xTaskGetSchedulerState>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d109      	bne.n	8006908 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80068f4:	4b10      	ldr	r3, [pc, #64]	@ (8006938 <xTimerGenericCommand+0x98>)
 80068f6:	6818      	ldr	r0, [r3, #0]
 80068f8:	f107 0110 	add.w	r1, r7, #16
 80068fc:	2300      	movs	r3, #0
 80068fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006900:	f7fe fc5a 	bl	80051b8 <xQueueGenericSend>
 8006904:	6278      	str	r0, [r7, #36]	@ 0x24
 8006906:	e012      	b.n	800692e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006908:	4b0b      	ldr	r3, [pc, #44]	@ (8006938 <xTimerGenericCommand+0x98>)
 800690a:	6818      	ldr	r0, [r3, #0]
 800690c:	f107 0110 	add.w	r1, r7, #16
 8006910:	2300      	movs	r3, #0
 8006912:	2200      	movs	r2, #0
 8006914:	f7fe fc50 	bl	80051b8 <xQueueGenericSend>
 8006918:	6278      	str	r0, [r7, #36]	@ 0x24
 800691a:	e008      	b.n	800692e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800691c:	4b06      	ldr	r3, [pc, #24]	@ (8006938 <xTimerGenericCommand+0x98>)
 800691e:	6818      	ldr	r0, [r3, #0]
 8006920:	f107 0110 	add.w	r1, r7, #16
 8006924:	2300      	movs	r3, #0
 8006926:	683a      	ldr	r2, [r7, #0]
 8006928:	f7fe fd48 	bl	80053bc <xQueueGenericSendFromISR>
 800692c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800692e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006930:	4618      	mov	r0, r3
 8006932:	3728      	adds	r7, #40	@ 0x28
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	20000f0c 	.word	0x20000f0c

0800693c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b088      	sub	sp, #32
 8006940:	af02      	add	r7, sp, #8
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006946:	4b23      	ldr	r3, [pc, #140]	@ (80069d4 <prvProcessExpiredTimer+0x98>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	3304      	adds	r3, #4
 8006954:	4618      	mov	r0, r3
 8006956:	f7fe fabf 	bl	8004ed8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006960:	f003 0304 	and.w	r3, r3, #4
 8006964:	2b00      	cmp	r3, #0
 8006966:	d023      	beq.n	80069b0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	699a      	ldr	r2, [r3, #24]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	18d1      	adds	r1, r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	6978      	ldr	r0, [r7, #20]
 8006976:	f000 f8d5 	bl	8006b24 <prvInsertTimerInActiveList>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d020      	beq.n	80069c2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006980:	2300      	movs	r3, #0
 8006982:	9300      	str	r3, [sp, #0]
 8006984:	2300      	movs	r3, #0
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	2100      	movs	r1, #0
 800698a:	6978      	ldr	r0, [r7, #20]
 800698c:	f7ff ff88 	bl	80068a0 <xTimerGenericCommand>
 8006990:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d114      	bne.n	80069c2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800699c:	f383 8811 	msr	BASEPRI, r3
 80069a0:	f3bf 8f6f 	isb	sy
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	60fb      	str	r3, [r7, #12]
}
 80069aa:	bf00      	nop
 80069ac:	bf00      	nop
 80069ae:	e7fd      	b.n	80069ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069b6:	f023 0301 	bic.w	r3, r3, #1
 80069ba:	b2da      	uxtb	r2, r3
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	6978      	ldr	r0, [r7, #20]
 80069c8:	4798      	blx	r3
}
 80069ca:	bf00      	nop
 80069cc:	3718      	adds	r7, #24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	20000f04 	.word	0x20000f04

080069d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069e0:	f107 0308 	add.w	r3, r7, #8
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 f859 	bl	8006a9c <prvGetNextExpireTime>
 80069ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	4619      	mov	r1, r3
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f000 f805 	bl	8006a00 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80069f6:	f000 f8d7 	bl	8006ba8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069fa:	bf00      	nop
 80069fc:	e7f0      	b.n	80069e0 <prvTimerTask+0x8>
	...

08006a00 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a0a:	f7ff fa29 	bl	8005e60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a0e:	f107 0308 	add.w	r3, r7, #8
 8006a12:	4618      	mov	r0, r3
 8006a14:	f000 f866 	bl	8006ae4 <prvSampleTimeNow>
 8006a18:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d130      	bne.n	8006a82 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10a      	bne.n	8006a3c <prvProcessTimerOrBlockTask+0x3c>
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d806      	bhi.n	8006a3c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006a2e:	f7ff fa25 	bl	8005e7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a32:	68f9      	ldr	r1, [r7, #12]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f7ff ff81 	bl	800693c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a3a:	e024      	b.n	8006a86 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d008      	beq.n	8006a54 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a42:	4b13      	ldr	r3, [pc, #76]	@ (8006a90 <prvProcessTimerOrBlockTask+0x90>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d101      	bne.n	8006a50 <prvProcessTimerOrBlockTask+0x50>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e000      	b.n	8006a52 <prvProcessTimerOrBlockTask+0x52>
 8006a50:	2300      	movs	r3, #0
 8006a52:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a54:	4b0f      	ldr	r3, [pc, #60]	@ (8006a94 <prvProcessTimerOrBlockTask+0x94>)
 8006a56:	6818      	ldr	r0, [r3, #0]
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	683a      	ldr	r2, [r7, #0]
 8006a60:	4619      	mov	r1, r3
 8006a62:	f7fe ff65 	bl	8005930 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a66:	f7ff fa09 	bl	8005e7c <xTaskResumeAll>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10a      	bne.n	8006a86 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006a70:	4b09      	ldr	r3, [pc, #36]	@ (8006a98 <prvProcessTimerOrBlockTask+0x98>)
 8006a72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	f3bf 8f6f 	isb	sy
}
 8006a80:	e001      	b.n	8006a86 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006a82:	f7ff f9fb 	bl	8005e7c <xTaskResumeAll>
}
 8006a86:	bf00      	nop
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	20000f08 	.word	0x20000f08
 8006a94:	20000f0c 	.word	0x20000f0c
 8006a98:	e000ed04 	.word	0xe000ed04

08006a9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8006ae0 <prvGetNextExpireTime+0x44>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <prvGetNextExpireTime+0x16>
 8006aae:	2201      	movs	r2, #1
 8006ab0:	e000      	b.n	8006ab4 <prvGetNextExpireTime+0x18>
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d105      	bne.n	8006acc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ac0:	4b07      	ldr	r3, [pc, #28]	@ (8006ae0 <prvGetNextExpireTime+0x44>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	60fb      	str	r3, [r7, #12]
 8006aca:	e001      	b.n	8006ad0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006acc:	2300      	movs	r3, #0
 8006ace:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	20000f04 	.word	0x20000f04

08006ae4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006aec:	f7ff fa64 	bl	8005fb8 <xTaskGetTickCount>
 8006af0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006af2:	4b0b      	ldr	r3, [pc, #44]	@ (8006b20 <prvSampleTimeNow+0x3c>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d205      	bcs.n	8006b08 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006afc:	f000 f93a 	bl	8006d74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	601a      	str	r2, [r3, #0]
 8006b06:	e002      	b.n	8006b0e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b0e:	4a04      	ldr	r2, [pc, #16]	@ (8006b20 <prvSampleTimeNow+0x3c>)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b14:	68fb      	ldr	r3, [r7, #12]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	20000f14 	.word	0x20000f14

08006b24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
 8006b30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b32:	2300      	movs	r3, #0
 8006b34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d812      	bhi.n	8006b70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	1ad2      	subs	r2, r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d302      	bcc.n	8006b5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	617b      	str	r3, [r7, #20]
 8006b5c:	e01b      	b.n	8006b96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b5e:	4b10      	ldr	r3, [pc, #64]	@ (8006ba0 <prvInsertTimerInActiveList+0x7c>)
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	3304      	adds	r3, #4
 8006b66:	4619      	mov	r1, r3
 8006b68:	4610      	mov	r0, r2
 8006b6a:	f7fe f97c 	bl	8004e66 <vListInsert>
 8006b6e:	e012      	b.n	8006b96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d206      	bcs.n	8006b86 <prvInsertTimerInActiveList+0x62>
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d302      	bcc.n	8006b86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006b80:	2301      	movs	r3, #1
 8006b82:	617b      	str	r3, [r7, #20]
 8006b84:	e007      	b.n	8006b96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b86:	4b07      	ldr	r3, [pc, #28]	@ (8006ba4 <prvInsertTimerInActiveList+0x80>)
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	3304      	adds	r3, #4
 8006b8e:	4619      	mov	r1, r3
 8006b90:	4610      	mov	r0, r2
 8006b92:	f7fe f968 	bl	8004e66 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006b96:	697b      	ldr	r3, [r7, #20]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3718      	adds	r7, #24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	20000f08 	.word	0x20000f08
 8006ba4:	20000f04 	.word	0x20000f04

08006ba8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08e      	sub	sp, #56	@ 0x38
 8006bac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006bae:	e0ce      	b.n	8006d4e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	da19      	bge.n	8006bea <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006bb6:	1d3b      	adds	r3, r7, #4
 8006bb8:	3304      	adds	r3, #4
 8006bba:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10b      	bne.n	8006bda <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	61fb      	str	r3, [r7, #28]
}
 8006bd4:	bf00      	nop
 8006bd6:	bf00      	nop
 8006bd8:	e7fd      	b.n	8006bd6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006be0:	6850      	ldr	r0, [r2, #4]
 8006be2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006be4:	6892      	ldr	r2, [r2, #8]
 8006be6:	4611      	mov	r1, r2
 8006be8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f2c0 80ae 	blt.w	8006d4e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d004      	beq.n	8006c08 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c00:	3304      	adds	r3, #4
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fe f968 	bl	8004ed8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c08:	463b      	mov	r3, r7
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7ff ff6a 	bl	8006ae4 <prvSampleTimeNow>
 8006c10:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2b09      	cmp	r3, #9
 8006c16:	f200 8097 	bhi.w	8006d48 <prvProcessReceivedCommands+0x1a0>
 8006c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c20 <prvProcessReceivedCommands+0x78>)
 8006c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c20:	08006c49 	.word	0x08006c49
 8006c24:	08006c49 	.word	0x08006c49
 8006c28:	08006c49 	.word	0x08006c49
 8006c2c:	08006cbf 	.word	0x08006cbf
 8006c30:	08006cd3 	.word	0x08006cd3
 8006c34:	08006d1f 	.word	0x08006d1f
 8006c38:	08006c49 	.word	0x08006c49
 8006c3c:	08006c49 	.word	0x08006c49
 8006c40:	08006cbf 	.word	0x08006cbf
 8006c44:	08006cd3 	.word	0x08006cd3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c4e:	f043 0301 	orr.w	r3, r3, #1
 8006c52:	b2da      	uxtb	r2, r3
 8006c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	18d1      	adds	r1, r2, r3
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c68:	f7ff ff5c 	bl	8006b24 <prvInsertTimerInActiveList>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d06c      	beq.n	8006d4c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c78:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c80:	f003 0304 	and.w	r3, r3, #4
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d061      	beq.n	8006d4c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	441a      	add	r2, r3
 8006c90:	2300      	movs	r3, #0
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	2300      	movs	r3, #0
 8006c96:	2100      	movs	r1, #0
 8006c98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c9a:	f7ff fe01 	bl	80068a0 <xTimerGenericCommand>
 8006c9e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006ca0:	6a3b      	ldr	r3, [r7, #32]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d152      	bne.n	8006d4c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006caa:	f383 8811 	msr	BASEPRI, r3
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	61bb      	str	r3, [r7, #24]
}
 8006cb8:	bf00      	nop
 8006cba:	bf00      	nop
 8006cbc:	e7fd      	b.n	8006cba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cc4:	f023 0301 	bic.w	r3, r3, #1
 8006cc8:	b2da      	uxtb	r2, r3
 8006cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ccc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006cd0:	e03d      	b.n	8006d4e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cd8:	f043 0301 	orr.w	r3, r3, #1
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006ce4:	68ba      	ldr	r2, [r7, #8]
 8006ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10b      	bne.n	8006d0a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	617b      	str	r3, [r7, #20]
}
 8006d04:	bf00      	nop
 8006d06:	bf00      	nop
 8006d08:	e7fd      	b.n	8006d06 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d0c:	699a      	ldr	r2, [r3, #24]
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d10:	18d1      	adds	r1, r2, r3
 8006d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d18:	f7ff ff04 	bl	8006b24 <prvInsertTimerInActiveList>
					break;
 8006d1c:	e017      	b.n	8006d4e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d24:	f003 0302 	and.w	r3, r3, #2
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d103      	bne.n	8006d34 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006d2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d2e:	f000 fbeb 	bl	8007508 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d32:	e00c      	b.n	8006d4e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d3a:	f023 0301 	bic.w	r3, r3, #1
 8006d3e:	b2da      	uxtb	r2, r3
 8006d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006d46:	e002      	b.n	8006d4e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006d48:	bf00      	nop
 8006d4a:	e000      	b.n	8006d4e <prvProcessReceivedCommands+0x1a6>
					break;
 8006d4c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d4e:	4b08      	ldr	r3, [pc, #32]	@ (8006d70 <prvProcessReceivedCommands+0x1c8>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	1d39      	adds	r1, r7, #4
 8006d54:	2200      	movs	r2, #0
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fe fbce 	bl	80054f8 <xQueueReceive>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f47f af26 	bne.w	8006bb0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006d64:	bf00      	nop
 8006d66:	bf00      	nop
 8006d68:	3730      	adds	r7, #48	@ 0x30
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	20000f0c 	.word	0x20000f0c

08006d74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b088      	sub	sp, #32
 8006d78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d7a:	e049      	b.n	8006e10 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d7c:	4b2e      	ldr	r3, [pc, #184]	@ (8006e38 <prvSwitchTimerLists+0xc4>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d86:	4b2c      	ldr	r3, [pc, #176]	@ (8006e38 <prvSwitchTimerLists+0xc4>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	3304      	adds	r3, #4
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7fe f89f 	bl	8004ed8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d02f      	beq.n	8006e10 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	4413      	add	r3, r2
 8006db8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d90e      	bls.n	8006de0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	68ba      	ldr	r2, [r7, #8]
 8006dc6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006dce:	4b1a      	ldr	r3, [pc, #104]	@ (8006e38 <prvSwitchTimerLists+0xc4>)
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	4610      	mov	r0, r2
 8006dda:	f7fe f844 	bl	8004e66 <vListInsert>
 8006dde:	e017      	b.n	8006e10 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006de0:	2300      	movs	r3, #0
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	2300      	movs	r3, #0
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	2100      	movs	r1, #0
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f7ff fd58 	bl	80068a0 <xTimerGenericCommand>
 8006df0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10b      	bne.n	8006e10 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dfc:	f383 8811 	msr	BASEPRI, r3
 8006e00:	f3bf 8f6f 	isb	sy
 8006e04:	f3bf 8f4f 	dsb	sy
 8006e08:	603b      	str	r3, [r7, #0]
}
 8006e0a:	bf00      	nop
 8006e0c:	bf00      	nop
 8006e0e:	e7fd      	b.n	8006e0c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e10:	4b09      	ldr	r3, [pc, #36]	@ (8006e38 <prvSwitchTimerLists+0xc4>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1b0      	bne.n	8006d7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e1a:	4b07      	ldr	r3, [pc, #28]	@ (8006e38 <prvSwitchTimerLists+0xc4>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e20:	4b06      	ldr	r3, [pc, #24]	@ (8006e3c <prvSwitchTimerLists+0xc8>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a04      	ldr	r2, [pc, #16]	@ (8006e38 <prvSwitchTimerLists+0xc4>)
 8006e26:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e28:	4a04      	ldr	r2, [pc, #16]	@ (8006e3c <prvSwitchTimerLists+0xc8>)
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	6013      	str	r3, [r2, #0]
}
 8006e2e:	bf00      	nop
 8006e30:	3718      	adds	r7, #24
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	20000f04 	.word	0x20000f04
 8006e3c:	20000f08 	.word	0x20000f08

08006e40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e46:	f000 f96f 	bl	8007128 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e4a:	4b15      	ldr	r3, [pc, #84]	@ (8006ea0 <prvCheckForValidListAndQueue+0x60>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d120      	bne.n	8006e94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e52:	4814      	ldr	r0, [pc, #80]	@ (8006ea4 <prvCheckForValidListAndQueue+0x64>)
 8006e54:	f7fd ffb6 	bl	8004dc4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e58:	4813      	ldr	r0, [pc, #76]	@ (8006ea8 <prvCheckForValidListAndQueue+0x68>)
 8006e5a:	f7fd ffb3 	bl	8004dc4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e5e:	4b13      	ldr	r3, [pc, #76]	@ (8006eac <prvCheckForValidListAndQueue+0x6c>)
 8006e60:	4a10      	ldr	r2, [pc, #64]	@ (8006ea4 <prvCheckForValidListAndQueue+0x64>)
 8006e62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e64:	4b12      	ldr	r3, [pc, #72]	@ (8006eb0 <prvCheckForValidListAndQueue+0x70>)
 8006e66:	4a10      	ldr	r2, [pc, #64]	@ (8006ea8 <prvCheckForValidListAndQueue+0x68>)
 8006e68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	9300      	str	r3, [sp, #0]
 8006e6e:	4b11      	ldr	r3, [pc, #68]	@ (8006eb4 <prvCheckForValidListAndQueue+0x74>)
 8006e70:	4a11      	ldr	r2, [pc, #68]	@ (8006eb8 <prvCheckForValidListAndQueue+0x78>)
 8006e72:	2110      	movs	r1, #16
 8006e74:	200a      	movs	r0, #10
 8006e76:	f7fe f8c3 	bl	8005000 <xQueueGenericCreateStatic>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	4a08      	ldr	r2, [pc, #32]	@ (8006ea0 <prvCheckForValidListAndQueue+0x60>)
 8006e7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e80:	4b07      	ldr	r3, [pc, #28]	@ (8006ea0 <prvCheckForValidListAndQueue+0x60>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d005      	beq.n	8006e94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e88:	4b05      	ldr	r3, [pc, #20]	@ (8006ea0 <prvCheckForValidListAndQueue+0x60>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	490b      	ldr	r1, [pc, #44]	@ (8006ebc <prvCheckForValidListAndQueue+0x7c>)
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7fe fd24 	bl	80058dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e94:	f000 f97a 	bl	800718c <vPortExitCritical>
}
 8006e98:	bf00      	nop
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	20000f0c 	.word	0x20000f0c
 8006ea4:	20000edc 	.word	0x20000edc
 8006ea8:	20000ef0 	.word	0x20000ef0
 8006eac:	20000f04 	.word	0x20000f04
 8006eb0:	20000f08 	.word	0x20000f08
 8006eb4:	20000fb8 	.word	0x20000fb8
 8006eb8:	20000f18 	.word	0x20000f18
 8006ebc:	08008a30 	.word	0x08008a30

08006ec0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	3b04      	subs	r3, #4
 8006ed0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ed8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	3b04      	subs	r3, #4
 8006ede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	f023 0201 	bic.w	r2, r3, #1
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	3b04      	subs	r3, #4
 8006eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ef0:	4a0c      	ldr	r2, [pc, #48]	@ (8006f24 <pxPortInitialiseStack+0x64>)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3b14      	subs	r3, #20
 8006efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	3b04      	subs	r3, #4
 8006f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f06f 0202 	mvn.w	r2, #2
 8006f0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	3b20      	subs	r3, #32
 8006f14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f16:	68fb      	ldr	r3, [r7, #12]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr
 8006f24:	08006f29 	.word	0x08006f29

08006f28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f32:	4b13      	ldr	r3, [pc, #76]	@ (8006f80 <prvTaskExitError+0x58>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f3a:	d00b      	beq.n	8006f54 <prvTaskExitError+0x2c>
	__asm volatile
 8006f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f40:	f383 8811 	msr	BASEPRI, r3
 8006f44:	f3bf 8f6f 	isb	sy
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	60fb      	str	r3, [r7, #12]
}
 8006f4e:	bf00      	nop
 8006f50:	bf00      	nop
 8006f52:	e7fd      	b.n	8006f50 <prvTaskExitError+0x28>
	__asm volatile
 8006f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f58:	f383 8811 	msr	BASEPRI, r3
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	60bb      	str	r3, [r7, #8]
}
 8006f66:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f68:	bf00      	nop
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d0fc      	beq.n	8006f6a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f70:	bf00      	nop
 8006f72:	bf00      	nop
 8006f74:	3714      	adds	r7, #20
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	20000020 	.word	0x20000020
	...

08006f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f90:	4b07      	ldr	r3, [pc, #28]	@ (8006fb0 <pxCurrentTCBConst2>)
 8006f92:	6819      	ldr	r1, [r3, #0]
 8006f94:	6808      	ldr	r0, [r1, #0]
 8006f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f9a:	f380 8809 	msr	PSP, r0
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	f04f 0000 	mov.w	r0, #0
 8006fa6:	f380 8811 	msr	BASEPRI, r0
 8006faa:	4770      	bx	lr
 8006fac:	f3af 8000 	nop.w

08006fb0 <pxCurrentTCBConst2>:
 8006fb0:	200009dc 	.word	0x200009dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006fb4:	bf00      	nop
 8006fb6:	bf00      	nop

08006fb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006fb8:	4808      	ldr	r0, [pc, #32]	@ (8006fdc <prvPortStartFirstTask+0x24>)
 8006fba:	6800      	ldr	r0, [r0, #0]
 8006fbc:	6800      	ldr	r0, [r0, #0]
 8006fbe:	f380 8808 	msr	MSP, r0
 8006fc2:	f04f 0000 	mov.w	r0, #0
 8006fc6:	f380 8814 	msr	CONTROL, r0
 8006fca:	b662      	cpsie	i
 8006fcc:	b661      	cpsie	f
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	df00      	svc	0
 8006fd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006fda:	bf00      	nop
 8006fdc:	e000ed08 	.word	0xe000ed08

08006fe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006fe6:	4b47      	ldr	r3, [pc, #284]	@ (8007104 <xPortStartScheduler+0x124>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a47      	ldr	r2, [pc, #284]	@ (8007108 <xPortStartScheduler+0x128>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d10b      	bne.n	8007008 <xPortStartScheduler+0x28>
	__asm volatile
 8006ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff4:	f383 8811 	msr	BASEPRI, r3
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	60fb      	str	r3, [r7, #12]
}
 8007002:	bf00      	nop
 8007004:	bf00      	nop
 8007006:	e7fd      	b.n	8007004 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007008:	4b3e      	ldr	r3, [pc, #248]	@ (8007104 <xPortStartScheduler+0x124>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a3f      	ldr	r2, [pc, #252]	@ (800710c <xPortStartScheduler+0x12c>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d10b      	bne.n	800702a <xPortStartScheduler+0x4a>
	__asm volatile
 8007012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	613b      	str	r3, [r7, #16]
}
 8007024:	bf00      	nop
 8007026:	bf00      	nop
 8007028:	e7fd      	b.n	8007026 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800702a:	4b39      	ldr	r3, [pc, #228]	@ (8007110 <xPortStartScheduler+0x130>)
 800702c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	b2db      	uxtb	r3, r3
 8007034:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	22ff      	movs	r2, #255	@ 0xff
 800703a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	b2db      	uxtb	r3, r3
 8007042:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007044:	78fb      	ldrb	r3, [r7, #3]
 8007046:	b2db      	uxtb	r3, r3
 8007048:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800704c:	b2da      	uxtb	r2, r3
 800704e:	4b31      	ldr	r3, [pc, #196]	@ (8007114 <xPortStartScheduler+0x134>)
 8007050:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007052:	4b31      	ldr	r3, [pc, #196]	@ (8007118 <xPortStartScheduler+0x138>)
 8007054:	2207      	movs	r2, #7
 8007056:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007058:	e009      	b.n	800706e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800705a:	4b2f      	ldr	r3, [pc, #188]	@ (8007118 <xPortStartScheduler+0x138>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	3b01      	subs	r3, #1
 8007060:	4a2d      	ldr	r2, [pc, #180]	@ (8007118 <xPortStartScheduler+0x138>)
 8007062:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007064:	78fb      	ldrb	r3, [r7, #3]
 8007066:	b2db      	uxtb	r3, r3
 8007068:	005b      	lsls	r3, r3, #1
 800706a:	b2db      	uxtb	r3, r3
 800706c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800706e:	78fb      	ldrb	r3, [r7, #3]
 8007070:	b2db      	uxtb	r3, r3
 8007072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007076:	2b80      	cmp	r3, #128	@ 0x80
 8007078:	d0ef      	beq.n	800705a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800707a:	4b27      	ldr	r3, [pc, #156]	@ (8007118 <xPortStartScheduler+0x138>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f1c3 0307 	rsb	r3, r3, #7
 8007082:	2b04      	cmp	r3, #4
 8007084:	d00b      	beq.n	800709e <xPortStartScheduler+0xbe>
	__asm volatile
 8007086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800708a:	f383 8811 	msr	BASEPRI, r3
 800708e:	f3bf 8f6f 	isb	sy
 8007092:	f3bf 8f4f 	dsb	sy
 8007096:	60bb      	str	r3, [r7, #8]
}
 8007098:	bf00      	nop
 800709a:	bf00      	nop
 800709c:	e7fd      	b.n	800709a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800709e:	4b1e      	ldr	r3, [pc, #120]	@ (8007118 <xPortStartScheduler+0x138>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	021b      	lsls	r3, r3, #8
 80070a4:	4a1c      	ldr	r2, [pc, #112]	@ (8007118 <xPortStartScheduler+0x138>)
 80070a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80070a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007118 <xPortStartScheduler+0x138>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80070b0:	4a19      	ldr	r2, [pc, #100]	@ (8007118 <xPortStartScheduler+0x138>)
 80070b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	b2da      	uxtb	r2, r3
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80070bc:	4b17      	ldr	r3, [pc, #92]	@ (800711c <xPortStartScheduler+0x13c>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a16      	ldr	r2, [pc, #88]	@ (800711c <xPortStartScheduler+0x13c>)
 80070c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80070c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80070c8:	4b14      	ldr	r3, [pc, #80]	@ (800711c <xPortStartScheduler+0x13c>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a13      	ldr	r2, [pc, #76]	@ (800711c <xPortStartScheduler+0x13c>)
 80070ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80070d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070d4:	f000 f8da 	bl	800728c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070d8:	4b11      	ldr	r3, [pc, #68]	@ (8007120 <xPortStartScheduler+0x140>)
 80070da:	2200      	movs	r2, #0
 80070dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80070de:	f000 f8f9 	bl	80072d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80070e2:	4b10      	ldr	r3, [pc, #64]	@ (8007124 <xPortStartScheduler+0x144>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a0f      	ldr	r2, [pc, #60]	@ (8007124 <xPortStartScheduler+0x144>)
 80070e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80070ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070ee:	f7ff ff63 	bl	8006fb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070f2:	f7ff f82b 	bl	800614c <vTaskSwitchContext>
	prvTaskExitError();
 80070f6:	f7ff ff17 	bl	8006f28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3718      	adds	r7, #24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	e000ed00 	.word	0xe000ed00
 8007108:	410fc271 	.word	0x410fc271
 800710c:	410fc270 	.word	0x410fc270
 8007110:	e000e400 	.word	0xe000e400
 8007114:	20001008 	.word	0x20001008
 8007118:	2000100c 	.word	0x2000100c
 800711c:	e000ed20 	.word	0xe000ed20
 8007120:	20000020 	.word	0x20000020
 8007124:	e000ef34 	.word	0xe000ef34

08007128 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
	__asm volatile
 800712e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007132:	f383 8811 	msr	BASEPRI, r3
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	607b      	str	r3, [r7, #4]
}
 8007140:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007142:	4b10      	ldr	r3, [pc, #64]	@ (8007184 <vPortEnterCritical+0x5c>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	3301      	adds	r3, #1
 8007148:	4a0e      	ldr	r2, [pc, #56]	@ (8007184 <vPortEnterCritical+0x5c>)
 800714a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800714c:	4b0d      	ldr	r3, [pc, #52]	@ (8007184 <vPortEnterCritical+0x5c>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d110      	bne.n	8007176 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007154:	4b0c      	ldr	r3, [pc, #48]	@ (8007188 <vPortEnterCritical+0x60>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00b      	beq.n	8007176 <vPortEnterCritical+0x4e>
	__asm volatile
 800715e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007162:	f383 8811 	msr	BASEPRI, r3
 8007166:	f3bf 8f6f 	isb	sy
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	603b      	str	r3, [r7, #0]
}
 8007170:	bf00      	nop
 8007172:	bf00      	nop
 8007174:	e7fd      	b.n	8007172 <vPortEnterCritical+0x4a>
	}
}
 8007176:	bf00      	nop
 8007178:	370c      	adds	r7, #12
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	20000020 	.word	0x20000020
 8007188:	e000ed04 	.word	0xe000ed04

0800718c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007192:	4b12      	ldr	r3, [pc, #72]	@ (80071dc <vPortExitCritical+0x50>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10b      	bne.n	80071b2 <vPortExitCritical+0x26>
	__asm volatile
 800719a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800719e:	f383 8811 	msr	BASEPRI, r3
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	607b      	str	r3, [r7, #4]
}
 80071ac:	bf00      	nop
 80071ae:	bf00      	nop
 80071b0:	e7fd      	b.n	80071ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80071b2:	4b0a      	ldr	r3, [pc, #40]	@ (80071dc <vPortExitCritical+0x50>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3b01      	subs	r3, #1
 80071b8:	4a08      	ldr	r2, [pc, #32]	@ (80071dc <vPortExitCritical+0x50>)
 80071ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071bc:	4b07      	ldr	r3, [pc, #28]	@ (80071dc <vPortExitCritical+0x50>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d105      	bne.n	80071d0 <vPortExitCritical+0x44>
 80071c4:	2300      	movs	r3, #0
 80071c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	f383 8811 	msr	BASEPRI, r3
}
 80071ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	20000020 	.word	0x20000020

080071e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071e0:	f3ef 8009 	mrs	r0, PSP
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	4b15      	ldr	r3, [pc, #84]	@ (8007240 <pxCurrentTCBConst>)
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	f01e 0f10 	tst.w	lr, #16
 80071f0:	bf08      	it	eq
 80071f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fa:	6010      	str	r0, [r2, #0]
 80071fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007200:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007204:	f380 8811 	msr	BASEPRI, r0
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	f7fe ff9c 	bl	800614c <vTaskSwitchContext>
 8007214:	f04f 0000 	mov.w	r0, #0
 8007218:	f380 8811 	msr	BASEPRI, r0
 800721c:	bc09      	pop	{r0, r3}
 800721e:	6819      	ldr	r1, [r3, #0]
 8007220:	6808      	ldr	r0, [r1, #0]
 8007222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007226:	f01e 0f10 	tst.w	lr, #16
 800722a:	bf08      	it	eq
 800722c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007230:	f380 8809 	msr	PSP, r0
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	f3af 8000 	nop.w

08007240 <pxCurrentTCBConst>:
 8007240:	200009dc 	.word	0x200009dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007244:	bf00      	nop
 8007246:	bf00      	nop

08007248 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
	__asm volatile
 800724e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	607b      	str	r3, [r7, #4]
}
 8007260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007262:	f7fe feb9 	bl	8005fd8 <xTaskIncrementTick>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d003      	beq.n	8007274 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800726c:	4b06      	ldr	r3, [pc, #24]	@ (8007288 <xPortSysTickHandler+0x40>)
 800726e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007272:	601a      	str	r2, [r3, #0]
 8007274:	2300      	movs	r3, #0
 8007276:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	f383 8811 	msr	BASEPRI, r3
}
 800727e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007280:	bf00      	nop
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	e000ed04 	.word	0xe000ed04

0800728c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800728c:	b480      	push	{r7}
 800728e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007290:	4b0b      	ldr	r3, [pc, #44]	@ (80072c0 <vPortSetupTimerInterrupt+0x34>)
 8007292:	2200      	movs	r2, #0
 8007294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007296:	4b0b      	ldr	r3, [pc, #44]	@ (80072c4 <vPortSetupTimerInterrupt+0x38>)
 8007298:	2200      	movs	r2, #0
 800729a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800729c:	4b0a      	ldr	r3, [pc, #40]	@ (80072c8 <vPortSetupTimerInterrupt+0x3c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a0a      	ldr	r2, [pc, #40]	@ (80072cc <vPortSetupTimerInterrupt+0x40>)
 80072a2:	fba2 2303 	umull	r2, r3, r2, r3
 80072a6:	099b      	lsrs	r3, r3, #6
 80072a8:	4a09      	ldr	r2, [pc, #36]	@ (80072d0 <vPortSetupTimerInterrupt+0x44>)
 80072aa:	3b01      	subs	r3, #1
 80072ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80072ae:	4b04      	ldr	r3, [pc, #16]	@ (80072c0 <vPortSetupTimerInterrupt+0x34>)
 80072b0:	2207      	movs	r2, #7
 80072b2:	601a      	str	r2, [r3, #0]
}
 80072b4:	bf00      	nop
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	e000e010 	.word	0xe000e010
 80072c4:	e000e018 	.word	0xe000e018
 80072c8:	20000008 	.word	0x20000008
 80072cc:	10624dd3 	.word	0x10624dd3
 80072d0:	e000e014 	.word	0xe000e014

080072d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80072d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80072e4 <vPortEnableVFP+0x10>
 80072d8:	6801      	ldr	r1, [r0, #0]
 80072da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80072de:	6001      	str	r1, [r0, #0]
 80072e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80072e2:	bf00      	nop
 80072e4:	e000ed88 	.word	0xe000ed88

080072e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80072ee:	f3ef 8305 	mrs	r3, IPSR
 80072f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2b0f      	cmp	r3, #15
 80072f8:	d915      	bls.n	8007326 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80072fa:	4a18      	ldr	r2, [pc, #96]	@ (800735c <vPortValidateInterruptPriority+0x74>)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	4413      	add	r3, r2
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007304:	4b16      	ldr	r3, [pc, #88]	@ (8007360 <vPortValidateInterruptPriority+0x78>)
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	7afa      	ldrb	r2, [r7, #11]
 800730a:	429a      	cmp	r2, r3
 800730c:	d20b      	bcs.n	8007326 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800730e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007312:	f383 8811 	msr	BASEPRI, r3
 8007316:	f3bf 8f6f 	isb	sy
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	607b      	str	r3, [r7, #4]
}
 8007320:	bf00      	nop
 8007322:	bf00      	nop
 8007324:	e7fd      	b.n	8007322 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007326:	4b0f      	ldr	r3, [pc, #60]	@ (8007364 <vPortValidateInterruptPriority+0x7c>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800732e:	4b0e      	ldr	r3, [pc, #56]	@ (8007368 <vPortValidateInterruptPriority+0x80>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	429a      	cmp	r2, r3
 8007334:	d90b      	bls.n	800734e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800733a:	f383 8811 	msr	BASEPRI, r3
 800733e:	f3bf 8f6f 	isb	sy
 8007342:	f3bf 8f4f 	dsb	sy
 8007346:	603b      	str	r3, [r7, #0]
}
 8007348:	bf00      	nop
 800734a:	bf00      	nop
 800734c:	e7fd      	b.n	800734a <vPortValidateInterruptPriority+0x62>
	}
 800734e:	bf00      	nop
 8007350:	3714      	adds	r7, #20
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	e000e3f0 	.word	0xe000e3f0
 8007360:	20001008 	.word	0x20001008
 8007364:	e000ed0c 	.word	0xe000ed0c
 8007368:	2000100c 	.word	0x2000100c

0800736c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b08a      	sub	sp, #40	@ 0x28
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007374:	2300      	movs	r3, #0
 8007376:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007378:	f7fe fd72 	bl	8005e60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800737c:	4b5c      	ldr	r3, [pc, #368]	@ (80074f0 <pvPortMalloc+0x184>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d101      	bne.n	8007388 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007384:	f000 f924 	bl	80075d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007388:	4b5a      	ldr	r3, [pc, #360]	@ (80074f4 <pvPortMalloc+0x188>)
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4013      	ands	r3, r2
 8007390:	2b00      	cmp	r3, #0
 8007392:	f040 8095 	bne.w	80074c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d01e      	beq.n	80073da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800739c:	2208      	movs	r2, #8
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4413      	add	r3, r2
 80073a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f003 0307 	and.w	r3, r3, #7
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d015      	beq.n	80073da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f023 0307 	bic.w	r3, r3, #7
 80073b4:	3308      	adds	r3, #8
 80073b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f003 0307 	and.w	r3, r3, #7
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00b      	beq.n	80073da <pvPortMalloc+0x6e>
	__asm volatile
 80073c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c6:	f383 8811 	msr	BASEPRI, r3
 80073ca:	f3bf 8f6f 	isb	sy
 80073ce:	f3bf 8f4f 	dsb	sy
 80073d2:	617b      	str	r3, [r7, #20]
}
 80073d4:	bf00      	nop
 80073d6:	bf00      	nop
 80073d8:	e7fd      	b.n	80073d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d06f      	beq.n	80074c0 <pvPortMalloc+0x154>
 80073e0:	4b45      	ldr	r3, [pc, #276]	@ (80074f8 <pvPortMalloc+0x18c>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d86a      	bhi.n	80074c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80073ea:	4b44      	ldr	r3, [pc, #272]	@ (80074fc <pvPortMalloc+0x190>)
 80073ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80073ee:	4b43      	ldr	r3, [pc, #268]	@ (80074fc <pvPortMalloc+0x190>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073f4:	e004      	b.n	8007400 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80073f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80073fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	429a      	cmp	r2, r3
 8007408:	d903      	bls.n	8007412 <pvPortMalloc+0xa6>
 800740a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1f1      	bne.n	80073f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007412:	4b37      	ldr	r3, [pc, #220]	@ (80074f0 <pvPortMalloc+0x184>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007418:	429a      	cmp	r2, r3
 800741a:	d051      	beq.n	80074c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800741c:	6a3b      	ldr	r3, [r7, #32]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2208      	movs	r2, #8
 8007422:	4413      	add	r3, r2
 8007424:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	6a3b      	ldr	r3, [r7, #32]
 800742c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800742e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007430:	685a      	ldr	r2, [r3, #4]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	1ad2      	subs	r2, r2, r3
 8007436:	2308      	movs	r3, #8
 8007438:	005b      	lsls	r3, r3, #1
 800743a:	429a      	cmp	r2, r3
 800743c:	d920      	bls.n	8007480 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800743e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4413      	add	r3, r2
 8007444:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	f003 0307 	and.w	r3, r3, #7
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00b      	beq.n	8007468 <pvPortMalloc+0xfc>
	__asm volatile
 8007450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	613b      	str	r3, [r7, #16]
}
 8007462:	bf00      	nop
 8007464:	bf00      	nop
 8007466:	e7fd      	b.n	8007464 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746a:	685a      	ldr	r2, [r3, #4]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	1ad2      	subs	r2, r2, r3
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800747a:	69b8      	ldr	r0, [r7, #24]
 800747c:	f000 f90a 	bl	8007694 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007480:	4b1d      	ldr	r3, [pc, #116]	@ (80074f8 <pvPortMalloc+0x18c>)
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	4a1b      	ldr	r2, [pc, #108]	@ (80074f8 <pvPortMalloc+0x18c>)
 800748c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800748e:	4b1a      	ldr	r3, [pc, #104]	@ (80074f8 <pvPortMalloc+0x18c>)
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	4b1b      	ldr	r3, [pc, #108]	@ (8007500 <pvPortMalloc+0x194>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	429a      	cmp	r2, r3
 8007498:	d203      	bcs.n	80074a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800749a:	4b17      	ldr	r3, [pc, #92]	@ (80074f8 <pvPortMalloc+0x18c>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a18      	ldr	r2, [pc, #96]	@ (8007500 <pvPortMalloc+0x194>)
 80074a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80074a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a4:	685a      	ldr	r2, [r3, #4]
 80074a6:	4b13      	ldr	r3, [pc, #76]	@ (80074f4 <pvPortMalloc+0x188>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	431a      	orrs	r2, r3
 80074ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80074b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b2:	2200      	movs	r2, #0
 80074b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80074b6:	4b13      	ldr	r3, [pc, #76]	@ (8007504 <pvPortMalloc+0x198>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	3301      	adds	r3, #1
 80074bc:	4a11      	ldr	r2, [pc, #68]	@ (8007504 <pvPortMalloc+0x198>)
 80074be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80074c0:	f7fe fcdc 	bl	8005e7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	f003 0307 	and.w	r3, r3, #7
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00b      	beq.n	80074e6 <pvPortMalloc+0x17a>
	__asm volatile
 80074ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	60fb      	str	r3, [r7, #12]
}
 80074e0:	bf00      	nop
 80074e2:	bf00      	nop
 80074e4:	e7fd      	b.n	80074e2 <pvPortMalloc+0x176>
	return pvReturn;
 80074e6:	69fb      	ldr	r3, [r7, #28]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3728      	adds	r7, #40	@ 0x28
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	20001c18 	.word	0x20001c18
 80074f4:	20001c2c 	.word	0x20001c2c
 80074f8:	20001c1c 	.word	0x20001c1c
 80074fc:	20001c10 	.word	0x20001c10
 8007500:	20001c20 	.word	0x20001c20
 8007504:	20001c24 	.word	0x20001c24

08007508 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d04f      	beq.n	80075ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800751a:	2308      	movs	r3, #8
 800751c:	425b      	negs	r3, r3
 800751e:	697a      	ldr	r2, [r7, #20]
 8007520:	4413      	add	r3, r2
 8007522:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	4b25      	ldr	r3, [pc, #148]	@ (80075c4 <vPortFree+0xbc>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4013      	ands	r3, r2
 8007532:	2b00      	cmp	r3, #0
 8007534:	d10b      	bne.n	800754e <vPortFree+0x46>
	__asm volatile
 8007536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800753a:	f383 8811 	msr	BASEPRI, r3
 800753e:	f3bf 8f6f 	isb	sy
 8007542:	f3bf 8f4f 	dsb	sy
 8007546:	60fb      	str	r3, [r7, #12]
}
 8007548:	bf00      	nop
 800754a:	bf00      	nop
 800754c:	e7fd      	b.n	800754a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00b      	beq.n	800756e <vPortFree+0x66>
	__asm volatile
 8007556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800755a:	f383 8811 	msr	BASEPRI, r3
 800755e:	f3bf 8f6f 	isb	sy
 8007562:	f3bf 8f4f 	dsb	sy
 8007566:	60bb      	str	r3, [r7, #8]
}
 8007568:	bf00      	nop
 800756a:	bf00      	nop
 800756c:	e7fd      	b.n	800756a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	685a      	ldr	r2, [r3, #4]
 8007572:	4b14      	ldr	r3, [pc, #80]	@ (80075c4 <vPortFree+0xbc>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4013      	ands	r3, r2
 8007578:	2b00      	cmp	r3, #0
 800757a:	d01e      	beq.n	80075ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d11a      	bne.n	80075ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	4b0e      	ldr	r3, [pc, #56]	@ (80075c4 <vPortFree+0xbc>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	43db      	mvns	r3, r3
 800758e:	401a      	ands	r2, r3
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007594:	f7fe fc64 	bl	8005e60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	685a      	ldr	r2, [r3, #4]
 800759c:	4b0a      	ldr	r3, [pc, #40]	@ (80075c8 <vPortFree+0xc0>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4413      	add	r3, r2
 80075a2:	4a09      	ldr	r2, [pc, #36]	@ (80075c8 <vPortFree+0xc0>)
 80075a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80075a6:	6938      	ldr	r0, [r7, #16]
 80075a8:	f000 f874 	bl	8007694 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80075ac:	4b07      	ldr	r3, [pc, #28]	@ (80075cc <vPortFree+0xc4>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	3301      	adds	r3, #1
 80075b2:	4a06      	ldr	r2, [pc, #24]	@ (80075cc <vPortFree+0xc4>)
 80075b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80075b6:	f7fe fc61 	bl	8005e7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80075ba:	bf00      	nop
 80075bc:	3718      	adds	r7, #24
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	20001c2c 	.word	0x20001c2c
 80075c8:	20001c1c 	.word	0x20001c1c
 80075cc:	20001c28 	.word	0x20001c28

080075d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80075d6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80075da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80075dc:	4b27      	ldr	r3, [pc, #156]	@ (800767c <prvHeapInit+0xac>)
 80075de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f003 0307 	and.w	r3, r3, #7
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00c      	beq.n	8007604 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	3307      	adds	r3, #7
 80075ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f023 0307 	bic.w	r3, r3, #7
 80075f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	4a1f      	ldr	r2, [pc, #124]	@ (800767c <prvHeapInit+0xac>)
 8007600:	4413      	add	r3, r2
 8007602:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007608:	4a1d      	ldr	r2, [pc, #116]	@ (8007680 <prvHeapInit+0xb0>)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800760e:	4b1c      	ldr	r3, [pc, #112]	@ (8007680 <prvHeapInit+0xb0>)
 8007610:	2200      	movs	r2, #0
 8007612:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	68ba      	ldr	r2, [r7, #8]
 8007618:	4413      	add	r3, r2
 800761a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800761c:	2208      	movs	r2, #8
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	1a9b      	subs	r3, r3, r2
 8007622:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f023 0307 	bic.w	r3, r3, #7
 800762a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	4a15      	ldr	r2, [pc, #84]	@ (8007684 <prvHeapInit+0xb4>)
 8007630:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007632:	4b14      	ldr	r3, [pc, #80]	@ (8007684 <prvHeapInit+0xb4>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2200      	movs	r2, #0
 8007638:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800763a:	4b12      	ldr	r3, [pc, #72]	@ (8007684 <prvHeapInit+0xb4>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2200      	movs	r2, #0
 8007640:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	1ad2      	subs	r2, r2, r3
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007650:	4b0c      	ldr	r3, [pc, #48]	@ (8007684 <prvHeapInit+0xb4>)
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	4a0a      	ldr	r2, [pc, #40]	@ (8007688 <prvHeapInit+0xb8>)
 800765e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	4a09      	ldr	r2, [pc, #36]	@ (800768c <prvHeapInit+0xbc>)
 8007666:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007668:	4b09      	ldr	r3, [pc, #36]	@ (8007690 <prvHeapInit+0xc0>)
 800766a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800766e:	601a      	str	r2, [r3, #0]
}
 8007670:	bf00      	nop
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	20001010 	.word	0x20001010
 8007680:	20001c10 	.word	0x20001c10
 8007684:	20001c18 	.word	0x20001c18
 8007688:	20001c20 	.word	0x20001c20
 800768c:	20001c1c 	.word	0x20001c1c
 8007690:	20001c2c 	.word	0x20001c2c

08007694 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800769c:	4b28      	ldr	r3, [pc, #160]	@ (8007740 <prvInsertBlockIntoFreeList+0xac>)
 800769e:	60fb      	str	r3, [r7, #12]
 80076a0:	e002      	b.n	80076a8 <prvInsertBlockIntoFreeList+0x14>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	60fb      	str	r3, [r7, #12]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d8f7      	bhi.n	80076a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	4413      	add	r3, r2
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d108      	bne.n	80076d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	685a      	ldr	r2, [r3, #4]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	441a      	add	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	441a      	add	r2, r3
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d118      	bne.n	800771c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	4b15      	ldr	r3, [pc, #84]	@ (8007744 <prvInsertBlockIntoFreeList+0xb0>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d00d      	beq.n	8007712 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	685a      	ldr	r2, [r3, #4]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	441a      	add	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	601a      	str	r2, [r3, #0]
 8007710:	e008      	b.n	8007724 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007712:	4b0c      	ldr	r3, [pc, #48]	@ (8007744 <prvInsertBlockIntoFreeList+0xb0>)
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	601a      	str	r2, [r3, #0]
 800771a:	e003      	b.n	8007724 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	429a      	cmp	r2, r3
 800772a:	d002      	beq.n	8007732 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007732:	bf00      	nop
 8007734:	3714      	adds	r7, #20
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop
 8007740:	20001c10 	.word	0x20001c10
 8007744:	20001c18 	.word	0x20001c18

08007748 <std>:
 8007748:	2300      	movs	r3, #0
 800774a:	b510      	push	{r4, lr}
 800774c:	4604      	mov	r4, r0
 800774e:	e9c0 3300 	strd	r3, r3, [r0]
 8007752:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007756:	6083      	str	r3, [r0, #8]
 8007758:	8181      	strh	r1, [r0, #12]
 800775a:	6643      	str	r3, [r0, #100]	@ 0x64
 800775c:	81c2      	strh	r2, [r0, #14]
 800775e:	6183      	str	r3, [r0, #24]
 8007760:	4619      	mov	r1, r3
 8007762:	2208      	movs	r2, #8
 8007764:	305c      	adds	r0, #92	@ 0x5c
 8007766:	f000 fa01 	bl	8007b6c <memset>
 800776a:	4b0d      	ldr	r3, [pc, #52]	@ (80077a0 <std+0x58>)
 800776c:	6263      	str	r3, [r4, #36]	@ 0x24
 800776e:	4b0d      	ldr	r3, [pc, #52]	@ (80077a4 <std+0x5c>)
 8007770:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007772:	4b0d      	ldr	r3, [pc, #52]	@ (80077a8 <std+0x60>)
 8007774:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007776:	4b0d      	ldr	r3, [pc, #52]	@ (80077ac <std+0x64>)
 8007778:	6323      	str	r3, [r4, #48]	@ 0x30
 800777a:	4b0d      	ldr	r3, [pc, #52]	@ (80077b0 <std+0x68>)
 800777c:	6224      	str	r4, [r4, #32]
 800777e:	429c      	cmp	r4, r3
 8007780:	d006      	beq.n	8007790 <std+0x48>
 8007782:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007786:	4294      	cmp	r4, r2
 8007788:	d002      	beq.n	8007790 <std+0x48>
 800778a:	33d0      	adds	r3, #208	@ 0xd0
 800778c:	429c      	cmp	r4, r3
 800778e:	d105      	bne.n	800779c <std+0x54>
 8007790:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007798:	f000 babe 	b.w	8007d18 <__retarget_lock_init_recursive>
 800779c:	bd10      	pop	{r4, pc}
 800779e:	bf00      	nop
 80077a0:	080079bd 	.word	0x080079bd
 80077a4:	080079df 	.word	0x080079df
 80077a8:	08007a17 	.word	0x08007a17
 80077ac:	08007a3b 	.word	0x08007a3b
 80077b0:	20001c30 	.word	0x20001c30

080077b4 <stdio_exit_handler>:
 80077b4:	4a02      	ldr	r2, [pc, #8]	@ (80077c0 <stdio_exit_handler+0xc>)
 80077b6:	4903      	ldr	r1, [pc, #12]	@ (80077c4 <stdio_exit_handler+0x10>)
 80077b8:	4803      	ldr	r0, [pc, #12]	@ (80077c8 <stdio_exit_handler+0x14>)
 80077ba:	f000 b869 	b.w	8007890 <_fwalk_sglue>
 80077be:	bf00      	nop
 80077c0:	20000024 	.word	0x20000024
 80077c4:	080085d1 	.word	0x080085d1
 80077c8:	20000034 	.word	0x20000034

080077cc <cleanup_stdio>:
 80077cc:	6841      	ldr	r1, [r0, #4]
 80077ce:	4b0c      	ldr	r3, [pc, #48]	@ (8007800 <cleanup_stdio+0x34>)
 80077d0:	4299      	cmp	r1, r3
 80077d2:	b510      	push	{r4, lr}
 80077d4:	4604      	mov	r4, r0
 80077d6:	d001      	beq.n	80077dc <cleanup_stdio+0x10>
 80077d8:	f000 fefa 	bl	80085d0 <_fflush_r>
 80077dc:	68a1      	ldr	r1, [r4, #8]
 80077de:	4b09      	ldr	r3, [pc, #36]	@ (8007804 <cleanup_stdio+0x38>)
 80077e0:	4299      	cmp	r1, r3
 80077e2:	d002      	beq.n	80077ea <cleanup_stdio+0x1e>
 80077e4:	4620      	mov	r0, r4
 80077e6:	f000 fef3 	bl	80085d0 <_fflush_r>
 80077ea:	68e1      	ldr	r1, [r4, #12]
 80077ec:	4b06      	ldr	r3, [pc, #24]	@ (8007808 <cleanup_stdio+0x3c>)
 80077ee:	4299      	cmp	r1, r3
 80077f0:	d004      	beq.n	80077fc <cleanup_stdio+0x30>
 80077f2:	4620      	mov	r0, r4
 80077f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077f8:	f000 beea 	b.w	80085d0 <_fflush_r>
 80077fc:	bd10      	pop	{r4, pc}
 80077fe:	bf00      	nop
 8007800:	20001c30 	.word	0x20001c30
 8007804:	20001c98 	.word	0x20001c98
 8007808:	20001d00 	.word	0x20001d00

0800780c <global_stdio_init.part.0>:
 800780c:	b510      	push	{r4, lr}
 800780e:	4b0b      	ldr	r3, [pc, #44]	@ (800783c <global_stdio_init.part.0+0x30>)
 8007810:	4c0b      	ldr	r4, [pc, #44]	@ (8007840 <global_stdio_init.part.0+0x34>)
 8007812:	4a0c      	ldr	r2, [pc, #48]	@ (8007844 <global_stdio_init.part.0+0x38>)
 8007814:	601a      	str	r2, [r3, #0]
 8007816:	4620      	mov	r0, r4
 8007818:	2200      	movs	r2, #0
 800781a:	2104      	movs	r1, #4
 800781c:	f7ff ff94 	bl	8007748 <std>
 8007820:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007824:	2201      	movs	r2, #1
 8007826:	2109      	movs	r1, #9
 8007828:	f7ff ff8e 	bl	8007748 <std>
 800782c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007830:	2202      	movs	r2, #2
 8007832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007836:	2112      	movs	r1, #18
 8007838:	f7ff bf86 	b.w	8007748 <std>
 800783c:	20001d68 	.word	0x20001d68
 8007840:	20001c30 	.word	0x20001c30
 8007844:	080077b5 	.word	0x080077b5

08007848 <__sfp_lock_acquire>:
 8007848:	4801      	ldr	r0, [pc, #4]	@ (8007850 <__sfp_lock_acquire+0x8>)
 800784a:	f000 ba66 	b.w	8007d1a <__retarget_lock_acquire_recursive>
 800784e:	bf00      	nop
 8007850:	20001d71 	.word	0x20001d71

08007854 <__sfp_lock_release>:
 8007854:	4801      	ldr	r0, [pc, #4]	@ (800785c <__sfp_lock_release+0x8>)
 8007856:	f000 ba61 	b.w	8007d1c <__retarget_lock_release_recursive>
 800785a:	bf00      	nop
 800785c:	20001d71 	.word	0x20001d71

08007860 <__sinit>:
 8007860:	b510      	push	{r4, lr}
 8007862:	4604      	mov	r4, r0
 8007864:	f7ff fff0 	bl	8007848 <__sfp_lock_acquire>
 8007868:	6a23      	ldr	r3, [r4, #32]
 800786a:	b11b      	cbz	r3, 8007874 <__sinit+0x14>
 800786c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007870:	f7ff bff0 	b.w	8007854 <__sfp_lock_release>
 8007874:	4b04      	ldr	r3, [pc, #16]	@ (8007888 <__sinit+0x28>)
 8007876:	6223      	str	r3, [r4, #32]
 8007878:	4b04      	ldr	r3, [pc, #16]	@ (800788c <__sinit+0x2c>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1f5      	bne.n	800786c <__sinit+0xc>
 8007880:	f7ff ffc4 	bl	800780c <global_stdio_init.part.0>
 8007884:	e7f2      	b.n	800786c <__sinit+0xc>
 8007886:	bf00      	nop
 8007888:	080077cd 	.word	0x080077cd
 800788c:	20001d68 	.word	0x20001d68

08007890 <_fwalk_sglue>:
 8007890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007894:	4607      	mov	r7, r0
 8007896:	4688      	mov	r8, r1
 8007898:	4614      	mov	r4, r2
 800789a:	2600      	movs	r6, #0
 800789c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078a0:	f1b9 0901 	subs.w	r9, r9, #1
 80078a4:	d505      	bpl.n	80078b2 <_fwalk_sglue+0x22>
 80078a6:	6824      	ldr	r4, [r4, #0]
 80078a8:	2c00      	cmp	r4, #0
 80078aa:	d1f7      	bne.n	800789c <_fwalk_sglue+0xc>
 80078ac:	4630      	mov	r0, r6
 80078ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078b2:	89ab      	ldrh	r3, [r5, #12]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d907      	bls.n	80078c8 <_fwalk_sglue+0x38>
 80078b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078bc:	3301      	adds	r3, #1
 80078be:	d003      	beq.n	80078c8 <_fwalk_sglue+0x38>
 80078c0:	4629      	mov	r1, r5
 80078c2:	4638      	mov	r0, r7
 80078c4:	47c0      	blx	r8
 80078c6:	4306      	orrs	r6, r0
 80078c8:	3568      	adds	r5, #104	@ 0x68
 80078ca:	e7e9      	b.n	80078a0 <_fwalk_sglue+0x10>

080078cc <iprintf>:
 80078cc:	b40f      	push	{r0, r1, r2, r3}
 80078ce:	b507      	push	{r0, r1, r2, lr}
 80078d0:	4906      	ldr	r1, [pc, #24]	@ (80078ec <iprintf+0x20>)
 80078d2:	ab04      	add	r3, sp, #16
 80078d4:	6808      	ldr	r0, [r1, #0]
 80078d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80078da:	6881      	ldr	r1, [r0, #8]
 80078dc:	9301      	str	r3, [sp, #4]
 80078de:	f000 fb4f 	bl	8007f80 <_vfiprintf_r>
 80078e2:	b003      	add	sp, #12
 80078e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80078e8:	b004      	add	sp, #16
 80078ea:	4770      	bx	lr
 80078ec:	20000030 	.word	0x20000030

080078f0 <putchar>:
 80078f0:	4b02      	ldr	r3, [pc, #8]	@ (80078fc <putchar+0xc>)
 80078f2:	4601      	mov	r1, r0
 80078f4:	6818      	ldr	r0, [r3, #0]
 80078f6:	6882      	ldr	r2, [r0, #8]
 80078f8:	f000 bef4 	b.w	80086e4 <_putc_r>
 80078fc:	20000030 	.word	0x20000030

08007900 <_puts_r>:
 8007900:	6a03      	ldr	r3, [r0, #32]
 8007902:	b570      	push	{r4, r5, r6, lr}
 8007904:	6884      	ldr	r4, [r0, #8]
 8007906:	4605      	mov	r5, r0
 8007908:	460e      	mov	r6, r1
 800790a:	b90b      	cbnz	r3, 8007910 <_puts_r+0x10>
 800790c:	f7ff ffa8 	bl	8007860 <__sinit>
 8007910:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007912:	07db      	lsls	r3, r3, #31
 8007914:	d405      	bmi.n	8007922 <_puts_r+0x22>
 8007916:	89a3      	ldrh	r3, [r4, #12]
 8007918:	0598      	lsls	r0, r3, #22
 800791a:	d402      	bmi.n	8007922 <_puts_r+0x22>
 800791c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800791e:	f000 f9fc 	bl	8007d1a <__retarget_lock_acquire_recursive>
 8007922:	89a3      	ldrh	r3, [r4, #12]
 8007924:	0719      	lsls	r1, r3, #28
 8007926:	d502      	bpl.n	800792e <_puts_r+0x2e>
 8007928:	6923      	ldr	r3, [r4, #16]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d135      	bne.n	800799a <_puts_r+0x9a>
 800792e:	4621      	mov	r1, r4
 8007930:	4628      	mov	r0, r5
 8007932:	f000 f8c5 	bl	8007ac0 <__swsetup_r>
 8007936:	b380      	cbz	r0, 800799a <_puts_r+0x9a>
 8007938:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800793c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800793e:	07da      	lsls	r2, r3, #31
 8007940:	d405      	bmi.n	800794e <_puts_r+0x4e>
 8007942:	89a3      	ldrh	r3, [r4, #12]
 8007944:	059b      	lsls	r3, r3, #22
 8007946:	d402      	bmi.n	800794e <_puts_r+0x4e>
 8007948:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800794a:	f000 f9e7 	bl	8007d1c <__retarget_lock_release_recursive>
 800794e:	4628      	mov	r0, r5
 8007950:	bd70      	pop	{r4, r5, r6, pc}
 8007952:	2b00      	cmp	r3, #0
 8007954:	da04      	bge.n	8007960 <_puts_r+0x60>
 8007956:	69a2      	ldr	r2, [r4, #24]
 8007958:	429a      	cmp	r2, r3
 800795a:	dc17      	bgt.n	800798c <_puts_r+0x8c>
 800795c:	290a      	cmp	r1, #10
 800795e:	d015      	beq.n	800798c <_puts_r+0x8c>
 8007960:	6823      	ldr	r3, [r4, #0]
 8007962:	1c5a      	adds	r2, r3, #1
 8007964:	6022      	str	r2, [r4, #0]
 8007966:	7019      	strb	r1, [r3, #0]
 8007968:	68a3      	ldr	r3, [r4, #8]
 800796a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800796e:	3b01      	subs	r3, #1
 8007970:	60a3      	str	r3, [r4, #8]
 8007972:	2900      	cmp	r1, #0
 8007974:	d1ed      	bne.n	8007952 <_puts_r+0x52>
 8007976:	2b00      	cmp	r3, #0
 8007978:	da11      	bge.n	800799e <_puts_r+0x9e>
 800797a:	4622      	mov	r2, r4
 800797c:	210a      	movs	r1, #10
 800797e:	4628      	mov	r0, r5
 8007980:	f000 f85f 	bl	8007a42 <__swbuf_r>
 8007984:	3001      	adds	r0, #1
 8007986:	d0d7      	beq.n	8007938 <_puts_r+0x38>
 8007988:	250a      	movs	r5, #10
 800798a:	e7d7      	b.n	800793c <_puts_r+0x3c>
 800798c:	4622      	mov	r2, r4
 800798e:	4628      	mov	r0, r5
 8007990:	f000 f857 	bl	8007a42 <__swbuf_r>
 8007994:	3001      	adds	r0, #1
 8007996:	d1e7      	bne.n	8007968 <_puts_r+0x68>
 8007998:	e7ce      	b.n	8007938 <_puts_r+0x38>
 800799a:	3e01      	subs	r6, #1
 800799c:	e7e4      	b.n	8007968 <_puts_r+0x68>
 800799e:	6823      	ldr	r3, [r4, #0]
 80079a0:	1c5a      	adds	r2, r3, #1
 80079a2:	6022      	str	r2, [r4, #0]
 80079a4:	220a      	movs	r2, #10
 80079a6:	701a      	strb	r2, [r3, #0]
 80079a8:	e7ee      	b.n	8007988 <_puts_r+0x88>
	...

080079ac <puts>:
 80079ac:	4b02      	ldr	r3, [pc, #8]	@ (80079b8 <puts+0xc>)
 80079ae:	4601      	mov	r1, r0
 80079b0:	6818      	ldr	r0, [r3, #0]
 80079b2:	f7ff bfa5 	b.w	8007900 <_puts_r>
 80079b6:	bf00      	nop
 80079b8:	20000030 	.word	0x20000030

080079bc <__sread>:
 80079bc:	b510      	push	{r4, lr}
 80079be:	460c      	mov	r4, r1
 80079c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079c4:	f000 f95a 	bl	8007c7c <_read_r>
 80079c8:	2800      	cmp	r0, #0
 80079ca:	bfab      	itete	ge
 80079cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80079ce:	89a3      	ldrhlt	r3, [r4, #12]
 80079d0:	181b      	addge	r3, r3, r0
 80079d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80079d6:	bfac      	ite	ge
 80079d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80079da:	81a3      	strhlt	r3, [r4, #12]
 80079dc:	bd10      	pop	{r4, pc}

080079de <__swrite>:
 80079de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079e2:	461f      	mov	r7, r3
 80079e4:	898b      	ldrh	r3, [r1, #12]
 80079e6:	05db      	lsls	r3, r3, #23
 80079e8:	4605      	mov	r5, r0
 80079ea:	460c      	mov	r4, r1
 80079ec:	4616      	mov	r6, r2
 80079ee:	d505      	bpl.n	80079fc <__swrite+0x1e>
 80079f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079f4:	2302      	movs	r3, #2
 80079f6:	2200      	movs	r2, #0
 80079f8:	f000 f92e 	bl	8007c58 <_lseek_r>
 80079fc:	89a3      	ldrh	r3, [r4, #12]
 80079fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a06:	81a3      	strh	r3, [r4, #12]
 8007a08:	4632      	mov	r2, r6
 8007a0a:	463b      	mov	r3, r7
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a12:	f000 b945 	b.w	8007ca0 <_write_r>

08007a16 <__sseek>:
 8007a16:	b510      	push	{r4, lr}
 8007a18:	460c      	mov	r4, r1
 8007a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a1e:	f000 f91b 	bl	8007c58 <_lseek_r>
 8007a22:	1c43      	adds	r3, r0, #1
 8007a24:	89a3      	ldrh	r3, [r4, #12]
 8007a26:	bf15      	itete	ne
 8007a28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007a2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007a2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007a32:	81a3      	strheq	r3, [r4, #12]
 8007a34:	bf18      	it	ne
 8007a36:	81a3      	strhne	r3, [r4, #12]
 8007a38:	bd10      	pop	{r4, pc}

08007a3a <__sclose>:
 8007a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a3e:	f000 b89d 	b.w	8007b7c <_close_r>

08007a42 <__swbuf_r>:
 8007a42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a44:	460e      	mov	r6, r1
 8007a46:	4614      	mov	r4, r2
 8007a48:	4605      	mov	r5, r0
 8007a4a:	b118      	cbz	r0, 8007a54 <__swbuf_r+0x12>
 8007a4c:	6a03      	ldr	r3, [r0, #32]
 8007a4e:	b90b      	cbnz	r3, 8007a54 <__swbuf_r+0x12>
 8007a50:	f7ff ff06 	bl	8007860 <__sinit>
 8007a54:	69a3      	ldr	r3, [r4, #24]
 8007a56:	60a3      	str	r3, [r4, #8]
 8007a58:	89a3      	ldrh	r3, [r4, #12]
 8007a5a:	071a      	lsls	r2, r3, #28
 8007a5c:	d501      	bpl.n	8007a62 <__swbuf_r+0x20>
 8007a5e:	6923      	ldr	r3, [r4, #16]
 8007a60:	b943      	cbnz	r3, 8007a74 <__swbuf_r+0x32>
 8007a62:	4621      	mov	r1, r4
 8007a64:	4628      	mov	r0, r5
 8007a66:	f000 f82b 	bl	8007ac0 <__swsetup_r>
 8007a6a:	b118      	cbz	r0, 8007a74 <__swbuf_r+0x32>
 8007a6c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007a70:	4638      	mov	r0, r7
 8007a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a74:	6823      	ldr	r3, [r4, #0]
 8007a76:	6922      	ldr	r2, [r4, #16]
 8007a78:	1a98      	subs	r0, r3, r2
 8007a7a:	6963      	ldr	r3, [r4, #20]
 8007a7c:	b2f6      	uxtb	r6, r6
 8007a7e:	4283      	cmp	r3, r0
 8007a80:	4637      	mov	r7, r6
 8007a82:	dc05      	bgt.n	8007a90 <__swbuf_r+0x4e>
 8007a84:	4621      	mov	r1, r4
 8007a86:	4628      	mov	r0, r5
 8007a88:	f000 fda2 	bl	80085d0 <_fflush_r>
 8007a8c:	2800      	cmp	r0, #0
 8007a8e:	d1ed      	bne.n	8007a6c <__swbuf_r+0x2a>
 8007a90:	68a3      	ldr	r3, [r4, #8]
 8007a92:	3b01      	subs	r3, #1
 8007a94:	60a3      	str	r3, [r4, #8]
 8007a96:	6823      	ldr	r3, [r4, #0]
 8007a98:	1c5a      	adds	r2, r3, #1
 8007a9a:	6022      	str	r2, [r4, #0]
 8007a9c:	701e      	strb	r6, [r3, #0]
 8007a9e:	6962      	ldr	r2, [r4, #20]
 8007aa0:	1c43      	adds	r3, r0, #1
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d004      	beq.n	8007ab0 <__swbuf_r+0x6e>
 8007aa6:	89a3      	ldrh	r3, [r4, #12]
 8007aa8:	07db      	lsls	r3, r3, #31
 8007aaa:	d5e1      	bpl.n	8007a70 <__swbuf_r+0x2e>
 8007aac:	2e0a      	cmp	r6, #10
 8007aae:	d1df      	bne.n	8007a70 <__swbuf_r+0x2e>
 8007ab0:	4621      	mov	r1, r4
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	f000 fd8c 	bl	80085d0 <_fflush_r>
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	d0d9      	beq.n	8007a70 <__swbuf_r+0x2e>
 8007abc:	e7d6      	b.n	8007a6c <__swbuf_r+0x2a>
	...

08007ac0 <__swsetup_r>:
 8007ac0:	b538      	push	{r3, r4, r5, lr}
 8007ac2:	4b29      	ldr	r3, [pc, #164]	@ (8007b68 <__swsetup_r+0xa8>)
 8007ac4:	4605      	mov	r5, r0
 8007ac6:	6818      	ldr	r0, [r3, #0]
 8007ac8:	460c      	mov	r4, r1
 8007aca:	b118      	cbz	r0, 8007ad4 <__swsetup_r+0x14>
 8007acc:	6a03      	ldr	r3, [r0, #32]
 8007ace:	b90b      	cbnz	r3, 8007ad4 <__swsetup_r+0x14>
 8007ad0:	f7ff fec6 	bl	8007860 <__sinit>
 8007ad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ad8:	0719      	lsls	r1, r3, #28
 8007ada:	d422      	bmi.n	8007b22 <__swsetup_r+0x62>
 8007adc:	06da      	lsls	r2, r3, #27
 8007ade:	d407      	bmi.n	8007af0 <__swsetup_r+0x30>
 8007ae0:	2209      	movs	r2, #9
 8007ae2:	602a      	str	r2, [r5, #0]
 8007ae4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ae8:	81a3      	strh	r3, [r4, #12]
 8007aea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007aee:	e033      	b.n	8007b58 <__swsetup_r+0x98>
 8007af0:	0758      	lsls	r0, r3, #29
 8007af2:	d512      	bpl.n	8007b1a <__swsetup_r+0x5a>
 8007af4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007af6:	b141      	cbz	r1, 8007b0a <__swsetup_r+0x4a>
 8007af8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007afc:	4299      	cmp	r1, r3
 8007afe:	d002      	beq.n	8007b06 <__swsetup_r+0x46>
 8007b00:	4628      	mov	r0, r5
 8007b02:	f000 f91b 	bl	8007d3c <_free_r>
 8007b06:	2300      	movs	r3, #0
 8007b08:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b0a:	89a3      	ldrh	r3, [r4, #12]
 8007b0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007b10:	81a3      	strh	r3, [r4, #12]
 8007b12:	2300      	movs	r3, #0
 8007b14:	6063      	str	r3, [r4, #4]
 8007b16:	6923      	ldr	r3, [r4, #16]
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	89a3      	ldrh	r3, [r4, #12]
 8007b1c:	f043 0308 	orr.w	r3, r3, #8
 8007b20:	81a3      	strh	r3, [r4, #12]
 8007b22:	6923      	ldr	r3, [r4, #16]
 8007b24:	b94b      	cbnz	r3, 8007b3a <__swsetup_r+0x7a>
 8007b26:	89a3      	ldrh	r3, [r4, #12]
 8007b28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007b2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b30:	d003      	beq.n	8007b3a <__swsetup_r+0x7a>
 8007b32:	4621      	mov	r1, r4
 8007b34:	4628      	mov	r0, r5
 8007b36:	f000 fd99 	bl	800866c <__smakebuf_r>
 8007b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b3e:	f013 0201 	ands.w	r2, r3, #1
 8007b42:	d00a      	beq.n	8007b5a <__swsetup_r+0x9a>
 8007b44:	2200      	movs	r2, #0
 8007b46:	60a2      	str	r2, [r4, #8]
 8007b48:	6962      	ldr	r2, [r4, #20]
 8007b4a:	4252      	negs	r2, r2
 8007b4c:	61a2      	str	r2, [r4, #24]
 8007b4e:	6922      	ldr	r2, [r4, #16]
 8007b50:	b942      	cbnz	r2, 8007b64 <__swsetup_r+0xa4>
 8007b52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007b56:	d1c5      	bne.n	8007ae4 <__swsetup_r+0x24>
 8007b58:	bd38      	pop	{r3, r4, r5, pc}
 8007b5a:	0799      	lsls	r1, r3, #30
 8007b5c:	bf58      	it	pl
 8007b5e:	6962      	ldrpl	r2, [r4, #20]
 8007b60:	60a2      	str	r2, [r4, #8]
 8007b62:	e7f4      	b.n	8007b4e <__swsetup_r+0x8e>
 8007b64:	2000      	movs	r0, #0
 8007b66:	e7f7      	b.n	8007b58 <__swsetup_r+0x98>
 8007b68:	20000030 	.word	0x20000030

08007b6c <memset>:
 8007b6c:	4402      	add	r2, r0
 8007b6e:	4603      	mov	r3, r0
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d100      	bne.n	8007b76 <memset+0xa>
 8007b74:	4770      	bx	lr
 8007b76:	f803 1b01 	strb.w	r1, [r3], #1
 8007b7a:	e7f9      	b.n	8007b70 <memset+0x4>

08007b7c <_close_r>:
 8007b7c:	b538      	push	{r3, r4, r5, lr}
 8007b7e:	4d06      	ldr	r5, [pc, #24]	@ (8007b98 <_close_r+0x1c>)
 8007b80:	2300      	movs	r3, #0
 8007b82:	4604      	mov	r4, r0
 8007b84:	4608      	mov	r0, r1
 8007b86:	602b      	str	r3, [r5, #0]
 8007b88:	f7f9 fadb 	bl	8001142 <_close>
 8007b8c:	1c43      	adds	r3, r0, #1
 8007b8e:	d102      	bne.n	8007b96 <_close_r+0x1a>
 8007b90:	682b      	ldr	r3, [r5, #0]
 8007b92:	b103      	cbz	r3, 8007b96 <_close_r+0x1a>
 8007b94:	6023      	str	r3, [r4, #0]
 8007b96:	bd38      	pop	{r3, r4, r5, pc}
 8007b98:	20001d6c 	.word	0x20001d6c

08007b9c <_reclaim_reent>:
 8007b9c:	4b2d      	ldr	r3, [pc, #180]	@ (8007c54 <_reclaim_reent+0xb8>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4283      	cmp	r3, r0
 8007ba2:	b570      	push	{r4, r5, r6, lr}
 8007ba4:	4604      	mov	r4, r0
 8007ba6:	d053      	beq.n	8007c50 <_reclaim_reent+0xb4>
 8007ba8:	69c3      	ldr	r3, [r0, #28]
 8007baa:	b31b      	cbz	r3, 8007bf4 <_reclaim_reent+0x58>
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	b163      	cbz	r3, 8007bca <_reclaim_reent+0x2e>
 8007bb0:	2500      	movs	r5, #0
 8007bb2:	69e3      	ldr	r3, [r4, #28]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	5959      	ldr	r1, [r3, r5]
 8007bb8:	b9b1      	cbnz	r1, 8007be8 <_reclaim_reent+0x4c>
 8007bba:	3504      	adds	r5, #4
 8007bbc:	2d80      	cmp	r5, #128	@ 0x80
 8007bbe:	d1f8      	bne.n	8007bb2 <_reclaim_reent+0x16>
 8007bc0:	69e3      	ldr	r3, [r4, #28]
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	68d9      	ldr	r1, [r3, #12]
 8007bc6:	f000 f8b9 	bl	8007d3c <_free_r>
 8007bca:	69e3      	ldr	r3, [r4, #28]
 8007bcc:	6819      	ldr	r1, [r3, #0]
 8007bce:	b111      	cbz	r1, 8007bd6 <_reclaim_reent+0x3a>
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	f000 f8b3 	bl	8007d3c <_free_r>
 8007bd6:	69e3      	ldr	r3, [r4, #28]
 8007bd8:	689d      	ldr	r5, [r3, #8]
 8007bda:	b15d      	cbz	r5, 8007bf4 <_reclaim_reent+0x58>
 8007bdc:	4629      	mov	r1, r5
 8007bde:	4620      	mov	r0, r4
 8007be0:	682d      	ldr	r5, [r5, #0]
 8007be2:	f000 f8ab 	bl	8007d3c <_free_r>
 8007be6:	e7f8      	b.n	8007bda <_reclaim_reent+0x3e>
 8007be8:	680e      	ldr	r6, [r1, #0]
 8007bea:	4620      	mov	r0, r4
 8007bec:	f000 f8a6 	bl	8007d3c <_free_r>
 8007bf0:	4631      	mov	r1, r6
 8007bf2:	e7e1      	b.n	8007bb8 <_reclaim_reent+0x1c>
 8007bf4:	6961      	ldr	r1, [r4, #20]
 8007bf6:	b111      	cbz	r1, 8007bfe <_reclaim_reent+0x62>
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	f000 f89f 	bl	8007d3c <_free_r>
 8007bfe:	69e1      	ldr	r1, [r4, #28]
 8007c00:	b111      	cbz	r1, 8007c08 <_reclaim_reent+0x6c>
 8007c02:	4620      	mov	r0, r4
 8007c04:	f000 f89a 	bl	8007d3c <_free_r>
 8007c08:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007c0a:	b111      	cbz	r1, 8007c12 <_reclaim_reent+0x76>
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	f000 f895 	bl	8007d3c <_free_r>
 8007c12:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c14:	b111      	cbz	r1, 8007c1c <_reclaim_reent+0x80>
 8007c16:	4620      	mov	r0, r4
 8007c18:	f000 f890 	bl	8007d3c <_free_r>
 8007c1c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007c1e:	b111      	cbz	r1, 8007c26 <_reclaim_reent+0x8a>
 8007c20:	4620      	mov	r0, r4
 8007c22:	f000 f88b 	bl	8007d3c <_free_r>
 8007c26:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007c28:	b111      	cbz	r1, 8007c30 <_reclaim_reent+0x94>
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	f000 f886 	bl	8007d3c <_free_r>
 8007c30:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007c32:	b111      	cbz	r1, 8007c3a <_reclaim_reent+0x9e>
 8007c34:	4620      	mov	r0, r4
 8007c36:	f000 f881 	bl	8007d3c <_free_r>
 8007c3a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007c3c:	b111      	cbz	r1, 8007c44 <_reclaim_reent+0xa8>
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f000 f87c 	bl	8007d3c <_free_r>
 8007c44:	6a23      	ldr	r3, [r4, #32]
 8007c46:	b11b      	cbz	r3, 8007c50 <_reclaim_reent+0xb4>
 8007c48:	4620      	mov	r0, r4
 8007c4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c4e:	4718      	bx	r3
 8007c50:	bd70      	pop	{r4, r5, r6, pc}
 8007c52:	bf00      	nop
 8007c54:	20000030 	.word	0x20000030

08007c58 <_lseek_r>:
 8007c58:	b538      	push	{r3, r4, r5, lr}
 8007c5a:	4d07      	ldr	r5, [pc, #28]	@ (8007c78 <_lseek_r+0x20>)
 8007c5c:	4604      	mov	r4, r0
 8007c5e:	4608      	mov	r0, r1
 8007c60:	4611      	mov	r1, r2
 8007c62:	2200      	movs	r2, #0
 8007c64:	602a      	str	r2, [r5, #0]
 8007c66:	461a      	mov	r2, r3
 8007c68:	f7f9 fa92 	bl	8001190 <_lseek>
 8007c6c:	1c43      	adds	r3, r0, #1
 8007c6e:	d102      	bne.n	8007c76 <_lseek_r+0x1e>
 8007c70:	682b      	ldr	r3, [r5, #0]
 8007c72:	b103      	cbz	r3, 8007c76 <_lseek_r+0x1e>
 8007c74:	6023      	str	r3, [r4, #0]
 8007c76:	bd38      	pop	{r3, r4, r5, pc}
 8007c78:	20001d6c 	.word	0x20001d6c

08007c7c <_read_r>:
 8007c7c:	b538      	push	{r3, r4, r5, lr}
 8007c7e:	4d07      	ldr	r5, [pc, #28]	@ (8007c9c <_read_r+0x20>)
 8007c80:	4604      	mov	r4, r0
 8007c82:	4608      	mov	r0, r1
 8007c84:	4611      	mov	r1, r2
 8007c86:	2200      	movs	r2, #0
 8007c88:	602a      	str	r2, [r5, #0]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	f7f9 fa3c 	bl	8001108 <_read>
 8007c90:	1c43      	adds	r3, r0, #1
 8007c92:	d102      	bne.n	8007c9a <_read_r+0x1e>
 8007c94:	682b      	ldr	r3, [r5, #0]
 8007c96:	b103      	cbz	r3, 8007c9a <_read_r+0x1e>
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	bd38      	pop	{r3, r4, r5, pc}
 8007c9c:	20001d6c 	.word	0x20001d6c

08007ca0 <_write_r>:
 8007ca0:	b538      	push	{r3, r4, r5, lr}
 8007ca2:	4d07      	ldr	r5, [pc, #28]	@ (8007cc0 <_write_r+0x20>)
 8007ca4:	4604      	mov	r4, r0
 8007ca6:	4608      	mov	r0, r1
 8007ca8:	4611      	mov	r1, r2
 8007caa:	2200      	movs	r2, #0
 8007cac:	602a      	str	r2, [r5, #0]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	f7f8 fe78 	bl	80009a4 <_write>
 8007cb4:	1c43      	adds	r3, r0, #1
 8007cb6:	d102      	bne.n	8007cbe <_write_r+0x1e>
 8007cb8:	682b      	ldr	r3, [r5, #0]
 8007cba:	b103      	cbz	r3, 8007cbe <_write_r+0x1e>
 8007cbc:	6023      	str	r3, [r4, #0]
 8007cbe:	bd38      	pop	{r3, r4, r5, pc}
 8007cc0:	20001d6c 	.word	0x20001d6c

08007cc4 <__errno>:
 8007cc4:	4b01      	ldr	r3, [pc, #4]	@ (8007ccc <__errno+0x8>)
 8007cc6:	6818      	ldr	r0, [r3, #0]
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	20000030 	.word	0x20000030

08007cd0 <__libc_init_array>:
 8007cd0:	b570      	push	{r4, r5, r6, lr}
 8007cd2:	4d0d      	ldr	r5, [pc, #52]	@ (8007d08 <__libc_init_array+0x38>)
 8007cd4:	4c0d      	ldr	r4, [pc, #52]	@ (8007d0c <__libc_init_array+0x3c>)
 8007cd6:	1b64      	subs	r4, r4, r5
 8007cd8:	10a4      	asrs	r4, r4, #2
 8007cda:	2600      	movs	r6, #0
 8007cdc:	42a6      	cmp	r6, r4
 8007cde:	d109      	bne.n	8007cf4 <__libc_init_array+0x24>
 8007ce0:	4d0b      	ldr	r5, [pc, #44]	@ (8007d10 <__libc_init_array+0x40>)
 8007ce2:	4c0c      	ldr	r4, [pc, #48]	@ (8007d14 <__libc_init_array+0x44>)
 8007ce4:	f000 fd64 	bl	80087b0 <_init>
 8007ce8:	1b64      	subs	r4, r4, r5
 8007cea:	10a4      	asrs	r4, r4, #2
 8007cec:	2600      	movs	r6, #0
 8007cee:	42a6      	cmp	r6, r4
 8007cf0:	d105      	bne.n	8007cfe <__libc_init_array+0x2e>
 8007cf2:	bd70      	pop	{r4, r5, r6, pc}
 8007cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cf8:	4798      	blx	r3
 8007cfa:	3601      	adds	r6, #1
 8007cfc:	e7ee      	b.n	8007cdc <__libc_init_array+0xc>
 8007cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d02:	4798      	blx	r3
 8007d04:	3601      	adds	r6, #1
 8007d06:	e7f2      	b.n	8007cee <__libc_init_array+0x1e>
 8007d08:	08008bd4 	.word	0x08008bd4
 8007d0c:	08008bd4 	.word	0x08008bd4
 8007d10:	08008bd4 	.word	0x08008bd4
 8007d14:	08008bd8 	.word	0x08008bd8

08007d18 <__retarget_lock_init_recursive>:
 8007d18:	4770      	bx	lr

08007d1a <__retarget_lock_acquire_recursive>:
 8007d1a:	4770      	bx	lr

08007d1c <__retarget_lock_release_recursive>:
 8007d1c:	4770      	bx	lr

08007d1e <memcpy>:
 8007d1e:	440a      	add	r2, r1
 8007d20:	4291      	cmp	r1, r2
 8007d22:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007d26:	d100      	bne.n	8007d2a <memcpy+0xc>
 8007d28:	4770      	bx	lr
 8007d2a:	b510      	push	{r4, lr}
 8007d2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d34:	4291      	cmp	r1, r2
 8007d36:	d1f9      	bne.n	8007d2c <memcpy+0xe>
 8007d38:	bd10      	pop	{r4, pc}
	...

08007d3c <_free_r>:
 8007d3c:	b538      	push	{r3, r4, r5, lr}
 8007d3e:	4605      	mov	r5, r0
 8007d40:	2900      	cmp	r1, #0
 8007d42:	d041      	beq.n	8007dc8 <_free_r+0x8c>
 8007d44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d48:	1f0c      	subs	r4, r1, #4
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	bfb8      	it	lt
 8007d4e:	18e4      	addlt	r4, r4, r3
 8007d50:	f000 f8e0 	bl	8007f14 <__malloc_lock>
 8007d54:	4a1d      	ldr	r2, [pc, #116]	@ (8007dcc <_free_r+0x90>)
 8007d56:	6813      	ldr	r3, [r2, #0]
 8007d58:	b933      	cbnz	r3, 8007d68 <_free_r+0x2c>
 8007d5a:	6063      	str	r3, [r4, #4]
 8007d5c:	6014      	str	r4, [r2, #0]
 8007d5e:	4628      	mov	r0, r5
 8007d60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d64:	f000 b8dc 	b.w	8007f20 <__malloc_unlock>
 8007d68:	42a3      	cmp	r3, r4
 8007d6a:	d908      	bls.n	8007d7e <_free_r+0x42>
 8007d6c:	6820      	ldr	r0, [r4, #0]
 8007d6e:	1821      	adds	r1, r4, r0
 8007d70:	428b      	cmp	r3, r1
 8007d72:	bf01      	itttt	eq
 8007d74:	6819      	ldreq	r1, [r3, #0]
 8007d76:	685b      	ldreq	r3, [r3, #4]
 8007d78:	1809      	addeq	r1, r1, r0
 8007d7a:	6021      	streq	r1, [r4, #0]
 8007d7c:	e7ed      	b.n	8007d5a <_free_r+0x1e>
 8007d7e:	461a      	mov	r2, r3
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	b10b      	cbz	r3, 8007d88 <_free_r+0x4c>
 8007d84:	42a3      	cmp	r3, r4
 8007d86:	d9fa      	bls.n	8007d7e <_free_r+0x42>
 8007d88:	6811      	ldr	r1, [r2, #0]
 8007d8a:	1850      	adds	r0, r2, r1
 8007d8c:	42a0      	cmp	r0, r4
 8007d8e:	d10b      	bne.n	8007da8 <_free_r+0x6c>
 8007d90:	6820      	ldr	r0, [r4, #0]
 8007d92:	4401      	add	r1, r0
 8007d94:	1850      	adds	r0, r2, r1
 8007d96:	4283      	cmp	r3, r0
 8007d98:	6011      	str	r1, [r2, #0]
 8007d9a:	d1e0      	bne.n	8007d5e <_free_r+0x22>
 8007d9c:	6818      	ldr	r0, [r3, #0]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	6053      	str	r3, [r2, #4]
 8007da2:	4408      	add	r0, r1
 8007da4:	6010      	str	r0, [r2, #0]
 8007da6:	e7da      	b.n	8007d5e <_free_r+0x22>
 8007da8:	d902      	bls.n	8007db0 <_free_r+0x74>
 8007daa:	230c      	movs	r3, #12
 8007dac:	602b      	str	r3, [r5, #0]
 8007dae:	e7d6      	b.n	8007d5e <_free_r+0x22>
 8007db0:	6820      	ldr	r0, [r4, #0]
 8007db2:	1821      	adds	r1, r4, r0
 8007db4:	428b      	cmp	r3, r1
 8007db6:	bf04      	itt	eq
 8007db8:	6819      	ldreq	r1, [r3, #0]
 8007dba:	685b      	ldreq	r3, [r3, #4]
 8007dbc:	6063      	str	r3, [r4, #4]
 8007dbe:	bf04      	itt	eq
 8007dc0:	1809      	addeq	r1, r1, r0
 8007dc2:	6021      	streq	r1, [r4, #0]
 8007dc4:	6054      	str	r4, [r2, #4]
 8007dc6:	e7ca      	b.n	8007d5e <_free_r+0x22>
 8007dc8:	bd38      	pop	{r3, r4, r5, pc}
 8007dca:	bf00      	nop
 8007dcc:	20001d78 	.word	0x20001d78

08007dd0 <sbrk_aligned>:
 8007dd0:	b570      	push	{r4, r5, r6, lr}
 8007dd2:	4e0f      	ldr	r6, [pc, #60]	@ (8007e10 <sbrk_aligned+0x40>)
 8007dd4:	460c      	mov	r4, r1
 8007dd6:	6831      	ldr	r1, [r6, #0]
 8007dd8:	4605      	mov	r5, r0
 8007dda:	b911      	cbnz	r1, 8007de2 <sbrk_aligned+0x12>
 8007ddc:	f000 fcd8 	bl	8008790 <_sbrk_r>
 8007de0:	6030      	str	r0, [r6, #0]
 8007de2:	4621      	mov	r1, r4
 8007de4:	4628      	mov	r0, r5
 8007de6:	f000 fcd3 	bl	8008790 <_sbrk_r>
 8007dea:	1c43      	adds	r3, r0, #1
 8007dec:	d103      	bne.n	8007df6 <sbrk_aligned+0x26>
 8007dee:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007df2:	4620      	mov	r0, r4
 8007df4:	bd70      	pop	{r4, r5, r6, pc}
 8007df6:	1cc4      	adds	r4, r0, #3
 8007df8:	f024 0403 	bic.w	r4, r4, #3
 8007dfc:	42a0      	cmp	r0, r4
 8007dfe:	d0f8      	beq.n	8007df2 <sbrk_aligned+0x22>
 8007e00:	1a21      	subs	r1, r4, r0
 8007e02:	4628      	mov	r0, r5
 8007e04:	f000 fcc4 	bl	8008790 <_sbrk_r>
 8007e08:	3001      	adds	r0, #1
 8007e0a:	d1f2      	bne.n	8007df2 <sbrk_aligned+0x22>
 8007e0c:	e7ef      	b.n	8007dee <sbrk_aligned+0x1e>
 8007e0e:	bf00      	nop
 8007e10:	20001d74 	.word	0x20001d74

08007e14 <_malloc_r>:
 8007e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e18:	1ccd      	adds	r5, r1, #3
 8007e1a:	f025 0503 	bic.w	r5, r5, #3
 8007e1e:	3508      	adds	r5, #8
 8007e20:	2d0c      	cmp	r5, #12
 8007e22:	bf38      	it	cc
 8007e24:	250c      	movcc	r5, #12
 8007e26:	2d00      	cmp	r5, #0
 8007e28:	4606      	mov	r6, r0
 8007e2a:	db01      	blt.n	8007e30 <_malloc_r+0x1c>
 8007e2c:	42a9      	cmp	r1, r5
 8007e2e:	d904      	bls.n	8007e3a <_malloc_r+0x26>
 8007e30:	230c      	movs	r3, #12
 8007e32:	6033      	str	r3, [r6, #0]
 8007e34:	2000      	movs	r0, #0
 8007e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f10 <_malloc_r+0xfc>
 8007e3e:	f000 f869 	bl	8007f14 <__malloc_lock>
 8007e42:	f8d8 3000 	ldr.w	r3, [r8]
 8007e46:	461c      	mov	r4, r3
 8007e48:	bb44      	cbnz	r4, 8007e9c <_malloc_r+0x88>
 8007e4a:	4629      	mov	r1, r5
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	f7ff ffbf 	bl	8007dd0 <sbrk_aligned>
 8007e52:	1c43      	adds	r3, r0, #1
 8007e54:	4604      	mov	r4, r0
 8007e56:	d158      	bne.n	8007f0a <_malloc_r+0xf6>
 8007e58:	f8d8 4000 	ldr.w	r4, [r8]
 8007e5c:	4627      	mov	r7, r4
 8007e5e:	2f00      	cmp	r7, #0
 8007e60:	d143      	bne.n	8007eea <_malloc_r+0xd6>
 8007e62:	2c00      	cmp	r4, #0
 8007e64:	d04b      	beq.n	8007efe <_malloc_r+0xea>
 8007e66:	6823      	ldr	r3, [r4, #0]
 8007e68:	4639      	mov	r1, r7
 8007e6a:	4630      	mov	r0, r6
 8007e6c:	eb04 0903 	add.w	r9, r4, r3
 8007e70:	f000 fc8e 	bl	8008790 <_sbrk_r>
 8007e74:	4581      	cmp	r9, r0
 8007e76:	d142      	bne.n	8007efe <_malloc_r+0xea>
 8007e78:	6821      	ldr	r1, [r4, #0]
 8007e7a:	1a6d      	subs	r5, r5, r1
 8007e7c:	4629      	mov	r1, r5
 8007e7e:	4630      	mov	r0, r6
 8007e80:	f7ff ffa6 	bl	8007dd0 <sbrk_aligned>
 8007e84:	3001      	adds	r0, #1
 8007e86:	d03a      	beq.n	8007efe <_malloc_r+0xea>
 8007e88:	6823      	ldr	r3, [r4, #0]
 8007e8a:	442b      	add	r3, r5
 8007e8c:	6023      	str	r3, [r4, #0]
 8007e8e:	f8d8 3000 	ldr.w	r3, [r8]
 8007e92:	685a      	ldr	r2, [r3, #4]
 8007e94:	bb62      	cbnz	r2, 8007ef0 <_malloc_r+0xdc>
 8007e96:	f8c8 7000 	str.w	r7, [r8]
 8007e9a:	e00f      	b.n	8007ebc <_malloc_r+0xa8>
 8007e9c:	6822      	ldr	r2, [r4, #0]
 8007e9e:	1b52      	subs	r2, r2, r5
 8007ea0:	d420      	bmi.n	8007ee4 <_malloc_r+0xd0>
 8007ea2:	2a0b      	cmp	r2, #11
 8007ea4:	d917      	bls.n	8007ed6 <_malloc_r+0xc2>
 8007ea6:	1961      	adds	r1, r4, r5
 8007ea8:	42a3      	cmp	r3, r4
 8007eaa:	6025      	str	r5, [r4, #0]
 8007eac:	bf18      	it	ne
 8007eae:	6059      	strne	r1, [r3, #4]
 8007eb0:	6863      	ldr	r3, [r4, #4]
 8007eb2:	bf08      	it	eq
 8007eb4:	f8c8 1000 	streq.w	r1, [r8]
 8007eb8:	5162      	str	r2, [r4, r5]
 8007eba:	604b      	str	r3, [r1, #4]
 8007ebc:	4630      	mov	r0, r6
 8007ebe:	f000 f82f 	bl	8007f20 <__malloc_unlock>
 8007ec2:	f104 000b 	add.w	r0, r4, #11
 8007ec6:	1d23      	adds	r3, r4, #4
 8007ec8:	f020 0007 	bic.w	r0, r0, #7
 8007ecc:	1ac2      	subs	r2, r0, r3
 8007ece:	bf1c      	itt	ne
 8007ed0:	1a1b      	subne	r3, r3, r0
 8007ed2:	50a3      	strne	r3, [r4, r2]
 8007ed4:	e7af      	b.n	8007e36 <_malloc_r+0x22>
 8007ed6:	6862      	ldr	r2, [r4, #4]
 8007ed8:	42a3      	cmp	r3, r4
 8007eda:	bf0c      	ite	eq
 8007edc:	f8c8 2000 	streq.w	r2, [r8]
 8007ee0:	605a      	strne	r2, [r3, #4]
 8007ee2:	e7eb      	b.n	8007ebc <_malloc_r+0xa8>
 8007ee4:	4623      	mov	r3, r4
 8007ee6:	6864      	ldr	r4, [r4, #4]
 8007ee8:	e7ae      	b.n	8007e48 <_malloc_r+0x34>
 8007eea:	463c      	mov	r4, r7
 8007eec:	687f      	ldr	r7, [r7, #4]
 8007eee:	e7b6      	b.n	8007e5e <_malloc_r+0x4a>
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	42a3      	cmp	r3, r4
 8007ef6:	d1fb      	bne.n	8007ef0 <_malloc_r+0xdc>
 8007ef8:	2300      	movs	r3, #0
 8007efa:	6053      	str	r3, [r2, #4]
 8007efc:	e7de      	b.n	8007ebc <_malloc_r+0xa8>
 8007efe:	230c      	movs	r3, #12
 8007f00:	6033      	str	r3, [r6, #0]
 8007f02:	4630      	mov	r0, r6
 8007f04:	f000 f80c 	bl	8007f20 <__malloc_unlock>
 8007f08:	e794      	b.n	8007e34 <_malloc_r+0x20>
 8007f0a:	6005      	str	r5, [r0, #0]
 8007f0c:	e7d6      	b.n	8007ebc <_malloc_r+0xa8>
 8007f0e:	bf00      	nop
 8007f10:	20001d78 	.word	0x20001d78

08007f14 <__malloc_lock>:
 8007f14:	4801      	ldr	r0, [pc, #4]	@ (8007f1c <__malloc_lock+0x8>)
 8007f16:	f7ff bf00 	b.w	8007d1a <__retarget_lock_acquire_recursive>
 8007f1a:	bf00      	nop
 8007f1c:	20001d70 	.word	0x20001d70

08007f20 <__malloc_unlock>:
 8007f20:	4801      	ldr	r0, [pc, #4]	@ (8007f28 <__malloc_unlock+0x8>)
 8007f22:	f7ff befb 	b.w	8007d1c <__retarget_lock_release_recursive>
 8007f26:	bf00      	nop
 8007f28:	20001d70 	.word	0x20001d70

08007f2c <__sfputc_r>:
 8007f2c:	6893      	ldr	r3, [r2, #8]
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	b410      	push	{r4}
 8007f34:	6093      	str	r3, [r2, #8]
 8007f36:	da08      	bge.n	8007f4a <__sfputc_r+0x1e>
 8007f38:	6994      	ldr	r4, [r2, #24]
 8007f3a:	42a3      	cmp	r3, r4
 8007f3c:	db01      	blt.n	8007f42 <__sfputc_r+0x16>
 8007f3e:	290a      	cmp	r1, #10
 8007f40:	d103      	bne.n	8007f4a <__sfputc_r+0x1e>
 8007f42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f46:	f7ff bd7c 	b.w	8007a42 <__swbuf_r>
 8007f4a:	6813      	ldr	r3, [r2, #0]
 8007f4c:	1c58      	adds	r0, r3, #1
 8007f4e:	6010      	str	r0, [r2, #0]
 8007f50:	7019      	strb	r1, [r3, #0]
 8007f52:	4608      	mov	r0, r1
 8007f54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f58:	4770      	bx	lr

08007f5a <__sfputs_r>:
 8007f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f5c:	4606      	mov	r6, r0
 8007f5e:	460f      	mov	r7, r1
 8007f60:	4614      	mov	r4, r2
 8007f62:	18d5      	adds	r5, r2, r3
 8007f64:	42ac      	cmp	r4, r5
 8007f66:	d101      	bne.n	8007f6c <__sfputs_r+0x12>
 8007f68:	2000      	movs	r0, #0
 8007f6a:	e007      	b.n	8007f7c <__sfputs_r+0x22>
 8007f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f70:	463a      	mov	r2, r7
 8007f72:	4630      	mov	r0, r6
 8007f74:	f7ff ffda 	bl	8007f2c <__sfputc_r>
 8007f78:	1c43      	adds	r3, r0, #1
 8007f7a:	d1f3      	bne.n	8007f64 <__sfputs_r+0xa>
 8007f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f80 <_vfiprintf_r>:
 8007f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f84:	460d      	mov	r5, r1
 8007f86:	b09d      	sub	sp, #116	@ 0x74
 8007f88:	4614      	mov	r4, r2
 8007f8a:	4698      	mov	r8, r3
 8007f8c:	4606      	mov	r6, r0
 8007f8e:	b118      	cbz	r0, 8007f98 <_vfiprintf_r+0x18>
 8007f90:	6a03      	ldr	r3, [r0, #32]
 8007f92:	b90b      	cbnz	r3, 8007f98 <_vfiprintf_r+0x18>
 8007f94:	f7ff fc64 	bl	8007860 <__sinit>
 8007f98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f9a:	07d9      	lsls	r1, r3, #31
 8007f9c:	d405      	bmi.n	8007faa <_vfiprintf_r+0x2a>
 8007f9e:	89ab      	ldrh	r3, [r5, #12]
 8007fa0:	059a      	lsls	r2, r3, #22
 8007fa2:	d402      	bmi.n	8007faa <_vfiprintf_r+0x2a>
 8007fa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fa6:	f7ff feb8 	bl	8007d1a <__retarget_lock_acquire_recursive>
 8007faa:	89ab      	ldrh	r3, [r5, #12]
 8007fac:	071b      	lsls	r3, r3, #28
 8007fae:	d501      	bpl.n	8007fb4 <_vfiprintf_r+0x34>
 8007fb0:	692b      	ldr	r3, [r5, #16]
 8007fb2:	b99b      	cbnz	r3, 8007fdc <_vfiprintf_r+0x5c>
 8007fb4:	4629      	mov	r1, r5
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	f7ff fd82 	bl	8007ac0 <__swsetup_r>
 8007fbc:	b170      	cbz	r0, 8007fdc <_vfiprintf_r+0x5c>
 8007fbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fc0:	07dc      	lsls	r4, r3, #31
 8007fc2:	d504      	bpl.n	8007fce <_vfiprintf_r+0x4e>
 8007fc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007fc8:	b01d      	add	sp, #116	@ 0x74
 8007fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fce:	89ab      	ldrh	r3, [r5, #12]
 8007fd0:	0598      	lsls	r0, r3, #22
 8007fd2:	d4f7      	bmi.n	8007fc4 <_vfiprintf_r+0x44>
 8007fd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fd6:	f7ff fea1 	bl	8007d1c <__retarget_lock_release_recursive>
 8007fda:	e7f3      	b.n	8007fc4 <_vfiprintf_r+0x44>
 8007fdc:	2300      	movs	r3, #0
 8007fde:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fe0:	2320      	movs	r3, #32
 8007fe2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007fe6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fea:	2330      	movs	r3, #48	@ 0x30
 8007fec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800819c <_vfiprintf_r+0x21c>
 8007ff0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ff4:	f04f 0901 	mov.w	r9, #1
 8007ff8:	4623      	mov	r3, r4
 8007ffa:	469a      	mov	sl, r3
 8007ffc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008000:	b10a      	cbz	r2, 8008006 <_vfiprintf_r+0x86>
 8008002:	2a25      	cmp	r2, #37	@ 0x25
 8008004:	d1f9      	bne.n	8007ffa <_vfiprintf_r+0x7a>
 8008006:	ebba 0b04 	subs.w	fp, sl, r4
 800800a:	d00b      	beq.n	8008024 <_vfiprintf_r+0xa4>
 800800c:	465b      	mov	r3, fp
 800800e:	4622      	mov	r2, r4
 8008010:	4629      	mov	r1, r5
 8008012:	4630      	mov	r0, r6
 8008014:	f7ff ffa1 	bl	8007f5a <__sfputs_r>
 8008018:	3001      	adds	r0, #1
 800801a:	f000 80a7 	beq.w	800816c <_vfiprintf_r+0x1ec>
 800801e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008020:	445a      	add	r2, fp
 8008022:	9209      	str	r2, [sp, #36]	@ 0x24
 8008024:	f89a 3000 	ldrb.w	r3, [sl]
 8008028:	2b00      	cmp	r3, #0
 800802a:	f000 809f 	beq.w	800816c <_vfiprintf_r+0x1ec>
 800802e:	2300      	movs	r3, #0
 8008030:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008034:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008038:	f10a 0a01 	add.w	sl, sl, #1
 800803c:	9304      	str	r3, [sp, #16]
 800803e:	9307      	str	r3, [sp, #28]
 8008040:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008044:	931a      	str	r3, [sp, #104]	@ 0x68
 8008046:	4654      	mov	r4, sl
 8008048:	2205      	movs	r2, #5
 800804a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800804e:	4853      	ldr	r0, [pc, #332]	@ (800819c <_vfiprintf_r+0x21c>)
 8008050:	f7f8 f896 	bl	8000180 <memchr>
 8008054:	9a04      	ldr	r2, [sp, #16]
 8008056:	b9d8      	cbnz	r0, 8008090 <_vfiprintf_r+0x110>
 8008058:	06d1      	lsls	r1, r2, #27
 800805a:	bf44      	itt	mi
 800805c:	2320      	movmi	r3, #32
 800805e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008062:	0713      	lsls	r3, r2, #28
 8008064:	bf44      	itt	mi
 8008066:	232b      	movmi	r3, #43	@ 0x2b
 8008068:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800806c:	f89a 3000 	ldrb.w	r3, [sl]
 8008070:	2b2a      	cmp	r3, #42	@ 0x2a
 8008072:	d015      	beq.n	80080a0 <_vfiprintf_r+0x120>
 8008074:	9a07      	ldr	r2, [sp, #28]
 8008076:	4654      	mov	r4, sl
 8008078:	2000      	movs	r0, #0
 800807a:	f04f 0c0a 	mov.w	ip, #10
 800807e:	4621      	mov	r1, r4
 8008080:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008084:	3b30      	subs	r3, #48	@ 0x30
 8008086:	2b09      	cmp	r3, #9
 8008088:	d94b      	bls.n	8008122 <_vfiprintf_r+0x1a2>
 800808a:	b1b0      	cbz	r0, 80080ba <_vfiprintf_r+0x13a>
 800808c:	9207      	str	r2, [sp, #28]
 800808e:	e014      	b.n	80080ba <_vfiprintf_r+0x13a>
 8008090:	eba0 0308 	sub.w	r3, r0, r8
 8008094:	fa09 f303 	lsl.w	r3, r9, r3
 8008098:	4313      	orrs	r3, r2
 800809a:	9304      	str	r3, [sp, #16]
 800809c:	46a2      	mov	sl, r4
 800809e:	e7d2      	b.n	8008046 <_vfiprintf_r+0xc6>
 80080a0:	9b03      	ldr	r3, [sp, #12]
 80080a2:	1d19      	adds	r1, r3, #4
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	9103      	str	r1, [sp, #12]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	bfbb      	ittet	lt
 80080ac:	425b      	neglt	r3, r3
 80080ae:	f042 0202 	orrlt.w	r2, r2, #2
 80080b2:	9307      	strge	r3, [sp, #28]
 80080b4:	9307      	strlt	r3, [sp, #28]
 80080b6:	bfb8      	it	lt
 80080b8:	9204      	strlt	r2, [sp, #16]
 80080ba:	7823      	ldrb	r3, [r4, #0]
 80080bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80080be:	d10a      	bne.n	80080d6 <_vfiprintf_r+0x156>
 80080c0:	7863      	ldrb	r3, [r4, #1]
 80080c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80080c4:	d132      	bne.n	800812c <_vfiprintf_r+0x1ac>
 80080c6:	9b03      	ldr	r3, [sp, #12]
 80080c8:	1d1a      	adds	r2, r3, #4
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	9203      	str	r2, [sp, #12]
 80080ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80080d2:	3402      	adds	r4, #2
 80080d4:	9305      	str	r3, [sp, #20]
 80080d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80081ac <_vfiprintf_r+0x22c>
 80080da:	7821      	ldrb	r1, [r4, #0]
 80080dc:	2203      	movs	r2, #3
 80080de:	4650      	mov	r0, sl
 80080e0:	f7f8 f84e 	bl	8000180 <memchr>
 80080e4:	b138      	cbz	r0, 80080f6 <_vfiprintf_r+0x176>
 80080e6:	9b04      	ldr	r3, [sp, #16]
 80080e8:	eba0 000a 	sub.w	r0, r0, sl
 80080ec:	2240      	movs	r2, #64	@ 0x40
 80080ee:	4082      	lsls	r2, r0
 80080f0:	4313      	orrs	r3, r2
 80080f2:	3401      	adds	r4, #1
 80080f4:	9304      	str	r3, [sp, #16]
 80080f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080fa:	4829      	ldr	r0, [pc, #164]	@ (80081a0 <_vfiprintf_r+0x220>)
 80080fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008100:	2206      	movs	r2, #6
 8008102:	f7f8 f83d 	bl	8000180 <memchr>
 8008106:	2800      	cmp	r0, #0
 8008108:	d03f      	beq.n	800818a <_vfiprintf_r+0x20a>
 800810a:	4b26      	ldr	r3, [pc, #152]	@ (80081a4 <_vfiprintf_r+0x224>)
 800810c:	bb1b      	cbnz	r3, 8008156 <_vfiprintf_r+0x1d6>
 800810e:	9b03      	ldr	r3, [sp, #12]
 8008110:	3307      	adds	r3, #7
 8008112:	f023 0307 	bic.w	r3, r3, #7
 8008116:	3308      	adds	r3, #8
 8008118:	9303      	str	r3, [sp, #12]
 800811a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800811c:	443b      	add	r3, r7
 800811e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008120:	e76a      	b.n	8007ff8 <_vfiprintf_r+0x78>
 8008122:	fb0c 3202 	mla	r2, ip, r2, r3
 8008126:	460c      	mov	r4, r1
 8008128:	2001      	movs	r0, #1
 800812a:	e7a8      	b.n	800807e <_vfiprintf_r+0xfe>
 800812c:	2300      	movs	r3, #0
 800812e:	3401      	adds	r4, #1
 8008130:	9305      	str	r3, [sp, #20]
 8008132:	4619      	mov	r1, r3
 8008134:	f04f 0c0a 	mov.w	ip, #10
 8008138:	4620      	mov	r0, r4
 800813a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800813e:	3a30      	subs	r2, #48	@ 0x30
 8008140:	2a09      	cmp	r2, #9
 8008142:	d903      	bls.n	800814c <_vfiprintf_r+0x1cc>
 8008144:	2b00      	cmp	r3, #0
 8008146:	d0c6      	beq.n	80080d6 <_vfiprintf_r+0x156>
 8008148:	9105      	str	r1, [sp, #20]
 800814a:	e7c4      	b.n	80080d6 <_vfiprintf_r+0x156>
 800814c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008150:	4604      	mov	r4, r0
 8008152:	2301      	movs	r3, #1
 8008154:	e7f0      	b.n	8008138 <_vfiprintf_r+0x1b8>
 8008156:	ab03      	add	r3, sp, #12
 8008158:	9300      	str	r3, [sp, #0]
 800815a:	462a      	mov	r2, r5
 800815c:	4b12      	ldr	r3, [pc, #72]	@ (80081a8 <_vfiprintf_r+0x228>)
 800815e:	a904      	add	r1, sp, #16
 8008160:	4630      	mov	r0, r6
 8008162:	f3af 8000 	nop.w
 8008166:	4607      	mov	r7, r0
 8008168:	1c78      	adds	r0, r7, #1
 800816a:	d1d6      	bne.n	800811a <_vfiprintf_r+0x19a>
 800816c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800816e:	07d9      	lsls	r1, r3, #31
 8008170:	d405      	bmi.n	800817e <_vfiprintf_r+0x1fe>
 8008172:	89ab      	ldrh	r3, [r5, #12]
 8008174:	059a      	lsls	r2, r3, #22
 8008176:	d402      	bmi.n	800817e <_vfiprintf_r+0x1fe>
 8008178:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800817a:	f7ff fdcf 	bl	8007d1c <__retarget_lock_release_recursive>
 800817e:	89ab      	ldrh	r3, [r5, #12]
 8008180:	065b      	lsls	r3, r3, #25
 8008182:	f53f af1f 	bmi.w	8007fc4 <_vfiprintf_r+0x44>
 8008186:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008188:	e71e      	b.n	8007fc8 <_vfiprintf_r+0x48>
 800818a:	ab03      	add	r3, sp, #12
 800818c:	9300      	str	r3, [sp, #0]
 800818e:	462a      	mov	r2, r5
 8008190:	4b05      	ldr	r3, [pc, #20]	@ (80081a8 <_vfiprintf_r+0x228>)
 8008192:	a904      	add	r1, sp, #16
 8008194:	4630      	mov	r0, r6
 8008196:	f000 f879 	bl	800828c <_printf_i>
 800819a:	e7e4      	b.n	8008166 <_vfiprintf_r+0x1e6>
 800819c:	08008b98 	.word	0x08008b98
 80081a0:	08008ba2 	.word	0x08008ba2
 80081a4:	00000000 	.word	0x00000000
 80081a8:	08007f5b 	.word	0x08007f5b
 80081ac:	08008b9e 	.word	0x08008b9e

080081b0 <_printf_common>:
 80081b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081b4:	4616      	mov	r6, r2
 80081b6:	4698      	mov	r8, r3
 80081b8:	688a      	ldr	r2, [r1, #8]
 80081ba:	690b      	ldr	r3, [r1, #16]
 80081bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081c0:	4293      	cmp	r3, r2
 80081c2:	bfb8      	it	lt
 80081c4:	4613      	movlt	r3, r2
 80081c6:	6033      	str	r3, [r6, #0]
 80081c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80081cc:	4607      	mov	r7, r0
 80081ce:	460c      	mov	r4, r1
 80081d0:	b10a      	cbz	r2, 80081d6 <_printf_common+0x26>
 80081d2:	3301      	adds	r3, #1
 80081d4:	6033      	str	r3, [r6, #0]
 80081d6:	6823      	ldr	r3, [r4, #0]
 80081d8:	0699      	lsls	r1, r3, #26
 80081da:	bf42      	ittt	mi
 80081dc:	6833      	ldrmi	r3, [r6, #0]
 80081de:	3302      	addmi	r3, #2
 80081e0:	6033      	strmi	r3, [r6, #0]
 80081e2:	6825      	ldr	r5, [r4, #0]
 80081e4:	f015 0506 	ands.w	r5, r5, #6
 80081e8:	d106      	bne.n	80081f8 <_printf_common+0x48>
 80081ea:	f104 0a19 	add.w	sl, r4, #25
 80081ee:	68e3      	ldr	r3, [r4, #12]
 80081f0:	6832      	ldr	r2, [r6, #0]
 80081f2:	1a9b      	subs	r3, r3, r2
 80081f4:	42ab      	cmp	r3, r5
 80081f6:	dc26      	bgt.n	8008246 <_printf_common+0x96>
 80081f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80081fc:	6822      	ldr	r2, [r4, #0]
 80081fe:	3b00      	subs	r3, #0
 8008200:	bf18      	it	ne
 8008202:	2301      	movne	r3, #1
 8008204:	0692      	lsls	r2, r2, #26
 8008206:	d42b      	bmi.n	8008260 <_printf_common+0xb0>
 8008208:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800820c:	4641      	mov	r1, r8
 800820e:	4638      	mov	r0, r7
 8008210:	47c8      	blx	r9
 8008212:	3001      	adds	r0, #1
 8008214:	d01e      	beq.n	8008254 <_printf_common+0xa4>
 8008216:	6823      	ldr	r3, [r4, #0]
 8008218:	6922      	ldr	r2, [r4, #16]
 800821a:	f003 0306 	and.w	r3, r3, #6
 800821e:	2b04      	cmp	r3, #4
 8008220:	bf02      	ittt	eq
 8008222:	68e5      	ldreq	r5, [r4, #12]
 8008224:	6833      	ldreq	r3, [r6, #0]
 8008226:	1aed      	subeq	r5, r5, r3
 8008228:	68a3      	ldr	r3, [r4, #8]
 800822a:	bf0c      	ite	eq
 800822c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008230:	2500      	movne	r5, #0
 8008232:	4293      	cmp	r3, r2
 8008234:	bfc4      	itt	gt
 8008236:	1a9b      	subgt	r3, r3, r2
 8008238:	18ed      	addgt	r5, r5, r3
 800823a:	2600      	movs	r6, #0
 800823c:	341a      	adds	r4, #26
 800823e:	42b5      	cmp	r5, r6
 8008240:	d11a      	bne.n	8008278 <_printf_common+0xc8>
 8008242:	2000      	movs	r0, #0
 8008244:	e008      	b.n	8008258 <_printf_common+0xa8>
 8008246:	2301      	movs	r3, #1
 8008248:	4652      	mov	r2, sl
 800824a:	4641      	mov	r1, r8
 800824c:	4638      	mov	r0, r7
 800824e:	47c8      	blx	r9
 8008250:	3001      	adds	r0, #1
 8008252:	d103      	bne.n	800825c <_printf_common+0xac>
 8008254:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800825c:	3501      	adds	r5, #1
 800825e:	e7c6      	b.n	80081ee <_printf_common+0x3e>
 8008260:	18e1      	adds	r1, r4, r3
 8008262:	1c5a      	adds	r2, r3, #1
 8008264:	2030      	movs	r0, #48	@ 0x30
 8008266:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800826a:	4422      	add	r2, r4
 800826c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008270:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008274:	3302      	adds	r3, #2
 8008276:	e7c7      	b.n	8008208 <_printf_common+0x58>
 8008278:	2301      	movs	r3, #1
 800827a:	4622      	mov	r2, r4
 800827c:	4641      	mov	r1, r8
 800827e:	4638      	mov	r0, r7
 8008280:	47c8      	blx	r9
 8008282:	3001      	adds	r0, #1
 8008284:	d0e6      	beq.n	8008254 <_printf_common+0xa4>
 8008286:	3601      	adds	r6, #1
 8008288:	e7d9      	b.n	800823e <_printf_common+0x8e>
	...

0800828c <_printf_i>:
 800828c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008290:	7e0f      	ldrb	r7, [r1, #24]
 8008292:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008294:	2f78      	cmp	r7, #120	@ 0x78
 8008296:	4691      	mov	r9, r2
 8008298:	4680      	mov	r8, r0
 800829a:	460c      	mov	r4, r1
 800829c:	469a      	mov	sl, r3
 800829e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082a2:	d807      	bhi.n	80082b4 <_printf_i+0x28>
 80082a4:	2f62      	cmp	r7, #98	@ 0x62
 80082a6:	d80a      	bhi.n	80082be <_printf_i+0x32>
 80082a8:	2f00      	cmp	r7, #0
 80082aa:	f000 80d1 	beq.w	8008450 <_printf_i+0x1c4>
 80082ae:	2f58      	cmp	r7, #88	@ 0x58
 80082b0:	f000 80b8 	beq.w	8008424 <_printf_i+0x198>
 80082b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082bc:	e03a      	b.n	8008334 <_printf_i+0xa8>
 80082be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082c2:	2b15      	cmp	r3, #21
 80082c4:	d8f6      	bhi.n	80082b4 <_printf_i+0x28>
 80082c6:	a101      	add	r1, pc, #4	@ (adr r1, 80082cc <_printf_i+0x40>)
 80082c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082cc:	08008325 	.word	0x08008325
 80082d0:	08008339 	.word	0x08008339
 80082d4:	080082b5 	.word	0x080082b5
 80082d8:	080082b5 	.word	0x080082b5
 80082dc:	080082b5 	.word	0x080082b5
 80082e0:	080082b5 	.word	0x080082b5
 80082e4:	08008339 	.word	0x08008339
 80082e8:	080082b5 	.word	0x080082b5
 80082ec:	080082b5 	.word	0x080082b5
 80082f0:	080082b5 	.word	0x080082b5
 80082f4:	080082b5 	.word	0x080082b5
 80082f8:	08008437 	.word	0x08008437
 80082fc:	08008363 	.word	0x08008363
 8008300:	080083f1 	.word	0x080083f1
 8008304:	080082b5 	.word	0x080082b5
 8008308:	080082b5 	.word	0x080082b5
 800830c:	08008459 	.word	0x08008459
 8008310:	080082b5 	.word	0x080082b5
 8008314:	08008363 	.word	0x08008363
 8008318:	080082b5 	.word	0x080082b5
 800831c:	080082b5 	.word	0x080082b5
 8008320:	080083f9 	.word	0x080083f9
 8008324:	6833      	ldr	r3, [r6, #0]
 8008326:	1d1a      	adds	r2, r3, #4
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	6032      	str	r2, [r6, #0]
 800832c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008330:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008334:	2301      	movs	r3, #1
 8008336:	e09c      	b.n	8008472 <_printf_i+0x1e6>
 8008338:	6833      	ldr	r3, [r6, #0]
 800833a:	6820      	ldr	r0, [r4, #0]
 800833c:	1d19      	adds	r1, r3, #4
 800833e:	6031      	str	r1, [r6, #0]
 8008340:	0606      	lsls	r6, r0, #24
 8008342:	d501      	bpl.n	8008348 <_printf_i+0xbc>
 8008344:	681d      	ldr	r5, [r3, #0]
 8008346:	e003      	b.n	8008350 <_printf_i+0xc4>
 8008348:	0645      	lsls	r5, r0, #25
 800834a:	d5fb      	bpl.n	8008344 <_printf_i+0xb8>
 800834c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008350:	2d00      	cmp	r5, #0
 8008352:	da03      	bge.n	800835c <_printf_i+0xd0>
 8008354:	232d      	movs	r3, #45	@ 0x2d
 8008356:	426d      	negs	r5, r5
 8008358:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800835c:	4858      	ldr	r0, [pc, #352]	@ (80084c0 <_printf_i+0x234>)
 800835e:	230a      	movs	r3, #10
 8008360:	e011      	b.n	8008386 <_printf_i+0xfa>
 8008362:	6821      	ldr	r1, [r4, #0]
 8008364:	6833      	ldr	r3, [r6, #0]
 8008366:	0608      	lsls	r0, r1, #24
 8008368:	f853 5b04 	ldr.w	r5, [r3], #4
 800836c:	d402      	bmi.n	8008374 <_printf_i+0xe8>
 800836e:	0649      	lsls	r1, r1, #25
 8008370:	bf48      	it	mi
 8008372:	b2ad      	uxthmi	r5, r5
 8008374:	2f6f      	cmp	r7, #111	@ 0x6f
 8008376:	4852      	ldr	r0, [pc, #328]	@ (80084c0 <_printf_i+0x234>)
 8008378:	6033      	str	r3, [r6, #0]
 800837a:	bf14      	ite	ne
 800837c:	230a      	movne	r3, #10
 800837e:	2308      	moveq	r3, #8
 8008380:	2100      	movs	r1, #0
 8008382:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008386:	6866      	ldr	r6, [r4, #4]
 8008388:	60a6      	str	r6, [r4, #8]
 800838a:	2e00      	cmp	r6, #0
 800838c:	db05      	blt.n	800839a <_printf_i+0x10e>
 800838e:	6821      	ldr	r1, [r4, #0]
 8008390:	432e      	orrs	r6, r5
 8008392:	f021 0104 	bic.w	r1, r1, #4
 8008396:	6021      	str	r1, [r4, #0]
 8008398:	d04b      	beq.n	8008432 <_printf_i+0x1a6>
 800839a:	4616      	mov	r6, r2
 800839c:	fbb5 f1f3 	udiv	r1, r5, r3
 80083a0:	fb03 5711 	mls	r7, r3, r1, r5
 80083a4:	5dc7      	ldrb	r7, [r0, r7]
 80083a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083aa:	462f      	mov	r7, r5
 80083ac:	42bb      	cmp	r3, r7
 80083ae:	460d      	mov	r5, r1
 80083b0:	d9f4      	bls.n	800839c <_printf_i+0x110>
 80083b2:	2b08      	cmp	r3, #8
 80083b4:	d10b      	bne.n	80083ce <_printf_i+0x142>
 80083b6:	6823      	ldr	r3, [r4, #0]
 80083b8:	07df      	lsls	r7, r3, #31
 80083ba:	d508      	bpl.n	80083ce <_printf_i+0x142>
 80083bc:	6923      	ldr	r3, [r4, #16]
 80083be:	6861      	ldr	r1, [r4, #4]
 80083c0:	4299      	cmp	r1, r3
 80083c2:	bfde      	ittt	le
 80083c4:	2330      	movle	r3, #48	@ 0x30
 80083c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083ca:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80083ce:	1b92      	subs	r2, r2, r6
 80083d0:	6122      	str	r2, [r4, #16]
 80083d2:	f8cd a000 	str.w	sl, [sp]
 80083d6:	464b      	mov	r3, r9
 80083d8:	aa03      	add	r2, sp, #12
 80083da:	4621      	mov	r1, r4
 80083dc:	4640      	mov	r0, r8
 80083de:	f7ff fee7 	bl	80081b0 <_printf_common>
 80083e2:	3001      	adds	r0, #1
 80083e4:	d14a      	bne.n	800847c <_printf_i+0x1f0>
 80083e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80083ea:	b004      	add	sp, #16
 80083ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083f0:	6823      	ldr	r3, [r4, #0]
 80083f2:	f043 0320 	orr.w	r3, r3, #32
 80083f6:	6023      	str	r3, [r4, #0]
 80083f8:	4832      	ldr	r0, [pc, #200]	@ (80084c4 <_printf_i+0x238>)
 80083fa:	2778      	movs	r7, #120	@ 0x78
 80083fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008400:	6823      	ldr	r3, [r4, #0]
 8008402:	6831      	ldr	r1, [r6, #0]
 8008404:	061f      	lsls	r7, r3, #24
 8008406:	f851 5b04 	ldr.w	r5, [r1], #4
 800840a:	d402      	bmi.n	8008412 <_printf_i+0x186>
 800840c:	065f      	lsls	r7, r3, #25
 800840e:	bf48      	it	mi
 8008410:	b2ad      	uxthmi	r5, r5
 8008412:	6031      	str	r1, [r6, #0]
 8008414:	07d9      	lsls	r1, r3, #31
 8008416:	bf44      	itt	mi
 8008418:	f043 0320 	orrmi.w	r3, r3, #32
 800841c:	6023      	strmi	r3, [r4, #0]
 800841e:	b11d      	cbz	r5, 8008428 <_printf_i+0x19c>
 8008420:	2310      	movs	r3, #16
 8008422:	e7ad      	b.n	8008380 <_printf_i+0xf4>
 8008424:	4826      	ldr	r0, [pc, #152]	@ (80084c0 <_printf_i+0x234>)
 8008426:	e7e9      	b.n	80083fc <_printf_i+0x170>
 8008428:	6823      	ldr	r3, [r4, #0]
 800842a:	f023 0320 	bic.w	r3, r3, #32
 800842e:	6023      	str	r3, [r4, #0]
 8008430:	e7f6      	b.n	8008420 <_printf_i+0x194>
 8008432:	4616      	mov	r6, r2
 8008434:	e7bd      	b.n	80083b2 <_printf_i+0x126>
 8008436:	6833      	ldr	r3, [r6, #0]
 8008438:	6825      	ldr	r5, [r4, #0]
 800843a:	6961      	ldr	r1, [r4, #20]
 800843c:	1d18      	adds	r0, r3, #4
 800843e:	6030      	str	r0, [r6, #0]
 8008440:	062e      	lsls	r6, r5, #24
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	d501      	bpl.n	800844a <_printf_i+0x1be>
 8008446:	6019      	str	r1, [r3, #0]
 8008448:	e002      	b.n	8008450 <_printf_i+0x1c4>
 800844a:	0668      	lsls	r0, r5, #25
 800844c:	d5fb      	bpl.n	8008446 <_printf_i+0x1ba>
 800844e:	8019      	strh	r1, [r3, #0]
 8008450:	2300      	movs	r3, #0
 8008452:	6123      	str	r3, [r4, #16]
 8008454:	4616      	mov	r6, r2
 8008456:	e7bc      	b.n	80083d2 <_printf_i+0x146>
 8008458:	6833      	ldr	r3, [r6, #0]
 800845a:	1d1a      	adds	r2, r3, #4
 800845c:	6032      	str	r2, [r6, #0]
 800845e:	681e      	ldr	r6, [r3, #0]
 8008460:	6862      	ldr	r2, [r4, #4]
 8008462:	2100      	movs	r1, #0
 8008464:	4630      	mov	r0, r6
 8008466:	f7f7 fe8b 	bl	8000180 <memchr>
 800846a:	b108      	cbz	r0, 8008470 <_printf_i+0x1e4>
 800846c:	1b80      	subs	r0, r0, r6
 800846e:	6060      	str	r0, [r4, #4]
 8008470:	6863      	ldr	r3, [r4, #4]
 8008472:	6123      	str	r3, [r4, #16]
 8008474:	2300      	movs	r3, #0
 8008476:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800847a:	e7aa      	b.n	80083d2 <_printf_i+0x146>
 800847c:	6923      	ldr	r3, [r4, #16]
 800847e:	4632      	mov	r2, r6
 8008480:	4649      	mov	r1, r9
 8008482:	4640      	mov	r0, r8
 8008484:	47d0      	blx	sl
 8008486:	3001      	adds	r0, #1
 8008488:	d0ad      	beq.n	80083e6 <_printf_i+0x15a>
 800848a:	6823      	ldr	r3, [r4, #0]
 800848c:	079b      	lsls	r3, r3, #30
 800848e:	d413      	bmi.n	80084b8 <_printf_i+0x22c>
 8008490:	68e0      	ldr	r0, [r4, #12]
 8008492:	9b03      	ldr	r3, [sp, #12]
 8008494:	4298      	cmp	r0, r3
 8008496:	bfb8      	it	lt
 8008498:	4618      	movlt	r0, r3
 800849a:	e7a6      	b.n	80083ea <_printf_i+0x15e>
 800849c:	2301      	movs	r3, #1
 800849e:	4632      	mov	r2, r6
 80084a0:	4649      	mov	r1, r9
 80084a2:	4640      	mov	r0, r8
 80084a4:	47d0      	blx	sl
 80084a6:	3001      	adds	r0, #1
 80084a8:	d09d      	beq.n	80083e6 <_printf_i+0x15a>
 80084aa:	3501      	adds	r5, #1
 80084ac:	68e3      	ldr	r3, [r4, #12]
 80084ae:	9903      	ldr	r1, [sp, #12]
 80084b0:	1a5b      	subs	r3, r3, r1
 80084b2:	42ab      	cmp	r3, r5
 80084b4:	dcf2      	bgt.n	800849c <_printf_i+0x210>
 80084b6:	e7eb      	b.n	8008490 <_printf_i+0x204>
 80084b8:	2500      	movs	r5, #0
 80084ba:	f104 0619 	add.w	r6, r4, #25
 80084be:	e7f5      	b.n	80084ac <_printf_i+0x220>
 80084c0:	08008ba9 	.word	0x08008ba9
 80084c4:	08008bba 	.word	0x08008bba

080084c8 <__sflush_r>:
 80084c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084d0:	0716      	lsls	r6, r2, #28
 80084d2:	4605      	mov	r5, r0
 80084d4:	460c      	mov	r4, r1
 80084d6:	d454      	bmi.n	8008582 <__sflush_r+0xba>
 80084d8:	684b      	ldr	r3, [r1, #4]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	dc02      	bgt.n	80084e4 <__sflush_r+0x1c>
 80084de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	dd48      	ble.n	8008576 <__sflush_r+0xae>
 80084e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80084e6:	2e00      	cmp	r6, #0
 80084e8:	d045      	beq.n	8008576 <__sflush_r+0xae>
 80084ea:	2300      	movs	r3, #0
 80084ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80084f0:	682f      	ldr	r7, [r5, #0]
 80084f2:	6a21      	ldr	r1, [r4, #32]
 80084f4:	602b      	str	r3, [r5, #0]
 80084f6:	d030      	beq.n	800855a <__sflush_r+0x92>
 80084f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80084fa:	89a3      	ldrh	r3, [r4, #12]
 80084fc:	0759      	lsls	r1, r3, #29
 80084fe:	d505      	bpl.n	800850c <__sflush_r+0x44>
 8008500:	6863      	ldr	r3, [r4, #4]
 8008502:	1ad2      	subs	r2, r2, r3
 8008504:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008506:	b10b      	cbz	r3, 800850c <__sflush_r+0x44>
 8008508:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800850a:	1ad2      	subs	r2, r2, r3
 800850c:	2300      	movs	r3, #0
 800850e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008510:	6a21      	ldr	r1, [r4, #32]
 8008512:	4628      	mov	r0, r5
 8008514:	47b0      	blx	r6
 8008516:	1c43      	adds	r3, r0, #1
 8008518:	89a3      	ldrh	r3, [r4, #12]
 800851a:	d106      	bne.n	800852a <__sflush_r+0x62>
 800851c:	6829      	ldr	r1, [r5, #0]
 800851e:	291d      	cmp	r1, #29
 8008520:	d82b      	bhi.n	800857a <__sflush_r+0xb2>
 8008522:	4a2a      	ldr	r2, [pc, #168]	@ (80085cc <__sflush_r+0x104>)
 8008524:	40ca      	lsrs	r2, r1
 8008526:	07d6      	lsls	r6, r2, #31
 8008528:	d527      	bpl.n	800857a <__sflush_r+0xb2>
 800852a:	2200      	movs	r2, #0
 800852c:	6062      	str	r2, [r4, #4]
 800852e:	04d9      	lsls	r1, r3, #19
 8008530:	6922      	ldr	r2, [r4, #16]
 8008532:	6022      	str	r2, [r4, #0]
 8008534:	d504      	bpl.n	8008540 <__sflush_r+0x78>
 8008536:	1c42      	adds	r2, r0, #1
 8008538:	d101      	bne.n	800853e <__sflush_r+0x76>
 800853a:	682b      	ldr	r3, [r5, #0]
 800853c:	b903      	cbnz	r3, 8008540 <__sflush_r+0x78>
 800853e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008540:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008542:	602f      	str	r7, [r5, #0]
 8008544:	b1b9      	cbz	r1, 8008576 <__sflush_r+0xae>
 8008546:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800854a:	4299      	cmp	r1, r3
 800854c:	d002      	beq.n	8008554 <__sflush_r+0x8c>
 800854e:	4628      	mov	r0, r5
 8008550:	f7ff fbf4 	bl	8007d3c <_free_r>
 8008554:	2300      	movs	r3, #0
 8008556:	6363      	str	r3, [r4, #52]	@ 0x34
 8008558:	e00d      	b.n	8008576 <__sflush_r+0xae>
 800855a:	2301      	movs	r3, #1
 800855c:	4628      	mov	r0, r5
 800855e:	47b0      	blx	r6
 8008560:	4602      	mov	r2, r0
 8008562:	1c50      	adds	r0, r2, #1
 8008564:	d1c9      	bne.n	80084fa <__sflush_r+0x32>
 8008566:	682b      	ldr	r3, [r5, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d0c6      	beq.n	80084fa <__sflush_r+0x32>
 800856c:	2b1d      	cmp	r3, #29
 800856e:	d001      	beq.n	8008574 <__sflush_r+0xac>
 8008570:	2b16      	cmp	r3, #22
 8008572:	d11e      	bne.n	80085b2 <__sflush_r+0xea>
 8008574:	602f      	str	r7, [r5, #0]
 8008576:	2000      	movs	r0, #0
 8008578:	e022      	b.n	80085c0 <__sflush_r+0xf8>
 800857a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800857e:	b21b      	sxth	r3, r3
 8008580:	e01b      	b.n	80085ba <__sflush_r+0xf2>
 8008582:	690f      	ldr	r7, [r1, #16]
 8008584:	2f00      	cmp	r7, #0
 8008586:	d0f6      	beq.n	8008576 <__sflush_r+0xae>
 8008588:	0793      	lsls	r3, r2, #30
 800858a:	680e      	ldr	r6, [r1, #0]
 800858c:	bf08      	it	eq
 800858e:	694b      	ldreq	r3, [r1, #20]
 8008590:	600f      	str	r7, [r1, #0]
 8008592:	bf18      	it	ne
 8008594:	2300      	movne	r3, #0
 8008596:	eba6 0807 	sub.w	r8, r6, r7
 800859a:	608b      	str	r3, [r1, #8]
 800859c:	f1b8 0f00 	cmp.w	r8, #0
 80085a0:	dde9      	ble.n	8008576 <__sflush_r+0xae>
 80085a2:	6a21      	ldr	r1, [r4, #32]
 80085a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80085a6:	4643      	mov	r3, r8
 80085a8:	463a      	mov	r2, r7
 80085aa:	4628      	mov	r0, r5
 80085ac:	47b0      	blx	r6
 80085ae:	2800      	cmp	r0, #0
 80085b0:	dc08      	bgt.n	80085c4 <__sflush_r+0xfc>
 80085b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085ba:	81a3      	strh	r3, [r4, #12]
 80085bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80085c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085c4:	4407      	add	r7, r0
 80085c6:	eba8 0800 	sub.w	r8, r8, r0
 80085ca:	e7e7      	b.n	800859c <__sflush_r+0xd4>
 80085cc:	20400001 	.word	0x20400001

080085d0 <_fflush_r>:
 80085d0:	b538      	push	{r3, r4, r5, lr}
 80085d2:	690b      	ldr	r3, [r1, #16]
 80085d4:	4605      	mov	r5, r0
 80085d6:	460c      	mov	r4, r1
 80085d8:	b913      	cbnz	r3, 80085e0 <_fflush_r+0x10>
 80085da:	2500      	movs	r5, #0
 80085dc:	4628      	mov	r0, r5
 80085de:	bd38      	pop	{r3, r4, r5, pc}
 80085e0:	b118      	cbz	r0, 80085ea <_fflush_r+0x1a>
 80085e2:	6a03      	ldr	r3, [r0, #32]
 80085e4:	b90b      	cbnz	r3, 80085ea <_fflush_r+0x1a>
 80085e6:	f7ff f93b 	bl	8007860 <__sinit>
 80085ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d0f3      	beq.n	80085da <_fflush_r+0xa>
 80085f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80085f4:	07d0      	lsls	r0, r2, #31
 80085f6:	d404      	bmi.n	8008602 <_fflush_r+0x32>
 80085f8:	0599      	lsls	r1, r3, #22
 80085fa:	d402      	bmi.n	8008602 <_fflush_r+0x32>
 80085fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085fe:	f7ff fb8c 	bl	8007d1a <__retarget_lock_acquire_recursive>
 8008602:	4628      	mov	r0, r5
 8008604:	4621      	mov	r1, r4
 8008606:	f7ff ff5f 	bl	80084c8 <__sflush_r>
 800860a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800860c:	07da      	lsls	r2, r3, #31
 800860e:	4605      	mov	r5, r0
 8008610:	d4e4      	bmi.n	80085dc <_fflush_r+0xc>
 8008612:	89a3      	ldrh	r3, [r4, #12]
 8008614:	059b      	lsls	r3, r3, #22
 8008616:	d4e1      	bmi.n	80085dc <_fflush_r+0xc>
 8008618:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800861a:	f7ff fb7f 	bl	8007d1c <__retarget_lock_release_recursive>
 800861e:	e7dd      	b.n	80085dc <_fflush_r+0xc>

08008620 <__swhatbuf_r>:
 8008620:	b570      	push	{r4, r5, r6, lr}
 8008622:	460c      	mov	r4, r1
 8008624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008628:	2900      	cmp	r1, #0
 800862a:	b096      	sub	sp, #88	@ 0x58
 800862c:	4615      	mov	r5, r2
 800862e:	461e      	mov	r6, r3
 8008630:	da0d      	bge.n	800864e <__swhatbuf_r+0x2e>
 8008632:	89a3      	ldrh	r3, [r4, #12]
 8008634:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008638:	f04f 0100 	mov.w	r1, #0
 800863c:	bf14      	ite	ne
 800863e:	2340      	movne	r3, #64	@ 0x40
 8008640:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008644:	2000      	movs	r0, #0
 8008646:	6031      	str	r1, [r6, #0]
 8008648:	602b      	str	r3, [r5, #0]
 800864a:	b016      	add	sp, #88	@ 0x58
 800864c:	bd70      	pop	{r4, r5, r6, pc}
 800864e:	466a      	mov	r2, sp
 8008650:	f000 f87c 	bl	800874c <_fstat_r>
 8008654:	2800      	cmp	r0, #0
 8008656:	dbec      	blt.n	8008632 <__swhatbuf_r+0x12>
 8008658:	9901      	ldr	r1, [sp, #4]
 800865a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800865e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008662:	4259      	negs	r1, r3
 8008664:	4159      	adcs	r1, r3
 8008666:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800866a:	e7eb      	b.n	8008644 <__swhatbuf_r+0x24>

0800866c <__smakebuf_r>:
 800866c:	898b      	ldrh	r3, [r1, #12]
 800866e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008670:	079d      	lsls	r5, r3, #30
 8008672:	4606      	mov	r6, r0
 8008674:	460c      	mov	r4, r1
 8008676:	d507      	bpl.n	8008688 <__smakebuf_r+0x1c>
 8008678:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800867c:	6023      	str	r3, [r4, #0]
 800867e:	6123      	str	r3, [r4, #16]
 8008680:	2301      	movs	r3, #1
 8008682:	6163      	str	r3, [r4, #20]
 8008684:	b003      	add	sp, #12
 8008686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008688:	ab01      	add	r3, sp, #4
 800868a:	466a      	mov	r2, sp
 800868c:	f7ff ffc8 	bl	8008620 <__swhatbuf_r>
 8008690:	9f00      	ldr	r7, [sp, #0]
 8008692:	4605      	mov	r5, r0
 8008694:	4639      	mov	r1, r7
 8008696:	4630      	mov	r0, r6
 8008698:	f7ff fbbc 	bl	8007e14 <_malloc_r>
 800869c:	b948      	cbnz	r0, 80086b2 <__smakebuf_r+0x46>
 800869e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086a2:	059a      	lsls	r2, r3, #22
 80086a4:	d4ee      	bmi.n	8008684 <__smakebuf_r+0x18>
 80086a6:	f023 0303 	bic.w	r3, r3, #3
 80086aa:	f043 0302 	orr.w	r3, r3, #2
 80086ae:	81a3      	strh	r3, [r4, #12]
 80086b0:	e7e2      	b.n	8008678 <__smakebuf_r+0xc>
 80086b2:	89a3      	ldrh	r3, [r4, #12]
 80086b4:	6020      	str	r0, [r4, #0]
 80086b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086ba:	81a3      	strh	r3, [r4, #12]
 80086bc:	9b01      	ldr	r3, [sp, #4]
 80086be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80086c2:	b15b      	cbz	r3, 80086dc <__smakebuf_r+0x70>
 80086c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086c8:	4630      	mov	r0, r6
 80086ca:	f000 f851 	bl	8008770 <_isatty_r>
 80086ce:	b128      	cbz	r0, 80086dc <__smakebuf_r+0x70>
 80086d0:	89a3      	ldrh	r3, [r4, #12]
 80086d2:	f023 0303 	bic.w	r3, r3, #3
 80086d6:	f043 0301 	orr.w	r3, r3, #1
 80086da:	81a3      	strh	r3, [r4, #12]
 80086dc:	89a3      	ldrh	r3, [r4, #12]
 80086de:	431d      	orrs	r5, r3
 80086e0:	81a5      	strh	r5, [r4, #12]
 80086e2:	e7cf      	b.n	8008684 <__smakebuf_r+0x18>

080086e4 <_putc_r>:
 80086e4:	b570      	push	{r4, r5, r6, lr}
 80086e6:	460d      	mov	r5, r1
 80086e8:	4614      	mov	r4, r2
 80086ea:	4606      	mov	r6, r0
 80086ec:	b118      	cbz	r0, 80086f6 <_putc_r+0x12>
 80086ee:	6a03      	ldr	r3, [r0, #32]
 80086f0:	b90b      	cbnz	r3, 80086f6 <_putc_r+0x12>
 80086f2:	f7ff f8b5 	bl	8007860 <__sinit>
 80086f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086f8:	07d8      	lsls	r0, r3, #31
 80086fa:	d405      	bmi.n	8008708 <_putc_r+0x24>
 80086fc:	89a3      	ldrh	r3, [r4, #12]
 80086fe:	0599      	lsls	r1, r3, #22
 8008700:	d402      	bmi.n	8008708 <_putc_r+0x24>
 8008702:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008704:	f7ff fb09 	bl	8007d1a <__retarget_lock_acquire_recursive>
 8008708:	68a3      	ldr	r3, [r4, #8]
 800870a:	3b01      	subs	r3, #1
 800870c:	2b00      	cmp	r3, #0
 800870e:	60a3      	str	r3, [r4, #8]
 8008710:	da05      	bge.n	800871e <_putc_r+0x3a>
 8008712:	69a2      	ldr	r2, [r4, #24]
 8008714:	4293      	cmp	r3, r2
 8008716:	db12      	blt.n	800873e <_putc_r+0x5a>
 8008718:	b2eb      	uxtb	r3, r5
 800871a:	2b0a      	cmp	r3, #10
 800871c:	d00f      	beq.n	800873e <_putc_r+0x5a>
 800871e:	6823      	ldr	r3, [r4, #0]
 8008720:	1c5a      	adds	r2, r3, #1
 8008722:	6022      	str	r2, [r4, #0]
 8008724:	701d      	strb	r5, [r3, #0]
 8008726:	b2ed      	uxtb	r5, r5
 8008728:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800872a:	07da      	lsls	r2, r3, #31
 800872c:	d405      	bmi.n	800873a <_putc_r+0x56>
 800872e:	89a3      	ldrh	r3, [r4, #12]
 8008730:	059b      	lsls	r3, r3, #22
 8008732:	d402      	bmi.n	800873a <_putc_r+0x56>
 8008734:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008736:	f7ff faf1 	bl	8007d1c <__retarget_lock_release_recursive>
 800873a:	4628      	mov	r0, r5
 800873c:	bd70      	pop	{r4, r5, r6, pc}
 800873e:	4629      	mov	r1, r5
 8008740:	4622      	mov	r2, r4
 8008742:	4630      	mov	r0, r6
 8008744:	f7ff f97d 	bl	8007a42 <__swbuf_r>
 8008748:	4605      	mov	r5, r0
 800874a:	e7ed      	b.n	8008728 <_putc_r+0x44>

0800874c <_fstat_r>:
 800874c:	b538      	push	{r3, r4, r5, lr}
 800874e:	4d07      	ldr	r5, [pc, #28]	@ (800876c <_fstat_r+0x20>)
 8008750:	2300      	movs	r3, #0
 8008752:	4604      	mov	r4, r0
 8008754:	4608      	mov	r0, r1
 8008756:	4611      	mov	r1, r2
 8008758:	602b      	str	r3, [r5, #0]
 800875a:	f7f8 fcfe 	bl	800115a <_fstat>
 800875e:	1c43      	adds	r3, r0, #1
 8008760:	d102      	bne.n	8008768 <_fstat_r+0x1c>
 8008762:	682b      	ldr	r3, [r5, #0]
 8008764:	b103      	cbz	r3, 8008768 <_fstat_r+0x1c>
 8008766:	6023      	str	r3, [r4, #0]
 8008768:	bd38      	pop	{r3, r4, r5, pc}
 800876a:	bf00      	nop
 800876c:	20001d6c 	.word	0x20001d6c

08008770 <_isatty_r>:
 8008770:	b538      	push	{r3, r4, r5, lr}
 8008772:	4d06      	ldr	r5, [pc, #24]	@ (800878c <_isatty_r+0x1c>)
 8008774:	2300      	movs	r3, #0
 8008776:	4604      	mov	r4, r0
 8008778:	4608      	mov	r0, r1
 800877a:	602b      	str	r3, [r5, #0]
 800877c:	f7f8 fcfd 	bl	800117a <_isatty>
 8008780:	1c43      	adds	r3, r0, #1
 8008782:	d102      	bne.n	800878a <_isatty_r+0x1a>
 8008784:	682b      	ldr	r3, [r5, #0]
 8008786:	b103      	cbz	r3, 800878a <_isatty_r+0x1a>
 8008788:	6023      	str	r3, [r4, #0]
 800878a:	bd38      	pop	{r3, r4, r5, pc}
 800878c:	20001d6c 	.word	0x20001d6c

08008790 <_sbrk_r>:
 8008790:	b538      	push	{r3, r4, r5, lr}
 8008792:	4d06      	ldr	r5, [pc, #24]	@ (80087ac <_sbrk_r+0x1c>)
 8008794:	2300      	movs	r3, #0
 8008796:	4604      	mov	r4, r0
 8008798:	4608      	mov	r0, r1
 800879a:	602b      	str	r3, [r5, #0]
 800879c:	f7f8 fd06 	bl	80011ac <_sbrk>
 80087a0:	1c43      	adds	r3, r0, #1
 80087a2:	d102      	bne.n	80087aa <_sbrk_r+0x1a>
 80087a4:	682b      	ldr	r3, [r5, #0]
 80087a6:	b103      	cbz	r3, 80087aa <_sbrk_r+0x1a>
 80087a8:	6023      	str	r3, [r4, #0]
 80087aa:	bd38      	pop	{r3, r4, r5, pc}
 80087ac:	20001d6c 	.word	0x20001d6c

080087b0 <_init>:
 80087b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b2:	bf00      	nop
 80087b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087b6:	bc08      	pop	{r3}
 80087b8:	469e      	mov	lr, r3
 80087ba:	4770      	bx	lr

080087bc <_fini>:
 80087bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087be:	bf00      	nop
 80087c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087c2:	bc08      	pop	{r3}
 80087c4:	469e      	mov	lr, r3
 80087c6:	4770      	bx	lr
