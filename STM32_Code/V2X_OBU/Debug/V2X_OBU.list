
V2X_OBU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dd0  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  08008f10  08008f10  00009f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009208  08009208  0000a208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009210  08009210  0000a210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009214  08009214  0000a214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000007c  20000008  08009218  0000b008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001ccc  20000084  08009294  0000b084  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001d50  08009294  0000bd50  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000b084  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023c5f  00000000  00000000  0000b0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000471c  00000000  00000000  0002ed13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002330  00000000  00000000  00033430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001b26  00000000  00000000  00035760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000056ac  00000000  00000000  00037286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000201d4  00000000  00000000  0003c932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f086d  00000000  00000000  0005cb06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0014d373  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009d94  00000000  00000000  0014d3b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  0015714c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000084 	.word	0x20000084
 800015c:	00000000 	.word	0x00000000
 8000160:	08008ef8 	.word	0x08008ef8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000088 	.word	0x20000088
 800017c:	08008ef8 	.word	0x08008ef8

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000554:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000558:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800055c:	f003 0301 	and.w	r3, r3, #1
 8000560:	2b00      	cmp	r3, #0
 8000562:	d013      	beq.n	800058c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000564:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000568:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800056c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000570:	2b00      	cmp	r3, #0
 8000572:	d00b      	beq.n	800058c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000574:	e000      	b.n	8000578 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000576:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000578:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d0f9      	beq.n	8000576 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000582:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	b2d2      	uxtb	r2, r2
 800058a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800058c:	687b      	ldr	r3, [r7, #4]
}
 800058e:	4618      	mov	r0, r3
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800059a:	b480      	push	{r7}
 800059c:	b085      	sub	sp, #20
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4313      	orrs	r3, r2
 80005b0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4013      	ands	r3, r2
 80005bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005be:	68fb      	ldr	r3, [r7, #12]
}
 80005c0:	bf00      	nop
 80005c2:	3714      	adds	r7, #20
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <ValidateReceivedData>:
#define SPI_TIMEOUT_MS 1000
volatile Item receivedData;
uint32_t spi_timeout_counter = 0;

// Function to validate received data
uint8_t ValidateReceivedData(Item *data) {
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 6; i++) {
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	e00b      	b.n	80005f2 <ValidateReceivedData+0x26>
        if (data->MacAddress[i] != 0) {
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4413      	add	r3, r2
 80005e0:	3304      	adds	r3, #4
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <ValidateReceivedData+0x20>
            return 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	e006      	b.n	80005fa <ValidateReceivedData+0x2e>
    for (int i = 0; i < 6; i++) {
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	3301      	adds	r3, #1
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	2b05      	cmp	r3, #5
 80005f6:	ddf0      	ble.n	80005da <ValidateReceivedData+0xe>
        }
    }
    return 0;
 80005f8:	2300      	movs	r3, #0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
	...

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 fddc 	bl	80011c8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f870 	bl	80006f4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000614:	f000 f8c6 	bl	80007a4 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000618:	f000 f91c 	bl	8000854 <MX_GPIO_Init>
  MX_SPI1_Init();
 800061c:	f000 f8e0 	bl	80007e0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  printf("STM32 will start receiving data via SPI...\n");
 8000620:	4828      	ldr	r0, [pc, #160]	@ (80006c4 <main+0xbc>)
 8000622:	f007 fd9b 	bl	800815c <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000626:	f004 fe83 	bl	8005330 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_TIMERS */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  SPIQueue = xQueueCreate(8, sizeof(Item));
 800062a:	2200      	movs	r2, #0
 800062c:	210a      	movs	r1, #10
 800062e:	2008      	movs	r0, #8
 8000630:	f005 f945 	bl	80058be <xQueueGenericCreate>
 8000634:	4603      	mov	r3, r0
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <main+0xc0>)
 8000638:	6013      	str	r3, [r2, #0]
  if (SPIQueue == NULL) {
 800063a:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <main+0xc0>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d101      	bne.n	8000646 <main+0x3e>
      Error_Handler(); // Handle queue creation failure
 8000642:	f000 fa36 	bl	8000ab2 <Error_Handler>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of SenderTask */
  SenderTaskHandle = osThreadNew(StartSenderTask, NULL, &SenderTask_attributes);
 8000646:	4a21      	ldr	r2, [pc, #132]	@ (80006cc <main+0xc4>)
 8000648:	2100      	movs	r1, #0
 800064a:	4821      	ldr	r0, [pc, #132]	@ (80006d0 <main+0xc8>)
 800064c:	f004 feba 	bl	80053c4 <osThreadNew>
 8000650:	4603      	mov	r3, r0
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <main+0xcc>)
 8000654:	6013      	str	r3, [r2, #0]

  /* creation of TskSPI */
  TskSPIHandle = osThreadNew(StartTskSPI, NULL, &TskSPI_attributes);
 8000656:	4a20      	ldr	r2, [pc, #128]	@ (80006d8 <main+0xd0>)
 8000658:	2100      	movs	r1, #0
 800065a:	4820      	ldr	r0, [pc, #128]	@ (80006dc <main+0xd4>)
 800065c:	f004 feb2 	bl	80053c4 <osThreadNew>
 8000660:	4603      	mov	r3, r0
 8000662:	4a1f      	ldr	r2, [pc, #124]	@ (80006e0 <main+0xd8>)
 8000664:	6013      	str	r3, [r2, #0]

  /* creation of TskQueueCtrl */
  TskQueueCtrlHandle = osThreadNew(StartTskQueueCtl, NULL, &TskQueueCtrl_attributes);
 8000666:	4a1f      	ldr	r2, [pc, #124]	@ (80006e4 <main+0xdc>)
 8000668:	2100      	movs	r1, #0
 800066a:	481f      	ldr	r0, [pc, #124]	@ (80006e8 <main+0xe0>)
 800066c:	f004 feaa 	bl	80053c4 <osThreadNew>
 8000670:	4603      	mov	r3, r0
 8000672:	4a1e      	ldr	r2, [pc, #120]	@ (80006ec <main+0xe4>)
 8000674:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 8000676:	2000      	movs	r0, #0
 8000678:	f000 fcc0 	bl	8000ffc <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 800067c:	2001      	movs	r0, #1
 800067e:	f000 fcbd 	bl	8000ffc <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000682:	2002      	movs	r0, #2
 8000684:	f000 fcba 	bl	8000ffc <BSP_LED_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000688:	4b19      	ldr	r3, [pc, #100]	@ (80006f0 <main+0xe8>)
 800068a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800068e:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000690:	4b17      	ldr	r3, [pc, #92]	@ (80006f0 <main+0xe8>)
 8000692:	2200      	movs	r2, #0
 8000694:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000696:	4b16      	ldr	r3, [pc, #88]	@ (80006f0 <main+0xe8>)
 8000698:	2200      	movs	r2, #0
 800069a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800069c:	4b14      	ldr	r3, [pc, #80]	@ (80006f0 <main+0xe8>)
 800069e:	2200      	movs	r2, #0
 80006a0:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80006a2:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <main+0xe8>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80006a8:	4911      	ldr	r1, [pc, #68]	@ (80006f0 <main+0xe8>)
 80006aa:	2000      	movs	r0, #0
 80006ac:	f000 fcfa 	bl	80010a4 <BSP_COM_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <main+0xb2>
  {
    Error_Handler();
 80006b6:	f000 f9fc 	bl	8000ab2 <Error_Handler>
  }

  /* Start scheduler */
  osKernelStart();
 80006ba:	f004 fe5d 	bl	8005378 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006be:	bf00      	nop
 80006c0:	e7fd      	b.n	80006be <main+0xb6>
 80006c2:	bf00      	nop
 80006c4:	08008f34 	.word	0x08008f34
 80006c8:	20000130 	.word	0x20000130
 80006cc:	080090a8 	.word	0x080090a8
 80006d0:	08000931 	.word	0x08000931
 80006d4:	20000114 	.word	0x20000114
 80006d8:	080090cc 	.word	0x080090cc
 80006dc:	08000959 	.word	0x08000959
 80006e0:	20000118 	.word	0x20000118
 80006e4:	080090f0 	.word	0x080090f0
 80006e8:	08000a29 	.word	0x08000a29
 80006ec:	2000011c 	.word	0x2000011c
 80006f0:	200000a0 	.word	0x200000a0

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b09a      	sub	sp, #104	@ 0x68
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0320 	add.w	r3, r7, #32
 80006fe:	2248      	movs	r2, #72	@ 0x48
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f007 fe0a 	bl	800831c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]
 8000716:	615a      	str	r2, [r3, #20]
 8000718:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071a:	4b21      	ldr	r3, [pc, #132]	@ (80007a0 <SystemClock_Config+0xac>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000722:	4a1f      	ldr	r2, [pc, #124]	@ (80007a0 <SystemClock_Config+0xac>)
 8000724:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000728:	6013      	str	r3, [r2, #0]
 800072a:	4b1d      	ldr	r3, [pc, #116]	@ (80007a0 <SystemClock_Config+0xac>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000736:	2322      	movs	r3, #34	@ 0x22
 8000738:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800073e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000740:	2301      	movs	r3, #1
 8000742:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000744:	2340      	movs	r3, #64	@ 0x40
 8000746:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000748:	2300      	movs	r3, #0
 800074a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 800074c:	23a0      	movs	r3, #160	@ 0xa0
 800074e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000750:	2300      	movs	r3, #0
 8000752:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000754:	f107 0320 	add.w	r3, r7, #32
 8000758:	4618      	mov	r0, r3
 800075a:	f001 fd13 	bl	8002184 <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000764:	f000 f9a5 	bl	8000ab2 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000768:	236f      	movs	r3, #111	@ 0x6f
 800076a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2101      	movs	r1, #1
 8000788:	4618      	mov	r0, r3
 800078a:	f002 f86f 	bl	800286c <HAL_RCC_ClockConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000794:	f000 f98d 	bl	8000ab2 <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	3768      	adds	r7, #104	@ 0x68
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	58000400 	.word	0x58000400

080007a4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b094      	sub	sp, #80	@ 0x50
 80007a8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007aa:	463b      	mov	r3, r7
 80007ac:	2250      	movs	r2, #80	@ 0x50
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f007 fdb3 	bl	800831c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80007b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007ba:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80007bc:	2300      	movs	r3, #0
 80007be:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007c4:	463b      	mov	r3, r7
 80007c6:	4618      	mov	r0, r3
 80007c8:	f002 fcbf 	bl	800314a <HAL_RCCEx_PeriphCLKConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80007d2:	f000 f96e 	bl	8000ab2 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */
  /* USER CODE END Smps */
}
 80007d6:	bf00      	nop
 80007d8:	3750      	adds	r7, #80	@ 0x50
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007e4:	4b19      	ldr	r3, [pc, #100]	@ (800084c <MX_SPI1_Init+0x6c>)
 80007e6:	4a1a      	ldr	r2, [pc, #104]	@ (8000850 <MX_SPI1_Init+0x70>)
 80007e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80007ea:	4b18      	ldr	r3, [pc, #96]	@ (800084c <MX_SPI1_Init+0x6c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007f0:	4b16      	ldr	r3, [pc, #88]	@ (800084c <MX_SPI1_Init+0x6c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007f6:	4b15      	ldr	r3, [pc, #84]	@ (800084c <MX_SPI1_Init+0x6c>)
 80007f8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80007fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007fe:	4b13      	ldr	r3, [pc, #76]	@ (800084c <MX_SPI1_Init+0x6c>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000804:	4b11      	ldr	r3, [pc, #68]	@ (800084c <MX_SPI1_Init+0x6c>)
 8000806:	2200      	movs	r2, #0
 8000808:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800080a:	4b10      	ldr	r3, [pc, #64]	@ (800084c <MX_SPI1_Init+0x6c>)
 800080c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000810:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000812:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <MX_SPI1_Init+0x6c>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000818:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <MX_SPI1_Init+0x6c>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <MX_SPI1_Init+0x6c>)
 8000820:	2200      	movs	r2, #0
 8000822:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000824:	4b09      	ldr	r3, [pc, #36]	@ (800084c <MX_SPI1_Init+0x6c>)
 8000826:	2207      	movs	r2, #7
 8000828:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800082a:	4b08      	ldr	r3, [pc, #32]	@ (800084c <MX_SPI1_Init+0x6c>)
 800082c:	2200      	movs	r2, #0
 800082e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000830:	4b06      	ldr	r3, [pc, #24]	@ (800084c <MX_SPI1_Init+0x6c>)
 8000832:	2200      	movs	r2, #0
 8000834:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	@ (800084c <MX_SPI1_Init+0x6c>)
 8000838:	f002 ff0e 	bl	8003658 <HAL_SPI_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8000842:	f000 f936 	bl	8000ab2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200000b0 	.word	0x200000b0
 8000850:	40013000 	.word	0x40013000

08000854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000868:	2004      	movs	r0, #4
 800086a:	f7ff fe96 	bl	800059a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	2001      	movs	r0, #1
 8000870:	f7ff fe93 	bl	800059a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000874:	2008      	movs	r0, #8
 8000876:	f7ff fe90 	bl	800059a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	2002      	movs	r0, #2
 800087c:	f7ff fe8d 	bl	800059a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000880:	2310      	movs	r3, #16
 8000882:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	4619      	mov	r1, r3
 8000890:	4816      	ldr	r0, [pc, #88]	@ (80008ec <MX_GPIO_Init+0x98>)
 8000892:	f000 fe57 	bl	8001544 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8000896:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800089a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	2302      	movs	r3, #2
 800089e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80008a8:	230a      	movs	r3, #10
 80008aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	4619      	mov	r1, r3
 80008b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b4:	f000 fe46 	bl	8001544 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80008b8:	2303      	movs	r3, #3
 80008ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008bc:	2300      	movs	r3, #0
 80008be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	4619      	mov	r1, r3
 80008c8:	4809      	ldr	r0, [pc, #36]	@ (80008f0 <MX_GPIO_Init+0x9c>)
 80008ca:	f000 fe3b 	bl	8001544 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008ce:	2310      	movs	r3, #16
 80008d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	4619      	mov	r1, r3
 80008de:	4805      	ldr	r0, [pc, #20]	@ (80008f4 <MX_GPIO_Init+0xa0>)
 80008e0:	f000 fe30 	bl	8001544 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80008e4:	bf00      	nop
 80008e6:	3718      	adds	r7, #24
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	48000800 	.word	0x48000800
 80008f0:	48000c00 	.word	0x48000c00
 80008f4:	48000400 	.word	0x48000400

080008f8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	e009      	b.n	800091e <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	1c5a      	adds	r2, r3, #1
 800090e:	60ba      	str	r2, [r7, #8]
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fe1a 	bl	800054c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	3301      	adds	r3, #1
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	697a      	ldr	r2, [r7, #20]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	429a      	cmp	r2, r3
 8000924:	dbf1      	blt.n	800090a <_write+0x12>
  }
  return len;
 8000926:	687b      	ldr	r3, [r7, #4]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <StartSenderTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSenderTask */
void StartSenderTask(void *argument)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int i = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	printf("i : %d\n",i++);
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	1c5a      	adds	r2, r3, #1
 8000940:	60fa      	str	r2, [r7, #12]
 8000942:	4619      	mov	r1, r3
 8000944:	4803      	ldr	r0, [pc, #12]	@ (8000954 <StartSenderTask+0x24>)
 8000946:	f007 fba1 	bl	800808c <iprintf>
    osDelay(10);
 800094a:	200a      	movs	r0, #10
 800094c:	f004 fdcc 	bl	80054e8 <osDelay>
	printf("i : %d\n",i++);
 8000950:	bf00      	nop
 8000952:	e7f3      	b.n	800093c <StartSenderTask+0xc>
 8000954:	08008f60 	.word	0x08008f60

08000958 <StartTskSPI>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTskSPI */
void StartTskSPI(void *argument)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTskSPI */
  /* Infinite loop */
  for(;;)
  {
		HAL_StatusTypeDef status = HAL_SPI_Receive(&hspi1, (uint8_t *)&receivedData, sizeof(Item), 1000);
 8000960:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000964:	220a      	movs	r2, #10
 8000966:	4928      	ldr	r1, [pc, #160]	@ (8000a08 <StartTskSPI+0xb0>)
 8000968:	4828      	ldr	r0, [pc, #160]	@ (8000a0c <StartTskSPI+0xb4>)
 800096a:	f002 ff40 	bl	80037ee <HAL_SPI_Receive>
 800096e:	4603      	mov	r3, r0
 8000970:	73fb      	strb	r3, [r7, #15]
		if (status == HAL_OK) {
 8000972:	7bfb      	ldrb	r3, [r7, #15]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d11a      	bne.n	80009ae <StartTskSPI+0x56>
			BSP_LED_Toggle(LED_BLUE);
 8000978:	2000      	movs	r0, #0
 800097a:	f000 fb79 	bl	8001070 <BSP_LED_Toggle>
			osDelay(20);
 800097e:	2014      	movs	r0, #20
 8000980:	f004 fdb2 	bl	80054e8 <osDelay>
			spi_timeout_counter = 0;
 8000984:	4b22      	ldr	r3, [pc, #136]	@ (8000a10 <StartTskSPI+0xb8>)
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
			if (ValidateReceivedData((Item*)&receivedData)) {
 800098a:	481f      	ldr	r0, [pc, #124]	@ (8000a08 <StartTskSPI+0xb0>)
 800098c:	f7ff fe1e 	bl	80005cc <ValidateReceivedData>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d007      	beq.n	80009a6 <StartTskSPI+0x4e>
				xQueueSend(SPIQueue, &receivedData, 0);
 8000996:	4b1f      	ldr	r3, [pc, #124]	@ (8000a14 <StartTskSPI+0xbc>)
 8000998:	6818      	ldr	r0, [r3, #0]
 800099a:	2300      	movs	r3, #0
 800099c:	2200      	movs	r2, #0
 800099e:	491a      	ldr	r1, [pc, #104]	@ (8000a08 <StartTskSPI+0xb0>)
 80009a0:	f004 ffec 	bl	800597c <xQueueGenericSend>
 80009a4:	e7dc      	b.n	8000960 <StartTskSPI+0x8>
			} else {
				printf("SPI Warning - Received corrupted data with invalid MAC\n");
 80009a6:	481c      	ldr	r0, [pc, #112]	@ (8000a18 <StartTskSPI+0xc0>)
 80009a8:	f007 fbd8 	bl	800815c <puts>
 80009ac:	e7d8      	b.n	8000960 <StartTskSPI+0x8>
			}
		}
		else if (status == HAL_TIMEOUT) {
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
 80009b0:	2b03      	cmp	r3, #3
 80009b2:	d118      	bne.n	80009e6 <StartTskSPI+0x8e>
			spi_timeout_counter++;
 80009b4:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <StartTskSPI+0xb8>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	3301      	adds	r3, #1
 80009ba:	4a15      	ldr	r2, [pc, #84]	@ (8000a10 <StartTskSPI+0xb8>)
 80009bc:	6013      	str	r3, [r2, #0]
			if (spi_timeout_counter % 10 == 0) {
 80009be:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <StartTskSPI+0xb8>)
 80009c0:	6819      	ldr	r1, [r3, #0]
 80009c2:	4b16      	ldr	r3, [pc, #88]	@ (8000a1c <StartTskSPI+0xc4>)
 80009c4:	fba3 2301 	umull	r2, r3, r3, r1
 80009c8:	08da      	lsrs	r2, r3, #3
 80009ca:	4613      	mov	r3, r2
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	4413      	add	r3, r2
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	1aca      	subs	r2, r1, r3
 80009d4:	2a00      	cmp	r2, #0
 80009d6:	d1c3      	bne.n	8000960 <StartTskSPI+0x8>
				printf("SPI Waiting for data... (%lu)\n", spi_timeout_counter);
 80009d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000a10 <StartTskSPI+0xb8>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4619      	mov	r1, r3
 80009de:	4810      	ldr	r0, [pc, #64]	@ (8000a20 <StartTskSPI+0xc8>)
 80009e0:	f007 fb54 	bl	800808c <iprintf>
 80009e4:	e7bc      	b.n	8000960 <StartTskSPI+0x8>
			}
		}
		else {
			printf("SPI Error: %d, resetting...\n", status);
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
 80009e8:	4619      	mov	r1, r3
 80009ea:	480e      	ldr	r0, [pc, #56]	@ (8000a24 <StartTskSPI+0xcc>)
 80009ec:	f007 fb4e 	bl	800808c <iprintf>
			HAL_SPI_DeInit(&hspi1);
 80009f0:	4806      	ldr	r0, [pc, #24]	@ (8000a0c <StartTskSPI+0xb4>)
 80009f2:	f002 fed4 	bl	800379e <HAL_SPI_DeInit>
			osDelay(10);
 80009f6:	200a      	movs	r0, #10
 80009f8:	f004 fd76 	bl	80054e8 <osDelay>
			MX_SPI1_Init();
 80009fc:	f7ff fef0 	bl	80007e0 <MX_SPI1_Init>
			spi_timeout_counter = 0;
 8000a00:	4b03      	ldr	r3, [pc, #12]	@ (8000a10 <StartTskSPI+0xb8>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
  {
 8000a06:	e7ab      	b.n	8000960 <StartTskSPI+0x8>
 8000a08:	20000120 	.word	0x20000120
 8000a0c:	200000b0 	.word	0x200000b0
 8000a10:	2000012c 	.word	0x2000012c
 8000a14:	20000130 	.word	0x20000130
 8000a18:	08008f68 	.word	0x08008f68
 8000a1c:	cccccccd 	.word	0xcccccccd
 8000a20:	08008fa0 	.word	0x08008fa0
 8000a24:	08008fc0 	.word	0x08008fc0

08000a28 <StartTskQueueCtl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTskQueueCtl */
void StartTskQueueCtl(void *argument)
{
 8000a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a2a:	b08b      	sub	sp, #44	@ 0x2c
 8000a2c:	af04      	add	r7, sp, #16
 8000a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTskQueueCtl */
	Item QueueData;
  /* Infinite loop */
  for(;;)
  {
	if (xQueueReceive(SPIQueue, &QueueData, portMAX_DELAY) != pdTRUE)
 8000a30:	4b14      	ldr	r3, [pc, #80]	@ (8000a84 <StartTskQueueCtl+0x5c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f107 010c 	add.w	r1, r7, #12
 8000a38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f005 f93d 	bl	8005cbc <xQueueReceive>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d003      	beq.n	8000a50 <StartTskQueueCtl+0x28>
		{
			printf("Error in Receiving from Queue\n");
 8000a48:	480f      	ldr	r0, [pc, #60]	@ (8000a88 <StartTskQueueCtl+0x60>)
 8000a4a:	f007 fb87 	bl	800815c <puts>
 8000a4e:	e7ef      	b.n	8000a30 <StartTskQueueCtl+0x8>
		}
	else
	{
		BSP_LED_Toggle(LED_GREEN);
 8000a50:	2001      	movs	r0, #1
 8000a52:	f000 fb0d 	bl	8001070 <BSP_LED_Toggle>
		printf("Successfully RECEIVED the queue data \n");
 8000a56:	480d      	ldr	r0, [pc, #52]	@ (8000a8c <StartTskQueueCtl+0x64>)
 8000a58:	f007 fb80 	bl	800815c <puts>
		printf("SPI OK - Received: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 8000a5c:	68f9      	ldr	r1, [r7, #12]
				QueueData.value,
				QueueData.MacAddress[0], QueueData.MacAddress[1],
 8000a5e:	7c3b      	ldrb	r3, [r7, #16]
		printf("SPI OK - Received: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 8000a60:	461d      	mov	r5, r3
				QueueData.MacAddress[0], QueueData.MacAddress[1],
 8000a62:	7c7b      	ldrb	r3, [r7, #17]
		printf("SPI OK - Received: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 8000a64:	461e      	mov	r6, r3
				QueueData.MacAddress[2], QueueData.MacAddress[3],
 8000a66:	7cbb      	ldrb	r3, [r7, #18]
 8000a68:	7cfa      	ldrb	r2, [r7, #19]
				QueueData.MacAddress[4], QueueData.MacAddress[5]);
 8000a6a:	7d38      	ldrb	r0, [r7, #20]
 8000a6c:	7d7c      	ldrb	r4, [r7, #21]
		printf("SPI OK - Received: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 8000a6e:	9403      	str	r4, [sp, #12]
 8000a70:	9002      	str	r0, [sp, #8]
 8000a72:	9201      	str	r2, [sp, #4]
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	4633      	mov	r3, r6
 8000a78:	462a      	mov	r2, r5
 8000a7a:	4805      	ldr	r0, [pc, #20]	@ (8000a90 <StartTskQueueCtl+0x68>)
 8000a7c:	f007 fb06 	bl	800808c <iprintf>
	if (xQueueReceive(SPIQueue, &QueueData, portMAX_DELAY) != pdTRUE)
 8000a80:	e7d6      	b.n	8000a30 <StartTskQueueCtl+0x8>
 8000a82:	bf00      	nop
 8000a84:	20000130 	.word	0x20000130
 8000a88:	08008fe0 	.word	0x08008fe0
 8000a8c:	08009000 	.word	0x08009000
 8000a90:	08009028 	.word	0x08009028

08000a94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000aa4:	d101      	bne.n	8000aaa <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000aa6:	f000 fbaf 	bl	8001208 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab6:	b672      	cpsid	i
}
 8000ab8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aba:	bf00      	nop
 8000abc:	e7fd      	b.n	8000aba <Error_Handler+0x8>

08000abe <LL_AHB2_GRP1_EnableClock>:
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b085      	sub	sp, #20
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ac6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000aca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000acc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ad6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ada:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
}
 8000ae4:	bf00      	nop
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000af8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000afc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000afe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b0c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4013      	ands	r3, r2
 8000b12:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b14:	68fb      	ldr	r3, [r7, #12]
}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000b22:	b480      	push	{r7}
 8000b24:	b083      	sub	sp, #12
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000b2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b2e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	43db      	mvns	r3, r3
 8000b34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b38:	4013      	ands	r3, r2
 8000b3a:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	210f      	movs	r1, #15
 8000b50:	f06f 0001 	mvn.w	r0, #1
 8000b54:	f000 fc60 	bl	8001418 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 030c 	add.w	r3, r7, #12
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a13      	ldr	r2, [pc, #76]	@ (8000bc8 <HAL_SPI_MspInit+0x6c>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d11f      	bne.n	8000bbe <HAL_SPI_MspInit+0x62>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b7e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000b82:	f7ff ffb5 	bl	8000af0 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2001      	movs	r0, #1
 8000b88:	f7ff ff99 	bl	8000abe <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000b8c:	23c2      	movs	r3, #194	@ 0xc2
 8000b8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b9c:	2305      	movs	r3, #5
 8000b9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	f107 030c 	add.w	r3, r7, #12
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000baa:	f000 fccb 	bl	8001544 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2105      	movs	r1, #5
 8000bb2:	2022      	movs	r0, #34	@ 0x22
 8000bb4:	f000 fc30 	bl	8001418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000bb8:	2022      	movs	r0, #34	@ 0x22
 8000bba:	f000 fc47 	bl	800144c <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3720      	adds	r7, #32
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40013000 	.word	0x40013000

08000bcc <HAL_SPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a09      	ldr	r2, [pc, #36]	@ (8000c00 <HAL_SPI_MspDeInit+0x34>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d10b      	bne.n	8000bf6 <HAL_SPI_MspDeInit+0x2a>
  {
    /* USER CODE BEGIN SPI1_MspDeInit 0 */

    /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000bde:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000be2:	f7ff ff9e 	bl	8000b22 <LL_APB2_GRP1_DisableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7);
 8000be6:	21c2      	movs	r1, #194	@ 0xc2
 8000be8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bec:	f000 fe1a 	bl	8001824 <HAL_GPIO_DeInit>

    /* SPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8000bf0:	2022      	movs	r0, #34	@ 0x22
 8000bf2:	f000 fc39 	bl	8001468 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN SPI1_MspDeInit 1 */

    /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40013000 	.word	0x40013000

08000c04 <LL_APB1_GRP1_EnableClock>:
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000c0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c10:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000c1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c20:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4013      	ands	r3, r2
 8000c26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c28:	68fb      	ldr	r3, [r7, #12]
}
 8000c2a:	bf00      	nop
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
	...

08000c38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08e      	sub	sp, #56	@ 0x38
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	6879      	ldr	r1, [r7, #4]
 8000c52:	201c      	movs	r0, #28
 8000c54:	f000 fbe0 	bl	8001418 <HAL_NVIC_SetPriority>
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c58:	201c      	movs	r0, #28
 8000c5a:	f000 fbf7 	bl	800144c <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f7ff ffd0 	bl	8000c04 <LL_APB1_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c64:	f107 020c 	add.w	r2, r7, #12
 8000c68:	f107 0310 	add.w	r3, r7, #16
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f001 ffe8 	bl	8002c44 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c74:	f001 ffba 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 8000c78:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c7c:	4a21      	ldr	r2, [pc, #132]	@ (8000d04 <HAL_InitTick+0xcc>)
 8000c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c82:	0c9b      	lsrs	r3, r3, #18
 8000c84:	3b01      	subs	r3, #1
 8000c86:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000c88:	4b1f      	ldr	r3, [pc, #124]	@ (8000d08 <HAL_InitTick+0xd0>)
 8000c8a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c8e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000c90:	4b1d      	ldr	r3, [pc, #116]	@ (8000d08 <HAL_InitTick+0xd0>)
 8000c92:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c96:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000c98:	4a1b      	ldr	r2, [pc, #108]	@ (8000d08 <HAL_InitTick+0xd0>)
 8000c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c9c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d08 <HAL_InitTick+0xd0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca4:	4b18      	ldr	r3, [pc, #96]	@ (8000d08 <HAL_InitTick+0xd0>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 8000caa:	4817      	ldr	r0, [pc, #92]	@ (8000d08 <HAL_InitTick+0xd0>)
 8000cac:	f003 fbd2 	bl	8004454 <HAL_TIM_Base_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8000cb6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d11b      	bne.n	8000cf6 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000cbe:	4812      	ldr	r0, [pc, #72]	@ (8000d08 <HAL_InitTick+0xd0>)
 8000cc0:	f003 fc2a 	bl	8004518 <HAL_TIM_Base_Start_IT>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8000cca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d111      	bne.n	8000cf6 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cd2:	201c      	movs	r0, #28
 8000cd4:	f000 fbba 	bl	800144c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b0f      	cmp	r3, #15
 8000cdc:	d808      	bhi.n	8000cf0 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	6879      	ldr	r1, [r7, #4]
 8000ce2:	201c      	movs	r0, #28
 8000ce4:	f000 fb98 	bl	8001418 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ce8:	4a08      	ldr	r2, [pc, #32]	@ (8000d0c <HAL_InitTick+0xd4>)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6013      	str	r3, [r2, #0]
 8000cee:	e002      	b.n	8000cf6 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

 /* Return function status */
  return status;
 8000cf6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3738      	adds	r7, #56	@ 0x38
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	431bde83 	.word	0x431bde83
 8000d08:	20000134 	.word	0x20000134
 8000d0c:	2000001c 	.word	0x2000001c

08000d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <NMI_Handler+0x4>

08000d18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <HardFault_Handler+0x4>

08000d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <MemManage_Handler+0x4>

08000d28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <BusFault_Handler+0x4>

08000d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <UsageFault_Handler+0x4>

08000d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
	...

08000d48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d4c:	4802      	ldr	r0, [pc, #8]	@ (8000d58 <TIM2_IRQHandler+0x10>)
 8000d4e:	f003 fc31 	bl	80045b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000134 	.word	0x20000134

08000d5c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000d60:	4802      	ldr	r0, [pc, #8]	@ (8000d6c <SPI1_IRQHandler+0x10>)
 8000d62:	f003 f89b 	bl	8003e9c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200000b0 	.word	0x200000b0

08000d70 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	e00a      	b.n	8000d98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d82:	f3af 8000 	nop.w
 8000d86:	4601      	mov	r1, r0
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	1c5a      	adds	r2, r3, #1
 8000d8c:	60ba      	str	r2, [r7, #8]
 8000d8e:	b2ca      	uxtb	r2, r1
 8000d90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	3301      	adds	r3, #1
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	dbf0      	blt.n	8000d82 <_read+0x12>
  }

  return len;
 8000da0:	687b      	ldr	r3, [r7, #4]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <_close>:
  }
  return len;
}

int _close(int file)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dd2:	605a      	str	r2, [r3, #4]
  return 0;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <_isatty>:

int _isatty(int file)
{
 8000de2:	b480      	push	{r7}
 8000de4:	b083      	sub	sp, #12
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dea:	2301      	movs	r3, #1
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3714      	adds	r7, #20
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
	...

08000e14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e1c:	4a14      	ldr	r2, [pc, #80]	@ (8000e70 <_sbrk+0x5c>)
 8000e1e:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <_sbrk+0x60>)
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e28:	4b13      	ldr	r3, [pc, #76]	@ (8000e78 <_sbrk+0x64>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d102      	bne.n	8000e36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e30:	4b11      	ldr	r3, [pc, #68]	@ (8000e78 <_sbrk+0x64>)
 8000e32:	4a12      	ldr	r2, [pc, #72]	@ (8000e7c <_sbrk+0x68>)
 8000e34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e36:	4b10      	ldr	r3, [pc, #64]	@ (8000e78 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d207      	bcs.n	8000e54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e44:	f007 fb16 	bl	8008474 <__errno>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e52:	e009      	b.n	8000e68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e54:	4b08      	ldr	r3, [pc, #32]	@ (8000e78 <_sbrk+0x64>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5a:	4b07      	ldr	r3, [pc, #28]	@ (8000e78 <_sbrk+0x64>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	4a05      	ldr	r2, [pc, #20]	@ (8000e78 <_sbrk+0x64>)
 8000e64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e66:	68fb      	ldr	r3, [r7, #12]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20030000 	.word	0x20030000
 8000e74:	00000400 	.word	0x00000400
 8000e78:	20000180 	.word	0x20000180
 8000e7c:	20001d50 	.word	0x20001d50

08000e80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000e84:	4b24      	ldr	r3, [pc, #144]	@ (8000f18 <SystemInit+0x98>)
 8000e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e8a:	4a23      	ldr	r2, [pc, #140]	@ (8000f18 <SystemInit+0x98>)
 8000e8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000ea4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ea8:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000eac:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000eae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000eb8:	4b18      	ldr	r3, [pc, #96]	@ (8000f1c <SystemInit+0x9c>)
 8000eba:	4013      	ands	r3, r2
 8000ebc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000ebe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ec6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000eca:	f023 0305 	bic.w	r3, r3, #5
 8000ece:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000ed2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ed6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000eda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000ede:	f023 0301 	bic.w	r3, r3, #1
 8000ee2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eea:	4a0d      	ldr	r2, [pc, #52]	@ (8000f20 <SystemInit+0xa0>)
 8000eec:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000eee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ef2:	4a0b      	ldr	r2, [pc, #44]	@ (8000f20 <SystemInit+0xa0>)
 8000ef4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ef6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f04:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	619a      	str	r2, [r3, #24]
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00
 8000f1c:	faf6fefb 	.word	0xfaf6fefb
 8000f20:	22041000 	.word	0x22041000

08000f24 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000f24:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f26:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f28:	3304      	adds	r3, #4

08000f2a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f2a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000f2e:	d3f9      	bcc.n	8000f24 <CopyDataInit>
  bx lr
 8000f30:	4770      	bx	lr

08000f32 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000f32:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000f34:	3004      	adds	r0, #4

08000f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000f36:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000f38:	d3fb      	bcc.n	8000f32 <FillZerobss>
  bx lr
 8000f3a:	4770      	bx	lr

08000f3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f3c:	480c      	ldr	r0, [pc, #48]	@ (8000f70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f3e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f40:	f7ff ff9e 	bl	8000e80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000f44:	480b      	ldr	r0, [pc, #44]	@ (8000f74 <LoopForever+0x6>)
 8000f46:	490c      	ldr	r1, [pc, #48]	@ (8000f78 <LoopForever+0xa>)
 8000f48:	4a0c      	ldr	r2, [pc, #48]	@ (8000f7c <LoopForever+0xe>)
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	f7ff ffed 	bl	8000f2a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000f50:	480b      	ldr	r0, [pc, #44]	@ (8000f80 <LoopForever+0x12>)
 8000f52:	490c      	ldr	r1, [pc, #48]	@ (8000f84 <LoopForever+0x16>)
 8000f54:	4a0c      	ldr	r2, [pc, #48]	@ (8000f88 <LoopForever+0x1a>)
 8000f56:	2300      	movs	r3, #0
 8000f58:	f7ff ffe7 	bl	8000f2a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000f5c:	480b      	ldr	r0, [pc, #44]	@ (8000f8c <LoopForever+0x1e>)
 8000f5e:	490c      	ldr	r1, [pc, #48]	@ (8000f90 <LoopForever+0x22>)
 8000f60:	2300      	movs	r3, #0
 8000f62:	f7ff ffe8 	bl	8000f36 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f66:	f007 fa8b 	bl	8008480 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f6a:	f7ff fb4d 	bl	8000608 <main>

08000f6e <LoopForever>:

LoopForever:
  b LoopForever
 8000f6e:	e7fe      	b.n	8000f6e <LoopForever>
  ldr   r0, =_estack
 8000f70:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000f74:	20000008 	.word	0x20000008
 8000f78:	20000084 	.word	0x20000084
 8000f7c:	08009218 	.word	0x08009218
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000f80:	20030000 	.word	0x20030000
 8000f84:	20030000 	.word	0x20030000
 8000f88:	08009294 	.word	0x08009294
  INIT_BSS _sbss, _ebss
 8000f8c:	20000084 	.word	0x20000084
 8000f90:	20001d50 	.word	0x20001d50

08000f94 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC1_IRQHandler>

08000f96 <LL_AHB2_GRP1_EnableClock>:
{
 8000f96:	b480      	push	{r7}
 8000f98:	b085      	sub	sp, #20
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fa2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fa4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fba:	68fb      	ldr	r3, [r7, #12]
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <LL_APB2_GRP1_EnableClock>:
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000fd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fd4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000fd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000fe0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fe4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fec:	68fb      	ldr	r3, [r7, #12]
}
 8000fee:	bf00      	nop
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001016:	2002      	movs	r0, #2
 8001018:	f7ff ffbd 	bl	8000f96 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	4a12      	ldr	r2, [pc, #72]	@ (8001068 <BSP_LED_Init+0x6c>)
 8001020:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001024:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001026:	2301      	movs	r3, #1
 8001028:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800102e:	2302      	movs	r3, #2
 8001030:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	4a0d      	ldr	r2, [pc, #52]	@ (800106c <BSP_LED_Init+0x70>)
 8001036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800103a:	f107 020c 	add.w	r2, r7, #12
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f000 fa7f 	bl	8001544 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	4a08      	ldr	r2, [pc, #32]	@ (800106c <BSP_LED_Init+0x70>)
 800104a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	4a05      	ldr	r2, [pc, #20]	@ (8001068 <BSP_LED_Init+0x6c>)
 8001052:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001056:	2200      	movs	r2, #0
 8001058:	4619      	mov	r1, r3
 800105a:	f000 fcc1 	bl	80019e0 <HAL_GPIO_WritePin>
}
 800105e:	bf00      	nop
 8001060:	3720      	adds	r7, #32
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	080091b4 	.word	0x080091b4
 800106c:	2000000c 	.word	0x2000000c

08001070 <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	4a07      	ldr	r2, [pc, #28]	@ (800109c <BSP_LED_Toggle+0x2c>)
 800107e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	4906      	ldr	r1, [pc, #24]	@ (80010a0 <BSP_LED_Toggle+0x30>)
 8001086:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800108a:	4619      	mov	r1, r3
 800108c:	4610      	mov	r0, r2
 800108e:	f000 fcbf 	bl	8001a10 <HAL_GPIO_TogglePin>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	2000000c 	.word	0x2000000c
 80010a0:	080091b4 	.word	0x080091b4

080010a4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	6039      	str	r1, [r7, #0]
 80010ae:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d903      	bls.n	80010c2 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80010ba:	f06f 0301 	mvn.w	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	e018      	b.n	80010f4 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	2294      	movs	r2, #148	@ 0x94
 80010c6:	fb02 f303 	mul.w	r3, r2, r3
 80010ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001100 <BSP_COM_Init+0x5c>)
 80010cc:	4413      	add	r3, r2
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f84a 	bl	8001168 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	2294      	movs	r2, #148	@ 0x94
 80010d8:	fb02 f303 	mul.w	r3, r2, r3
 80010dc:	4a08      	ldr	r2, [pc, #32]	@ (8001100 <BSP_COM_Init+0x5c>)
 80010de:	4413      	add	r3, r2
 80010e0:	6839      	ldr	r1, [r7, #0]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f80e 	bl	8001104 <MX_LPUART1_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d002      	beq.n	80010f4 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 80010ee:	f06f 0303 	mvn.w	r3, #3
 80010f2:	e000      	b.n	80010f6 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 80010f4:	68fb      	ldr	r3, [r7, #12]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000184 	.word	0x20000184

08001104 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800110e:	4b15      	ldr	r3, [pc, #84]	@ (8001164 <MX_LPUART1_Init+0x60>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	220c      	movs	r2, #12
 8001122:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	895b      	ldrh	r3, [r3, #10]
 8001128:	461a      	mov	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	891b      	ldrh	r3, [r3, #8]
 800113a:	461a      	mov	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	899b      	ldrh	r3, [r3, #12]
 8001144:	461a      	mov	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001150:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f003 fc06 	bl	8004964 <HAL_UART_Init>
 8001158:	4603      	mov	r3, r0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000018 	.word	0x20000018

08001168 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001170:	2002      	movs	r0, #2
 8001172:	f7ff ff10 	bl	8000f96 <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 8001176:	2002      	movs	r0, #2
 8001178:	f7ff ff0d 	bl	8000f96 <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 800117c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001180:	f7ff ff22 	bl	8000fc8 <LL_APB2_GRP1_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001184:	2340      	movs	r3, #64	@ 0x40
 8001186:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800118c:	2302      	movs	r3, #2
 800118e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001190:	2301      	movs	r3, #1
 8001192:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001194:	2307      	movs	r3, #7
 8001196:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	4619      	mov	r1, r3
 800119e:	4809      	ldr	r0, [pc, #36]	@ (80011c4 <COM1_MspInit+0x5c>)
 80011a0:	f000 f9d0 	bl	8001544 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80011a4:	2380      	movs	r3, #128	@ 0x80
 80011a6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80011a8:	2302      	movs	r3, #2
 80011aa:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80011ac:	2307      	movs	r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	4619      	mov	r1, r3
 80011b6:	4803      	ldr	r0, [pc, #12]	@ (80011c4 <COM1_MspInit+0x5c>)
 80011b8:	f000 f9c4 	bl	8001544 <HAL_GPIO_Init>
}
 80011bc:	bf00      	nop
 80011be:	3720      	adds	r7, #32
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	48000400 	.word	0x48000400

080011c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001204 <HAL_Init+0x3c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001204 <HAL_Init+0x3c>)
 80011d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011dc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011de:	2003      	movs	r0, #3
 80011e0:	f000 f90f 	bl	8001402 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011e4:	200f      	movs	r0, #15
 80011e6:	f7ff fd27 	bl	8000c38 <HAL_InitTick>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d002      	beq.n	80011f6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	71fb      	strb	r3, [r7, #7]
 80011f4:	e001      	b.n	80011fa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011f6:	f7ff fca7 	bl	8000b48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011fa:	79fb      	ldrb	r3, [r7, #7]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	58004000 	.word	0x58004000

08001208 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800120c:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <HAL_IncTick+0x20>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	4b06      	ldr	r3, [pc, #24]	@ (800122c <HAL_IncTick+0x24>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4413      	add	r3, r2
 8001218:	4a04      	ldr	r2, [pc, #16]	@ (800122c <HAL_IncTick+0x24>)
 800121a:	6013      	str	r3, [r2, #0]
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000020 	.word	0x20000020
 800122c:	20000218 	.word	0x20000218

08001230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return uwTick;
 8001234:	4b03      	ldr	r3, [pc, #12]	@ (8001244 <HAL_GetTick+0x14>)
 8001236:	681b      	ldr	r3, [r3, #0]
}
 8001238:	4618      	mov	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	20000218 	.word	0x20000218

08001248 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800124c:	4b03      	ldr	r3, [pc, #12]	@ (800125c <HAL_GetTickPrio+0x14>)
 800124e:	681b      	ldr	r3, [r3, #0]
}
 8001250:	4618      	mov	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	2000001c 	.word	0x2000001c

08001260 <__NVIC_SetPriorityGrouping>:
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001270:	4b0c      	ldr	r3, [pc, #48]	@ (80012a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800127c:	4013      	ands	r3, r2
 800127e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001288:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800128c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001292:	4a04      	ldr	r2, [pc, #16]	@ (80012a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	60d3      	str	r3, [r2, #12]
}
 8001298:	bf00      	nop
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <__NVIC_GetPriorityGrouping>:
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ac:	4b04      	ldr	r3, [pc, #16]	@ (80012c0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	0a1b      	lsrs	r3, r3, #8
 80012b2:	f003 0307 	and.w	r3, r3, #7
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_EnableIRQ>:
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	db0b      	blt.n	80012ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	f003 021f 	and.w	r2, r3, #31
 80012dc:	4907      	ldr	r1, [pc, #28]	@ (80012fc <__NVIC_EnableIRQ+0x38>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	095b      	lsrs	r3, r3, #5
 80012e4:	2001      	movs	r0, #1
 80012e6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000e100 	.word	0xe000e100

08001300 <__NVIC_DisableIRQ>:
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	2b00      	cmp	r3, #0
 8001310:	db12      	blt.n	8001338 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	f003 021f 	and.w	r2, r3, #31
 8001318:	490a      	ldr	r1, [pc, #40]	@ (8001344 <__NVIC_DisableIRQ+0x44>)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	095b      	lsrs	r3, r3, #5
 8001320:	2001      	movs	r0, #1
 8001322:	fa00 f202 	lsl.w	r2, r0, r2
 8001326:	3320      	adds	r3, #32
 8001328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800132c:	f3bf 8f4f 	dsb	sy
}
 8001330:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001332:	f3bf 8f6f 	isb	sy
}
 8001336:	bf00      	nop
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000e100 	.word	0xe000e100

08001348 <__NVIC_SetPriority>:
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	6039      	str	r1, [r7, #0]
 8001352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001358:	2b00      	cmp	r3, #0
 800135a:	db0a      	blt.n	8001372 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	b2da      	uxtb	r2, r3
 8001360:	490c      	ldr	r1, [pc, #48]	@ (8001394 <__NVIC_SetPriority+0x4c>)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	0112      	lsls	r2, r2, #4
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	440b      	add	r3, r1
 800136c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001370:	e00a      	b.n	8001388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4908      	ldr	r1, [pc, #32]	@ (8001398 <__NVIC_SetPriority+0x50>)
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	f003 030f 	and.w	r3, r3, #15
 800137e:	3b04      	subs	r3, #4
 8001380:	0112      	lsls	r2, r2, #4
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	440b      	add	r3, r1
 8001386:	761a      	strb	r2, [r3, #24]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000e100 	.word	0xe000e100
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <NVIC_EncodePriority>:
{
 800139c:	b480      	push	{r7}
 800139e:	b089      	sub	sp, #36	@ 0x24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f1c3 0307 	rsb	r3, r3, #7
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	bf28      	it	cs
 80013ba:	2304      	movcs	r3, #4
 80013bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3304      	adds	r3, #4
 80013c2:	2b06      	cmp	r3, #6
 80013c4:	d902      	bls.n	80013cc <NVIC_EncodePriority+0x30>
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3b03      	subs	r3, #3
 80013ca:	e000      	b.n	80013ce <NVIC_EncodePriority+0x32>
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43da      	mvns	r2, r3
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	401a      	ands	r2, r3
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	fa01 f303 	lsl.w	r3, r1, r3
 80013ee:	43d9      	mvns	r1, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	4313      	orrs	r3, r2
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3724      	adds	r7, #36	@ 0x24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff ff28 	bl	8001260 <__NVIC_SetPriorityGrouping>
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
 8001424:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001426:	f7ff ff3f 	bl	80012a8 <__NVIC_GetPriorityGrouping>
 800142a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	68b9      	ldr	r1, [r7, #8]
 8001430:	6978      	ldr	r0, [r7, #20]
 8001432:	f7ff ffb3 	bl	800139c <NVIC_EncodePriority>
 8001436:	4602      	mov	r2, r0
 8001438:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143c:	4611      	mov	r1, r2
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ff82 	bl	8001348 <__NVIC_SetPriority>
}
 8001444:	bf00      	nop
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ff32 	bl	80012c4 <__NVIC_EnableIRQ>
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff ff42 	bl	8001300 <__NVIC_DisableIRQ>
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800148c:	2300      	movs	r3, #0
 800148e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d005      	beq.n	80014a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2204      	movs	r2, #4
 80014a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	73fb      	strb	r3, [r7, #15]
 80014a6:	e047      	b.n	8001538 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 020e 	bic.w	r2, r2, #14
 80014b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0201 	bic.w	r2, r2, #1
 80014c6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014dc:	f003 021c 	and.w	r2, r3, #28
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e4:	2101      	movs	r1, #1
 80014e6:	fa01 f202 	lsl.w	r2, r1, r2
 80014ea:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80014f4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00c      	beq.n	8001518 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001508:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800150c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001516:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2201      	movs	r2, #1
 800151c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800152c:	2b00      	cmp	r3, #0
 800152e:	d003      	beq.n	8001538 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	4798      	blx	r3
    }
  }
  return status;
 8001538:	7bfb      	ldrb	r3, [r7, #15]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001544:	b480      	push	{r7}
 8001546:	b087      	sub	sp, #28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001552:	e14c      	b.n	80017ee <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	2101      	movs	r1, #1
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	fa01 f303 	lsl.w	r3, r1, r3
 8001560:	4013      	ands	r3, r2
 8001562:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 813e 	beq.w	80017e8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	2b01      	cmp	r3, #1
 8001576:	d005      	beq.n	8001584 <HAL_GPIO_Init+0x40>
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 0303 	and.w	r3, r3, #3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d130      	bne.n	80015e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	2203      	movs	r2, #3
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4013      	ands	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	68da      	ldr	r2, [r3, #12]
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015ba:	2201      	movs	r2, #1
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4013      	ands	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	091b      	lsrs	r3, r3, #4
 80015d0:	f003 0201 	and.w	r2, r3, #1
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f003 0303 	and.w	r3, r3, #3
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d017      	beq.n	8001622 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	2203      	movs	r2, #3
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4013      	ands	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 0303 	and.w	r3, r3, #3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d123      	bne.n	8001676 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	08da      	lsrs	r2, r3, #3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3208      	adds	r2, #8
 8001636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800163a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	220f      	movs	r2, #15
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	4013      	ands	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	691a      	ldr	r2, [r3, #16]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	08da      	lsrs	r2, r3, #3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3208      	adds	r2, #8
 8001670:	6939      	ldr	r1, [r7, #16]
 8001672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	2203      	movs	r2, #3
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 0203 	and.w	r2, r3, #3
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 8098 	beq.w	80017e8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80016b8:	4a54      	ldr	r2, [pc, #336]	@ (800180c <HAL_GPIO_Init+0x2c8>)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	089b      	lsrs	r3, r3, #2
 80016be:	3302      	adds	r3, #2
 80016c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	220f      	movs	r2, #15
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4013      	ands	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80016e2:	d019      	beq.n	8001718 <HAL_GPIO_Init+0x1d4>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a4a      	ldr	r2, [pc, #296]	@ (8001810 <HAL_GPIO_Init+0x2cc>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d013      	beq.n	8001714 <HAL_GPIO_Init+0x1d0>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a49      	ldr	r2, [pc, #292]	@ (8001814 <HAL_GPIO_Init+0x2d0>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d00d      	beq.n	8001710 <HAL_GPIO_Init+0x1cc>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a48      	ldr	r2, [pc, #288]	@ (8001818 <HAL_GPIO_Init+0x2d4>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d007      	beq.n	800170c <HAL_GPIO_Init+0x1c8>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a47      	ldr	r2, [pc, #284]	@ (800181c <HAL_GPIO_Init+0x2d8>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d101      	bne.n	8001708 <HAL_GPIO_Init+0x1c4>
 8001704:	2304      	movs	r3, #4
 8001706:	e008      	b.n	800171a <HAL_GPIO_Init+0x1d6>
 8001708:	2307      	movs	r3, #7
 800170a:	e006      	b.n	800171a <HAL_GPIO_Init+0x1d6>
 800170c:	2303      	movs	r3, #3
 800170e:	e004      	b.n	800171a <HAL_GPIO_Init+0x1d6>
 8001710:	2302      	movs	r3, #2
 8001712:	e002      	b.n	800171a <HAL_GPIO_Init+0x1d6>
 8001714:	2301      	movs	r3, #1
 8001716:	e000      	b.n	800171a <HAL_GPIO_Init+0x1d6>
 8001718:	2300      	movs	r3, #0
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	f002 0203 	and.w	r2, r2, #3
 8001720:	0092      	lsls	r2, r2, #2
 8001722:	4093      	lsls	r3, r2
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4313      	orrs	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800172a:	4938      	ldr	r1, [pc, #224]	@ (800180c <HAL_GPIO_Init+0x2c8>)
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	089b      	lsrs	r3, r3, #2
 8001730:	3302      	adds	r3, #2
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001738:	4b39      	ldr	r3, [pc, #228]	@ (8001820 <HAL_GPIO_Init+0x2dc>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	43db      	mvns	r3, r3
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800175c:	4a30      	ldr	r2, [pc, #192]	@ (8001820 <HAL_GPIO_Init+0x2dc>)
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001762:	4b2f      	ldr	r3, [pc, #188]	@ (8001820 <HAL_GPIO_Init+0x2dc>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	43db      	mvns	r3, r3
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4313      	orrs	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001786:	4a26      	ldr	r2, [pc, #152]	@ (8001820 <HAL_GPIO_Init+0x2dc>)
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800178c:	4b24      	ldr	r3, [pc, #144]	@ (8001820 <HAL_GPIO_Init+0x2dc>)
 800178e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	43db      	mvns	r3, r3
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4013      	ands	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017b2:	4a1b      	ldr	r2, [pc, #108]	@ (8001820 <HAL_GPIO_Init+0x2dc>)
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80017ba:	4b19      	ldr	r3, [pc, #100]	@ (8001820 <HAL_GPIO_Init+0x2dc>)
 80017bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80017c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4013      	ands	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	4313      	orrs	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001820 <HAL_GPIO_Init+0x2dc>)
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	3301      	adds	r3, #1
 80017ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	fa22 f303 	lsr.w	r3, r2, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f47f aeab 	bne.w	8001554 <HAL_GPIO_Init+0x10>
  }
}
 80017fe:	bf00      	nop
 8001800:	bf00      	nop
 8001802:	371c      	adds	r7, #28
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	40010000 	.word	0x40010000
 8001810:	48000400 	.word	0x48000400
 8001814:	48000800 	.word	0x48000800
 8001818:	48000c00 	.word	0x48000c00
 800181c:	48001000 	.word	0x48001000
 8001820:	58000800 	.word	0x58000800

08001824 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001824:	b480      	push	{r7}
 8001826:	b087      	sub	sp, #28
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001832:	e0bb      	b.n	80019ac <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001834:	2201      	movs	r2, #1
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 80ae 	beq.w	80019a6 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800184a:	4a5f      	ldr	r2, [pc, #380]	@ (80019c8 <HAL_GPIO_DeInit+0x1a4>)
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	089b      	lsrs	r3, r3, #2
 8001850:	3302      	adds	r3, #2
 8001852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001856:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	220f      	movs	r2, #15
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	4013      	ands	r3, r2
 800186a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001872:	d019      	beq.n	80018a8 <HAL_GPIO_DeInit+0x84>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a55      	ldr	r2, [pc, #340]	@ (80019cc <HAL_GPIO_DeInit+0x1a8>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d013      	beq.n	80018a4 <HAL_GPIO_DeInit+0x80>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a54      	ldr	r2, [pc, #336]	@ (80019d0 <HAL_GPIO_DeInit+0x1ac>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d00d      	beq.n	80018a0 <HAL_GPIO_DeInit+0x7c>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a53      	ldr	r2, [pc, #332]	@ (80019d4 <HAL_GPIO_DeInit+0x1b0>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d007      	beq.n	800189c <HAL_GPIO_DeInit+0x78>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a52      	ldr	r2, [pc, #328]	@ (80019d8 <HAL_GPIO_DeInit+0x1b4>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d101      	bne.n	8001898 <HAL_GPIO_DeInit+0x74>
 8001894:	2304      	movs	r3, #4
 8001896:	e008      	b.n	80018aa <HAL_GPIO_DeInit+0x86>
 8001898:	2307      	movs	r3, #7
 800189a:	e006      	b.n	80018aa <HAL_GPIO_DeInit+0x86>
 800189c:	2303      	movs	r3, #3
 800189e:	e004      	b.n	80018aa <HAL_GPIO_DeInit+0x86>
 80018a0:	2302      	movs	r3, #2
 80018a2:	e002      	b.n	80018aa <HAL_GPIO_DeInit+0x86>
 80018a4:	2301      	movs	r3, #1
 80018a6:	e000      	b.n	80018aa <HAL_GPIO_DeInit+0x86>
 80018a8:	2300      	movs	r3, #0
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	f002 0203 	and.w	r2, r2, #3
 80018b0:	0092      	lsls	r2, r2, #2
 80018b2:	4093      	lsls	r3, r2
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d136      	bne.n	8001928 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80018ba:	4b48      	ldr	r3, [pc, #288]	@ (80019dc <HAL_GPIO_DeInit+0x1b8>)
 80018bc:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	43db      	mvns	r3, r3
 80018c4:	4945      	ldr	r1, [pc, #276]	@ (80019dc <HAL_GPIO_DeInit+0x1b8>)
 80018c6:	4013      	ands	r3, r2
 80018c8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80018cc:	4b43      	ldr	r3, [pc, #268]	@ (80019dc <HAL_GPIO_DeInit+0x1b8>)
 80018ce:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	4941      	ldr	r1, [pc, #260]	@ (80019dc <HAL_GPIO_DeInit+0x1b8>)
 80018d8:	4013      	ands	r3, r2
 80018da:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80018de:	4b3f      	ldr	r3, [pc, #252]	@ (80019dc <HAL_GPIO_DeInit+0x1b8>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	493d      	ldr	r1, [pc, #244]	@ (80019dc <HAL_GPIO_DeInit+0x1b8>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80018ec:	4b3b      	ldr	r3, [pc, #236]	@ (80019dc <HAL_GPIO_DeInit+0x1b8>)
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	43db      	mvns	r3, r3
 80018f4:	4939      	ldr	r1, [pc, #228]	@ (80019dc <HAL_GPIO_DeInit+0x1b8>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	220f      	movs	r2, #15
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800190a:	4a2f      	ldr	r2, [pc, #188]	@ (80019c8 <HAL_GPIO_DeInit+0x1a4>)
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	089b      	lsrs	r3, r3, #2
 8001910:	3302      	adds	r3, #2
 8001912:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	43da      	mvns	r2, r3
 800191a:	482b      	ldr	r0, [pc, #172]	@ (80019c8 <HAL_GPIO_DeInit+0x1a4>)
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	089b      	lsrs	r3, r3, #2
 8001920:	400a      	ands	r2, r1
 8001922:	3302      	adds	r3, #2
 8001924:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	2103      	movs	r1, #3
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	08da      	lsrs	r2, r3, #3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3208      	adds	r2, #8
 8001944:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	220f      	movs	r2, #15
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	08d2      	lsrs	r2, r2, #3
 800195c:	4019      	ands	r1, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3208      	adds	r2, #8
 8001962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68da      	ldr	r2, [r3, #12]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	2103      	movs	r1, #3
 8001970:	fa01 f303 	lsl.w	r3, r1, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	401a      	ands	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	2101      	movs	r1, #1
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	fa01 f303 	lsl.w	r3, r1, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	401a      	ands	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	2103      	movs	r1, #3
 800199a:	fa01 f303 	lsl.w	r3, r1, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	401a      	ands	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	609a      	str	r2, [r3, #8]
    }

    position++;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	3301      	adds	r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	fa22 f303 	lsr.w	r3, r2, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f47f af3d 	bne.w	8001834 <HAL_GPIO_DeInit+0x10>
  }
}
 80019ba:	bf00      	nop
 80019bc:	bf00      	nop
 80019be:	371c      	adds	r7, #28
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	40010000 	.word	0x40010000
 80019cc:	48000400 	.word	0x48000400
 80019d0:	48000800 	.word	0x48000800
 80019d4:	48000c00 	.word	0x48000c00
 80019d8:	48001000 	.word	0x48001000
 80019dc:	58000800 	.word	0x58000800

080019e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	460b      	mov	r3, r1
 80019ea:	807b      	strh	r3, [r7, #2]
 80019ec:	4613      	mov	r3, r2
 80019ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019f0:	787b      	ldrb	r3, [r7, #1]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019f6:	887a      	ldrh	r2, [r7, #2]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019fc:	e002      	b.n	8001a04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019fe:	887a      	ldrh	r2, [r7, #2]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a22:	887a      	ldrh	r2, [r7, #2]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4013      	ands	r3, r2
 8001a28:	041a      	lsls	r2, r3, #16
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	43d9      	mvns	r1, r3
 8001a2e:	887b      	ldrh	r3, [r7, #2]
 8001a30:	400b      	ands	r3, r1
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	619a      	str	r2, [r3, #24]
}
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a48:	4b05      	ldr	r3, [pc, #20]	@ (8001a60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a04      	ldr	r2, [pc, #16]	@ (8001a60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a52:	6013      	str	r3, [r2, #0]
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	58000400 	.word	0x58000400

08001a64 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001a68:	4b04      	ldr	r3, [pc, #16]	@ (8001a7c <HAL_PWREx_GetVoltageRange+0x18>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	58000400 	.word	0x58000400

08001a80 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001a84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a92:	d101      	bne.n	8001a98 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001a94:	2301      	movs	r3, #1
 8001a96:	e000      	b.n	8001a9a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001aa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ab2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ab6:	6013      	str	r3, [r2, #0]
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001ac6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ad0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ad4:	6013      	str	r3, [r2, #0]
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001ae4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001af2:	d101      	bne.n	8001af8 <LL_RCC_HSE_IsReady+0x18>
 8001af4:	2301      	movs	r3, #1
 8001af6:	e000      	b.n	8001afa <LL_RCC_HSE_IsReady+0x1a>
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001b08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b16:	6013      	str	r3, [r2, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001b26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b34:	6013      	str	r3, [r2, #0]
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001b44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b52:	d101      	bne.n	8001b58 <LL_RCC_HSI_IsReady+0x18>
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <LL_RCC_HSI_IsReady+0x1a>
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001b6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	061b      	lsls	r3, r3, #24
 8001b7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	604b      	str	r3, [r1, #4]
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001b92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001bb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001bbc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bc0:	f023 0301 	bic.w	r3, r3, #1
 8001bc4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001bd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d101      	bne.n	8001bea <LL_RCC_HSI48_IsReady+0x18>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <LL_RCC_HSI48_IsReady+0x1a>
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c28:	f023 0301 	bic.w	r3, r3, #1
 8001c2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001c3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c4a:	f043 0304 	orr.w	r3, r3, #4
 8001c4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001c52:	bf00      	nop
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001c60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c6c:	f023 0304 	bic.w	r3, r3, #4
 8001c70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001c82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d101      	bne.n	8001c96 <LL_RCC_LSE_IsReady+0x18>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <LL_RCC_LSE_IsReady+0x1a>
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001ca6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001cba:	bf00      	nop
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001cc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cd0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001cea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d101      	bne.n	8001cfe <LL_RCC_LSI1_IsReady+0x18>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <LL_RCC_LSI1_IsReady+0x1a>
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001d0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d1a:	f043 0304 	orr.w	r3, r3, #4
 8001d1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001d30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d3c:	f023 0304 	bic.w	r3, r3, #4
 8001d40:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001d52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b08      	cmp	r3, #8
 8001d60:	d101      	bne.n	8001d66 <LL_RCC_LSI2_IsReady+0x18>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <LL_RCC_LSI2_IsReady+0x1a>
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001d7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d82:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001da4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	6013      	str	r3, [r2, #0]
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001dc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001dcc:	f023 0301 	bic.w	r3, r3, #1
 8001dd0:	6013      	str	r3, [r2, #0]
}
 8001dd2:	bf00      	nop
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001de0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d101      	bne.n	8001df2 <LL_RCC_MSI_IsReady+0x16>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <LL_RCC_MSI_IsReady+0x18>
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001e06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	600b      	str	r3, [r1, #0]
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001e2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e36:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2bb0      	cmp	r3, #176	@ 0xb0
 8001e3c:	d901      	bls.n	8001e42 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001e3e:	23b0      	movs	r3, #176	@ 0xb0
 8001e40:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001e42:	687b      	ldr	r3, [r7, #4]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001e58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	021b      	lsls	r3, r3, #8
 8001e66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	604b      	str	r3, [r1, #4]
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001e82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f023 0203 	bic.w	r2, r3, #3
 8001e8c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	608b      	str	r3, [r1, #8]
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001ea6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 030c 	and.w	r3, r3, #12
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001ec2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ecc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	608b      	str	r3, [r1, #8]
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001eea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eee:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001ef2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ef6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001f16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001f1e:	f023 020f 	bic.w	r2, r3, #15
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	091b      	lsrs	r3, r3, #4
 8001f26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001f44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	608b      	str	r3, [r1, #8]
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001f6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	608b      	str	r3, [r1, #8]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001f90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8001fa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fac:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001fb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001fc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fc6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001fde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001ff6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002000:	4618      	mov	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800200e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002018:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800201c:	6013      	str	r3, [r2, #0]
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800202c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002036:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800203a:	6013      	str	r3, [r2, #0]
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800204a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002054:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002058:	d101      	bne.n	800205e <LL_RCC_PLL_IsReady+0x18>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <LL_RCC_PLL_IsReady+0x1a>
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800206e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	0a1b      	lsrs	r3, r3, #8
 8002076:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800207a:	4618      	mov	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002088:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002092:	4618      	mov	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80020a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80020b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	f003 0303 	and.w	r3, r3, #3
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80020d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020de:	d101      	bne.n	80020e4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80020e0:	2301      	movs	r3, #1
 80020e2:	e000      	b.n	80020e6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80020f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020f8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80020fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002100:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002104:	d101      	bne.n	800210a <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800211a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800211e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002122:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002126:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800212a:	d101      	bne.n	8002130 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800212c:	2301      	movs	r3, #1
 800212e:	e000      	b.n	8002132 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002140:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800214e:	d101      	bne.n	8002154 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002164:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800216e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002172:	d101      	bne.n	8002178 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002174:	2301      	movs	r3, #1
 8002176:	e000      	b.n	800217a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002184:	b590      	push	{r4, r7, lr}
 8002186:	b08d      	sub	sp, #52	@ 0x34
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e363      	b.n	800285e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0320 	and.w	r3, r3, #32
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 808d 	beq.w	80022be <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021a4:	f7ff fe7d 	bl	8001ea2 <LL_RCC_GetSysClkSource>
 80021a8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021aa:	f7ff ff83 	bl	80020b4 <LL_RCC_PLL_GetMainSource>
 80021ae:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80021b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d005      	beq.n	80021c2 <HAL_RCC_OscConfig+0x3e>
 80021b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021b8:	2b0c      	cmp	r3, #12
 80021ba:	d147      	bne.n	800224c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80021bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d144      	bne.n	800224c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e347      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80021d2:	f7ff fe28 	bl	8001e26 <LL_RCC_MSI_GetRange>
 80021d6:	4603      	mov	r3, r0
 80021d8:	429c      	cmp	r4, r3
 80021da:	d914      	bls.n	8002206 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 fd61 	bl	8002ca8 <RCC_SetFlashLatencyFromMSIRange>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e336      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fe02 	bl	8001dfe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fe26 	bl	8001e50 <LL_RCC_MSI_SetCalibTrimming>
 8002204:	e013      	b.n	800222e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fdf7 	bl	8001dfe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fe1b 	bl	8001e50 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221e:	4618      	mov	r0, r3
 8002220:	f000 fd42 	bl	8002ca8 <RCC_SetFlashLatencyFromMSIRange>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e317      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800222e:	f000 fcc9 	bl	8002bc4 <HAL_RCC_GetHCLKFreq>
 8002232:	4603      	mov	r3, r0
 8002234:	4aa4      	ldr	r2, [pc, #656]	@ (80024c8 <HAL_RCC_OscConfig+0x344>)
 8002236:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002238:	4ba4      	ldr	r3, [pc, #656]	@ (80024cc <HAL_RCC_OscConfig+0x348>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe fcfb 	bl	8000c38 <HAL_InitTick>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d039      	beq.n	80022bc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e308      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d01e      	beq.n	8002292 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002254:	f7ff fda4 	bl	8001da0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002258:	f7fe ffea 	bl	8001230 <HAL_GetTick>
 800225c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002260:	f7fe ffe6 	bl	8001230 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e2f5      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002272:	f7ff fdb3 	bl	8001ddc <LL_RCC_MSI_IsReady>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0f1      	beq.n	8002260 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fdbc 	bl	8001dfe <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fde0 	bl	8001e50 <LL_RCC_MSI_SetCalibTrimming>
 8002290:	e015      	b.n	80022be <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002292:	f7ff fd94 	bl	8001dbe <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002296:	f7fe ffcb 	bl	8001230 <HAL_GetTick>
 800229a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800229e:	f7fe ffc7 	bl	8001230 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e2d6      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80022b0:	f7ff fd94 	bl	8001ddc <LL_RCC_MSI_IsReady>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f1      	bne.n	800229e <HAL_RCC_OscConfig+0x11a>
 80022ba:	e000      	b.n	80022be <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80022bc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d047      	beq.n	800235a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ca:	f7ff fdea 	bl	8001ea2 <LL_RCC_GetSysClkSource>
 80022ce:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022d0:	f7ff fef0 	bl	80020b4 <LL_RCC_PLL_GetMainSource>
 80022d4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d005      	beq.n	80022e8 <HAL_RCC_OscConfig+0x164>
 80022dc:	6a3b      	ldr	r3, [r7, #32]
 80022de:	2b0c      	cmp	r3, #12
 80022e0:	d108      	bne.n	80022f4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	d105      	bne.n	80022f4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d134      	bne.n	800235a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e2b4      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022fc:	d102      	bne.n	8002304 <HAL_RCC_OscConfig+0x180>
 80022fe:	f7ff fbd1 	bl	8001aa4 <LL_RCC_HSE_Enable>
 8002302:	e001      	b.n	8002308 <HAL_RCC_OscConfig+0x184>
 8002304:	f7ff fbdd 	bl	8001ac2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d012      	beq.n	8002336 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002310:	f7fe ff8e 	bl	8001230 <HAL_GetTick>
 8002314:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002318:	f7fe ff8a 	bl	8001230 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b64      	cmp	r3, #100	@ 0x64
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e299      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800232a:	f7ff fbd9 	bl	8001ae0 <LL_RCC_HSE_IsReady>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0f1      	beq.n	8002318 <HAL_RCC_OscConfig+0x194>
 8002334:	e011      	b.n	800235a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002336:	f7fe ff7b 	bl	8001230 <HAL_GetTick>
 800233a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800233e:	f7fe ff77 	bl	8001230 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b64      	cmp	r3, #100	@ 0x64
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e286      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002350:	f7ff fbc6 	bl	8001ae0 <LL_RCC_HSE_IsReady>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f1      	bne.n	800233e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d04c      	beq.n	8002400 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002366:	f7ff fd9c 	bl	8001ea2 <LL_RCC_GetSysClkSource>
 800236a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800236c:	f7ff fea2 	bl	80020b4 <LL_RCC_PLL_GetMainSource>
 8002370:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	2b04      	cmp	r3, #4
 8002376:	d005      	beq.n	8002384 <HAL_RCC_OscConfig+0x200>
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	2b0c      	cmp	r3, #12
 800237c:	d10e      	bne.n	800239c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	2b02      	cmp	r3, #2
 8002382:	d10b      	bne.n	800239c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e266      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fbe5 	bl	8001b64 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800239a:	e031      	b.n	8002400 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d019      	beq.n	80023d8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a4:	f7ff fbae 	bl	8001b04 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a8:	f7fe ff42 	bl	8001230 <HAL_GetTick>
 80023ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b0:	f7fe ff3e 	bl	8001230 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e24d      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80023c2:	f7ff fbbd 	bl	8001b40 <LL_RCC_HSI_IsReady>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f1      	beq.n	80023b0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fbc7 	bl	8001b64 <LL_RCC_HSI_SetCalibTrimming>
 80023d6:	e013      	b.n	8002400 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d8:	f7ff fba3 	bl	8001b22 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023dc:	f7fe ff28 	bl	8001230 <HAL_GetTick>
 80023e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e4:	f7fe ff24 	bl	8001230 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e233      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80023f6:	f7ff fba3 	bl	8001b40 <LL_RCC_HSI_IsReady>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1f1      	bne.n	80023e4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b00      	cmp	r3, #0
 800240a:	d106      	bne.n	800241a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 80a3 	beq.w	8002560 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d076      	beq.n	8002510 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0310 	and.w	r3, r3, #16
 800242a:	2b00      	cmp	r3, #0
 800242c:	d046      	beq.n	80024bc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800242e:	f7ff fc5a 	bl	8001ce6 <LL_RCC_LSI1_IsReady>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d113      	bne.n	8002460 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002438:	f7ff fc33 	bl	8001ca2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800243c:	f7fe fef8 	bl	8001230 <HAL_GetTick>
 8002440:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002444:	f7fe fef4 	bl	8001230 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e203      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002456:	f7ff fc46 	bl	8001ce6 <LL_RCC_LSI1_IsReady>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0f1      	beq.n	8002444 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002460:	f7ff fc53 	bl	8001d0a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7fe fee4 	bl	8001230 <HAL_GetTick>
 8002468:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800246c:	f7fe fee0 	bl	8001230 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b03      	cmp	r3, #3
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e1ef      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800247e:	f7ff fc66 	bl	8001d4e <LL_RCC_LSI2_IsReady>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0f1      	beq.n	800246c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fc70 	bl	8001d72 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002492:	f7ff fc17 	bl	8001cc4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002496:	f7fe fecb 	bl	8001230 <HAL_GetTick>
 800249a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800249e:	f7fe fec7 	bl	8001230 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e1d6      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80024b0:	f7ff fc19 	bl	8001ce6 <LL_RCC_LSI1_IsReady>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f1      	bne.n	800249e <HAL_RCC_OscConfig+0x31a>
 80024ba:	e051      	b.n	8002560 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80024bc:	f7ff fbf1 	bl	8001ca2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c0:	f7fe feb6 	bl	8001230 <HAL_GetTick>
 80024c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80024c6:	e00c      	b.n	80024e2 <HAL_RCC_OscConfig+0x35e>
 80024c8:	20000008 	.word	0x20000008
 80024cc:	2000001c 	.word	0x2000001c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80024d0:	f7fe feae 	bl	8001230 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e1bd      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80024e2:	f7ff fc00 	bl	8001ce6 <LL_RCC_LSI1_IsReady>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0f1      	beq.n	80024d0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80024ec:	f7ff fc1e 	bl	8001d2c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80024f2:	f7fe fe9d 	bl	8001230 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e1ac      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002504:	f7ff fc23 	bl	8001d4e <LL_RCC_LSI2_IsReady>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f1      	bne.n	80024f2 <HAL_RCC_OscConfig+0x36e>
 800250e:	e027      	b.n	8002560 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002510:	f7ff fc0c 	bl	8001d2c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002514:	f7fe fe8c 	bl	8001230 <HAL_GetTick>
 8002518:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800251c:	f7fe fe88 	bl	8001230 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b03      	cmp	r3, #3
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e197      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800252e:	f7ff fc0e 	bl	8001d4e <LL_RCC_LSI2_IsReady>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1f1      	bne.n	800251c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002538:	f7ff fbc4 	bl	8001cc4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253c:	f7fe fe78 	bl	8001230 <HAL_GetTick>
 8002540:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002544:	f7fe fe74 	bl	8001230 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e183      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002556:	f7ff fbc6 	bl	8001ce6 <LL_RCC_LSI1_IsReady>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1f1      	bne.n	8002544 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d05b      	beq.n	8002624 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800256c:	4ba7      	ldr	r3, [pc, #668]	@ (800280c <HAL_RCC_OscConfig+0x688>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002574:	2b00      	cmp	r3, #0
 8002576:	d114      	bne.n	80025a2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002578:	f7ff fa64 	bl	8001a44 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800257c:	f7fe fe58 	bl	8001230 <HAL_GetTick>
 8002580:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002584:	f7fe fe54 	bl	8001230 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e163      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002596:	4b9d      	ldr	r3, [pc, #628]	@ (800280c <HAL_RCC_OscConfig+0x688>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0f0      	beq.n	8002584 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d102      	bne.n	80025b0 <HAL_RCC_OscConfig+0x42c>
 80025aa:	f7ff fb24 	bl	8001bf6 <LL_RCC_LSE_Enable>
 80025ae:	e00c      	b.n	80025ca <HAL_RCC_OscConfig+0x446>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	2b05      	cmp	r3, #5
 80025b6:	d104      	bne.n	80025c2 <HAL_RCC_OscConfig+0x43e>
 80025b8:	f7ff fb3f 	bl	8001c3a <LL_RCC_LSE_EnableBypass>
 80025bc:	f7ff fb1b 	bl	8001bf6 <LL_RCC_LSE_Enable>
 80025c0:	e003      	b.n	80025ca <HAL_RCC_OscConfig+0x446>
 80025c2:	f7ff fb29 	bl	8001c18 <LL_RCC_LSE_Disable>
 80025c6:	f7ff fb49 	bl	8001c5c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d014      	beq.n	80025fc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d2:	f7fe fe2d 	bl	8001230 <HAL_GetTick>
 80025d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80025d8:	e00a      	b.n	80025f0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025da:	f7fe fe29 	bl	8001230 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e136      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80025f0:	f7ff fb45 	bl	8001c7e <LL_RCC_LSE_IsReady>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0ef      	beq.n	80025da <HAL_RCC_OscConfig+0x456>
 80025fa:	e013      	b.n	8002624 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fc:	f7fe fe18 	bl	8001230 <HAL_GetTick>
 8002600:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002602:	e00a      	b.n	800261a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002604:	f7fe fe14 	bl	8001230 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002612:	4293      	cmp	r3, r2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e121      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800261a:	f7ff fb30 	bl	8001c7e <LL_RCC_LSE_IsReady>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1ef      	bne.n	8002604 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800262c:	2b00      	cmp	r3, #0
 800262e:	d02c      	beq.n	800268a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002634:	2b00      	cmp	r3, #0
 8002636:	d014      	beq.n	8002662 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002638:	f7ff faa9 	bl	8001b8e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263c:	f7fe fdf8 	bl	8001230 <HAL_GetTick>
 8002640:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002644:	f7fe fdf4 	bl	8001230 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e103      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002656:	f7ff fabc 	bl	8001bd2 <LL_RCC_HSI48_IsReady>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f1      	beq.n	8002644 <HAL_RCC_OscConfig+0x4c0>
 8002660:	e013      	b.n	800268a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002662:	f7ff faa5 	bl	8001bb0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002666:	f7fe fde3 	bl	8001230 <HAL_GetTick>
 800266a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800266e:	f7fe fddf 	bl	8001230 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e0ee      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002680:	f7ff faa7 	bl	8001bd2 <LL_RCC_HSI48_IsReady>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f1      	bne.n	800266e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 80e4 	beq.w	800285c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002694:	f7ff fc05 	bl	8001ea2 <LL_RCC_GetSysClkSource>
 8002698:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800269a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	f040 80b4 	bne.w	8002814 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f003 0203 	and.w	r2, r3, #3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d123      	bne.n	8002702 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d11c      	bne.n	8002702 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	0a1b      	lsrs	r3, r3, #8
 80026cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d114      	bne.n	8002702 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d10d      	bne.n	8002702 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d106      	bne.n	8002702 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80026fe:	429a      	cmp	r2, r3
 8002700:	d05d      	beq.n	80027be <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	2b0c      	cmp	r3, #12
 8002706:	d058      	beq.n	80027ba <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002708:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e0a1      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800271a:	f7ff fc85 	bl	8002028 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800271e:	f7fe fd87 	bl	8001230 <HAL_GetTick>
 8002722:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002726:	f7fe fd83 	bl	8001230 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e092      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002738:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1ef      	bne.n	8002726 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002746:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800274a:	68da      	ldr	r2, [r3, #12]
 800274c:	4b30      	ldr	r3, [pc, #192]	@ (8002810 <HAL_RCC_OscConfig+0x68c>)
 800274e:	4013      	ands	r3, r2
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002758:	4311      	orrs	r1, r2
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800275e:	0212      	lsls	r2, r2, #8
 8002760:	4311      	orrs	r1, r2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002766:	4311      	orrs	r1, r2
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800276c:	4311      	orrs	r1, r2
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002772:	430a      	orrs	r2, r1
 8002774:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002778:	4313      	orrs	r3, r2
 800277a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800277c:	f7ff fc45 	bl	800200a <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002780:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800278a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800278e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002790:	f7fe fd4e 	bl	8001230 <HAL_GetTick>
 8002794:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002798:	f7fe fd4a 	bl	8001230 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e059      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0ef      	beq.n	8002798 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027b8:	e050      	b.n	800285c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e04f      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d147      	bne.n	800285c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027cc:	f7ff fc1d 	bl	800200a <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027e0:	f7fe fd26 	bl	8001230 <HAL_GetTick>
 80027e4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e8:	f7fe fd22 	bl	8001230 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e031      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0ef      	beq.n	80027e8 <HAL_RCC_OscConfig+0x664>
 8002808:	e028      	b.n	800285c <HAL_RCC_OscConfig+0x6d8>
 800280a:	bf00      	nop
 800280c:	58000400 	.word	0x58000400
 8002810:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	2b0c      	cmp	r3, #12
 8002818:	d01e      	beq.n	8002858 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281a:	f7ff fc05 	bl	8002028 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281e:	f7fe fd07 	bl	8001230 <HAL_GetTick>
 8002822:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002826:	f7fe fd03 	bl	8001230 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e012      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002838:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1ef      	bne.n	8002826 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002846:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002850:	4b05      	ldr	r3, [pc, #20]	@ (8002868 <HAL_RCC_OscConfig+0x6e4>)
 8002852:	4013      	ands	r3, r2
 8002854:	60cb      	str	r3, [r1, #12]
 8002856:	e001      	b.n	800285c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3734      	adds	r7, #52	@ 0x34
 8002862:	46bd      	mov	sp, r7
 8002864:	bd90      	pop	{r4, r7, pc}
 8002866:	bf00      	nop
 8002868:	eefefffc 	.word	0xeefefffc

0800286c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e12d      	b.n	8002adc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002880:	4b98      	ldr	r3, [pc, #608]	@ (8002ae4 <HAL_RCC_ClockConfig+0x278>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d91b      	bls.n	80028c6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288e:	4b95      	ldr	r3, [pc, #596]	@ (8002ae4 <HAL_RCC_ClockConfig+0x278>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f023 0207 	bic.w	r2, r3, #7
 8002896:	4993      	ldr	r1, [pc, #588]	@ (8002ae4 <HAL_RCC_ClockConfig+0x278>)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	4313      	orrs	r3, r2
 800289c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800289e:	f7fe fcc7 	bl	8001230 <HAL_GetTick>
 80028a2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80028a6:	f7fe fcc3 	bl	8001230 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e111      	b.n	8002adc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b8:	4b8a      	ldr	r3, [pc, #552]	@ (8002ae4 <HAL_RCC_ClockConfig+0x278>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d1ef      	bne.n	80028a6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d016      	beq.n	8002900 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff faef 	bl	8001eba <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028dc:	f7fe fca8 	bl	8001230 <HAL_GetTick>
 80028e0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028e4:	f7fe fca4 	bl	8001230 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e0f2      	b.n	8002adc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80028f6:	f7ff fbe9 	bl	80020cc <LL_RCC_IsActiveFlag_HPRE>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f1      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0320 	and.w	r3, r3, #32
 8002908:	2b00      	cmp	r3, #0
 800290a:	d016      	beq.n	800293a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff fae6 	bl	8001ee2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002916:	f7fe fc8b 	bl	8001230 <HAL_GetTick>
 800291a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800291c:	e008      	b.n	8002930 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800291e:	f7fe fc87 	bl	8001230 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e0d5      	b.n	8002adc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002930:	f7ff fbde 	bl	80020f0 <LL_RCC_IsActiveFlag_C2HPRE>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f1      	beq.n	800291e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d016      	beq.n	8002974 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fadf 	bl	8001f0e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002950:	f7fe fc6e 	bl	8001230 <HAL_GetTick>
 8002954:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002956:	e008      	b.n	800296a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002958:	f7fe fc6a 	bl	8001230 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e0b8      	b.n	8002adc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800296a:	f7ff fbd4 	bl	8002116 <LL_RCC_IsActiveFlag_SHDHPRE>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0f1      	beq.n	8002958 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b00      	cmp	r3, #0
 800297e:	d016      	beq.n	80029ae <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fad9 	bl	8001f3c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800298a:	f7fe fc51 	bl	8001230 <HAL_GetTick>
 800298e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002992:	f7fe fc4d 	bl	8001230 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e09b      	b.n	8002adc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80029a4:	f7ff fbca 	bl	800213c <LL_RCC_IsActiveFlag_PPRE1>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0f1      	beq.n	8002992 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d017      	beq.n	80029ea <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff facf 	bl	8001f64 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80029c6:	f7fe fc33 	bl	8001230 <HAL_GetTick>
 80029ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80029ce:	f7fe fc2f 	bl	8001230 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e07d      	b.n	8002adc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80029e0:	f7ff fbbe 	bl	8002160 <LL_RCC_IsActiveFlag_PPRE2>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0f1      	beq.n	80029ce <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d043      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d106      	bne.n	8002a0c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80029fe:	f7ff f86f 	bl	8001ae0 <LL_RCC_HSE_IsReady>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d11e      	bne.n	8002a46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e067      	b.n	8002adc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	d106      	bne.n	8002a22 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002a14:	f7ff fb17 	bl	8002046 <LL_RCC_PLL_IsReady>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d113      	bne.n	8002a46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e05c      	b.n	8002adc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d106      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002a2a:	f7ff f9d7 	bl	8001ddc <LL_RCC_MSI_IsReady>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d108      	bne.n	8002a46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e051      	b.n	8002adc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002a38:	f7ff f882 	bl	8001b40 <LL_RCC_HSI_IsReady>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e04a      	b.n	8002adc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff fa15 	bl	8001e7a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a50:	f7fe fbee 	bl	8001230 <HAL_GetTick>
 8002a54:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a56:	e00a      	b.n	8002a6e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a58:	f7fe fbea 	bl	8001230 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e036      	b.n	8002adc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6e:	f7ff fa18 	bl	8001ea2 <LL_RCC_GetSysClkSource>
 8002a72:	4602      	mov	r2, r0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d1ec      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a7e:	4b19      	ldr	r3, [pc, #100]	@ (8002ae4 <HAL_RCC_ClockConfig+0x278>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d21b      	bcs.n	8002ac4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8c:	4b15      	ldr	r3, [pc, #84]	@ (8002ae4 <HAL_RCC_ClockConfig+0x278>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f023 0207 	bic.w	r2, r3, #7
 8002a94:	4913      	ldr	r1, [pc, #76]	@ (8002ae4 <HAL_RCC_ClockConfig+0x278>)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a9c:	f7fe fbc8 	bl	8001230 <HAL_GetTick>
 8002aa0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002aa4:	f7fe fbc4 	bl	8001230 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e012      	b.n	8002adc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae4 <HAL_RCC_ClockConfig+0x278>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d1ef      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002ac4:	f000 f87e 	bl	8002bc4 <HAL_RCC_GetHCLKFreq>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	4a07      	ldr	r2, [pc, #28]	@ (8002ae8 <HAL_RCC_ClockConfig+0x27c>)
 8002acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002ace:	f7fe fbbb 	bl	8001248 <HAL_GetTickPrio>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fe f8af 	bl	8000c38 <HAL_InitTick>
 8002ada:	4603      	mov	r3, r0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	58004000 	.word	0x58004000
 8002ae8:	20000008 	.word	0x20000008

08002aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aec:	b590      	push	{r4, r7, lr}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002af2:	f7ff f9d6 	bl	8001ea2 <LL_RCC_GetSysClkSource>
 8002af6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10a      	bne.n	8002b14 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002afe:	f7ff f992 	bl	8001e26 <LL_RCC_MSI_GetRange>
 8002b02:	4603      	mov	r3, r0
 8002b04:	091b      	lsrs	r3, r3, #4
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	4a2b      	ldr	r2, [pc, #172]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	e04b      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d102      	bne.n	8002b20 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b1a:	4b28      	ldr	r3, [pc, #160]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	e045      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d10a      	bne.n	8002b3c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002b26:	f7fe ffab 	bl	8001a80 <LL_RCC_HSE_IsEnabledDiv2>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d102      	bne.n	8002b36 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002b30:	4b22      	ldr	r3, [pc, #136]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	e03a      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002b36:	4b22      	ldr	r3, [pc, #136]	@ (8002bc0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	e037      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002b3c:	f7ff faba 	bl	80020b4 <LL_RCC_PLL_GetMainSource>
 8002b40:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d003      	beq.n	8002b50 <HAL_RCC_GetSysClockFreq+0x64>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	d003      	beq.n	8002b56 <HAL_RCC_GetSysClockFreq+0x6a>
 8002b4e:	e00d      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002b50:	4b1a      	ldr	r3, [pc, #104]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b52:	60bb      	str	r3, [r7, #8]
        break;
 8002b54:	e015      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002b56:	f7fe ff93 	bl	8001a80 <LL_RCC_HSE_IsEnabledDiv2>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d102      	bne.n	8002b66 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002b60:	4b16      	ldr	r3, [pc, #88]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b62:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002b64:	e00d      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002b66:	4b16      	ldr	r3, [pc, #88]	@ (8002bc0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002b68:	60bb      	str	r3, [r7, #8]
        break;
 8002b6a:	e00a      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002b6c:	f7ff f95b 	bl	8001e26 <LL_RCC_MSI_GetRange>
 8002b70:	4603      	mov	r3, r0
 8002b72:	091b      	lsrs	r3, r3, #4
 8002b74:	f003 030f 	and.w	r3, r3, #15
 8002b78:	4a0f      	ldr	r2, [pc, #60]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b7e:	60bb      	str	r3, [r7, #8]
        break;
 8002b80:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002b82:	f7ff fa72 	bl	800206a <LL_RCC_PLL_GetN>
 8002b86:	4602      	mov	r2, r0
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	fb03 f402 	mul.w	r4, r3, r2
 8002b8e:	f7ff fa85 	bl	800209c <LL_RCC_PLL_GetDivider>
 8002b92:	4603      	mov	r3, r0
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	3301      	adds	r3, #1
 8002b98:	fbb4 f4f3 	udiv	r4, r4, r3
 8002b9c:	f7ff fa72 	bl	8002084 <LL_RCC_PLL_GetR>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	0f5b      	lsrs	r3, r3, #29
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	fbb4 f3f3 	udiv	r3, r4, r3
 8002baa:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002bac:	68fb      	ldr	r3, [r7, #12]
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd90      	pop	{r4, r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	08009174 	.word	0x08009174
 8002bbc:	00f42400 	.word	0x00f42400
 8002bc0:	01e84800 	.word	0x01e84800

08002bc4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bc4:	b598      	push	{r3, r4, r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002bc8:	f7ff ff90 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 8002bcc:	4604      	mov	r4, r0
 8002bce:	f7ff f9dd 	bl	8001f8c <LL_RCC_GetAHBPrescaler>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	091b      	lsrs	r3, r3, #4
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	4a03      	ldr	r2, [pc, #12]	@ (8002be8 <HAL_RCC_GetHCLKFreq+0x24>)
 8002bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	bd98      	pop	{r3, r4, r7, pc}
 8002be8:	08009114 	.word	0x08009114

08002bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bec:	b598      	push	{r3, r4, r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002bf0:	f7ff ffe8 	bl	8002bc4 <HAL_RCC_GetHCLKFreq>
 8002bf4:	4604      	mov	r4, r0
 8002bf6:	f7ff f9f0 	bl	8001fda <LL_RCC_GetAPB1Prescaler>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	0a1b      	lsrs	r3, r3, #8
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	4a04      	ldr	r2, [pc, #16]	@ (8002c14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c08:	f003 031f 	and.w	r3, r3, #31
 8002c0c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	bd98      	pop	{r3, r4, r7, pc}
 8002c14:	08009154 	.word	0x08009154

08002c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c18:	b598      	push	{r3, r4, r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002c1c:	f7ff ffd2 	bl	8002bc4 <HAL_RCC_GetHCLKFreq>
 8002c20:	4604      	mov	r4, r0
 8002c22:	f7ff f9e6 	bl	8001ff2 <LL_RCC_GetAPB2Prescaler>
 8002c26:	4603      	mov	r3, r0
 8002c28:	0adb      	lsrs	r3, r3, #11
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	4a04      	ldr	r2, [pc, #16]	@ (8002c40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c34:	f003 031f 	and.w	r3, r3, #31
 8002c38:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	bd98      	pop	{r3, r4, r7, pc}
 8002c40:	08009154 	.word	0x08009154

08002c44 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	226f      	movs	r2, #111	@ 0x6f
 8002c52:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8002c54:	f7ff f925 	bl	8001ea2 <LL_RCC_GetSysClkSource>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8002c5e:	f7ff f995 	bl	8001f8c <LL_RCC_GetAHBPrescaler>
 8002c62:	4602      	mov	r2, r0
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8002c68:	f7ff f9b7 	bl	8001fda <LL_RCC_GetAPB1Prescaler>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8002c72:	f7ff f9be 	bl	8001ff2 <LL_RCC_GetAPB2Prescaler>
 8002c76:	4602      	mov	r2, r0
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8002c7c:	f7ff f992 	bl	8001fa4 <LL_C2_RCC_GetAHBPrescaler>
 8002c80:	4602      	mov	r2, r0
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8002c86:	f7ff f99a 	bl	8001fbe <LL_RCC_GetAHB4Prescaler>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002c90:	4b04      	ldr	r3, [pc, #16]	@ (8002ca4 <HAL_RCC_GetClockConfig+0x60>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0207 	and.w	r2, r3, #7
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	601a      	str	r2, [r3, #0]
}
 8002c9c:	bf00      	nop
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	58004000 	.word	0x58004000

08002ca8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002ca8:	b590      	push	{r4, r7, lr}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2bb0      	cmp	r3, #176	@ 0xb0
 8002cb4:	d903      	bls.n	8002cbe <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002cb6:	4b15      	ldr	r3, [pc, #84]	@ (8002d0c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	e007      	b.n	8002cce <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	091b      	lsrs	r3, r3, #4
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	4a11      	ldr	r2, [pc, #68]	@ (8002d0c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ccc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002cce:	f7ff f976 	bl	8001fbe <LL_RCC_GetAHB4Prescaler>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	091b      	lsrs	r3, r3, #4
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	4a0d      	ldr	r2, [pc, #52]	@ (8002d10 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	4a0a      	ldr	r2, [pc, #40]	@ (8002d14 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002cec:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf0:	0c9c      	lsrs	r4, r3, #18
 8002cf2:	f7fe feb7 	bl	8001a64 <HAL_PWREx_GetVoltageRange>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	f000 f80c 	bl	8002d18 <RCC_SetFlashLatency>
 8002d00:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd90      	pop	{r4, r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	08009174 	.word	0x08009174
 8002d10:	08009114 	.word	0x08009114
 8002d14:	431bde83 	.word	0x431bde83

08002d18 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002d18:	b590      	push	{r4, r7, lr}
 8002d1a:	b093      	sub	sp, #76	@ 0x4c
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002d22:	4b37      	ldr	r3, [pc, #220]	@ (8002e00 <RCC_SetFlashLatency+0xe8>)
 8002d24:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002d28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002d2e:	4a35      	ldr	r2, [pc, #212]	@ (8002e04 <RCC_SetFlashLatency+0xec>)
 8002d30:	f107 031c 	add.w	r3, r7, #28
 8002d34:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002d3a:	4b33      	ldr	r3, [pc, #204]	@ (8002e08 <RCC_SetFlashLatency+0xf0>)
 8002d3c:	f107 040c 	add.w	r4, r7, #12
 8002d40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002d46:	2300      	movs	r3, #0
 8002d48:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d50:	d11a      	bne.n	8002d88 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002d52:	2300      	movs	r3, #0
 8002d54:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d56:	e013      	b.n	8002d80 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002d58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	3348      	adds	r3, #72	@ 0x48
 8002d5e:	443b      	add	r3, r7
 8002d60:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d807      	bhi.n	8002d7a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002d6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	3348      	adds	r3, #72	@ 0x48
 8002d70:	443b      	add	r3, r7
 8002d72:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002d76:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002d78:	e020      	b.n	8002dbc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002d7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	d9e8      	bls.n	8002d58 <RCC_SetFlashLatency+0x40>
 8002d86:	e019      	b.n	8002dbc <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002d88:	2300      	movs	r3, #0
 8002d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d8c:	e013      	b.n	8002db6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	3348      	adds	r3, #72	@ 0x48
 8002d94:	443b      	add	r3, r7
 8002d96:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d807      	bhi.n	8002db0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002da0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	3348      	adds	r3, #72	@ 0x48
 8002da6:	443b      	add	r3, r7
 8002da8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002dac:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002dae:	e005      	b.n	8002dbc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002db2:	3301      	adds	r3, #1
 8002db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d9e8      	bls.n	8002d8e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002dbc:	4b13      	ldr	r3, [pc, #76]	@ (8002e0c <RCC_SetFlashLatency+0xf4>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f023 0207 	bic.w	r2, r3, #7
 8002dc4:	4911      	ldr	r1, [pc, #68]	@ (8002e0c <RCC_SetFlashLatency+0xf4>)
 8002dc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002dcc:	f7fe fa30 	bl	8001230 <HAL_GetTick>
 8002dd0:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002dd2:	e008      	b.n	8002de6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002dd4:	f7fe fa2c 	bl	8001230 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e007      	b.n	8002df6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002de6:	4b09      	ldr	r3, [pc, #36]	@ (8002e0c <RCC_SetFlashLatency+0xf4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d1ef      	bne.n	8002dd4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	374c      	adds	r7, #76	@ 0x4c
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd90      	pop	{r4, r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	08009064 	.word	0x08009064
 8002e04:	08009074 	.word	0x08009074
 8002e08:	08009080 	.word	0x08009080
 8002e0c:	58004000 	.word	0x58004000

08002e10 <LL_RCC_LSE_IsEnabled>:
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002e14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <LL_RCC_LSE_IsEnabled+0x18>
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <LL_RCC_LSE_IsEnabled+0x1a>
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <LL_RCC_LSE_IsReady>:
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002e38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d101      	bne.n	8002e4c <LL_RCC_LSE_IsReady+0x18>
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e000      	b.n	8002e4e <LL_RCC_LSE_IsReady+0x1a>
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <LL_RCC_SetRFWKPClockSource>:
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002e60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e68:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <LL_RCC_SetSMPSClockSource>:
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002e8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e92:	f023 0203 	bic.w	r2, r3, #3
 8002e96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <LL_RCC_SetSMPSPrescaler>:
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002eb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eba:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002ebe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <LL_RCC_SetUSARTClockSource>:
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002edc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee4:	f023 0203 	bic.w	r2, r3, #3
 8002ee8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <LL_RCC_SetLPUARTClockSource>:
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002f08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f10:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <LL_RCC_SetI2CClockSource>:
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002f34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f38:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	091b      	lsrs	r3, r3, #4
 8002f40:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002f44:	43db      	mvns	r3, r3
 8002f46:	401a      	ands	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002f50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <LL_RCC_SetLPTIMClockSource>:
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002f6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f72:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	0c1b      	lsrs	r3, r3, #16
 8002f7a:	041b      	lsls	r3, r3, #16
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	401a      	ands	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	041b      	lsls	r3, r3, #16
 8002f84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <LL_RCC_SetSAIClockSource>:
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002fa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002faa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002fae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <LL_RCC_SetRNGClockSource>:
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002fce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002fda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <LL_RCC_SetCLK48ClockSource>:
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002ffa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003002:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003006:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4313      	orrs	r3, r2
 800300e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <LL_RCC_SetUSBClockSource>:
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b082      	sub	sp, #8
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff ffe3 	bl	8002ff2 <LL_RCC_SetCLK48ClockSource>
}
 800302c:	bf00      	nop
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <LL_RCC_SetADCClockSource>:
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800303c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003044:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003048:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4313      	orrs	r3, r2
 8003050:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <LL_RCC_SetRTCClockSource>:
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003068:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800306c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003070:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003074:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4313      	orrs	r3, r2
 800307c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <LL_RCC_GetRTCClockSource>:
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003090:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003098:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800309c:	4618      	mov	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <LL_RCC_ForceBackupDomainReset>:
{
 80030a6:	b480      	push	{r7}
 80030a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80030aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80030be:	bf00      	nop
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <LL_RCC_ReleaseBackupDomainReset>:
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80030cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80030e0:	bf00      	nop
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <LL_RCC_PLLSAI1_Enable>:
{
 80030ea:	b480      	push	{r7}
 80030ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80030ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80030fc:	6013      	str	r3, [r2, #0]
}
 80030fe:	bf00      	nop
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <LL_RCC_PLLSAI1_Disable>:
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800310c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003116:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800311a:	6013      	str	r3, [r2, #0]
}
 800311c:	bf00      	nop
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <LL_RCC_PLLSAI1_IsReady>:
{
 8003126:	b480      	push	{r7}
 8003128:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800312a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003134:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003138:	d101      	bne.n	800313e <LL_RCC_PLLSAI1_IsReady+0x18>
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b088      	sub	sp, #32
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003152:	2300      	movs	r3, #0
 8003154:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003156:	2300      	movs	r3, #0
 8003158:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003162:	2b00      	cmp	r3, #0
 8003164:	d034      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800316e:	d021      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003170:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003174:	d81b      	bhi.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003176:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800317a:	d01d      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800317c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003180:	d815      	bhi.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00b      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003186:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800318a:	d110      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800318c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003196:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800319a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800319c:	e00d      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	3304      	adds	r3, #4
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 f947 	bl	8003436 <RCCEx_PLLSAI1_ConfigNP>
 80031a8:	4603      	mov	r3, r0
 80031aa:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80031ac:	e005      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	77fb      	strb	r3, [r7, #31]
        break;
 80031b2:	e002      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80031b4:	bf00      	nop
 80031b6:	e000      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80031b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031ba:	7ffb      	ldrb	r3, [r7, #31]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d105      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff fee8 	bl	8002f9a <LL_RCC_SetSAIClockSource>
 80031ca:	e001      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031cc:	7ffb      	ldrb	r3, [r7, #31]
 80031ce:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d046      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80031dc:	f7ff ff56 	bl	800308c <LL_RCC_GetRTCClockSource>
 80031e0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d03c      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80031ec:	f7fe fc2a 	bl	8001a44 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d105      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff ff30 	bl	8003060 <LL_RCC_SetRTCClockSource>
 8003200:	e02e      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003202:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800320a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800320c:	f7ff ff4b 	bl	80030a6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003210:	f7ff ff5a 	bl	80030c8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321e:	4313      	orrs	r3, r2
 8003220:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003222:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800322c:	f7ff fdf0 	bl	8002e10 <LL_RCC_LSE_IsEnabled>
 8003230:	4603      	mov	r3, r0
 8003232:	2b01      	cmp	r3, #1
 8003234:	d114      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003236:	f7fd fffb 	bl	8001230 <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800323c:	e00b      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800323e:	f7fd fff7 	bl	8001230 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	f241 3288 	movw	r2, #5000	@ 0x1388
 800324c:	4293      	cmp	r3, r2
 800324e:	d902      	bls.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	77fb      	strb	r3, [r7, #31]
              break;
 8003254:	e004      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003256:	f7ff fded 	bl	8002e34 <LL_RCC_LSE_IsReady>
 800325a:	4603      	mov	r3, r0
 800325c:	2b01      	cmp	r3, #1
 800325e:	d1ee      	bne.n	800323e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003260:	7ffb      	ldrb	r3, [r7, #31]
 8003262:	77bb      	strb	r3, [r7, #30]
 8003264:	e001      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003266:	7ffb      	ldrb	r3, [r7, #31]
 8003268:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d004      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff fe2a 	bl	8002ed4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d004      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff fe35 	bl	8002f00 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0310 	and.w	r3, r3, #16
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d004      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff fe5d 	bl	8002f66 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0320 	and.w	r3, r3, #32
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d004      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff fe52 	bl	8002f66 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0304 	and.w	r3, r3, #4
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d004      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff fe2a 	bl	8002f2c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d004      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff fe1f 	bl	8002f2c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d022      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff fe8d 	bl	800301e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003308:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800330c:	d107      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800330e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003318:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800331c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003322:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003326:	d10b      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3304      	adds	r3, #4
 800332c:	4618      	mov	r0, r3
 800332e:	f000 f8dd 	bl	80034ec <RCCEx_PLLSAI1_ConfigNQ>
 8003332:	4603      	mov	r3, r0
 8003334:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003336:	7ffb      	ldrb	r3, [r7, #31]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800333c:	7ffb      	ldrb	r3, [r7, #31]
 800333e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003348:	2b00      	cmp	r3, #0
 800334a:	d02b      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003350:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003354:	d008      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800335a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800335e:	d003      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003364:	2b00      	cmp	r3, #0
 8003366:	d105      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff fe2a 	bl	8002fc6 <LL_RCC_SetRNGClockSource>
 8003372:	e00a      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003378:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	2000      	movs	r0, #0
 8003380:	f7ff fe21 	bl	8002fc6 <LL_RCC_SetRNGClockSource>
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f7ff fe34 	bl	8002ff2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800338e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003392:	d107      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003394:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800339e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d022      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff fe3d 	bl	8003034 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033c2:	d107      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80033c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033dc:	d10b      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	3304      	adds	r3, #4
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 f8dd 	bl	80035a2 <RCCEx_PLLSAI1_ConfigNR>
 80033e8:	4603      	mov	r3, r0
 80033ea:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80033ec:	7ffb      	ldrb	r3, [r7, #31]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80033f2:	7ffb      	ldrb	r3, [r7, #31]
 80033f4:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d004      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff fd26 	bl	8002e58 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d009      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff fd45 	bl	8002eac <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff fd2c 	bl	8002e84 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800342c:	7fbb      	ldrb	r3, [r7, #30]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3720      	adds	r7, #32
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b084      	sub	sp, #16
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003442:	f7ff fe61 	bl	8003108 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003446:	f7fd fef3 	bl	8001230 <HAL_GetTick>
 800344a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800344c:	e009      	b.n	8003462 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800344e:	f7fd feef 	bl	8001230 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d902      	bls.n	8003462 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	73fb      	strb	r3, [r7, #15]
      break;
 8003460:	e004      	b.n	800346c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003462:	f7ff fe60 	bl	8003126 <LL_RCC_PLLSAI1_IsReady>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1f0      	bne.n	800344e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800346c:	7bfb      	ldrb	r3, [r7, #15]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d137      	bne.n	80034e2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003472:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	021b      	lsls	r3, r3, #8
 8003482:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003486:	4313      	orrs	r3, r2
 8003488:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800348a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800349c:	4313      	orrs	r3, r2
 800349e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80034a0:	f7ff fe23 	bl	80030ea <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034a4:	f7fd fec4 	bl	8001230 <HAL_GetTick>
 80034a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80034aa:	e009      	b.n	80034c0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034ac:	f7fd fec0 	bl	8001230 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d902      	bls.n	80034c0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	73fb      	strb	r3, [r7, #15]
        break;
 80034be:	e004      	b.n	80034ca <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80034c0:	f7ff fe31 	bl	8003126 <LL_RCC_PLLSAI1_IsReady>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d1f0      	bne.n	80034ac <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d108      	bne.n	80034e2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80034d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034d4:	691a      	ldr	r2, [r3, #16]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034de:	4313      	orrs	r3, r2
 80034e0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034f4:	2300      	movs	r3, #0
 80034f6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80034f8:	f7ff fe06 	bl	8003108 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80034fc:	f7fd fe98 	bl	8001230 <HAL_GetTick>
 8003500:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003502:	e009      	b.n	8003518 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003504:	f7fd fe94 	bl	8001230 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d902      	bls.n	8003518 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	73fb      	strb	r3, [r7, #15]
      break;
 8003516:	e004      	b.n	8003522 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003518:	f7ff fe05 	bl	8003126 <LL_RCC_PLLSAI1_IsReady>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f0      	bne.n	8003504 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003522:	7bfb      	ldrb	r3, [r7, #15]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d137      	bne.n	8003598 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	021b      	lsls	r3, r3, #8
 8003538:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800353c:	4313      	orrs	r3, r2
 800353e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003540:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003552:	4313      	orrs	r3, r2
 8003554:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003556:	f7ff fdc8 	bl	80030ea <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800355a:	f7fd fe69 	bl	8001230 <HAL_GetTick>
 800355e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003560:	e009      	b.n	8003576 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003562:	f7fd fe65 	bl	8001230 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d902      	bls.n	8003576 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	73fb      	strb	r3, [r7, #15]
        break;
 8003574:	e004      	b.n	8003580 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003576:	f7ff fdd6 	bl	8003126 <LL_RCC_PLLSAI1_IsReady>
 800357a:	4603      	mov	r3, r0
 800357c:	2b01      	cmp	r3, #1
 800357e:	d1f0      	bne.n	8003562 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d108      	bne.n	8003598 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003586:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003594:	4313      	orrs	r3, r2
 8003596:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003598:	7bfb      	ldrb	r3, [r7, #15]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b084      	sub	sp, #16
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80035ae:	f7ff fdab 	bl	8003108 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80035b2:	f7fd fe3d 	bl	8001230 <HAL_GetTick>
 80035b6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80035b8:	e009      	b.n	80035ce <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035ba:	f7fd fe39 	bl	8001230 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d902      	bls.n	80035ce <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	73fb      	strb	r3, [r7, #15]
      break;
 80035cc:	e004      	b.n	80035d8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80035ce:	f7ff fdaa 	bl	8003126 <LL_RCC_PLLSAI1_IsReady>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1f0      	bne.n	80035ba <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d137      	bne.n	800364e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80035de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	021b      	lsls	r3, r3, #8
 80035ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035f2:	4313      	orrs	r3, r2
 80035f4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80035f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003608:	4313      	orrs	r3, r2
 800360a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800360c:	f7ff fd6d 	bl	80030ea <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003610:	f7fd fe0e 	bl	8001230 <HAL_GetTick>
 8003614:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003616:	e009      	b.n	800362c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003618:	f7fd fe0a 	bl	8001230 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d902      	bls.n	800362c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	73fb      	strb	r3, [r7, #15]
        break;
 800362a:	e004      	b.n	8003636 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800362c:	f7ff fd7b 	bl	8003126 <LL_RCC_PLLSAI1_IsReady>
 8003630:	4603      	mov	r3, r0
 8003632:	2b01      	cmp	r3, #1
 8003634:	d1f0      	bne.n	8003618 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d108      	bne.n	800364e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800363c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003640:	691a      	ldr	r2, [r3, #16]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800364a:	4313      	orrs	r3, r2
 800364c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800364e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e095      	b.n	8003796 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366e:	2b00      	cmp	r3, #0
 8003670:	d108      	bne.n	8003684 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800367a:	d009      	beq.n	8003690 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	61da      	str	r2, [r3, #28]
 8003682:	e005      	b.n	8003690 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d106      	bne.n	80036b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7fd fa56 	bl	8000b5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2202      	movs	r2, #2
 80036b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80036d0:	d902      	bls.n	80036d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	e002      	b.n	80036de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80036d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80036e6:	d007      	beq.n	80036f8 <HAL_SPI_Init+0xa0>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80036f0:	d002      	beq.n	80036f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	431a      	orrs	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003730:	431a      	orrs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800373a:	ea42 0103 	orr.w	r1, r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003742:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	0c1b      	lsrs	r3, r3, #16
 8003754:	f003 0204 	and.w	r2, r3, #4
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375c:	f003 0310 	and.w	r3, r3, #16
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003774:	ea42 0103 	orr.w	r1, r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e01a      	b.n	80037e6 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037c6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7fd f9ff 	bl	8000bcc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b088      	sub	sp, #32
 80037f2:	af02      	add	r7, sp, #8
 80037f4:	60f8      	str	r0, [r7, #12]
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	603b      	str	r3, [r7, #0]
 80037fa:	4613      	mov	r3, r2
 80037fc:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b01      	cmp	r3, #1
 8003808:	d001      	beq.n	800380e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800380a:	2302      	movs	r3, #2
 800380c:	e123      	b.n	8003a56 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <HAL_SPI_Receive+0x2c>
 8003814:	88fb      	ldrh	r3, [r7, #6]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e11b      	b.n	8003a56 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003826:	d112      	bne.n	800384e <HAL_SPI_Receive+0x60>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10e      	bne.n	800384e <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2204      	movs	r2, #4
 8003834:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003838:	88fa      	ldrh	r2, [r7, #6]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	4613      	mov	r3, r2
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	68b9      	ldr	r1, [r7, #8]
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 f90a 	bl	8003a5e <HAL_SPI_TransmitReceive>
 800384a:	4603      	mov	r3, r0
 800384c:	e103      	b.n	8003a56 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800384e:	f7fd fcef 	bl	8001230 <HAL_GetTick>
 8003852:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800385a:	2b01      	cmp	r3, #1
 800385c:	d101      	bne.n	8003862 <HAL_SPI_Receive+0x74>
 800385e:	2302      	movs	r3, #2
 8003860:	e0f9      	b.n	8003a56 <HAL_SPI_Receive+0x268>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2204      	movs	r2, #4
 800386e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	88fa      	ldrh	r2, [r7, #6]
 8003882:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	88fa      	ldrh	r2, [r7, #6]
 800388a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80038b4:	d908      	bls.n	80038c8 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80038c4:	605a      	str	r2, [r3, #4]
 80038c6:	e007      	b.n	80038d8 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80038d6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038e0:	d10f      	bne.n	8003902 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003900:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800390c:	2b40      	cmp	r3, #64	@ 0x40
 800390e:	d007      	beq.n	8003920 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800391e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003928:	d875      	bhi.n	8003a16 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800392a:	e037      	b.n	800399c <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b01      	cmp	r3, #1
 8003938:	d117      	bne.n	800396a <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f103 020c 	add.w	r2, r3, #12
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003946:	7812      	ldrb	r2, [r2, #0]
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800395c:	b29b      	uxth	r3, r3
 800395e:	3b01      	subs	r3, #1
 8003960:	b29a      	uxth	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003968:	e018      	b.n	800399c <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800396a:	f7fd fc61 	bl	8001230 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d803      	bhi.n	8003982 <HAL_SPI_Receive+0x194>
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003980:	d102      	bne.n	8003988 <HAL_SPI_Receive+0x19a>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d109      	bne.n	800399c <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e05c      	b.n	8003a56 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1c1      	bne.n	800392c <HAL_SPI_Receive+0x13e>
 80039a8:	e03b      	b.n	8003a22 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d115      	bne.n	80039e4 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c2:	b292      	uxth	r2, r2
 80039c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ca:	1c9a      	adds	r2, r3, #2
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80039e2:	e018      	b.n	8003a16 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039e4:	f7fd fc24 	bl	8001230 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d803      	bhi.n	80039fc <HAL_SPI_Receive+0x20e>
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039fa:	d102      	bne.n	8003a02 <HAL_SPI_Receive+0x214>
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d109      	bne.n	8003a16 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e01f      	b.n	8003a56 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1c3      	bne.n	80039aa <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	6839      	ldr	r1, [r7, #0]
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 fc76 	bl	8004318 <SPI_EndRxTransaction>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d002      	beq.n	8003a38 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2220      	movs	r2, #32
 8003a36:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e000      	b.n	8003a56 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8003a54:	2300      	movs	r3, #0
  }
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3718      	adds	r7, #24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b08a      	sub	sp, #40	@ 0x28
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	60f8      	str	r0, [r7, #12]
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	607a      	str	r2, [r7, #4]
 8003a6a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a70:	f7fd fbde 	bl	8001230 <HAL_GetTick>
 8003a74:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a7c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003a84:	887b      	ldrh	r3, [r7, #2]
 8003a86:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8003a88:	887b      	ldrh	r3, [r7, #2]
 8003a8a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a8c:	7ffb      	ldrb	r3, [r7, #31]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d00c      	beq.n	8003aac <HAL_SPI_TransmitReceive+0x4e>
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a98:	d106      	bne.n	8003aa8 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d102      	bne.n	8003aa8 <HAL_SPI_TransmitReceive+0x4a>
 8003aa2:	7ffb      	ldrb	r3, [r7, #31]
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d001      	beq.n	8003aac <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	e1f3      	b.n	8003e94 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d005      	beq.n	8003abe <HAL_SPI_TransmitReceive+0x60>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d002      	beq.n	8003abe <HAL_SPI_TransmitReceive+0x60>
 8003ab8:	887b      	ldrh	r3, [r7, #2]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e1e8      	b.n	8003e94 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d101      	bne.n	8003ad0 <HAL_SPI_TransmitReceive+0x72>
 8003acc:	2302      	movs	r3, #2
 8003ace:	e1e1      	b.n	8003e94 <HAL_SPI_TransmitReceive+0x436>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b04      	cmp	r3, #4
 8003ae2:	d003      	beq.n	8003aec <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2205      	movs	r2, #5
 8003ae8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	887a      	ldrh	r2, [r7, #2]
 8003afc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	887a      	ldrh	r2, [r7, #2]
 8003b04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	887a      	ldrh	r2, [r7, #2]
 8003b12:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	887a      	ldrh	r2, [r7, #2]
 8003b18:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b2e:	d802      	bhi.n	8003b36 <HAL_SPI_TransmitReceive+0xd8>
 8003b30:	8abb      	ldrh	r3, [r7, #20]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d908      	bls.n	8003b48 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b44:	605a      	str	r2, [r3, #4]
 8003b46:	e007      	b.n	8003b58 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b56:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b62:	2b40      	cmp	r3, #64	@ 0x40
 8003b64:	d007      	beq.n	8003b76 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b7e:	f240 8083 	bls.w	8003c88 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <HAL_SPI_TransmitReceive+0x132>
 8003b8a:	8afb      	ldrh	r3, [r7, #22]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d16f      	bne.n	8003c70 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b94:	881a      	ldrh	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba0:	1c9a      	adds	r2, r3, #2
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bb4:	e05c      	b.n	8003c70 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d11b      	bne.n	8003bfc <HAL_SPI_TransmitReceive+0x19e>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d016      	beq.n	8003bfc <HAL_SPI_TransmitReceive+0x19e>
 8003bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d113      	bne.n	8003bfc <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd8:	881a      	ldrh	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be4:	1c9a      	adds	r2, r3, #2
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d11c      	bne.n	8003c44 <HAL_SPI_TransmitReceive+0x1e6>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d016      	beq.n	8003c44 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68da      	ldr	r2, [r3, #12]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c20:	b292      	uxth	r2, r2
 8003c22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c28:	1c9a      	adds	r2, r3, #2
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	3b01      	subs	r3, #1
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c40:	2301      	movs	r3, #1
 8003c42:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c44:	f7fd faf4 	bl	8001230 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d80d      	bhi.n	8003c70 <HAL_SPI_TransmitReceive+0x212>
 8003c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c5a:	d009      	beq.n	8003c70 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e111      	b.n	8003e94 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d19d      	bne.n	8003bb6 <HAL_SPI_TransmitReceive+0x158>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d197      	bne.n	8003bb6 <HAL_SPI_TransmitReceive+0x158>
 8003c86:	e0e5      	b.n	8003e54 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <HAL_SPI_TransmitReceive+0x23a>
 8003c90:	8afb      	ldrh	r3, [r7, #22]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	f040 80d1 	bne.w	8003e3a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d912      	bls.n	8003cc8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca6:	881a      	ldrh	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb2:	1c9a      	adds	r2, r3, #2
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b02      	subs	r3, #2
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003cc6:	e0b8      	b.n	8003e3a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	330c      	adds	r3, #12
 8003cd2:	7812      	ldrb	r2, [r2, #0]
 8003cd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cee:	e0a4      	b.n	8003e3a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d134      	bne.n	8003d68 <HAL_SPI_TransmitReceive+0x30a>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d02f      	beq.n	8003d68 <HAL_SPI_TransmitReceive+0x30a>
 8003d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d12c      	bne.n	8003d68 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d912      	bls.n	8003d3e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1c:	881a      	ldrh	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d28:	1c9a      	adds	r2, r3, #2
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3b02      	subs	r3, #2
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d3c:	e012      	b.n	8003d64 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	330c      	adds	r3, #12
 8003d48:	7812      	ldrb	r2, [r2, #0]
 8003d4a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d50:	1c5a      	adds	r2, r3, #1
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d148      	bne.n	8003e08 <HAL_SPI_TransmitReceive+0x3aa>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d042      	beq.n	8003e08 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d923      	bls.n	8003dd6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68da      	ldr	r2, [r3, #12]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d98:	b292      	uxth	r2, r2
 8003d9a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da0:	1c9a      	adds	r2, r3, #2
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	3b02      	subs	r3, #2
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d81f      	bhi.n	8003e04 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003dd2:	605a      	str	r2, [r3, #4]
 8003dd4:	e016      	b.n	8003e04 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f103 020c 	add.w	r2, r3, #12
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de2:	7812      	ldrb	r2, [r2, #0]
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dec:	1c5a      	adds	r2, r3, #1
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e04:	2301      	movs	r3, #1
 8003e06:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e08:	f7fd fa12 	bl	8001230 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d803      	bhi.n	8003e20 <HAL_SPI_TransmitReceive+0x3c2>
 8003e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e1e:	d102      	bne.n	8003e26 <HAL_SPI_TransmitReceive+0x3c8>
 8003e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d109      	bne.n	8003e3a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e02c      	b.n	8003e94 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f47f af55 	bne.w	8003cf0 <HAL_SPI_TransmitReceive+0x292>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f47f af4e 	bne.w	8003cf0 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e54:	6a3a      	ldr	r2, [r7, #32]
 8003e56:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 fab5 	bl	80043c8 <SPI_EndRxTxTransaction>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d008      	beq.n	8003e76 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2220      	movs	r2, #32
 8003e68:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e00e      	b.n	8003e94 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003e92:	2300      	movs	r3, #0
  }
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3728      	adds	r7, #40	@ 0x28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	099b      	lsrs	r3, r3, #6
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10f      	bne.n	8003ee0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	099b      	lsrs	r3, r3, #6
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d004      	beq.n	8003ee0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	4798      	blx	r3
    return;
 8003ede:	e0d7      	b.n	8004090 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	085b      	lsrs	r3, r3, #1
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00a      	beq.n	8003f02 <HAL_SPI_IRQHandler+0x66>
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	09db      	lsrs	r3, r3, #7
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d004      	beq.n	8003f02 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	4798      	blx	r3
    return;
 8003f00:	e0c6      	b.n	8004090 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	095b      	lsrs	r3, r3, #5
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10c      	bne.n	8003f28 <HAL_SPI_IRQHandler+0x8c>
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	099b      	lsrs	r3, r3, #6
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d106      	bne.n	8003f28 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	0a1b      	lsrs	r3, r3, #8
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 80b4 	beq.w	8004090 <HAL_SPI_IRQHandler+0x1f4>
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	095b      	lsrs	r3, r3, #5
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 80ad 	beq.w	8004090 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	099b      	lsrs	r3, r3, #6
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d023      	beq.n	8003f8a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b03      	cmp	r3, #3
 8003f4c:	d011      	beq.n	8003f72 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f52:	f043 0204 	orr.w	r2, r3, #4
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	617b      	str	r3, [r7, #20]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	617b      	str	r3, [r7, #20]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	617b      	str	r3, [r7, #20]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	e00b      	b.n	8003f8a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f72:	2300      	movs	r3, #0
 8003f74:	613b      	str	r3, [r7, #16]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	613b      	str	r3, [r7, #16]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	693b      	ldr	r3, [r7, #16]
        return;
 8003f88:	e082      	b.n	8004090 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	095b      	lsrs	r3, r3, #5
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d014      	beq.n	8003fc0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f9a:	f043 0201 	orr.w	r2, r3, #1
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	0a1b      	lsrs	r3, r3, #8
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00c      	beq.n	8003fe6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fd0:	f043 0208 	orr.w	r2, r3, #8
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60bb      	str	r3, [r7, #8]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	60bb      	str	r3, [r7, #8]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d04f      	beq.n	800408e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003ffc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d104      	bne.n	800401a <HAL_SPI_IRQHandler+0x17e>
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d034      	beq.n	8004084 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0203 	bic.w	r2, r2, #3
 8004028:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800402e:	2b00      	cmp	r3, #0
 8004030:	d011      	beq.n	8004056 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004036:	4a18      	ldr	r2, [pc, #96]	@ (8004098 <HAL_SPI_IRQHandler+0x1fc>)
 8004038:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800403e:	4618      	mov	r0, r3
 8004040:	f7fd fa20 	bl	8001484 <HAL_DMA_Abort_IT>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d005      	beq.n	8004056 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800404e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800405a:	2b00      	cmp	r3, #0
 800405c:	d016      	beq.n	800408c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004062:	4a0d      	ldr	r2, [pc, #52]	@ (8004098 <HAL_SPI_IRQHandler+0x1fc>)
 8004064:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800406a:	4618      	mov	r0, r3
 800406c:	f7fd fa0a 	bl	8001484 <HAL_DMA_Abort_IT>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800407a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004082:	e003      	b.n	800408c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f809 	bl	800409c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800408a:	e000      	b.n	800408e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800408c:	bf00      	nop
    return;
 800408e:	bf00      	nop
  }
}
 8004090:	3720      	adds	r7, #32
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	080040b1 	.word	0x080040b1

0800409c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040bc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f7ff ffe5 	bl	800409c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80040d2:	bf00      	nop
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
	...

080040dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	603b      	str	r3, [r7, #0]
 80040e8:	4613      	mov	r3, r2
 80040ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80040ec:	f7fd f8a0 	bl	8001230 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f4:	1a9b      	subs	r3, r3, r2
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	4413      	add	r3, r2
 80040fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040fc:	f7fd f898 	bl	8001230 <HAL_GetTick>
 8004100:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004102:	4b39      	ldr	r3, [pc, #228]	@ (80041e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	015b      	lsls	r3, r3, #5
 8004108:	0d1b      	lsrs	r3, r3, #20
 800410a:	69fa      	ldr	r2, [r7, #28]
 800410c:	fb02 f303 	mul.w	r3, r2, r3
 8004110:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004112:	e054      	b.n	80041be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800411a:	d050      	beq.n	80041be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800411c:	f7fd f888 	bl	8001230 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	69fa      	ldr	r2, [r7, #28]
 8004128:	429a      	cmp	r2, r3
 800412a:	d902      	bls.n	8004132 <SPI_WaitFlagStateUntilTimeout+0x56>
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d13d      	bne.n	80041ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004140:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800414a:	d111      	bne.n	8004170 <SPI_WaitFlagStateUntilTimeout+0x94>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004154:	d004      	beq.n	8004160 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800415e:	d107      	bne.n	8004170 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800416e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004174:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004178:	d10f      	bne.n	800419a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004198:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e017      	b.n	80041de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	3b01      	subs	r3, #1
 80041bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	4013      	ands	r3, r2
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	bf0c      	ite	eq
 80041ce:	2301      	moveq	r3, #1
 80041d0:	2300      	movne	r3, #0
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	461a      	mov	r2, r3
 80041d6:	79fb      	ldrb	r3, [r7, #7]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d19b      	bne.n	8004114 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3720      	adds	r7, #32
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	20000008 	.word	0x20000008

080041ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08a      	sub	sp, #40	@ 0x28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80041fa:	2300      	movs	r3, #0
 80041fc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80041fe:	f7fd f817 	bl	8001230 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004206:	1a9b      	subs	r3, r3, r2
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	4413      	add	r3, r2
 800420c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800420e:	f7fd f80f 	bl	8001230 <HAL_GetTick>
 8004212:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	330c      	adds	r3, #12
 800421a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800421c:	4b3d      	ldr	r3, [pc, #244]	@ (8004314 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	4613      	mov	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	00da      	lsls	r2, r3, #3
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	0d1b      	lsrs	r3, r3, #20
 800422c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800422e:	fb02 f303 	mul.w	r3, r2, r3
 8004232:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004234:	e060      	b.n	80042f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800423c:	d107      	bne.n	800424e <SPI_WaitFifoStateUntilTimeout+0x62>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d104      	bne.n	800424e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	b2db      	uxtb	r3, r3
 800424a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800424c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004254:	d050      	beq.n	80042f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004256:	f7fc ffeb 	bl	8001230 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004262:	429a      	cmp	r2, r3
 8004264:	d902      	bls.n	800426c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004268:	2b00      	cmp	r3, #0
 800426a:	d13d      	bne.n	80042e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800427a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004284:	d111      	bne.n	80042aa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800428e:	d004      	beq.n	800429a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004298:	d107      	bne.n	80042aa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042b2:	d10f      	bne.n	80042d4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e010      	b.n	800430a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	3b01      	subs	r3, #1
 80042f6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689a      	ldr	r2, [r3, #8]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	4013      	ands	r3, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	429a      	cmp	r2, r3
 8004306:	d196      	bne.n	8004236 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3728      	adds	r7, #40	@ 0x28
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	20000008 	.word	0x20000008

08004318 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af02      	add	r7, sp, #8
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800432c:	d111      	bne.n	8004352 <SPI_EndRxTransaction+0x3a>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004336:	d004      	beq.n	8004342 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004340:	d107      	bne.n	8004352 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004350:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	2200      	movs	r2, #0
 800435a:	2180      	movs	r1, #128	@ 0x80
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f7ff febd 	bl	80040dc <SPI_WaitFlagStateUntilTimeout>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d007      	beq.n	8004378 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800436c:	f043 0220 	orr.w	r2, r3, #32
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e023      	b.n	80043c0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004380:	d11d      	bne.n	80043be <SPI_EndRxTransaction+0xa6>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800438a:	d004      	beq.n	8004396 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004394:	d113      	bne.n	80043be <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2200      	movs	r2, #0
 800439e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f7ff ff22 	bl	80041ec <SPI_WaitFifoStateUntilTimeout>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d007      	beq.n	80043be <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043b2:	f043 0220 	orr.w	r2, r3, #32
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e000      	b.n	80043c0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af02      	add	r7, sp, #8
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2200      	movs	r2, #0
 80043dc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f7ff ff03 	bl	80041ec <SPI_WaitFifoStateUntilTimeout>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d007      	beq.n	80043fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043f0:	f043 0220 	orr.w	r2, r3, #32
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e027      	b.n	800444c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	9300      	str	r3, [sp, #0]
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2200      	movs	r2, #0
 8004404:	2180      	movs	r1, #128	@ 0x80
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f7ff fe68 	bl	80040dc <SPI_WaitFlagStateUntilTimeout>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d007      	beq.n	8004422 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004416:	f043 0220 	orr.w	r2, r3, #32
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e014      	b.n	800444c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	2200      	movs	r2, #0
 800442a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f7ff fedc 	bl	80041ec <SPI_WaitFifoStateUntilTimeout>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d007      	beq.n	800444a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800443e:	f043 0220 	orr.w	r2, r3, #32
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e000      	b.n	800444c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e049      	b.n	80044fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f841 	bl	8004502 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3304      	adds	r3, #4
 8004490:	4619      	mov	r1, r3
 8004492:	4610      	mov	r0, r2
 8004494:	f000 f9be 	bl	8004814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004502:	b480      	push	{r7}
 8004504:	b083      	sub	sp, #12
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800450a:	bf00      	nop
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
	...

08004518 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b01      	cmp	r3, #1
 800452a:	d001      	beq.n	8004530 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e036      	b.n	800459e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a17      	ldr	r2, [pc, #92]	@ (80045ac <HAL_TIM_Base_Start_IT+0x94>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d004      	beq.n	800455c <HAL_TIM_Base_Start_IT+0x44>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800455a:	d115      	bne.n	8004588 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	4b13      	ldr	r3, [pc, #76]	@ (80045b0 <HAL_TIM_Base_Start_IT+0x98>)
 8004564:	4013      	ands	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b06      	cmp	r3, #6
 800456c:	d015      	beq.n	800459a <HAL_TIM_Base_Start_IT+0x82>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004574:	d011      	beq.n	800459a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f042 0201 	orr.w	r2, r2, #1
 8004584:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004586:	e008      	b.n	800459a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0201 	orr.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	e000      	b.n	800459c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800459a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	40012c00 	.word	0x40012c00
 80045b0:	00010007 	.word	0x00010007

080045b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d020      	beq.n	8004618 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d01b      	beq.n	8004618 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f06f 0202 	mvn.w	r2, #2
 80045e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	f003 0303 	and.w	r3, r3, #3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f8e9 	bl	80047d6 <HAL_TIM_IC_CaptureCallback>
 8004604:	e005      	b.n	8004612 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f8db 	bl	80047c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 f8ec 	bl	80047ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f003 0304 	and.w	r3, r3, #4
 800461e:	2b00      	cmp	r3, #0
 8004620:	d020      	beq.n	8004664 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	2b00      	cmp	r3, #0
 800462a:	d01b      	beq.n	8004664 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f06f 0204 	mvn.w	r2, #4
 8004634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2202      	movs	r2, #2
 800463a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f8c3 	bl	80047d6 <HAL_TIM_IC_CaptureCallback>
 8004650:	e005      	b.n	800465e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f8b5 	bl	80047c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f8c6 	bl	80047ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f003 0308 	and.w	r3, r3, #8
 800466a:	2b00      	cmp	r3, #0
 800466c:	d020      	beq.n	80046b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f003 0308 	and.w	r3, r3, #8
 8004674:	2b00      	cmp	r3, #0
 8004676:	d01b      	beq.n	80046b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f06f 0208 	mvn.w	r2, #8
 8004680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2204      	movs	r2, #4
 8004686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f89d 	bl	80047d6 <HAL_TIM_IC_CaptureCallback>
 800469c:	e005      	b.n	80046aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f88f 	bl	80047c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f8a0 	bl	80047ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f003 0310 	and.w	r3, r3, #16
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d020      	beq.n	80046fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f003 0310 	and.w	r3, r3, #16
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d01b      	beq.n	80046fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f06f 0210 	mvn.w	r2, #16
 80046cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2208      	movs	r2, #8
 80046d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f877 	bl	80047d6 <HAL_TIM_IC_CaptureCallback>
 80046e8:	e005      	b.n	80046f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f869 	bl	80047c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f87a 	bl	80047ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00c      	beq.n	8004720 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d007      	beq.n	8004720 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f06f 0201 	mvn.w	r2, #1
 8004718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7fc f9ba 	bl	8000a94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004726:	2b00      	cmp	r3, #0
 8004728:	d104      	bne.n	8004734 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00c      	beq.n	800474e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800473a:	2b00      	cmp	r3, #0
 800473c:	d007      	beq.n	800474e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f8d7 	bl	80048fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00c      	beq.n	8004772 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800475e:	2b00      	cmp	r3, #0
 8004760:	d007      	beq.n	8004772 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800476a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f8cf 	bl	8004910 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00c      	beq.n	8004796 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004782:	2b00      	cmp	r3, #0
 8004784:	d007      	beq.n	8004796 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800478e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f834 	bl	80047fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f003 0320 	and.w	r3, r3, #32
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00c      	beq.n	80047ba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f003 0320 	and.w	r3, r3, #32
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d007      	beq.n	80047ba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f06f 0220 	mvn.w	r2, #32
 80047b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f897 	bl	80048e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047ba:	bf00      	nop
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
	...

08004814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a2d      	ldr	r2, [pc, #180]	@ (80048dc <TIM_Base_SetConfig+0xc8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d003      	beq.n	8004834 <TIM_Base_SetConfig+0x20>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004832:	d108      	bne.n	8004846 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800483a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	4313      	orrs	r3, r2
 8004844:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a24      	ldr	r2, [pc, #144]	@ (80048dc <TIM_Base_SetConfig+0xc8>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d00b      	beq.n	8004866 <TIM_Base_SetConfig+0x52>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004854:	d007      	beq.n	8004866 <TIM_Base_SetConfig+0x52>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a21      	ldr	r2, [pc, #132]	@ (80048e0 <TIM_Base_SetConfig+0xcc>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d003      	beq.n	8004866 <TIM_Base_SetConfig+0x52>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a20      	ldr	r2, [pc, #128]	@ (80048e4 <TIM_Base_SetConfig+0xd0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d108      	bne.n	8004878 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800486c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	689a      	ldr	r2, [r3, #8]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a10      	ldr	r2, [pc, #64]	@ (80048dc <TIM_Base_SetConfig+0xc8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d007      	beq.n	80048ae <TIM_Base_SetConfig+0x9a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a0f      	ldr	r2, [pc, #60]	@ (80048e0 <TIM_Base_SetConfig+0xcc>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d003      	beq.n	80048ae <TIM_Base_SetConfig+0x9a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a0e      	ldr	r2, [pc, #56]	@ (80048e4 <TIM_Base_SetConfig+0xd0>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d103      	bne.n	80048b6 <TIM_Base_SetConfig+0xa2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	691a      	ldr	r2, [r3, #16]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f043 0204 	orr.w	r2, r3, #4
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	601a      	str	r2, [r3, #0]
}
 80048ce:	bf00      	nop
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	40012c00 	.word	0x40012c00
 80048e0:	40014400 	.word	0x40014400
 80048e4:	40014800 	.word	0x40014800

080048e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <LL_RCC_GetUSARTClockSource>:
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800492c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004930:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4013      	ands	r3, r2
}
 8004938:	4618      	mov	r0, r3
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <LL_RCC_GetLPUARTClockSource>:
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800494c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004950:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4013      	ands	r3, r2
}
 8004958:	4618      	mov	r0, r3
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e042      	b.n	80049fc <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800497c:	2b00      	cmp	r3, #0
 800497e:	d106      	bne.n	800498e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f83b 	bl	8004a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2224      	movs	r2, #36	@ 0x24
 8004992:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 0201 	bic.w	r2, r2, #1
 80049a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fa5a 	bl	8004e68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f82f 	bl	8004a18 <UART_SetConfig>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d101      	bne.n	80049c4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e01b      	b.n	80049fc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80049d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689a      	ldr	r2, [r3, #8]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80049e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0201 	orr.w	r2, r2, #1
 80049f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 fad9 	bl	8004fac <UART_CheckIdleState>
 80049fa:	4603      	mov	r3, r0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a1c:	b08c      	sub	sp, #48	@ 0x30
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a22:	2300      	movs	r3, #0
 8004a24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	689a      	ldr	r2, [r3, #8]
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	431a      	orrs	r2, r3
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	431a      	orrs	r2, r3
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	4baf      	ldr	r3, [pc, #700]	@ (8004d04 <UART_SetConfig+0x2ec>)
 8004a48:	4013      	ands	r3, r2
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	6812      	ldr	r2, [r2, #0]
 8004a4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a50:	430b      	orrs	r3, r1
 8004a52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4aa4      	ldr	r2, [pc, #656]	@ (8004d08 <UART_SetConfig+0x2f0>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d004      	beq.n	8004a84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a80:	4313      	orrs	r3, r2
 8004a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004a8e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	6812      	ldr	r2, [r2, #0]
 8004a96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a98:	430b      	orrs	r3, r1
 8004a9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa2:	f023 010f 	bic.w	r1, r3, #15
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a95      	ldr	r2, [pc, #596]	@ (8004d0c <UART_SetConfig+0x2f4>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d125      	bne.n	8004b08 <UART_SetConfig+0xf0>
 8004abc:	2003      	movs	r0, #3
 8004abe:	f7ff ff31 	bl	8004924 <LL_RCC_GetUSARTClockSource>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b03      	cmp	r3, #3
 8004ac6:	d81b      	bhi.n	8004b00 <UART_SetConfig+0xe8>
 8004ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ad0 <UART_SetConfig+0xb8>)
 8004aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ace:	bf00      	nop
 8004ad0:	08004ae1 	.word	0x08004ae1
 8004ad4:	08004af1 	.word	0x08004af1
 8004ad8:	08004ae9 	.word	0x08004ae9
 8004adc:	08004af9 	.word	0x08004af9
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ae6:	e042      	b.n	8004b6e <UART_SetConfig+0x156>
 8004ae8:	2302      	movs	r3, #2
 8004aea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004aee:	e03e      	b.n	8004b6e <UART_SetConfig+0x156>
 8004af0:	2304      	movs	r3, #4
 8004af2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004af6:	e03a      	b.n	8004b6e <UART_SetConfig+0x156>
 8004af8:	2308      	movs	r3, #8
 8004afa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004afe:	e036      	b.n	8004b6e <UART_SetConfig+0x156>
 8004b00:	2310      	movs	r3, #16
 8004b02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b06:	e032      	b.n	8004b6e <UART_SetConfig+0x156>
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a7e      	ldr	r2, [pc, #504]	@ (8004d08 <UART_SetConfig+0x2f0>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d12a      	bne.n	8004b68 <UART_SetConfig+0x150>
 8004b12:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8004b16:	f7ff ff15 	bl	8004944 <LL_RCC_GetLPUARTClockSource>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b20:	d01a      	beq.n	8004b58 <UART_SetConfig+0x140>
 8004b22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b26:	d81b      	bhi.n	8004b60 <UART_SetConfig+0x148>
 8004b28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b2c:	d00c      	beq.n	8004b48 <UART_SetConfig+0x130>
 8004b2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b32:	d815      	bhi.n	8004b60 <UART_SetConfig+0x148>
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <UART_SetConfig+0x128>
 8004b38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b3c:	d008      	beq.n	8004b50 <UART_SetConfig+0x138>
 8004b3e:	e00f      	b.n	8004b60 <UART_SetConfig+0x148>
 8004b40:	2300      	movs	r3, #0
 8004b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b46:	e012      	b.n	8004b6e <UART_SetConfig+0x156>
 8004b48:	2302      	movs	r3, #2
 8004b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b4e:	e00e      	b.n	8004b6e <UART_SetConfig+0x156>
 8004b50:	2304      	movs	r3, #4
 8004b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b56:	e00a      	b.n	8004b6e <UART_SetConfig+0x156>
 8004b58:	2308      	movs	r3, #8
 8004b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b5e:	e006      	b.n	8004b6e <UART_SetConfig+0x156>
 8004b60:	2310      	movs	r3, #16
 8004b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b66:	e002      	b.n	8004b6e <UART_SetConfig+0x156>
 8004b68:	2310      	movs	r3, #16
 8004b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a65      	ldr	r2, [pc, #404]	@ (8004d08 <UART_SetConfig+0x2f0>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	f040 8097 	bne.w	8004ca8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b7a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b7e:	2b08      	cmp	r3, #8
 8004b80:	d823      	bhi.n	8004bca <UART_SetConfig+0x1b2>
 8004b82:	a201      	add	r2, pc, #4	@ (adr r2, 8004b88 <UART_SetConfig+0x170>)
 8004b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b88:	08004bad 	.word	0x08004bad
 8004b8c:	08004bcb 	.word	0x08004bcb
 8004b90:	08004bb5 	.word	0x08004bb5
 8004b94:	08004bcb 	.word	0x08004bcb
 8004b98:	08004bbb 	.word	0x08004bbb
 8004b9c:	08004bcb 	.word	0x08004bcb
 8004ba0:	08004bcb 	.word	0x08004bcb
 8004ba4:	08004bcb 	.word	0x08004bcb
 8004ba8:	08004bc3 	.word	0x08004bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bac:	f7fe f81e 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 8004bb0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bb2:	e010      	b.n	8004bd6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bb4:	4b56      	ldr	r3, [pc, #344]	@ (8004d10 <UART_SetConfig+0x2f8>)
 8004bb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004bb8:	e00d      	b.n	8004bd6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bba:	f7fd ff97 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 8004bbe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bc0:	e009      	b.n	8004bd6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004bc8:	e005      	b.n	8004bd6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004bd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 812b 	beq.w	8004e34 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be2:	4a4c      	ldr	r2, [pc, #304]	@ (8004d14 <UART_SetConfig+0x2fc>)
 8004be4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004be8:	461a      	mov	r2, r3
 8004bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bec:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bf0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	4413      	add	r3, r2
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d305      	bcc.n	8004c0e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d903      	bls.n	8004c16 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004c14:	e10e      	b.n	8004e34 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c18:	2200      	movs	r2, #0
 8004c1a:	60bb      	str	r3, [r7, #8]
 8004c1c:	60fa      	str	r2, [r7, #12]
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c22:	4a3c      	ldr	r2, [pc, #240]	@ (8004d14 <UART_SetConfig+0x2fc>)
 8004c24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	603b      	str	r3, [r7, #0]
 8004c2e:	607a      	str	r2, [r7, #4]
 8004c30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c38:	f7fb faf2 	bl	8000220 <__aeabi_uldivmod>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4610      	mov	r0, r2
 8004c42:	4619      	mov	r1, r3
 8004c44:	f04f 0200 	mov.w	r2, #0
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	020b      	lsls	r3, r1, #8
 8004c4e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c52:	0202      	lsls	r2, r0, #8
 8004c54:	6979      	ldr	r1, [r7, #20]
 8004c56:	6849      	ldr	r1, [r1, #4]
 8004c58:	0849      	lsrs	r1, r1, #1
 8004c5a:	2000      	movs	r0, #0
 8004c5c:	460c      	mov	r4, r1
 8004c5e:	4605      	mov	r5, r0
 8004c60:	eb12 0804 	adds.w	r8, r2, r4
 8004c64:	eb43 0905 	adc.w	r9, r3, r5
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	469a      	mov	sl, r3
 8004c70:	4693      	mov	fp, r2
 8004c72:	4652      	mov	r2, sl
 8004c74:	465b      	mov	r3, fp
 8004c76:	4640      	mov	r0, r8
 8004c78:	4649      	mov	r1, r9
 8004c7a:	f7fb fad1 	bl	8000220 <__aeabi_uldivmod>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	460b      	mov	r3, r1
 8004c82:	4613      	mov	r3, r2
 8004c84:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c8c:	d308      	bcc.n	8004ca0 <UART_SetConfig+0x288>
 8004c8e:	6a3b      	ldr	r3, [r7, #32]
 8004c90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c94:	d204      	bcs.n	8004ca0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6a3a      	ldr	r2, [r7, #32]
 8004c9c:	60da      	str	r2, [r3, #12]
 8004c9e:	e0c9      	b.n	8004e34 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004ca6:	e0c5      	b.n	8004e34 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cb0:	d16d      	bne.n	8004d8e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004cb2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	2b07      	cmp	r3, #7
 8004cba:	d82d      	bhi.n	8004d18 <UART_SetConfig+0x300>
 8004cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8004cc4 <UART_SetConfig+0x2ac>)
 8004cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc2:	bf00      	nop
 8004cc4:	08004ce5 	.word	0x08004ce5
 8004cc8:	08004ced 	.word	0x08004ced
 8004ccc:	08004d19 	.word	0x08004d19
 8004cd0:	08004cf3 	.word	0x08004cf3
 8004cd4:	08004d19 	.word	0x08004d19
 8004cd8:	08004d19 	.word	0x08004d19
 8004cdc:	08004d19 	.word	0x08004d19
 8004ce0:	08004cfb 	.word	0x08004cfb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ce4:	f7fd ff98 	bl	8002c18 <HAL_RCC_GetPCLK2Freq>
 8004ce8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004cea:	e01b      	b.n	8004d24 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cec:	4b08      	ldr	r3, [pc, #32]	@ (8004d10 <UART_SetConfig+0x2f8>)
 8004cee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004cf0:	e018      	b.n	8004d24 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cf2:	f7fd fefb 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 8004cf6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004cf8:	e014      	b.n	8004d24 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d00:	e010      	b.n	8004d24 <UART_SetConfig+0x30c>
 8004d02:	bf00      	nop
 8004d04:	cfff69f3 	.word	0xcfff69f3
 8004d08:	40008000 	.word	0x40008000
 8004d0c:	40013800 	.word	0x40013800
 8004d10:	00f42400 	.word	0x00f42400
 8004d14:	080091bc 	.word	0x080091bc
      default:
        pclk = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004d22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 8084 	beq.w	8004e34 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d30:	4a4b      	ldr	r2, [pc, #300]	@ (8004e60 <UART_SetConfig+0x448>)
 8004d32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d36:	461a      	mov	r2, r3
 8004d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d3e:	005a      	lsls	r2, r3, #1
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	085b      	lsrs	r3, r3, #1
 8004d46:	441a      	add	r2, r3
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d50:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	2b0f      	cmp	r3, #15
 8004d56:	d916      	bls.n	8004d86 <UART_SetConfig+0x36e>
 8004d58:	6a3b      	ldr	r3, [r7, #32]
 8004d5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d5e:	d212      	bcs.n	8004d86 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	f023 030f 	bic.w	r3, r3, #15
 8004d68:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	085b      	lsrs	r3, r3, #1
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	8bfb      	ldrh	r3, [r7, #30]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	8bfa      	ldrh	r2, [r7, #30]
 8004d82:	60da      	str	r2, [r3, #12]
 8004d84:	e056      	b.n	8004e34 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004d8c:	e052      	b.n	8004e34 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d8e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004d92:	3b01      	subs	r3, #1
 8004d94:	2b07      	cmp	r3, #7
 8004d96:	d822      	bhi.n	8004dde <UART_SetConfig+0x3c6>
 8004d98:	a201      	add	r2, pc, #4	@ (adr r2, 8004da0 <UART_SetConfig+0x388>)
 8004d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9e:	bf00      	nop
 8004da0:	08004dc1 	.word	0x08004dc1
 8004da4:	08004dc9 	.word	0x08004dc9
 8004da8:	08004ddf 	.word	0x08004ddf
 8004dac:	08004dcf 	.word	0x08004dcf
 8004db0:	08004ddf 	.word	0x08004ddf
 8004db4:	08004ddf 	.word	0x08004ddf
 8004db8:	08004ddf 	.word	0x08004ddf
 8004dbc:	08004dd7 	.word	0x08004dd7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dc0:	f7fd ff2a 	bl	8002c18 <HAL_RCC_GetPCLK2Freq>
 8004dc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004dc6:	e010      	b.n	8004dea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dc8:	4b26      	ldr	r3, [pc, #152]	@ (8004e64 <UART_SetConfig+0x44c>)
 8004dca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004dcc:	e00d      	b.n	8004dea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dce:	f7fd fe8d 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 8004dd2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004dd4:	e009      	b.n	8004dea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ddc:	e005      	b.n	8004dea <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004de8:	bf00      	nop
    }

    if (pclk != 0U)
 8004dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d021      	beq.n	8004e34 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df4:	4a1a      	ldr	r2, [pc, #104]	@ (8004e60 <UART_SetConfig+0x448>)
 8004df6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfe:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	085b      	lsrs	r3, r3, #1
 8004e08:	441a      	add	r2, r3
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e14:	6a3b      	ldr	r3, [r7, #32]
 8004e16:	2b0f      	cmp	r3, #15
 8004e18:	d909      	bls.n	8004e2e <UART_SetConfig+0x416>
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
 8004e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e20:	d205      	bcs.n	8004e2e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	60da      	str	r2, [r3, #12]
 8004e2c:	e002      	b.n	8004e34 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	2200      	movs	r2, #0
 8004e48:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004e50:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3730      	adds	r7, #48	@ 0x30
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e5e:	bf00      	nop
 8004e60:	080091bc 	.word	0x080091bc
 8004e64:	00f42400 	.word	0x00f42400

08004e68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e74:	f003 0308 	and.w	r3, r3, #8
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00a      	beq.n	8004e92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00a      	beq.n	8004ed6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00a      	beq.n	8004ef8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004efc:	f003 0310 	and.w	r3, r3, #16
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00a      	beq.n	8004f1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f1e:	f003 0320 	and.w	r3, r3, #32
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d01a      	beq.n	8004f7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f66:	d10a      	bne.n	8004f7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	605a      	str	r2, [r3, #4]
  }
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b098      	sub	sp, #96	@ 0x60
 8004fb0:	af02      	add	r7, sp, #8
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fbc:	f7fc f938 	bl	8001230 <HAL_GetTick>
 8004fc0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0308 	and.w	r3, r3, #8
 8004fcc:	2b08      	cmp	r3, #8
 8004fce:	d12f      	bne.n	8005030 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fd0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f88e 	bl	8005100 <UART_WaitOnFlagUntilTimeout>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d022      	beq.n	8005030 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ff2:	e853 3f00 	ldrex	r3, [r3]
 8004ff6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ffa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ffe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	461a      	mov	r2, r3
 8005006:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005008:	647b      	str	r3, [r7, #68]	@ 0x44
 800500a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800500e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005010:	e841 2300 	strex	r3, r2, [r1]
 8005014:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1e6      	bne.n	8004fea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2220      	movs	r2, #32
 8005020:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e063      	b.n	80050f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0304 	and.w	r3, r3, #4
 800503a:	2b04      	cmp	r3, #4
 800503c:	d149      	bne.n	80050d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800503e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005046:	2200      	movs	r2, #0
 8005048:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f857 	bl	8005100 <UART_WaitOnFlagUntilTimeout>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d03c      	beq.n	80050d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005060:	e853 3f00 	ldrex	r3, [r3]
 8005064:	623b      	str	r3, [r7, #32]
   return(result);
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800506c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	461a      	mov	r2, r3
 8005074:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005076:	633b      	str	r3, [r7, #48]	@ 0x30
 8005078:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800507c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800507e:	e841 2300 	strex	r3, r2, [r1]
 8005082:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1e6      	bne.n	8005058 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	3308      	adds	r3, #8
 8005090:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	e853 3f00 	ldrex	r3, [r3]
 8005098:	60fb      	str	r3, [r7, #12]
   return(result);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f023 0301 	bic.w	r3, r3, #1
 80050a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3308      	adds	r3, #8
 80050a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050aa:	61fa      	str	r2, [r7, #28]
 80050ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ae:	69b9      	ldr	r1, [r7, #24]
 80050b0:	69fa      	ldr	r2, [r7, #28]
 80050b2:	e841 2300 	strex	r3, r2, [r1]
 80050b6:	617b      	str	r3, [r7, #20]
   return(result);
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1e5      	bne.n	800508a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e012      	b.n	80050f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2220      	movs	r2, #32
 80050d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2220      	movs	r2, #32
 80050de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3758      	adds	r7, #88	@ 0x58
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	603b      	str	r3, [r7, #0]
 800510c:	4613      	mov	r3, r2
 800510e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005110:	e04f      	b.n	80051b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005118:	d04b      	beq.n	80051b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800511a:	f7fc f889 	bl	8001230 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	429a      	cmp	r2, r3
 8005128:	d302      	bcc.n	8005130 <UART_WaitOnFlagUntilTimeout+0x30>
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e04e      	b.n	80051d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0304 	and.w	r3, r3, #4
 800513e:	2b00      	cmp	r3, #0
 8005140:	d037      	beq.n	80051b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	2b80      	cmp	r3, #128	@ 0x80
 8005146:	d034      	beq.n	80051b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	2b40      	cmp	r3, #64	@ 0x40
 800514c:	d031      	beq.n	80051b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	f003 0308 	and.w	r3, r3, #8
 8005158:	2b08      	cmp	r3, #8
 800515a:	d110      	bne.n	800517e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2208      	movs	r2, #8
 8005162:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f000 f838 	bl	80051da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2208      	movs	r2, #8
 800516e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e029      	b.n	80051d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005188:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800518c:	d111      	bne.n	80051b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005196:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 f81e 	bl	80051da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2220      	movs	r2, #32
 80051a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e00f      	b.n	80051d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	69da      	ldr	r2, [r3, #28]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	4013      	ands	r3, r2
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	429a      	cmp	r2, r3
 80051c0:	bf0c      	ite	eq
 80051c2:	2301      	moveq	r3, #1
 80051c4:	2300      	movne	r3, #0
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	461a      	mov	r2, r3
 80051ca:	79fb      	ldrb	r3, [r7, #7]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d0a0      	beq.n	8005112 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051da:	b480      	push	{r7}
 80051dc:	b095      	sub	sp, #84	@ 0x54
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ea:	e853 3f00 	ldrex	r3, [r3]
 80051ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	461a      	mov	r2, r3
 80051fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005200:	643b      	str	r3, [r7, #64]	@ 0x40
 8005202:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005204:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005206:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005208:	e841 2300 	strex	r3, r2, [r1]
 800520c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800520e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1e6      	bne.n	80051e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	3308      	adds	r3, #8
 800521a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521c:	6a3b      	ldr	r3, [r7, #32]
 800521e:	e853 3f00 	ldrex	r3, [r3]
 8005222:	61fb      	str	r3, [r7, #28]
   return(result);
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800522a:	f023 0301 	bic.w	r3, r3, #1
 800522e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3308      	adds	r3, #8
 8005236:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005238:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800523a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800523e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005240:	e841 2300 	strex	r3, r2, [r1]
 8005244:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1e3      	bne.n	8005214 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005250:	2b01      	cmp	r3, #1
 8005252:	d118      	bne.n	8005286 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	e853 3f00 	ldrex	r3, [r3]
 8005260:	60bb      	str	r3, [r7, #8]
   return(result);
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	f023 0310 	bic.w	r3, r3, #16
 8005268:	647b      	str	r3, [r7, #68]	@ 0x44
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	461a      	mov	r2, r3
 8005270:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005272:	61bb      	str	r3, [r7, #24]
 8005274:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005276:	6979      	ldr	r1, [r7, #20]
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	e841 2300 	strex	r3, r2, [r1]
 800527e:	613b      	str	r3, [r7, #16]
   return(result);
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1e6      	bne.n	8005254 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2220      	movs	r2, #32
 800528a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800529a:	bf00      	nop
 800529c:	3754      	adds	r7, #84	@ 0x54
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
	...

080052a8 <__NVIC_SetPriority>:
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	4603      	mov	r3, r0
 80052b0:	6039      	str	r1, [r7, #0]
 80052b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	db0a      	blt.n	80052d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	490c      	ldr	r1, [pc, #48]	@ (80052f4 <__NVIC_SetPriority+0x4c>)
 80052c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052c6:	0112      	lsls	r2, r2, #4
 80052c8:	b2d2      	uxtb	r2, r2
 80052ca:	440b      	add	r3, r1
 80052cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80052d0:	e00a      	b.n	80052e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	4908      	ldr	r1, [pc, #32]	@ (80052f8 <__NVIC_SetPriority+0x50>)
 80052d8:	79fb      	ldrb	r3, [r7, #7]
 80052da:	f003 030f 	and.w	r3, r3, #15
 80052de:	3b04      	subs	r3, #4
 80052e0:	0112      	lsls	r2, r2, #4
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	440b      	add	r3, r1
 80052e6:	761a      	strb	r2, [r3, #24]
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	e000e100 	.word	0xe000e100
 80052f8:	e000ed00 	.word	0xe000ed00

080052fc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80052fc:	b580      	push	{r7, lr}
 80052fe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005300:	4b05      	ldr	r3, [pc, #20]	@ (8005318 <SysTick_Handler+0x1c>)
 8005302:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005304:	f001 fd82 	bl	8006e0c <xTaskGetSchedulerState>
 8005308:	4603      	mov	r3, r0
 800530a:	2b01      	cmp	r3, #1
 800530c:	d001      	beq.n	8005312 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800530e:	f002 fb7b 	bl	8007a08 <xPortSysTickHandler>
  }
}
 8005312:	bf00      	nop
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	e000e010 	.word	0xe000e010

0800531c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005320:	2100      	movs	r1, #0
 8005322:	f06f 0004 	mvn.w	r0, #4
 8005326:	f7ff ffbf 	bl	80052a8 <__NVIC_SetPriority>
#endif
}
 800532a:	bf00      	nop
 800532c:	bd80      	pop	{r7, pc}
	...

08005330 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005336:	f3ef 8305 	mrs	r3, IPSR
 800533a:	603b      	str	r3, [r7, #0]
  return(result);
 800533c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800533e:	2b00      	cmp	r3, #0
 8005340:	d003      	beq.n	800534a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005342:	f06f 0305 	mvn.w	r3, #5
 8005346:	607b      	str	r3, [r7, #4]
 8005348:	e00c      	b.n	8005364 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800534a:	4b0a      	ldr	r3, [pc, #40]	@ (8005374 <osKernelInitialize+0x44>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d105      	bne.n	800535e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005352:	4b08      	ldr	r3, [pc, #32]	@ (8005374 <osKernelInitialize+0x44>)
 8005354:	2201      	movs	r2, #1
 8005356:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005358:	2300      	movs	r3, #0
 800535a:	607b      	str	r3, [r7, #4]
 800535c:	e002      	b.n	8005364 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800535e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005362:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005364:	687b      	ldr	r3, [r7, #4]
}
 8005366:	4618      	mov	r0, r3
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	2000021c 	.word	0x2000021c

08005378 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800537e:	f3ef 8305 	mrs	r3, IPSR
 8005382:	603b      	str	r3, [r7, #0]
  return(result);
 8005384:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <osKernelStart+0x1a>
    stat = osErrorISR;
 800538a:	f06f 0305 	mvn.w	r3, #5
 800538e:	607b      	str	r3, [r7, #4]
 8005390:	e010      	b.n	80053b4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005392:	4b0b      	ldr	r3, [pc, #44]	@ (80053c0 <osKernelStart+0x48>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d109      	bne.n	80053ae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800539a:	f7ff ffbf 	bl	800531c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800539e:	4b08      	ldr	r3, [pc, #32]	@ (80053c0 <osKernelStart+0x48>)
 80053a0:	2202      	movs	r2, #2
 80053a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80053a4:	f001 f8ce 	bl	8006544 <vTaskStartScheduler>
      stat = osOK;
 80053a8:	2300      	movs	r3, #0
 80053aa:	607b      	str	r3, [r7, #4]
 80053ac:	e002      	b.n	80053b4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80053ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80053b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80053b4:	687b      	ldr	r3, [r7, #4]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3708      	adds	r7, #8
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	2000021c 	.word	0x2000021c

080053c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b08e      	sub	sp, #56	@ 0x38
 80053c8:	af04      	add	r7, sp, #16
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80053d0:	2300      	movs	r3, #0
 80053d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053d4:	f3ef 8305 	mrs	r3, IPSR
 80053d8:	617b      	str	r3, [r7, #20]
  return(result);
 80053da:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d17e      	bne.n	80054de <osThreadNew+0x11a>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d07b      	beq.n	80054de <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80053e6:	2380      	movs	r3, #128	@ 0x80
 80053e8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80053ea:	2318      	movs	r3, #24
 80053ec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80053f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80053f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d045      	beq.n	800548a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d002      	beq.n	800540c <osThreadNew+0x48>
        name = attr->name;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d002      	beq.n	800541a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d008      	beq.n	8005432 <osThreadNew+0x6e>
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	2b38      	cmp	r3, #56	@ 0x38
 8005424:	d805      	bhi.n	8005432 <osThreadNew+0x6e>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <osThreadNew+0x72>
        return (NULL);
 8005432:	2300      	movs	r3, #0
 8005434:	e054      	b.n	80054e0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	089b      	lsrs	r3, r3, #2
 8005444:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00e      	beq.n	800546c <osThreadNew+0xa8>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	2ba7      	cmp	r3, #167	@ 0xa7
 8005454:	d90a      	bls.n	800546c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800545a:	2b00      	cmp	r3, #0
 800545c:	d006      	beq.n	800546c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <osThreadNew+0xa8>
        mem = 1;
 8005466:	2301      	movs	r3, #1
 8005468:	61bb      	str	r3, [r7, #24]
 800546a:	e010      	b.n	800548e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10c      	bne.n	800548e <osThreadNew+0xca>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d108      	bne.n	800548e <osThreadNew+0xca>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d104      	bne.n	800548e <osThreadNew+0xca>
          mem = 0;
 8005484:	2300      	movs	r3, #0
 8005486:	61bb      	str	r3, [r7, #24]
 8005488:	e001      	b.n	800548e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800548a:	2300      	movs	r3, #0
 800548c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d110      	bne.n	80054b6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800549c:	9202      	str	r2, [sp, #8]
 800549e:	9301      	str	r3, [sp, #4]
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	6a3a      	ldr	r2, [r7, #32]
 80054a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f000 fe56 	bl	800615c <xTaskCreateStatic>
 80054b0:	4603      	mov	r3, r0
 80054b2:	613b      	str	r3, [r7, #16]
 80054b4:	e013      	b.n	80054de <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d110      	bne.n	80054de <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80054bc:	6a3b      	ldr	r3, [r7, #32]
 80054be:	b29a      	uxth	r2, r3
 80054c0:	f107 0310 	add.w	r3, r7, #16
 80054c4:	9301      	str	r3, [sp, #4]
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 fea4 	bl	800621c <xTaskCreate>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d001      	beq.n	80054de <osThreadNew+0x11a>
            hTask = NULL;
 80054da:	2300      	movs	r3, #0
 80054dc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80054de:	693b      	ldr	r3, [r7, #16]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3728      	adds	r7, #40	@ 0x28
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054f0:	f3ef 8305 	mrs	r3, IPSR
 80054f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80054f6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d003      	beq.n	8005504 <osDelay+0x1c>
    stat = osErrorISR;
 80054fc:	f06f 0305 	mvn.w	r3, #5
 8005500:	60fb      	str	r3, [r7, #12]
 8005502:	e007      	b.n	8005514 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005504:	2300      	movs	r3, #0
 8005506:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d002      	beq.n	8005514 <osDelay+0x2c>
      vTaskDelay(ticks);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 ffe2 	bl	80064d8 <vTaskDelay>
    }
  }

  return (stat);
 8005514:	68fb      	ldr	r3, [r7, #12]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
	...

08005520 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	4a07      	ldr	r2, [pc, #28]	@ (800554c <vApplicationGetIdleTaskMemory+0x2c>)
 8005530:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	4a06      	ldr	r2, [pc, #24]	@ (8005550 <vApplicationGetIdleTaskMemory+0x30>)
 8005536:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2280      	movs	r2, #128	@ 0x80
 800553c:	601a      	str	r2, [r3, #0]
}
 800553e:	bf00      	nop
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	20000220 	.word	0x20000220
 8005550:	200002c8 	.word	0x200002c8

08005554 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4a07      	ldr	r2, [pc, #28]	@ (8005580 <vApplicationGetTimerTaskMemory+0x2c>)
 8005564:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	4a06      	ldr	r2, [pc, #24]	@ (8005584 <vApplicationGetTimerTaskMemory+0x30>)
 800556a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005572:	601a      	str	r2, [r3, #0]
}
 8005574:	bf00      	nop
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	200004c8 	.word	0x200004c8
 8005584:	20000570 	.word	0x20000570

08005588 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f103 0208 	add.w	r2, r3, #8
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80055a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f103 0208 	add.w	r2, r3, #8
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f103 0208 	add.w	r2, r3, #8
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055e2:	b480      	push	{r7}
 80055e4:	b085      	sub	sp, #20
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	683a      	ldr	r2, [r7, #0]
 8005606:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	1c5a      	adds	r2, r3, #1
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	601a      	str	r2, [r3, #0]
}
 800561e:	bf00      	nop
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800562a:	b480      	push	{r7}
 800562c:	b085      	sub	sp, #20
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005640:	d103      	bne.n	800564a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	60fb      	str	r3, [r7, #12]
 8005648:	e00c      	b.n	8005664 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	3308      	adds	r3, #8
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	e002      	b.n	8005658 <vListInsert+0x2e>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	60fb      	str	r3, [r7, #12]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	429a      	cmp	r2, r3
 8005662:	d2f6      	bcs.n	8005652 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	1c5a      	adds	r2, r3, #1
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	601a      	str	r2, [r3, #0]
}
 8005690:	bf00      	nop
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	6892      	ldr	r2, [r2, #8]
 80056b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	6852      	ldr	r2, [r2, #4]
 80056bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d103      	bne.n	80056d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689a      	ldr	r2, [r3, #8]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	1e5a      	subs	r2, r3, #1
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10b      	bne.n	800571c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005708:	f383 8811 	msr	BASEPRI, r3
 800570c:	f3bf 8f6f 	isb	sy
 8005710:	f3bf 8f4f 	dsb	sy
 8005714:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005716:	bf00      	nop
 8005718:	bf00      	nop
 800571a:	e7fd      	b.n	8005718 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800571c:	f002 f8e4 	bl	80078e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005728:	68f9      	ldr	r1, [r7, #12]
 800572a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800572c:	fb01 f303 	mul.w	r3, r1, r3
 8005730:	441a      	add	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800574c:	3b01      	subs	r3, #1
 800574e:	68f9      	ldr	r1, [r7, #12]
 8005750:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005752:	fb01 f303 	mul.w	r3, r1, r3
 8005756:	441a      	add	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	22ff      	movs	r2, #255	@ 0xff
 8005760:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	22ff      	movs	r2, #255	@ 0xff
 8005768:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d114      	bne.n	800579c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d01a      	beq.n	80057b0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	3310      	adds	r3, #16
 800577e:	4618      	mov	r0, r3
 8005780:	f001 f97e 	bl	8006a80 <xTaskRemoveFromEventList>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d012      	beq.n	80057b0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800578a:	4b0d      	ldr	r3, [pc, #52]	@ (80057c0 <xQueueGenericReset+0xd0>)
 800578c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	e009      	b.n	80057b0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	3310      	adds	r3, #16
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7ff fef1 	bl	8005588 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	3324      	adds	r3, #36	@ 0x24
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7ff feec 	bl	8005588 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80057b0:	f002 f8cc 	bl	800794c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80057b4:	2301      	movs	r3, #1
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	e000ed04 	.word	0xe000ed04

080057c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08e      	sub	sp, #56	@ 0x38
 80057c8:	af02      	add	r7, sp, #8
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
 80057d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10b      	bne.n	80057f0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80057d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057dc:	f383 8811 	msr	BASEPRI, r3
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80057ea:	bf00      	nop
 80057ec:	bf00      	nop
 80057ee:	e7fd      	b.n	80057ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10b      	bne.n	800580e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80057f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057fa:	f383 8811 	msr	BASEPRI, r3
 80057fe:	f3bf 8f6f 	isb	sy
 8005802:	f3bf 8f4f 	dsb	sy
 8005806:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005808:	bf00      	nop
 800580a:	bf00      	nop
 800580c:	e7fd      	b.n	800580a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <xQueueGenericCreateStatic+0x56>
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <xQueueGenericCreateStatic+0x5a>
 800581a:	2301      	movs	r3, #1
 800581c:	e000      	b.n	8005820 <xQueueGenericCreateStatic+0x5c>
 800581e:	2300      	movs	r3, #0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10b      	bne.n	800583c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005828:	f383 8811 	msr	BASEPRI, r3
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	623b      	str	r3, [r7, #32]
}
 8005836:	bf00      	nop
 8005838:	bf00      	nop
 800583a:	e7fd      	b.n	8005838 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d102      	bne.n	8005848 <xQueueGenericCreateStatic+0x84>
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d101      	bne.n	800584c <xQueueGenericCreateStatic+0x88>
 8005848:	2301      	movs	r3, #1
 800584a:	e000      	b.n	800584e <xQueueGenericCreateStatic+0x8a>
 800584c:	2300      	movs	r3, #0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10b      	bne.n	800586a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005856:	f383 8811 	msr	BASEPRI, r3
 800585a:	f3bf 8f6f 	isb	sy
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	61fb      	str	r3, [r7, #28]
}
 8005864:	bf00      	nop
 8005866:	bf00      	nop
 8005868:	e7fd      	b.n	8005866 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800586a:	2350      	movs	r3, #80	@ 0x50
 800586c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	2b50      	cmp	r3, #80	@ 0x50
 8005872:	d00b      	beq.n	800588c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	61bb      	str	r3, [r7, #24]
}
 8005886:	bf00      	nop
 8005888:	bf00      	nop
 800588a:	e7fd      	b.n	8005888 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800588c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00d      	beq.n	80058b4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058a0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80058a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	4613      	mov	r3, r2
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	68b9      	ldr	r1, [r7, #8]
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f000 f840 	bl	8005934 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80058b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3730      	adds	r7, #48	@ 0x30
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b08a      	sub	sp, #40	@ 0x28
 80058c2:	af02      	add	r7, sp, #8
 80058c4:	60f8      	str	r0, [r7, #12]
 80058c6:	60b9      	str	r1, [r7, #8]
 80058c8:	4613      	mov	r3, r2
 80058ca:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10b      	bne.n	80058ea <xQueueGenericCreate+0x2c>
	__asm volatile
 80058d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	613b      	str	r3, [r7, #16]
}
 80058e4:	bf00      	nop
 80058e6:	bf00      	nop
 80058e8:	e7fd      	b.n	80058e6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	fb02 f303 	mul.w	r3, r2, r3
 80058f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	3350      	adds	r3, #80	@ 0x50
 80058f8:	4618      	mov	r0, r3
 80058fa:	f002 f917 	bl	8007b2c <pvPortMalloc>
 80058fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d011      	beq.n	800592a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	3350      	adds	r3, #80	@ 0x50
 800590e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005918:	79fa      	ldrb	r2, [r7, #7]
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	9300      	str	r3, [sp, #0]
 800591e:	4613      	mov	r3, r2
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	68b9      	ldr	r1, [r7, #8]
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f000 f805 	bl	8005934 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800592a:	69bb      	ldr	r3, [r7, #24]
	}
 800592c:	4618      	mov	r0, r3
 800592e:	3720      	adds	r7, #32
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
 8005940:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d103      	bne.n	8005950 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	e002      	b.n	8005956 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005962:	2101      	movs	r1, #1
 8005964:	69b8      	ldr	r0, [r7, #24]
 8005966:	f7ff fec3 	bl	80056f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	78fa      	ldrb	r2, [r7, #3]
 800596e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005972:	bf00      	nop
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
	...

0800597c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b08e      	sub	sp, #56	@ 0x38
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
 8005988:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800598a:	2300      	movs	r3, #0
 800598c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10b      	bne.n	80059b0 <xQueueGenericSend+0x34>
	__asm volatile
 8005998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800599c:	f383 8811 	msr	BASEPRI, r3
 80059a0:	f3bf 8f6f 	isb	sy
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80059aa:	bf00      	nop
 80059ac:	bf00      	nop
 80059ae:	e7fd      	b.n	80059ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d103      	bne.n	80059be <xQueueGenericSend+0x42>
 80059b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d101      	bne.n	80059c2 <xQueueGenericSend+0x46>
 80059be:	2301      	movs	r3, #1
 80059c0:	e000      	b.n	80059c4 <xQueueGenericSend+0x48>
 80059c2:	2300      	movs	r3, #0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10b      	bne.n	80059e0 <xQueueGenericSend+0x64>
	__asm volatile
 80059c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059cc:	f383 8811 	msr	BASEPRI, r3
 80059d0:	f3bf 8f6f 	isb	sy
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80059da:	bf00      	nop
 80059dc:	bf00      	nop
 80059de:	e7fd      	b.n	80059dc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d103      	bne.n	80059ee <xQueueGenericSend+0x72>
 80059e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d101      	bne.n	80059f2 <xQueueGenericSend+0x76>
 80059ee:	2301      	movs	r3, #1
 80059f0:	e000      	b.n	80059f4 <xQueueGenericSend+0x78>
 80059f2:	2300      	movs	r3, #0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10b      	bne.n	8005a10 <xQueueGenericSend+0x94>
	__asm volatile
 80059f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059fc:	f383 8811 	msr	BASEPRI, r3
 8005a00:	f3bf 8f6f 	isb	sy
 8005a04:	f3bf 8f4f 	dsb	sy
 8005a08:	623b      	str	r3, [r7, #32]
}
 8005a0a:	bf00      	nop
 8005a0c:	bf00      	nop
 8005a0e:	e7fd      	b.n	8005a0c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a10:	f001 f9fc 	bl	8006e0c <xTaskGetSchedulerState>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d102      	bne.n	8005a20 <xQueueGenericSend+0xa4>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <xQueueGenericSend+0xa8>
 8005a20:	2301      	movs	r3, #1
 8005a22:	e000      	b.n	8005a26 <xQueueGenericSend+0xaa>
 8005a24:	2300      	movs	r3, #0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10b      	bne.n	8005a42 <xQueueGenericSend+0xc6>
	__asm volatile
 8005a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	61fb      	str	r3, [r7, #28]
}
 8005a3c:	bf00      	nop
 8005a3e:	bf00      	nop
 8005a40:	e7fd      	b.n	8005a3e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a42:	f001 ff51 	bl	80078e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d302      	bcc.n	8005a58 <xQueueGenericSend+0xdc>
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d129      	bne.n	8005aac <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a58:	683a      	ldr	r2, [r7, #0]
 8005a5a:	68b9      	ldr	r1, [r7, #8]
 8005a5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a5e:	f000 fa0f 	bl	8005e80 <prvCopyDataToQueue>
 8005a62:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d010      	beq.n	8005a8e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a6e:	3324      	adds	r3, #36	@ 0x24
 8005a70:	4618      	mov	r0, r3
 8005a72:	f001 f805 	bl	8006a80 <xTaskRemoveFromEventList>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d013      	beq.n	8005aa4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a7c:	4b3f      	ldr	r3, [pc, #252]	@ (8005b7c <xQueueGenericSend+0x200>)
 8005a7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	f3bf 8f4f 	dsb	sy
 8005a88:	f3bf 8f6f 	isb	sy
 8005a8c:	e00a      	b.n	8005aa4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d007      	beq.n	8005aa4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a94:	4b39      	ldr	r3, [pc, #228]	@ (8005b7c <xQueueGenericSend+0x200>)
 8005a96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005aa4:	f001 ff52 	bl	800794c <vPortExitCritical>
				return pdPASS;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e063      	b.n	8005b74 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d103      	bne.n	8005aba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ab2:	f001 ff4b 	bl	800794c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	e05c      	b.n	8005b74 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d106      	bne.n	8005ace <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ac0:	f107 0314 	add.w	r3, r7, #20
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f001 f83f 	bl	8006b48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005aca:	2301      	movs	r3, #1
 8005acc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ace:	f001 ff3d 	bl	800794c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ad2:	f000 fda7 	bl	8006624 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ad6:	f001 ff07 	bl	80078e8 <vPortEnterCritical>
 8005ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005adc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ae0:	b25b      	sxtb	r3, r3
 8005ae2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ae6:	d103      	bne.n	8005af0 <xQueueGenericSend+0x174>
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005af6:	b25b      	sxtb	r3, r3
 8005af8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005afc:	d103      	bne.n	8005b06 <xQueueGenericSend+0x18a>
 8005afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b06:	f001 ff21 	bl	800794c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b0a:	1d3a      	adds	r2, r7, #4
 8005b0c:	f107 0314 	add.w	r3, r7, #20
 8005b10:	4611      	mov	r1, r2
 8005b12:	4618      	mov	r0, r3
 8005b14:	f001 f82e 	bl	8006b74 <xTaskCheckForTimeOut>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d124      	bne.n	8005b68 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b1e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b20:	f000 faa6 	bl	8006070 <prvIsQueueFull>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d018      	beq.n	8005b5c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2c:	3310      	adds	r3, #16
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	4611      	mov	r1, r2
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 ff52 	bl	80069dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b3a:	f000 fa31 	bl	8005fa0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b3e:	f000 fd7f 	bl	8006640 <xTaskResumeAll>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f47f af7c 	bne.w	8005a42 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8005b7c <xQueueGenericSend+0x200>)
 8005b4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	f3bf 8f4f 	dsb	sy
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	e772      	b.n	8005a42 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b5e:	f000 fa1f 	bl	8005fa0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b62:	f000 fd6d 	bl	8006640 <xTaskResumeAll>
 8005b66:	e76c      	b.n	8005a42 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b6a:	f000 fa19 	bl	8005fa0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b6e:	f000 fd67 	bl	8006640 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3738      	adds	r7, #56	@ 0x38
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	e000ed04 	.word	0xe000ed04

08005b80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b090      	sub	sp, #64	@ 0x40
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
 8005b8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10b      	bne.n	8005bb0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b9c:	f383 8811 	msr	BASEPRI, r3
 8005ba0:	f3bf 8f6f 	isb	sy
 8005ba4:	f3bf 8f4f 	dsb	sy
 8005ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005baa:	bf00      	nop
 8005bac:	bf00      	nop
 8005bae:	e7fd      	b.n	8005bac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d103      	bne.n	8005bbe <xQueueGenericSendFromISR+0x3e>
 8005bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <xQueueGenericSendFromISR+0x42>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e000      	b.n	8005bc4 <xQueueGenericSendFromISR+0x44>
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d10b      	bne.n	8005be0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bcc:	f383 8811 	msr	BASEPRI, r3
 8005bd0:	f3bf 8f6f 	isb	sy
 8005bd4:	f3bf 8f4f 	dsb	sy
 8005bd8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005bda:	bf00      	nop
 8005bdc:	bf00      	nop
 8005bde:	e7fd      	b.n	8005bdc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d103      	bne.n	8005bee <xQueueGenericSendFromISR+0x6e>
 8005be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d101      	bne.n	8005bf2 <xQueueGenericSendFromISR+0x72>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e000      	b.n	8005bf4 <xQueueGenericSendFromISR+0x74>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10b      	bne.n	8005c10 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bfc:	f383 8811 	msr	BASEPRI, r3
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	623b      	str	r3, [r7, #32]
}
 8005c0a:	bf00      	nop
 8005c0c:	bf00      	nop
 8005c0e:	e7fd      	b.n	8005c0c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c10:	f001 ff4a 	bl	8007aa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005c14:	f3ef 8211 	mrs	r2, BASEPRI
 8005c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c1c:	f383 8811 	msr	BASEPRI, r3
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	61fa      	str	r2, [r7, #28]
 8005c2a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c2c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c2e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d302      	bcc.n	8005c42 <xQueueGenericSendFromISR+0xc2>
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d12f      	bne.n	8005ca2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c52:	683a      	ldr	r2, [r7, #0]
 8005c54:	68b9      	ldr	r1, [r7, #8]
 8005c56:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005c58:	f000 f912 	bl	8005e80 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c5c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005c60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c64:	d112      	bne.n	8005c8c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d016      	beq.n	8005c9c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c70:	3324      	adds	r3, #36	@ 0x24
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 ff04 	bl	8006a80 <xTaskRemoveFromEventList>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00e      	beq.n	8005c9c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00b      	beq.n	8005c9c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	e007      	b.n	8005c9c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c8c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005c90:	3301      	adds	r3, #1
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	b25a      	sxtb	r2, r3
 8005c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005ca0:	e001      	b.n	8005ca6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ca8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005cb0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005cb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3740      	adds	r7, #64	@ 0x40
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b08c      	sub	sp, #48	@ 0x30
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10b      	bne.n	8005cee <xQueueReceive+0x32>
	__asm volatile
 8005cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cda:	f383 8811 	msr	BASEPRI, r3
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	623b      	str	r3, [r7, #32]
}
 8005ce8:	bf00      	nop
 8005cea:	bf00      	nop
 8005cec:	e7fd      	b.n	8005cea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d103      	bne.n	8005cfc <xQueueReceive+0x40>
 8005cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <xQueueReceive+0x44>
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e000      	b.n	8005d02 <xQueueReceive+0x46>
 8005d00:	2300      	movs	r3, #0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10b      	bne.n	8005d1e <xQueueReceive+0x62>
	__asm volatile
 8005d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d0a:	f383 8811 	msr	BASEPRI, r3
 8005d0e:	f3bf 8f6f 	isb	sy
 8005d12:	f3bf 8f4f 	dsb	sy
 8005d16:	61fb      	str	r3, [r7, #28]
}
 8005d18:	bf00      	nop
 8005d1a:	bf00      	nop
 8005d1c:	e7fd      	b.n	8005d1a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d1e:	f001 f875 	bl	8006e0c <xTaskGetSchedulerState>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d102      	bne.n	8005d2e <xQueueReceive+0x72>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <xQueueReceive+0x76>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e000      	b.n	8005d34 <xQueueReceive+0x78>
 8005d32:	2300      	movs	r3, #0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10b      	bne.n	8005d50 <xQueueReceive+0x94>
	__asm volatile
 8005d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	61bb      	str	r3, [r7, #24]
}
 8005d4a:	bf00      	nop
 8005d4c:	bf00      	nop
 8005d4e:	e7fd      	b.n	8005d4c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d50:	f001 fdca 	bl	80078e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d58:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d01f      	beq.n	8005da0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d60:	68b9      	ldr	r1, [r7, #8]
 8005d62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d64:	f000 f8f6 	bl	8005f54 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6a:	1e5a      	subs	r2, r3, #1
 8005d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d6e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00f      	beq.n	8005d98 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7a:	3310      	adds	r3, #16
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 fe7f 	bl	8006a80 <xTaskRemoveFromEventList>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d007      	beq.n	8005d98 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d88:	4b3c      	ldr	r3, [pc, #240]	@ (8005e7c <xQueueReceive+0x1c0>)
 8005d8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	f3bf 8f4f 	dsb	sy
 8005d94:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d98:	f001 fdd8 	bl	800794c <vPortExitCritical>
				return pdPASS;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e069      	b.n	8005e74 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d103      	bne.n	8005dae <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005da6:	f001 fdd1 	bl	800794c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005daa:	2300      	movs	r3, #0
 8005dac:	e062      	b.n	8005e74 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d106      	bne.n	8005dc2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005db4:	f107 0310 	add.w	r3, r7, #16
 8005db8:	4618      	mov	r0, r3
 8005dba:	f000 fec5 	bl	8006b48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005dc2:	f001 fdc3 	bl	800794c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005dc6:	f000 fc2d 	bl	8006624 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005dca:	f001 fd8d 	bl	80078e8 <vPortEnterCritical>
 8005dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005dd4:	b25b      	sxtb	r3, r3
 8005dd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005dda:	d103      	bne.n	8005de4 <xQueueReceive+0x128>
 8005ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dea:	b25b      	sxtb	r3, r3
 8005dec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005df0:	d103      	bne.n	8005dfa <xQueueReceive+0x13e>
 8005df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005dfa:	f001 fda7 	bl	800794c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005dfe:	1d3a      	adds	r2, r7, #4
 8005e00:	f107 0310 	add.w	r3, r7, #16
 8005e04:	4611      	mov	r1, r2
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 feb4 	bl	8006b74 <xTaskCheckForTimeOut>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d123      	bne.n	8005e5a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e14:	f000 f916 	bl	8006044 <prvIsQueueEmpty>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d017      	beq.n	8005e4e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e20:	3324      	adds	r3, #36	@ 0x24
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	4611      	mov	r1, r2
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 fdd8 	bl	80069dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e2e:	f000 f8b7 	bl	8005fa0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e32:	f000 fc05 	bl	8006640 <xTaskResumeAll>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d189      	bne.n	8005d50 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8005e7c <xQueueReceive+0x1c0>)
 8005e3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	f3bf 8f4f 	dsb	sy
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	e780      	b.n	8005d50 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e50:	f000 f8a6 	bl	8005fa0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e54:	f000 fbf4 	bl	8006640 <xTaskResumeAll>
 8005e58:	e77a      	b.n	8005d50 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e5c:	f000 f8a0 	bl	8005fa0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e60:	f000 fbee 	bl	8006640 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e66:	f000 f8ed 	bl	8006044 <prvIsQueueEmpty>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f43f af6f 	beq.w	8005d50 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e72:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3730      	adds	r7, #48	@ 0x30
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	e000ed04 	.word	0xe000ed04

08005e80 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e94:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10d      	bne.n	8005eba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d14d      	bne.n	8005f42 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f000 ffcc 	bl	8006e48 <xTaskPriorityDisinherit>
 8005eb0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	609a      	str	r2, [r3, #8]
 8005eb8:	e043      	b.n	8005f42 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d119      	bne.n	8005ef4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6858      	ldr	r0, [r3, #4]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec8:	461a      	mov	r2, r3
 8005eca:	68b9      	ldr	r1, [r7, #8]
 8005ecc:	f002 faff 	bl	80084ce <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	685a      	ldr	r2, [r3, #4]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed8:	441a      	add	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d32b      	bcc.n	8005f42 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	605a      	str	r2, [r3, #4]
 8005ef2:	e026      	b.n	8005f42 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	68d8      	ldr	r0, [r3, #12]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005efc:	461a      	mov	r2, r3
 8005efe:	68b9      	ldr	r1, [r7, #8]
 8005f00:	f002 fae5 	bl	80084ce <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0c:	425b      	negs	r3, r3
 8005f0e:	441a      	add	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	68da      	ldr	r2, [r3, #12]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d207      	bcs.n	8005f30 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	689a      	ldr	r2, [r3, #8]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f28:	425b      	negs	r3, r3
 8005f2a:	441a      	add	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d105      	bne.n	8005f42 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	1c5a      	adds	r2, r3, #1
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005f4a:	697b      	ldr	r3, [r7, #20]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3718      	adds	r7, #24
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d018      	beq.n	8005f98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68da      	ldr	r2, [r3, #12]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f6e:	441a      	add	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68da      	ldr	r2, [r3, #12]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d303      	bcc.n	8005f88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68d9      	ldr	r1, [r3, #12]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f90:	461a      	mov	r2, r3
 8005f92:	6838      	ldr	r0, [r7, #0]
 8005f94:	f002 fa9b 	bl	80084ce <memcpy>
	}
}
 8005f98:	bf00      	nop
 8005f9a:	3708      	adds	r7, #8
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005fa8:	f001 fc9e 	bl	80078e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005fb2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fb4:	e011      	b.n	8005fda <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d012      	beq.n	8005fe4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	3324      	adds	r3, #36	@ 0x24
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 fd5c 	bl	8006a80 <xTaskRemoveFromEventList>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d001      	beq.n	8005fd2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005fce:	f000 fe35 	bl	8006c3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005fd2:	7bfb      	ldrb	r3, [r7, #15]
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	dce9      	bgt.n	8005fb6 <prvUnlockQueue+0x16>
 8005fe2:	e000      	b.n	8005fe6 <prvUnlockQueue+0x46>
					break;
 8005fe4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	22ff      	movs	r2, #255	@ 0xff
 8005fea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005fee:	f001 fcad 	bl	800794c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005ff2:	f001 fc79 	bl	80078e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ffc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ffe:	e011      	b.n	8006024 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d012      	beq.n	800602e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	3310      	adds	r3, #16
 800600c:	4618      	mov	r0, r3
 800600e:	f000 fd37 	bl	8006a80 <xTaskRemoveFromEventList>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d001      	beq.n	800601c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006018:	f000 fe10 	bl	8006c3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800601c:	7bbb      	ldrb	r3, [r7, #14]
 800601e:	3b01      	subs	r3, #1
 8006020:	b2db      	uxtb	r3, r3
 8006022:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006024:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006028:	2b00      	cmp	r3, #0
 800602a:	dce9      	bgt.n	8006000 <prvUnlockQueue+0x60>
 800602c:	e000      	b.n	8006030 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800602e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	22ff      	movs	r2, #255	@ 0xff
 8006034:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006038:	f001 fc88 	bl	800794c <vPortExitCritical>
}
 800603c:	bf00      	nop
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800604c:	f001 fc4c 	bl	80078e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006054:	2b00      	cmp	r3, #0
 8006056:	d102      	bne.n	800605e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006058:	2301      	movs	r3, #1
 800605a:	60fb      	str	r3, [r7, #12]
 800605c:	e001      	b.n	8006062 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800605e:	2300      	movs	r3, #0
 8006060:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006062:	f001 fc73 	bl	800794c <vPortExitCritical>

	return xReturn;
 8006066:	68fb      	ldr	r3, [r7, #12]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006078:	f001 fc36 	bl	80078e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006084:	429a      	cmp	r2, r3
 8006086:	d102      	bne.n	800608e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006088:	2301      	movs	r3, #1
 800608a:	60fb      	str	r3, [r7, #12]
 800608c:	e001      	b.n	8006092 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800608e:	2300      	movs	r3, #0
 8006090:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006092:	f001 fc5b 	bl	800794c <vPortExitCritical>

	return xReturn;
 8006096:	68fb      	ldr	r3, [r7, #12]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060aa:	2300      	movs	r3, #0
 80060ac:	60fb      	str	r3, [r7, #12]
 80060ae:	e014      	b.n	80060da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80060b0:	4a0f      	ldr	r2, [pc, #60]	@ (80060f0 <vQueueAddToRegistry+0x50>)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10b      	bne.n	80060d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80060bc:	490c      	ldr	r1, [pc, #48]	@ (80060f0 <vQueueAddToRegistry+0x50>)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	683a      	ldr	r2, [r7, #0]
 80060c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80060c6:	4a0a      	ldr	r2, [pc, #40]	@ (80060f0 <vQueueAddToRegistry+0x50>)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	4413      	add	r3, r2
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80060d2:	e006      	b.n	80060e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	3301      	adds	r3, #1
 80060d8:	60fb      	str	r3, [r7, #12]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2b07      	cmp	r3, #7
 80060de:	d9e7      	bls.n	80060b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80060e0:	bf00      	nop
 80060e2:	bf00      	nop
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	20000970 	.word	0x20000970

080060f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006104:	f001 fbf0 	bl	80078e8 <vPortEnterCritical>
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800610e:	b25b      	sxtb	r3, r3
 8006110:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006114:	d103      	bne.n	800611e <vQueueWaitForMessageRestricted+0x2a>
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006124:	b25b      	sxtb	r3, r3
 8006126:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800612a:	d103      	bne.n	8006134 <vQueueWaitForMessageRestricted+0x40>
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006134:	f001 fc0a 	bl	800794c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800613c:	2b00      	cmp	r3, #0
 800613e:	d106      	bne.n	800614e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	3324      	adds	r3, #36	@ 0x24
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	68b9      	ldr	r1, [r7, #8]
 8006148:	4618      	mov	r0, r3
 800614a:	f000 fc6d 	bl	8006a28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800614e:	6978      	ldr	r0, [r7, #20]
 8006150:	f7ff ff26 	bl	8005fa0 <prvUnlockQueue>
	}
 8006154:	bf00      	nop
 8006156:	3718      	adds	r7, #24
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800615c:	b580      	push	{r7, lr}
 800615e:	b08e      	sub	sp, #56	@ 0x38
 8006160:	af04      	add	r7, sp, #16
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
 8006168:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800616a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10b      	bne.n	8006188 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006174:	f383 8811 	msr	BASEPRI, r3
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	623b      	str	r3, [r7, #32]
}
 8006182:	bf00      	nop
 8006184:	bf00      	nop
 8006186:	e7fd      	b.n	8006184 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10b      	bne.n	80061a6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800618e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	61fb      	str	r3, [r7, #28]
}
 80061a0:	bf00      	nop
 80061a2:	bf00      	nop
 80061a4:	e7fd      	b.n	80061a2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80061a6:	23a8      	movs	r3, #168	@ 0xa8
 80061a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	2ba8      	cmp	r3, #168	@ 0xa8
 80061ae:	d00b      	beq.n	80061c8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80061b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	61bb      	str	r3, [r7, #24]
}
 80061c2:	bf00      	nop
 80061c4:	bf00      	nop
 80061c6:	e7fd      	b.n	80061c4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80061c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80061ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d01e      	beq.n	800620e <xTaskCreateStatic+0xb2>
 80061d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d01b      	beq.n	800620e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80061da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80061de:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80061e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e2:	2202      	movs	r2, #2
 80061e4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80061e8:	2300      	movs	r3, #0
 80061ea:	9303      	str	r3, [sp, #12]
 80061ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ee:	9302      	str	r3, [sp, #8]
 80061f0:	f107 0314 	add.w	r3, r7, #20
 80061f4:	9301      	str	r3, [sp, #4]
 80061f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	68b9      	ldr	r1, [r7, #8]
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 f851 	bl	80062a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006206:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006208:	f000 f8f6 	bl	80063f8 <prvAddNewTaskToReadyList>
 800620c:	e001      	b.n	8006212 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800620e:	2300      	movs	r3, #0
 8006210:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006212:	697b      	ldr	r3, [r7, #20]
	}
 8006214:	4618      	mov	r0, r3
 8006216:	3728      	adds	r7, #40	@ 0x28
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800621c:	b580      	push	{r7, lr}
 800621e:	b08c      	sub	sp, #48	@ 0x30
 8006220:	af04      	add	r7, sp, #16
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	603b      	str	r3, [r7, #0]
 8006228:	4613      	mov	r3, r2
 800622a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800622c:	88fb      	ldrh	r3, [r7, #6]
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4618      	mov	r0, r3
 8006232:	f001 fc7b 	bl	8007b2c <pvPortMalloc>
 8006236:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00e      	beq.n	800625c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800623e:	20a8      	movs	r0, #168	@ 0xa8
 8006240:	f001 fc74 	bl	8007b2c <pvPortMalloc>
 8006244:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d003      	beq.n	8006254 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	631a      	str	r2, [r3, #48]	@ 0x30
 8006252:	e005      	b.n	8006260 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006254:	6978      	ldr	r0, [r7, #20]
 8006256:	f001 fd37 	bl	8007cc8 <vPortFree>
 800625a:	e001      	b.n	8006260 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800625c:	2300      	movs	r3, #0
 800625e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d017      	beq.n	8006296 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800626e:	88fa      	ldrh	r2, [r7, #6]
 8006270:	2300      	movs	r3, #0
 8006272:	9303      	str	r3, [sp, #12]
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	9302      	str	r3, [sp, #8]
 8006278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800627a:	9301      	str	r3, [sp, #4]
 800627c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	68b9      	ldr	r1, [r7, #8]
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f000 f80f 	bl	80062a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800628a:	69f8      	ldr	r0, [r7, #28]
 800628c:	f000 f8b4 	bl	80063f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006290:	2301      	movs	r3, #1
 8006292:	61bb      	str	r3, [r7, #24]
 8006294:	e002      	b.n	800629c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006296:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800629a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800629c:	69bb      	ldr	r3, [r7, #24]
	}
 800629e:	4618      	mov	r0, r3
 80062a0:	3720      	adds	r7, #32
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
	...

080062a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b088      	sub	sp, #32
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
 80062b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80062b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	461a      	mov	r2, r3
 80062c0:	21a5      	movs	r1, #165	@ 0xa5
 80062c2:	f002 f82b 	bl	800831c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80062c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062d0:	3b01      	subs	r3, #1
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	f023 0307 	bic.w	r3, r3, #7
 80062de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	f003 0307 	and.w	r3, r3, #7
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00b      	beq.n	8006302 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	617b      	str	r3, [r7, #20]
}
 80062fc:	bf00      	nop
 80062fe:	bf00      	nop
 8006300:	e7fd      	b.n	80062fe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d01f      	beq.n	8006348 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006308:	2300      	movs	r3, #0
 800630a:	61fb      	str	r3, [r7, #28]
 800630c:	e012      	b.n	8006334 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	4413      	add	r3, r2
 8006314:	7819      	ldrb	r1, [r3, #0]
 8006316:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	4413      	add	r3, r2
 800631c:	3334      	adds	r3, #52	@ 0x34
 800631e:	460a      	mov	r2, r1
 8006320:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	4413      	add	r3, r2
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d006      	beq.n	800633c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	3301      	adds	r3, #1
 8006332:	61fb      	str	r3, [r7, #28]
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	2b0f      	cmp	r3, #15
 8006338:	d9e9      	bls.n	800630e <prvInitialiseNewTask+0x66>
 800633a:	e000      	b.n	800633e <prvInitialiseNewTask+0x96>
			{
				break;
 800633c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800633e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006346:	e003      	b.n	8006350 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634a:	2200      	movs	r2, #0
 800634c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006352:	2b37      	cmp	r3, #55	@ 0x37
 8006354:	d901      	bls.n	800635a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006356:	2337      	movs	r3, #55	@ 0x37
 8006358:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800635a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800635c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800635e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006362:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006364:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006368:	2200      	movs	r2, #0
 800636a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800636c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800636e:	3304      	adds	r3, #4
 8006370:	4618      	mov	r0, r3
 8006372:	f7ff f929 	bl	80055c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006378:	3318      	adds	r3, #24
 800637a:	4618      	mov	r0, r3
 800637c:	f7ff f924 	bl	80055c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006382:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006384:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006388:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800638c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006392:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006394:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006398:	2200      	movs	r2, #0
 800639a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800639e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80063a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a8:	3354      	adds	r3, #84	@ 0x54
 80063aa:	224c      	movs	r2, #76	@ 0x4c
 80063ac:	2100      	movs	r1, #0
 80063ae:	4618      	mov	r0, r3
 80063b0:	f001 ffb4 	bl	800831c <memset>
 80063b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b6:	4a0d      	ldr	r2, [pc, #52]	@ (80063ec <prvInitialiseNewTask+0x144>)
 80063b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80063ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063bc:	4a0c      	ldr	r2, [pc, #48]	@ (80063f0 <prvInitialiseNewTask+0x148>)
 80063be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80063c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c2:	4a0c      	ldr	r2, [pc, #48]	@ (80063f4 <prvInitialiseNewTask+0x14c>)
 80063c4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	68f9      	ldr	r1, [r7, #12]
 80063ca:	69b8      	ldr	r0, [r7, #24]
 80063cc:	f001 f95a 	bl	8007684 <pxPortInitialiseStack>
 80063d0:	4602      	mov	r2, r0
 80063d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80063d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d002      	beq.n	80063e2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063e2:	bf00      	nop
 80063e4:	3720      	adds	r7, #32
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20001c04 	.word	0x20001c04
 80063f0:	20001c6c 	.word	0x20001c6c
 80063f4:	20001cd4 	.word	0x20001cd4

080063f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006400:	f001 fa72 	bl	80078e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006404:	4b2d      	ldr	r3, [pc, #180]	@ (80064bc <prvAddNewTaskToReadyList+0xc4>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3301      	adds	r3, #1
 800640a:	4a2c      	ldr	r2, [pc, #176]	@ (80064bc <prvAddNewTaskToReadyList+0xc4>)
 800640c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800640e:	4b2c      	ldr	r3, [pc, #176]	@ (80064c0 <prvAddNewTaskToReadyList+0xc8>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d109      	bne.n	800642a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006416:	4a2a      	ldr	r2, [pc, #168]	@ (80064c0 <prvAddNewTaskToReadyList+0xc8>)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800641c:	4b27      	ldr	r3, [pc, #156]	@ (80064bc <prvAddNewTaskToReadyList+0xc4>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b01      	cmp	r3, #1
 8006422:	d110      	bne.n	8006446 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006424:	f000 fc2e 	bl	8006c84 <prvInitialiseTaskLists>
 8006428:	e00d      	b.n	8006446 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800642a:	4b26      	ldr	r3, [pc, #152]	@ (80064c4 <prvAddNewTaskToReadyList+0xcc>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d109      	bne.n	8006446 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006432:	4b23      	ldr	r3, [pc, #140]	@ (80064c0 <prvAddNewTaskToReadyList+0xc8>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800643c:	429a      	cmp	r2, r3
 800643e:	d802      	bhi.n	8006446 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006440:	4a1f      	ldr	r2, [pc, #124]	@ (80064c0 <prvAddNewTaskToReadyList+0xc8>)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006446:	4b20      	ldr	r3, [pc, #128]	@ (80064c8 <prvAddNewTaskToReadyList+0xd0>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	3301      	adds	r3, #1
 800644c:	4a1e      	ldr	r2, [pc, #120]	@ (80064c8 <prvAddNewTaskToReadyList+0xd0>)
 800644e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006450:	4b1d      	ldr	r3, [pc, #116]	@ (80064c8 <prvAddNewTaskToReadyList+0xd0>)
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800645c:	4b1b      	ldr	r3, [pc, #108]	@ (80064cc <prvAddNewTaskToReadyList+0xd4>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	429a      	cmp	r2, r3
 8006462:	d903      	bls.n	800646c <prvAddNewTaskToReadyList+0x74>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006468:	4a18      	ldr	r2, [pc, #96]	@ (80064cc <prvAddNewTaskToReadyList+0xd4>)
 800646a:	6013      	str	r3, [r2, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006470:	4613      	mov	r3, r2
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4413      	add	r3, r2
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	4a15      	ldr	r2, [pc, #84]	@ (80064d0 <prvAddNewTaskToReadyList+0xd8>)
 800647a:	441a      	add	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	3304      	adds	r3, #4
 8006480:	4619      	mov	r1, r3
 8006482:	4610      	mov	r0, r2
 8006484:	f7ff f8ad 	bl	80055e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006488:	f001 fa60 	bl	800794c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800648c:	4b0d      	ldr	r3, [pc, #52]	@ (80064c4 <prvAddNewTaskToReadyList+0xcc>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00e      	beq.n	80064b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006494:	4b0a      	ldr	r3, [pc, #40]	@ (80064c0 <prvAddNewTaskToReadyList+0xc8>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800649e:	429a      	cmp	r2, r3
 80064a0:	d207      	bcs.n	80064b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80064a2:	4b0c      	ldr	r3, [pc, #48]	@ (80064d4 <prvAddNewTaskToReadyList+0xdc>)
 80064a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064a8:	601a      	str	r2, [r3, #0]
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064b2:	bf00      	nop
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	20000e84 	.word	0x20000e84
 80064c0:	200009b0 	.word	0x200009b0
 80064c4:	20000e90 	.word	0x20000e90
 80064c8:	20000ea0 	.word	0x20000ea0
 80064cc:	20000e8c 	.word	0x20000e8c
 80064d0:	200009b4 	.word	0x200009b4
 80064d4:	e000ed04 	.word	0xe000ed04

080064d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064e0:	2300      	movs	r3, #0
 80064e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d018      	beq.n	800651c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064ea:	4b14      	ldr	r3, [pc, #80]	@ (800653c <vTaskDelay+0x64>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00b      	beq.n	800650a <vTaskDelay+0x32>
	__asm volatile
 80064f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f6:	f383 8811 	msr	BASEPRI, r3
 80064fa:	f3bf 8f6f 	isb	sy
 80064fe:	f3bf 8f4f 	dsb	sy
 8006502:	60bb      	str	r3, [r7, #8]
}
 8006504:	bf00      	nop
 8006506:	bf00      	nop
 8006508:	e7fd      	b.n	8006506 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800650a:	f000 f88b 	bl	8006624 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800650e:	2100      	movs	r1, #0
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 fd09 	bl	8006f28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006516:	f000 f893 	bl	8006640 <xTaskResumeAll>
 800651a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d107      	bne.n	8006532 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006522:	4b07      	ldr	r3, [pc, #28]	@ (8006540 <vTaskDelay+0x68>)
 8006524:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006528:	601a      	str	r2, [r3, #0]
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006532:	bf00      	nop
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	20000eac 	.word	0x20000eac
 8006540:	e000ed04 	.word	0xe000ed04

08006544 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b08a      	sub	sp, #40	@ 0x28
 8006548:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800654a:	2300      	movs	r3, #0
 800654c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800654e:	2300      	movs	r3, #0
 8006550:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006552:	463a      	mov	r2, r7
 8006554:	1d39      	adds	r1, r7, #4
 8006556:	f107 0308 	add.w	r3, r7, #8
 800655a:	4618      	mov	r0, r3
 800655c:	f7fe ffe0 	bl	8005520 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006560:	6839      	ldr	r1, [r7, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	9202      	str	r2, [sp, #8]
 8006568:	9301      	str	r3, [sp, #4]
 800656a:	2300      	movs	r3, #0
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	2300      	movs	r3, #0
 8006570:	460a      	mov	r2, r1
 8006572:	4924      	ldr	r1, [pc, #144]	@ (8006604 <vTaskStartScheduler+0xc0>)
 8006574:	4824      	ldr	r0, [pc, #144]	@ (8006608 <vTaskStartScheduler+0xc4>)
 8006576:	f7ff fdf1 	bl	800615c <xTaskCreateStatic>
 800657a:	4603      	mov	r3, r0
 800657c:	4a23      	ldr	r2, [pc, #140]	@ (800660c <vTaskStartScheduler+0xc8>)
 800657e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006580:	4b22      	ldr	r3, [pc, #136]	@ (800660c <vTaskStartScheduler+0xc8>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d002      	beq.n	800658e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006588:	2301      	movs	r3, #1
 800658a:	617b      	str	r3, [r7, #20]
 800658c:	e001      	b.n	8006592 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800658e:	2300      	movs	r3, #0
 8006590:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d102      	bne.n	800659e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006598:	f000 fd1a 	bl	8006fd0 <xTimerCreateTimerTask>
 800659c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d11b      	bne.n	80065dc <vTaskStartScheduler+0x98>
	__asm volatile
 80065a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a8:	f383 8811 	msr	BASEPRI, r3
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	f3bf 8f4f 	dsb	sy
 80065b4:	613b      	str	r3, [r7, #16]
}
 80065b6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80065b8:	4b15      	ldr	r3, [pc, #84]	@ (8006610 <vTaskStartScheduler+0xcc>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	3354      	adds	r3, #84	@ 0x54
 80065be:	4a15      	ldr	r2, [pc, #84]	@ (8006614 <vTaskStartScheduler+0xd0>)
 80065c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80065c2:	4b15      	ldr	r3, [pc, #84]	@ (8006618 <vTaskStartScheduler+0xd4>)
 80065c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80065c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80065ca:	4b14      	ldr	r3, [pc, #80]	@ (800661c <vTaskStartScheduler+0xd8>)
 80065cc:	2201      	movs	r2, #1
 80065ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80065d0:	4b13      	ldr	r3, [pc, #76]	@ (8006620 <vTaskStartScheduler+0xdc>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80065d6:	f001 f8e3 	bl	80077a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80065da:	e00f      	b.n	80065fc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065e2:	d10b      	bne.n	80065fc <vTaskStartScheduler+0xb8>
	__asm volatile
 80065e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e8:	f383 8811 	msr	BASEPRI, r3
 80065ec:	f3bf 8f6f 	isb	sy
 80065f0:	f3bf 8f4f 	dsb	sy
 80065f4:	60fb      	str	r3, [r7, #12]
}
 80065f6:	bf00      	nop
 80065f8:	bf00      	nop
 80065fa:	e7fd      	b.n	80065f8 <vTaskStartScheduler+0xb4>
}
 80065fc:	bf00      	nop
 80065fe:	3718      	adds	r7, #24
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	08009090 	.word	0x08009090
 8006608:	08006c55 	.word	0x08006c55
 800660c:	20000ea8 	.word	0x20000ea8
 8006610:	200009b0 	.word	0x200009b0
 8006614:	20000034 	.word	0x20000034
 8006618:	20000ea4 	.word	0x20000ea4
 800661c:	20000e90 	.word	0x20000e90
 8006620:	20000e88 	.word	0x20000e88

08006624 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006624:	b480      	push	{r7}
 8006626:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006628:	4b04      	ldr	r3, [pc, #16]	@ (800663c <vTaskSuspendAll+0x18>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	3301      	adds	r3, #1
 800662e:	4a03      	ldr	r2, [pc, #12]	@ (800663c <vTaskSuspendAll+0x18>)
 8006630:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006632:	bf00      	nop
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	20000eac 	.word	0x20000eac

08006640 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006646:	2300      	movs	r3, #0
 8006648:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800664a:	2300      	movs	r3, #0
 800664c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800664e:	4b42      	ldr	r3, [pc, #264]	@ (8006758 <xTaskResumeAll+0x118>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10b      	bne.n	800666e <xTaskResumeAll+0x2e>
	__asm volatile
 8006656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	603b      	str	r3, [r7, #0]
}
 8006668:	bf00      	nop
 800666a:	bf00      	nop
 800666c:	e7fd      	b.n	800666a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800666e:	f001 f93b 	bl	80078e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006672:	4b39      	ldr	r3, [pc, #228]	@ (8006758 <xTaskResumeAll+0x118>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	3b01      	subs	r3, #1
 8006678:	4a37      	ldr	r2, [pc, #220]	@ (8006758 <xTaskResumeAll+0x118>)
 800667a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800667c:	4b36      	ldr	r3, [pc, #216]	@ (8006758 <xTaskResumeAll+0x118>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d162      	bne.n	800674a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006684:	4b35      	ldr	r3, [pc, #212]	@ (800675c <xTaskResumeAll+0x11c>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d05e      	beq.n	800674a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800668c:	e02f      	b.n	80066ee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800668e:	4b34      	ldr	r3, [pc, #208]	@ (8006760 <xTaskResumeAll+0x120>)
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	3318      	adds	r3, #24
 800669a:	4618      	mov	r0, r3
 800669c:	f7fe fffe 	bl	800569c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	3304      	adds	r3, #4
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7fe fff9 	bl	800569c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066ae:	4b2d      	ldr	r3, [pc, #180]	@ (8006764 <xTaskResumeAll+0x124>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d903      	bls.n	80066be <xTaskResumeAll+0x7e>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ba:	4a2a      	ldr	r2, [pc, #168]	@ (8006764 <xTaskResumeAll+0x124>)
 80066bc:	6013      	str	r3, [r2, #0]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066c2:	4613      	mov	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4413      	add	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4a27      	ldr	r2, [pc, #156]	@ (8006768 <xTaskResumeAll+0x128>)
 80066cc:	441a      	add	r2, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	3304      	adds	r3, #4
 80066d2:	4619      	mov	r1, r3
 80066d4:	4610      	mov	r0, r2
 80066d6:	f7fe ff84 	bl	80055e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066de:	4b23      	ldr	r3, [pc, #140]	@ (800676c <xTaskResumeAll+0x12c>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d302      	bcc.n	80066ee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80066e8:	4b21      	ldr	r3, [pc, #132]	@ (8006770 <xTaskResumeAll+0x130>)
 80066ea:	2201      	movs	r2, #1
 80066ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066ee:	4b1c      	ldr	r3, [pc, #112]	@ (8006760 <xTaskResumeAll+0x120>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1cb      	bne.n	800668e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d001      	beq.n	8006700 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066fc:	f000 fb66 	bl	8006dcc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006700:	4b1c      	ldr	r3, [pc, #112]	@ (8006774 <xTaskResumeAll+0x134>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d010      	beq.n	800672e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800670c:	f000 f846 	bl	800679c <xTaskIncrementTick>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d002      	beq.n	800671c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006716:	4b16      	ldr	r3, [pc, #88]	@ (8006770 <xTaskResumeAll+0x130>)
 8006718:	2201      	movs	r2, #1
 800671a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3b01      	subs	r3, #1
 8006720:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1f1      	bne.n	800670c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006728:	4b12      	ldr	r3, [pc, #72]	@ (8006774 <xTaskResumeAll+0x134>)
 800672a:	2200      	movs	r2, #0
 800672c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800672e:	4b10      	ldr	r3, [pc, #64]	@ (8006770 <xTaskResumeAll+0x130>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d009      	beq.n	800674a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006736:	2301      	movs	r3, #1
 8006738:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800673a:	4b0f      	ldr	r3, [pc, #60]	@ (8006778 <xTaskResumeAll+0x138>)
 800673c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006740:	601a      	str	r2, [r3, #0]
 8006742:	f3bf 8f4f 	dsb	sy
 8006746:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800674a:	f001 f8ff 	bl	800794c <vPortExitCritical>

	return xAlreadyYielded;
 800674e:	68bb      	ldr	r3, [r7, #8]
}
 8006750:	4618      	mov	r0, r3
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	20000eac 	.word	0x20000eac
 800675c:	20000e84 	.word	0x20000e84
 8006760:	20000e44 	.word	0x20000e44
 8006764:	20000e8c 	.word	0x20000e8c
 8006768:	200009b4 	.word	0x200009b4
 800676c:	200009b0 	.word	0x200009b0
 8006770:	20000e98 	.word	0x20000e98
 8006774:	20000e94 	.word	0x20000e94
 8006778:	e000ed04 	.word	0xe000ed04

0800677c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006782:	4b05      	ldr	r3, [pc, #20]	@ (8006798 <xTaskGetTickCount+0x1c>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006788:	687b      	ldr	r3, [r7, #4]
}
 800678a:	4618      	mov	r0, r3
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	20000e88 	.word	0x20000e88

0800679c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80067a2:	2300      	movs	r3, #0
 80067a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067a6:	4b4f      	ldr	r3, [pc, #316]	@ (80068e4 <xTaskIncrementTick+0x148>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f040 8090 	bne.w	80068d0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80067b0:	4b4d      	ldr	r3, [pc, #308]	@ (80068e8 <xTaskIncrementTick+0x14c>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3301      	adds	r3, #1
 80067b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80067b8:	4a4b      	ldr	r2, [pc, #300]	@ (80068e8 <xTaskIncrementTick+0x14c>)
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d121      	bne.n	8006808 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80067c4:	4b49      	ldr	r3, [pc, #292]	@ (80068ec <xTaskIncrementTick+0x150>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00b      	beq.n	80067e6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80067ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	603b      	str	r3, [r7, #0]
}
 80067e0:	bf00      	nop
 80067e2:	bf00      	nop
 80067e4:	e7fd      	b.n	80067e2 <xTaskIncrementTick+0x46>
 80067e6:	4b41      	ldr	r3, [pc, #260]	@ (80068ec <xTaskIncrementTick+0x150>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	60fb      	str	r3, [r7, #12]
 80067ec:	4b40      	ldr	r3, [pc, #256]	@ (80068f0 <xTaskIncrementTick+0x154>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a3e      	ldr	r2, [pc, #248]	@ (80068ec <xTaskIncrementTick+0x150>)
 80067f2:	6013      	str	r3, [r2, #0]
 80067f4:	4a3e      	ldr	r2, [pc, #248]	@ (80068f0 <xTaskIncrementTick+0x154>)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6013      	str	r3, [r2, #0]
 80067fa:	4b3e      	ldr	r3, [pc, #248]	@ (80068f4 <xTaskIncrementTick+0x158>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	3301      	adds	r3, #1
 8006800:	4a3c      	ldr	r2, [pc, #240]	@ (80068f4 <xTaskIncrementTick+0x158>)
 8006802:	6013      	str	r3, [r2, #0]
 8006804:	f000 fae2 	bl	8006dcc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006808:	4b3b      	ldr	r3, [pc, #236]	@ (80068f8 <xTaskIncrementTick+0x15c>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	429a      	cmp	r2, r3
 8006810:	d349      	bcc.n	80068a6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006812:	4b36      	ldr	r3, [pc, #216]	@ (80068ec <xTaskIncrementTick+0x150>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d104      	bne.n	8006826 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800681c:	4b36      	ldr	r3, [pc, #216]	@ (80068f8 <xTaskIncrementTick+0x15c>)
 800681e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006822:	601a      	str	r2, [r3, #0]
					break;
 8006824:	e03f      	b.n	80068a6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006826:	4b31      	ldr	r3, [pc, #196]	@ (80068ec <xTaskIncrementTick+0x150>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	429a      	cmp	r2, r3
 800683c:	d203      	bcs.n	8006846 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800683e:	4a2e      	ldr	r2, [pc, #184]	@ (80068f8 <xTaskIncrementTick+0x15c>)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006844:	e02f      	b.n	80068a6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	3304      	adds	r3, #4
 800684a:	4618      	mov	r0, r3
 800684c:	f7fe ff26 	bl	800569c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006854:	2b00      	cmp	r3, #0
 8006856:	d004      	beq.n	8006862 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	3318      	adds	r3, #24
 800685c:	4618      	mov	r0, r3
 800685e:	f7fe ff1d 	bl	800569c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006866:	4b25      	ldr	r3, [pc, #148]	@ (80068fc <xTaskIncrementTick+0x160>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	429a      	cmp	r2, r3
 800686c:	d903      	bls.n	8006876 <xTaskIncrementTick+0xda>
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006872:	4a22      	ldr	r2, [pc, #136]	@ (80068fc <xTaskIncrementTick+0x160>)
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800687a:	4613      	mov	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4413      	add	r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4a1f      	ldr	r2, [pc, #124]	@ (8006900 <xTaskIncrementTick+0x164>)
 8006884:	441a      	add	r2, r3
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	3304      	adds	r3, #4
 800688a:	4619      	mov	r1, r3
 800688c:	4610      	mov	r0, r2
 800688e:	f7fe fea8 	bl	80055e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006896:	4b1b      	ldr	r3, [pc, #108]	@ (8006904 <xTaskIncrementTick+0x168>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800689c:	429a      	cmp	r2, r3
 800689e:	d3b8      	bcc.n	8006812 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80068a0:	2301      	movs	r3, #1
 80068a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068a4:	e7b5      	b.n	8006812 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80068a6:	4b17      	ldr	r3, [pc, #92]	@ (8006904 <xTaskIncrementTick+0x168>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ac:	4914      	ldr	r1, [pc, #80]	@ (8006900 <xTaskIncrementTick+0x164>)
 80068ae:	4613      	mov	r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4413      	add	r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	440b      	add	r3, r1
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d901      	bls.n	80068c2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80068be:	2301      	movs	r3, #1
 80068c0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80068c2:	4b11      	ldr	r3, [pc, #68]	@ (8006908 <xTaskIncrementTick+0x16c>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d007      	beq.n	80068da <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80068ca:	2301      	movs	r3, #1
 80068cc:	617b      	str	r3, [r7, #20]
 80068ce:	e004      	b.n	80068da <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80068d0:	4b0e      	ldr	r3, [pc, #56]	@ (800690c <xTaskIncrementTick+0x170>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	3301      	adds	r3, #1
 80068d6:	4a0d      	ldr	r2, [pc, #52]	@ (800690c <xTaskIncrementTick+0x170>)
 80068d8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80068da:	697b      	ldr	r3, [r7, #20]
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3718      	adds	r7, #24
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	20000eac 	.word	0x20000eac
 80068e8:	20000e88 	.word	0x20000e88
 80068ec:	20000e3c 	.word	0x20000e3c
 80068f0:	20000e40 	.word	0x20000e40
 80068f4:	20000e9c 	.word	0x20000e9c
 80068f8:	20000ea4 	.word	0x20000ea4
 80068fc:	20000e8c 	.word	0x20000e8c
 8006900:	200009b4 	.word	0x200009b4
 8006904:	200009b0 	.word	0x200009b0
 8006908:	20000e98 	.word	0x20000e98
 800690c:	20000e94 	.word	0x20000e94

08006910 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006916:	4b2b      	ldr	r3, [pc, #172]	@ (80069c4 <vTaskSwitchContext+0xb4>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800691e:	4b2a      	ldr	r3, [pc, #168]	@ (80069c8 <vTaskSwitchContext+0xb8>)
 8006920:	2201      	movs	r2, #1
 8006922:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006924:	e047      	b.n	80069b6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006926:	4b28      	ldr	r3, [pc, #160]	@ (80069c8 <vTaskSwitchContext+0xb8>)
 8006928:	2200      	movs	r2, #0
 800692a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800692c:	4b27      	ldr	r3, [pc, #156]	@ (80069cc <vTaskSwitchContext+0xbc>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	60fb      	str	r3, [r7, #12]
 8006932:	e011      	b.n	8006958 <vTaskSwitchContext+0x48>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10b      	bne.n	8006952 <vTaskSwitchContext+0x42>
	__asm volatile
 800693a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	607b      	str	r3, [r7, #4]
}
 800694c:	bf00      	nop
 800694e:	bf00      	nop
 8006950:	e7fd      	b.n	800694e <vTaskSwitchContext+0x3e>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	3b01      	subs	r3, #1
 8006956:	60fb      	str	r3, [r7, #12]
 8006958:	491d      	ldr	r1, [pc, #116]	@ (80069d0 <vTaskSwitchContext+0xc0>)
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	4613      	mov	r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	440b      	add	r3, r1
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d0e3      	beq.n	8006934 <vTaskSwitchContext+0x24>
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	4613      	mov	r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4413      	add	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4a16      	ldr	r2, [pc, #88]	@ (80069d0 <vTaskSwitchContext+0xc0>)
 8006978:	4413      	add	r3, r2
 800697a:	60bb      	str	r3, [r7, #8]
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	605a      	str	r2, [r3, #4]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	685a      	ldr	r2, [r3, #4]
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	3308      	adds	r3, #8
 800698e:	429a      	cmp	r2, r3
 8006990:	d104      	bne.n	800699c <vTaskSwitchContext+0x8c>
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	605a      	str	r2, [r3, #4]
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	4a0c      	ldr	r2, [pc, #48]	@ (80069d4 <vTaskSwitchContext+0xc4>)
 80069a4:	6013      	str	r3, [r2, #0]
 80069a6:	4a09      	ldr	r2, [pc, #36]	@ (80069cc <vTaskSwitchContext+0xbc>)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80069ac:	4b09      	ldr	r3, [pc, #36]	@ (80069d4 <vTaskSwitchContext+0xc4>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3354      	adds	r3, #84	@ 0x54
 80069b2:	4a09      	ldr	r2, [pc, #36]	@ (80069d8 <vTaskSwitchContext+0xc8>)
 80069b4:	6013      	str	r3, [r2, #0]
}
 80069b6:	bf00      	nop
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	20000eac 	.word	0x20000eac
 80069c8:	20000e98 	.word	0x20000e98
 80069cc:	20000e8c 	.word	0x20000e8c
 80069d0:	200009b4 	.word	0x200009b4
 80069d4:	200009b0 	.word	0x200009b0
 80069d8:	20000034 	.word	0x20000034

080069dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d10b      	bne.n	8006a04 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80069ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f0:	f383 8811 	msr	BASEPRI, r3
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	60fb      	str	r3, [r7, #12]
}
 80069fe:	bf00      	nop
 8006a00:	bf00      	nop
 8006a02:	e7fd      	b.n	8006a00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a04:	4b07      	ldr	r3, [pc, #28]	@ (8006a24 <vTaskPlaceOnEventList+0x48>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	3318      	adds	r3, #24
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f7fe fe0c 	bl	800562a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a12:	2101      	movs	r1, #1
 8006a14:	6838      	ldr	r0, [r7, #0]
 8006a16:	f000 fa87 	bl	8006f28 <prvAddCurrentTaskToDelayedList>
}
 8006a1a:	bf00      	nop
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	200009b0 	.word	0x200009b0

08006a28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10b      	bne.n	8006a52 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a3e:	f383 8811 	msr	BASEPRI, r3
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	f3bf 8f4f 	dsb	sy
 8006a4a:	617b      	str	r3, [r7, #20]
}
 8006a4c:	bf00      	nop
 8006a4e:	bf00      	nop
 8006a50:	e7fd      	b.n	8006a4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a52:	4b0a      	ldr	r3, [pc, #40]	@ (8006a7c <vTaskPlaceOnEventListRestricted+0x54>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3318      	adds	r3, #24
 8006a58:	4619      	mov	r1, r3
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f7fe fdc1 	bl	80055e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d002      	beq.n	8006a6c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006a66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006a6a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a6c:	6879      	ldr	r1, [r7, #4]
 8006a6e:	68b8      	ldr	r0, [r7, #8]
 8006a70:	f000 fa5a 	bl	8006f28 <prvAddCurrentTaskToDelayedList>
	}
 8006a74:	bf00      	nop
 8006a76:	3718      	adds	r7, #24
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	200009b0 	.word	0x200009b0

08006a80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10b      	bne.n	8006aae <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a9a:	f383 8811 	msr	BASEPRI, r3
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	f3bf 8f4f 	dsb	sy
 8006aa6:	60fb      	str	r3, [r7, #12]
}
 8006aa8:	bf00      	nop
 8006aaa:	bf00      	nop
 8006aac:	e7fd      	b.n	8006aaa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	3318      	adds	r3, #24
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7fe fdf2 	bl	800569c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8006b30 <xTaskRemoveFromEventList+0xb0>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d11d      	bne.n	8006afc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	3304      	adds	r3, #4
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7fe fde9 	bl	800569c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ace:	4b19      	ldr	r3, [pc, #100]	@ (8006b34 <xTaskRemoveFromEventList+0xb4>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d903      	bls.n	8006ade <xTaskRemoveFromEventList+0x5e>
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ada:	4a16      	ldr	r2, [pc, #88]	@ (8006b34 <xTaskRemoveFromEventList+0xb4>)
 8006adc:	6013      	str	r3, [r2, #0]
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4413      	add	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4a13      	ldr	r2, [pc, #76]	@ (8006b38 <xTaskRemoveFromEventList+0xb8>)
 8006aec:	441a      	add	r2, r3
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	3304      	adds	r3, #4
 8006af2:	4619      	mov	r1, r3
 8006af4:	4610      	mov	r0, r2
 8006af6:	f7fe fd74 	bl	80055e2 <vListInsertEnd>
 8006afa:	e005      	b.n	8006b08 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	3318      	adds	r3, #24
 8006b00:	4619      	mov	r1, r3
 8006b02:	480e      	ldr	r0, [pc, #56]	@ (8006b3c <xTaskRemoveFromEventList+0xbc>)
 8006b04:	f7fe fd6d 	bl	80055e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8006b40 <xTaskRemoveFromEventList+0xc0>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d905      	bls.n	8006b22 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b16:	2301      	movs	r3, #1
 8006b18:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8006b44 <xTaskRemoveFromEventList+0xc4>)
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	601a      	str	r2, [r3, #0]
 8006b20:	e001      	b.n	8006b26 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006b22:	2300      	movs	r3, #0
 8006b24:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b26:	697b      	ldr	r3, [r7, #20]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3718      	adds	r7, #24
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	20000eac 	.word	0x20000eac
 8006b34:	20000e8c 	.word	0x20000e8c
 8006b38:	200009b4 	.word	0x200009b4
 8006b3c:	20000e44 	.word	0x20000e44
 8006b40:	200009b0 	.word	0x200009b0
 8006b44:	20000e98 	.word	0x20000e98

08006b48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b50:	4b06      	ldr	r3, [pc, #24]	@ (8006b6c <vTaskInternalSetTimeOutState+0x24>)
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b58:	4b05      	ldr	r3, [pc, #20]	@ (8006b70 <vTaskInternalSetTimeOutState+0x28>)
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	605a      	str	r2, [r3, #4]
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	20000e9c 	.word	0x20000e9c
 8006b70:	20000e88 	.word	0x20000e88

08006b74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b088      	sub	sp, #32
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10b      	bne.n	8006b9c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b88:	f383 8811 	msr	BASEPRI, r3
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	f3bf 8f4f 	dsb	sy
 8006b94:	613b      	str	r3, [r7, #16]
}
 8006b96:	bf00      	nop
 8006b98:	bf00      	nop
 8006b9a:	e7fd      	b.n	8006b98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d10b      	bne.n	8006bba <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba6:	f383 8811 	msr	BASEPRI, r3
 8006baa:	f3bf 8f6f 	isb	sy
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	60fb      	str	r3, [r7, #12]
}
 8006bb4:	bf00      	nop
 8006bb6:	bf00      	nop
 8006bb8:	e7fd      	b.n	8006bb6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006bba:	f000 fe95 	bl	80078e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8006c34 <xTaskCheckForTimeOut+0xc0>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	69ba      	ldr	r2, [r7, #24]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bd6:	d102      	bne.n	8006bde <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	61fb      	str	r3, [r7, #28]
 8006bdc:	e023      	b.n	8006c26 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	4b15      	ldr	r3, [pc, #84]	@ (8006c38 <xTaskCheckForTimeOut+0xc4>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d007      	beq.n	8006bfa <xTaskCheckForTimeOut+0x86>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	69ba      	ldr	r2, [r7, #24]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d302      	bcc.n	8006bfa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	61fb      	str	r3, [r7, #28]
 8006bf8:	e015      	b.n	8006c26 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d20b      	bcs.n	8006c1c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	1ad2      	subs	r2, r2, r3
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f7ff ff99 	bl	8006b48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c16:	2300      	movs	r3, #0
 8006c18:	61fb      	str	r3, [r7, #28]
 8006c1a:	e004      	b.n	8006c26 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c22:	2301      	movs	r3, #1
 8006c24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c26:	f000 fe91 	bl	800794c <vPortExitCritical>

	return xReturn;
 8006c2a:	69fb      	ldr	r3, [r7, #28]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3720      	adds	r7, #32
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	20000e88 	.word	0x20000e88
 8006c38:	20000e9c 	.word	0x20000e9c

08006c3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c40:	4b03      	ldr	r3, [pc, #12]	@ (8006c50 <vTaskMissedYield+0x14>)
 8006c42:	2201      	movs	r2, #1
 8006c44:	601a      	str	r2, [r3, #0]
}
 8006c46:	bf00      	nop
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	20000e98 	.word	0x20000e98

08006c54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c5c:	f000 f852 	bl	8006d04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c60:	4b06      	ldr	r3, [pc, #24]	@ (8006c7c <prvIdleTask+0x28>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d9f9      	bls.n	8006c5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c68:	4b05      	ldr	r3, [pc, #20]	@ (8006c80 <prvIdleTask+0x2c>)
 8006c6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c6e:	601a      	str	r2, [r3, #0]
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c78:	e7f0      	b.n	8006c5c <prvIdleTask+0x8>
 8006c7a:	bf00      	nop
 8006c7c:	200009b4 	.word	0x200009b4
 8006c80:	e000ed04 	.word	0xe000ed04

08006c84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	607b      	str	r3, [r7, #4]
 8006c8e:	e00c      	b.n	8006caa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	4613      	mov	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4a12      	ldr	r2, [pc, #72]	@ (8006ce4 <prvInitialiseTaskLists+0x60>)
 8006c9c:	4413      	add	r3, r2
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fe fc72 	bl	8005588 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	607b      	str	r3, [r7, #4]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b37      	cmp	r3, #55	@ 0x37
 8006cae:	d9ef      	bls.n	8006c90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006cb0:	480d      	ldr	r0, [pc, #52]	@ (8006ce8 <prvInitialiseTaskLists+0x64>)
 8006cb2:	f7fe fc69 	bl	8005588 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006cb6:	480d      	ldr	r0, [pc, #52]	@ (8006cec <prvInitialiseTaskLists+0x68>)
 8006cb8:	f7fe fc66 	bl	8005588 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006cbc:	480c      	ldr	r0, [pc, #48]	@ (8006cf0 <prvInitialiseTaskLists+0x6c>)
 8006cbe:	f7fe fc63 	bl	8005588 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006cc2:	480c      	ldr	r0, [pc, #48]	@ (8006cf4 <prvInitialiseTaskLists+0x70>)
 8006cc4:	f7fe fc60 	bl	8005588 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006cc8:	480b      	ldr	r0, [pc, #44]	@ (8006cf8 <prvInitialiseTaskLists+0x74>)
 8006cca:	f7fe fc5d 	bl	8005588 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006cce:	4b0b      	ldr	r3, [pc, #44]	@ (8006cfc <prvInitialiseTaskLists+0x78>)
 8006cd0:	4a05      	ldr	r2, [pc, #20]	@ (8006ce8 <prvInitialiseTaskLists+0x64>)
 8006cd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8006d00 <prvInitialiseTaskLists+0x7c>)
 8006cd6:	4a05      	ldr	r2, [pc, #20]	@ (8006cec <prvInitialiseTaskLists+0x68>)
 8006cd8:	601a      	str	r2, [r3, #0]
}
 8006cda:	bf00      	nop
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	200009b4 	.word	0x200009b4
 8006ce8:	20000e14 	.word	0x20000e14
 8006cec:	20000e28 	.word	0x20000e28
 8006cf0:	20000e44 	.word	0x20000e44
 8006cf4:	20000e58 	.word	0x20000e58
 8006cf8:	20000e70 	.word	0x20000e70
 8006cfc:	20000e3c 	.word	0x20000e3c
 8006d00:	20000e40 	.word	0x20000e40

08006d04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d0a:	e019      	b.n	8006d40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d0c:	f000 fdec 	bl	80078e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d10:	4b10      	ldr	r3, [pc, #64]	@ (8006d54 <prvCheckTasksWaitingTermination+0x50>)
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	3304      	adds	r3, #4
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7fe fcbd 	bl	800569c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d22:	4b0d      	ldr	r3, [pc, #52]	@ (8006d58 <prvCheckTasksWaitingTermination+0x54>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	3b01      	subs	r3, #1
 8006d28:	4a0b      	ldr	r2, [pc, #44]	@ (8006d58 <prvCheckTasksWaitingTermination+0x54>)
 8006d2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8006d5c <prvCheckTasksWaitingTermination+0x58>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	3b01      	subs	r3, #1
 8006d32:	4a0a      	ldr	r2, [pc, #40]	@ (8006d5c <prvCheckTasksWaitingTermination+0x58>)
 8006d34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d36:	f000 fe09 	bl	800794c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f810 	bl	8006d60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d40:	4b06      	ldr	r3, [pc, #24]	@ (8006d5c <prvCheckTasksWaitingTermination+0x58>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1e1      	bne.n	8006d0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d48:	bf00      	nop
 8006d4a:	bf00      	nop
 8006d4c:	3708      	adds	r7, #8
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	20000e58 	.word	0x20000e58
 8006d58:	20000e84 	.word	0x20000e84
 8006d5c:	20000e6c 	.word	0x20000e6c

08006d60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	3354      	adds	r3, #84	@ 0x54
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f001 faed 	bl	800834c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d108      	bne.n	8006d8e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d80:	4618      	mov	r0, r3
 8006d82:	f000 ffa1 	bl	8007cc8 <vPortFree>
				vPortFree( pxTCB );
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 ff9e 	bl	8007cc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d8c:	e019      	b.n	8006dc2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d103      	bne.n	8006da0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 ff95 	bl	8007cc8 <vPortFree>
	}
 8006d9e:	e010      	b.n	8006dc2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d00b      	beq.n	8006dc2 <prvDeleteTCB+0x62>
	__asm volatile
 8006daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dae:	f383 8811 	msr	BASEPRI, r3
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	60fb      	str	r3, [r7, #12]
}
 8006dbc:	bf00      	nop
 8006dbe:	bf00      	nop
 8006dc0:	e7fd      	b.n	8006dbe <prvDeleteTCB+0x5e>
	}
 8006dc2:	bf00      	nop
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
	...

08006dcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8006e04 <prvResetNextTaskUnblockTime+0x38>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d104      	bne.n	8006de6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8006e08 <prvResetNextTaskUnblockTime+0x3c>)
 8006dde:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006de2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006de4:	e008      	b.n	8006df8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006de6:	4b07      	ldr	r3, [pc, #28]	@ (8006e04 <prvResetNextTaskUnblockTime+0x38>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	4a04      	ldr	r2, [pc, #16]	@ (8006e08 <prvResetNextTaskUnblockTime+0x3c>)
 8006df6:	6013      	str	r3, [r2, #0]
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr
 8006e04:	20000e3c 	.word	0x20000e3c
 8006e08:	20000ea4 	.word	0x20000ea4

08006e0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e12:	4b0b      	ldr	r3, [pc, #44]	@ (8006e40 <xTaskGetSchedulerState+0x34>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d102      	bne.n	8006e20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	607b      	str	r3, [r7, #4]
 8006e1e:	e008      	b.n	8006e32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e20:	4b08      	ldr	r3, [pc, #32]	@ (8006e44 <xTaskGetSchedulerState+0x38>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d102      	bne.n	8006e2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e28:	2302      	movs	r3, #2
 8006e2a:	607b      	str	r3, [r7, #4]
 8006e2c:	e001      	b.n	8006e32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e32:	687b      	ldr	r3, [r7, #4]
	}
 8006e34:	4618      	mov	r0, r3
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr
 8006e40:	20000e90 	.word	0x20000e90
 8006e44:	20000eac 	.word	0x20000eac

08006e48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e54:	2300      	movs	r3, #0
 8006e56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d058      	beq.n	8006f10 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e5e:	4b2f      	ldr	r3, [pc, #188]	@ (8006f1c <xTaskPriorityDisinherit+0xd4>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d00b      	beq.n	8006e80 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6c:	f383 8811 	msr	BASEPRI, r3
 8006e70:	f3bf 8f6f 	isb	sy
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	60fb      	str	r3, [r7, #12]
}
 8006e7a:	bf00      	nop
 8006e7c:	bf00      	nop
 8006e7e:	e7fd      	b.n	8006e7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10b      	bne.n	8006ea0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	60bb      	str	r3, [r7, #8]
}
 8006e9a:	bf00      	nop
 8006e9c:	bf00      	nop
 8006e9e:	e7fd      	b.n	8006e9c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ea4:	1e5a      	subs	r2, r3, #1
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d02c      	beq.n	8006f10 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d128      	bne.n	8006f10 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7fe fbea 	bl	800569c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8006f20 <xTaskPriorityDisinherit+0xd8>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d903      	bls.n	8006ef0 <xTaskPriorityDisinherit+0xa8>
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eec:	4a0c      	ldr	r2, [pc, #48]	@ (8006f20 <xTaskPriorityDisinherit+0xd8>)
 8006eee:	6013      	str	r3, [r2, #0]
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4413      	add	r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4a09      	ldr	r2, [pc, #36]	@ (8006f24 <xTaskPriorityDisinherit+0xdc>)
 8006efe:	441a      	add	r2, r3
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	3304      	adds	r3, #4
 8006f04:	4619      	mov	r1, r3
 8006f06:	4610      	mov	r0, r2
 8006f08:	f7fe fb6b 	bl	80055e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f10:	697b      	ldr	r3, [r7, #20]
	}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3718      	adds	r7, #24
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	200009b0 	.word	0x200009b0
 8006f20:	20000e8c 	.word	0x20000e8c
 8006f24:	200009b4 	.word	0x200009b4

08006f28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f32:	4b21      	ldr	r3, [pc, #132]	@ (8006fb8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f38:	4b20      	ldr	r3, [pc, #128]	@ (8006fbc <prvAddCurrentTaskToDelayedList+0x94>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	3304      	adds	r3, #4
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7fe fbac 	bl	800569c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f4a:	d10a      	bne.n	8006f62 <prvAddCurrentTaskToDelayedList+0x3a>
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d007      	beq.n	8006f62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f52:	4b1a      	ldr	r3, [pc, #104]	@ (8006fbc <prvAddCurrentTaskToDelayedList+0x94>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	3304      	adds	r3, #4
 8006f58:	4619      	mov	r1, r3
 8006f5a:	4819      	ldr	r0, [pc, #100]	@ (8006fc0 <prvAddCurrentTaskToDelayedList+0x98>)
 8006f5c:	f7fe fb41 	bl	80055e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f60:	e026      	b.n	8006fb0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4413      	add	r3, r2
 8006f68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f6a:	4b14      	ldr	r3, [pc, #80]	@ (8006fbc <prvAddCurrentTaskToDelayedList+0x94>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68ba      	ldr	r2, [r7, #8]
 8006f70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d209      	bcs.n	8006f8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f7a:	4b12      	ldr	r3, [pc, #72]	@ (8006fc4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8006fbc <prvAddCurrentTaskToDelayedList+0x94>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	3304      	adds	r3, #4
 8006f84:	4619      	mov	r1, r3
 8006f86:	4610      	mov	r0, r2
 8006f88:	f7fe fb4f 	bl	800562a <vListInsert>
}
 8006f8c:	e010      	b.n	8006fb0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8006fc8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	4b0a      	ldr	r3, [pc, #40]	@ (8006fbc <prvAddCurrentTaskToDelayedList+0x94>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	3304      	adds	r3, #4
 8006f98:	4619      	mov	r1, r3
 8006f9a:	4610      	mov	r0, r2
 8006f9c:	f7fe fb45 	bl	800562a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8006fcc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d202      	bcs.n	8006fb0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006faa:	4a08      	ldr	r2, [pc, #32]	@ (8006fcc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	6013      	str	r3, [r2, #0]
}
 8006fb0:	bf00      	nop
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	20000e88 	.word	0x20000e88
 8006fbc:	200009b0 	.word	0x200009b0
 8006fc0:	20000e70 	.word	0x20000e70
 8006fc4:	20000e40 	.word	0x20000e40
 8006fc8:	20000e3c 	.word	0x20000e3c
 8006fcc:	20000ea4 	.word	0x20000ea4

08006fd0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b08a      	sub	sp, #40	@ 0x28
 8006fd4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006fda:	f000 fb13 	bl	8007604 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006fde:	4b1d      	ldr	r3, [pc, #116]	@ (8007054 <xTimerCreateTimerTask+0x84>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d021      	beq.n	800702a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006fea:	2300      	movs	r3, #0
 8006fec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006fee:	1d3a      	adds	r2, r7, #4
 8006ff0:	f107 0108 	add.w	r1, r7, #8
 8006ff4:	f107 030c 	add.w	r3, r7, #12
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7fe faab 	bl	8005554 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006ffe:	6879      	ldr	r1, [r7, #4]
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	9202      	str	r2, [sp, #8]
 8007006:	9301      	str	r3, [sp, #4]
 8007008:	2302      	movs	r3, #2
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	2300      	movs	r3, #0
 800700e:	460a      	mov	r2, r1
 8007010:	4911      	ldr	r1, [pc, #68]	@ (8007058 <xTimerCreateTimerTask+0x88>)
 8007012:	4812      	ldr	r0, [pc, #72]	@ (800705c <xTimerCreateTimerTask+0x8c>)
 8007014:	f7ff f8a2 	bl	800615c <xTaskCreateStatic>
 8007018:	4603      	mov	r3, r0
 800701a:	4a11      	ldr	r2, [pc, #68]	@ (8007060 <xTimerCreateTimerTask+0x90>)
 800701c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800701e:	4b10      	ldr	r3, [pc, #64]	@ (8007060 <xTimerCreateTimerTask+0x90>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d001      	beq.n	800702a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007026:	2301      	movs	r3, #1
 8007028:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10b      	bne.n	8007048 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007034:	f383 8811 	msr	BASEPRI, r3
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	613b      	str	r3, [r7, #16]
}
 8007042:	bf00      	nop
 8007044:	bf00      	nop
 8007046:	e7fd      	b.n	8007044 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007048:	697b      	ldr	r3, [r7, #20]
}
 800704a:	4618      	mov	r0, r3
 800704c:	3718      	adds	r7, #24
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	20000ee0 	.word	0x20000ee0
 8007058:	08009098 	.word	0x08009098
 800705c:	0800719d 	.word	0x0800719d
 8007060:	20000ee4 	.word	0x20000ee4

08007064 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b08a      	sub	sp, #40	@ 0x28
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
 8007070:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007072:	2300      	movs	r3, #0
 8007074:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10b      	bne.n	8007094 <xTimerGenericCommand+0x30>
	__asm volatile
 800707c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007080:	f383 8811 	msr	BASEPRI, r3
 8007084:	f3bf 8f6f 	isb	sy
 8007088:	f3bf 8f4f 	dsb	sy
 800708c:	623b      	str	r3, [r7, #32]
}
 800708e:	bf00      	nop
 8007090:	bf00      	nop
 8007092:	e7fd      	b.n	8007090 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007094:	4b19      	ldr	r3, [pc, #100]	@ (80070fc <xTimerGenericCommand+0x98>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d02a      	beq.n	80070f2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	2b05      	cmp	r3, #5
 80070ac:	dc18      	bgt.n	80070e0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80070ae:	f7ff fead 	bl	8006e0c <xTaskGetSchedulerState>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d109      	bne.n	80070cc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80070b8:	4b10      	ldr	r3, [pc, #64]	@ (80070fc <xTimerGenericCommand+0x98>)
 80070ba:	6818      	ldr	r0, [r3, #0]
 80070bc:	f107 0110 	add.w	r1, r7, #16
 80070c0:	2300      	movs	r3, #0
 80070c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070c4:	f7fe fc5a 	bl	800597c <xQueueGenericSend>
 80070c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80070ca:	e012      	b.n	80070f2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80070cc:	4b0b      	ldr	r3, [pc, #44]	@ (80070fc <xTimerGenericCommand+0x98>)
 80070ce:	6818      	ldr	r0, [r3, #0]
 80070d0:	f107 0110 	add.w	r1, r7, #16
 80070d4:	2300      	movs	r3, #0
 80070d6:	2200      	movs	r2, #0
 80070d8:	f7fe fc50 	bl	800597c <xQueueGenericSend>
 80070dc:	6278      	str	r0, [r7, #36]	@ 0x24
 80070de:	e008      	b.n	80070f2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80070e0:	4b06      	ldr	r3, [pc, #24]	@ (80070fc <xTimerGenericCommand+0x98>)
 80070e2:	6818      	ldr	r0, [r3, #0]
 80070e4:	f107 0110 	add.w	r1, r7, #16
 80070e8:	2300      	movs	r3, #0
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	f7fe fd48 	bl	8005b80 <xQueueGenericSendFromISR>
 80070f0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80070f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3728      	adds	r7, #40	@ 0x28
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	20000ee0 	.word	0x20000ee0

08007100 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b088      	sub	sp, #32
 8007104:	af02      	add	r7, sp, #8
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800710a:	4b23      	ldr	r3, [pc, #140]	@ (8007198 <prvProcessExpiredTimer+0x98>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	3304      	adds	r3, #4
 8007118:	4618      	mov	r0, r3
 800711a:	f7fe fabf 	bl	800569c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007124:	f003 0304 	and.w	r3, r3, #4
 8007128:	2b00      	cmp	r3, #0
 800712a:	d023      	beq.n	8007174 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	699a      	ldr	r2, [r3, #24]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	18d1      	adds	r1, r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	6978      	ldr	r0, [r7, #20]
 800713a:	f000 f8d5 	bl	80072e8 <prvInsertTimerInActiveList>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d020      	beq.n	8007186 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007144:	2300      	movs	r3, #0
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	2300      	movs	r3, #0
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	2100      	movs	r1, #0
 800714e:	6978      	ldr	r0, [r7, #20]
 8007150:	f7ff ff88 	bl	8007064 <xTimerGenericCommand>
 8007154:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d114      	bne.n	8007186 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800715c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007160:	f383 8811 	msr	BASEPRI, r3
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	60fb      	str	r3, [r7, #12]
}
 800716e:	bf00      	nop
 8007170:	bf00      	nop
 8007172:	e7fd      	b.n	8007170 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800717a:	f023 0301 	bic.w	r3, r3, #1
 800717e:	b2da      	uxtb	r2, r3
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	6978      	ldr	r0, [r7, #20]
 800718c:	4798      	blx	r3
}
 800718e:	bf00      	nop
 8007190:	3718      	adds	r7, #24
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	20000ed8 	.word	0x20000ed8

0800719c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071a4:	f107 0308 	add.w	r3, r7, #8
 80071a8:	4618      	mov	r0, r3
 80071aa:	f000 f859 	bl	8007260 <prvGetNextExpireTime>
 80071ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	4619      	mov	r1, r3
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f000 f805 	bl	80071c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80071ba:	f000 f8d7 	bl	800736c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071be:	bf00      	nop
 80071c0:	e7f0      	b.n	80071a4 <prvTimerTask+0x8>
	...

080071c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80071ce:	f7ff fa29 	bl	8006624 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80071d2:	f107 0308 	add.w	r3, r7, #8
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 f866 	bl	80072a8 <prvSampleTimeNow>
 80071dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d130      	bne.n	8007246 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10a      	bne.n	8007200 <prvProcessTimerOrBlockTask+0x3c>
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d806      	bhi.n	8007200 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80071f2:	f7ff fa25 	bl	8006640 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80071f6:	68f9      	ldr	r1, [r7, #12]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f7ff ff81 	bl	8007100 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80071fe:	e024      	b.n	800724a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d008      	beq.n	8007218 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007206:	4b13      	ldr	r3, [pc, #76]	@ (8007254 <prvProcessTimerOrBlockTask+0x90>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d101      	bne.n	8007214 <prvProcessTimerOrBlockTask+0x50>
 8007210:	2301      	movs	r3, #1
 8007212:	e000      	b.n	8007216 <prvProcessTimerOrBlockTask+0x52>
 8007214:	2300      	movs	r3, #0
 8007216:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007218:	4b0f      	ldr	r3, [pc, #60]	@ (8007258 <prvProcessTimerOrBlockTask+0x94>)
 800721a:	6818      	ldr	r0, [r3, #0]
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	683a      	ldr	r2, [r7, #0]
 8007224:	4619      	mov	r1, r3
 8007226:	f7fe ff65 	bl	80060f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800722a:	f7ff fa09 	bl	8006640 <xTaskResumeAll>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10a      	bne.n	800724a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007234:	4b09      	ldr	r3, [pc, #36]	@ (800725c <prvProcessTimerOrBlockTask+0x98>)
 8007236:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800723a:	601a      	str	r2, [r3, #0]
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	f3bf 8f6f 	isb	sy
}
 8007244:	e001      	b.n	800724a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007246:	f7ff f9fb 	bl	8006640 <xTaskResumeAll>
}
 800724a:	bf00      	nop
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	20000edc 	.word	0x20000edc
 8007258:	20000ee0 	.word	0x20000ee0
 800725c:	e000ed04 	.word	0xe000ed04

08007260 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007268:	4b0e      	ldr	r3, [pc, #56]	@ (80072a4 <prvGetNextExpireTime+0x44>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d101      	bne.n	8007276 <prvGetNextExpireTime+0x16>
 8007272:	2201      	movs	r2, #1
 8007274:	e000      	b.n	8007278 <prvGetNextExpireTime+0x18>
 8007276:	2200      	movs	r2, #0
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d105      	bne.n	8007290 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007284:	4b07      	ldr	r3, [pc, #28]	@ (80072a4 <prvGetNextExpireTime+0x44>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	60fb      	str	r3, [r7, #12]
 800728e:	e001      	b.n	8007294 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007290:	2300      	movs	r3, #0
 8007292:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007294:	68fb      	ldr	r3, [r7, #12]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	20000ed8 	.word	0x20000ed8

080072a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80072b0:	f7ff fa64 	bl	800677c <xTaskGetTickCount>
 80072b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80072b6:	4b0b      	ldr	r3, [pc, #44]	@ (80072e4 <prvSampleTimeNow+0x3c>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d205      	bcs.n	80072cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80072c0:	f000 f93a 	bl	8007538 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	601a      	str	r2, [r3, #0]
 80072ca:	e002      	b.n	80072d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80072d2:	4a04      	ldr	r2, [pc, #16]	@ (80072e4 <prvSampleTimeNow+0x3c>)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80072d8:	68fb      	ldr	r3, [r7, #12]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	20000ee8 	.word	0x20000ee8

080072e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b086      	sub	sp, #24
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
 80072f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80072f6:	2300      	movs	r3, #0
 80072f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007306:	68ba      	ldr	r2, [r7, #8]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	429a      	cmp	r2, r3
 800730c:	d812      	bhi.n	8007334 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	1ad2      	subs	r2, r2, r3
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	429a      	cmp	r2, r3
 800731a:	d302      	bcc.n	8007322 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800731c:	2301      	movs	r3, #1
 800731e:	617b      	str	r3, [r7, #20]
 8007320:	e01b      	b.n	800735a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007322:	4b10      	ldr	r3, [pc, #64]	@ (8007364 <prvInsertTimerInActiveList+0x7c>)
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	3304      	adds	r3, #4
 800732a:	4619      	mov	r1, r3
 800732c:	4610      	mov	r0, r2
 800732e:	f7fe f97c 	bl	800562a <vListInsert>
 8007332:	e012      	b.n	800735a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	429a      	cmp	r2, r3
 800733a:	d206      	bcs.n	800734a <prvInsertTimerInActiveList+0x62>
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	429a      	cmp	r2, r3
 8007342:	d302      	bcc.n	800734a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007344:	2301      	movs	r3, #1
 8007346:	617b      	str	r3, [r7, #20]
 8007348:	e007      	b.n	800735a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800734a:	4b07      	ldr	r3, [pc, #28]	@ (8007368 <prvInsertTimerInActiveList+0x80>)
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	3304      	adds	r3, #4
 8007352:	4619      	mov	r1, r3
 8007354:	4610      	mov	r0, r2
 8007356:	f7fe f968 	bl	800562a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800735a:	697b      	ldr	r3, [r7, #20]
}
 800735c:	4618      	mov	r0, r3
 800735e:	3718      	adds	r7, #24
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	20000edc 	.word	0x20000edc
 8007368:	20000ed8 	.word	0x20000ed8

0800736c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b08e      	sub	sp, #56	@ 0x38
 8007370:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007372:	e0ce      	b.n	8007512 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	da19      	bge.n	80073ae <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800737a:	1d3b      	adds	r3, r7, #4
 800737c:	3304      	adds	r3, #4
 800737e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10b      	bne.n	800739e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800738a:	f383 8811 	msr	BASEPRI, r3
 800738e:	f3bf 8f6f 	isb	sy
 8007392:	f3bf 8f4f 	dsb	sy
 8007396:	61fb      	str	r3, [r7, #28]
}
 8007398:	bf00      	nop
 800739a:	bf00      	nop
 800739c:	e7fd      	b.n	800739a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800739e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073a4:	6850      	ldr	r0, [r2, #4]
 80073a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073a8:	6892      	ldr	r2, [r2, #8]
 80073aa:	4611      	mov	r1, r2
 80073ac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f2c0 80ae 	blt.w	8007512 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80073ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d004      	beq.n	80073cc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c4:	3304      	adds	r3, #4
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fe f968 	bl	800569c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073cc:	463b      	mov	r3, r7
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7ff ff6a 	bl	80072a8 <prvSampleTimeNow>
 80073d4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2b09      	cmp	r3, #9
 80073da:	f200 8097 	bhi.w	800750c <prvProcessReceivedCommands+0x1a0>
 80073de:	a201      	add	r2, pc, #4	@ (adr r2, 80073e4 <prvProcessReceivedCommands+0x78>)
 80073e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e4:	0800740d 	.word	0x0800740d
 80073e8:	0800740d 	.word	0x0800740d
 80073ec:	0800740d 	.word	0x0800740d
 80073f0:	08007483 	.word	0x08007483
 80073f4:	08007497 	.word	0x08007497
 80073f8:	080074e3 	.word	0x080074e3
 80073fc:	0800740d 	.word	0x0800740d
 8007400:	0800740d 	.word	0x0800740d
 8007404:	08007483 	.word	0x08007483
 8007408:	08007497 	.word	0x08007497
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800740c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800740e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007412:	f043 0301 	orr.w	r3, r3, #1
 8007416:	b2da      	uxtb	r2, r3
 8007418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800741a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007422:	699b      	ldr	r3, [r3, #24]
 8007424:	18d1      	adds	r1, r2, r3
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800742a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800742c:	f7ff ff5c 	bl	80072e8 <prvInsertTimerInActiveList>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d06c      	beq.n	8007510 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800743c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800743e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007440:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007444:	f003 0304 	and.w	r3, r3, #4
 8007448:	2b00      	cmp	r3, #0
 800744a:	d061      	beq.n	8007510 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	441a      	add	r2, r3
 8007454:	2300      	movs	r3, #0
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	2300      	movs	r3, #0
 800745a:	2100      	movs	r1, #0
 800745c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800745e:	f7ff fe01 	bl	8007064 <xTimerGenericCommand>
 8007462:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007464:	6a3b      	ldr	r3, [r7, #32]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d152      	bne.n	8007510 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800746a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746e:	f383 8811 	msr	BASEPRI, r3
 8007472:	f3bf 8f6f 	isb	sy
 8007476:	f3bf 8f4f 	dsb	sy
 800747a:	61bb      	str	r3, [r7, #24]
}
 800747c:	bf00      	nop
 800747e:	bf00      	nop
 8007480:	e7fd      	b.n	800747e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007484:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007488:	f023 0301 	bic.w	r3, r3, #1
 800748c:	b2da      	uxtb	r2, r3
 800748e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007490:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007494:	e03d      	b.n	8007512 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007498:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800749c:	f043 0301 	orr.w	r3, r3, #1
 80074a0:	b2da      	uxtb	r2, r3
 80074a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80074a8:	68ba      	ldr	r2, [r7, #8]
 80074aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80074ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b0:	699b      	ldr	r3, [r3, #24]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10b      	bne.n	80074ce <prvProcessReceivedCommands+0x162>
	__asm volatile
 80074b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ba:	f383 8811 	msr	BASEPRI, r3
 80074be:	f3bf 8f6f 	isb	sy
 80074c2:	f3bf 8f4f 	dsb	sy
 80074c6:	617b      	str	r3, [r7, #20]
}
 80074c8:	bf00      	nop
 80074ca:	bf00      	nop
 80074cc:	e7fd      	b.n	80074ca <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80074ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d0:	699a      	ldr	r2, [r3, #24]
 80074d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d4:	18d1      	adds	r1, r2, r3
 80074d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074dc:	f7ff ff04 	bl	80072e8 <prvInsertTimerInActiveList>
					break;
 80074e0:	e017      	b.n	8007512 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80074e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074e8:	f003 0302 	and.w	r3, r3, #2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d103      	bne.n	80074f8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80074f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074f2:	f000 fbe9 	bl	8007cc8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80074f6:	e00c      	b.n	8007512 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074fe:	f023 0301 	bic.w	r3, r3, #1
 8007502:	b2da      	uxtb	r2, r3
 8007504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007506:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800750a:	e002      	b.n	8007512 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800750c:	bf00      	nop
 800750e:	e000      	b.n	8007512 <prvProcessReceivedCommands+0x1a6>
					break;
 8007510:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007512:	4b08      	ldr	r3, [pc, #32]	@ (8007534 <prvProcessReceivedCommands+0x1c8>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	1d39      	adds	r1, r7, #4
 8007518:	2200      	movs	r2, #0
 800751a:	4618      	mov	r0, r3
 800751c:	f7fe fbce 	bl	8005cbc <xQueueReceive>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	f47f af26 	bne.w	8007374 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007528:	bf00      	nop
 800752a:	bf00      	nop
 800752c:	3730      	adds	r7, #48	@ 0x30
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	20000ee0 	.word	0x20000ee0

08007538 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b088      	sub	sp, #32
 800753c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800753e:	e049      	b.n	80075d4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007540:	4b2e      	ldr	r3, [pc, #184]	@ (80075fc <prvSwitchTimerLists+0xc4>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800754a:	4b2c      	ldr	r3, [pc, #176]	@ (80075fc <prvSwitchTimerLists+0xc4>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	3304      	adds	r3, #4
 8007558:	4618      	mov	r0, r3
 800755a:	f7fe f89f 	bl	800569c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800756c:	f003 0304 	and.w	r3, r3, #4
 8007570:	2b00      	cmp	r3, #0
 8007572:	d02f      	beq.n	80075d4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	693a      	ldr	r2, [r7, #16]
 800757a:	4413      	add	r3, r2
 800757c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800757e:	68ba      	ldr	r2, [r7, #8]
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	429a      	cmp	r2, r3
 8007584:	d90e      	bls.n	80075a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	68fa      	ldr	r2, [r7, #12]
 8007590:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007592:	4b1a      	ldr	r3, [pc, #104]	@ (80075fc <prvSwitchTimerLists+0xc4>)
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	3304      	adds	r3, #4
 800759a:	4619      	mov	r1, r3
 800759c:	4610      	mov	r0, r2
 800759e:	f7fe f844 	bl	800562a <vListInsert>
 80075a2:	e017      	b.n	80075d4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075a4:	2300      	movs	r3, #0
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	2300      	movs	r3, #0
 80075aa:	693a      	ldr	r2, [r7, #16]
 80075ac:	2100      	movs	r1, #0
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f7ff fd58 	bl	8007064 <xTimerGenericCommand>
 80075b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d10b      	bne.n	80075d4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80075bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c0:	f383 8811 	msr	BASEPRI, r3
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	603b      	str	r3, [r7, #0]
}
 80075ce:	bf00      	nop
 80075d0:	bf00      	nop
 80075d2:	e7fd      	b.n	80075d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075d4:	4b09      	ldr	r3, [pc, #36]	@ (80075fc <prvSwitchTimerLists+0xc4>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1b0      	bne.n	8007540 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80075de:	4b07      	ldr	r3, [pc, #28]	@ (80075fc <prvSwitchTimerLists+0xc4>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80075e4:	4b06      	ldr	r3, [pc, #24]	@ (8007600 <prvSwitchTimerLists+0xc8>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a04      	ldr	r2, [pc, #16]	@ (80075fc <prvSwitchTimerLists+0xc4>)
 80075ea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80075ec:	4a04      	ldr	r2, [pc, #16]	@ (8007600 <prvSwitchTimerLists+0xc8>)
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	6013      	str	r3, [r2, #0]
}
 80075f2:	bf00      	nop
 80075f4:	3718      	adds	r7, #24
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	20000ed8 	.word	0x20000ed8
 8007600:	20000edc 	.word	0x20000edc

08007604 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800760a:	f000 f96d 	bl	80078e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800760e:	4b15      	ldr	r3, [pc, #84]	@ (8007664 <prvCheckForValidListAndQueue+0x60>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d120      	bne.n	8007658 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007616:	4814      	ldr	r0, [pc, #80]	@ (8007668 <prvCheckForValidListAndQueue+0x64>)
 8007618:	f7fd ffb6 	bl	8005588 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800761c:	4813      	ldr	r0, [pc, #76]	@ (800766c <prvCheckForValidListAndQueue+0x68>)
 800761e:	f7fd ffb3 	bl	8005588 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007622:	4b13      	ldr	r3, [pc, #76]	@ (8007670 <prvCheckForValidListAndQueue+0x6c>)
 8007624:	4a10      	ldr	r2, [pc, #64]	@ (8007668 <prvCheckForValidListAndQueue+0x64>)
 8007626:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007628:	4b12      	ldr	r3, [pc, #72]	@ (8007674 <prvCheckForValidListAndQueue+0x70>)
 800762a:	4a10      	ldr	r2, [pc, #64]	@ (800766c <prvCheckForValidListAndQueue+0x68>)
 800762c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800762e:	2300      	movs	r3, #0
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	4b11      	ldr	r3, [pc, #68]	@ (8007678 <prvCheckForValidListAndQueue+0x74>)
 8007634:	4a11      	ldr	r2, [pc, #68]	@ (800767c <prvCheckForValidListAndQueue+0x78>)
 8007636:	2110      	movs	r1, #16
 8007638:	200a      	movs	r0, #10
 800763a:	f7fe f8c3 	bl	80057c4 <xQueueGenericCreateStatic>
 800763e:	4603      	mov	r3, r0
 8007640:	4a08      	ldr	r2, [pc, #32]	@ (8007664 <prvCheckForValidListAndQueue+0x60>)
 8007642:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007644:	4b07      	ldr	r3, [pc, #28]	@ (8007664 <prvCheckForValidListAndQueue+0x60>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d005      	beq.n	8007658 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800764c:	4b05      	ldr	r3, [pc, #20]	@ (8007664 <prvCheckForValidListAndQueue+0x60>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	490b      	ldr	r1, [pc, #44]	@ (8007680 <prvCheckForValidListAndQueue+0x7c>)
 8007652:	4618      	mov	r0, r3
 8007654:	f7fe fd24 	bl	80060a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007658:	f000 f978 	bl	800794c <vPortExitCritical>
}
 800765c:	bf00      	nop
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	20000ee0 	.word	0x20000ee0
 8007668:	20000eb0 	.word	0x20000eb0
 800766c:	20000ec4 	.word	0x20000ec4
 8007670:	20000ed8 	.word	0x20000ed8
 8007674:	20000edc 	.word	0x20000edc
 8007678:	20000f8c 	.word	0x20000f8c
 800767c:	20000eec 	.word	0x20000eec
 8007680:	080090a0 	.word	0x080090a0

08007684 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	3b04      	subs	r3, #4
 8007694:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800769c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	3b04      	subs	r3, #4
 80076a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	f023 0201 	bic.w	r2, r3, #1
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	3b04      	subs	r3, #4
 80076b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076b4:	4a0c      	ldr	r2, [pc, #48]	@ (80076e8 <pxPortInitialiseStack+0x64>)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	3b14      	subs	r3, #20
 80076be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	3b04      	subs	r3, #4
 80076ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f06f 0202 	mvn.w	r2, #2
 80076d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	3b20      	subs	r3, #32
 80076d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80076da:	68fb      	ldr	r3, [r7, #12]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3714      	adds	r7, #20
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr
 80076e8:	080076ed 	.word	0x080076ed

080076ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80076f2:	2300      	movs	r3, #0
 80076f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80076f6:	4b13      	ldr	r3, [pc, #76]	@ (8007744 <prvTaskExitError+0x58>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076fe:	d00b      	beq.n	8007718 <prvTaskExitError+0x2c>
	__asm volatile
 8007700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007704:	f383 8811 	msr	BASEPRI, r3
 8007708:	f3bf 8f6f 	isb	sy
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	60fb      	str	r3, [r7, #12]
}
 8007712:	bf00      	nop
 8007714:	bf00      	nop
 8007716:	e7fd      	b.n	8007714 <prvTaskExitError+0x28>
	__asm volatile
 8007718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800771c:	f383 8811 	msr	BASEPRI, r3
 8007720:	f3bf 8f6f 	isb	sy
 8007724:	f3bf 8f4f 	dsb	sy
 8007728:	60bb      	str	r3, [r7, #8]
}
 800772a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800772c:	bf00      	nop
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d0fc      	beq.n	800772e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007734:	bf00      	nop
 8007736:	bf00      	nop
 8007738:	3714      	adds	r7, #20
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop
 8007744:	20000024 	.word	0x20000024
	...

08007750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007750:	4b07      	ldr	r3, [pc, #28]	@ (8007770 <pxCurrentTCBConst2>)
 8007752:	6819      	ldr	r1, [r3, #0]
 8007754:	6808      	ldr	r0, [r1, #0]
 8007756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800775a:	f380 8809 	msr	PSP, r0
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	f04f 0000 	mov.w	r0, #0
 8007766:	f380 8811 	msr	BASEPRI, r0
 800776a:	4770      	bx	lr
 800776c:	f3af 8000 	nop.w

08007770 <pxCurrentTCBConst2>:
 8007770:	200009b0 	.word	0x200009b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007774:	bf00      	nop
 8007776:	bf00      	nop

08007778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007778:	4808      	ldr	r0, [pc, #32]	@ (800779c <prvPortStartFirstTask+0x24>)
 800777a:	6800      	ldr	r0, [r0, #0]
 800777c:	6800      	ldr	r0, [r0, #0]
 800777e:	f380 8808 	msr	MSP, r0
 8007782:	f04f 0000 	mov.w	r0, #0
 8007786:	f380 8814 	msr	CONTROL, r0
 800778a:	b662      	cpsie	i
 800778c:	b661      	cpsie	f
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	df00      	svc	0
 8007798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800779a:	bf00      	nop
 800779c:	e000ed08 	.word	0xe000ed08

080077a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b086      	sub	sp, #24
 80077a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80077a6:	4b47      	ldr	r3, [pc, #284]	@ (80078c4 <xPortStartScheduler+0x124>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a47      	ldr	r2, [pc, #284]	@ (80078c8 <xPortStartScheduler+0x128>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d10b      	bne.n	80077c8 <xPortStartScheduler+0x28>
	__asm volatile
 80077b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b4:	f383 8811 	msr	BASEPRI, r3
 80077b8:	f3bf 8f6f 	isb	sy
 80077bc:	f3bf 8f4f 	dsb	sy
 80077c0:	60fb      	str	r3, [r7, #12]
}
 80077c2:	bf00      	nop
 80077c4:	bf00      	nop
 80077c6:	e7fd      	b.n	80077c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80077c8:	4b3e      	ldr	r3, [pc, #248]	@ (80078c4 <xPortStartScheduler+0x124>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a3f      	ldr	r2, [pc, #252]	@ (80078cc <xPortStartScheduler+0x12c>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d10b      	bne.n	80077ea <xPortStartScheduler+0x4a>
	__asm volatile
 80077d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d6:	f383 8811 	msr	BASEPRI, r3
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	613b      	str	r3, [r7, #16]
}
 80077e4:	bf00      	nop
 80077e6:	bf00      	nop
 80077e8:	e7fd      	b.n	80077e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80077ea:	4b39      	ldr	r3, [pc, #228]	@ (80078d0 <xPortStartScheduler+0x130>)
 80077ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	22ff      	movs	r2, #255	@ 0xff
 80077fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	b2db      	uxtb	r3, r3
 8007802:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007804:	78fb      	ldrb	r3, [r7, #3]
 8007806:	b2db      	uxtb	r3, r3
 8007808:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800780c:	b2da      	uxtb	r2, r3
 800780e:	4b31      	ldr	r3, [pc, #196]	@ (80078d4 <xPortStartScheduler+0x134>)
 8007810:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007812:	4b31      	ldr	r3, [pc, #196]	@ (80078d8 <xPortStartScheduler+0x138>)
 8007814:	2207      	movs	r2, #7
 8007816:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007818:	e009      	b.n	800782e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800781a:	4b2f      	ldr	r3, [pc, #188]	@ (80078d8 <xPortStartScheduler+0x138>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3b01      	subs	r3, #1
 8007820:	4a2d      	ldr	r2, [pc, #180]	@ (80078d8 <xPortStartScheduler+0x138>)
 8007822:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007824:	78fb      	ldrb	r3, [r7, #3]
 8007826:	b2db      	uxtb	r3, r3
 8007828:	005b      	lsls	r3, r3, #1
 800782a:	b2db      	uxtb	r3, r3
 800782c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800782e:	78fb      	ldrb	r3, [r7, #3]
 8007830:	b2db      	uxtb	r3, r3
 8007832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007836:	2b80      	cmp	r3, #128	@ 0x80
 8007838:	d0ef      	beq.n	800781a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800783a:	4b27      	ldr	r3, [pc, #156]	@ (80078d8 <xPortStartScheduler+0x138>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f1c3 0307 	rsb	r3, r3, #7
 8007842:	2b04      	cmp	r3, #4
 8007844:	d00b      	beq.n	800785e <xPortStartScheduler+0xbe>
	__asm volatile
 8007846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800784a:	f383 8811 	msr	BASEPRI, r3
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	60bb      	str	r3, [r7, #8]
}
 8007858:	bf00      	nop
 800785a:	bf00      	nop
 800785c:	e7fd      	b.n	800785a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800785e:	4b1e      	ldr	r3, [pc, #120]	@ (80078d8 <xPortStartScheduler+0x138>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	021b      	lsls	r3, r3, #8
 8007864:	4a1c      	ldr	r2, [pc, #112]	@ (80078d8 <xPortStartScheduler+0x138>)
 8007866:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007868:	4b1b      	ldr	r3, [pc, #108]	@ (80078d8 <xPortStartScheduler+0x138>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007870:	4a19      	ldr	r2, [pc, #100]	@ (80078d8 <xPortStartScheduler+0x138>)
 8007872:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	b2da      	uxtb	r2, r3
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800787c:	4b17      	ldr	r3, [pc, #92]	@ (80078dc <xPortStartScheduler+0x13c>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a16      	ldr	r2, [pc, #88]	@ (80078dc <xPortStartScheduler+0x13c>)
 8007882:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007886:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007888:	4b14      	ldr	r3, [pc, #80]	@ (80078dc <xPortStartScheduler+0x13c>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a13      	ldr	r2, [pc, #76]	@ (80078dc <xPortStartScheduler+0x13c>)
 800788e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007892:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007894:	f000 f8da 	bl	8007a4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007898:	4b11      	ldr	r3, [pc, #68]	@ (80078e0 <xPortStartScheduler+0x140>)
 800789a:	2200      	movs	r2, #0
 800789c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800789e:	f000 f8f9 	bl	8007a94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80078a2:	4b10      	ldr	r3, [pc, #64]	@ (80078e4 <xPortStartScheduler+0x144>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a0f      	ldr	r2, [pc, #60]	@ (80078e4 <xPortStartScheduler+0x144>)
 80078a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80078ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80078ae:	f7ff ff63 	bl	8007778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80078b2:	f7ff f82d 	bl	8006910 <vTaskSwitchContext>
	prvTaskExitError();
 80078b6:	f7ff ff19 	bl	80076ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3718      	adds	r7, #24
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	e000ed00 	.word	0xe000ed00
 80078c8:	410fc271 	.word	0x410fc271
 80078cc:	410fc270 	.word	0x410fc270
 80078d0:	e000e400 	.word	0xe000e400
 80078d4:	20000fdc 	.word	0x20000fdc
 80078d8:	20000fe0 	.word	0x20000fe0
 80078dc:	e000ed20 	.word	0xe000ed20
 80078e0:	20000024 	.word	0x20000024
 80078e4:	e000ef34 	.word	0xe000ef34

080078e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
	__asm volatile
 80078ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f2:	f383 8811 	msr	BASEPRI, r3
 80078f6:	f3bf 8f6f 	isb	sy
 80078fa:	f3bf 8f4f 	dsb	sy
 80078fe:	607b      	str	r3, [r7, #4]
}
 8007900:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007902:	4b10      	ldr	r3, [pc, #64]	@ (8007944 <vPortEnterCritical+0x5c>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	3301      	adds	r3, #1
 8007908:	4a0e      	ldr	r2, [pc, #56]	@ (8007944 <vPortEnterCritical+0x5c>)
 800790a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800790c:	4b0d      	ldr	r3, [pc, #52]	@ (8007944 <vPortEnterCritical+0x5c>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d110      	bne.n	8007936 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007914:	4b0c      	ldr	r3, [pc, #48]	@ (8007948 <vPortEnterCritical+0x60>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	b2db      	uxtb	r3, r3
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00b      	beq.n	8007936 <vPortEnterCritical+0x4e>
	__asm volatile
 800791e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	603b      	str	r3, [r7, #0]
}
 8007930:	bf00      	nop
 8007932:	bf00      	nop
 8007934:	e7fd      	b.n	8007932 <vPortEnterCritical+0x4a>
	}
}
 8007936:	bf00      	nop
 8007938:	370c      	adds	r7, #12
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	20000024 	.word	0x20000024
 8007948:	e000ed04 	.word	0xe000ed04

0800794c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007952:	4b12      	ldr	r3, [pc, #72]	@ (800799c <vPortExitCritical+0x50>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10b      	bne.n	8007972 <vPortExitCritical+0x26>
	__asm volatile
 800795a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800795e:	f383 8811 	msr	BASEPRI, r3
 8007962:	f3bf 8f6f 	isb	sy
 8007966:	f3bf 8f4f 	dsb	sy
 800796a:	607b      	str	r3, [r7, #4]
}
 800796c:	bf00      	nop
 800796e:	bf00      	nop
 8007970:	e7fd      	b.n	800796e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007972:	4b0a      	ldr	r3, [pc, #40]	@ (800799c <vPortExitCritical+0x50>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	3b01      	subs	r3, #1
 8007978:	4a08      	ldr	r2, [pc, #32]	@ (800799c <vPortExitCritical+0x50>)
 800797a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800797c:	4b07      	ldr	r3, [pc, #28]	@ (800799c <vPortExitCritical+0x50>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d105      	bne.n	8007990 <vPortExitCritical+0x44>
 8007984:	2300      	movs	r3, #0
 8007986:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	f383 8811 	msr	BASEPRI, r3
}
 800798e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007990:	bf00      	nop
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr
 800799c:	20000024 	.word	0x20000024

080079a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80079a0:	f3ef 8009 	mrs	r0, PSP
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	4b15      	ldr	r3, [pc, #84]	@ (8007a00 <pxCurrentTCBConst>)
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	f01e 0f10 	tst.w	lr, #16
 80079b0:	bf08      	it	eq
 80079b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80079b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ba:	6010      	str	r0, [r2, #0]
 80079bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80079c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80079c4:	f380 8811 	msr	BASEPRI, r0
 80079c8:	f3bf 8f4f 	dsb	sy
 80079cc:	f3bf 8f6f 	isb	sy
 80079d0:	f7fe ff9e 	bl	8006910 <vTaskSwitchContext>
 80079d4:	f04f 0000 	mov.w	r0, #0
 80079d8:	f380 8811 	msr	BASEPRI, r0
 80079dc:	bc09      	pop	{r0, r3}
 80079de:	6819      	ldr	r1, [r3, #0]
 80079e0:	6808      	ldr	r0, [r1, #0]
 80079e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e6:	f01e 0f10 	tst.w	lr, #16
 80079ea:	bf08      	it	eq
 80079ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80079f0:	f380 8809 	msr	PSP, r0
 80079f4:	f3bf 8f6f 	isb	sy
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	f3af 8000 	nop.w

08007a00 <pxCurrentTCBConst>:
 8007a00:	200009b0 	.word	0x200009b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a04:	bf00      	nop
 8007a06:	bf00      	nop

08007a08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a12:	f383 8811 	msr	BASEPRI, r3
 8007a16:	f3bf 8f6f 	isb	sy
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	607b      	str	r3, [r7, #4]
}
 8007a20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a22:	f7fe febb 	bl	800679c <xTaskIncrementTick>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d003      	beq.n	8007a34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a2c:	4b06      	ldr	r3, [pc, #24]	@ (8007a48 <xPortSysTickHandler+0x40>)
 8007a2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a32:	601a      	str	r2, [r3, #0]
 8007a34:	2300      	movs	r3, #0
 8007a36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	f383 8811 	msr	BASEPRI, r3
}
 8007a3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a40:	bf00      	nop
 8007a42:	3708      	adds	r7, #8
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	e000ed04 	.word	0xe000ed04

08007a4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a50:	4b0b      	ldr	r3, [pc, #44]	@ (8007a80 <vPortSetupTimerInterrupt+0x34>)
 8007a52:	2200      	movs	r2, #0
 8007a54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a56:	4b0b      	ldr	r3, [pc, #44]	@ (8007a84 <vPortSetupTimerInterrupt+0x38>)
 8007a58:	2200      	movs	r2, #0
 8007a5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a88 <vPortSetupTimerInterrupt+0x3c>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a0a      	ldr	r2, [pc, #40]	@ (8007a8c <vPortSetupTimerInterrupt+0x40>)
 8007a62:	fba2 2303 	umull	r2, r3, r2, r3
 8007a66:	099b      	lsrs	r3, r3, #6
 8007a68:	4a09      	ldr	r2, [pc, #36]	@ (8007a90 <vPortSetupTimerInterrupt+0x44>)
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a6e:	4b04      	ldr	r3, [pc, #16]	@ (8007a80 <vPortSetupTimerInterrupt+0x34>)
 8007a70:	2207      	movs	r2, #7
 8007a72:	601a      	str	r2, [r3, #0]
}
 8007a74:	bf00      	nop
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	e000e010 	.word	0xe000e010
 8007a84:	e000e018 	.word	0xe000e018
 8007a88:	20000008 	.word	0x20000008
 8007a8c:	10624dd3 	.word	0x10624dd3
 8007a90:	e000e014 	.word	0xe000e014

08007a94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007a94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007aa4 <vPortEnableVFP+0x10>
 8007a98:	6801      	ldr	r1, [r0, #0]
 8007a9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007a9e:	6001      	str	r1, [r0, #0]
 8007aa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007aa2:	bf00      	nop
 8007aa4:	e000ed88 	.word	0xe000ed88

08007aa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007aae:	f3ef 8305 	mrs	r3, IPSR
 8007ab2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2b0f      	cmp	r3, #15
 8007ab8:	d915      	bls.n	8007ae6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007aba:	4a18      	ldr	r2, [pc, #96]	@ (8007b1c <vPortValidateInterruptPriority+0x74>)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	4413      	add	r3, r2
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ac4:	4b16      	ldr	r3, [pc, #88]	@ (8007b20 <vPortValidateInterruptPriority+0x78>)
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	7afa      	ldrb	r2, [r7, #11]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d20b      	bcs.n	8007ae6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad2:	f383 8811 	msr	BASEPRI, r3
 8007ad6:	f3bf 8f6f 	isb	sy
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	607b      	str	r3, [r7, #4]
}
 8007ae0:	bf00      	nop
 8007ae2:	bf00      	nop
 8007ae4:	e7fd      	b.n	8007ae2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8007b24 <vPortValidateInterruptPriority+0x7c>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007aee:	4b0e      	ldr	r3, [pc, #56]	@ (8007b28 <vPortValidateInterruptPriority+0x80>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d90b      	bls.n	8007b0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007afa:	f383 8811 	msr	BASEPRI, r3
 8007afe:	f3bf 8f6f 	isb	sy
 8007b02:	f3bf 8f4f 	dsb	sy
 8007b06:	603b      	str	r3, [r7, #0]
}
 8007b08:	bf00      	nop
 8007b0a:	bf00      	nop
 8007b0c:	e7fd      	b.n	8007b0a <vPortValidateInterruptPriority+0x62>
	}
 8007b0e:	bf00      	nop
 8007b10:	3714      	adds	r7, #20
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	e000e3f0 	.word	0xe000e3f0
 8007b20:	20000fdc 	.word	0x20000fdc
 8007b24:	e000ed0c 	.word	0xe000ed0c
 8007b28:	20000fe0 	.word	0x20000fe0

08007b2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b08a      	sub	sp, #40	@ 0x28
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b34:	2300      	movs	r3, #0
 8007b36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b38:	f7fe fd74 	bl	8006624 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b3c:	4b5c      	ldr	r3, [pc, #368]	@ (8007cb0 <pvPortMalloc+0x184>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d101      	bne.n	8007b48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b44:	f000 f924 	bl	8007d90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b48:	4b5a      	ldr	r3, [pc, #360]	@ (8007cb4 <pvPortMalloc+0x188>)
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4013      	ands	r3, r2
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f040 8095 	bne.w	8007c80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d01e      	beq.n	8007b9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007b5c:	2208      	movs	r2, #8
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4413      	add	r3, r2
 8007b62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f003 0307 	and.w	r3, r3, #7
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d015      	beq.n	8007b9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f023 0307 	bic.w	r3, r3, #7
 8007b74:	3308      	adds	r3, #8
 8007b76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f003 0307 	and.w	r3, r3, #7
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00b      	beq.n	8007b9a <pvPortMalloc+0x6e>
	__asm volatile
 8007b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b86:	f383 8811 	msr	BASEPRI, r3
 8007b8a:	f3bf 8f6f 	isb	sy
 8007b8e:	f3bf 8f4f 	dsb	sy
 8007b92:	617b      	str	r3, [r7, #20]
}
 8007b94:	bf00      	nop
 8007b96:	bf00      	nop
 8007b98:	e7fd      	b.n	8007b96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d06f      	beq.n	8007c80 <pvPortMalloc+0x154>
 8007ba0:	4b45      	ldr	r3, [pc, #276]	@ (8007cb8 <pvPortMalloc+0x18c>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d86a      	bhi.n	8007c80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007baa:	4b44      	ldr	r3, [pc, #272]	@ (8007cbc <pvPortMalloc+0x190>)
 8007bac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007bae:	4b43      	ldr	r3, [pc, #268]	@ (8007cbc <pvPortMalloc+0x190>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bb4:	e004      	b.n	8007bc0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d903      	bls.n	8007bd2 <pvPortMalloc+0xa6>
 8007bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1f1      	bne.n	8007bb6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007bd2:	4b37      	ldr	r3, [pc, #220]	@ (8007cb0 <pvPortMalloc+0x184>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d051      	beq.n	8007c80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007bdc:	6a3b      	ldr	r3, [r7, #32]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2208      	movs	r2, #8
 8007be2:	4413      	add	r3, r2
 8007be4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	6a3b      	ldr	r3, [r7, #32]
 8007bec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf0:	685a      	ldr	r2, [r3, #4]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	1ad2      	subs	r2, r2, r3
 8007bf6:	2308      	movs	r3, #8
 8007bf8:	005b      	lsls	r3, r3, #1
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d920      	bls.n	8007c40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4413      	add	r3, r2
 8007c04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	f003 0307 	and.w	r3, r3, #7
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00b      	beq.n	8007c28 <pvPortMalloc+0xfc>
	__asm volatile
 8007c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c14:	f383 8811 	msr	BASEPRI, r3
 8007c18:	f3bf 8f6f 	isb	sy
 8007c1c:	f3bf 8f4f 	dsb	sy
 8007c20:	613b      	str	r3, [r7, #16]
}
 8007c22:	bf00      	nop
 8007c24:	bf00      	nop
 8007c26:	e7fd      	b.n	8007c24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2a:	685a      	ldr	r2, [r3, #4]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	1ad2      	subs	r2, r2, r3
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c3a:	69b8      	ldr	r0, [r7, #24]
 8007c3c:	f000 f90a 	bl	8007e54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c40:	4b1d      	ldr	r3, [pc, #116]	@ (8007cb8 <pvPortMalloc+0x18c>)
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	4a1b      	ldr	r2, [pc, #108]	@ (8007cb8 <pvPortMalloc+0x18c>)
 8007c4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8007cb8 <pvPortMalloc+0x18c>)
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	4b1b      	ldr	r3, [pc, #108]	@ (8007cc0 <pvPortMalloc+0x194>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d203      	bcs.n	8007c62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c5a:	4b17      	ldr	r3, [pc, #92]	@ (8007cb8 <pvPortMalloc+0x18c>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a18      	ldr	r2, [pc, #96]	@ (8007cc0 <pvPortMalloc+0x194>)
 8007c60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c64:	685a      	ldr	r2, [r3, #4]
 8007c66:	4b13      	ldr	r3, [pc, #76]	@ (8007cb4 <pvPortMalloc+0x188>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	431a      	orrs	r2, r3
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c72:	2200      	movs	r2, #0
 8007c74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007c76:	4b13      	ldr	r3, [pc, #76]	@ (8007cc4 <pvPortMalloc+0x198>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	4a11      	ldr	r2, [pc, #68]	@ (8007cc4 <pvPortMalloc+0x198>)
 8007c7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c80:	f7fe fcde 	bl	8006640 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	f003 0307 	and.w	r3, r3, #7
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00b      	beq.n	8007ca6 <pvPortMalloc+0x17a>
	__asm volatile
 8007c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c92:	f383 8811 	msr	BASEPRI, r3
 8007c96:	f3bf 8f6f 	isb	sy
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	60fb      	str	r3, [r7, #12]
}
 8007ca0:	bf00      	nop
 8007ca2:	bf00      	nop
 8007ca4:	e7fd      	b.n	8007ca2 <pvPortMalloc+0x176>
	return pvReturn;
 8007ca6:	69fb      	ldr	r3, [r7, #28]
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3728      	adds	r7, #40	@ 0x28
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	20001bec 	.word	0x20001bec
 8007cb4:	20001c00 	.word	0x20001c00
 8007cb8:	20001bf0 	.word	0x20001bf0
 8007cbc:	20001be4 	.word	0x20001be4
 8007cc0:	20001bf4 	.word	0x20001bf4
 8007cc4:	20001bf8 	.word	0x20001bf8

08007cc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d04f      	beq.n	8007d7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007cda:	2308      	movs	r3, #8
 8007cdc:	425b      	negs	r3, r3
 8007cde:	697a      	ldr	r2, [r7, #20]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	685a      	ldr	r2, [r3, #4]
 8007cec:	4b25      	ldr	r3, [pc, #148]	@ (8007d84 <vPortFree+0xbc>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10b      	bne.n	8007d0e <vPortFree+0x46>
	__asm volatile
 8007cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cfa:	f383 8811 	msr	BASEPRI, r3
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	f3bf 8f4f 	dsb	sy
 8007d06:	60fb      	str	r3, [r7, #12]
}
 8007d08:	bf00      	nop
 8007d0a:	bf00      	nop
 8007d0c:	e7fd      	b.n	8007d0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00b      	beq.n	8007d2e <vPortFree+0x66>
	__asm volatile
 8007d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d1a:	f383 8811 	msr	BASEPRI, r3
 8007d1e:	f3bf 8f6f 	isb	sy
 8007d22:	f3bf 8f4f 	dsb	sy
 8007d26:	60bb      	str	r3, [r7, #8]
}
 8007d28:	bf00      	nop
 8007d2a:	bf00      	nop
 8007d2c:	e7fd      	b.n	8007d2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	685a      	ldr	r2, [r3, #4]
 8007d32:	4b14      	ldr	r3, [pc, #80]	@ (8007d84 <vPortFree+0xbc>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4013      	ands	r3, r2
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d01e      	beq.n	8007d7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d11a      	bne.n	8007d7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	685a      	ldr	r2, [r3, #4]
 8007d48:	4b0e      	ldr	r3, [pc, #56]	@ (8007d84 <vPortFree+0xbc>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	43db      	mvns	r3, r3
 8007d4e:	401a      	ands	r2, r3
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d54:	f7fe fc66 	bl	8006624 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8007d88 <vPortFree+0xc0>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4413      	add	r3, r2
 8007d62:	4a09      	ldr	r2, [pc, #36]	@ (8007d88 <vPortFree+0xc0>)
 8007d64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d66:	6938      	ldr	r0, [r7, #16]
 8007d68:	f000 f874 	bl	8007e54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007d6c:	4b07      	ldr	r3, [pc, #28]	@ (8007d8c <vPortFree+0xc4>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	3301      	adds	r3, #1
 8007d72:	4a06      	ldr	r2, [pc, #24]	@ (8007d8c <vPortFree+0xc4>)
 8007d74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007d76:	f7fe fc63 	bl	8006640 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d7a:	bf00      	nop
 8007d7c:	3718      	adds	r7, #24
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	20001c00 	.word	0x20001c00
 8007d88:	20001bf0 	.word	0x20001bf0
 8007d8c:	20001bfc 	.word	0x20001bfc

08007d90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d90:	b480      	push	{r7}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d96:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007d9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d9c:	4b27      	ldr	r3, [pc, #156]	@ (8007e3c <prvHeapInit+0xac>)
 8007d9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f003 0307 	and.w	r3, r3, #7
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00c      	beq.n	8007dc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	3307      	adds	r3, #7
 8007dae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f023 0307 	bic.w	r3, r3, #7
 8007db6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	4a1f      	ldr	r2, [pc, #124]	@ (8007e3c <prvHeapInit+0xac>)
 8007dc0:	4413      	add	r3, r2
 8007dc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8007e40 <prvHeapInit+0xb0>)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007dce:	4b1c      	ldr	r3, [pc, #112]	@ (8007e40 <prvHeapInit+0xb0>)
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	68ba      	ldr	r2, [r7, #8]
 8007dd8:	4413      	add	r3, r2
 8007dda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ddc:	2208      	movs	r2, #8
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	1a9b      	subs	r3, r3, r2
 8007de2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f023 0307 	bic.w	r3, r3, #7
 8007dea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	4a15      	ldr	r2, [pc, #84]	@ (8007e44 <prvHeapInit+0xb4>)
 8007df0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007df2:	4b14      	ldr	r3, [pc, #80]	@ (8007e44 <prvHeapInit+0xb4>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2200      	movs	r2, #0
 8007df8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007dfa:	4b12      	ldr	r3, [pc, #72]	@ (8007e44 <prvHeapInit+0xb4>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	1ad2      	subs	r2, r2, r3
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e10:	4b0c      	ldr	r3, [pc, #48]	@ (8007e44 <prvHeapInit+0xb4>)
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8007e48 <prvHeapInit+0xb8>)
 8007e1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	4a09      	ldr	r2, [pc, #36]	@ (8007e4c <prvHeapInit+0xbc>)
 8007e26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e28:	4b09      	ldr	r3, [pc, #36]	@ (8007e50 <prvHeapInit+0xc0>)
 8007e2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007e2e:	601a      	str	r2, [r3, #0]
}
 8007e30:	bf00      	nop
 8007e32:	3714      	adds	r7, #20
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr
 8007e3c:	20000fe4 	.word	0x20000fe4
 8007e40:	20001be4 	.word	0x20001be4
 8007e44:	20001bec 	.word	0x20001bec
 8007e48:	20001bf4 	.word	0x20001bf4
 8007e4c:	20001bf0 	.word	0x20001bf0
 8007e50:	20001c00 	.word	0x20001c00

08007e54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e5c:	4b28      	ldr	r3, [pc, #160]	@ (8007f00 <prvInsertBlockIntoFreeList+0xac>)
 8007e5e:	60fb      	str	r3, [r7, #12]
 8007e60:	e002      	b.n	8007e68 <prvInsertBlockIntoFreeList+0x14>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	60fb      	str	r3, [r7, #12]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d8f7      	bhi.n	8007e62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d108      	bne.n	8007e96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	685a      	ldr	r2, [r3, #4]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	441a      	add	r2, r3
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	441a      	add	r2, r3
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d118      	bne.n	8007edc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	4b15      	ldr	r3, [pc, #84]	@ (8007f04 <prvInsertBlockIntoFreeList+0xb0>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d00d      	beq.n	8007ed2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	685a      	ldr	r2, [r3, #4]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	441a      	add	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	601a      	str	r2, [r3, #0]
 8007ed0:	e008      	b.n	8007ee4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8007f04 <prvInsertBlockIntoFreeList+0xb0>)
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	601a      	str	r2, [r3, #0]
 8007eda:	e003      	b.n	8007ee4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d002      	beq.n	8007ef2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ef2:	bf00      	nop
 8007ef4:	3714      	adds	r7, #20
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	20001be4 	.word	0x20001be4
 8007f04:	20001bec 	.word	0x20001bec

08007f08 <std>:
 8007f08:	2300      	movs	r3, #0
 8007f0a:	b510      	push	{r4, lr}
 8007f0c:	4604      	mov	r4, r0
 8007f0e:	e9c0 3300 	strd	r3, r3, [r0]
 8007f12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f16:	6083      	str	r3, [r0, #8]
 8007f18:	8181      	strh	r1, [r0, #12]
 8007f1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007f1c:	81c2      	strh	r2, [r0, #14]
 8007f1e:	6183      	str	r3, [r0, #24]
 8007f20:	4619      	mov	r1, r3
 8007f22:	2208      	movs	r2, #8
 8007f24:	305c      	adds	r0, #92	@ 0x5c
 8007f26:	f000 f9f9 	bl	800831c <memset>
 8007f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f60 <std+0x58>)
 8007f2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007f64 <std+0x5c>)
 8007f30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007f32:	4b0d      	ldr	r3, [pc, #52]	@ (8007f68 <std+0x60>)
 8007f34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007f36:	4b0d      	ldr	r3, [pc, #52]	@ (8007f6c <std+0x64>)
 8007f38:	6323      	str	r3, [r4, #48]	@ 0x30
 8007f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f70 <std+0x68>)
 8007f3c:	6224      	str	r4, [r4, #32]
 8007f3e:	429c      	cmp	r4, r3
 8007f40:	d006      	beq.n	8007f50 <std+0x48>
 8007f42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007f46:	4294      	cmp	r4, r2
 8007f48:	d002      	beq.n	8007f50 <std+0x48>
 8007f4a:	33d0      	adds	r3, #208	@ 0xd0
 8007f4c:	429c      	cmp	r4, r3
 8007f4e:	d105      	bne.n	8007f5c <std+0x54>
 8007f50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f58:	f000 bab6 	b.w	80084c8 <__retarget_lock_init_recursive>
 8007f5c:	bd10      	pop	{r4, pc}
 8007f5e:	bf00      	nop
 8007f60:	0800816d 	.word	0x0800816d
 8007f64:	0800818f 	.word	0x0800818f
 8007f68:	080081c7 	.word	0x080081c7
 8007f6c:	080081eb 	.word	0x080081eb
 8007f70:	20001c04 	.word	0x20001c04

08007f74 <stdio_exit_handler>:
 8007f74:	4a02      	ldr	r2, [pc, #8]	@ (8007f80 <stdio_exit_handler+0xc>)
 8007f76:	4903      	ldr	r1, [pc, #12]	@ (8007f84 <stdio_exit_handler+0x10>)
 8007f78:	4803      	ldr	r0, [pc, #12]	@ (8007f88 <stdio_exit_handler+0x14>)
 8007f7a:	f000 b869 	b.w	8008050 <_fwalk_sglue>
 8007f7e:	bf00      	nop
 8007f80:	20000028 	.word	0x20000028
 8007f84:	08008d81 	.word	0x08008d81
 8007f88:	20000038 	.word	0x20000038

08007f8c <cleanup_stdio>:
 8007f8c:	6841      	ldr	r1, [r0, #4]
 8007f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8007fc0 <cleanup_stdio+0x34>)
 8007f90:	4299      	cmp	r1, r3
 8007f92:	b510      	push	{r4, lr}
 8007f94:	4604      	mov	r4, r0
 8007f96:	d001      	beq.n	8007f9c <cleanup_stdio+0x10>
 8007f98:	f000 fef2 	bl	8008d80 <_fflush_r>
 8007f9c:	68a1      	ldr	r1, [r4, #8]
 8007f9e:	4b09      	ldr	r3, [pc, #36]	@ (8007fc4 <cleanup_stdio+0x38>)
 8007fa0:	4299      	cmp	r1, r3
 8007fa2:	d002      	beq.n	8007faa <cleanup_stdio+0x1e>
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	f000 feeb 	bl	8008d80 <_fflush_r>
 8007faa:	68e1      	ldr	r1, [r4, #12]
 8007fac:	4b06      	ldr	r3, [pc, #24]	@ (8007fc8 <cleanup_stdio+0x3c>)
 8007fae:	4299      	cmp	r1, r3
 8007fb0:	d004      	beq.n	8007fbc <cleanup_stdio+0x30>
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fb8:	f000 bee2 	b.w	8008d80 <_fflush_r>
 8007fbc:	bd10      	pop	{r4, pc}
 8007fbe:	bf00      	nop
 8007fc0:	20001c04 	.word	0x20001c04
 8007fc4:	20001c6c 	.word	0x20001c6c
 8007fc8:	20001cd4 	.word	0x20001cd4

08007fcc <global_stdio_init.part.0>:
 8007fcc:	b510      	push	{r4, lr}
 8007fce:	4b0b      	ldr	r3, [pc, #44]	@ (8007ffc <global_stdio_init.part.0+0x30>)
 8007fd0:	4c0b      	ldr	r4, [pc, #44]	@ (8008000 <global_stdio_init.part.0+0x34>)
 8007fd2:	4a0c      	ldr	r2, [pc, #48]	@ (8008004 <global_stdio_init.part.0+0x38>)
 8007fd4:	601a      	str	r2, [r3, #0]
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	2200      	movs	r2, #0
 8007fda:	2104      	movs	r1, #4
 8007fdc:	f7ff ff94 	bl	8007f08 <std>
 8007fe0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	2109      	movs	r1, #9
 8007fe8:	f7ff ff8e 	bl	8007f08 <std>
 8007fec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007ff0:	2202      	movs	r2, #2
 8007ff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ff6:	2112      	movs	r1, #18
 8007ff8:	f7ff bf86 	b.w	8007f08 <std>
 8007ffc:	20001d3c 	.word	0x20001d3c
 8008000:	20001c04 	.word	0x20001c04
 8008004:	08007f75 	.word	0x08007f75

08008008 <__sfp_lock_acquire>:
 8008008:	4801      	ldr	r0, [pc, #4]	@ (8008010 <__sfp_lock_acquire+0x8>)
 800800a:	f000 ba5e 	b.w	80084ca <__retarget_lock_acquire_recursive>
 800800e:	bf00      	nop
 8008010:	20001d45 	.word	0x20001d45

08008014 <__sfp_lock_release>:
 8008014:	4801      	ldr	r0, [pc, #4]	@ (800801c <__sfp_lock_release+0x8>)
 8008016:	f000 ba59 	b.w	80084cc <__retarget_lock_release_recursive>
 800801a:	bf00      	nop
 800801c:	20001d45 	.word	0x20001d45

08008020 <__sinit>:
 8008020:	b510      	push	{r4, lr}
 8008022:	4604      	mov	r4, r0
 8008024:	f7ff fff0 	bl	8008008 <__sfp_lock_acquire>
 8008028:	6a23      	ldr	r3, [r4, #32]
 800802a:	b11b      	cbz	r3, 8008034 <__sinit+0x14>
 800802c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008030:	f7ff bff0 	b.w	8008014 <__sfp_lock_release>
 8008034:	4b04      	ldr	r3, [pc, #16]	@ (8008048 <__sinit+0x28>)
 8008036:	6223      	str	r3, [r4, #32]
 8008038:	4b04      	ldr	r3, [pc, #16]	@ (800804c <__sinit+0x2c>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1f5      	bne.n	800802c <__sinit+0xc>
 8008040:	f7ff ffc4 	bl	8007fcc <global_stdio_init.part.0>
 8008044:	e7f2      	b.n	800802c <__sinit+0xc>
 8008046:	bf00      	nop
 8008048:	08007f8d 	.word	0x08007f8d
 800804c:	20001d3c 	.word	0x20001d3c

08008050 <_fwalk_sglue>:
 8008050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008054:	4607      	mov	r7, r0
 8008056:	4688      	mov	r8, r1
 8008058:	4614      	mov	r4, r2
 800805a:	2600      	movs	r6, #0
 800805c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008060:	f1b9 0901 	subs.w	r9, r9, #1
 8008064:	d505      	bpl.n	8008072 <_fwalk_sglue+0x22>
 8008066:	6824      	ldr	r4, [r4, #0]
 8008068:	2c00      	cmp	r4, #0
 800806a:	d1f7      	bne.n	800805c <_fwalk_sglue+0xc>
 800806c:	4630      	mov	r0, r6
 800806e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008072:	89ab      	ldrh	r3, [r5, #12]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d907      	bls.n	8008088 <_fwalk_sglue+0x38>
 8008078:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800807c:	3301      	adds	r3, #1
 800807e:	d003      	beq.n	8008088 <_fwalk_sglue+0x38>
 8008080:	4629      	mov	r1, r5
 8008082:	4638      	mov	r0, r7
 8008084:	47c0      	blx	r8
 8008086:	4306      	orrs	r6, r0
 8008088:	3568      	adds	r5, #104	@ 0x68
 800808a:	e7e9      	b.n	8008060 <_fwalk_sglue+0x10>

0800808c <iprintf>:
 800808c:	b40f      	push	{r0, r1, r2, r3}
 800808e:	b507      	push	{r0, r1, r2, lr}
 8008090:	4906      	ldr	r1, [pc, #24]	@ (80080ac <iprintf+0x20>)
 8008092:	ab04      	add	r3, sp, #16
 8008094:	6808      	ldr	r0, [r1, #0]
 8008096:	f853 2b04 	ldr.w	r2, [r3], #4
 800809a:	6881      	ldr	r1, [r0, #8]
 800809c:	9301      	str	r3, [sp, #4]
 800809e:	f000 fb47 	bl	8008730 <_vfiprintf_r>
 80080a2:	b003      	add	sp, #12
 80080a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80080a8:	b004      	add	sp, #16
 80080aa:	4770      	bx	lr
 80080ac:	20000034 	.word	0x20000034

080080b0 <_puts_r>:
 80080b0:	6a03      	ldr	r3, [r0, #32]
 80080b2:	b570      	push	{r4, r5, r6, lr}
 80080b4:	6884      	ldr	r4, [r0, #8]
 80080b6:	4605      	mov	r5, r0
 80080b8:	460e      	mov	r6, r1
 80080ba:	b90b      	cbnz	r3, 80080c0 <_puts_r+0x10>
 80080bc:	f7ff ffb0 	bl	8008020 <__sinit>
 80080c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080c2:	07db      	lsls	r3, r3, #31
 80080c4:	d405      	bmi.n	80080d2 <_puts_r+0x22>
 80080c6:	89a3      	ldrh	r3, [r4, #12]
 80080c8:	0598      	lsls	r0, r3, #22
 80080ca:	d402      	bmi.n	80080d2 <_puts_r+0x22>
 80080cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080ce:	f000 f9fc 	bl	80084ca <__retarget_lock_acquire_recursive>
 80080d2:	89a3      	ldrh	r3, [r4, #12]
 80080d4:	0719      	lsls	r1, r3, #28
 80080d6:	d502      	bpl.n	80080de <_puts_r+0x2e>
 80080d8:	6923      	ldr	r3, [r4, #16]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d135      	bne.n	800814a <_puts_r+0x9a>
 80080de:	4621      	mov	r1, r4
 80080e0:	4628      	mov	r0, r5
 80080e2:	f000 f8c5 	bl	8008270 <__swsetup_r>
 80080e6:	b380      	cbz	r0, 800814a <_puts_r+0x9a>
 80080e8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80080ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080ee:	07da      	lsls	r2, r3, #31
 80080f0:	d405      	bmi.n	80080fe <_puts_r+0x4e>
 80080f2:	89a3      	ldrh	r3, [r4, #12]
 80080f4:	059b      	lsls	r3, r3, #22
 80080f6:	d402      	bmi.n	80080fe <_puts_r+0x4e>
 80080f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080fa:	f000 f9e7 	bl	80084cc <__retarget_lock_release_recursive>
 80080fe:	4628      	mov	r0, r5
 8008100:	bd70      	pop	{r4, r5, r6, pc}
 8008102:	2b00      	cmp	r3, #0
 8008104:	da04      	bge.n	8008110 <_puts_r+0x60>
 8008106:	69a2      	ldr	r2, [r4, #24]
 8008108:	429a      	cmp	r2, r3
 800810a:	dc17      	bgt.n	800813c <_puts_r+0x8c>
 800810c:	290a      	cmp	r1, #10
 800810e:	d015      	beq.n	800813c <_puts_r+0x8c>
 8008110:	6823      	ldr	r3, [r4, #0]
 8008112:	1c5a      	adds	r2, r3, #1
 8008114:	6022      	str	r2, [r4, #0]
 8008116:	7019      	strb	r1, [r3, #0]
 8008118:	68a3      	ldr	r3, [r4, #8]
 800811a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800811e:	3b01      	subs	r3, #1
 8008120:	60a3      	str	r3, [r4, #8]
 8008122:	2900      	cmp	r1, #0
 8008124:	d1ed      	bne.n	8008102 <_puts_r+0x52>
 8008126:	2b00      	cmp	r3, #0
 8008128:	da11      	bge.n	800814e <_puts_r+0x9e>
 800812a:	4622      	mov	r2, r4
 800812c:	210a      	movs	r1, #10
 800812e:	4628      	mov	r0, r5
 8008130:	f000 f85f 	bl	80081f2 <__swbuf_r>
 8008134:	3001      	adds	r0, #1
 8008136:	d0d7      	beq.n	80080e8 <_puts_r+0x38>
 8008138:	250a      	movs	r5, #10
 800813a:	e7d7      	b.n	80080ec <_puts_r+0x3c>
 800813c:	4622      	mov	r2, r4
 800813e:	4628      	mov	r0, r5
 8008140:	f000 f857 	bl	80081f2 <__swbuf_r>
 8008144:	3001      	adds	r0, #1
 8008146:	d1e7      	bne.n	8008118 <_puts_r+0x68>
 8008148:	e7ce      	b.n	80080e8 <_puts_r+0x38>
 800814a:	3e01      	subs	r6, #1
 800814c:	e7e4      	b.n	8008118 <_puts_r+0x68>
 800814e:	6823      	ldr	r3, [r4, #0]
 8008150:	1c5a      	adds	r2, r3, #1
 8008152:	6022      	str	r2, [r4, #0]
 8008154:	220a      	movs	r2, #10
 8008156:	701a      	strb	r2, [r3, #0]
 8008158:	e7ee      	b.n	8008138 <_puts_r+0x88>
	...

0800815c <puts>:
 800815c:	4b02      	ldr	r3, [pc, #8]	@ (8008168 <puts+0xc>)
 800815e:	4601      	mov	r1, r0
 8008160:	6818      	ldr	r0, [r3, #0]
 8008162:	f7ff bfa5 	b.w	80080b0 <_puts_r>
 8008166:	bf00      	nop
 8008168:	20000034 	.word	0x20000034

0800816c <__sread>:
 800816c:	b510      	push	{r4, lr}
 800816e:	460c      	mov	r4, r1
 8008170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008174:	f000 f95a 	bl	800842c <_read_r>
 8008178:	2800      	cmp	r0, #0
 800817a:	bfab      	itete	ge
 800817c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800817e:	89a3      	ldrhlt	r3, [r4, #12]
 8008180:	181b      	addge	r3, r3, r0
 8008182:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008186:	bfac      	ite	ge
 8008188:	6563      	strge	r3, [r4, #84]	@ 0x54
 800818a:	81a3      	strhlt	r3, [r4, #12]
 800818c:	bd10      	pop	{r4, pc}

0800818e <__swrite>:
 800818e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008192:	461f      	mov	r7, r3
 8008194:	898b      	ldrh	r3, [r1, #12]
 8008196:	05db      	lsls	r3, r3, #23
 8008198:	4605      	mov	r5, r0
 800819a:	460c      	mov	r4, r1
 800819c:	4616      	mov	r6, r2
 800819e:	d505      	bpl.n	80081ac <__swrite+0x1e>
 80081a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081a4:	2302      	movs	r3, #2
 80081a6:	2200      	movs	r2, #0
 80081a8:	f000 f92e 	bl	8008408 <_lseek_r>
 80081ac:	89a3      	ldrh	r3, [r4, #12]
 80081ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80081b6:	81a3      	strh	r3, [r4, #12]
 80081b8:	4632      	mov	r2, r6
 80081ba:	463b      	mov	r3, r7
 80081bc:	4628      	mov	r0, r5
 80081be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081c2:	f000 b945 	b.w	8008450 <_write_r>

080081c6 <__sseek>:
 80081c6:	b510      	push	{r4, lr}
 80081c8:	460c      	mov	r4, r1
 80081ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ce:	f000 f91b 	bl	8008408 <_lseek_r>
 80081d2:	1c43      	adds	r3, r0, #1
 80081d4:	89a3      	ldrh	r3, [r4, #12]
 80081d6:	bf15      	itete	ne
 80081d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80081da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80081de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80081e2:	81a3      	strheq	r3, [r4, #12]
 80081e4:	bf18      	it	ne
 80081e6:	81a3      	strhne	r3, [r4, #12]
 80081e8:	bd10      	pop	{r4, pc}

080081ea <__sclose>:
 80081ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ee:	f000 b89d 	b.w	800832c <_close_r>

080081f2 <__swbuf_r>:
 80081f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f4:	460e      	mov	r6, r1
 80081f6:	4614      	mov	r4, r2
 80081f8:	4605      	mov	r5, r0
 80081fa:	b118      	cbz	r0, 8008204 <__swbuf_r+0x12>
 80081fc:	6a03      	ldr	r3, [r0, #32]
 80081fe:	b90b      	cbnz	r3, 8008204 <__swbuf_r+0x12>
 8008200:	f7ff ff0e 	bl	8008020 <__sinit>
 8008204:	69a3      	ldr	r3, [r4, #24]
 8008206:	60a3      	str	r3, [r4, #8]
 8008208:	89a3      	ldrh	r3, [r4, #12]
 800820a:	071a      	lsls	r2, r3, #28
 800820c:	d501      	bpl.n	8008212 <__swbuf_r+0x20>
 800820e:	6923      	ldr	r3, [r4, #16]
 8008210:	b943      	cbnz	r3, 8008224 <__swbuf_r+0x32>
 8008212:	4621      	mov	r1, r4
 8008214:	4628      	mov	r0, r5
 8008216:	f000 f82b 	bl	8008270 <__swsetup_r>
 800821a:	b118      	cbz	r0, 8008224 <__swbuf_r+0x32>
 800821c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008220:	4638      	mov	r0, r7
 8008222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008224:	6823      	ldr	r3, [r4, #0]
 8008226:	6922      	ldr	r2, [r4, #16]
 8008228:	1a98      	subs	r0, r3, r2
 800822a:	6963      	ldr	r3, [r4, #20]
 800822c:	b2f6      	uxtb	r6, r6
 800822e:	4283      	cmp	r3, r0
 8008230:	4637      	mov	r7, r6
 8008232:	dc05      	bgt.n	8008240 <__swbuf_r+0x4e>
 8008234:	4621      	mov	r1, r4
 8008236:	4628      	mov	r0, r5
 8008238:	f000 fda2 	bl	8008d80 <_fflush_r>
 800823c:	2800      	cmp	r0, #0
 800823e:	d1ed      	bne.n	800821c <__swbuf_r+0x2a>
 8008240:	68a3      	ldr	r3, [r4, #8]
 8008242:	3b01      	subs	r3, #1
 8008244:	60a3      	str	r3, [r4, #8]
 8008246:	6823      	ldr	r3, [r4, #0]
 8008248:	1c5a      	adds	r2, r3, #1
 800824a:	6022      	str	r2, [r4, #0]
 800824c:	701e      	strb	r6, [r3, #0]
 800824e:	6962      	ldr	r2, [r4, #20]
 8008250:	1c43      	adds	r3, r0, #1
 8008252:	429a      	cmp	r2, r3
 8008254:	d004      	beq.n	8008260 <__swbuf_r+0x6e>
 8008256:	89a3      	ldrh	r3, [r4, #12]
 8008258:	07db      	lsls	r3, r3, #31
 800825a:	d5e1      	bpl.n	8008220 <__swbuf_r+0x2e>
 800825c:	2e0a      	cmp	r6, #10
 800825e:	d1df      	bne.n	8008220 <__swbuf_r+0x2e>
 8008260:	4621      	mov	r1, r4
 8008262:	4628      	mov	r0, r5
 8008264:	f000 fd8c 	bl	8008d80 <_fflush_r>
 8008268:	2800      	cmp	r0, #0
 800826a:	d0d9      	beq.n	8008220 <__swbuf_r+0x2e>
 800826c:	e7d6      	b.n	800821c <__swbuf_r+0x2a>
	...

08008270 <__swsetup_r>:
 8008270:	b538      	push	{r3, r4, r5, lr}
 8008272:	4b29      	ldr	r3, [pc, #164]	@ (8008318 <__swsetup_r+0xa8>)
 8008274:	4605      	mov	r5, r0
 8008276:	6818      	ldr	r0, [r3, #0]
 8008278:	460c      	mov	r4, r1
 800827a:	b118      	cbz	r0, 8008284 <__swsetup_r+0x14>
 800827c:	6a03      	ldr	r3, [r0, #32]
 800827e:	b90b      	cbnz	r3, 8008284 <__swsetup_r+0x14>
 8008280:	f7ff fece 	bl	8008020 <__sinit>
 8008284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008288:	0719      	lsls	r1, r3, #28
 800828a:	d422      	bmi.n	80082d2 <__swsetup_r+0x62>
 800828c:	06da      	lsls	r2, r3, #27
 800828e:	d407      	bmi.n	80082a0 <__swsetup_r+0x30>
 8008290:	2209      	movs	r2, #9
 8008292:	602a      	str	r2, [r5, #0]
 8008294:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008298:	81a3      	strh	r3, [r4, #12]
 800829a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800829e:	e033      	b.n	8008308 <__swsetup_r+0x98>
 80082a0:	0758      	lsls	r0, r3, #29
 80082a2:	d512      	bpl.n	80082ca <__swsetup_r+0x5a>
 80082a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082a6:	b141      	cbz	r1, 80082ba <__swsetup_r+0x4a>
 80082a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082ac:	4299      	cmp	r1, r3
 80082ae:	d002      	beq.n	80082b6 <__swsetup_r+0x46>
 80082b0:	4628      	mov	r0, r5
 80082b2:	f000 f91b 	bl	80084ec <_free_r>
 80082b6:	2300      	movs	r3, #0
 80082b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80082ba:	89a3      	ldrh	r3, [r4, #12]
 80082bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80082c0:	81a3      	strh	r3, [r4, #12]
 80082c2:	2300      	movs	r3, #0
 80082c4:	6063      	str	r3, [r4, #4]
 80082c6:	6923      	ldr	r3, [r4, #16]
 80082c8:	6023      	str	r3, [r4, #0]
 80082ca:	89a3      	ldrh	r3, [r4, #12]
 80082cc:	f043 0308 	orr.w	r3, r3, #8
 80082d0:	81a3      	strh	r3, [r4, #12]
 80082d2:	6923      	ldr	r3, [r4, #16]
 80082d4:	b94b      	cbnz	r3, 80082ea <__swsetup_r+0x7a>
 80082d6:	89a3      	ldrh	r3, [r4, #12]
 80082d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80082dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082e0:	d003      	beq.n	80082ea <__swsetup_r+0x7a>
 80082e2:	4621      	mov	r1, r4
 80082e4:	4628      	mov	r0, r5
 80082e6:	f000 fd99 	bl	8008e1c <__smakebuf_r>
 80082ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082ee:	f013 0201 	ands.w	r2, r3, #1
 80082f2:	d00a      	beq.n	800830a <__swsetup_r+0x9a>
 80082f4:	2200      	movs	r2, #0
 80082f6:	60a2      	str	r2, [r4, #8]
 80082f8:	6962      	ldr	r2, [r4, #20]
 80082fa:	4252      	negs	r2, r2
 80082fc:	61a2      	str	r2, [r4, #24]
 80082fe:	6922      	ldr	r2, [r4, #16]
 8008300:	b942      	cbnz	r2, 8008314 <__swsetup_r+0xa4>
 8008302:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008306:	d1c5      	bne.n	8008294 <__swsetup_r+0x24>
 8008308:	bd38      	pop	{r3, r4, r5, pc}
 800830a:	0799      	lsls	r1, r3, #30
 800830c:	bf58      	it	pl
 800830e:	6962      	ldrpl	r2, [r4, #20]
 8008310:	60a2      	str	r2, [r4, #8]
 8008312:	e7f4      	b.n	80082fe <__swsetup_r+0x8e>
 8008314:	2000      	movs	r0, #0
 8008316:	e7f7      	b.n	8008308 <__swsetup_r+0x98>
 8008318:	20000034 	.word	0x20000034

0800831c <memset>:
 800831c:	4402      	add	r2, r0
 800831e:	4603      	mov	r3, r0
 8008320:	4293      	cmp	r3, r2
 8008322:	d100      	bne.n	8008326 <memset+0xa>
 8008324:	4770      	bx	lr
 8008326:	f803 1b01 	strb.w	r1, [r3], #1
 800832a:	e7f9      	b.n	8008320 <memset+0x4>

0800832c <_close_r>:
 800832c:	b538      	push	{r3, r4, r5, lr}
 800832e:	4d06      	ldr	r5, [pc, #24]	@ (8008348 <_close_r+0x1c>)
 8008330:	2300      	movs	r3, #0
 8008332:	4604      	mov	r4, r0
 8008334:	4608      	mov	r0, r1
 8008336:	602b      	str	r3, [r5, #0]
 8008338:	f7f8 fd37 	bl	8000daa <_close>
 800833c:	1c43      	adds	r3, r0, #1
 800833e:	d102      	bne.n	8008346 <_close_r+0x1a>
 8008340:	682b      	ldr	r3, [r5, #0]
 8008342:	b103      	cbz	r3, 8008346 <_close_r+0x1a>
 8008344:	6023      	str	r3, [r4, #0]
 8008346:	bd38      	pop	{r3, r4, r5, pc}
 8008348:	20001d40 	.word	0x20001d40

0800834c <_reclaim_reent>:
 800834c:	4b2d      	ldr	r3, [pc, #180]	@ (8008404 <_reclaim_reent+0xb8>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4283      	cmp	r3, r0
 8008352:	b570      	push	{r4, r5, r6, lr}
 8008354:	4604      	mov	r4, r0
 8008356:	d053      	beq.n	8008400 <_reclaim_reent+0xb4>
 8008358:	69c3      	ldr	r3, [r0, #28]
 800835a:	b31b      	cbz	r3, 80083a4 <_reclaim_reent+0x58>
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	b163      	cbz	r3, 800837a <_reclaim_reent+0x2e>
 8008360:	2500      	movs	r5, #0
 8008362:	69e3      	ldr	r3, [r4, #28]
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	5959      	ldr	r1, [r3, r5]
 8008368:	b9b1      	cbnz	r1, 8008398 <_reclaim_reent+0x4c>
 800836a:	3504      	adds	r5, #4
 800836c:	2d80      	cmp	r5, #128	@ 0x80
 800836e:	d1f8      	bne.n	8008362 <_reclaim_reent+0x16>
 8008370:	69e3      	ldr	r3, [r4, #28]
 8008372:	4620      	mov	r0, r4
 8008374:	68d9      	ldr	r1, [r3, #12]
 8008376:	f000 f8b9 	bl	80084ec <_free_r>
 800837a:	69e3      	ldr	r3, [r4, #28]
 800837c:	6819      	ldr	r1, [r3, #0]
 800837e:	b111      	cbz	r1, 8008386 <_reclaim_reent+0x3a>
 8008380:	4620      	mov	r0, r4
 8008382:	f000 f8b3 	bl	80084ec <_free_r>
 8008386:	69e3      	ldr	r3, [r4, #28]
 8008388:	689d      	ldr	r5, [r3, #8]
 800838a:	b15d      	cbz	r5, 80083a4 <_reclaim_reent+0x58>
 800838c:	4629      	mov	r1, r5
 800838e:	4620      	mov	r0, r4
 8008390:	682d      	ldr	r5, [r5, #0]
 8008392:	f000 f8ab 	bl	80084ec <_free_r>
 8008396:	e7f8      	b.n	800838a <_reclaim_reent+0x3e>
 8008398:	680e      	ldr	r6, [r1, #0]
 800839a:	4620      	mov	r0, r4
 800839c:	f000 f8a6 	bl	80084ec <_free_r>
 80083a0:	4631      	mov	r1, r6
 80083a2:	e7e1      	b.n	8008368 <_reclaim_reent+0x1c>
 80083a4:	6961      	ldr	r1, [r4, #20]
 80083a6:	b111      	cbz	r1, 80083ae <_reclaim_reent+0x62>
 80083a8:	4620      	mov	r0, r4
 80083aa:	f000 f89f 	bl	80084ec <_free_r>
 80083ae:	69e1      	ldr	r1, [r4, #28]
 80083b0:	b111      	cbz	r1, 80083b8 <_reclaim_reent+0x6c>
 80083b2:	4620      	mov	r0, r4
 80083b4:	f000 f89a 	bl	80084ec <_free_r>
 80083b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80083ba:	b111      	cbz	r1, 80083c2 <_reclaim_reent+0x76>
 80083bc:	4620      	mov	r0, r4
 80083be:	f000 f895 	bl	80084ec <_free_r>
 80083c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083c4:	b111      	cbz	r1, 80083cc <_reclaim_reent+0x80>
 80083c6:	4620      	mov	r0, r4
 80083c8:	f000 f890 	bl	80084ec <_free_r>
 80083cc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80083ce:	b111      	cbz	r1, 80083d6 <_reclaim_reent+0x8a>
 80083d0:	4620      	mov	r0, r4
 80083d2:	f000 f88b 	bl	80084ec <_free_r>
 80083d6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80083d8:	b111      	cbz	r1, 80083e0 <_reclaim_reent+0x94>
 80083da:	4620      	mov	r0, r4
 80083dc:	f000 f886 	bl	80084ec <_free_r>
 80083e0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80083e2:	b111      	cbz	r1, 80083ea <_reclaim_reent+0x9e>
 80083e4:	4620      	mov	r0, r4
 80083e6:	f000 f881 	bl	80084ec <_free_r>
 80083ea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80083ec:	b111      	cbz	r1, 80083f4 <_reclaim_reent+0xa8>
 80083ee:	4620      	mov	r0, r4
 80083f0:	f000 f87c 	bl	80084ec <_free_r>
 80083f4:	6a23      	ldr	r3, [r4, #32]
 80083f6:	b11b      	cbz	r3, 8008400 <_reclaim_reent+0xb4>
 80083f8:	4620      	mov	r0, r4
 80083fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80083fe:	4718      	bx	r3
 8008400:	bd70      	pop	{r4, r5, r6, pc}
 8008402:	bf00      	nop
 8008404:	20000034 	.word	0x20000034

08008408 <_lseek_r>:
 8008408:	b538      	push	{r3, r4, r5, lr}
 800840a:	4d07      	ldr	r5, [pc, #28]	@ (8008428 <_lseek_r+0x20>)
 800840c:	4604      	mov	r4, r0
 800840e:	4608      	mov	r0, r1
 8008410:	4611      	mov	r1, r2
 8008412:	2200      	movs	r2, #0
 8008414:	602a      	str	r2, [r5, #0]
 8008416:	461a      	mov	r2, r3
 8008418:	f7f8 fcee 	bl	8000df8 <_lseek>
 800841c:	1c43      	adds	r3, r0, #1
 800841e:	d102      	bne.n	8008426 <_lseek_r+0x1e>
 8008420:	682b      	ldr	r3, [r5, #0]
 8008422:	b103      	cbz	r3, 8008426 <_lseek_r+0x1e>
 8008424:	6023      	str	r3, [r4, #0]
 8008426:	bd38      	pop	{r3, r4, r5, pc}
 8008428:	20001d40 	.word	0x20001d40

0800842c <_read_r>:
 800842c:	b538      	push	{r3, r4, r5, lr}
 800842e:	4d07      	ldr	r5, [pc, #28]	@ (800844c <_read_r+0x20>)
 8008430:	4604      	mov	r4, r0
 8008432:	4608      	mov	r0, r1
 8008434:	4611      	mov	r1, r2
 8008436:	2200      	movs	r2, #0
 8008438:	602a      	str	r2, [r5, #0]
 800843a:	461a      	mov	r2, r3
 800843c:	f7f8 fc98 	bl	8000d70 <_read>
 8008440:	1c43      	adds	r3, r0, #1
 8008442:	d102      	bne.n	800844a <_read_r+0x1e>
 8008444:	682b      	ldr	r3, [r5, #0]
 8008446:	b103      	cbz	r3, 800844a <_read_r+0x1e>
 8008448:	6023      	str	r3, [r4, #0]
 800844a:	bd38      	pop	{r3, r4, r5, pc}
 800844c:	20001d40 	.word	0x20001d40

08008450 <_write_r>:
 8008450:	b538      	push	{r3, r4, r5, lr}
 8008452:	4d07      	ldr	r5, [pc, #28]	@ (8008470 <_write_r+0x20>)
 8008454:	4604      	mov	r4, r0
 8008456:	4608      	mov	r0, r1
 8008458:	4611      	mov	r1, r2
 800845a:	2200      	movs	r2, #0
 800845c:	602a      	str	r2, [r5, #0]
 800845e:	461a      	mov	r2, r3
 8008460:	f7f8 fa4a 	bl	80008f8 <_write>
 8008464:	1c43      	adds	r3, r0, #1
 8008466:	d102      	bne.n	800846e <_write_r+0x1e>
 8008468:	682b      	ldr	r3, [r5, #0]
 800846a:	b103      	cbz	r3, 800846e <_write_r+0x1e>
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	bd38      	pop	{r3, r4, r5, pc}
 8008470:	20001d40 	.word	0x20001d40

08008474 <__errno>:
 8008474:	4b01      	ldr	r3, [pc, #4]	@ (800847c <__errno+0x8>)
 8008476:	6818      	ldr	r0, [r3, #0]
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	20000034 	.word	0x20000034

08008480 <__libc_init_array>:
 8008480:	b570      	push	{r4, r5, r6, lr}
 8008482:	4d0d      	ldr	r5, [pc, #52]	@ (80084b8 <__libc_init_array+0x38>)
 8008484:	4c0d      	ldr	r4, [pc, #52]	@ (80084bc <__libc_init_array+0x3c>)
 8008486:	1b64      	subs	r4, r4, r5
 8008488:	10a4      	asrs	r4, r4, #2
 800848a:	2600      	movs	r6, #0
 800848c:	42a6      	cmp	r6, r4
 800848e:	d109      	bne.n	80084a4 <__libc_init_array+0x24>
 8008490:	4d0b      	ldr	r5, [pc, #44]	@ (80084c0 <__libc_init_array+0x40>)
 8008492:	4c0c      	ldr	r4, [pc, #48]	@ (80084c4 <__libc_init_array+0x44>)
 8008494:	f000 fd30 	bl	8008ef8 <_init>
 8008498:	1b64      	subs	r4, r4, r5
 800849a:	10a4      	asrs	r4, r4, #2
 800849c:	2600      	movs	r6, #0
 800849e:	42a6      	cmp	r6, r4
 80084a0:	d105      	bne.n	80084ae <__libc_init_array+0x2e>
 80084a2:	bd70      	pop	{r4, r5, r6, pc}
 80084a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80084a8:	4798      	blx	r3
 80084aa:	3601      	adds	r6, #1
 80084ac:	e7ee      	b.n	800848c <__libc_init_array+0xc>
 80084ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80084b2:	4798      	blx	r3
 80084b4:	3601      	adds	r6, #1
 80084b6:	e7f2      	b.n	800849e <__libc_init_array+0x1e>
 80084b8:	08009210 	.word	0x08009210
 80084bc:	08009210 	.word	0x08009210
 80084c0:	08009210 	.word	0x08009210
 80084c4:	08009214 	.word	0x08009214

080084c8 <__retarget_lock_init_recursive>:
 80084c8:	4770      	bx	lr

080084ca <__retarget_lock_acquire_recursive>:
 80084ca:	4770      	bx	lr

080084cc <__retarget_lock_release_recursive>:
 80084cc:	4770      	bx	lr

080084ce <memcpy>:
 80084ce:	440a      	add	r2, r1
 80084d0:	4291      	cmp	r1, r2
 80084d2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80084d6:	d100      	bne.n	80084da <memcpy+0xc>
 80084d8:	4770      	bx	lr
 80084da:	b510      	push	{r4, lr}
 80084dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084e4:	4291      	cmp	r1, r2
 80084e6:	d1f9      	bne.n	80084dc <memcpy+0xe>
 80084e8:	bd10      	pop	{r4, pc}
	...

080084ec <_free_r>:
 80084ec:	b538      	push	{r3, r4, r5, lr}
 80084ee:	4605      	mov	r5, r0
 80084f0:	2900      	cmp	r1, #0
 80084f2:	d041      	beq.n	8008578 <_free_r+0x8c>
 80084f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084f8:	1f0c      	subs	r4, r1, #4
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	bfb8      	it	lt
 80084fe:	18e4      	addlt	r4, r4, r3
 8008500:	f000 f8e0 	bl	80086c4 <__malloc_lock>
 8008504:	4a1d      	ldr	r2, [pc, #116]	@ (800857c <_free_r+0x90>)
 8008506:	6813      	ldr	r3, [r2, #0]
 8008508:	b933      	cbnz	r3, 8008518 <_free_r+0x2c>
 800850a:	6063      	str	r3, [r4, #4]
 800850c:	6014      	str	r4, [r2, #0]
 800850e:	4628      	mov	r0, r5
 8008510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008514:	f000 b8dc 	b.w	80086d0 <__malloc_unlock>
 8008518:	42a3      	cmp	r3, r4
 800851a:	d908      	bls.n	800852e <_free_r+0x42>
 800851c:	6820      	ldr	r0, [r4, #0]
 800851e:	1821      	adds	r1, r4, r0
 8008520:	428b      	cmp	r3, r1
 8008522:	bf01      	itttt	eq
 8008524:	6819      	ldreq	r1, [r3, #0]
 8008526:	685b      	ldreq	r3, [r3, #4]
 8008528:	1809      	addeq	r1, r1, r0
 800852a:	6021      	streq	r1, [r4, #0]
 800852c:	e7ed      	b.n	800850a <_free_r+0x1e>
 800852e:	461a      	mov	r2, r3
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	b10b      	cbz	r3, 8008538 <_free_r+0x4c>
 8008534:	42a3      	cmp	r3, r4
 8008536:	d9fa      	bls.n	800852e <_free_r+0x42>
 8008538:	6811      	ldr	r1, [r2, #0]
 800853a:	1850      	adds	r0, r2, r1
 800853c:	42a0      	cmp	r0, r4
 800853e:	d10b      	bne.n	8008558 <_free_r+0x6c>
 8008540:	6820      	ldr	r0, [r4, #0]
 8008542:	4401      	add	r1, r0
 8008544:	1850      	adds	r0, r2, r1
 8008546:	4283      	cmp	r3, r0
 8008548:	6011      	str	r1, [r2, #0]
 800854a:	d1e0      	bne.n	800850e <_free_r+0x22>
 800854c:	6818      	ldr	r0, [r3, #0]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	6053      	str	r3, [r2, #4]
 8008552:	4408      	add	r0, r1
 8008554:	6010      	str	r0, [r2, #0]
 8008556:	e7da      	b.n	800850e <_free_r+0x22>
 8008558:	d902      	bls.n	8008560 <_free_r+0x74>
 800855a:	230c      	movs	r3, #12
 800855c:	602b      	str	r3, [r5, #0]
 800855e:	e7d6      	b.n	800850e <_free_r+0x22>
 8008560:	6820      	ldr	r0, [r4, #0]
 8008562:	1821      	adds	r1, r4, r0
 8008564:	428b      	cmp	r3, r1
 8008566:	bf04      	itt	eq
 8008568:	6819      	ldreq	r1, [r3, #0]
 800856a:	685b      	ldreq	r3, [r3, #4]
 800856c:	6063      	str	r3, [r4, #4]
 800856e:	bf04      	itt	eq
 8008570:	1809      	addeq	r1, r1, r0
 8008572:	6021      	streq	r1, [r4, #0]
 8008574:	6054      	str	r4, [r2, #4]
 8008576:	e7ca      	b.n	800850e <_free_r+0x22>
 8008578:	bd38      	pop	{r3, r4, r5, pc}
 800857a:	bf00      	nop
 800857c:	20001d4c 	.word	0x20001d4c

08008580 <sbrk_aligned>:
 8008580:	b570      	push	{r4, r5, r6, lr}
 8008582:	4e0f      	ldr	r6, [pc, #60]	@ (80085c0 <sbrk_aligned+0x40>)
 8008584:	460c      	mov	r4, r1
 8008586:	6831      	ldr	r1, [r6, #0]
 8008588:	4605      	mov	r5, r0
 800858a:	b911      	cbnz	r1, 8008592 <sbrk_aligned+0x12>
 800858c:	f000 fca4 	bl	8008ed8 <_sbrk_r>
 8008590:	6030      	str	r0, [r6, #0]
 8008592:	4621      	mov	r1, r4
 8008594:	4628      	mov	r0, r5
 8008596:	f000 fc9f 	bl	8008ed8 <_sbrk_r>
 800859a:	1c43      	adds	r3, r0, #1
 800859c:	d103      	bne.n	80085a6 <sbrk_aligned+0x26>
 800859e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80085a2:	4620      	mov	r0, r4
 80085a4:	bd70      	pop	{r4, r5, r6, pc}
 80085a6:	1cc4      	adds	r4, r0, #3
 80085a8:	f024 0403 	bic.w	r4, r4, #3
 80085ac:	42a0      	cmp	r0, r4
 80085ae:	d0f8      	beq.n	80085a2 <sbrk_aligned+0x22>
 80085b0:	1a21      	subs	r1, r4, r0
 80085b2:	4628      	mov	r0, r5
 80085b4:	f000 fc90 	bl	8008ed8 <_sbrk_r>
 80085b8:	3001      	adds	r0, #1
 80085ba:	d1f2      	bne.n	80085a2 <sbrk_aligned+0x22>
 80085bc:	e7ef      	b.n	800859e <sbrk_aligned+0x1e>
 80085be:	bf00      	nop
 80085c0:	20001d48 	.word	0x20001d48

080085c4 <_malloc_r>:
 80085c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085c8:	1ccd      	adds	r5, r1, #3
 80085ca:	f025 0503 	bic.w	r5, r5, #3
 80085ce:	3508      	adds	r5, #8
 80085d0:	2d0c      	cmp	r5, #12
 80085d2:	bf38      	it	cc
 80085d4:	250c      	movcc	r5, #12
 80085d6:	2d00      	cmp	r5, #0
 80085d8:	4606      	mov	r6, r0
 80085da:	db01      	blt.n	80085e0 <_malloc_r+0x1c>
 80085dc:	42a9      	cmp	r1, r5
 80085de:	d904      	bls.n	80085ea <_malloc_r+0x26>
 80085e0:	230c      	movs	r3, #12
 80085e2:	6033      	str	r3, [r6, #0]
 80085e4:	2000      	movs	r0, #0
 80085e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80086c0 <_malloc_r+0xfc>
 80085ee:	f000 f869 	bl	80086c4 <__malloc_lock>
 80085f2:	f8d8 3000 	ldr.w	r3, [r8]
 80085f6:	461c      	mov	r4, r3
 80085f8:	bb44      	cbnz	r4, 800864c <_malloc_r+0x88>
 80085fa:	4629      	mov	r1, r5
 80085fc:	4630      	mov	r0, r6
 80085fe:	f7ff ffbf 	bl	8008580 <sbrk_aligned>
 8008602:	1c43      	adds	r3, r0, #1
 8008604:	4604      	mov	r4, r0
 8008606:	d158      	bne.n	80086ba <_malloc_r+0xf6>
 8008608:	f8d8 4000 	ldr.w	r4, [r8]
 800860c:	4627      	mov	r7, r4
 800860e:	2f00      	cmp	r7, #0
 8008610:	d143      	bne.n	800869a <_malloc_r+0xd6>
 8008612:	2c00      	cmp	r4, #0
 8008614:	d04b      	beq.n	80086ae <_malloc_r+0xea>
 8008616:	6823      	ldr	r3, [r4, #0]
 8008618:	4639      	mov	r1, r7
 800861a:	4630      	mov	r0, r6
 800861c:	eb04 0903 	add.w	r9, r4, r3
 8008620:	f000 fc5a 	bl	8008ed8 <_sbrk_r>
 8008624:	4581      	cmp	r9, r0
 8008626:	d142      	bne.n	80086ae <_malloc_r+0xea>
 8008628:	6821      	ldr	r1, [r4, #0]
 800862a:	1a6d      	subs	r5, r5, r1
 800862c:	4629      	mov	r1, r5
 800862e:	4630      	mov	r0, r6
 8008630:	f7ff ffa6 	bl	8008580 <sbrk_aligned>
 8008634:	3001      	adds	r0, #1
 8008636:	d03a      	beq.n	80086ae <_malloc_r+0xea>
 8008638:	6823      	ldr	r3, [r4, #0]
 800863a:	442b      	add	r3, r5
 800863c:	6023      	str	r3, [r4, #0]
 800863e:	f8d8 3000 	ldr.w	r3, [r8]
 8008642:	685a      	ldr	r2, [r3, #4]
 8008644:	bb62      	cbnz	r2, 80086a0 <_malloc_r+0xdc>
 8008646:	f8c8 7000 	str.w	r7, [r8]
 800864a:	e00f      	b.n	800866c <_malloc_r+0xa8>
 800864c:	6822      	ldr	r2, [r4, #0]
 800864e:	1b52      	subs	r2, r2, r5
 8008650:	d420      	bmi.n	8008694 <_malloc_r+0xd0>
 8008652:	2a0b      	cmp	r2, #11
 8008654:	d917      	bls.n	8008686 <_malloc_r+0xc2>
 8008656:	1961      	adds	r1, r4, r5
 8008658:	42a3      	cmp	r3, r4
 800865a:	6025      	str	r5, [r4, #0]
 800865c:	bf18      	it	ne
 800865e:	6059      	strne	r1, [r3, #4]
 8008660:	6863      	ldr	r3, [r4, #4]
 8008662:	bf08      	it	eq
 8008664:	f8c8 1000 	streq.w	r1, [r8]
 8008668:	5162      	str	r2, [r4, r5]
 800866a:	604b      	str	r3, [r1, #4]
 800866c:	4630      	mov	r0, r6
 800866e:	f000 f82f 	bl	80086d0 <__malloc_unlock>
 8008672:	f104 000b 	add.w	r0, r4, #11
 8008676:	1d23      	adds	r3, r4, #4
 8008678:	f020 0007 	bic.w	r0, r0, #7
 800867c:	1ac2      	subs	r2, r0, r3
 800867e:	bf1c      	itt	ne
 8008680:	1a1b      	subne	r3, r3, r0
 8008682:	50a3      	strne	r3, [r4, r2]
 8008684:	e7af      	b.n	80085e6 <_malloc_r+0x22>
 8008686:	6862      	ldr	r2, [r4, #4]
 8008688:	42a3      	cmp	r3, r4
 800868a:	bf0c      	ite	eq
 800868c:	f8c8 2000 	streq.w	r2, [r8]
 8008690:	605a      	strne	r2, [r3, #4]
 8008692:	e7eb      	b.n	800866c <_malloc_r+0xa8>
 8008694:	4623      	mov	r3, r4
 8008696:	6864      	ldr	r4, [r4, #4]
 8008698:	e7ae      	b.n	80085f8 <_malloc_r+0x34>
 800869a:	463c      	mov	r4, r7
 800869c:	687f      	ldr	r7, [r7, #4]
 800869e:	e7b6      	b.n	800860e <_malloc_r+0x4a>
 80086a0:	461a      	mov	r2, r3
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	42a3      	cmp	r3, r4
 80086a6:	d1fb      	bne.n	80086a0 <_malloc_r+0xdc>
 80086a8:	2300      	movs	r3, #0
 80086aa:	6053      	str	r3, [r2, #4]
 80086ac:	e7de      	b.n	800866c <_malloc_r+0xa8>
 80086ae:	230c      	movs	r3, #12
 80086b0:	6033      	str	r3, [r6, #0]
 80086b2:	4630      	mov	r0, r6
 80086b4:	f000 f80c 	bl	80086d0 <__malloc_unlock>
 80086b8:	e794      	b.n	80085e4 <_malloc_r+0x20>
 80086ba:	6005      	str	r5, [r0, #0]
 80086bc:	e7d6      	b.n	800866c <_malloc_r+0xa8>
 80086be:	bf00      	nop
 80086c0:	20001d4c 	.word	0x20001d4c

080086c4 <__malloc_lock>:
 80086c4:	4801      	ldr	r0, [pc, #4]	@ (80086cc <__malloc_lock+0x8>)
 80086c6:	f7ff bf00 	b.w	80084ca <__retarget_lock_acquire_recursive>
 80086ca:	bf00      	nop
 80086cc:	20001d44 	.word	0x20001d44

080086d0 <__malloc_unlock>:
 80086d0:	4801      	ldr	r0, [pc, #4]	@ (80086d8 <__malloc_unlock+0x8>)
 80086d2:	f7ff befb 	b.w	80084cc <__retarget_lock_release_recursive>
 80086d6:	bf00      	nop
 80086d8:	20001d44 	.word	0x20001d44

080086dc <__sfputc_r>:
 80086dc:	6893      	ldr	r3, [r2, #8]
 80086de:	3b01      	subs	r3, #1
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	b410      	push	{r4}
 80086e4:	6093      	str	r3, [r2, #8]
 80086e6:	da08      	bge.n	80086fa <__sfputc_r+0x1e>
 80086e8:	6994      	ldr	r4, [r2, #24]
 80086ea:	42a3      	cmp	r3, r4
 80086ec:	db01      	blt.n	80086f2 <__sfputc_r+0x16>
 80086ee:	290a      	cmp	r1, #10
 80086f0:	d103      	bne.n	80086fa <__sfputc_r+0x1e>
 80086f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086f6:	f7ff bd7c 	b.w	80081f2 <__swbuf_r>
 80086fa:	6813      	ldr	r3, [r2, #0]
 80086fc:	1c58      	adds	r0, r3, #1
 80086fe:	6010      	str	r0, [r2, #0]
 8008700:	7019      	strb	r1, [r3, #0]
 8008702:	4608      	mov	r0, r1
 8008704:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008708:	4770      	bx	lr

0800870a <__sfputs_r>:
 800870a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800870c:	4606      	mov	r6, r0
 800870e:	460f      	mov	r7, r1
 8008710:	4614      	mov	r4, r2
 8008712:	18d5      	adds	r5, r2, r3
 8008714:	42ac      	cmp	r4, r5
 8008716:	d101      	bne.n	800871c <__sfputs_r+0x12>
 8008718:	2000      	movs	r0, #0
 800871a:	e007      	b.n	800872c <__sfputs_r+0x22>
 800871c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008720:	463a      	mov	r2, r7
 8008722:	4630      	mov	r0, r6
 8008724:	f7ff ffda 	bl	80086dc <__sfputc_r>
 8008728:	1c43      	adds	r3, r0, #1
 800872a:	d1f3      	bne.n	8008714 <__sfputs_r+0xa>
 800872c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008730 <_vfiprintf_r>:
 8008730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008734:	460d      	mov	r5, r1
 8008736:	b09d      	sub	sp, #116	@ 0x74
 8008738:	4614      	mov	r4, r2
 800873a:	4698      	mov	r8, r3
 800873c:	4606      	mov	r6, r0
 800873e:	b118      	cbz	r0, 8008748 <_vfiprintf_r+0x18>
 8008740:	6a03      	ldr	r3, [r0, #32]
 8008742:	b90b      	cbnz	r3, 8008748 <_vfiprintf_r+0x18>
 8008744:	f7ff fc6c 	bl	8008020 <__sinit>
 8008748:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800874a:	07d9      	lsls	r1, r3, #31
 800874c:	d405      	bmi.n	800875a <_vfiprintf_r+0x2a>
 800874e:	89ab      	ldrh	r3, [r5, #12]
 8008750:	059a      	lsls	r2, r3, #22
 8008752:	d402      	bmi.n	800875a <_vfiprintf_r+0x2a>
 8008754:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008756:	f7ff feb8 	bl	80084ca <__retarget_lock_acquire_recursive>
 800875a:	89ab      	ldrh	r3, [r5, #12]
 800875c:	071b      	lsls	r3, r3, #28
 800875e:	d501      	bpl.n	8008764 <_vfiprintf_r+0x34>
 8008760:	692b      	ldr	r3, [r5, #16]
 8008762:	b99b      	cbnz	r3, 800878c <_vfiprintf_r+0x5c>
 8008764:	4629      	mov	r1, r5
 8008766:	4630      	mov	r0, r6
 8008768:	f7ff fd82 	bl	8008270 <__swsetup_r>
 800876c:	b170      	cbz	r0, 800878c <_vfiprintf_r+0x5c>
 800876e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008770:	07dc      	lsls	r4, r3, #31
 8008772:	d504      	bpl.n	800877e <_vfiprintf_r+0x4e>
 8008774:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008778:	b01d      	add	sp, #116	@ 0x74
 800877a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800877e:	89ab      	ldrh	r3, [r5, #12]
 8008780:	0598      	lsls	r0, r3, #22
 8008782:	d4f7      	bmi.n	8008774 <_vfiprintf_r+0x44>
 8008784:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008786:	f7ff fea1 	bl	80084cc <__retarget_lock_release_recursive>
 800878a:	e7f3      	b.n	8008774 <_vfiprintf_r+0x44>
 800878c:	2300      	movs	r3, #0
 800878e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008790:	2320      	movs	r3, #32
 8008792:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008796:	f8cd 800c 	str.w	r8, [sp, #12]
 800879a:	2330      	movs	r3, #48	@ 0x30
 800879c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800894c <_vfiprintf_r+0x21c>
 80087a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087a4:	f04f 0901 	mov.w	r9, #1
 80087a8:	4623      	mov	r3, r4
 80087aa:	469a      	mov	sl, r3
 80087ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087b0:	b10a      	cbz	r2, 80087b6 <_vfiprintf_r+0x86>
 80087b2:	2a25      	cmp	r2, #37	@ 0x25
 80087b4:	d1f9      	bne.n	80087aa <_vfiprintf_r+0x7a>
 80087b6:	ebba 0b04 	subs.w	fp, sl, r4
 80087ba:	d00b      	beq.n	80087d4 <_vfiprintf_r+0xa4>
 80087bc:	465b      	mov	r3, fp
 80087be:	4622      	mov	r2, r4
 80087c0:	4629      	mov	r1, r5
 80087c2:	4630      	mov	r0, r6
 80087c4:	f7ff ffa1 	bl	800870a <__sfputs_r>
 80087c8:	3001      	adds	r0, #1
 80087ca:	f000 80a7 	beq.w	800891c <_vfiprintf_r+0x1ec>
 80087ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087d0:	445a      	add	r2, fp
 80087d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80087d4:	f89a 3000 	ldrb.w	r3, [sl]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f000 809f 	beq.w	800891c <_vfiprintf_r+0x1ec>
 80087de:	2300      	movs	r3, #0
 80087e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80087e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087e8:	f10a 0a01 	add.w	sl, sl, #1
 80087ec:	9304      	str	r3, [sp, #16]
 80087ee:	9307      	str	r3, [sp, #28]
 80087f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80087f6:	4654      	mov	r4, sl
 80087f8:	2205      	movs	r2, #5
 80087fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087fe:	4853      	ldr	r0, [pc, #332]	@ (800894c <_vfiprintf_r+0x21c>)
 8008800:	f7f7 fcbe 	bl	8000180 <memchr>
 8008804:	9a04      	ldr	r2, [sp, #16]
 8008806:	b9d8      	cbnz	r0, 8008840 <_vfiprintf_r+0x110>
 8008808:	06d1      	lsls	r1, r2, #27
 800880a:	bf44      	itt	mi
 800880c:	2320      	movmi	r3, #32
 800880e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008812:	0713      	lsls	r3, r2, #28
 8008814:	bf44      	itt	mi
 8008816:	232b      	movmi	r3, #43	@ 0x2b
 8008818:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800881c:	f89a 3000 	ldrb.w	r3, [sl]
 8008820:	2b2a      	cmp	r3, #42	@ 0x2a
 8008822:	d015      	beq.n	8008850 <_vfiprintf_r+0x120>
 8008824:	9a07      	ldr	r2, [sp, #28]
 8008826:	4654      	mov	r4, sl
 8008828:	2000      	movs	r0, #0
 800882a:	f04f 0c0a 	mov.w	ip, #10
 800882e:	4621      	mov	r1, r4
 8008830:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008834:	3b30      	subs	r3, #48	@ 0x30
 8008836:	2b09      	cmp	r3, #9
 8008838:	d94b      	bls.n	80088d2 <_vfiprintf_r+0x1a2>
 800883a:	b1b0      	cbz	r0, 800886a <_vfiprintf_r+0x13a>
 800883c:	9207      	str	r2, [sp, #28]
 800883e:	e014      	b.n	800886a <_vfiprintf_r+0x13a>
 8008840:	eba0 0308 	sub.w	r3, r0, r8
 8008844:	fa09 f303 	lsl.w	r3, r9, r3
 8008848:	4313      	orrs	r3, r2
 800884a:	9304      	str	r3, [sp, #16]
 800884c:	46a2      	mov	sl, r4
 800884e:	e7d2      	b.n	80087f6 <_vfiprintf_r+0xc6>
 8008850:	9b03      	ldr	r3, [sp, #12]
 8008852:	1d19      	adds	r1, r3, #4
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	9103      	str	r1, [sp, #12]
 8008858:	2b00      	cmp	r3, #0
 800885a:	bfbb      	ittet	lt
 800885c:	425b      	neglt	r3, r3
 800885e:	f042 0202 	orrlt.w	r2, r2, #2
 8008862:	9307      	strge	r3, [sp, #28]
 8008864:	9307      	strlt	r3, [sp, #28]
 8008866:	bfb8      	it	lt
 8008868:	9204      	strlt	r2, [sp, #16]
 800886a:	7823      	ldrb	r3, [r4, #0]
 800886c:	2b2e      	cmp	r3, #46	@ 0x2e
 800886e:	d10a      	bne.n	8008886 <_vfiprintf_r+0x156>
 8008870:	7863      	ldrb	r3, [r4, #1]
 8008872:	2b2a      	cmp	r3, #42	@ 0x2a
 8008874:	d132      	bne.n	80088dc <_vfiprintf_r+0x1ac>
 8008876:	9b03      	ldr	r3, [sp, #12]
 8008878:	1d1a      	adds	r2, r3, #4
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	9203      	str	r2, [sp, #12]
 800887e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008882:	3402      	adds	r4, #2
 8008884:	9305      	str	r3, [sp, #20]
 8008886:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800895c <_vfiprintf_r+0x22c>
 800888a:	7821      	ldrb	r1, [r4, #0]
 800888c:	2203      	movs	r2, #3
 800888e:	4650      	mov	r0, sl
 8008890:	f7f7 fc76 	bl	8000180 <memchr>
 8008894:	b138      	cbz	r0, 80088a6 <_vfiprintf_r+0x176>
 8008896:	9b04      	ldr	r3, [sp, #16]
 8008898:	eba0 000a 	sub.w	r0, r0, sl
 800889c:	2240      	movs	r2, #64	@ 0x40
 800889e:	4082      	lsls	r2, r0
 80088a0:	4313      	orrs	r3, r2
 80088a2:	3401      	adds	r4, #1
 80088a4:	9304      	str	r3, [sp, #16]
 80088a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088aa:	4829      	ldr	r0, [pc, #164]	@ (8008950 <_vfiprintf_r+0x220>)
 80088ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088b0:	2206      	movs	r2, #6
 80088b2:	f7f7 fc65 	bl	8000180 <memchr>
 80088b6:	2800      	cmp	r0, #0
 80088b8:	d03f      	beq.n	800893a <_vfiprintf_r+0x20a>
 80088ba:	4b26      	ldr	r3, [pc, #152]	@ (8008954 <_vfiprintf_r+0x224>)
 80088bc:	bb1b      	cbnz	r3, 8008906 <_vfiprintf_r+0x1d6>
 80088be:	9b03      	ldr	r3, [sp, #12]
 80088c0:	3307      	adds	r3, #7
 80088c2:	f023 0307 	bic.w	r3, r3, #7
 80088c6:	3308      	adds	r3, #8
 80088c8:	9303      	str	r3, [sp, #12]
 80088ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088cc:	443b      	add	r3, r7
 80088ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80088d0:	e76a      	b.n	80087a8 <_vfiprintf_r+0x78>
 80088d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80088d6:	460c      	mov	r4, r1
 80088d8:	2001      	movs	r0, #1
 80088da:	e7a8      	b.n	800882e <_vfiprintf_r+0xfe>
 80088dc:	2300      	movs	r3, #0
 80088de:	3401      	adds	r4, #1
 80088e0:	9305      	str	r3, [sp, #20]
 80088e2:	4619      	mov	r1, r3
 80088e4:	f04f 0c0a 	mov.w	ip, #10
 80088e8:	4620      	mov	r0, r4
 80088ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088ee:	3a30      	subs	r2, #48	@ 0x30
 80088f0:	2a09      	cmp	r2, #9
 80088f2:	d903      	bls.n	80088fc <_vfiprintf_r+0x1cc>
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d0c6      	beq.n	8008886 <_vfiprintf_r+0x156>
 80088f8:	9105      	str	r1, [sp, #20]
 80088fa:	e7c4      	b.n	8008886 <_vfiprintf_r+0x156>
 80088fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008900:	4604      	mov	r4, r0
 8008902:	2301      	movs	r3, #1
 8008904:	e7f0      	b.n	80088e8 <_vfiprintf_r+0x1b8>
 8008906:	ab03      	add	r3, sp, #12
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	462a      	mov	r2, r5
 800890c:	4b12      	ldr	r3, [pc, #72]	@ (8008958 <_vfiprintf_r+0x228>)
 800890e:	a904      	add	r1, sp, #16
 8008910:	4630      	mov	r0, r6
 8008912:	f3af 8000 	nop.w
 8008916:	4607      	mov	r7, r0
 8008918:	1c78      	adds	r0, r7, #1
 800891a:	d1d6      	bne.n	80088ca <_vfiprintf_r+0x19a>
 800891c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800891e:	07d9      	lsls	r1, r3, #31
 8008920:	d405      	bmi.n	800892e <_vfiprintf_r+0x1fe>
 8008922:	89ab      	ldrh	r3, [r5, #12]
 8008924:	059a      	lsls	r2, r3, #22
 8008926:	d402      	bmi.n	800892e <_vfiprintf_r+0x1fe>
 8008928:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800892a:	f7ff fdcf 	bl	80084cc <__retarget_lock_release_recursive>
 800892e:	89ab      	ldrh	r3, [r5, #12]
 8008930:	065b      	lsls	r3, r3, #25
 8008932:	f53f af1f 	bmi.w	8008774 <_vfiprintf_r+0x44>
 8008936:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008938:	e71e      	b.n	8008778 <_vfiprintf_r+0x48>
 800893a:	ab03      	add	r3, sp, #12
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	462a      	mov	r2, r5
 8008940:	4b05      	ldr	r3, [pc, #20]	@ (8008958 <_vfiprintf_r+0x228>)
 8008942:	a904      	add	r1, sp, #16
 8008944:	4630      	mov	r0, r6
 8008946:	f000 f879 	bl	8008a3c <_printf_i>
 800894a:	e7e4      	b.n	8008916 <_vfiprintf_r+0x1e6>
 800894c:	080091d4 	.word	0x080091d4
 8008950:	080091de 	.word	0x080091de
 8008954:	00000000 	.word	0x00000000
 8008958:	0800870b 	.word	0x0800870b
 800895c:	080091da 	.word	0x080091da

08008960 <_printf_common>:
 8008960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008964:	4616      	mov	r6, r2
 8008966:	4698      	mov	r8, r3
 8008968:	688a      	ldr	r2, [r1, #8]
 800896a:	690b      	ldr	r3, [r1, #16]
 800896c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008970:	4293      	cmp	r3, r2
 8008972:	bfb8      	it	lt
 8008974:	4613      	movlt	r3, r2
 8008976:	6033      	str	r3, [r6, #0]
 8008978:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800897c:	4607      	mov	r7, r0
 800897e:	460c      	mov	r4, r1
 8008980:	b10a      	cbz	r2, 8008986 <_printf_common+0x26>
 8008982:	3301      	adds	r3, #1
 8008984:	6033      	str	r3, [r6, #0]
 8008986:	6823      	ldr	r3, [r4, #0]
 8008988:	0699      	lsls	r1, r3, #26
 800898a:	bf42      	ittt	mi
 800898c:	6833      	ldrmi	r3, [r6, #0]
 800898e:	3302      	addmi	r3, #2
 8008990:	6033      	strmi	r3, [r6, #0]
 8008992:	6825      	ldr	r5, [r4, #0]
 8008994:	f015 0506 	ands.w	r5, r5, #6
 8008998:	d106      	bne.n	80089a8 <_printf_common+0x48>
 800899a:	f104 0a19 	add.w	sl, r4, #25
 800899e:	68e3      	ldr	r3, [r4, #12]
 80089a0:	6832      	ldr	r2, [r6, #0]
 80089a2:	1a9b      	subs	r3, r3, r2
 80089a4:	42ab      	cmp	r3, r5
 80089a6:	dc26      	bgt.n	80089f6 <_printf_common+0x96>
 80089a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80089ac:	6822      	ldr	r2, [r4, #0]
 80089ae:	3b00      	subs	r3, #0
 80089b0:	bf18      	it	ne
 80089b2:	2301      	movne	r3, #1
 80089b4:	0692      	lsls	r2, r2, #26
 80089b6:	d42b      	bmi.n	8008a10 <_printf_common+0xb0>
 80089b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80089bc:	4641      	mov	r1, r8
 80089be:	4638      	mov	r0, r7
 80089c0:	47c8      	blx	r9
 80089c2:	3001      	adds	r0, #1
 80089c4:	d01e      	beq.n	8008a04 <_printf_common+0xa4>
 80089c6:	6823      	ldr	r3, [r4, #0]
 80089c8:	6922      	ldr	r2, [r4, #16]
 80089ca:	f003 0306 	and.w	r3, r3, #6
 80089ce:	2b04      	cmp	r3, #4
 80089d0:	bf02      	ittt	eq
 80089d2:	68e5      	ldreq	r5, [r4, #12]
 80089d4:	6833      	ldreq	r3, [r6, #0]
 80089d6:	1aed      	subeq	r5, r5, r3
 80089d8:	68a3      	ldr	r3, [r4, #8]
 80089da:	bf0c      	ite	eq
 80089dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089e0:	2500      	movne	r5, #0
 80089e2:	4293      	cmp	r3, r2
 80089e4:	bfc4      	itt	gt
 80089e6:	1a9b      	subgt	r3, r3, r2
 80089e8:	18ed      	addgt	r5, r5, r3
 80089ea:	2600      	movs	r6, #0
 80089ec:	341a      	adds	r4, #26
 80089ee:	42b5      	cmp	r5, r6
 80089f0:	d11a      	bne.n	8008a28 <_printf_common+0xc8>
 80089f2:	2000      	movs	r0, #0
 80089f4:	e008      	b.n	8008a08 <_printf_common+0xa8>
 80089f6:	2301      	movs	r3, #1
 80089f8:	4652      	mov	r2, sl
 80089fa:	4641      	mov	r1, r8
 80089fc:	4638      	mov	r0, r7
 80089fe:	47c8      	blx	r9
 8008a00:	3001      	adds	r0, #1
 8008a02:	d103      	bne.n	8008a0c <_printf_common+0xac>
 8008a04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a0c:	3501      	adds	r5, #1
 8008a0e:	e7c6      	b.n	800899e <_printf_common+0x3e>
 8008a10:	18e1      	adds	r1, r4, r3
 8008a12:	1c5a      	adds	r2, r3, #1
 8008a14:	2030      	movs	r0, #48	@ 0x30
 8008a16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a1a:	4422      	add	r2, r4
 8008a1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a24:	3302      	adds	r3, #2
 8008a26:	e7c7      	b.n	80089b8 <_printf_common+0x58>
 8008a28:	2301      	movs	r3, #1
 8008a2a:	4622      	mov	r2, r4
 8008a2c:	4641      	mov	r1, r8
 8008a2e:	4638      	mov	r0, r7
 8008a30:	47c8      	blx	r9
 8008a32:	3001      	adds	r0, #1
 8008a34:	d0e6      	beq.n	8008a04 <_printf_common+0xa4>
 8008a36:	3601      	adds	r6, #1
 8008a38:	e7d9      	b.n	80089ee <_printf_common+0x8e>
	...

08008a3c <_printf_i>:
 8008a3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a40:	7e0f      	ldrb	r7, [r1, #24]
 8008a42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a44:	2f78      	cmp	r7, #120	@ 0x78
 8008a46:	4691      	mov	r9, r2
 8008a48:	4680      	mov	r8, r0
 8008a4a:	460c      	mov	r4, r1
 8008a4c:	469a      	mov	sl, r3
 8008a4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a52:	d807      	bhi.n	8008a64 <_printf_i+0x28>
 8008a54:	2f62      	cmp	r7, #98	@ 0x62
 8008a56:	d80a      	bhi.n	8008a6e <_printf_i+0x32>
 8008a58:	2f00      	cmp	r7, #0
 8008a5a:	f000 80d1 	beq.w	8008c00 <_printf_i+0x1c4>
 8008a5e:	2f58      	cmp	r7, #88	@ 0x58
 8008a60:	f000 80b8 	beq.w	8008bd4 <_printf_i+0x198>
 8008a64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008a6c:	e03a      	b.n	8008ae4 <_printf_i+0xa8>
 8008a6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a72:	2b15      	cmp	r3, #21
 8008a74:	d8f6      	bhi.n	8008a64 <_printf_i+0x28>
 8008a76:	a101      	add	r1, pc, #4	@ (adr r1, 8008a7c <_printf_i+0x40>)
 8008a78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a7c:	08008ad5 	.word	0x08008ad5
 8008a80:	08008ae9 	.word	0x08008ae9
 8008a84:	08008a65 	.word	0x08008a65
 8008a88:	08008a65 	.word	0x08008a65
 8008a8c:	08008a65 	.word	0x08008a65
 8008a90:	08008a65 	.word	0x08008a65
 8008a94:	08008ae9 	.word	0x08008ae9
 8008a98:	08008a65 	.word	0x08008a65
 8008a9c:	08008a65 	.word	0x08008a65
 8008aa0:	08008a65 	.word	0x08008a65
 8008aa4:	08008a65 	.word	0x08008a65
 8008aa8:	08008be7 	.word	0x08008be7
 8008aac:	08008b13 	.word	0x08008b13
 8008ab0:	08008ba1 	.word	0x08008ba1
 8008ab4:	08008a65 	.word	0x08008a65
 8008ab8:	08008a65 	.word	0x08008a65
 8008abc:	08008c09 	.word	0x08008c09
 8008ac0:	08008a65 	.word	0x08008a65
 8008ac4:	08008b13 	.word	0x08008b13
 8008ac8:	08008a65 	.word	0x08008a65
 8008acc:	08008a65 	.word	0x08008a65
 8008ad0:	08008ba9 	.word	0x08008ba9
 8008ad4:	6833      	ldr	r3, [r6, #0]
 8008ad6:	1d1a      	adds	r2, r3, #4
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	6032      	str	r2, [r6, #0]
 8008adc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ae0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e09c      	b.n	8008c22 <_printf_i+0x1e6>
 8008ae8:	6833      	ldr	r3, [r6, #0]
 8008aea:	6820      	ldr	r0, [r4, #0]
 8008aec:	1d19      	adds	r1, r3, #4
 8008aee:	6031      	str	r1, [r6, #0]
 8008af0:	0606      	lsls	r6, r0, #24
 8008af2:	d501      	bpl.n	8008af8 <_printf_i+0xbc>
 8008af4:	681d      	ldr	r5, [r3, #0]
 8008af6:	e003      	b.n	8008b00 <_printf_i+0xc4>
 8008af8:	0645      	lsls	r5, r0, #25
 8008afa:	d5fb      	bpl.n	8008af4 <_printf_i+0xb8>
 8008afc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b00:	2d00      	cmp	r5, #0
 8008b02:	da03      	bge.n	8008b0c <_printf_i+0xd0>
 8008b04:	232d      	movs	r3, #45	@ 0x2d
 8008b06:	426d      	negs	r5, r5
 8008b08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b0c:	4858      	ldr	r0, [pc, #352]	@ (8008c70 <_printf_i+0x234>)
 8008b0e:	230a      	movs	r3, #10
 8008b10:	e011      	b.n	8008b36 <_printf_i+0xfa>
 8008b12:	6821      	ldr	r1, [r4, #0]
 8008b14:	6833      	ldr	r3, [r6, #0]
 8008b16:	0608      	lsls	r0, r1, #24
 8008b18:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b1c:	d402      	bmi.n	8008b24 <_printf_i+0xe8>
 8008b1e:	0649      	lsls	r1, r1, #25
 8008b20:	bf48      	it	mi
 8008b22:	b2ad      	uxthmi	r5, r5
 8008b24:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b26:	4852      	ldr	r0, [pc, #328]	@ (8008c70 <_printf_i+0x234>)
 8008b28:	6033      	str	r3, [r6, #0]
 8008b2a:	bf14      	ite	ne
 8008b2c:	230a      	movne	r3, #10
 8008b2e:	2308      	moveq	r3, #8
 8008b30:	2100      	movs	r1, #0
 8008b32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b36:	6866      	ldr	r6, [r4, #4]
 8008b38:	60a6      	str	r6, [r4, #8]
 8008b3a:	2e00      	cmp	r6, #0
 8008b3c:	db05      	blt.n	8008b4a <_printf_i+0x10e>
 8008b3e:	6821      	ldr	r1, [r4, #0]
 8008b40:	432e      	orrs	r6, r5
 8008b42:	f021 0104 	bic.w	r1, r1, #4
 8008b46:	6021      	str	r1, [r4, #0]
 8008b48:	d04b      	beq.n	8008be2 <_printf_i+0x1a6>
 8008b4a:	4616      	mov	r6, r2
 8008b4c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b50:	fb03 5711 	mls	r7, r3, r1, r5
 8008b54:	5dc7      	ldrb	r7, [r0, r7]
 8008b56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b5a:	462f      	mov	r7, r5
 8008b5c:	42bb      	cmp	r3, r7
 8008b5e:	460d      	mov	r5, r1
 8008b60:	d9f4      	bls.n	8008b4c <_printf_i+0x110>
 8008b62:	2b08      	cmp	r3, #8
 8008b64:	d10b      	bne.n	8008b7e <_printf_i+0x142>
 8008b66:	6823      	ldr	r3, [r4, #0]
 8008b68:	07df      	lsls	r7, r3, #31
 8008b6a:	d508      	bpl.n	8008b7e <_printf_i+0x142>
 8008b6c:	6923      	ldr	r3, [r4, #16]
 8008b6e:	6861      	ldr	r1, [r4, #4]
 8008b70:	4299      	cmp	r1, r3
 8008b72:	bfde      	ittt	le
 8008b74:	2330      	movle	r3, #48	@ 0x30
 8008b76:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b7a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008b7e:	1b92      	subs	r2, r2, r6
 8008b80:	6122      	str	r2, [r4, #16]
 8008b82:	f8cd a000 	str.w	sl, [sp]
 8008b86:	464b      	mov	r3, r9
 8008b88:	aa03      	add	r2, sp, #12
 8008b8a:	4621      	mov	r1, r4
 8008b8c:	4640      	mov	r0, r8
 8008b8e:	f7ff fee7 	bl	8008960 <_printf_common>
 8008b92:	3001      	adds	r0, #1
 8008b94:	d14a      	bne.n	8008c2c <_printf_i+0x1f0>
 8008b96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b9a:	b004      	add	sp, #16
 8008b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba0:	6823      	ldr	r3, [r4, #0]
 8008ba2:	f043 0320 	orr.w	r3, r3, #32
 8008ba6:	6023      	str	r3, [r4, #0]
 8008ba8:	4832      	ldr	r0, [pc, #200]	@ (8008c74 <_printf_i+0x238>)
 8008baa:	2778      	movs	r7, #120	@ 0x78
 8008bac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008bb0:	6823      	ldr	r3, [r4, #0]
 8008bb2:	6831      	ldr	r1, [r6, #0]
 8008bb4:	061f      	lsls	r7, r3, #24
 8008bb6:	f851 5b04 	ldr.w	r5, [r1], #4
 8008bba:	d402      	bmi.n	8008bc2 <_printf_i+0x186>
 8008bbc:	065f      	lsls	r7, r3, #25
 8008bbe:	bf48      	it	mi
 8008bc0:	b2ad      	uxthmi	r5, r5
 8008bc2:	6031      	str	r1, [r6, #0]
 8008bc4:	07d9      	lsls	r1, r3, #31
 8008bc6:	bf44      	itt	mi
 8008bc8:	f043 0320 	orrmi.w	r3, r3, #32
 8008bcc:	6023      	strmi	r3, [r4, #0]
 8008bce:	b11d      	cbz	r5, 8008bd8 <_printf_i+0x19c>
 8008bd0:	2310      	movs	r3, #16
 8008bd2:	e7ad      	b.n	8008b30 <_printf_i+0xf4>
 8008bd4:	4826      	ldr	r0, [pc, #152]	@ (8008c70 <_printf_i+0x234>)
 8008bd6:	e7e9      	b.n	8008bac <_printf_i+0x170>
 8008bd8:	6823      	ldr	r3, [r4, #0]
 8008bda:	f023 0320 	bic.w	r3, r3, #32
 8008bde:	6023      	str	r3, [r4, #0]
 8008be0:	e7f6      	b.n	8008bd0 <_printf_i+0x194>
 8008be2:	4616      	mov	r6, r2
 8008be4:	e7bd      	b.n	8008b62 <_printf_i+0x126>
 8008be6:	6833      	ldr	r3, [r6, #0]
 8008be8:	6825      	ldr	r5, [r4, #0]
 8008bea:	6961      	ldr	r1, [r4, #20]
 8008bec:	1d18      	adds	r0, r3, #4
 8008bee:	6030      	str	r0, [r6, #0]
 8008bf0:	062e      	lsls	r6, r5, #24
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	d501      	bpl.n	8008bfa <_printf_i+0x1be>
 8008bf6:	6019      	str	r1, [r3, #0]
 8008bf8:	e002      	b.n	8008c00 <_printf_i+0x1c4>
 8008bfa:	0668      	lsls	r0, r5, #25
 8008bfc:	d5fb      	bpl.n	8008bf6 <_printf_i+0x1ba>
 8008bfe:	8019      	strh	r1, [r3, #0]
 8008c00:	2300      	movs	r3, #0
 8008c02:	6123      	str	r3, [r4, #16]
 8008c04:	4616      	mov	r6, r2
 8008c06:	e7bc      	b.n	8008b82 <_printf_i+0x146>
 8008c08:	6833      	ldr	r3, [r6, #0]
 8008c0a:	1d1a      	adds	r2, r3, #4
 8008c0c:	6032      	str	r2, [r6, #0]
 8008c0e:	681e      	ldr	r6, [r3, #0]
 8008c10:	6862      	ldr	r2, [r4, #4]
 8008c12:	2100      	movs	r1, #0
 8008c14:	4630      	mov	r0, r6
 8008c16:	f7f7 fab3 	bl	8000180 <memchr>
 8008c1a:	b108      	cbz	r0, 8008c20 <_printf_i+0x1e4>
 8008c1c:	1b80      	subs	r0, r0, r6
 8008c1e:	6060      	str	r0, [r4, #4]
 8008c20:	6863      	ldr	r3, [r4, #4]
 8008c22:	6123      	str	r3, [r4, #16]
 8008c24:	2300      	movs	r3, #0
 8008c26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c2a:	e7aa      	b.n	8008b82 <_printf_i+0x146>
 8008c2c:	6923      	ldr	r3, [r4, #16]
 8008c2e:	4632      	mov	r2, r6
 8008c30:	4649      	mov	r1, r9
 8008c32:	4640      	mov	r0, r8
 8008c34:	47d0      	blx	sl
 8008c36:	3001      	adds	r0, #1
 8008c38:	d0ad      	beq.n	8008b96 <_printf_i+0x15a>
 8008c3a:	6823      	ldr	r3, [r4, #0]
 8008c3c:	079b      	lsls	r3, r3, #30
 8008c3e:	d413      	bmi.n	8008c68 <_printf_i+0x22c>
 8008c40:	68e0      	ldr	r0, [r4, #12]
 8008c42:	9b03      	ldr	r3, [sp, #12]
 8008c44:	4298      	cmp	r0, r3
 8008c46:	bfb8      	it	lt
 8008c48:	4618      	movlt	r0, r3
 8008c4a:	e7a6      	b.n	8008b9a <_printf_i+0x15e>
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	4632      	mov	r2, r6
 8008c50:	4649      	mov	r1, r9
 8008c52:	4640      	mov	r0, r8
 8008c54:	47d0      	blx	sl
 8008c56:	3001      	adds	r0, #1
 8008c58:	d09d      	beq.n	8008b96 <_printf_i+0x15a>
 8008c5a:	3501      	adds	r5, #1
 8008c5c:	68e3      	ldr	r3, [r4, #12]
 8008c5e:	9903      	ldr	r1, [sp, #12]
 8008c60:	1a5b      	subs	r3, r3, r1
 8008c62:	42ab      	cmp	r3, r5
 8008c64:	dcf2      	bgt.n	8008c4c <_printf_i+0x210>
 8008c66:	e7eb      	b.n	8008c40 <_printf_i+0x204>
 8008c68:	2500      	movs	r5, #0
 8008c6a:	f104 0619 	add.w	r6, r4, #25
 8008c6e:	e7f5      	b.n	8008c5c <_printf_i+0x220>
 8008c70:	080091e5 	.word	0x080091e5
 8008c74:	080091f6 	.word	0x080091f6

08008c78 <__sflush_r>:
 8008c78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c80:	0716      	lsls	r6, r2, #28
 8008c82:	4605      	mov	r5, r0
 8008c84:	460c      	mov	r4, r1
 8008c86:	d454      	bmi.n	8008d32 <__sflush_r+0xba>
 8008c88:	684b      	ldr	r3, [r1, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	dc02      	bgt.n	8008c94 <__sflush_r+0x1c>
 8008c8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	dd48      	ble.n	8008d26 <__sflush_r+0xae>
 8008c94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c96:	2e00      	cmp	r6, #0
 8008c98:	d045      	beq.n	8008d26 <__sflush_r+0xae>
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008ca0:	682f      	ldr	r7, [r5, #0]
 8008ca2:	6a21      	ldr	r1, [r4, #32]
 8008ca4:	602b      	str	r3, [r5, #0]
 8008ca6:	d030      	beq.n	8008d0a <__sflush_r+0x92>
 8008ca8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008caa:	89a3      	ldrh	r3, [r4, #12]
 8008cac:	0759      	lsls	r1, r3, #29
 8008cae:	d505      	bpl.n	8008cbc <__sflush_r+0x44>
 8008cb0:	6863      	ldr	r3, [r4, #4]
 8008cb2:	1ad2      	subs	r2, r2, r3
 8008cb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008cb6:	b10b      	cbz	r3, 8008cbc <__sflush_r+0x44>
 8008cb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008cba:	1ad2      	subs	r2, r2, r3
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008cc0:	6a21      	ldr	r1, [r4, #32]
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	47b0      	blx	r6
 8008cc6:	1c43      	adds	r3, r0, #1
 8008cc8:	89a3      	ldrh	r3, [r4, #12]
 8008cca:	d106      	bne.n	8008cda <__sflush_r+0x62>
 8008ccc:	6829      	ldr	r1, [r5, #0]
 8008cce:	291d      	cmp	r1, #29
 8008cd0:	d82b      	bhi.n	8008d2a <__sflush_r+0xb2>
 8008cd2:	4a2a      	ldr	r2, [pc, #168]	@ (8008d7c <__sflush_r+0x104>)
 8008cd4:	40ca      	lsrs	r2, r1
 8008cd6:	07d6      	lsls	r6, r2, #31
 8008cd8:	d527      	bpl.n	8008d2a <__sflush_r+0xb2>
 8008cda:	2200      	movs	r2, #0
 8008cdc:	6062      	str	r2, [r4, #4]
 8008cde:	04d9      	lsls	r1, r3, #19
 8008ce0:	6922      	ldr	r2, [r4, #16]
 8008ce2:	6022      	str	r2, [r4, #0]
 8008ce4:	d504      	bpl.n	8008cf0 <__sflush_r+0x78>
 8008ce6:	1c42      	adds	r2, r0, #1
 8008ce8:	d101      	bne.n	8008cee <__sflush_r+0x76>
 8008cea:	682b      	ldr	r3, [r5, #0]
 8008cec:	b903      	cbnz	r3, 8008cf0 <__sflush_r+0x78>
 8008cee:	6560      	str	r0, [r4, #84]	@ 0x54
 8008cf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cf2:	602f      	str	r7, [r5, #0]
 8008cf4:	b1b9      	cbz	r1, 8008d26 <__sflush_r+0xae>
 8008cf6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008cfa:	4299      	cmp	r1, r3
 8008cfc:	d002      	beq.n	8008d04 <__sflush_r+0x8c>
 8008cfe:	4628      	mov	r0, r5
 8008d00:	f7ff fbf4 	bl	80084ec <_free_r>
 8008d04:	2300      	movs	r3, #0
 8008d06:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d08:	e00d      	b.n	8008d26 <__sflush_r+0xae>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	4628      	mov	r0, r5
 8008d0e:	47b0      	blx	r6
 8008d10:	4602      	mov	r2, r0
 8008d12:	1c50      	adds	r0, r2, #1
 8008d14:	d1c9      	bne.n	8008caa <__sflush_r+0x32>
 8008d16:	682b      	ldr	r3, [r5, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d0c6      	beq.n	8008caa <__sflush_r+0x32>
 8008d1c:	2b1d      	cmp	r3, #29
 8008d1e:	d001      	beq.n	8008d24 <__sflush_r+0xac>
 8008d20:	2b16      	cmp	r3, #22
 8008d22:	d11e      	bne.n	8008d62 <__sflush_r+0xea>
 8008d24:	602f      	str	r7, [r5, #0]
 8008d26:	2000      	movs	r0, #0
 8008d28:	e022      	b.n	8008d70 <__sflush_r+0xf8>
 8008d2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d2e:	b21b      	sxth	r3, r3
 8008d30:	e01b      	b.n	8008d6a <__sflush_r+0xf2>
 8008d32:	690f      	ldr	r7, [r1, #16]
 8008d34:	2f00      	cmp	r7, #0
 8008d36:	d0f6      	beq.n	8008d26 <__sflush_r+0xae>
 8008d38:	0793      	lsls	r3, r2, #30
 8008d3a:	680e      	ldr	r6, [r1, #0]
 8008d3c:	bf08      	it	eq
 8008d3e:	694b      	ldreq	r3, [r1, #20]
 8008d40:	600f      	str	r7, [r1, #0]
 8008d42:	bf18      	it	ne
 8008d44:	2300      	movne	r3, #0
 8008d46:	eba6 0807 	sub.w	r8, r6, r7
 8008d4a:	608b      	str	r3, [r1, #8]
 8008d4c:	f1b8 0f00 	cmp.w	r8, #0
 8008d50:	dde9      	ble.n	8008d26 <__sflush_r+0xae>
 8008d52:	6a21      	ldr	r1, [r4, #32]
 8008d54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008d56:	4643      	mov	r3, r8
 8008d58:	463a      	mov	r2, r7
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	47b0      	blx	r6
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	dc08      	bgt.n	8008d74 <__sflush_r+0xfc>
 8008d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d6a:	81a3      	strh	r3, [r4, #12]
 8008d6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d74:	4407      	add	r7, r0
 8008d76:	eba8 0800 	sub.w	r8, r8, r0
 8008d7a:	e7e7      	b.n	8008d4c <__sflush_r+0xd4>
 8008d7c:	20400001 	.word	0x20400001

08008d80 <_fflush_r>:
 8008d80:	b538      	push	{r3, r4, r5, lr}
 8008d82:	690b      	ldr	r3, [r1, #16]
 8008d84:	4605      	mov	r5, r0
 8008d86:	460c      	mov	r4, r1
 8008d88:	b913      	cbnz	r3, 8008d90 <_fflush_r+0x10>
 8008d8a:	2500      	movs	r5, #0
 8008d8c:	4628      	mov	r0, r5
 8008d8e:	bd38      	pop	{r3, r4, r5, pc}
 8008d90:	b118      	cbz	r0, 8008d9a <_fflush_r+0x1a>
 8008d92:	6a03      	ldr	r3, [r0, #32]
 8008d94:	b90b      	cbnz	r3, 8008d9a <_fflush_r+0x1a>
 8008d96:	f7ff f943 	bl	8008020 <__sinit>
 8008d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d0f3      	beq.n	8008d8a <_fflush_r+0xa>
 8008da2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008da4:	07d0      	lsls	r0, r2, #31
 8008da6:	d404      	bmi.n	8008db2 <_fflush_r+0x32>
 8008da8:	0599      	lsls	r1, r3, #22
 8008daa:	d402      	bmi.n	8008db2 <_fflush_r+0x32>
 8008dac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008dae:	f7ff fb8c 	bl	80084ca <__retarget_lock_acquire_recursive>
 8008db2:	4628      	mov	r0, r5
 8008db4:	4621      	mov	r1, r4
 8008db6:	f7ff ff5f 	bl	8008c78 <__sflush_r>
 8008dba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008dbc:	07da      	lsls	r2, r3, #31
 8008dbe:	4605      	mov	r5, r0
 8008dc0:	d4e4      	bmi.n	8008d8c <_fflush_r+0xc>
 8008dc2:	89a3      	ldrh	r3, [r4, #12]
 8008dc4:	059b      	lsls	r3, r3, #22
 8008dc6:	d4e1      	bmi.n	8008d8c <_fflush_r+0xc>
 8008dc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008dca:	f7ff fb7f 	bl	80084cc <__retarget_lock_release_recursive>
 8008dce:	e7dd      	b.n	8008d8c <_fflush_r+0xc>

08008dd0 <__swhatbuf_r>:
 8008dd0:	b570      	push	{r4, r5, r6, lr}
 8008dd2:	460c      	mov	r4, r1
 8008dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dd8:	2900      	cmp	r1, #0
 8008dda:	b096      	sub	sp, #88	@ 0x58
 8008ddc:	4615      	mov	r5, r2
 8008dde:	461e      	mov	r6, r3
 8008de0:	da0d      	bge.n	8008dfe <__swhatbuf_r+0x2e>
 8008de2:	89a3      	ldrh	r3, [r4, #12]
 8008de4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008de8:	f04f 0100 	mov.w	r1, #0
 8008dec:	bf14      	ite	ne
 8008dee:	2340      	movne	r3, #64	@ 0x40
 8008df0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008df4:	2000      	movs	r0, #0
 8008df6:	6031      	str	r1, [r6, #0]
 8008df8:	602b      	str	r3, [r5, #0]
 8008dfa:	b016      	add	sp, #88	@ 0x58
 8008dfc:	bd70      	pop	{r4, r5, r6, pc}
 8008dfe:	466a      	mov	r2, sp
 8008e00:	f000 f848 	bl	8008e94 <_fstat_r>
 8008e04:	2800      	cmp	r0, #0
 8008e06:	dbec      	blt.n	8008de2 <__swhatbuf_r+0x12>
 8008e08:	9901      	ldr	r1, [sp, #4]
 8008e0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e12:	4259      	negs	r1, r3
 8008e14:	4159      	adcs	r1, r3
 8008e16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e1a:	e7eb      	b.n	8008df4 <__swhatbuf_r+0x24>

08008e1c <__smakebuf_r>:
 8008e1c:	898b      	ldrh	r3, [r1, #12]
 8008e1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e20:	079d      	lsls	r5, r3, #30
 8008e22:	4606      	mov	r6, r0
 8008e24:	460c      	mov	r4, r1
 8008e26:	d507      	bpl.n	8008e38 <__smakebuf_r+0x1c>
 8008e28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008e2c:	6023      	str	r3, [r4, #0]
 8008e2e:	6123      	str	r3, [r4, #16]
 8008e30:	2301      	movs	r3, #1
 8008e32:	6163      	str	r3, [r4, #20]
 8008e34:	b003      	add	sp, #12
 8008e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e38:	ab01      	add	r3, sp, #4
 8008e3a:	466a      	mov	r2, sp
 8008e3c:	f7ff ffc8 	bl	8008dd0 <__swhatbuf_r>
 8008e40:	9f00      	ldr	r7, [sp, #0]
 8008e42:	4605      	mov	r5, r0
 8008e44:	4639      	mov	r1, r7
 8008e46:	4630      	mov	r0, r6
 8008e48:	f7ff fbbc 	bl	80085c4 <_malloc_r>
 8008e4c:	b948      	cbnz	r0, 8008e62 <__smakebuf_r+0x46>
 8008e4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e52:	059a      	lsls	r2, r3, #22
 8008e54:	d4ee      	bmi.n	8008e34 <__smakebuf_r+0x18>
 8008e56:	f023 0303 	bic.w	r3, r3, #3
 8008e5a:	f043 0302 	orr.w	r3, r3, #2
 8008e5e:	81a3      	strh	r3, [r4, #12]
 8008e60:	e7e2      	b.n	8008e28 <__smakebuf_r+0xc>
 8008e62:	89a3      	ldrh	r3, [r4, #12]
 8008e64:	6020      	str	r0, [r4, #0]
 8008e66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e6a:	81a3      	strh	r3, [r4, #12]
 8008e6c:	9b01      	ldr	r3, [sp, #4]
 8008e6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008e72:	b15b      	cbz	r3, 8008e8c <__smakebuf_r+0x70>
 8008e74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e78:	4630      	mov	r0, r6
 8008e7a:	f000 f81d 	bl	8008eb8 <_isatty_r>
 8008e7e:	b128      	cbz	r0, 8008e8c <__smakebuf_r+0x70>
 8008e80:	89a3      	ldrh	r3, [r4, #12]
 8008e82:	f023 0303 	bic.w	r3, r3, #3
 8008e86:	f043 0301 	orr.w	r3, r3, #1
 8008e8a:	81a3      	strh	r3, [r4, #12]
 8008e8c:	89a3      	ldrh	r3, [r4, #12]
 8008e8e:	431d      	orrs	r5, r3
 8008e90:	81a5      	strh	r5, [r4, #12]
 8008e92:	e7cf      	b.n	8008e34 <__smakebuf_r+0x18>

08008e94 <_fstat_r>:
 8008e94:	b538      	push	{r3, r4, r5, lr}
 8008e96:	4d07      	ldr	r5, [pc, #28]	@ (8008eb4 <_fstat_r+0x20>)
 8008e98:	2300      	movs	r3, #0
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	4608      	mov	r0, r1
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	602b      	str	r3, [r5, #0]
 8008ea2:	f7f7 ff8e 	bl	8000dc2 <_fstat>
 8008ea6:	1c43      	adds	r3, r0, #1
 8008ea8:	d102      	bne.n	8008eb0 <_fstat_r+0x1c>
 8008eaa:	682b      	ldr	r3, [r5, #0]
 8008eac:	b103      	cbz	r3, 8008eb0 <_fstat_r+0x1c>
 8008eae:	6023      	str	r3, [r4, #0]
 8008eb0:	bd38      	pop	{r3, r4, r5, pc}
 8008eb2:	bf00      	nop
 8008eb4:	20001d40 	.word	0x20001d40

08008eb8 <_isatty_r>:
 8008eb8:	b538      	push	{r3, r4, r5, lr}
 8008eba:	4d06      	ldr	r5, [pc, #24]	@ (8008ed4 <_isatty_r+0x1c>)
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	4604      	mov	r4, r0
 8008ec0:	4608      	mov	r0, r1
 8008ec2:	602b      	str	r3, [r5, #0]
 8008ec4:	f7f7 ff8d 	bl	8000de2 <_isatty>
 8008ec8:	1c43      	adds	r3, r0, #1
 8008eca:	d102      	bne.n	8008ed2 <_isatty_r+0x1a>
 8008ecc:	682b      	ldr	r3, [r5, #0]
 8008ece:	b103      	cbz	r3, 8008ed2 <_isatty_r+0x1a>
 8008ed0:	6023      	str	r3, [r4, #0]
 8008ed2:	bd38      	pop	{r3, r4, r5, pc}
 8008ed4:	20001d40 	.word	0x20001d40

08008ed8 <_sbrk_r>:
 8008ed8:	b538      	push	{r3, r4, r5, lr}
 8008eda:	4d06      	ldr	r5, [pc, #24]	@ (8008ef4 <_sbrk_r+0x1c>)
 8008edc:	2300      	movs	r3, #0
 8008ede:	4604      	mov	r4, r0
 8008ee0:	4608      	mov	r0, r1
 8008ee2:	602b      	str	r3, [r5, #0]
 8008ee4:	f7f7 ff96 	bl	8000e14 <_sbrk>
 8008ee8:	1c43      	adds	r3, r0, #1
 8008eea:	d102      	bne.n	8008ef2 <_sbrk_r+0x1a>
 8008eec:	682b      	ldr	r3, [r5, #0]
 8008eee:	b103      	cbz	r3, 8008ef2 <_sbrk_r+0x1a>
 8008ef0:	6023      	str	r3, [r4, #0]
 8008ef2:	bd38      	pop	{r3, r4, r5, pc}
 8008ef4:	20001d40 	.word	0x20001d40

08008ef8 <_init>:
 8008ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008efa:	bf00      	nop
 8008efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008efe:	bc08      	pop	{r3}
 8008f00:	469e      	mov	lr, r3
 8008f02:	4770      	bx	lr

08008f04 <_fini>:
 8008f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f06:	bf00      	nop
 8008f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f0a:	bc08      	pop	{r3}
 8008f0c:	469e      	mov	lr, r3
 8008f0e:	4770      	bx	lr
