
V2X_OBU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008728  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08008868  08008868  00009868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008c78  08008c78  00009c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008c80  08008c80  00009c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008c84  08008c84  00009c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  20000008  08008c88  0000a008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001d10  20000080  08008d00  0000a080  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001d90  08008d00  0000ad90  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021ebf  00000000  00000000  0000a0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000044fe  00000000  00000000  0002bf6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000020e0  00000000  00000000  00030470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001952  00000000  00000000  00032550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000052f8  00000000  00000000  00033ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d7c6  00000000  00000000  0003919a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ee290  00000000  00000000  00056960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00144bf0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009398  00000000  00000000  00144c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  0014dfcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000080 	.word	0x20000080
 800015c:	00000000 	.word	0x00000000
 8000160:	08008850 	.word	0x08008850

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000084 	.word	0x20000084
 800017c:	08008850 	.word	0x08008850

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000554:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000558:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800055c:	f003 0301 	and.w	r3, r3, #1
 8000560:	2b00      	cmp	r3, #0
 8000562:	d013      	beq.n	800058c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000564:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000568:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800056c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000570:	2b00      	cmp	r3, #0
 8000572:	d00b      	beq.n	800058c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000574:	e000      	b.n	8000578 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000576:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000578:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d0f9      	beq.n	8000576 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000582:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	b2d2      	uxtb	r2, r2
 800058a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800058c:	687b      	ldr	r3, [r7, #4]
}
 800058e:	4618      	mov	r0, r3
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800059a:	b480      	push	{r7}
 800059c:	b085      	sub	sp, #20
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4313      	orrs	r3, r2
 80005b0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4013      	ands	r3, r2
 80005bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005be:	68fb      	ldr	r3, [r7, #12]
}
 80005c0:	bf00      	nop
 80005c2:	3714      	adds	r7, #20
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <ValidateReceivedData>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//THIS IS TO VALIDATE RECEIVED DATA frome ESP-NOW 
uint8_t ValidateReceivedData(Item *data) {
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
    // Check if at least one byte of MAC address is non-zero
    for (int i = 0; i < 6; i++) {
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	e00b      	b.n	80005f2 <ValidateReceivedData+0x26>
        if (data->MacAddress[i] != 0) {
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4413      	add	r3, r2
 80005e0:	3304      	adds	r3, #4
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <ValidateReceivedData+0x20>
            return 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	e006      	b.n	80005fa <ValidateReceivedData+0x2e>
    for (int i = 0; i < 6; i++) {
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	3301      	adds	r3, #1
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	2b05      	cmp	r3, #5
 80005f6:	ddf0      	ble.n	80005da <ValidateReceivedData+0xe>
        }
    }
    return 0;
 80005f8:	2300      	movs	r3, #0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <ValidateReceivedCANData>:

//THIS IS TO VALIDATE RECEIVED DATA frome CAN
uint8_t ValidateReceivedCANData(CANFrame *data) {
 8000606:	b480      	push	{r7}
 8000608:	b083      	sub	sp, #12
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
    if (data->can_id == 0 || data->dlc > 8) {
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d003      	beq.n	800061e <ValidateReceivedCANData+0x18>
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	791b      	ldrb	r3, [r3, #4]
 800061a:	2b08      	cmp	r3, #8
 800061c:	d901      	bls.n	8000622 <ValidateReceivedCANData+0x1c>
        return 0;  // Invalid
 800061e:	2300      	movs	r3, #0
 8000620:	e000      	b.n	8000624 <ValidateReceivedCANData+0x1e>
    }
    return 1; // Accept
 8000622:	2301      	movs	r3, #1
}
 8000624:	4618      	mov	r0, r3
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000634:	f000 ff3a 	bl	80014ac <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000638:	f000 f874 	bl	8000724 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800063c:	f000 f8ca 	bl	80007d4 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000640:	f000 f97e 	bl	8000940 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000644:	f000 f930 	bl	80008a8 <MX_USART1_UART_Init>
  MX_LPUART1_UART_Init();
 8000648:	f000 f8e2 	bl	8000810 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("STM32 will start receiving Item struct data via USART and LPUART...\n");
 800064c:	4826      	ldr	r0, [pc, #152]	@ (80006e8 <main+0xb8>)
 800064e:	f007 f9fd 	bl	8007a4c <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000652:	f004 fadd 	bl	8004c10 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_TIMERS */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  UARTQueue = xQueueCreate(10, sizeof(Item));  // Increased queue size
 8000656:	2200      	movs	r2, #0
 8000658:	210c      	movs	r1, #12
 800065a:	200a      	movs	r0, #10
 800065c:	f004 fd9f 	bl	800519e <xQueueGenericCreate>
 8000660:	4603      	mov	r3, r0
 8000662:	4a22      	ldr	r2, [pc, #136]	@ (80006ec <main+0xbc>)
 8000664:	6013      	str	r3, [r2, #0]
  if (UARTQueue == NULL) {
 8000666:	4b21      	ldr	r3, [pc, #132]	@ (80006ec <main+0xbc>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d101      	bne.n	8000672 <main+0x42>
      Error_Handler(); // Handle queue creation failure
 800066e:	f000 fb84 	bl	8000d7a <Error_Handler>
  }
  UARTQueue2 = xQueueCreate(10, sizeof(CANFrame));  // Increased queue size
 8000672:	2200      	movs	r2, #0
 8000674:	2110      	movs	r1, #16
 8000676:	200a      	movs	r0, #10
 8000678:	f004 fd91 	bl	800519e <xQueueGenericCreate>
 800067c:	4603      	mov	r3, r0
 800067e:	4a1c      	ldr	r2, [pc, #112]	@ (80006f0 <main+0xc0>)
 8000680:	6013      	str	r3, [r2, #0]
  if (UARTQueue2 == NULL) {
 8000682:	4b1b      	ldr	r3, [pc, #108]	@ (80006f0 <main+0xc0>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d101      	bne.n	800068e <main+0x5e>
      Error_Handler(); // Handle queue creation failure
 800068a:	f000 fb76 	bl	8000d7a <Error_Handler>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of SenderTask */
  SenderTaskHandle = osThreadNew(StartSenderTask, NULL, &SenderTask_attributes);
 800068e:	4a19      	ldr	r2, [pc, #100]	@ (80006f4 <main+0xc4>)
 8000690:	2100      	movs	r1, #0
 8000692:	4819      	ldr	r0, [pc, #100]	@ (80006f8 <main+0xc8>)
 8000694:	f004 fb06 	bl	8004ca4 <osThreadNew>
 8000698:	4603      	mov	r3, r0
 800069a:	4a18      	ldr	r2, [pc, #96]	@ (80006fc <main+0xcc>)
 800069c:	6013      	str	r3, [r2, #0]

  /* creation of TskUART */
  TskUARTHandle = osThreadNew(StartTskUART, NULL, &TskUART_attributes);
 800069e:	4a18      	ldr	r2, [pc, #96]	@ (8000700 <main+0xd0>)
 80006a0:	2100      	movs	r1, #0
 80006a2:	4818      	ldr	r0, [pc, #96]	@ (8000704 <main+0xd4>)
 80006a4:	f004 fafe 	bl	8004ca4 <osThreadNew>
 80006a8:	4603      	mov	r3, r0
 80006aa:	4a17      	ldr	r2, [pc, #92]	@ (8000708 <main+0xd8>)
 80006ac:	6013      	str	r3, [r2, #0]

  /* creation of SenderTask2 */
  SenderTask2Handle = osThreadNew(StartSenderTask2, NULL, &SenderTask2_attributes);
 80006ae:	4a17      	ldr	r2, [pc, #92]	@ (800070c <main+0xdc>)
 80006b0:	2100      	movs	r1, #0
 80006b2:	4817      	ldr	r0, [pc, #92]	@ (8000710 <main+0xe0>)
 80006b4:	f004 faf6 	bl	8004ca4 <osThreadNew>
 80006b8:	4603      	mov	r3, r0
 80006ba:	4a16      	ldr	r2, [pc, #88]	@ (8000714 <main+0xe4>)
 80006bc:	6013      	str	r3, [r2, #0]

  /* creation of TskUART2 */
  TskUART2Handle = osThreadNew(StartTskUART2, NULL, &TskUART2_attributes);
 80006be:	4a16      	ldr	r2, [pc, #88]	@ (8000718 <main+0xe8>)
 80006c0:	2100      	movs	r1, #0
 80006c2:	4816      	ldr	r0, [pc, #88]	@ (800071c <main+0xec>)
 80006c4:	f004 faee 	bl	8004ca4 <osThreadNew>
 80006c8:	4603      	mov	r3, r0
 80006ca:	4a15      	ldr	r2, [pc, #84]	@ (8000720 <main+0xf0>)
 80006cc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 80006ce:	2000      	movs	r0, #0
 80006d0:	f000 fe64 	bl	800139c <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80006d4:	2001      	movs	r0, #1
 80006d6:	f000 fe61 	bl	800139c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80006da:	2002      	movs	r0, #2
 80006dc:	f000 fe5e 	bl	800139c <BSP_LED_Init>

  /* Start scheduler */
  osKernelStart();
 80006e0:	f004 faba 	bl	8004c58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <main+0xb4>
 80006e8:	08008894 	.word	0x08008894
 80006ec:	20000200 	.word	0x20000200
 80006f0:	20000204 	.word	0x20000204
 80006f4:	08008ae4 	.word	0x08008ae4
 80006f8:	08000a05 	.word	0x08000a05
 80006fc:	200001e0 	.word	0x200001e0
 8000700:	08008b08 	.word	0x08008b08
 8000704:	08000b21 	.word	0x08000b21
 8000708:	200001e4 	.word	0x200001e4
 800070c:	08008b2c 	.word	0x08008b2c
 8000710:	08000c11 	.word	0x08000c11
 8000714:	200001e8 	.word	0x200001e8
 8000718:	08008b50 	.word	0x08008b50
 800071c:	08000c7d 	.word	0x08000c7d
 8000720:	200001ec 	.word	0x200001ec

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b09a      	sub	sp, #104	@ 0x68
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	2248      	movs	r2, #72	@ 0x48
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f007 fa6a 	bl	8007c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
 8000746:	615a      	str	r2, [r3, #20]
 8000748:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800074a:	4b21      	ldr	r3, [pc, #132]	@ (80007d0 <SystemClock_Config+0xac>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000752:	4a1f      	ldr	r2, [pc, #124]	@ (80007d0 <SystemClock_Config+0xac>)
 8000754:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000758:	6013      	str	r3, [r2, #0]
 800075a:	4b1d      	ldr	r3, [pc, #116]	@ (80007d0 <SystemClock_Config+0xac>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000766:	2322      	movs	r3, #34	@ 0x22
 8000768:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800076e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000770:	2301      	movs	r3, #1
 8000772:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000774:	2340      	movs	r3, #64	@ 0x40
 8000776:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000778:	2300      	movs	r3, #0
 800077a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 800077c:	23a0      	movs	r3, #160	@ 0xa0
 800077e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000780:	2300      	movs	r3, #0
 8000782:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f107 0320 	add.w	r3, r7, #32
 8000788:	4618      	mov	r0, r3
 800078a:	f001 fddb 	bl	8002344 <HAL_RCC_OscConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000794:	f000 faf1 	bl	8000d7a <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000798:	236f      	movs	r3, #111	@ 0x6f
 800079a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2101      	movs	r1, #1
 80007b8:	4618      	mov	r0, r3
 80007ba:	f002 f937 	bl	8002a2c <HAL_RCC_ClockConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80007c4:	f000 fad9 	bl	8000d7a <Error_Handler>
  }
}
 80007c8:	bf00      	nop
 80007ca:	3768      	adds	r7, #104	@ 0x68
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	58000400 	.word	0x58000400

080007d4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b094      	sub	sp, #80	@ 0x50
 80007d8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007da:	463b      	mov	r3, r7
 80007dc:	2250      	movs	r2, #80	@ 0x50
 80007de:	2100      	movs	r1, #0
 80007e0:	4618      	mov	r0, r3
 80007e2:	f007 fa13 	bl	8007c0c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80007e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007ea:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80007ec:	2300      	movs	r3, #0
 80007ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007f4:	463b      	mov	r3, r7
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 fd87 	bl	800330a <HAL_RCCEx_PeriphCLKConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000802:	f000 faba 	bl	8000d7a <Error_Handler>
  }
  /* USER CODE BEGIN Smps */
  /* USER CODE END Smps */
}
 8000806:	bf00      	nop
 8000808:	3750      	adds	r7, #80	@ 0x50
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000814:	4b22      	ldr	r3, [pc, #136]	@ (80008a0 <MX_LPUART1_UART_Init+0x90>)
 8000816:	4a23      	ldr	r2, [pc, #140]	@ (80008a4 <MX_LPUART1_UART_Init+0x94>)
 8000818:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800081a:	4b21      	ldr	r3, [pc, #132]	@ (80008a0 <MX_LPUART1_UART_Init+0x90>)
 800081c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000820:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b1f      	ldr	r3, [pc, #124]	@ (80008a0 <MX_LPUART1_UART_Init+0x90>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b1d      	ldr	r3, [pc, #116]	@ (80008a0 <MX_LPUART1_UART_Init+0x90>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800082e:	4b1c      	ldr	r3, [pc, #112]	@ (80008a0 <MX_LPUART1_UART_Init+0x90>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b1a      	ldr	r3, [pc, #104]	@ (80008a0 <MX_LPUART1_UART_Init+0x90>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <MX_LPUART1_UART_Init+0x90>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000840:	4b17      	ldr	r3, [pc, #92]	@ (80008a0 <MX_LPUART1_UART_Init+0x90>)
 8000842:	2200      	movs	r2, #0
 8000844:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000846:	4b16      	ldr	r3, [pc, #88]	@ (80008a0 <MX_LPUART1_UART_Init+0x90>)
 8000848:	2200      	movs	r2, #0
 800084a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800084c:	4b14      	ldr	r3, [pc, #80]	@ (80008a0 <MX_LPUART1_UART_Init+0x90>)
 800084e:	2200      	movs	r2, #0
 8000850:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000852:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <MX_LPUART1_UART_Init+0x90>)
 8000854:	2200      	movs	r2, #0
 8000856:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000858:	4811      	ldr	r0, [pc, #68]	@ (80008a0 <MX_LPUART1_UART_Init+0x90>)
 800085a:	f003 fa65 	bl	8003d28 <HAL_UART_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000864:	f000 fa89 	bl	8000d7a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000868:	2100      	movs	r1, #0
 800086a:	480d      	ldr	r0, [pc, #52]	@ (80008a0 <MX_LPUART1_UART_Init+0x90>)
 800086c:	f004 f8c2 	bl	80049f4 <HAL_UARTEx_SetTxFifoThreshold>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000876:	f000 fa80 	bl	8000d7a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800087a:	2100      	movs	r1, #0
 800087c:	4808      	ldr	r0, [pc, #32]	@ (80008a0 <MX_LPUART1_UART_Init+0x90>)
 800087e:	f004 f8f7 	bl	8004a70 <HAL_UARTEx_SetRxFifoThreshold>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000888:	f000 fa77 	bl	8000d7a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800088c:	4804      	ldr	r0, [pc, #16]	@ (80008a0 <MX_LPUART1_UART_Init+0x90>)
 800088e:	f004 f878 	bl	8004982 <HAL_UARTEx_DisableFifoMode>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000898:	f000 fa6f 	bl	8000d7a <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200000b8 	.word	0x200000b8
 80008a4:	40008000 	.word	0x40008000

080008a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008ac:	4b22      	ldr	r3, [pc, #136]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008ae:	4a23      	ldr	r2, [pc, #140]	@ (800093c <MX_USART1_UART_Init+0x94>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008b2:	4b21      	ldr	r3, [pc, #132]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b17      	ldr	r3, [pc, #92]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008de:	4b16      	ldr	r3, [pc, #88]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008e4:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ea:	4b13      	ldr	r3, [pc, #76]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008f0:	4811      	ldr	r0, [pc, #68]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008f2:	f003 fa19 	bl	8003d28 <HAL_UART_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008fc:	f000 fa3d 	bl	8000d7a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000900:	2100      	movs	r1, #0
 8000902:	480d      	ldr	r0, [pc, #52]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 8000904:	f004 f876 	bl	80049f4 <HAL_UARTEx_SetTxFifoThreshold>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800090e:	f000 fa34 	bl	8000d7a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000912:	2100      	movs	r1, #0
 8000914:	4808      	ldr	r0, [pc, #32]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 8000916:	f004 f8ab 	bl	8004a70 <HAL_UARTEx_SetRxFifoThreshold>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000920:	f000 fa2b 	bl	8000d7a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000924:	4804      	ldr	r0, [pc, #16]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 8000926:	f004 f82c 	bl	8004982 <HAL_UARTEx_DisableFifoMode>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000930:	f000 fa23 	bl	8000d7a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	2000014c 	.word	0x2000014c
 800093c:	40013800 	.word	0x40013800

08000940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000954:	2004      	movs	r0, #4
 8000956:	f7ff fe20 	bl	800059a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2001      	movs	r0, #1
 800095c:	f7ff fe1d 	bl	800059a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000960:	2002      	movs	r0, #2
 8000962:	f7ff fe1a 	bl	800059a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000966:	2008      	movs	r0, #8
 8000968:	f7ff fe17 	bl	800059a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800096c:	2310      	movs	r3, #16
 800096e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000970:	2300      	movs	r3, #0
 8000972:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	4619      	mov	r1, r3
 800097c:	4811      	ldr	r0, [pc, #68]	@ (80009c4 <MX_GPIO_Init+0x84>)
 800097e:	f000 fec1 	bl	8001704 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8000982:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000986:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000994:	230a      	movs	r3, #10
 8000996:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	4619      	mov	r1, r3
 800099c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a0:	f000 feb0 	bl	8001704 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80009a4:	2303      	movs	r3, #3
 80009a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	4619      	mov	r1, r3
 80009b4:	4804      	ldr	r0, [pc, #16]	@ (80009c8 <MX_GPIO_Init+0x88>)
 80009b6:	f000 fea5 	bl	8001704 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80009ba:	bf00      	nop
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	48000800 	.word	0x48000800
 80009c8:	48000c00 	.word	0x48000c00

080009cc <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	e009      	b.n	80009f2 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	1c5a      	adds	r2, r3, #1
 80009e2:	60ba      	str	r2, [r7, #8]
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fdb0 	bl	800054c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	3301      	adds	r3, #1
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	697a      	ldr	r2, [r7, #20]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	dbf1      	blt.n	80009de <_write+0x12>
  }
  return len;
 80009fa:	687b      	ldr	r3, [r7, #4]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3718      	adds	r7, #24
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <StartSenderTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSenderTask */
void StartSenderTask(void *argument)
{
 8000a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a06:	b091      	sub	sp, #68	@ 0x44
 8000a08:	af04      	add	r7, sp, #16
 8000a0a:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	// Check if we have received data to process
	if (xQueueReceive(UARTQueue, &receivedItem, 0) == pdTRUE) {
 8000a0c:	4b3c      	ldr	r3, [pc, #240]	@ (8000b00 <StartSenderTask+0xfc>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f107 0110 	add.w	r1, r7, #16
 8000a14:	2200      	movs	r2, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f004 fdc0 	bl	800559c <xQueueReceive>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d114      	bne.n	8000a4c <StartSenderTask+0x48>
	  printf("Received from ESP32 - Value: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 8000a22:	6939      	ldr	r1, [r7, #16]
			 receivedItem.value,
			 receivedItem.MacAddress[0], receivedItem.MacAddress[1], receivedItem.MacAddress[2],
 8000a24:	7d3b      	ldrb	r3, [r7, #20]
	  printf("Received from ESP32 - Value: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 8000a26:	461d      	mov	r5, r3
			 receivedItem.MacAddress[0], receivedItem.MacAddress[1], receivedItem.MacAddress[2],
 8000a28:	7d7b      	ldrb	r3, [r7, #21]
	  printf("Received from ESP32 - Value: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 8000a2a:	461e      	mov	r6, r3
			 receivedItem.MacAddress[0], receivedItem.MacAddress[1], receivedItem.MacAddress[2],
 8000a2c:	7dbb      	ldrb	r3, [r7, #22]
			 receivedItem.MacAddress[3], receivedItem.MacAddress[4], receivedItem.MacAddress[5]);
 8000a2e:	7dfa      	ldrb	r2, [r7, #23]
 8000a30:	7e38      	ldrb	r0, [r7, #24]
 8000a32:	7e7c      	ldrb	r4, [r7, #25]
	  printf("Received from ESP32 - Value: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 8000a34:	9403      	str	r4, [sp, #12]
 8000a36:	9002      	str	r0, [sp, #8]
 8000a38:	9201      	str	r2, [sp, #4]
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	4633      	mov	r3, r6
 8000a3e:	462a      	mov	r2, r5
 8000a40:	4830      	ldr	r0, [pc, #192]	@ (8000b04 <StartSenderTask+0x100>)
 8000a42:	f006 ff93 	bl	800796c <iprintf>
	  osDelay(100);
 8000a46:	2064      	movs	r0, #100	@ 0x64
 8000a48:	f004 f9be 	bl	8004dc8 <osDelay>
	}

	// Send data to ESP32 periodically
	uint32_t current_time = HAL_GetTick();
 8000a4c:	f000 fd62 	bl	8001514 <HAL_GetTick>
 8000a50:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (current_time - last_tx_time >= UART_TX_INTERVAL) {
 8000a52:	4b2d      	ldr	r3, [pc, #180]	@ (8000b08 <StartSenderTask+0x104>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000a5e:	d34b      	bcc.n	8000af8 <StartSenderTask+0xf4>
	  // Prepare data to send
	  itemToSend.value = ++message_counter;
 8000a60:	4b2a      	ldr	r3, [pc, #168]	@ (8000b0c <StartSenderTask+0x108>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	3301      	adds	r3, #1
 8000a66:	4a29      	ldr	r2, [pc, #164]	@ (8000b0c <StartSenderTask+0x108>)
 8000a68:	6013      	str	r3, [r2, #0]
 8000a6a:	4b28      	ldr	r3, [pc, #160]	@ (8000b0c <StartSenderTask+0x108>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	61fb      	str	r3, [r7, #28]
	  uint8_t stm32_mac[6] = {0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF}; // Dummy STM32 MAC
 8000a70:	4a27      	ldr	r2, [pc, #156]	@ (8000b10 <StartSenderTask+0x10c>)
 8000a72:	f107 0308 	add.w	r3, r7, #8
 8000a76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a7a:	6018      	str	r0, [r3, #0]
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	8019      	strh	r1, [r3, #0]
	  memcpy(itemToSend.MacAddress, stm32_mac, 6);
 8000a80:	f107 0320 	add.w	r3, r7, #32
 8000a84:	f107 0208 	add.w	r2, r7, #8
 8000a88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a8c:	6018      	str	r0, [r3, #0]
 8000a8e:	3304      	adds	r3, #4
 8000a90:	8019      	strh	r1, [r3, #0]

	  // Send struct data
	  HAL_StatusTypeDef status = HAL_UART_Transmit(&hlpuart1, (uint8_t*)&itemToSend, sizeof(Item), 100);
 8000a92:	f107 011c 	add.w	r1, r7, #28
 8000a96:	2364      	movs	r3, #100	@ 0x64
 8000a98:	220c      	movs	r2, #12
 8000a9a:	481e      	ldr	r0, [pc, #120]	@ (8000b14 <StartSenderTask+0x110>)
 8000a9c:	f003 f9d3 	bl	8003e46 <HAL_UART_Transmit>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

	  if (status == HAL_OK) {
 8000aa6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d11e      	bne.n	8000aec <StartSenderTask+0xe8>

		printf("Sent to ESP32 - Value: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 8000aae:	69f9      	ldr	r1, [r7, #28]
			   itemToSend.value,
			   itemToSend.MacAddress[0], itemToSend.MacAddress[1], itemToSend.MacAddress[2],
 8000ab0:	f897 3020 	ldrb.w	r3, [r7, #32]
		printf("Sent to ESP32 - Value: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 8000ab4:	461d      	mov	r5, r3
			   itemToSend.MacAddress[0], itemToSend.MacAddress[1], itemToSend.MacAddress[2],
 8000ab6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
		printf("Sent to ESP32 - Value: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 8000aba:	461e      	mov	r6, r3
			   itemToSend.MacAddress[0], itemToSend.MacAddress[1], itemToSend.MacAddress[2],
 8000abc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
			   itemToSend.MacAddress[3], itemToSend.MacAddress[4], itemToSend.MacAddress[5]);
 8000ac0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000ac4:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8000ac8:	f897 4025 	ldrb.w	r4, [r7, #37]	@ 0x25
		printf("Sent to ESP32 - Value: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 8000acc:	9403      	str	r4, [sp, #12]
 8000ace:	9002      	str	r0, [sp, #8]
 8000ad0:	9201      	str	r2, [sp, #4]
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	4633      	mov	r3, r6
 8000ad6:	462a      	mov	r2, r5
 8000ad8:	480f      	ldr	r0, [pc, #60]	@ (8000b18 <StartSenderTask+0x114>)
 8000ada:	f006 ff47 	bl	800796c <iprintf>
		BSP_LED_Toggle(LED_RED);
 8000ade:	2002      	movs	r0, #2
 8000ae0:	f000 fcca 	bl	8001478 <BSP_LED_Toggle>
		osDelay(100);
 8000ae4:	2064      	movs	r0, #100	@ 0x64
 8000ae6:	f004 f96f 	bl	8004dc8 <osDelay>
 8000aea:	e002      	b.n	8000af2 <StartSenderTask+0xee>
	  } else {
		printf("Failed to send data to ESP32\n");
 8000aec:	480b      	ldr	r0, [pc, #44]	@ (8000b1c <StartSenderTask+0x118>)
 8000aee:	f006 ffad 	bl	8007a4c <puts>
	  }

	  last_tx_time = current_time;
 8000af2:	4a05      	ldr	r2, [pc, #20]	@ (8000b08 <StartSenderTask+0x104>)
 8000af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000af6:	6013      	str	r3, [r2, #0]
	}

	osDelay(50);
 8000af8:	2032      	movs	r0, #50	@ 0x32
 8000afa:	f004 f965 	bl	8004dc8 <osDelay>
  {
 8000afe:	e785      	b.n	8000a0c <StartSenderTask+0x8>
 8000b00:	20000200 	.word	0x20000200
 8000b04:	080088d8 	.word	0x080088d8
 8000b08:	200001f8 	.word	0x200001f8
 8000b0c:	200001f4 	.word	0x200001f4
 8000b10:	08008980 	.word	0x08008980
 8000b14:	200000b8 	.word	0x200000b8
 8000b18:	08008920 	.word	0x08008920
 8000b1c:	08008960 	.word	0x08008960

08000b20 <StartTskUART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTskUART */
void StartTskUART(void *argument)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTskUART */
  /* Infinite loop */
  for(;;)
  {
	// Receive Item struct data from ESP32
	HAL_StatusTypeDef status = HAL_UART_Receive(&hlpuart1, (uint8_t *)&receivedData, sizeof(Item), UART_TIMEOUT_MS);
 8000b28:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000b2c:	220c      	movs	r2, #12
 8000b2e:	492f      	ldr	r1, [pc, #188]	@ (8000bec <StartTskUART+0xcc>)
 8000b30:	482f      	ldr	r0, [pc, #188]	@ (8000bf0 <StartTskUART+0xd0>)
 8000b32:	f003 fa16 	bl	8003f62 <HAL_UART_Receive>
 8000b36:	4603      	mov	r3, r0
 8000b38:	73fb      	strb	r3, [r7, #15]

	if (status == HAL_OK) {
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d126      	bne.n	8000b8e <StartTskUART+0x6e>
	  BSP_LED_On(LED_GREEN); // Indicate successful reception
 8000b40:	2001      	movs	r0, #1
 8000b42:	f000 fc65 	bl	8001410 <BSP_LED_On>
	  osDelay(100);
 8000b46:	2064      	movs	r0, #100	@ 0x64
 8000b48:	f004 f93e 	bl	8004dc8 <osDelay>
	  BSP_LED_Off(LED_GREEN);
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f000 fc79 	bl	8001444 <BSP_LED_Off>
	  osDelay(100);
 8000b52:	2064      	movs	r0, #100	@ 0x64
 8000b54:	f004 f938 	bl	8004dc8 <osDelay>
	  uart_timeout_counter = 0;
 8000b58:	4b26      	ldr	r3, [pc, #152]	@ (8000bf4 <StartTskUART+0xd4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
	  // Validate received data
	  if (ValidateReceivedData((Item*)&receivedData)) {
 8000b5e:	4823      	ldr	r0, [pc, #140]	@ (8000bec <StartTskUART+0xcc>)
 8000b60:	f7ff fd34 	bl	80005cc <ValidateReceivedData>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d00d      	beq.n	8000b86 <StartTskUART+0x66>
		// Send valid data to queue
		if (xQueueSend(UARTQueue, &receivedData, 0) != pdTRUE) {
 8000b6a:	4b23      	ldr	r3, [pc, #140]	@ (8000bf8 <StartTskUART+0xd8>)
 8000b6c:	6818      	ldr	r0, [r3, #0]
 8000b6e:	2300      	movs	r3, #0
 8000b70:	2200      	movs	r2, #0
 8000b72:	491e      	ldr	r1, [pc, #120]	@ (8000bec <StartTskUART+0xcc>)
 8000b74:	f004 fb72 	bl	800525c <xQueueGenericSend>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d032      	beq.n	8000be4 <StartTskUART+0xc4>
		  printf("Queue full - message dropped\n");
 8000b7e:	481f      	ldr	r0, [pc, #124]	@ (8000bfc <StartTskUART+0xdc>)
 8000b80:	f006 ff64 	bl	8007a4c <puts>
 8000b84:	e02e      	b.n	8000be4 <StartTskUART+0xc4>
		}
	  } else {
		printf("UART Warning - Received corrupted data with invalid MAC\n");
 8000b86:	481e      	ldr	r0, [pc, #120]	@ (8000c00 <StartTskUART+0xe0>)
 8000b88:	f006 ff60 	bl	8007a4c <puts>
 8000b8c:	e02a      	b.n	8000be4 <StartTskUART+0xc4>
	  }
	}
	else if (status == HAL_TIMEOUT) {
 8000b8e:	7bfb      	ldrb	r3, [r7, #15]
 8000b90:	2b03      	cmp	r3, #3
 8000b92:	d117      	bne.n	8000bc4 <StartTskUART+0xa4>
	  uart_timeout_counter++;
 8000b94:	4b17      	ldr	r3, [pc, #92]	@ (8000bf4 <StartTskUART+0xd4>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	4a16      	ldr	r2, [pc, #88]	@ (8000bf4 <StartTskUART+0xd4>)
 8000b9c:	6013      	str	r3, [r2, #0]
	  if (uart_timeout_counter % 100 == 0) {  // Reduced frequency of timeout2 messages
 8000b9e:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <StartTskUART+0xd4>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	4b18      	ldr	r3, [pc, #96]	@ (8000c04 <StartTskUART+0xe4>)
 8000ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8000ba8:	095b      	lsrs	r3, r3, #5
 8000baa:	2164      	movs	r1, #100	@ 0x64
 8000bac:	fb01 f303 	mul.w	r3, r1, r3
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d116      	bne.n	8000be4 <StartTskUART+0xc4>
		printf("UART Waiting for data... (%lu)\n", uart_timeout_counter);
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf4 <StartTskUART+0xd4>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4812      	ldr	r0, [pc, #72]	@ (8000c08 <StartTskUART+0xe8>)
 8000bbe:	f006 fed5 	bl	800796c <iprintf>
 8000bc2:	e00f      	b.n	8000be4 <StartTskUART+0xc4>
	  }
	}
	else {
	  printf("UART Error: %d, resetting...\n", status);
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4810      	ldr	r0, [pc, #64]	@ (8000c0c <StartTskUART+0xec>)
 8000bca:	f006 fecf 	bl	800796c <iprintf>
	  HAL_UART_DeInit(&hlpuart1);
 8000bce:	4808      	ldr	r0, [pc, #32]	@ (8000bf0 <StartTskUART+0xd0>)
 8000bd0:	f003 f8fa 	bl	8003dc8 <HAL_UART_DeInit>
	  osDelay(10);
 8000bd4:	200a      	movs	r0, #10
 8000bd6:	f004 f8f7 	bl	8004dc8 <osDelay>
	  MX_LPUART1_UART_Init();
 8000bda:	f7ff fe19 	bl	8000810 <MX_LPUART1_UART_Init>
	  uart_timeout_counter = 0;
 8000bde:	4b05      	ldr	r3, [pc, #20]	@ (8000bf4 <StartTskUART+0xd4>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
	}
	osDelay(10); // Small delay
 8000be4:	200a      	movs	r0, #10
 8000be6:	f004 f8ef 	bl	8004dc8 <osDelay>
  {
 8000bea:	e79d      	b.n	8000b28 <StartTskUART+0x8>
 8000bec:	2000009c 	.word	0x2000009c
 8000bf0:	200000b8 	.word	0x200000b8
 8000bf4:	200001f0 	.word	0x200001f0
 8000bf8:	20000200 	.word	0x20000200
 8000bfc:	08008988 	.word	0x08008988
 8000c00:	080089a8 	.word	0x080089a8
 8000c04:	51eb851f 	.word	0x51eb851f
 8000c08:	080089e0 	.word	0x080089e0
 8000c0c:	08008a00 	.word	0x08008a00

08000c10 <StartSenderTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSenderTask2 */
void StartSenderTask2(void *argument)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	@ 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	// Check if we have received data to process
	if (xQueueReceive(UARTQueue2, &receivedCANFrame, 0) == pdTRUE) {
 8000c18:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <StartSenderTask2+0x60>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f107 0108 	add.w	r1, r7, #8
 8000c20:	2200      	movs	r2, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f004 fcba 	bl	800559c <xQueueReceive>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d1f4      	bne.n	8000c18 <StartSenderTask2+0x8>
	  printf("Received from CAN Bus | CAN_ID: 0x%lX | DLC: %u | DATA:",receivedCANFrame.can_id,receivedCANFrame.dlc);
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	7b3a      	ldrb	r2, [r7, #12]
 8000c32:	4619      	mov	r1, r3
 8000c34:	480f      	ldr	r0, [pc, #60]	@ (8000c74 <StartSenderTask2+0x64>)
 8000c36:	f006 fe99 	bl	800796c <iprintf>
	  for (int i = 0; i < receivedCANFrame.dlc; i++) {
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c3e:	e00b      	b.n	8000c58 <StartSenderTask2+0x48>
		  printf("%02X ", receivedCANFrame.data[i]);
 8000c40:	f107 020d 	add.w	r2, r7, #13
 8000c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c46:	4413      	add	r3, r2
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480a      	ldr	r0, [pc, #40]	@ (8000c78 <StartSenderTask2+0x68>)
 8000c4e:	f006 fe8d 	bl	800796c <iprintf>
	  for (int i = 0; i < receivedCANFrame.dlc; i++) {
 8000c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c54:	3301      	adds	r3, #1
 8000c56:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c58:	7b3b      	ldrb	r3, [r7, #12]
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	dbee      	blt.n	8000c40 <StartSenderTask2+0x30>
	  }
	  printf("\n");
 8000c62:	200a      	movs	r0, #10
 8000c64:	f006 fe94 	bl	8007990 <putchar>
	  osDelay(100);
 8000c68:	2064      	movs	r0, #100	@ 0x64
 8000c6a:	f004 f8ad 	bl	8004dc8 <osDelay>
	if (xQueueReceive(UARTQueue2, &receivedCANFrame, 0) == pdTRUE) {
 8000c6e:	e7d3      	b.n	8000c18 <StartSenderTask2+0x8>
 8000c70:	20000204 	.word	0x20000204
 8000c74:	08008a20 	.word	0x08008a20
 8000c78:	08008a58 	.word	0x08008a58

08000c7c <StartTskUART2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTskUART2 */
void StartTskUART2(void *argument)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTskUART2 */
  /* Infinite loop */
 for(;;)
  {
	// Receive CANFrame struct data from ESP32
	HAL_StatusTypeDef status = HAL_UART_Receive(&huart1, (uint8_t *)&CANreceivedData, sizeof(CANFrame), UART2_TIMEOUT_MS);
 8000c84:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000c88:	2210      	movs	r2, #16
 8000c8a:	492b      	ldr	r1, [pc, #172]	@ (8000d38 <StartTskUART2+0xbc>)
 8000c8c:	482b      	ldr	r0, [pc, #172]	@ (8000d3c <StartTskUART2+0xc0>)
 8000c8e:	f003 f968 	bl	8003f62 <HAL_UART_Receive>
 8000c92:	4603      	mov	r3, r0
 8000c94:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK) {
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d11d      	bne.n	8000cd8 <StartTskUART2+0x5c>
	  uart_timeout_counter2 = 0;
 8000c9c:	4b28      	ldr	r3, [pc, #160]	@ (8000d40 <StartTskUART2+0xc4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
	  // Validate received data
	  if (ValidateReceivedCANData((CANFrame*)&CANreceivedData)) {
 8000ca2:	4825      	ldr	r0, [pc, #148]	@ (8000d38 <StartTskUART2+0xbc>)
 8000ca4:	f7ff fcaf 	bl	8000606 <ValidateReceivedCANData>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d010      	beq.n	8000cd0 <StartTskUART2+0x54>
		// Send valid data to queue
		if (xQueueSend(UARTQueue2, (const void *)&CANreceivedData, 0) != pdTRUE) {
 8000cae:	4b25      	ldr	r3, [pc, #148]	@ (8000d44 <StartTskUART2+0xc8>)
 8000cb0:	6818      	ldr	r0, [r3, #0]
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	4920      	ldr	r1, [pc, #128]	@ (8000d38 <StartTskUART2+0xbc>)
 8000cb8:	f004 fad0 	bl	800525c <xQueueGenericSend>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d002      	beq.n	8000cc8 <StartTskUART2+0x4c>
		  printf("Queue full - message dropped\n");
 8000cc2:	4821      	ldr	r0, [pc, #132]	@ (8000d48 <StartTskUART2+0xcc>)
 8000cc4:	f006 fec2 	bl	8007a4c <puts>
		}
		BSP_LED_Toggle(LED_BLUE); // Indicate successful reception
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f000 fbd5 	bl	8001478 <BSP_LED_Toggle>
 8000cce:	e02e      	b.n	8000d2e <StartTskUART2+0xb2>
	  } else {
		printf("UART Warning - Received corrupted data with invalid CAN frame\n");
 8000cd0:	481e      	ldr	r0, [pc, #120]	@ (8000d4c <StartTskUART2+0xd0>)
 8000cd2:	f006 febb 	bl	8007a4c <puts>
 8000cd6:	e02a      	b.n	8000d2e <StartTskUART2+0xb2>
	  }
	}
	else if (status == HAL_TIMEOUT) {
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
 8000cda:	2b03      	cmp	r3, #3
 8000cdc:	d117      	bne.n	8000d0e <StartTskUART2+0x92>
	  uart_timeout_counter2++;
 8000cde:	4b18      	ldr	r3, [pc, #96]	@ (8000d40 <StartTskUART2+0xc4>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	4a16      	ldr	r2, [pc, #88]	@ (8000d40 <StartTskUART2+0xc4>)
 8000ce6:	6013      	str	r3, [r2, #0]
	  if (uart_timeout_counter2 % 100 == 0) {  // Reduced frequency of timeout2 messages
 8000ce8:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <StartTskUART2+0xc4>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <StartTskUART2+0xd4>)
 8000cee:	fba3 1302 	umull	r1, r3, r3, r2
 8000cf2:	095b      	lsrs	r3, r3, #5
 8000cf4:	2164      	movs	r1, #100	@ 0x64
 8000cf6:	fb01 f303 	mul.w	r3, r1, r3
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d116      	bne.n	8000d2e <StartTskUART2+0xb2>
		printf("UART Waiting for data... (%lu)\n", uart_timeout_counter2);
 8000d00:	4b0f      	ldr	r3, [pc, #60]	@ (8000d40 <StartTskUART2+0xc4>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4619      	mov	r1, r3
 8000d06:	4813      	ldr	r0, [pc, #76]	@ (8000d54 <StartTskUART2+0xd8>)
 8000d08:	f006 fe30 	bl	800796c <iprintf>
 8000d0c:	e00f      	b.n	8000d2e <StartTskUART2+0xb2>
	  }
	}
	else {
	  printf("UART Error: %d, resetting...\n", status);
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
 8000d10:	4619      	mov	r1, r3
 8000d12:	4811      	ldr	r0, [pc, #68]	@ (8000d58 <StartTskUART2+0xdc>)
 8000d14:	f006 fe2a 	bl	800796c <iprintf>
	  HAL_UART_DeInit(&huart1);
 8000d18:	4808      	ldr	r0, [pc, #32]	@ (8000d3c <StartTskUART2+0xc0>)
 8000d1a:	f003 f855 	bl	8003dc8 <HAL_UART_DeInit>
	  osDelay(10);
 8000d1e:	200a      	movs	r0, #10
 8000d20:	f004 f852 	bl	8004dc8 <osDelay>
	  MX_USART1_UART_Init();
 8000d24:	f7ff fdc0 	bl	80008a8 <MX_USART1_UART_Init>
	  uart_timeout_counter2 = 0;
 8000d28:	4b05      	ldr	r3, [pc, #20]	@ (8000d40 <StartTskUART2+0xc4>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
	}
	osDelay(10); // Small delay
 8000d2e:	200a      	movs	r0, #10
 8000d30:	f004 f84a 	bl	8004dc8 <osDelay>
  {
 8000d34:	e7a6      	b.n	8000c84 <StartTskUART2+0x8>
 8000d36:	bf00      	nop
 8000d38:	200000a8 	.word	0x200000a8
 8000d3c:	2000014c 	.word	0x2000014c
 8000d40:	200001fc 	.word	0x200001fc
 8000d44:	20000204 	.word	0x20000204
 8000d48:	08008988 	.word	0x08008988
 8000d4c:	08008a60 	.word	0x08008a60
 8000d50:	51eb851f 	.word	0x51eb851f
 8000d54:	080089e0 	.word	0x080089e0
 8000d58:	08008a00 	.word	0x08008a00

08000d5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d6c:	d101      	bne.n	8000d72 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000d6e:	f000 fbbd 	bl	80014ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d7e:	b672      	cpsid	i
}
 8000d80:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d82:	bf00      	nop
 8000d84:	e7fd      	b.n	8000d82 <Error_Handler+0x8>

08000d86 <LL_AHB2_GRP1_EnableClock>:
{
 8000d86:	b480      	push	{r7}
 8000d88:	b085      	sub	sp, #20
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000da2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4013      	ands	r3, r2
 8000da8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000daa:	68fb      	ldr	r3, [r7, #12]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000dc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dc4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000dc6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000dd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dd4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
}
 8000dde:	bf00      	nop
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <LL_APB1_GRP2_DisableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_DisableClock(uint32_t Periphs)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8000df2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000df6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e00:	4013      	ands	r3, r2
 8000e02:	65cb      	str	r3, [r1, #92]	@ 0x5c
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e1c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000e1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e2c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4013      	ands	r3, r2
 8000e32:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e34:	68fb      	ldr	r3, [r7, #12]
}
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000e4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e4e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	43db      	mvns	r3, r3
 8000e54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e58:	4013      	ands	r3, r2
 8000e5a:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	210f      	movs	r1, #15
 8000e70:	f06f 0001 	mvn.w	r0, #1
 8000e74:	f000 fc1e 	bl	80016b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b09c      	sub	sp, #112	@ 0x70
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e94:	f107 030c 	add.w	r3, r7, #12
 8000e98:	2250      	movs	r2, #80	@ 0x50
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f006 feb5 	bl	8007c0c <memset>
  if(huart->Instance==LPUART1)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a36      	ldr	r2, [pc, #216]	@ (8000f80 <HAL_UART_MspInit+0x104>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d139      	bne.n	8000f20 <HAL_UART_MspInit+0xa4>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000eac:	2302      	movs	r3, #2
 8000eae:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f002 fa26 	bl	800330a <HAL_RCCEx_PeriphCLKConfig>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ec4:	f7ff ff59 	bl	8000d7a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f7ff ff75 	bl	8000db8 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ece:	2001      	movs	r0, #1
 8000ed0:	f7ff ff59 	bl	8000d86 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed4:	2002      	movs	r0, #2
 8000ed6:	f7ff ff56 	bl	8000d86 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000eda:	2308      	movs	r3, #8
 8000edc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000eea:	2308      	movs	r3, #8
 8000eec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ef8:	f000 fc04 	bl	8001704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000efc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f00:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000f0e:	2308      	movs	r3, #8
 8000f10:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f12:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f16:	4619      	mov	r1, r3
 8000f18:	481a      	ldr	r0, [pc, #104]	@ (8000f84 <HAL_UART_MspInit+0x108>)
 8000f1a:	f000 fbf3 	bl	8001704 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f1e:	e02b      	b.n	8000f78 <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART1)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a18      	ldr	r2, [pc, #96]	@ (8000f88 <HAL_UART_MspInit+0x10c>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d126      	bne.n	8000f78 <HAL_UART_MspInit+0xfc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f32:	f107 030c 	add.w	r3, r7, #12
 8000f36:	4618      	mov	r0, r3
 8000f38:	f002 f9e7 	bl	800330a <HAL_RCCEx_PeriphCLKConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_UART_MspInit+0xca>
      Error_Handler();
 8000f42:	f7ff ff1a 	bl	8000d7a <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f46:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000f4a:	f7ff ff61 	bl	8000e10 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	2001      	movs	r0, #1
 8000f50:	f7ff ff19 	bl	8000d86 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f54:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f58:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f66:	2307      	movs	r3, #7
 8000f68:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f74:	f000 fbc6 	bl	8001704 <HAL_GPIO_Init>
}
 8000f78:	bf00      	nop
 8000f7a:	3770      	adds	r7, #112	@ 0x70
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40008000 	.word	0x40008000
 8000f84:	48000400 	.word	0x48000400
 8000f88:	40013800 	.word	0x40013800

08000f8c <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if(huart->Instance==LPUART1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a11      	ldr	r2, [pc, #68]	@ (8000fe0 <HAL_UART_MspDeInit+0x54>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d10d      	bne.n	8000fba <HAL_UART_MspDeInit+0x2e>
  {
    /* USER CODE BEGIN LPUART1_MspDeInit 0 */

    /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f7ff ff23 	bl	8000dea <LL_APB1_GRP2_DisableClock>

    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3);
 8000fa4:	2108      	movs	r1, #8
 8000fa6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000faa:	f000 fd1b 	bl	80019e4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8000fae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fb2:	480c      	ldr	r0, [pc, #48]	@ (8000fe4 <HAL_UART_MspDeInit+0x58>)
 8000fb4:	f000 fd16 	bl	80019e4 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN USART1_MspDeInit 1 */

    /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8000fb8:	e00e      	b.n	8000fd8 <HAL_UART_MspDeInit+0x4c>
  else if(huart->Instance==USART1)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe8 <HAL_UART_MspDeInit+0x5c>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d109      	bne.n	8000fd8 <HAL_UART_MspDeInit+0x4c>
    __HAL_RCC_USART1_CLK_DISABLE();
 8000fc4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000fc8:	f7ff ff3b 	bl	8000e42 <LL_APB2_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8000fcc:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000fd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fd4:	f000 fd06 	bl	80019e4 <HAL_GPIO_DeInit>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40008000 	.word	0x40008000
 8000fe4:	48000400 	.word	0x48000400
 8000fe8:	40013800 	.word	0x40013800

08000fec <LL_APB1_GRP1_EnableClock>:
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000ff4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ff8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000ffa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4313      	orrs	r3, r2
 8001002:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001004:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001008:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4013      	ands	r3, r2
 800100e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001010:	68fb      	ldr	r3, [r7, #12]
}
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08e      	sub	sp, #56	@ 0x38
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8001036:	2200      	movs	r2, #0
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	201c      	movs	r0, #28
 800103c:	f000 fb3a 	bl	80016b4 <HAL_NVIC_SetPriority>
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001040:	201c      	movs	r0, #28
 8001042:	f000 fb51 	bl	80016e8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001046:	2001      	movs	r0, #1
 8001048:	f7ff ffd0 	bl	8000fec <LL_APB1_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800104c:	f107 020c 	add.w	r2, r7, #12
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	4611      	mov	r1, r2
 8001056:	4618      	mov	r0, r3
 8001058:	f001 fed4 	bl	8002e04 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800105c:	f001 fea6 	bl	8002dac <HAL_RCC_GetPCLK1Freq>
 8001060:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001064:	4a21      	ldr	r2, [pc, #132]	@ (80010ec <HAL_InitTick+0xcc>)
 8001066:	fba2 2303 	umull	r2, r3, r2, r3
 800106a:	0c9b      	lsrs	r3, r3, #18
 800106c:	3b01      	subs	r3, #1
 800106e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001070:	4b1f      	ldr	r3, [pc, #124]	@ (80010f0 <HAL_InitTick+0xd0>)
 8001072:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001076:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001078:	4b1d      	ldr	r3, [pc, #116]	@ (80010f0 <HAL_InitTick+0xd0>)
 800107a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800107e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001080:	4a1b      	ldr	r2, [pc, #108]	@ (80010f0 <HAL_InitTick+0xd0>)
 8001082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001084:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001086:	4b1a      	ldr	r3, [pc, #104]	@ (80010f0 <HAL_InitTick+0xd0>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108c:	4b18      	ldr	r3, [pc, #96]	@ (80010f0 <HAL_InitTick+0xd0>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 8001092:	4817      	ldr	r0, [pc, #92]	@ (80010f0 <HAL_InitTick+0xd0>)
 8001094:	f002 fbc0 	bl	8003818 <HAL_TIM_Base_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 800109e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d11b      	bne.n	80010de <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80010a6:	4812      	ldr	r0, [pc, #72]	@ (80010f0 <HAL_InitTick+0xd0>)
 80010a8:	f002 fc18 	bl	80038dc <HAL_TIM_Base_Start_IT>
 80010ac:	4603      	mov	r3, r0
 80010ae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 80010b2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d111      	bne.n	80010de <HAL_InitTick+0xbe>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010ba:	201c      	movs	r0, #28
 80010bc:	f000 fb14 	bl	80016e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b0f      	cmp	r3, #15
 80010c4:	d808      	bhi.n	80010d8 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80010c6:	2200      	movs	r2, #0
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	201c      	movs	r0, #28
 80010cc:	f000 faf2 	bl	80016b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010d0:	4a08      	ldr	r2, [pc, #32]	@ (80010f4 <HAL_InitTick+0xd4>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6013      	str	r3, [r2, #0]
 80010d6:	e002      	b.n	80010de <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

 /* Return function status */
  return status;
 80010de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3738      	adds	r7, #56	@ 0x38
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	431bde83 	.word	0x431bde83
 80010f0:	20000208 	.word	0x20000208
 80010f4:	20000018 	.word	0x20000018

080010f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <NMI_Handler+0x4>

08001100 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <HardFault_Handler+0x4>

08001108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <MemManage_Handler+0x4>

08001110 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <BusFault_Handler+0x4>

08001118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <UsageFault_Handler+0x4>

08001120 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001134:	4802      	ldr	r0, [pc, #8]	@ (8001140 <TIM2_IRQHandler+0x10>)
 8001136:	f002 fc1f 	bl	8003978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000208 	.word	0x20000208

08001144 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	e00a      	b.n	800116c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001156:	f3af 8000 	nop.w
 800115a:	4601      	mov	r1, r0
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	1c5a      	adds	r2, r3, #1
 8001160:	60ba      	str	r2, [r7, #8]
 8001162:	b2ca      	uxtb	r2, r1
 8001164:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	3301      	adds	r3, #1
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	429a      	cmp	r2, r3
 8001172:	dbf0      	blt.n	8001156 <_read+0x12>
  }

  return len;
 8001174:	687b      	ldr	r3, [r7, #4]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <_close>:
  }
  return len;
}

int _close(int file)
{
 800117e:	b480      	push	{r7}
 8001180:	b083      	sub	sp, #12
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001186:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800118a:	4618      	mov	r0, r3
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011a6:	605a      	str	r2, [r3, #4]
  return 0;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <_isatty>:

int _isatty(int file)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011be:	2301      	movs	r3, #1
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f0:	4a14      	ldr	r2, [pc, #80]	@ (8001244 <_sbrk+0x5c>)
 80011f2:	4b15      	ldr	r3, [pc, #84]	@ (8001248 <_sbrk+0x60>)
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011fc:	4b13      	ldr	r3, [pc, #76]	@ (800124c <_sbrk+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001204:	4b11      	ldr	r3, [pc, #68]	@ (800124c <_sbrk+0x64>)
 8001206:	4a12      	ldr	r2, [pc, #72]	@ (8001250 <_sbrk+0x68>)
 8001208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800120a:	4b10      	ldr	r3, [pc, #64]	@ (800124c <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	429a      	cmp	r2, r3
 8001216:	d207      	bcs.n	8001228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001218:	f006 fda4 	bl	8007d64 <__errno>
 800121c:	4603      	mov	r3, r0
 800121e:	220c      	movs	r2, #12
 8001220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001222:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001226:	e009      	b.n	800123c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001228:	4b08      	ldr	r3, [pc, #32]	@ (800124c <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800122e:	4b07      	ldr	r3, [pc, #28]	@ (800124c <_sbrk+0x64>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	4a05      	ldr	r2, [pc, #20]	@ (800124c <_sbrk+0x64>)
 8001238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800123a:	68fb      	ldr	r3, [r7, #12]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20030000 	.word	0x20030000
 8001248:	00000400 	.word	0x00000400
 800124c:	20000254 	.word	0x20000254
 8001250:	20001d90 	.word	0x20001d90

08001254 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001258:	4b24      	ldr	r3, [pc, #144]	@ (80012ec <SystemInit+0x98>)
 800125a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800125e:	4a23      	ldr	r2, [pc, #140]	@ (80012ec <SystemInit+0x98>)
 8001260:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001264:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001268:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001278:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800127c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001280:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001282:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800128c:	4b18      	ldr	r3, [pc, #96]	@ (80012f0 <SystemInit+0x9c>)
 800128e:	4013      	ands	r3, r2
 8001290:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001292:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001296:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800129a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800129e:	f023 0305 	bic.w	r3, r3, #5
 80012a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80012a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80012ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012b2:	f023 0301 	bic.w	r3, r3, #1
 80012b6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80012ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012be:	4a0d      	ldr	r2, [pc, #52]	@ (80012f4 <SystemInit+0xa0>)
 80012c0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80012c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012c6:	4a0b      	ldr	r2, [pc, #44]	@ (80012f4 <SystemInit+0xa0>)
 80012c8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012d8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000ed00 	.word	0xe000ed00
 80012f0:	faf6fefb 	.word	0xfaf6fefb
 80012f4:	22041000 	.word	0x22041000

080012f8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80012f8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012fa:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012fc:	3304      	adds	r3, #4

080012fe <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012fe:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001300:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001302:	d3f9      	bcc.n	80012f8 <CopyDataInit>
  bx lr
 8001304:	4770      	bx	lr

08001306 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001306:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001308:	3004      	adds	r0, #4

0800130a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800130a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800130c:	d3fb      	bcc.n	8001306 <FillZerobss>
  bx lr
 800130e:	4770      	bx	lr

08001310 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001310:	480c      	ldr	r0, [pc, #48]	@ (8001344 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001312:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001314:	f7ff ff9e 	bl	8001254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001318:	480b      	ldr	r0, [pc, #44]	@ (8001348 <LoopForever+0x6>)
 800131a:	490c      	ldr	r1, [pc, #48]	@ (800134c <LoopForever+0xa>)
 800131c:	4a0c      	ldr	r2, [pc, #48]	@ (8001350 <LoopForever+0xe>)
 800131e:	2300      	movs	r3, #0
 8001320:	f7ff ffed 	bl	80012fe <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001324:	480b      	ldr	r0, [pc, #44]	@ (8001354 <LoopForever+0x12>)
 8001326:	490c      	ldr	r1, [pc, #48]	@ (8001358 <LoopForever+0x16>)
 8001328:	4a0c      	ldr	r2, [pc, #48]	@ (800135c <LoopForever+0x1a>)
 800132a:	2300      	movs	r3, #0
 800132c:	f7ff ffe7 	bl	80012fe <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001330:	480b      	ldr	r0, [pc, #44]	@ (8001360 <LoopForever+0x1e>)
 8001332:	490c      	ldr	r1, [pc, #48]	@ (8001364 <LoopForever+0x22>)
 8001334:	2300      	movs	r3, #0
 8001336:	f7ff ffe8 	bl	800130a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800133a:	f006 fd19 	bl	8007d70 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800133e:	f7ff f977 	bl	8000630 <main>

08001342 <LoopForever>:

LoopForever:
  b LoopForever
 8001342:	e7fe      	b.n	8001342 <LoopForever>
  ldr   r0, =_estack
 8001344:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001348:	20000008 	.word	0x20000008
 800134c:	20000080 	.word	0x20000080
 8001350:	08008c88 	.word	0x08008c88
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001354:	20030000 	.word	0x20030000
 8001358:	20030000 	.word	0x20030000
 800135c:	08008d00 	.word	0x08008d00
  INIT_BSS _sbss, _ebss
 8001360:	20000080 	.word	0x20000080
 8001364:	20001d90 	.word	0x20001d90

08001368 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001368:	e7fe      	b.n	8001368 <ADC1_IRQHandler>

0800136a <LL_AHB2_GRP1_EnableClock>:
{
 800136a:	b480      	push	{r7}
 800136c:	b085      	sub	sp, #20
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001372:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001376:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001378:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4313      	orrs	r3, r2
 8001380:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001382:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001386:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4013      	ands	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800138e:	68fb      	ldr	r3, [r7, #12]
}
 8001390:	bf00      	nop
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80013b6:	2002      	movs	r0, #2
 80013b8:	f7ff ffd7 	bl	800136a <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	4a12      	ldr	r2, [pc, #72]	@ (8001408 <BSP_LED_Init+0x6c>)
 80013c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013c4:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ce:	2302      	movs	r3, #2
 80013d0:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	4a0d      	ldr	r2, [pc, #52]	@ (800140c <BSP_LED_Init+0x70>)
 80013d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013da:	f107 020c 	add.w	r2, r7, #12
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 f98f 	bl	8001704 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	4a08      	ldr	r2, [pc, #32]	@ (800140c <BSP_LED_Init+0x70>)
 80013ea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	4a05      	ldr	r2, [pc, #20]	@ (8001408 <BSP_LED_Init+0x6c>)
 80013f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013f6:	2200      	movs	r2, #0
 80013f8:	4619      	mov	r1, r3
 80013fa:	f000 fbd1 	bl	8001ba0 <HAL_GPIO_WritePin>
}
 80013fe:	bf00      	nop
 8001400:	3720      	adds	r7, #32
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	08008c14 	.word	0x08008c14
 800140c:	2000000c 	.word	0x2000000c

08001410 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	4a07      	ldr	r2, [pc, #28]	@ (800143c <BSP_LED_On+0x2c>)
 800141e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	4a06      	ldr	r2, [pc, #24]	@ (8001440 <BSP_LED_On+0x30>)
 8001426:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800142a:	2201      	movs	r2, #1
 800142c:	4619      	mov	r1, r3
 800142e:	f000 fbb7 	bl	8001ba0 <HAL_GPIO_WritePin>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2000000c 	.word	0x2000000c
 8001440:	08008c14 	.word	0x08008c14

08001444 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	4a07      	ldr	r2, [pc, #28]	@ (8001470 <BSP_LED_Off+0x2c>)
 8001452:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	4a06      	ldr	r2, [pc, #24]	@ (8001474 <BSP_LED_Off+0x30>)
 800145a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800145e:	2200      	movs	r2, #0
 8001460:	4619      	mov	r1, r3
 8001462:	f000 fb9d 	bl	8001ba0 <HAL_GPIO_WritePin>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	2000000c 	.word	0x2000000c
 8001474:	08008c14 	.word	0x08008c14

08001478 <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	4a07      	ldr	r2, [pc, #28]	@ (80014a4 <BSP_LED_Toggle+0x2c>)
 8001486:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	4906      	ldr	r1, [pc, #24]	@ (80014a8 <BSP_LED_Toggle+0x30>)
 800148e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001492:	4619      	mov	r1, r3
 8001494:	4610      	mov	r0, r2
 8001496:	f000 fb9b 	bl	8001bd0 <HAL_GPIO_TogglePin>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	2000000c 	.word	0x2000000c
 80014a8:	08008c14 	.word	0x08008c14

080014ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b6:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <HAL_Init+0x3c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a0b      	ldr	r2, [pc, #44]	@ (80014e8 <HAL_Init+0x3c>)
 80014bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014c0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c2:	2003      	movs	r0, #3
 80014c4:	f000 f8eb 	bl	800169e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014c8:	200f      	movs	r0, #15
 80014ca:	f7ff fda9 	bl	8001020 <HAL_InitTick>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d002      	beq.n	80014da <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	71fb      	strb	r3, [r7, #7]
 80014d8:	e001      	b.n	80014de <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014da:	f7ff fcc5 	bl	8000e68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014de:	79fb      	ldrb	r3, [r7, #7]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	58004000 	.word	0x58004000

080014ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014f0:	4b06      	ldr	r3, [pc, #24]	@ (800150c <HAL_IncTick+0x20>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <HAL_IncTick+0x24>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4413      	add	r3, r2
 80014fc:	4a04      	ldr	r2, [pc, #16]	@ (8001510 <HAL_IncTick+0x24>)
 80014fe:	6013      	str	r3, [r2, #0]
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	2000001c 	.word	0x2000001c
 8001510:	20000258 	.word	0x20000258

08001514 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return uwTick;
 8001518:	4b03      	ldr	r3, [pc, #12]	@ (8001528 <HAL_GetTick+0x14>)
 800151a:	681b      	ldr	r3, [r3, #0]
}
 800151c:	4618      	mov	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	20000258 	.word	0x20000258

0800152c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001530:	4b03      	ldr	r3, [pc, #12]	@ (8001540 <HAL_GetTickPrio+0x14>)
 8001532:	681b      	ldr	r3, [r3, #0]
}
 8001534:	4618      	mov	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20000018 	.word	0x20000018

08001544 <__NVIC_SetPriorityGrouping>:
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001554:	4b0c      	ldr	r3, [pc, #48]	@ (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001560:	4013      	ands	r3, r2
 8001562:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800156c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001570:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001576:	4a04      	ldr	r2, [pc, #16]	@ (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	60d3      	str	r3, [r2, #12]
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_GetPriorityGrouping>:
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001590:	4b04      	ldr	r3, [pc, #16]	@ (80015a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	0a1b      	lsrs	r3, r3, #8
 8001596:	f003 0307 	and.w	r3, r3, #7
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_EnableIRQ>:
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	db0b      	blt.n	80015d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	f003 021f 	and.w	r2, r3, #31
 80015c0:	4907      	ldr	r1, [pc, #28]	@ (80015e0 <__NVIC_EnableIRQ+0x38>)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	095b      	lsrs	r3, r3, #5
 80015c8:	2001      	movs	r0, #1
 80015ca:	fa00 f202 	lsl.w	r2, r0, r2
 80015ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000e100 	.word	0xe000e100

080015e4 <__NVIC_SetPriority>:
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	6039      	str	r1, [r7, #0]
 80015ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	db0a      	blt.n	800160e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	490c      	ldr	r1, [pc, #48]	@ (8001630 <__NVIC_SetPriority+0x4c>)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	0112      	lsls	r2, r2, #4
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	440b      	add	r3, r1
 8001608:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800160c:	e00a      	b.n	8001624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4908      	ldr	r1, [pc, #32]	@ (8001634 <__NVIC_SetPriority+0x50>)
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	3b04      	subs	r3, #4
 800161c:	0112      	lsls	r2, r2, #4
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	440b      	add	r3, r1
 8001622:	761a      	strb	r2, [r3, #24]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000e100 	.word	0xe000e100
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <NVIC_EncodePriority>:
{
 8001638:	b480      	push	{r7}
 800163a:	b089      	sub	sp, #36	@ 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f1c3 0307 	rsb	r3, r3, #7
 8001652:	2b04      	cmp	r3, #4
 8001654:	bf28      	it	cs
 8001656:	2304      	movcs	r3, #4
 8001658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3304      	adds	r3, #4
 800165e:	2b06      	cmp	r3, #6
 8001660:	d902      	bls.n	8001668 <NVIC_EncodePriority+0x30>
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3b03      	subs	r3, #3
 8001666:	e000      	b.n	800166a <NVIC_EncodePriority+0x32>
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43da      	mvns	r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	401a      	ands	r2, r3
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001680:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	43d9      	mvns	r1, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	4313      	orrs	r3, r2
}
 8001692:	4618      	mov	r0, r3
 8001694:	3724      	adds	r7, #36	@ 0x24
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff ff4c 	bl	8001544 <__NVIC_SetPriorityGrouping>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
 80016c0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016c2:	f7ff ff63 	bl	800158c <__NVIC_GetPriorityGrouping>
 80016c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	68b9      	ldr	r1, [r7, #8]
 80016cc:	6978      	ldr	r0, [r7, #20]
 80016ce:	f7ff ffb3 	bl	8001638 <NVIC_EncodePriority>
 80016d2:	4602      	mov	r2, r0
 80016d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff ff82 	bl	80015e4 <__NVIC_SetPriority>
}
 80016e0:	bf00      	nop
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ff56 	bl	80015a8 <__NVIC_EnableIRQ>
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001704:	b480      	push	{r7}
 8001706:	b087      	sub	sp, #28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001712:	e14c      	b.n	80019ae <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	2101      	movs	r1, #1
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	fa01 f303 	lsl.w	r3, r1, r3
 8001720:	4013      	ands	r3, r2
 8001722:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 813e 	beq.w	80019a8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	2b01      	cmp	r3, #1
 8001736:	d005      	beq.n	8001744 <HAL_GPIO_Init+0x40>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d130      	bne.n	80017a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	2203      	movs	r2, #3
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4013      	ands	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800177a:	2201      	movs	r2, #1
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	091b      	lsrs	r3, r3, #4
 8001790:	f003 0201 	and.w	r2, r3, #1
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d017      	beq.n	80017e2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	2203      	movs	r2, #3
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4013      	ands	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d123      	bne.n	8001836 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	08da      	lsrs	r2, r3, #3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3208      	adds	r2, #8
 80017f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	220f      	movs	r2, #15
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	691a      	ldr	r2, [r3, #16]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	08da      	lsrs	r2, r3, #3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3208      	adds	r2, #8
 8001830:	6939      	ldr	r1, [r7, #16]
 8001832:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	2203      	movs	r2, #3
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 0203 	and.w	r2, r3, #3
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 8098 	beq.w	80019a8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001878:	4a54      	ldr	r2, [pc, #336]	@ (80019cc <HAL_GPIO_Init+0x2c8>)
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	089b      	lsrs	r3, r3, #2
 800187e:	3302      	adds	r3, #2
 8001880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001884:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f003 0303 	and.w	r3, r3, #3
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	220f      	movs	r2, #15
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80018a2:	d019      	beq.n	80018d8 <HAL_GPIO_Init+0x1d4>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a4a      	ldr	r2, [pc, #296]	@ (80019d0 <HAL_GPIO_Init+0x2cc>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d013      	beq.n	80018d4 <HAL_GPIO_Init+0x1d0>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a49      	ldr	r2, [pc, #292]	@ (80019d4 <HAL_GPIO_Init+0x2d0>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d00d      	beq.n	80018d0 <HAL_GPIO_Init+0x1cc>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a48      	ldr	r2, [pc, #288]	@ (80019d8 <HAL_GPIO_Init+0x2d4>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d007      	beq.n	80018cc <HAL_GPIO_Init+0x1c8>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a47      	ldr	r2, [pc, #284]	@ (80019dc <HAL_GPIO_Init+0x2d8>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d101      	bne.n	80018c8 <HAL_GPIO_Init+0x1c4>
 80018c4:	2304      	movs	r3, #4
 80018c6:	e008      	b.n	80018da <HAL_GPIO_Init+0x1d6>
 80018c8:	2307      	movs	r3, #7
 80018ca:	e006      	b.n	80018da <HAL_GPIO_Init+0x1d6>
 80018cc:	2303      	movs	r3, #3
 80018ce:	e004      	b.n	80018da <HAL_GPIO_Init+0x1d6>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e002      	b.n	80018da <HAL_GPIO_Init+0x1d6>
 80018d4:	2301      	movs	r3, #1
 80018d6:	e000      	b.n	80018da <HAL_GPIO_Init+0x1d6>
 80018d8:	2300      	movs	r3, #0
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	f002 0203 	and.w	r2, r2, #3
 80018e0:	0092      	lsls	r2, r2, #2
 80018e2:	4093      	lsls	r3, r2
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018ea:	4938      	ldr	r1, [pc, #224]	@ (80019cc <HAL_GPIO_Init+0x2c8>)
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	089b      	lsrs	r3, r3, #2
 80018f0:	3302      	adds	r3, #2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018f8:	4b39      	ldr	r3, [pc, #228]	@ (80019e0 <HAL_GPIO_Init+0x2dc>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	43db      	mvns	r3, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800191c:	4a30      	ldr	r2, [pc, #192]	@ (80019e0 <HAL_GPIO_Init+0x2dc>)
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001922:	4b2f      	ldr	r3, [pc, #188]	@ (80019e0 <HAL_GPIO_Init+0x2dc>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	43db      	mvns	r3, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001946:	4a26      	ldr	r2, [pc, #152]	@ (80019e0 <HAL_GPIO_Init+0x2dc>)
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800194c:	4b24      	ldr	r3, [pc, #144]	@ (80019e0 <HAL_GPIO_Init+0x2dc>)
 800194e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001952:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	43db      	mvns	r3, r3
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4313      	orrs	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001972:	4a1b      	ldr	r2, [pc, #108]	@ (80019e0 <HAL_GPIO_Init+0x2dc>)
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800197a:	4b19      	ldr	r3, [pc, #100]	@ (80019e0 <HAL_GPIO_Init+0x2dc>)
 800197c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	43db      	mvns	r3, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019a0:	4a0f      	ldr	r2, [pc, #60]	@ (80019e0 <HAL_GPIO_Init+0x2dc>)
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	3301      	adds	r3, #1
 80019ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	fa22 f303 	lsr.w	r3, r2, r3
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f47f aeab 	bne.w	8001714 <HAL_GPIO_Init+0x10>
  }
}
 80019be:	bf00      	nop
 80019c0:	bf00      	nop
 80019c2:	371c      	adds	r7, #28
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	40010000 	.word	0x40010000
 80019d0:	48000400 	.word	0x48000400
 80019d4:	48000800 	.word	0x48000800
 80019d8:	48000c00 	.word	0x48000c00
 80019dc:	48001000 	.word	0x48001000
 80019e0:	58000800 	.word	0x58000800

080019e4 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b087      	sub	sp, #28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80019f2:	e0bb      	b.n	8001b6c <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80019f4:	2201      	movs	r2, #1
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	4013      	ands	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80ae 	beq.w	8001b66 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001a0a:	4a5f      	ldr	r2, [pc, #380]	@ (8001b88 <HAL_GPIO_DeInit+0x1a4>)
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	089b      	lsrs	r3, r3, #2
 8001a10:	3302      	adds	r3, #2
 8001a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a16:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	220f      	movs	r2, #15
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a32:	d019      	beq.n	8001a68 <HAL_GPIO_DeInit+0x84>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a55      	ldr	r2, [pc, #340]	@ (8001b8c <HAL_GPIO_DeInit+0x1a8>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d013      	beq.n	8001a64 <HAL_GPIO_DeInit+0x80>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a54      	ldr	r2, [pc, #336]	@ (8001b90 <HAL_GPIO_DeInit+0x1ac>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d00d      	beq.n	8001a60 <HAL_GPIO_DeInit+0x7c>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a53      	ldr	r2, [pc, #332]	@ (8001b94 <HAL_GPIO_DeInit+0x1b0>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d007      	beq.n	8001a5c <HAL_GPIO_DeInit+0x78>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a52      	ldr	r2, [pc, #328]	@ (8001b98 <HAL_GPIO_DeInit+0x1b4>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <HAL_GPIO_DeInit+0x74>
 8001a54:	2304      	movs	r3, #4
 8001a56:	e008      	b.n	8001a6a <HAL_GPIO_DeInit+0x86>
 8001a58:	2307      	movs	r3, #7
 8001a5a:	e006      	b.n	8001a6a <HAL_GPIO_DeInit+0x86>
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e004      	b.n	8001a6a <HAL_GPIO_DeInit+0x86>
 8001a60:	2302      	movs	r3, #2
 8001a62:	e002      	b.n	8001a6a <HAL_GPIO_DeInit+0x86>
 8001a64:	2301      	movs	r3, #1
 8001a66:	e000      	b.n	8001a6a <HAL_GPIO_DeInit+0x86>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	f002 0203 	and.w	r2, r2, #3
 8001a70:	0092      	lsls	r2, r2, #2
 8001a72:	4093      	lsls	r3, r2
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d136      	bne.n	8001ae8 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001a7a:	4b48      	ldr	r3, [pc, #288]	@ (8001b9c <HAL_GPIO_DeInit+0x1b8>)
 8001a7c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	43db      	mvns	r3, r3
 8001a84:	4945      	ldr	r1, [pc, #276]	@ (8001b9c <HAL_GPIO_DeInit+0x1b8>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8001a8c:	4b43      	ldr	r3, [pc, #268]	@ (8001b9c <HAL_GPIO_DeInit+0x1b8>)
 8001a8e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	4941      	ldr	r1, [pc, #260]	@ (8001b9c <HAL_GPIO_DeInit+0x1b8>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001a9e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b9c <HAL_GPIO_DeInit+0x1b8>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	493d      	ldr	r1, [pc, #244]	@ (8001b9c <HAL_GPIO_DeInit+0x1b8>)
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8001aac:	4b3b      	ldr	r3, [pc, #236]	@ (8001b9c <HAL_GPIO_DeInit+0x1b8>)
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	4939      	ldr	r1, [pc, #228]	@ (8001b9c <HAL_GPIO_DeInit+0x1b8>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	220f      	movs	r2, #15
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001aca:	4a2f      	ldr	r2, [pc, #188]	@ (8001b88 <HAL_GPIO_DeInit+0x1a4>)
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	089b      	lsrs	r3, r3, #2
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	43da      	mvns	r2, r3
 8001ada:	482b      	ldr	r0, [pc, #172]	@ (8001b88 <HAL_GPIO_DeInit+0x1a4>)
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	089b      	lsrs	r3, r3, #2
 8001ae0:	400a      	ands	r2, r1
 8001ae2:	3302      	adds	r3, #2
 8001ae4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	2103      	movs	r1, #3
 8001af2:	fa01 f303 	lsl.w	r3, r1, r3
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	08da      	lsrs	r2, r3, #3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3208      	adds	r2, #8
 8001b04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	220f      	movs	r2, #15
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	08d2      	lsrs	r2, r2, #3
 8001b1c:	4019      	ands	r1, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3208      	adds	r2, #8
 8001b22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2103      	movs	r1, #3
 8001b30:	fa01 f303 	lsl.w	r3, r1, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	401a      	ands	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	2101      	movs	r1, #1
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	fa01 f303 	lsl.w	r3, r1, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	2103      	movs	r1, #3
 8001b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	401a      	ands	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	609a      	str	r2, [r3, #8]
    }

    position++;
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	fa22 f303 	lsr.w	r3, r2, r3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f47f af3d 	bne.w	80019f4 <HAL_GPIO_DeInit+0x10>
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	bf00      	nop
 8001b7e:	371c      	adds	r7, #28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	40010000 	.word	0x40010000
 8001b8c:	48000400 	.word	0x48000400
 8001b90:	48000800 	.word	0x48000800
 8001b94:	48000c00 	.word	0x48000c00
 8001b98:	48001000 	.word	0x48001000
 8001b9c:	58000800 	.word	0x58000800

08001ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	807b      	strh	r3, [r7, #2]
 8001bac:	4613      	mov	r3, r2
 8001bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bb0:	787b      	ldrb	r3, [r7, #1]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bb6:	887a      	ldrh	r2, [r7, #2]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bbc:	e002      	b.n	8001bc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bbe:	887a      	ldrh	r2, [r7, #2]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001be2:	887a      	ldrh	r2, [r7, #2]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4013      	ands	r3, r2
 8001be8:	041a      	lsls	r2, r3, #16
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	43d9      	mvns	r1, r3
 8001bee:	887b      	ldrh	r3, [r7, #2]
 8001bf0:	400b      	ands	r3, r1
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	619a      	str	r2, [r3, #24]
}
 8001bf8:	bf00      	nop
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c08:	4b05      	ldr	r3, [pc, #20]	@ (8001c20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a04      	ldr	r2, [pc, #16]	@ (8001c20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001c0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c12:	6013      	str	r3, [r2, #0]
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	58000400 	.word	0x58000400

08001c24 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001c28:	4b04      	ldr	r3, [pc, #16]	@ (8001c3c <HAL_PWREx_GetVoltageRange+0x18>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	58000400 	.word	0x58000400

08001c40 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001c44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001c52:	d101      	bne.n	8001c58 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001c68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c76:	6013      	str	r3, [r2, #0]
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001c86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c94:	6013      	str	r3, [r2, #0]
}
 8001c96:	bf00      	nop
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001ca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001cb2:	d101      	bne.n	8001cb8 <LL_RCC_HSE_IsReady+0x18>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <LL_RCC_HSE_IsReady+0x1a>
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001cc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cd6:	6013      	str	r3, [r2, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001ce6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001cf4:	6013      	str	r3, [r2, #0]
}
 8001cf6:	bf00      	nop
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001d04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d12:	d101      	bne.n	8001d18 <LL_RCC_HSI_IsReady+0x18>
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <LL_RCC_HSI_IsReady+0x1a>
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001d2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	061b      	lsls	r3, r3, #24
 8001d3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	604b      	str	r3, [r1, #4]
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001d52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8001d66:	bf00      	nop
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001d74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d80:	f023 0301 	bic.w	r3, r3, #1
 8001d84:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001d96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d101      	bne.n	8001daa <LL_RCC_HSI48_IsReady+0x18>
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <LL_RCC_HSI48_IsReady+0x1a>
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001dba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001dce:	bf00      	nop
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ddc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001de4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001de8:	f023 0301 	bic.w	r3, r3, #1
 8001dec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001dfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e0a:	f043 0304 	orr.w	r3, r3, #4
 8001e0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001e12:	bf00      	nop
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001e20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e2c:	f023 0304 	bic.w	r3, r3, #4
 8001e30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001e42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d101      	bne.n	8001e56 <LL_RCC_LSE_IsReady+0x18>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <LL_RCC_LSE_IsReady+0x1a>
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001e66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001e88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e94:	f023 0301 	bic.w	r3, r3, #1
 8001e98:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001eaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d101      	bne.n	8001ebe <LL_RCC_LSI1_IsReady+0x18>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <LL_RCC_LSI1_IsReady+0x1a>
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001ece:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ed6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001eda:	f043 0304 	orr.w	r3, r3, #4
 8001ede:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001ee2:	bf00      	nop
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001ef0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ef8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001efc:	f023 0304 	bic.w	r3, r3, #4
 8001f00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001f12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d101      	bne.n	8001f26 <LL_RCC_LSI2_IsReady+0x18>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <LL_RCC_LSI2_IsReady+0x1a>
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001f3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f42:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	021b      	lsls	r3, r3, #8
 8001f4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001f64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	6013      	str	r3, [r2, #0]
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001f82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f8c:	f023 0301 	bic.w	r3, r3, #1
 8001f90:	6013      	str	r3, [r2, #0]
}
 8001f92:	bf00      	nop
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001fa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d101      	bne.n	8001fb2 <LL_RCC_MSI_IsReady+0x16>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <LL_RCC_MSI_IsReady+0x18>
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001fc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001fec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ff6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2bb0      	cmp	r3, #176	@ 0xb0
 8001ffc:	d901      	bls.n	8002002 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001ffe:	23b0      	movs	r3, #176	@ 0xb0
 8002000:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002002:	687b      	ldr	r3, [r7, #4]
}
 8002004:	4618      	mov	r0, r3
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002018:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	021b      	lsls	r3, r3, #8
 8002026:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800202a:	4313      	orrs	r3, r2
 800202c:	604b      	str	r3, [r1, #4]
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002042:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f023 0203 	bic.w	r2, r3, #3
 800204c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4313      	orrs	r3, r2
 8002054:	608b      	str	r3, [r1, #8]
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002066:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 030c 	and.w	r3, r3, #12
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002082:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800208c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4313      	orrs	r3, r2
 8002094:	608b      	str	r3, [r1, #8]
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80020aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80020b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80020d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020da:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80020de:	f023 020f 	bic.w	r2, r3, #15
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	091b      	lsrs	r3, r3, #4
 80020e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020ea:	4313      	orrs	r3, r2
 80020ec:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800210e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4313      	orrs	r3, r2
 8002116:	608b      	str	r3, [r1, #8]
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800212c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002136:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4313      	orrs	r3, r2
 800213e:	608b      	str	r3, [r1, #8]
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002150:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800215a:	4618      	mov	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8002168:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800216c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002170:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002182:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002186:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800219e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80021b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80021ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021dc:	6013      	str	r3, [r2, #0]
}
 80021de:	bf00      	nop
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80021ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021fa:	6013      	str	r3, [r2, #0]
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800220a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002214:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002218:	d101      	bne.n	800221e <LL_RCC_PLL_IsReady+0x18>
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <LL_RCC_PLL_IsReady+0x1a>
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800222e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	0a1b      	lsrs	r3, r3, #8
 8002236:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800223a:	4618      	mov	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002248:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002252:	4618      	mov	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002260:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800226a:	4618      	mov	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002278:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	f003 0303 	and.w	r3, r3, #3
}
 8002282:	4618      	mov	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002290:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800229a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800229e:	d101      	bne.n	80022a4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80022a0:	2301      	movs	r3, #1
 80022a2:	e000      	b.n	80022a6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80022b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80022bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80022c4:	d101      	bne.n	80022ca <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80022d6:	b480      	push	{r7}
 80022d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80022da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022de:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80022e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022ea:	d101      	bne.n	80022f0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002300:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800230a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800230e:	d101      	bne.n	8002314 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002310:	2301      	movs	r3, #1
 8002312:	e000      	b.n	8002316 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002324:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800232e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002332:	d101      	bne.n	8002338 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002344:	b590      	push	{r4, r7, lr}
 8002346:	b08d      	sub	sp, #52	@ 0x34
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e363      	b.n	8002a1e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0320 	and.w	r3, r3, #32
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 808d 	beq.w	800247e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002364:	f7ff fe7d 	bl	8002062 <LL_RCC_GetSysClkSource>
 8002368:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800236a:	f7ff ff83 	bl	8002274 <LL_RCC_PLL_GetMainSource>
 800236e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002372:	2b00      	cmp	r3, #0
 8002374:	d005      	beq.n	8002382 <HAL_RCC_OscConfig+0x3e>
 8002376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002378:	2b0c      	cmp	r3, #12
 800237a:	d147      	bne.n	800240c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800237c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800237e:	2b01      	cmp	r3, #1
 8002380:	d144      	bne.n	800240c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e347      	b.n	8002a1e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8002392:	f7ff fe28 	bl	8001fe6 <LL_RCC_MSI_GetRange>
 8002396:	4603      	mov	r3, r0
 8002398:	429c      	cmp	r4, r3
 800239a:	d914      	bls.n	80023c6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 fd61 	bl	8002e68 <RCC_SetFlashLatencyFromMSIRange>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e336      	b.n	8002a1e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fe02 	bl	8001fbe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fe26 	bl	8002010 <LL_RCC_MSI_SetCalibTrimming>
 80023c4:	e013      	b.n	80023ee <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fdf7 	bl	8001fbe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff fe1b 	bl	8002010 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 fd42 	bl	8002e68 <RCC_SetFlashLatencyFromMSIRange>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e317      	b.n	8002a1e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80023ee:	f000 fcc9 	bl	8002d84 <HAL_RCC_GetHCLKFreq>
 80023f2:	4603      	mov	r3, r0
 80023f4:	4aa4      	ldr	r2, [pc, #656]	@ (8002688 <HAL_RCC_OscConfig+0x344>)
 80023f6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023f8:	4ba4      	ldr	r3, [pc, #656]	@ (800268c <HAL_RCC_OscConfig+0x348>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe fe0f 	bl	8001020 <HAL_InitTick>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d039      	beq.n	800247c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e308      	b.n	8002a1e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d01e      	beq.n	8002452 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002414:	f7ff fda4 	bl	8001f60 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002418:	f7ff f87c 	bl	8001514 <HAL_GetTick>
 800241c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002420:	f7ff f878 	bl	8001514 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e2f5      	b.n	8002a1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002432:	f7ff fdb3 	bl	8001f9c <LL_RCC_MSI_IsReady>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0f1      	beq.n	8002420 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff fdbc 	bl	8001fbe <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fde0 	bl	8002010 <LL_RCC_MSI_SetCalibTrimming>
 8002450:	e015      	b.n	800247e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002452:	f7ff fd94 	bl	8001f7e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002456:	f7ff f85d 	bl	8001514 <HAL_GetTick>
 800245a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800245e:	f7ff f859 	bl	8001514 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e2d6      	b.n	8002a1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002470:	f7ff fd94 	bl	8001f9c <LL_RCC_MSI_IsReady>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f1      	bne.n	800245e <HAL_RCC_OscConfig+0x11a>
 800247a:	e000      	b.n	800247e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800247c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d047      	beq.n	800251a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800248a:	f7ff fdea 	bl	8002062 <LL_RCC_GetSysClkSource>
 800248e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002490:	f7ff fef0 	bl	8002274 <LL_RCC_PLL_GetMainSource>
 8002494:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	2b08      	cmp	r3, #8
 800249a:	d005      	beq.n	80024a8 <HAL_RCC_OscConfig+0x164>
 800249c:	6a3b      	ldr	r3, [r7, #32]
 800249e:	2b0c      	cmp	r3, #12
 80024a0:	d108      	bne.n	80024b4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d105      	bne.n	80024b4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d134      	bne.n	800251a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e2b4      	b.n	8002a1e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024bc:	d102      	bne.n	80024c4 <HAL_RCC_OscConfig+0x180>
 80024be:	f7ff fbd1 	bl	8001c64 <LL_RCC_HSE_Enable>
 80024c2:	e001      	b.n	80024c8 <HAL_RCC_OscConfig+0x184>
 80024c4:	f7ff fbdd 	bl	8001c82 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d012      	beq.n	80024f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7ff f820 	bl	8001514 <HAL_GetTick>
 80024d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d8:	f7ff f81c 	bl	8001514 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	@ 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e299      	b.n	8002a1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80024ea:	f7ff fbd9 	bl	8001ca0 <LL_RCC_HSE_IsReady>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f1      	beq.n	80024d8 <HAL_RCC_OscConfig+0x194>
 80024f4:	e011      	b.n	800251a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f6:	f7ff f80d 	bl	8001514 <HAL_GetTick>
 80024fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024fe:	f7ff f809 	bl	8001514 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b64      	cmp	r3, #100	@ 0x64
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e286      	b.n	8002a1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002510:	f7ff fbc6 	bl	8001ca0 <LL_RCC_HSE_IsReady>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f1      	bne.n	80024fe <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d04c      	beq.n	80025c0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002526:	f7ff fd9c 	bl	8002062 <LL_RCC_GetSysClkSource>
 800252a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800252c:	f7ff fea2 	bl	8002274 <LL_RCC_PLL_GetMainSource>
 8002530:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	2b04      	cmp	r3, #4
 8002536:	d005      	beq.n	8002544 <HAL_RCC_OscConfig+0x200>
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	2b0c      	cmp	r3, #12
 800253c:	d10e      	bne.n	800255c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d10b      	bne.n	800255c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e266      	b.n	8002a1e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff fbe5 	bl	8001d24 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800255a:	e031      	b.n	80025c0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d019      	beq.n	8002598 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002564:	f7ff fbae 	bl	8001cc4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002568:	f7fe ffd4 	bl	8001514 <HAL_GetTick>
 800256c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002570:	f7fe ffd0 	bl	8001514 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e24d      	b.n	8002a1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002582:	f7ff fbbd 	bl	8001d00 <LL_RCC_HSI_IsReady>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f1      	beq.n	8002570 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff fbc7 	bl	8001d24 <LL_RCC_HSI_SetCalibTrimming>
 8002596:	e013      	b.n	80025c0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002598:	f7ff fba3 	bl	8001ce2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259c:	f7fe ffba 	bl	8001514 <HAL_GetTick>
 80025a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a4:	f7fe ffb6 	bl	8001514 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e233      	b.n	8002a1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80025b6:	f7ff fba3 	bl	8001d00 <LL_RCC_HSI_IsReady>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f1      	bne.n	80025a4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d106      	bne.n	80025da <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 80a3 	beq.w	8002720 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d076      	beq.n	80026d0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d046      	beq.n	800267c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80025ee:	f7ff fc5a 	bl	8001ea6 <LL_RCC_LSI1_IsReady>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d113      	bne.n	8002620 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80025f8:	f7ff fc33 	bl	8001e62 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025fc:	f7fe ff8a 	bl	8001514 <HAL_GetTick>
 8002600:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002604:	f7fe ff86 	bl	8001514 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e203      	b.n	8002a1e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002616:	f7ff fc46 	bl	8001ea6 <LL_RCC_LSI1_IsReady>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f1      	beq.n	8002604 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002620:	f7ff fc53 	bl	8001eca <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002624:	f7fe ff76 	bl	8001514 <HAL_GetTick>
 8002628:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800262c:	f7fe ff72 	bl	8001514 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b03      	cmp	r3, #3
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e1ef      	b.n	8002a1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800263e:	f7ff fc66 	bl	8001f0e <LL_RCC_LSI2_IsReady>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0f1      	beq.n	800262c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fc70 	bl	8001f32 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002652:	f7ff fc17 	bl	8001e84 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002656:	f7fe ff5d 	bl	8001514 <HAL_GetTick>
 800265a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800265e:	f7fe ff59 	bl	8001514 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e1d6      	b.n	8002a1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002670:	f7ff fc19 	bl	8001ea6 <LL_RCC_LSI1_IsReady>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f1      	bne.n	800265e <HAL_RCC_OscConfig+0x31a>
 800267a:	e051      	b.n	8002720 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800267c:	f7ff fbf1 	bl	8001e62 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7fe ff48 	bl	8001514 <HAL_GetTick>
 8002684:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002686:	e00c      	b.n	80026a2 <HAL_RCC_OscConfig+0x35e>
 8002688:	20000008 	.word	0x20000008
 800268c:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002690:	f7fe ff40 	bl	8001514 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e1bd      	b.n	8002a1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80026a2:	f7ff fc00 	bl	8001ea6 <LL_RCC_LSI1_IsReady>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f1      	beq.n	8002690 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80026ac:	f7ff fc1e 	bl	8001eec <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80026b2:	f7fe ff2f 	bl	8001514 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e1ac      	b.n	8002a1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80026c4:	f7ff fc23 	bl	8001f0e <LL_RCC_LSI2_IsReady>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f1      	bne.n	80026b2 <HAL_RCC_OscConfig+0x36e>
 80026ce:	e027      	b.n	8002720 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80026d0:	f7ff fc0c 	bl	8001eec <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d4:	f7fe ff1e 	bl	8001514 <HAL_GetTick>
 80026d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80026dc:	f7fe ff1a 	bl	8001514 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e197      	b.n	8002a1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80026ee:	f7ff fc0e 	bl	8001f0e <LL_RCC_LSI2_IsReady>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f1      	bne.n	80026dc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80026f8:	f7ff fbc4 	bl	8001e84 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fc:	f7fe ff0a 	bl	8001514 <HAL_GetTick>
 8002700:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002704:	f7fe ff06 	bl	8001514 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e183      	b.n	8002a1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002716:	f7ff fbc6 	bl	8001ea6 <LL_RCC_LSI1_IsReady>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1f1      	bne.n	8002704 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d05b      	beq.n	80027e4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800272c:	4ba7      	ldr	r3, [pc, #668]	@ (80029cc <HAL_RCC_OscConfig+0x688>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002734:	2b00      	cmp	r3, #0
 8002736:	d114      	bne.n	8002762 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002738:	f7ff fa64 	bl	8001c04 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800273c:	f7fe feea 	bl	8001514 <HAL_GetTick>
 8002740:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002744:	f7fe fee6 	bl	8001514 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e163      	b.n	8002a1e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002756:	4b9d      	ldr	r3, [pc, #628]	@ (80029cc <HAL_RCC_OscConfig+0x688>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0f0      	beq.n	8002744 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d102      	bne.n	8002770 <HAL_RCC_OscConfig+0x42c>
 800276a:	f7ff fb24 	bl	8001db6 <LL_RCC_LSE_Enable>
 800276e:	e00c      	b.n	800278a <HAL_RCC_OscConfig+0x446>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2b05      	cmp	r3, #5
 8002776:	d104      	bne.n	8002782 <HAL_RCC_OscConfig+0x43e>
 8002778:	f7ff fb3f 	bl	8001dfa <LL_RCC_LSE_EnableBypass>
 800277c:	f7ff fb1b 	bl	8001db6 <LL_RCC_LSE_Enable>
 8002780:	e003      	b.n	800278a <HAL_RCC_OscConfig+0x446>
 8002782:	f7ff fb29 	bl	8001dd8 <LL_RCC_LSE_Disable>
 8002786:	f7ff fb49 	bl	8001e1c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d014      	beq.n	80027bc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002792:	f7fe febf 	bl	8001514 <HAL_GetTick>
 8002796:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002798:	e00a      	b.n	80027b0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279a:	f7fe febb 	bl	8001514 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e136      	b.n	8002a1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80027b0:	f7ff fb45 	bl	8001e3e <LL_RCC_LSE_IsReady>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0ef      	beq.n	800279a <HAL_RCC_OscConfig+0x456>
 80027ba:	e013      	b.n	80027e4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027bc:	f7fe feaa 	bl	8001514 <HAL_GetTick>
 80027c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80027c2:	e00a      	b.n	80027da <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c4:	f7fe fea6 	bl	8001514 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e121      	b.n	8002a1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80027da:	f7ff fb30 	bl	8001e3e <LL_RCC_LSE_IsReady>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1ef      	bne.n	80027c4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d02c      	beq.n	800284a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d014      	beq.n	8002822 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027f8:	f7ff faa9 	bl	8001d4e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fc:	f7fe fe8a 	bl	8001514 <HAL_GetTick>
 8002800:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002804:	f7fe fe86 	bl	8001514 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e103      	b.n	8002a1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002816:	f7ff fabc 	bl	8001d92 <LL_RCC_HSI48_IsReady>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f1      	beq.n	8002804 <HAL_RCC_OscConfig+0x4c0>
 8002820:	e013      	b.n	800284a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002822:	f7ff faa5 	bl	8001d70 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002826:	f7fe fe75 	bl	8001514 <HAL_GetTick>
 800282a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800282e:	f7fe fe71 	bl	8001514 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e0ee      	b.n	8002a1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002840:	f7ff faa7 	bl	8001d92 <LL_RCC_HSI48_IsReady>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f1      	bne.n	800282e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 80e4 	beq.w	8002a1c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002854:	f7ff fc05 	bl	8002062 <LL_RCC_GetSysClkSource>
 8002858:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800285a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002866:	2b02      	cmp	r3, #2
 8002868:	f040 80b4 	bne.w	80029d4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f003 0203 	and.w	r2, r3, #3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002876:	429a      	cmp	r2, r3
 8002878:	d123      	bne.n	80028c2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002884:	429a      	cmp	r2, r3
 8002886:	d11c      	bne.n	80028c2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	0a1b      	lsrs	r3, r3, #8
 800288c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002894:	429a      	cmp	r2, r3
 8002896:	d114      	bne.n	80028c2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d10d      	bne.n	80028c2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d106      	bne.n	80028c2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80028be:	429a      	cmp	r2, r3
 80028c0:	d05d      	beq.n	800297e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	2b0c      	cmp	r3, #12
 80028c6:	d058      	beq.n	800297a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e0a1      	b.n	8002a1e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028da:	f7ff fc85 	bl	80021e8 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028de:	f7fe fe19 	bl	8001514 <HAL_GetTick>
 80028e2:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e6:	f7fe fe15 	bl	8001514 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e092      	b.n	8002a1e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1ef      	bne.n	80028e6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002906:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	4b30      	ldr	r3, [pc, #192]	@ (80029d0 <HAL_RCC_OscConfig+0x68c>)
 800290e:	4013      	ands	r3, r2
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002918:	4311      	orrs	r1, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800291e:	0212      	lsls	r2, r2, #8
 8002920:	4311      	orrs	r1, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002926:	4311      	orrs	r1, r2
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800292c:	4311      	orrs	r1, r2
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002932:	430a      	orrs	r2, r1
 8002934:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002938:	4313      	orrs	r3, r2
 800293a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800293c:	f7ff fc45 	bl	80021ca <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002940:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800294a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800294e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002950:	f7fe fde0 	bl	8001514 <HAL_GetTick>
 8002954:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002958:	f7fe fddc 	bl	8001514 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e059      	b.n	8002a1e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800296a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0ef      	beq.n	8002958 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002978:	e050      	b.n	8002a1c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e04f      	b.n	8002a1e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800297e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d147      	bne.n	8002a1c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800298c:	f7ff fc1d 	bl	80021ca <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002990:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800299a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800299e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029a0:	f7fe fdb8 	bl	8001514 <HAL_GetTick>
 80029a4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a8:	f7fe fdb4 	bl	8001514 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e031      	b.n	8002a1e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0ef      	beq.n	80029a8 <HAL_RCC_OscConfig+0x664>
 80029c8:	e028      	b.n	8002a1c <HAL_RCC_OscConfig+0x6d8>
 80029ca:	bf00      	nop
 80029cc:	58000400 	.word	0x58000400
 80029d0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	2b0c      	cmp	r3, #12
 80029d8:	d01e      	beq.n	8002a18 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029da:	f7ff fc05 	bl	80021e8 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029de:	f7fe fd99 	bl	8001514 <HAL_GetTick>
 80029e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e6:	f7fe fd95 	bl	8001514 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e012      	b.n	8002a1e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1ef      	bne.n	80029e6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002a06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a10:	4b05      	ldr	r3, [pc, #20]	@ (8002a28 <HAL_RCC_OscConfig+0x6e4>)
 8002a12:	4013      	ands	r3, r2
 8002a14:	60cb      	str	r3, [r1, #12]
 8002a16:	e001      	b.n	8002a1c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e000      	b.n	8002a1e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3734      	adds	r7, #52	@ 0x34
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd90      	pop	{r4, r7, pc}
 8002a26:	bf00      	nop
 8002a28:	eefefffc 	.word	0xeefefffc

08002a2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e12d      	b.n	8002c9c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a40:	4b98      	ldr	r3, [pc, #608]	@ (8002ca4 <HAL_RCC_ClockConfig+0x278>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d91b      	bls.n	8002a86 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4e:	4b95      	ldr	r3, [pc, #596]	@ (8002ca4 <HAL_RCC_ClockConfig+0x278>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f023 0207 	bic.w	r2, r3, #7
 8002a56:	4993      	ldr	r1, [pc, #588]	@ (8002ca4 <HAL_RCC_ClockConfig+0x278>)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a5e:	f7fe fd59 	bl	8001514 <HAL_GetTick>
 8002a62:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a66:	f7fe fd55 	bl	8001514 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e111      	b.n	8002c9c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a78:	4b8a      	ldr	r3, [pc, #552]	@ (8002ca4 <HAL_RCC_ClockConfig+0x278>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d1ef      	bne.n	8002a66 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d016      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff faef 	bl	800207a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a9c:	f7fe fd3a 	bl	8001514 <HAL_GetTick>
 8002aa0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002aa4:	f7fe fd36 	bl	8001514 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e0f2      	b.n	8002c9c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002ab6:	f7ff fbe9 	bl	800228c <LL_RCC_IsActiveFlag_HPRE>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f1      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0320 	and.w	r3, r3, #32
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d016      	beq.n	8002afa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff fae6 	bl	80020a2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ad6:	f7fe fd1d 	bl	8001514 <HAL_GetTick>
 8002ada:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ade:	f7fe fd19 	bl	8001514 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e0d5      	b.n	8002c9c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002af0:	f7ff fbde 	bl	80022b0 <LL_RCC_IsActiveFlag_C2HPRE>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f1      	beq.n	8002ade <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d016      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fadf 	bl	80020ce <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002b10:	f7fe fd00 	bl	8001514 <HAL_GetTick>
 8002b14:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b18:	f7fe fcfc 	bl	8001514 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e0b8      	b.n	8002c9c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002b2a:	f7ff fbd4 	bl	80022d6 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0f1      	beq.n	8002b18 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d016      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff fad9 	bl	80020fc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002b4a:	f7fe fce3 	bl	8001514 <HAL_GetTick>
 8002b4e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b52:	f7fe fcdf 	bl	8001514 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e09b      	b.n	8002c9c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002b64:	f7ff fbca 	bl	80022fc <LL_RCC_IsActiveFlag_PPRE1>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f1      	beq.n	8002b52 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d017      	beq.n	8002baa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff facf 	bl	8002124 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002b86:	f7fe fcc5 	bl	8001514 <HAL_GetTick>
 8002b8a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b8e:	f7fe fcc1 	bl	8001514 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e07d      	b.n	8002c9c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002ba0:	f7ff fbbe 	bl	8002320 <LL_RCC_IsActiveFlag_PPRE2>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f1      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d043      	beq.n	8002c3e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d106      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002bbe:	f7ff f86f 	bl	8001ca0 <LL_RCC_HSE_IsReady>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d11e      	bne.n	8002c06 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e067      	b.n	8002c9c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	d106      	bne.n	8002be2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002bd4:	f7ff fb17 	bl	8002206 <LL_RCC_PLL_IsReady>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d113      	bne.n	8002c06 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e05c      	b.n	8002c9c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d106      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002bea:	f7ff f9d7 	bl	8001f9c <LL_RCC_MSI_IsReady>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d108      	bne.n	8002c06 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e051      	b.n	8002c9c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002bf8:	f7ff f882 	bl	8001d00 <LL_RCC_HSI_IsReady>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e04a      	b.n	8002c9c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff fa15 	bl	800203a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c10:	f7fe fc80 	bl	8001514 <HAL_GetTick>
 8002c14:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c16:	e00a      	b.n	8002c2e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c18:	f7fe fc7c 	bl	8001514 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e036      	b.n	8002c9c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2e:	f7ff fa18 	bl	8002062 <LL_RCC_GetSysClkSource>
 8002c32:	4602      	mov	r2, r0
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d1ec      	bne.n	8002c18 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c3e:	4b19      	ldr	r3, [pc, #100]	@ (8002ca4 <HAL_RCC_ClockConfig+0x278>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d21b      	bcs.n	8002c84 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4c:	4b15      	ldr	r3, [pc, #84]	@ (8002ca4 <HAL_RCC_ClockConfig+0x278>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f023 0207 	bic.w	r2, r3, #7
 8002c54:	4913      	ldr	r1, [pc, #76]	@ (8002ca4 <HAL_RCC_ClockConfig+0x278>)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c5c:	f7fe fc5a 	bl	8001514 <HAL_GetTick>
 8002c60:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c64:	f7fe fc56 	bl	8001514 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e012      	b.n	8002c9c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c76:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca4 <HAL_RCC_ClockConfig+0x278>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d1ef      	bne.n	8002c64 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002c84:	f000 f87e 	bl	8002d84 <HAL_RCC_GetHCLKFreq>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	4a07      	ldr	r2, [pc, #28]	@ (8002ca8 <HAL_RCC_ClockConfig+0x27c>)
 8002c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002c8e:	f7fe fc4d 	bl	800152c <HAL_GetTickPrio>
 8002c92:	4603      	mov	r3, r0
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fe f9c3 	bl	8001020 <HAL_InitTick>
 8002c9a:	4603      	mov	r3, r0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	58004000 	.word	0x58004000
 8002ca8:	20000008 	.word	0x20000008

08002cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cac:	b590      	push	{r4, r7, lr}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb2:	f7ff f9d6 	bl	8002062 <LL_RCC_GetSysClkSource>
 8002cb6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10a      	bne.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002cbe:	f7ff f992 	bl	8001fe6 <LL_RCC_MSI_GetRange>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	091b      	lsrs	r3, r3, #4
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	4a2b      	ldr	r2, [pc, #172]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	e04b      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d102      	bne.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cda:	4b28      	ldr	r3, [pc, #160]	@ (8002d7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	e045      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d10a      	bne.n	8002cfc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002ce6:	f7fe ffab 	bl	8001c40 <LL_RCC_HSE_IsEnabledDiv2>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d102      	bne.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002cf0:	4b22      	ldr	r3, [pc, #136]	@ (8002d7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	e03a      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002cf6:	4b22      	ldr	r3, [pc, #136]	@ (8002d80 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	e037      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002cfc:	f7ff faba 	bl	8002274 <LL_RCC_PLL_GetMainSource>
 8002d00:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d003      	beq.n	8002d10 <HAL_RCC_GetSysClockFreq+0x64>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	2b03      	cmp	r3, #3
 8002d0c:	d003      	beq.n	8002d16 <HAL_RCC_GetSysClockFreq+0x6a>
 8002d0e:	e00d      	b.n	8002d2c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002d10:	4b1a      	ldr	r3, [pc, #104]	@ (8002d7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d12:	60bb      	str	r3, [r7, #8]
        break;
 8002d14:	e015      	b.n	8002d42 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002d16:	f7fe ff93 	bl	8001c40 <LL_RCC_HSE_IsEnabledDiv2>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d102      	bne.n	8002d26 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002d20:	4b16      	ldr	r3, [pc, #88]	@ (8002d7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d22:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002d24:	e00d      	b.n	8002d42 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002d26:	4b16      	ldr	r3, [pc, #88]	@ (8002d80 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002d28:	60bb      	str	r3, [r7, #8]
        break;
 8002d2a:	e00a      	b.n	8002d42 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002d2c:	f7ff f95b 	bl	8001fe6 <LL_RCC_MSI_GetRange>
 8002d30:	4603      	mov	r3, r0
 8002d32:	091b      	lsrs	r3, r3, #4
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	4a0f      	ldr	r2, [pc, #60]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3e:	60bb      	str	r3, [r7, #8]
        break;
 8002d40:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002d42:	f7ff fa72 	bl	800222a <LL_RCC_PLL_GetN>
 8002d46:	4602      	mov	r2, r0
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	fb03 f402 	mul.w	r4, r3, r2
 8002d4e:	f7ff fa85 	bl	800225c <LL_RCC_PLL_GetDivider>
 8002d52:	4603      	mov	r3, r0
 8002d54:	091b      	lsrs	r3, r3, #4
 8002d56:	3301      	adds	r3, #1
 8002d58:	fbb4 f4f3 	udiv	r4, r4, r3
 8002d5c:	f7ff fa72 	bl	8002244 <LL_RCC_PLL_GetR>
 8002d60:	4603      	mov	r3, r0
 8002d62:	0f5b      	lsrs	r3, r3, #29
 8002d64:	3301      	adds	r3, #1
 8002d66:	fbb4 f3f3 	udiv	r3, r4, r3
 8002d6a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd90      	pop	{r4, r7, pc}
 8002d76:	bf00      	nop
 8002d78:	08008bd4 	.word	0x08008bd4
 8002d7c:	00f42400 	.word	0x00f42400
 8002d80:	01e84800 	.word	0x01e84800

08002d84 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d84:	b598      	push	{r3, r4, r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002d88:	f7ff ff90 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 8002d8c:	4604      	mov	r4, r0
 8002d8e:	f7ff f9dd 	bl	800214c <LL_RCC_GetAHBPrescaler>
 8002d92:	4603      	mov	r3, r0
 8002d94:	091b      	lsrs	r3, r3, #4
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	4a03      	ldr	r2, [pc, #12]	@ (8002da8 <HAL_RCC_GetHCLKFreq+0x24>)
 8002d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	bd98      	pop	{r3, r4, r7, pc}
 8002da8:	08008b74 	.word	0x08008b74

08002dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dac:	b598      	push	{r3, r4, r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002db0:	f7ff ffe8 	bl	8002d84 <HAL_RCC_GetHCLKFreq>
 8002db4:	4604      	mov	r4, r0
 8002db6:	f7ff f9f0 	bl	800219a <LL_RCC_GetAPB1Prescaler>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	0a1b      	lsrs	r3, r3, #8
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	4a04      	ldr	r2, [pc, #16]	@ (8002dd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc8:	f003 031f 	and.w	r3, r3, #31
 8002dcc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	bd98      	pop	{r3, r4, r7, pc}
 8002dd4:	08008bb4 	.word	0x08008bb4

08002dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dd8:	b598      	push	{r3, r4, r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002ddc:	f7ff ffd2 	bl	8002d84 <HAL_RCC_GetHCLKFreq>
 8002de0:	4604      	mov	r4, r0
 8002de2:	f7ff f9e6 	bl	80021b2 <LL_RCC_GetAPB2Prescaler>
 8002de6:	4603      	mov	r3, r0
 8002de8:	0adb      	lsrs	r3, r3, #11
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	4a04      	ldr	r2, [pc, #16]	@ (8002e00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df4:	f003 031f 	and.w	r3, r3, #31
 8002df8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	bd98      	pop	{r3, r4, r7, pc}
 8002e00:	08008bb4 	.word	0x08008bb4

08002e04 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	226f      	movs	r2, #111	@ 0x6f
 8002e12:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8002e14:	f7ff f925 	bl	8002062 <LL_RCC_GetSysClkSource>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8002e1e:	f7ff f995 	bl	800214c <LL_RCC_GetAHBPrescaler>
 8002e22:	4602      	mov	r2, r0
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8002e28:	f7ff f9b7 	bl	800219a <LL_RCC_GetAPB1Prescaler>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8002e32:	f7ff f9be 	bl	80021b2 <LL_RCC_GetAPB2Prescaler>
 8002e36:	4602      	mov	r2, r0
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8002e3c:	f7ff f992 	bl	8002164 <LL_C2_RCC_GetAHBPrescaler>
 8002e40:	4602      	mov	r2, r0
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8002e46:	f7ff f99a 	bl	800217e <LL_RCC_GetAHB4Prescaler>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002e50:	4b04      	ldr	r3, [pc, #16]	@ (8002e64 <HAL_RCC_GetClockConfig+0x60>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0207 	and.w	r2, r3, #7
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	601a      	str	r2, [r3, #0]
}
 8002e5c:	bf00      	nop
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	58004000 	.word	0x58004000

08002e68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002e68:	b590      	push	{r4, r7, lr}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2bb0      	cmp	r3, #176	@ 0xb0
 8002e74:	d903      	bls.n	8002e7e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002e76:	4b15      	ldr	r3, [pc, #84]	@ (8002ecc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	e007      	b.n	8002e8e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	091b      	lsrs	r3, r3, #4
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	4a11      	ldr	r2, [pc, #68]	@ (8002ecc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e8c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002e8e:	f7ff f976 	bl	800217e <LL_RCC_GetAHB4Prescaler>
 8002e92:	4603      	mov	r3, r0
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	4a0d      	ldr	r2, [pc, #52]	@ (8002ed0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002eac:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb0:	0c9c      	lsrs	r4, r3, #18
 8002eb2:	f7fe feb7 	bl	8001c24 <HAL_PWREx_GetVoltageRange>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4620      	mov	r0, r4
 8002ebc:	f000 f80c 	bl	8002ed8 <RCC_SetFlashLatency>
 8002ec0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd90      	pop	{r4, r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	08008bd4 	.word	0x08008bd4
 8002ed0:	08008b74 	.word	0x08008b74
 8002ed4:	431bde83 	.word	0x431bde83

08002ed8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002ed8:	b590      	push	{r4, r7, lr}
 8002eda:	b093      	sub	sp, #76	@ 0x4c
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002ee2:	4b37      	ldr	r3, [pc, #220]	@ (8002fc0 <RCC_SetFlashLatency+0xe8>)
 8002ee4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002ee8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002eea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002eee:	4a35      	ldr	r2, [pc, #212]	@ (8002fc4 <RCC_SetFlashLatency+0xec>)
 8002ef0:	f107 031c 	add.w	r3, r7, #28
 8002ef4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ef6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002efa:	4b33      	ldr	r3, [pc, #204]	@ (8002fc8 <RCC_SetFlashLatency+0xf0>)
 8002efc:	f107 040c 	add.w	r4, r7, #12
 8002f00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002f06:	2300      	movs	r3, #0
 8002f08:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f10:	d11a      	bne.n	8002f48 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f16:	e013      	b.n	8002f40 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002f18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	3348      	adds	r3, #72	@ 0x48
 8002f1e:	443b      	add	r3, r7
 8002f20:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d807      	bhi.n	8002f3a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002f2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	3348      	adds	r3, #72	@ 0x48
 8002f30:	443b      	add	r3, r7
 8002f32:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002f36:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002f38:	e020      	b.n	8002f7c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002f3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d9e8      	bls.n	8002f18 <RCC_SetFlashLatency+0x40>
 8002f46:	e019      	b.n	8002f7c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002f48:	2300      	movs	r3, #0
 8002f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f4c:	e013      	b.n	8002f76 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	3348      	adds	r3, #72	@ 0x48
 8002f54:	443b      	add	r3, r7
 8002f56:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d807      	bhi.n	8002f70 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	3348      	adds	r3, #72	@ 0x48
 8002f66:	443b      	add	r3, r7
 8002f68:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002f6c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002f6e:	e005      	b.n	8002f7c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f72:	3301      	adds	r3, #1
 8002f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d9e8      	bls.n	8002f4e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002f7c:	4b13      	ldr	r3, [pc, #76]	@ (8002fcc <RCC_SetFlashLatency+0xf4>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f023 0207 	bic.w	r2, r3, #7
 8002f84:	4911      	ldr	r1, [pc, #68]	@ (8002fcc <RCC_SetFlashLatency+0xf4>)
 8002f86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002f8c:	f7fe fac2 	bl	8001514 <HAL_GetTick>
 8002f90:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002f92:	e008      	b.n	8002fa6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002f94:	f7fe fabe 	bl	8001514 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e007      	b.n	8002fb6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002fa6:	4b09      	ldr	r3, [pc, #36]	@ (8002fcc <RCC_SetFlashLatency+0xf4>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d1ef      	bne.n	8002f94 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	374c      	adds	r7, #76	@ 0x4c
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd90      	pop	{r4, r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	08008aa0 	.word	0x08008aa0
 8002fc4:	08008ab0 	.word	0x08008ab0
 8002fc8:	08008abc 	.word	0x08008abc
 8002fcc:	58004000 	.word	0x58004000

08002fd0 <LL_RCC_LSE_IsEnabled>:
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002fd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <LL_RCC_LSE_IsEnabled+0x18>
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e000      	b.n	8002fea <LL_RCC_LSE_IsEnabled+0x1a>
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <LL_RCC_LSE_IsReady>:
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002ff8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b02      	cmp	r3, #2
 8003006:	d101      	bne.n	800300c <LL_RCC_LSE_IsReady+0x18>
 8003008:	2301      	movs	r3, #1
 800300a:	e000      	b.n	800300e <LL_RCC_LSE_IsReady+0x1a>
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <LL_RCC_SetRFWKPClockSource>:
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003020:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003024:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003028:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800302c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4313      	orrs	r3, r2
 8003034:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <LL_RCC_SetSMPSClockSource>:
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800304c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003052:	f023 0203 	bic.w	r2, r3, #3
 8003056:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4313      	orrs	r3, r2
 800305e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <LL_RCC_SetSMPSPrescaler>:
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003074:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800307e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4313      	orrs	r3, r2
 8003086:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <LL_RCC_SetUSARTClockSource>:
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800309c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a4:	f023 0203 	bic.w	r2, r3, #3
 80030a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <LL_RCC_SetLPUARTClockSource>:
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80030c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030d0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80030d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4313      	orrs	r3, r2
 80030dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <LL_RCC_SetI2CClockSource>:
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80030f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	091b      	lsrs	r3, r3, #4
 8003100:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003104:	43db      	mvns	r3, r3
 8003106:	401a      	ands	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003110:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <LL_RCC_SetLPTIMClockSource>:
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800312e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003132:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	0c1b      	lsrs	r3, r3, #16
 800313a:	041b      	lsls	r3, r3, #16
 800313c:	43db      	mvns	r3, r3
 800313e:	401a      	ands	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	041b      	lsls	r3, r3, #16
 8003144:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <LL_RCC_SetSAIClockSource>:
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003162:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800316a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800316e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4313      	orrs	r3, r2
 8003176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <LL_RCC_SetRNGClockSource>:
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800318e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003196:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800319a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <LL_RCC_SetCLK48ClockSource>:
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80031ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80031c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <LL_RCC_SetUSBClockSource>:
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7ff ffe3 	bl	80031b2 <LL_RCC_SetCLK48ClockSource>
}
 80031ec:	bf00      	nop
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <LL_RCC_SetADCClockSource>:
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80031fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003204:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003208:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <LL_RCC_SetRTCClockSource>:
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800322c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003230:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003234:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <LL_RCC_GetRTCClockSource>:
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003250:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003258:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800325c:	4618      	mov	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <LL_RCC_ForceBackupDomainReset>:
{
 8003266:	b480      	push	{r7}
 8003268:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800326a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800326e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003272:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003276:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800327a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800327e:	bf00      	nop
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800328c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003294:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003298:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800329c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80032a0:	bf00      	nop
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <LL_RCC_PLLSAI1_Enable>:
{
 80032aa:	b480      	push	{r7}
 80032ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80032ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80032bc:	6013      	str	r3, [r2, #0]
}
 80032be:	bf00      	nop
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <LL_RCC_PLLSAI1_Disable>:
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80032cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80032da:	6013      	str	r3, [r2, #0]
}
 80032dc:	bf00      	nop
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <LL_RCC_PLLSAI1_IsReady>:
{
 80032e6:	b480      	push	{r7}
 80032e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80032ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032f8:	d101      	bne.n	80032fe <LL_RCC_PLLSAI1_IsReady+0x18>
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b088      	sub	sp, #32
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003312:	2300      	movs	r3, #0
 8003314:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003316:	2300      	movs	r3, #0
 8003318:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003322:	2b00      	cmp	r3, #0
 8003324:	d034      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800332e:	d021      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003330:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003334:	d81b      	bhi.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003336:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800333a:	d01d      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800333c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003340:	d815      	bhi.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00b      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003346:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800334a:	d110      	bne.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800334c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003356:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800335a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800335c:	e00d      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3304      	adds	r3, #4
 8003362:	4618      	mov	r0, r3
 8003364:	f000 f947 	bl	80035f6 <RCCEx_PLLSAI1_ConfigNP>
 8003368:	4603      	mov	r3, r0
 800336a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800336c:	e005      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	77fb      	strb	r3, [r7, #31]
        break;
 8003372:	e002      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003374:	bf00      	nop
 8003376:	e000      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003378:	bf00      	nop
    }

    if (ret == HAL_OK)
 800337a:	7ffb      	ldrb	r3, [r7, #31]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d105      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff fee8 	bl	800315a <LL_RCC_SetSAIClockSource>
 800338a:	e001      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800338c:	7ffb      	ldrb	r3, [r7, #31]
 800338e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003398:	2b00      	cmp	r3, #0
 800339a:	d046      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800339c:	f7ff ff56 	bl	800324c <LL_RCC_GetRTCClockSource>
 80033a0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d03c      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80033ac:	f7fe fc2a 	bl	8001c04 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d105      	bne.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff ff30 	bl	8003220 <LL_RCC_SetRTCClockSource>
 80033c0:	e02e      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80033c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ca:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80033cc:	f7ff ff4b 	bl	8003266 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80033d0:	f7ff ff5a 	bl	8003288 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033de:	4313      	orrs	r3, r2
 80033e0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80033e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80033ec:	f7ff fdf0 	bl	8002fd0 <LL_RCC_LSE_IsEnabled>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d114      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033f6:	f7fe f88d 	bl	8001514 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80033fc:	e00b      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fe:	f7fe f889 	bl	8001514 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	f241 3288 	movw	r2, #5000	@ 0x1388
 800340c:	4293      	cmp	r3, r2
 800340e:	d902      	bls.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	77fb      	strb	r3, [r7, #31]
              break;
 8003414:	e004      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003416:	f7ff fded 	bl	8002ff4 <LL_RCC_LSE_IsReady>
 800341a:	4603      	mov	r3, r0
 800341c:	2b01      	cmp	r3, #1
 800341e:	d1ee      	bne.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003420:	7ffb      	ldrb	r3, [r7, #31]
 8003422:	77bb      	strb	r3, [r7, #30]
 8003424:	e001      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003426:	7ffb      	ldrb	r3, [r7, #31]
 8003428:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d004      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff fe2a 	bl	8003094 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d004      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff fe35 	bl	80030c0 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0310 	and.w	r3, r3, #16
 800345e:	2b00      	cmp	r3, #0
 8003460:	d004      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff fe5d 	bl	8003126 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b00      	cmp	r3, #0
 8003476:	d004      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff fe52 	bl	8003126 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b00      	cmp	r3, #0
 800348c:	d004      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff fe2a 	bl	80030ec <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0308 	and.w	r3, r3, #8
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d004      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff fe1f 	bl	80030ec <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d022      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff fe8d 	bl	80031de <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034cc:	d107      	bne.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80034ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034dc:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034e6:	d10b      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3304      	adds	r3, #4
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 f8dd 	bl	80036ac <RCCEx_PLLSAI1_ConfigNQ>
 80034f2:	4603      	mov	r3, r0
 80034f4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80034f6:	7ffb      	ldrb	r3, [r7, #31]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80034fc:	7ffb      	ldrb	r3, [r7, #31]
 80034fe:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003508:	2b00      	cmp	r3, #0
 800350a:	d02b      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003510:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003514:	d008      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800351a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800351e:	d003      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003524:	2b00      	cmp	r3, #0
 8003526:	d105      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff fe2a 	bl	8003186 <LL_RCC_SetRNGClockSource>
 8003532:	e00a      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003538:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	2000      	movs	r0, #0
 8003540:	f7ff fe21 	bl	8003186 <LL_RCC_SetRNGClockSource>
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f7ff fe34 	bl	80031b2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800354e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003552:	d107      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003554:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800355e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003562:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800356c:	2b00      	cmp	r3, #0
 800356e:	d022      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff fe3d 	bl	80031f4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800357e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003582:	d107      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003584:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800358e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003592:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003598:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800359c:	d10b      	bne.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3304      	adds	r3, #4
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 f8dd 	bl	8003762 <RCCEx_PLLSAI1_ConfigNR>
 80035a8:	4603      	mov	r3, r0
 80035aa:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80035ac:	7ffb      	ldrb	r3, [r7, #31]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80035b2:	7ffb      	ldrb	r3, [r7, #31]
 80035b4:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d004      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff fd26 	bl	8003018 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d009      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fd45 	bl	800306c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff fd2c 	bl	8003044 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80035ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3720      	adds	r7, #32
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b084      	sub	sp, #16
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035fe:	2300      	movs	r3, #0
 8003600:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003602:	f7ff fe61 	bl	80032c8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003606:	f7fd ff85 	bl	8001514 <HAL_GetTick>
 800360a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800360c:	e009      	b.n	8003622 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800360e:	f7fd ff81 	bl	8001514 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d902      	bls.n	8003622 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	73fb      	strb	r3, [r7, #15]
      break;
 8003620:	e004      	b.n	800362c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003622:	f7ff fe60 	bl	80032e6 <LL_RCC_PLLSAI1_IsReady>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1f0      	bne.n	800360e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800362c:	7bfb      	ldrb	r3, [r7, #15]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d137      	bne.n	80036a2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003632:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	021b      	lsls	r3, r3, #8
 8003642:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003646:	4313      	orrs	r3, r2
 8003648:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800364a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800365c:	4313      	orrs	r3, r2
 800365e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003660:	f7ff fe23 	bl	80032aa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003664:	f7fd ff56 	bl	8001514 <HAL_GetTick>
 8003668:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800366a:	e009      	b.n	8003680 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800366c:	f7fd ff52 	bl	8001514 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d902      	bls.n	8003680 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	73fb      	strb	r3, [r7, #15]
        break;
 800367e:	e004      	b.n	800368a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003680:	f7ff fe31 	bl	80032e6 <LL_RCC_PLLSAI1_IsReady>
 8003684:	4603      	mov	r3, r0
 8003686:	2b01      	cmp	r3, #1
 8003688:	d1f0      	bne.n	800366c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d108      	bne.n	80036a2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003690:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003694:	691a      	ldr	r2, [r3, #16]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800369e:	4313      	orrs	r3, r2
 80036a0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036b4:	2300      	movs	r3, #0
 80036b6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80036b8:	f7ff fe06 	bl	80032c8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80036bc:	f7fd ff2a 	bl	8001514 <HAL_GetTick>
 80036c0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80036c2:	e009      	b.n	80036d8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036c4:	f7fd ff26 	bl	8001514 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d902      	bls.n	80036d8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	73fb      	strb	r3, [r7, #15]
      break;
 80036d6:	e004      	b.n	80036e2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80036d8:	f7ff fe05 	bl	80032e6 <LL_RCC_PLLSAI1_IsReady>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1f0      	bne.n	80036c4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d137      	bne.n	8003758 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80036e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	021b      	lsls	r3, r3, #8
 80036f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036fc:	4313      	orrs	r3, r2
 80036fe:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003700:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003712:	4313      	orrs	r3, r2
 8003714:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003716:	f7ff fdc8 	bl	80032aa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800371a:	f7fd fefb 	bl	8001514 <HAL_GetTick>
 800371e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003720:	e009      	b.n	8003736 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003722:	f7fd fef7 	bl	8001514 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d902      	bls.n	8003736 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	73fb      	strb	r3, [r7, #15]
        break;
 8003734:	e004      	b.n	8003740 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003736:	f7ff fdd6 	bl	80032e6 <LL_RCC_PLLSAI1_IsReady>
 800373a:	4603      	mov	r3, r0
 800373c:	2b01      	cmp	r3, #1
 800373e:	d1f0      	bne.n	8003722 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d108      	bne.n	8003758 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003746:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003754:	4313      	orrs	r3, r2
 8003756:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003758:	7bfb      	ldrb	r3, [r7, #15]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b084      	sub	sp, #16
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800376a:	2300      	movs	r3, #0
 800376c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800376e:	f7ff fdab 	bl	80032c8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003772:	f7fd fecf 	bl	8001514 <HAL_GetTick>
 8003776:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003778:	e009      	b.n	800378e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800377a:	f7fd fecb 	bl	8001514 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d902      	bls.n	800378e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	73fb      	strb	r3, [r7, #15]
      break;
 800378c:	e004      	b.n	8003798 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800378e:	f7ff fdaa 	bl	80032e6 <LL_RCC_PLLSAI1_IsReady>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1f0      	bne.n	800377a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003798:	7bfb      	ldrb	r3, [r7, #15]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d137      	bne.n	800380e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800379e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	021b      	lsls	r3, r3, #8
 80037ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80037b2:	4313      	orrs	r3, r2
 80037b4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80037b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80037c8:	4313      	orrs	r3, r2
 80037ca:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80037cc:	f7ff fd6d 	bl	80032aa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d0:	f7fd fea0 	bl	8001514 <HAL_GetTick>
 80037d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80037d6:	e009      	b.n	80037ec <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037d8:	f7fd fe9c 	bl	8001514 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d902      	bls.n	80037ec <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	73fb      	strb	r3, [r7, #15]
        break;
 80037ea:	e004      	b.n	80037f6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80037ec:	f7ff fd7b 	bl	80032e6 <LL_RCC_PLLSAI1_IsReady>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d1f0      	bne.n	80037d8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80037f6:	7bfb      	ldrb	r3, [r7, #15]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d108      	bne.n	800380e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80037fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003800:	691a      	ldr	r2, [r3, #16]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800380a:	4313      	orrs	r3, r2
 800380c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800380e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e049      	b.n	80038be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d106      	bne.n	8003844 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f841 	bl	80038c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3304      	adds	r3, #4
 8003854:	4619      	mov	r1, r3
 8003856:	4610      	mov	r0, r2
 8003858:	f000 f9be 	bl	8003bd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
	...

080038dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d001      	beq.n	80038f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e036      	b.n	8003962 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0201 	orr.w	r2, r2, #1
 800390a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a17      	ldr	r2, [pc, #92]	@ (8003970 <HAL_TIM_Base_Start_IT+0x94>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d004      	beq.n	8003920 <HAL_TIM_Base_Start_IT+0x44>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800391e:	d115      	bne.n	800394c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	4b13      	ldr	r3, [pc, #76]	@ (8003974 <HAL_TIM_Base_Start_IT+0x98>)
 8003928:	4013      	ands	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2b06      	cmp	r3, #6
 8003930:	d015      	beq.n	800395e <HAL_TIM_Base_Start_IT+0x82>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003938:	d011      	beq.n	800395e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f042 0201 	orr.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800394a:	e008      	b.n	800395e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0201 	orr.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	e000      	b.n	8003960 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800395e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	40012c00 	.word	0x40012c00
 8003974:	00010007 	.word	0x00010007

08003978 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d020      	beq.n	80039dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d01b      	beq.n	80039dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f06f 0202 	mvn.w	r2, #2
 80039ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f8e9 	bl	8003b9a <HAL_TIM_IC_CaptureCallback>
 80039c8:	e005      	b.n	80039d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f8db 	bl	8003b86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f8ec 	bl	8003bae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d020      	beq.n	8003a28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d01b      	beq.n	8003a28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f06f 0204 	mvn.w	r2, #4
 80039f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2202      	movs	r2, #2
 80039fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f8c3 	bl	8003b9a <HAL_TIM_IC_CaptureCallback>
 8003a14:	e005      	b.n	8003a22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f8b5 	bl	8003b86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f8c6 	bl	8003bae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d020      	beq.n	8003a74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f003 0308 	and.w	r3, r3, #8
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d01b      	beq.n	8003a74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f06f 0208 	mvn.w	r2, #8
 8003a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2204      	movs	r2, #4
 8003a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f89d 	bl	8003b9a <HAL_TIM_IC_CaptureCallback>
 8003a60:	e005      	b.n	8003a6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f88f 	bl	8003b86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f8a0 	bl	8003bae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f003 0310 	and.w	r3, r3, #16
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d020      	beq.n	8003ac0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f003 0310 	and.w	r3, r3, #16
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d01b      	beq.n	8003ac0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f06f 0210 	mvn.w	r2, #16
 8003a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2208      	movs	r2, #8
 8003a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f877 	bl	8003b9a <HAL_TIM_IC_CaptureCallback>
 8003aac:	e005      	b.n	8003aba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f869 	bl	8003b86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f87a 	bl	8003bae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00c      	beq.n	8003ae4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d007      	beq.n	8003ae4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 0201 	mvn.w	r2, #1
 8003adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7fd f93c 	bl	8000d5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d104      	bne.n	8003af8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00c      	beq.n	8003b12 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d007      	beq.n	8003b12 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f8d7 	bl	8003cc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00c      	beq.n	8003b36 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d007      	beq.n	8003b36 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f8cf 	bl	8003cd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00c      	beq.n	8003b5a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d007      	beq.n	8003b5a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f834 	bl	8003bc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00c      	beq.n	8003b7e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f003 0320 	and.w	r3, r3, #32
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d007      	beq.n	8003b7e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f06f 0220 	mvn.w	r2, #32
 8003b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f897 	bl	8003cac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b7e:	bf00      	nop
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bca:	bf00      	nop
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
	...

08003bd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a2d      	ldr	r2, [pc, #180]	@ (8003ca0 <TIM_Base_SetConfig+0xc8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d003      	beq.n	8003bf8 <TIM_Base_SetConfig+0x20>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bf6:	d108      	bne.n	8003c0a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a24      	ldr	r2, [pc, #144]	@ (8003ca0 <TIM_Base_SetConfig+0xc8>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d00b      	beq.n	8003c2a <TIM_Base_SetConfig+0x52>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c18:	d007      	beq.n	8003c2a <TIM_Base_SetConfig+0x52>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a21      	ldr	r2, [pc, #132]	@ (8003ca4 <TIM_Base_SetConfig+0xcc>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d003      	beq.n	8003c2a <TIM_Base_SetConfig+0x52>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a20      	ldr	r2, [pc, #128]	@ (8003ca8 <TIM_Base_SetConfig+0xd0>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d108      	bne.n	8003c3c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a10      	ldr	r2, [pc, #64]	@ (8003ca0 <TIM_Base_SetConfig+0xc8>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d007      	beq.n	8003c72 <TIM_Base_SetConfig+0x9a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a0f      	ldr	r2, [pc, #60]	@ (8003ca4 <TIM_Base_SetConfig+0xcc>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d003      	beq.n	8003c72 <TIM_Base_SetConfig+0x9a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a0e      	ldr	r2, [pc, #56]	@ (8003ca8 <TIM_Base_SetConfig+0xd0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d103      	bne.n	8003c7a <TIM_Base_SetConfig+0xa2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	691a      	ldr	r2, [r3, #16]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f043 0204 	orr.w	r2, r3, #4
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	601a      	str	r2, [r3, #0]
}
 8003c92:	bf00      	nop
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40012c00 	.word	0x40012c00
 8003ca4:	40014400 	.word	0x40014400
 8003ca8:	40014800 	.word	0x40014800

08003cac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <LL_RCC_GetUSARTClockSource>:
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003cf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cf4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4013      	ands	r3, r2
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <LL_RCC_GetLPUARTClockSource>:
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003d10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d14:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4013      	ands	r3, r2
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e042      	b.n	8003dc0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d106      	bne.n	8003d52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7fd f895 	bl	8000e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2224      	movs	r2, #36	@ 0x24
 8003d56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0201 	bic.w	r2, r2, #1
 8003d68:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d002      	beq.n	8003d78 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 fbe6 	bl	8004544 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f9bb 	bl	80040f4 <UART_SetConfig>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e01b      	b.n	8003dc0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689a      	ldr	r2, [r3, #8]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003da6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 fc65 	bl	8004688 <UART_CheckIdleState>
 8003dbe:	4603      	mov	r3, r0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e031      	b.n	8003e3e <HAL_UART_DeInit+0x76>
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
#else
  assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */

  huart->gState = HAL_UART_STATE_BUSY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2224      	movs	r2, #36	@ 0x24
 8003dde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0201 	bic.w	r2, r2, #1
 8003df0:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2200      	movs	r2, #0
 8003e08:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7fd f8be 	bl	8000f8c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b08a      	sub	sp, #40	@ 0x28
 8003e4a:	af02      	add	r7, sp, #8
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	603b      	str	r3, [r7, #0]
 8003e52:	4613      	mov	r3, r2
 8003e54:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e5c:	2b20      	cmp	r3, #32
 8003e5e:	d17b      	bne.n	8003f58 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <HAL_UART_Transmit+0x26>
 8003e66:	88fb      	ldrh	r3, [r7, #6]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e074      	b.n	8003f5a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2221      	movs	r2, #33	@ 0x21
 8003e7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e80:	f7fd fb48 	bl	8001514 <HAL_GetTick>
 8003e84:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	88fa      	ldrh	r2, [r7, #6]
 8003e8a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	88fa      	ldrh	r2, [r7, #6]
 8003e92:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e9e:	d108      	bne.n	8003eb2 <HAL_UART_Transmit+0x6c>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d104      	bne.n	8003eb2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	61bb      	str	r3, [r7, #24]
 8003eb0:	e003      	b.n	8003eba <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003eba:	e030      	b.n	8003f1e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	2180      	movs	r1, #128	@ 0x80
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 fc88 	bl	80047dc <UART_WaitOnFlagUntilTimeout>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d005      	beq.n	8003ede <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e03d      	b.n	8003f5a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10b      	bne.n	8003efc <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ef2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	3302      	adds	r3, #2
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	e007      	b.n	8003f0c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	781a      	ldrb	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1c8      	bne.n	8003ebc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2200      	movs	r2, #0
 8003f32:	2140      	movs	r1, #64	@ 0x40
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 fc51 	bl	80047dc <UART_WaitOnFlagUntilTimeout>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e006      	b.n	8003f5a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	e000      	b.n	8003f5a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003f58:	2302      	movs	r3, #2
  }
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3720      	adds	r7, #32
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b08a      	sub	sp, #40	@ 0x28
 8003f66:	af02      	add	r7, sp, #8
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	603b      	str	r3, [r7, #0]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	f040 80b5 	bne.w	80040e8 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <HAL_UART_Receive+0x28>
 8003f84:	88fb      	ldrh	r3, [r7, #6]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e0ad      	b.n	80040ea <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2222      	movs	r2, #34	@ 0x22
 8003f9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fa4:	f7fd fab6 	bl	8001514 <HAL_GetTick>
 8003fa8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	88fa      	ldrh	r2, [r7, #6]
 8003fae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	88fa      	ldrh	r2, [r7, #6]
 8003fb6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fc2:	d10e      	bne.n	8003fe2 <HAL_UART_Receive+0x80>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d105      	bne.n	8003fd8 <HAL_UART_Receive+0x76>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003fd2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003fd6:	e02d      	b.n	8004034 <HAL_UART_Receive+0xd2>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	22ff      	movs	r2, #255	@ 0xff
 8003fdc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003fe0:	e028      	b.n	8004034 <HAL_UART_Receive+0xd2>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10d      	bne.n	8004006 <HAL_UART_Receive+0xa4>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d104      	bne.n	8003ffc <HAL_UART_Receive+0x9a>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	22ff      	movs	r2, #255	@ 0xff
 8003ff6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003ffa:	e01b      	b.n	8004034 <HAL_UART_Receive+0xd2>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	227f      	movs	r2, #127	@ 0x7f
 8004000:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004004:	e016      	b.n	8004034 <HAL_UART_Receive+0xd2>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800400e:	d10d      	bne.n	800402c <HAL_UART_Receive+0xca>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d104      	bne.n	8004022 <HAL_UART_Receive+0xc0>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	227f      	movs	r2, #127	@ 0x7f
 800401c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004020:	e008      	b.n	8004034 <HAL_UART_Receive+0xd2>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	223f      	movs	r2, #63	@ 0x3f
 8004026:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800402a:	e003      	b.n	8004034 <HAL_UART_Receive+0xd2>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800403a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004044:	d108      	bne.n	8004058 <HAL_UART_Receive+0xf6>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d104      	bne.n	8004058 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800404e:	2300      	movs	r3, #0
 8004050:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	61bb      	str	r3, [r7, #24]
 8004056:	e003      	b.n	8004060 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800405c:	2300      	movs	r3, #0
 800405e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004060:	e036      	b.n	80040d0 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2200      	movs	r2, #0
 800406a:	2120      	movs	r1, #32
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 fbb5 	bl	80047dc <UART_WaitOnFlagUntilTimeout>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d005      	beq.n	8004084 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2220      	movs	r2, #32
 800407c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e032      	b.n	80040ea <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10c      	bne.n	80040a4 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004090:	b29a      	uxth	r2, r3
 8004092:	8a7b      	ldrh	r3, [r7, #18]
 8004094:	4013      	ands	r3, r2
 8004096:	b29a      	uxth	r2, r3
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	3302      	adds	r3, #2
 80040a0:	61bb      	str	r3, [r7, #24]
 80040a2:	e00c      	b.n	80040be <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	8a7b      	ldrh	r3, [r7, #18]
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	4013      	ands	r3, r2
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	3301      	adds	r3, #1
 80040bc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1c2      	bne.n	8004062 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2220      	movs	r2, #32
 80040e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	e000      	b.n	80040ea <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80040e8:	2302      	movs	r3, #2
  }
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3720      	adds	r7, #32
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
	...

080040f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040f8:	b08c      	sub	sp, #48	@ 0x30
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	431a      	orrs	r2, r3
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	431a      	orrs	r2, r3
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	4313      	orrs	r3, r2
 800411a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	4baf      	ldr	r3, [pc, #700]	@ (80043e0 <UART_SetConfig+0x2ec>)
 8004124:	4013      	ands	r3, r2
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	6812      	ldr	r2, [r2, #0]
 800412a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800412c:	430b      	orrs	r3, r1
 800412e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4aa4      	ldr	r2, [pc, #656]	@ (80043e4 <UART_SetConfig+0x2f0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d004      	beq.n	8004160 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800415c:	4313      	orrs	r3, r2
 800415e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800416a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	6812      	ldr	r2, [r2, #0]
 8004172:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004174:	430b      	orrs	r3, r1
 8004176:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417e:	f023 010f 	bic.w	r1, r3, #15
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	430a      	orrs	r2, r1
 800418c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a95      	ldr	r2, [pc, #596]	@ (80043e8 <UART_SetConfig+0x2f4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d125      	bne.n	80041e4 <UART_SetConfig+0xf0>
 8004198:	2003      	movs	r0, #3
 800419a:	f7ff fda5 	bl	8003ce8 <LL_RCC_GetUSARTClockSource>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b03      	cmp	r3, #3
 80041a2:	d81b      	bhi.n	80041dc <UART_SetConfig+0xe8>
 80041a4:	a201      	add	r2, pc, #4	@ (adr r2, 80041ac <UART_SetConfig+0xb8>)
 80041a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041aa:	bf00      	nop
 80041ac:	080041bd 	.word	0x080041bd
 80041b0:	080041cd 	.word	0x080041cd
 80041b4:	080041c5 	.word	0x080041c5
 80041b8:	080041d5 	.word	0x080041d5
 80041bc:	2301      	movs	r3, #1
 80041be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041c2:	e042      	b.n	800424a <UART_SetConfig+0x156>
 80041c4:	2302      	movs	r3, #2
 80041c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041ca:	e03e      	b.n	800424a <UART_SetConfig+0x156>
 80041cc:	2304      	movs	r3, #4
 80041ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041d2:	e03a      	b.n	800424a <UART_SetConfig+0x156>
 80041d4:	2308      	movs	r3, #8
 80041d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041da:	e036      	b.n	800424a <UART_SetConfig+0x156>
 80041dc:	2310      	movs	r3, #16
 80041de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041e2:	e032      	b.n	800424a <UART_SetConfig+0x156>
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a7e      	ldr	r2, [pc, #504]	@ (80043e4 <UART_SetConfig+0x2f0>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d12a      	bne.n	8004244 <UART_SetConfig+0x150>
 80041ee:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80041f2:	f7ff fd89 	bl	8003d08 <LL_RCC_GetLPUARTClockSource>
 80041f6:	4603      	mov	r3, r0
 80041f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041fc:	d01a      	beq.n	8004234 <UART_SetConfig+0x140>
 80041fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004202:	d81b      	bhi.n	800423c <UART_SetConfig+0x148>
 8004204:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004208:	d00c      	beq.n	8004224 <UART_SetConfig+0x130>
 800420a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800420e:	d815      	bhi.n	800423c <UART_SetConfig+0x148>
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <UART_SetConfig+0x128>
 8004214:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004218:	d008      	beq.n	800422c <UART_SetConfig+0x138>
 800421a:	e00f      	b.n	800423c <UART_SetConfig+0x148>
 800421c:	2300      	movs	r3, #0
 800421e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004222:	e012      	b.n	800424a <UART_SetConfig+0x156>
 8004224:	2302      	movs	r3, #2
 8004226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800422a:	e00e      	b.n	800424a <UART_SetConfig+0x156>
 800422c:	2304      	movs	r3, #4
 800422e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004232:	e00a      	b.n	800424a <UART_SetConfig+0x156>
 8004234:	2308      	movs	r3, #8
 8004236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800423a:	e006      	b.n	800424a <UART_SetConfig+0x156>
 800423c:	2310      	movs	r3, #16
 800423e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004242:	e002      	b.n	800424a <UART_SetConfig+0x156>
 8004244:	2310      	movs	r3, #16
 8004246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a65      	ldr	r2, [pc, #404]	@ (80043e4 <UART_SetConfig+0x2f0>)
 8004250:	4293      	cmp	r3, r2
 8004252:	f040 8097 	bne.w	8004384 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004256:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800425a:	2b08      	cmp	r3, #8
 800425c:	d823      	bhi.n	80042a6 <UART_SetConfig+0x1b2>
 800425e:	a201      	add	r2, pc, #4	@ (adr r2, 8004264 <UART_SetConfig+0x170>)
 8004260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004264:	08004289 	.word	0x08004289
 8004268:	080042a7 	.word	0x080042a7
 800426c:	08004291 	.word	0x08004291
 8004270:	080042a7 	.word	0x080042a7
 8004274:	08004297 	.word	0x08004297
 8004278:	080042a7 	.word	0x080042a7
 800427c:	080042a7 	.word	0x080042a7
 8004280:	080042a7 	.word	0x080042a7
 8004284:	0800429f 	.word	0x0800429f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004288:	f7fe fd90 	bl	8002dac <HAL_RCC_GetPCLK1Freq>
 800428c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800428e:	e010      	b.n	80042b2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004290:	4b56      	ldr	r3, [pc, #344]	@ (80043ec <UART_SetConfig+0x2f8>)
 8004292:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004294:	e00d      	b.n	80042b2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004296:	f7fe fd09 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 800429a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800429c:	e009      	b.n	80042b2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800429e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80042a4:	e005      	b.n	80042b2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80042b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80042b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 812b 	beq.w	8004510 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042be:	4a4c      	ldr	r2, [pc, #304]	@ (80043f0 <UART_SetConfig+0x2fc>)
 80042c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042c4:	461a      	mov	r2, r3
 80042c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	4613      	mov	r3, r2
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	4413      	add	r3, r2
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d305      	bcc.n	80042ea <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d903      	bls.n	80042f2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80042f0:	e10e      	b.n	8004510 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f4:	2200      	movs	r2, #0
 80042f6:	60bb      	str	r3, [r7, #8]
 80042f8:	60fa      	str	r2, [r7, #12]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fe:	4a3c      	ldr	r2, [pc, #240]	@ (80043f0 <UART_SetConfig+0x2fc>)
 8004300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004304:	b29b      	uxth	r3, r3
 8004306:	2200      	movs	r2, #0
 8004308:	603b      	str	r3, [r7, #0]
 800430a:	607a      	str	r2, [r7, #4]
 800430c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004310:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004314:	f7fb ff84 	bl	8000220 <__aeabi_uldivmod>
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	4610      	mov	r0, r2
 800431e:	4619      	mov	r1, r3
 8004320:	f04f 0200 	mov.w	r2, #0
 8004324:	f04f 0300 	mov.w	r3, #0
 8004328:	020b      	lsls	r3, r1, #8
 800432a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800432e:	0202      	lsls	r2, r0, #8
 8004330:	6979      	ldr	r1, [r7, #20]
 8004332:	6849      	ldr	r1, [r1, #4]
 8004334:	0849      	lsrs	r1, r1, #1
 8004336:	2000      	movs	r0, #0
 8004338:	460c      	mov	r4, r1
 800433a:	4605      	mov	r5, r0
 800433c:	eb12 0804 	adds.w	r8, r2, r4
 8004340:	eb43 0905 	adc.w	r9, r3, r5
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	469a      	mov	sl, r3
 800434c:	4693      	mov	fp, r2
 800434e:	4652      	mov	r2, sl
 8004350:	465b      	mov	r3, fp
 8004352:	4640      	mov	r0, r8
 8004354:	4649      	mov	r1, r9
 8004356:	f7fb ff63 	bl	8000220 <__aeabi_uldivmod>
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	4613      	mov	r3, r2
 8004360:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004368:	d308      	bcc.n	800437c <UART_SetConfig+0x288>
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004370:	d204      	bcs.n	800437c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6a3a      	ldr	r2, [r7, #32]
 8004378:	60da      	str	r2, [r3, #12]
 800437a:	e0c9      	b.n	8004510 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004382:	e0c5      	b.n	8004510 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800438c:	d16d      	bne.n	800446a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800438e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004392:	3b01      	subs	r3, #1
 8004394:	2b07      	cmp	r3, #7
 8004396:	d82d      	bhi.n	80043f4 <UART_SetConfig+0x300>
 8004398:	a201      	add	r2, pc, #4	@ (adr r2, 80043a0 <UART_SetConfig+0x2ac>)
 800439a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439e:	bf00      	nop
 80043a0:	080043c1 	.word	0x080043c1
 80043a4:	080043c9 	.word	0x080043c9
 80043a8:	080043f5 	.word	0x080043f5
 80043ac:	080043cf 	.word	0x080043cf
 80043b0:	080043f5 	.word	0x080043f5
 80043b4:	080043f5 	.word	0x080043f5
 80043b8:	080043f5 	.word	0x080043f5
 80043bc:	080043d7 	.word	0x080043d7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043c0:	f7fe fd0a 	bl	8002dd8 <HAL_RCC_GetPCLK2Freq>
 80043c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80043c6:	e01b      	b.n	8004400 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043c8:	4b08      	ldr	r3, [pc, #32]	@ (80043ec <UART_SetConfig+0x2f8>)
 80043ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80043cc:	e018      	b.n	8004400 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ce:	f7fe fc6d 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 80043d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80043d4:	e014      	b.n	8004400 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80043dc:	e010      	b.n	8004400 <UART_SetConfig+0x30c>
 80043de:	bf00      	nop
 80043e0:	cfff69f3 	.word	0xcfff69f3
 80043e4:	40008000 	.word	0x40008000
 80043e8:	40013800 	.word	0x40013800
 80043ec:	00f42400 	.word	0x00f42400
 80043f0:	08008c1c 	.word	0x08008c1c
      default:
        pclk = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80043fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 8084 	beq.w	8004510 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440c:	4a4b      	ldr	r2, [pc, #300]	@ (800453c <UART_SetConfig+0x448>)
 800440e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004412:	461a      	mov	r2, r3
 8004414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004416:	fbb3 f3f2 	udiv	r3, r3, r2
 800441a:	005a      	lsls	r2, r3, #1
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	085b      	lsrs	r3, r3, #1
 8004422:	441a      	add	r2, r3
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	fbb2 f3f3 	udiv	r3, r2, r3
 800442c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	2b0f      	cmp	r3, #15
 8004432:	d916      	bls.n	8004462 <UART_SetConfig+0x36e>
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800443a:	d212      	bcs.n	8004462 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	b29b      	uxth	r3, r3
 8004440:	f023 030f 	bic.w	r3, r3, #15
 8004444:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	085b      	lsrs	r3, r3, #1
 800444a:	b29b      	uxth	r3, r3
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	b29a      	uxth	r2, r3
 8004452:	8bfb      	ldrh	r3, [r7, #30]
 8004454:	4313      	orrs	r3, r2
 8004456:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	8bfa      	ldrh	r2, [r7, #30]
 800445e:	60da      	str	r2, [r3, #12]
 8004460:	e056      	b.n	8004510 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004468:	e052      	b.n	8004510 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800446a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800446e:	3b01      	subs	r3, #1
 8004470:	2b07      	cmp	r3, #7
 8004472:	d822      	bhi.n	80044ba <UART_SetConfig+0x3c6>
 8004474:	a201      	add	r2, pc, #4	@ (adr r2, 800447c <UART_SetConfig+0x388>)
 8004476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447a:	bf00      	nop
 800447c:	0800449d 	.word	0x0800449d
 8004480:	080044a5 	.word	0x080044a5
 8004484:	080044bb 	.word	0x080044bb
 8004488:	080044ab 	.word	0x080044ab
 800448c:	080044bb 	.word	0x080044bb
 8004490:	080044bb 	.word	0x080044bb
 8004494:	080044bb 	.word	0x080044bb
 8004498:	080044b3 	.word	0x080044b3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800449c:	f7fe fc9c 	bl	8002dd8 <HAL_RCC_GetPCLK2Freq>
 80044a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80044a2:	e010      	b.n	80044c6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044a4:	4b26      	ldr	r3, [pc, #152]	@ (8004540 <UART_SetConfig+0x44c>)
 80044a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80044a8:	e00d      	b.n	80044c6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044aa:	f7fe fbff 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 80044ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80044b0:	e009      	b.n	80044c6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80044b8:	e005      	b.n	80044c6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80044c4:	bf00      	nop
    }

    if (pclk != 0U)
 80044c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d021      	beq.n	8004510 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d0:	4a1a      	ldr	r2, [pc, #104]	@ (800453c <UART_SetConfig+0x448>)
 80044d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044d6:	461a      	mov	r2, r3
 80044d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044da:	fbb3 f2f2 	udiv	r2, r3, r2
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	085b      	lsrs	r3, r3, #1
 80044e4:	441a      	add	r2, r3
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	2b0f      	cmp	r3, #15
 80044f4:	d909      	bls.n	800450a <UART_SetConfig+0x416>
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044fc:	d205      	bcs.n	800450a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	b29a      	uxth	r2, r3
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	60da      	str	r2, [r3, #12]
 8004508:	e002      	b.n	8004510 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	2201      	movs	r2, #1
 8004514:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	2201      	movs	r2, #1
 800451c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	2200      	movs	r2, #0
 8004524:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	2200      	movs	r2, #0
 800452a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800452c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004530:	4618      	mov	r0, r3
 8004532:	3730      	adds	r7, #48	@ 0x30
 8004534:	46bd      	mov	sp, r7
 8004536:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800453a:	bf00      	nop
 800453c:	08008c1c 	.word	0x08008c1c
 8004540:	00f42400 	.word	0x00f42400

08004544 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00a      	beq.n	800456e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00a      	beq.n	80045b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b6:	f003 0304 	and.w	r3, r3, #4
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00a      	beq.n	80045d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d8:	f003 0310 	and.w	r3, r3, #16
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045fa:	f003 0320 	and.w	r3, r3, #32
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800461c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004620:	2b00      	cmp	r3, #0
 8004622:	d01a      	beq.n	800465a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800463e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004642:	d10a      	bne.n	800465a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800465e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	605a      	str	r2, [r3, #4]
  }
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b098      	sub	sp, #96	@ 0x60
 800468c:	af02      	add	r7, sp, #8
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004698:	f7fc ff3c 	bl	8001514 <HAL_GetTick>
 800469c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d12f      	bne.n	800470c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046b4:	2200      	movs	r2, #0
 80046b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f88e 	bl	80047dc <UART_WaitOnFlagUntilTimeout>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d022      	beq.n	800470c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ce:	e853 3f00 	ldrex	r3, [r3]
 80046d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80046d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046da:	653b      	str	r3, [r7, #80]	@ 0x50
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	461a      	mov	r2, r3
 80046e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80046e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046ec:	e841 2300 	strex	r3, r2, [r1]
 80046f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1e6      	bne.n	80046c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e063      	b.n	80047d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	2b04      	cmp	r3, #4
 8004718:	d149      	bne.n	80047ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800471a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004722:	2200      	movs	r2, #0
 8004724:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f857 	bl	80047dc <UART_WaitOnFlagUntilTimeout>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d03c      	beq.n	80047ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473c:	e853 3f00 	ldrex	r3, [r3]
 8004740:	623b      	str	r3, [r7, #32]
   return(result);
 8004742:	6a3b      	ldr	r3, [r7, #32]
 8004744:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004748:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	461a      	mov	r2, r3
 8004750:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004752:	633b      	str	r3, [r7, #48]	@ 0x30
 8004754:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004756:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004758:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800475a:	e841 2300 	strex	r3, r2, [r1]
 800475e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1e6      	bne.n	8004734 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3308      	adds	r3, #8
 800476c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	e853 3f00 	ldrex	r3, [r3]
 8004774:	60fb      	str	r3, [r7, #12]
   return(result);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f023 0301 	bic.w	r3, r3, #1
 800477c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	3308      	adds	r3, #8
 8004784:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004786:	61fa      	str	r2, [r7, #28]
 8004788:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478a:	69b9      	ldr	r1, [r7, #24]
 800478c:	69fa      	ldr	r2, [r7, #28]
 800478e:	e841 2300 	strex	r3, r2, [r1]
 8004792:	617b      	str	r3, [r7, #20]
   return(result);
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1e5      	bne.n	8004766 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2220      	movs	r2, #32
 800479e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e012      	b.n	80047d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2220      	movs	r2, #32
 80047ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3758      	adds	r7, #88	@ 0x58
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	4613      	mov	r3, r2
 80047ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ec:	e04f      	b.n	800488e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047f4:	d04b      	beq.n	800488e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f6:	f7fc fe8d 	bl	8001514 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	429a      	cmp	r2, r3
 8004804:	d302      	bcc.n	800480c <UART_WaitOnFlagUntilTimeout+0x30>
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e04e      	b.n	80048ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0304 	and.w	r3, r3, #4
 800481a:	2b00      	cmp	r3, #0
 800481c:	d037      	beq.n	800488e <UART_WaitOnFlagUntilTimeout+0xb2>
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2b80      	cmp	r3, #128	@ 0x80
 8004822:	d034      	beq.n	800488e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2b40      	cmp	r3, #64	@ 0x40
 8004828:	d031      	beq.n	800488e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	f003 0308 	and.w	r3, r3, #8
 8004834:	2b08      	cmp	r3, #8
 8004836:	d110      	bne.n	800485a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2208      	movs	r2, #8
 800483e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f000 f838 	bl	80048b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2208      	movs	r2, #8
 800484a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e029      	b.n	80048ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004864:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004868:	d111      	bne.n	800488e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004872:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 f81e 	bl	80048b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2220      	movs	r2, #32
 800487e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e00f      	b.n	80048ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	69da      	ldr	r2, [r3, #28]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	4013      	ands	r3, r2
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	429a      	cmp	r2, r3
 800489c:	bf0c      	ite	eq
 800489e:	2301      	moveq	r3, #1
 80048a0:	2300      	movne	r3, #0
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	461a      	mov	r2, r3
 80048a6:	79fb      	ldrb	r3, [r7, #7]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d0a0      	beq.n	80047ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b095      	sub	sp, #84	@ 0x54
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048c6:	e853 3f00 	ldrex	r3, [r3]
 80048ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	461a      	mov	r2, r3
 80048da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80048de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048e4:	e841 2300 	strex	r3, r2, [r1]
 80048e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1e6      	bne.n	80048be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	3308      	adds	r3, #8
 80048f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	e853 3f00 	ldrex	r3, [r3]
 80048fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004906:	f023 0301 	bic.w	r3, r3, #1
 800490a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3308      	adds	r3, #8
 8004912:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004914:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004916:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004918:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800491a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800491c:	e841 2300 	strex	r3, r2, [r1]
 8004920:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1e3      	bne.n	80048f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800492c:	2b01      	cmp	r3, #1
 800492e:	d118      	bne.n	8004962 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	e853 3f00 	ldrex	r3, [r3]
 800493c:	60bb      	str	r3, [r7, #8]
   return(result);
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	f023 0310 	bic.w	r3, r3, #16
 8004944:	647b      	str	r3, [r7, #68]	@ 0x44
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	461a      	mov	r2, r3
 800494c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800494e:	61bb      	str	r3, [r7, #24]
 8004950:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004952:	6979      	ldr	r1, [r7, #20]
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	e841 2300 	strex	r3, r2, [r1]
 800495a:	613b      	str	r3, [r7, #16]
   return(result);
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1e6      	bne.n	8004930 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2220      	movs	r2, #32
 8004966:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004976:	bf00      	nop
 8004978:	3754      	adds	r7, #84	@ 0x54
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004982:	b480      	push	{r7}
 8004984:	b085      	sub	sp, #20
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004990:	2b01      	cmp	r3, #1
 8004992:	d101      	bne.n	8004998 <HAL_UARTEx_DisableFifoMode+0x16>
 8004994:	2302      	movs	r3, #2
 8004996:	e027      	b.n	80049e8 <HAL_UARTEx_DisableFifoMode+0x66>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2224      	movs	r2, #36	@ 0x24
 80049a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 0201 	bic.w	r2, r2, #1
 80049be:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80049c6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2220      	movs	r2, #32
 80049da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d101      	bne.n	8004a0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004a08:	2302      	movs	r3, #2
 8004a0a:	e02d      	b.n	8004a68 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2224      	movs	r2, #36	@ 0x24
 8004a18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0201 	bic.w	r2, r2, #1
 8004a32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 f84f 	bl	8004aec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d101      	bne.n	8004a88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a84:	2302      	movs	r3, #2
 8004a86:	e02d      	b.n	8004ae4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2224      	movs	r2, #36	@ 0x24
 8004a94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 0201 	bic.w	r2, r2, #1
 8004aae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 f811 	bl	8004aec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d108      	bne.n	8004b0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004b0c:	e031      	b.n	8004b72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004b0e:	2308      	movs	r3, #8
 8004b10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004b12:	2308      	movs	r3, #8
 8004b14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	0e5b      	lsrs	r3, r3, #25
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	0f5b      	lsrs	r3, r3, #29
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	f003 0307 	and.w	r3, r3, #7
 8004b34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b36:	7bbb      	ldrb	r3, [r7, #14]
 8004b38:	7b3a      	ldrb	r2, [r7, #12]
 8004b3a:	4911      	ldr	r1, [pc, #68]	@ (8004b80 <UARTEx_SetNbDataToProcess+0x94>)
 8004b3c:	5c8a      	ldrb	r2, [r1, r2]
 8004b3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004b42:	7b3a      	ldrb	r2, [r7, #12]
 8004b44:	490f      	ldr	r1, [pc, #60]	@ (8004b84 <UARTEx_SetNbDataToProcess+0x98>)
 8004b46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b48:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
 8004b56:	7b7a      	ldrb	r2, [r7, #13]
 8004b58:	4909      	ldr	r1, [pc, #36]	@ (8004b80 <UARTEx_SetNbDataToProcess+0x94>)
 8004b5a:	5c8a      	ldrb	r2, [r1, r2]
 8004b5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004b60:	7b7a      	ldrb	r2, [r7, #13]
 8004b62:	4908      	ldr	r1, [pc, #32]	@ (8004b84 <UARTEx_SetNbDataToProcess+0x98>)
 8004b64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b66:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004b72:	bf00      	nop
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	08008c34 	.word	0x08008c34
 8004b84:	08008c3c 	.word	0x08008c3c

08004b88 <__NVIC_SetPriority>:
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	4603      	mov	r3, r0
 8004b90:	6039      	str	r1, [r7, #0]
 8004b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	db0a      	blt.n	8004bb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	490c      	ldr	r1, [pc, #48]	@ (8004bd4 <__NVIC_SetPriority+0x4c>)
 8004ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba6:	0112      	lsls	r2, r2, #4
 8004ba8:	b2d2      	uxtb	r2, r2
 8004baa:	440b      	add	r3, r1
 8004bac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004bb0:	e00a      	b.n	8004bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	4908      	ldr	r1, [pc, #32]	@ (8004bd8 <__NVIC_SetPriority+0x50>)
 8004bb8:	79fb      	ldrb	r3, [r7, #7]
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	3b04      	subs	r3, #4
 8004bc0:	0112      	lsls	r2, r2, #4
 8004bc2:	b2d2      	uxtb	r2, r2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	761a      	strb	r2, [r3, #24]
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	e000e100 	.word	0xe000e100
 8004bd8:	e000ed00 	.word	0xe000ed00

08004bdc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004be0:	4b05      	ldr	r3, [pc, #20]	@ (8004bf8 <SysTick_Handler+0x1c>)
 8004be2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004be4:	f001 fd82 	bl	80066ec <xTaskGetSchedulerState>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d001      	beq.n	8004bf2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004bee:	f002 fb7b 	bl	80072e8 <xPortSysTickHandler>
  }
}
 8004bf2:	bf00      	nop
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	e000e010 	.word	0xe000e010

08004bfc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004c00:	2100      	movs	r1, #0
 8004c02:	f06f 0004 	mvn.w	r0, #4
 8004c06:	f7ff ffbf 	bl	8004b88 <__NVIC_SetPriority>
#endif
}
 8004c0a:	bf00      	nop
 8004c0c:	bd80      	pop	{r7, pc}
	...

08004c10 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c16:	f3ef 8305 	mrs	r3, IPSR
 8004c1a:	603b      	str	r3, [r7, #0]
  return(result);
 8004c1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004c22:	f06f 0305 	mvn.w	r3, #5
 8004c26:	607b      	str	r3, [r7, #4]
 8004c28:	e00c      	b.n	8004c44 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8004c54 <osKernelInitialize+0x44>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d105      	bne.n	8004c3e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004c32:	4b08      	ldr	r3, [pc, #32]	@ (8004c54 <osKernelInitialize+0x44>)
 8004c34:	2201      	movs	r2, #1
 8004c36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	607b      	str	r3, [r7, #4]
 8004c3c:	e002      	b.n	8004c44 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004c3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c44:	687b      	ldr	r3, [r7, #4]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	2000025c 	.word	0x2000025c

08004c58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c5e:	f3ef 8305 	mrs	r3, IPSR
 8004c62:	603b      	str	r3, [r7, #0]
  return(result);
 8004c64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004c6a:	f06f 0305 	mvn.w	r3, #5
 8004c6e:	607b      	str	r3, [r7, #4]
 8004c70:	e010      	b.n	8004c94 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004c72:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca0 <osKernelStart+0x48>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d109      	bne.n	8004c8e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004c7a:	f7ff ffbf 	bl	8004bfc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004c7e:	4b08      	ldr	r3, [pc, #32]	@ (8004ca0 <osKernelStart+0x48>)
 8004c80:	2202      	movs	r2, #2
 8004c82:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004c84:	f001 f8ce 	bl	8005e24 <vTaskStartScheduler>
      stat = osOK;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	607b      	str	r3, [r7, #4]
 8004c8c:	e002      	b.n	8004c94 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004c8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c94:	687b      	ldr	r3, [r7, #4]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	2000025c 	.word	0x2000025c

08004ca4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b08e      	sub	sp, #56	@ 0x38
 8004ca8:	af04      	add	r7, sp, #16
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cb4:	f3ef 8305 	mrs	r3, IPSR
 8004cb8:	617b      	str	r3, [r7, #20]
  return(result);
 8004cba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d17e      	bne.n	8004dbe <osThreadNew+0x11a>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d07b      	beq.n	8004dbe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004cc6:	2380      	movs	r3, #128	@ 0x80
 8004cc8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004cca:	2318      	movs	r3, #24
 8004ccc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004cd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004cd6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d045      	beq.n	8004d6a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <osThreadNew+0x48>
        name = attr->name;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d008      	beq.n	8004d12 <osThreadNew+0x6e>
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	2b38      	cmp	r3, #56	@ 0x38
 8004d04:	d805      	bhi.n	8004d12 <osThreadNew+0x6e>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <osThreadNew+0x72>
        return (NULL);
 8004d12:	2300      	movs	r3, #0
 8004d14:	e054      	b.n	8004dc0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	089b      	lsrs	r3, r3, #2
 8004d24:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00e      	beq.n	8004d4c <osThreadNew+0xa8>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	2ba7      	cmp	r3, #167	@ 0xa7
 8004d34:	d90a      	bls.n	8004d4c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d006      	beq.n	8004d4c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d002      	beq.n	8004d4c <osThreadNew+0xa8>
        mem = 1;
 8004d46:	2301      	movs	r3, #1
 8004d48:	61bb      	str	r3, [r7, #24]
 8004d4a:	e010      	b.n	8004d6e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10c      	bne.n	8004d6e <osThreadNew+0xca>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d108      	bne.n	8004d6e <osThreadNew+0xca>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d104      	bne.n	8004d6e <osThreadNew+0xca>
          mem = 0;
 8004d64:	2300      	movs	r3, #0
 8004d66:	61bb      	str	r3, [r7, #24]
 8004d68:	e001      	b.n	8004d6e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d110      	bne.n	8004d96 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d7c:	9202      	str	r2, [sp, #8]
 8004d7e:	9301      	str	r3, [sp, #4]
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	6a3a      	ldr	r2, [r7, #32]
 8004d88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 fe56 	bl	8005a3c <xTaskCreateStatic>
 8004d90:	4603      	mov	r3, r0
 8004d92:	613b      	str	r3, [r7, #16]
 8004d94:	e013      	b.n	8004dbe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d110      	bne.n	8004dbe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	f107 0310 	add.w	r3, r7, #16
 8004da4:	9301      	str	r3, [sp, #4]
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f000 fea4 	bl	8005afc <xTaskCreate>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d001      	beq.n	8004dbe <osThreadNew+0x11a>
            hTask = NULL;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004dbe:	693b      	ldr	r3, [r7, #16]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3728      	adds	r7, #40	@ 0x28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dd0:	f3ef 8305 	mrs	r3, IPSR
 8004dd4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dd6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <osDelay+0x1c>
    stat = osErrorISR;
 8004ddc:	f06f 0305 	mvn.w	r3, #5
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	e007      	b.n	8004df4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d002      	beq.n	8004df4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 ffe2 	bl	8005db8 <vTaskDelay>
    }
  }

  return (stat);
 8004df4:	68fb      	ldr	r3, [r7, #12]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
	...

08004e00 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4a07      	ldr	r2, [pc, #28]	@ (8004e2c <vApplicationGetIdleTaskMemory+0x2c>)
 8004e10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	4a06      	ldr	r2, [pc, #24]	@ (8004e30 <vApplicationGetIdleTaskMemory+0x30>)
 8004e16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2280      	movs	r2, #128	@ 0x80
 8004e1c:	601a      	str	r2, [r3, #0]
}
 8004e1e:	bf00      	nop
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	20000260 	.word	0x20000260
 8004e30:	20000308 	.word	0x20000308

08004e34 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4a07      	ldr	r2, [pc, #28]	@ (8004e60 <vApplicationGetTimerTaskMemory+0x2c>)
 8004e44:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	4a06      	ldr	r2, [pc, #24]	@ (8004e64 <vApplicationGetTimerTaskMemory+0x30>)
 8004e4a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e52:	601a      	str	r2, [r3, #0]
}
 8004e54:	bf00      	nop
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	20000508 	.word	0x20000508
 8004e64:	200005b0 	.word	0x200005b0

08004e68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f103 0208 	add.w	r2, r3, #8
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004e80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f103 0208 	add.w	r2, r3, #8
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f103 0208 	add.w	r2, r3, #8
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b085      	sub	sp, #20
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	1c5a      	adds	r2, r3, #1
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	601a      	str	r2, [r3, #0]
}
 8004efe:	bf00      	nop
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b085      	sub	sp, #20
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
 8004f12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f20:	d103      	bne.n	8004f2a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	e00c      	b.n	8004f44 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	3308      	adds	r3, #8
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	e002      	b.n	8004f38 <vListInsert+0x2e>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d2f6      	bcs.n	8004f32 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	1c5a      	adds	r2, r3, #1
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	601a      	str	r2, [r3, #0]
}
 8004f70:	bf00      	nop
 8004f72:	3714      	adds	r7, #20
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	6892      	ldr	r2, [r2, #8]
 8004f92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	6852      	ldr	r2, [r2, #4]
 8004f9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d103      	bne.n	8004fb0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689a      	ldr	r2, [r3, #8]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	1e5a      	subs	r2, r3, #1
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10b      	bne.n	8004ffc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004ff6:	bf00      	nop
 8004ff8:	bf00      	nop
 8004ffa:	e7fd      	b.n	8004ff8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004ffc:	f002 f8e4 	bl	80071c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005008:	68f9      	ldr	r1, [r7, #12]
 800500a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800500c:	fb01 f303 	mul.w	r3, r1, r3
 8005010:	441a      	add	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800502c:	3b01      	subs	r3, #1
 800502e:	68f9      	ldr	r1, [r7, #12]
 8005030:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005032:	fb01 f303 	mul.w	r3, r1, r3
 8005036:	441a      	add	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	22ff      	movs	r2, #255	@ 0xff
 8005040:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	22ff      	movs	r2, #255	@ 0xff
 8005048:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d114      	bne.n	800507c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d01a      	beq.n	8005090 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3310      	adds	r3, #16
 800505e:	4618      	mov	r0, r3
 8005060:	f001 f97e 	bl	8006360 <xTaskRemoveFromEventList>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d012      	beq.n	8005090 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800506a:	4b0d      	ldr	r3, [pc, #52]	@ (80050a0 <xQueueGenericReset+0xd0>)
 800506c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005070:	601a      	str	r2, [r3, #0]
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	e009      	b.n	8005090 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	3310      	adds	r3, #16
 8005080:	4618      	mov	r0, r3
 8005082:	f7ff fef1 	bl	8004e68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	3324      	adds	r3, #36	@ 0x24
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff feec 	bl	8004e68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005090:	f002 f8cc 	bl	800722c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005094:	2301      	movs	r3, #1
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	e000ed04 	.word	0xe000ed04

080050a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b08e      	sub	sp, #56	@ 0x38
 80050a8:	af02      	add	r7, sp, #8
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
 80050b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10b      	bne.n	80050d0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80050b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050bc:	f383 8811 	msr	BASEPRI, r3
 80050c0:	f3bf 8f6f 	isb	sy
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80050ca:	bf00      	nop
 80050cc:	bf00      	nop
 80050ce:	e7fd      	b.n	80050cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10b      	bne.n	80050ee <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80050d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80050e8:	bf00      	nop
 80050ea:	bf00      	nop
 80050ec:	e7fd      	b.n	80050ea <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d002      	beq.n	80050fa <xQueueGenericCreateStatic+0x56>
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <xQueueGenericCreateStatic+0x5a>
 80050fa:	2301      	movs	r3, #1
 80050fc:	e000      	b.n	8005100 <xQueueGenericCreateStatic+0x5c>
 80050fe:	2300      	movs	r3, #0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10b      	bne.n	800511c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005108:	f383 8811 	msr	BASEPRI, r3
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	f3bf 8f4f 	dsb	sy
 8005114:	623b      	str	r3, [r7, #32]
}
 8005116:	bf00      	nop
 8005118:	bf00      	nop
 800511a:	e7fd      	b.n	8005118 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d102      	bne.n	8005128 <xQueueGenericCreateStatic+0x84>
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <xQueueGenericCreateStatic+0x88>
 8005128:	2301      	movs	r3, #1
 800512a:	e000      	b.n	800512e <xQueueGenericCreateStatic+0x8a>
 800512c:	2300      	movs	r3, #0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10b      	bne.n	800514a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005136:	f383 8811 	msr	BASEPRI, r3
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	61fb      	str	r3, [r7, #28]
}
 8005144:	bf00      	nop
 8005146:	bf00      	nop
 8005148:	e7fd      	b.n	8005146 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800514a:	2350      	movs	r3, #80	@ 0x50
 800514c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2b50      	cmp	r3, #80	@ 0x50
 8005152:	d00b      	beq.n	800516c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	61bb      	str	r3, [r7, #24]
}
 8005166:	bf00      	nop
 8005168:	bf00      	nop
 800516a:	e7fd      	b.n	8005168 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800516c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00d      	beq.n	8005194 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005180:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	4613      	mov	r3, r2
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	68b9      	ldr	r1, [r7, #8]
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 f840 	bl	8005214 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005196:	4618      	mov	r0, r3
 8005198:	3730      	adds	r7, #48	@ 0x30
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b08a      	sub	sp, #40	@ 0x28
 80051a2:	af02      	add	r7, sp, #8
 80051a4:	60f8      	str	r0, [r7, #12]
 80051a6:	60b9      	str	r1, [r7, #8]
 80051a8:	4613      	mov	r3, r2
 80051aa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10b      	bne.n	80051ca <xQueueGenericCreate+0x2c>
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	613b      	str	r3, [r7, #16]
}
 80051c4:	bf00      	nop
 80051c6:	bf00      	nop
 80051c8:	e7fd      	b.n	80051c6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	fb02 f303 	mul.w	r3, r2, r3
 80051d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	3350      	adds	r3, #80	@ 0x50
 80051d8:	4618      	mov	r0, r3
 80051da:	f002 f917 	bl	800740c <pvPortMalloc>
 80051de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d011      	beq.n	800520a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	3350      	adds	r3, #80	@ 0x50
 80051ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80051f8:	79fa      	ldrb	r2, [r7, #7]
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	4613      	mov	r3, r2
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	68b9      	ldr	r1, [r7, #8]
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f000 f805 	bl	8005214 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800520a:	69bb      	ldr	r3, [r7, #24]
	}
 800520c:	4618      	mov	r0, r3
 800520e:	3720      	adds	r7, #32
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
 8005220:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d103      	bne.n	8005230 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	e002      	b.n	8005236 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005242:	2101      	movs	r1, #1
 8005244:	69b8      	ldr	r0, [r7, #24]
 8005246:	f7ff fec3 	bl	8004fd0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	78fa      	ldrb	r2, [r7, #3]
 800524e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005252:	bf00      	nop
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
	...

0800525c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b08e      	sub	sp, #56	@ 0x38
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
 8005268:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800526a:	2300      	movs	r3, #0
 800526c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10b      	bne.n	8005290 <xQueueGenericSend+0x34>
	__asm volatile
 8005278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527c:	f383 8811 	msr	BASEPRI, r3
 8005280:	f3bf 8f6f 	isb	sy
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800528a:	bf00      	nop
 800528c:	bf00      	nop
 800528e:	e7fd      	b.n	800528c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d103      	bne.n	800529e <xQueueGenericSend+0x42>
 8005296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <xQueueGenericSend+0x46>
 800529e:	2301      	movs	r3, #1
 80052a0:	e000      	b.n	80052a4 <xQueueGenericSend+0x48>
 80052a2:	2300      	movs	r3, #0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10b      	bne.n	80052c0 <xQueueGenericSend+0x64>
	__asm volatile
 80052a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ac:	f383 8811 	msr	BASEPRI, r3
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80052ba:	bf00      	nop
 80052bc:	bf00      	nop
 80052be:	e7fd      	b.n	80052bc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d103      	bne.n	80052ce <xQueueGenericSend+0x72>
 80052c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d101      	bne.n	80052d2 <xQueueGenericSend+0x76>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e000      	b.n	80052d4 <xQueueGenericSend+0x78>
 80052d2:	2300      	movs	r3, #0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10b      	bne.n	80052f0 <xQueueGenericSend+0x94>
	__asm volatile
 80052d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052dc:	f383 8811 	msr	BASEPRI, r3
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	623b      	str	r3, [r7, #32]
}
 80052ea:	bf00      	nop
 80052ec:	bf00      	nop
 80052ee:	e7fd      	b.n	80052ec <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052f0:	f001 f9fc 	bl	80066ec <xTaskGetSchedulerState>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d102      	bne.n	8005300 <xQueueGenericSend+0xa4>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <xQueueGenericSend+0xa8>
 8005300:	2301      	movs	r3, #1
 8005302:	e000      	b.n	8005306 <xQueueGenericSend+0xaa>
 8005304:	2300      	movs	r3, #0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10b      	bne.n	8005322 <xQueueGenericSend+0xc6>
	__asm volatile
 800530a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800530e:	f383 8811 	msr	BASEPRI, r3
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	61fb      	str	r3, [r7, #28]
}
 800531c:	bf00      	nop
 800531e:	bf00      	nop
 8005320:	e7fd      	b.n	800531e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005322:	f001 ff51 	bl	80071c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005328:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800532a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800532e:	429a      	cmp	r2, r3
 8005330:	d302      	bcc.n	8005338 <xQueueGenericSend+0xdc>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b02      	cmp	r3, #2
 8005336:	d129      	bne.n	800538c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	68b9      	ldr	r1, [r7, #8]
 800533c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800533e:	f000 fa0f 	bl	8005760 <prvCopyDataToQueue>
 8005342:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005348:	2b00      	cmp	r3, #0
 800534a:	d010      	beq.n	800536e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800534c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534e:	3324      	adds	r3, #36	@ 0x24
 8005350:	4618      	mov	r0, r3
 8005352:	f001 f805 	bl	8006360 <xTaskRemoveFromEventList>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d013      	beq.n	8005384 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800535c:	4b3f      	ldr	r3, [pc, #252]	@ (800545c <xQueueGenericSend+0x200>)
 800535e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	e00a      	b.n	8005384 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800536e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005370:	2b00      	cmp	r3, #0
 8005372:	d007      	beq.n	8005384 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005374:	4b39      	ldr	r3, [pc, #228]	@ (800545c <xQueueGenericSend+0x200>)
 8005376:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800537a:	601a      	str	r2, [r3, #0]
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005384:	f001 ff52 	bl	800722c <vPortExitCritical>
				return pdPASS;
 8005388:	2301      	movs	r3, #1
 800538a:	e063      	b.n	8005454 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d103      	bne.n	800539a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005392:	f001 ff4b 	bl	800722c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005396:	2300      	movs	r3, #0
 8005398:	e05c      	b.n	8005454 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800539a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800539c:	2b00      	cmp	r3, #0
 800539e:	d106      	bne.n	80053ae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053a0:	f107 0314 	add.w	r3, r7, #20
 80053a4:	4618      	mov	r0, r3
 80053a6:	f001 f83f 	bl	8006428 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053aa:	2301      	movs	r3, #1
 80053ac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053ae:	f001 ff3d 	bl	800722c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053b2:	f000 fda7 	bl	8005f04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053b6:	f001 ff07 	bl	80071c8 <vPortEnterCritical>
 80053ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053c0:	b25b      	sxtb	r3, r3
 80053c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053c6:	d103      	bne.n	80053d0 <xQueueGenericSend+0x174>
 80053c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053d6:	b25b      	sxtb	r3, r3
 80053d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053dc:	d103      	bne.n	80053e6 <xQueueGenericSend+0x18a>
 80053de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053e6:	f001 ff21 	bl	800722c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053ea:	1d3a      	adds	r2, r7, #4
 80053ec:	f107 0314 	add.w	r3, r7, #20
 80053f0:	4611      	mov	r1, r2
 80053f2:	4618      	mov	r0, r3
 80053f4:	f001 f82e 	bl	8006454 <xTaskCheckForTimeOut>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d124      	bne.n	8005448 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80053fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005400:	f000 faa6 	bl	8005950 <prvIsQueueFull>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d018      	beq.n	800543c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800540a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540c:	3310      	adds	r3, #16
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	4611      	mov	r1, r2
 8005412:	4618      	mov	r0, r3
 8005414:	f000 ff52 	bl	80062bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005418:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800541a:	f000 fa31 	bl	8005880 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800541e:	f000 fd7f 	bl	8005f20 <xTaskResumeAll>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	f47f af7c 	bne.w	8005322 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800542a:	4b0c      	ldr	r3, [pc, #48]	@ (800545c <xQueueGenericSend+0x200>)
 800542c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	f3bf 8f4f 	dsb	sy
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	e772      	b.n	8005322 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800543c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800543e:	f000 fa1f 	bl	8005880 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005442:	f000 fd6d 	bl	8005f20 <xTaskResumeAll>
 8005446:	e76c      	b.n	8005322 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005448:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800544a:	f000 fa19 	bl	8005880 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800544e:	f000 fd67 	bl	8005f20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005452:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005454:	4618      	mov	r0, r3
 8005456:	3738      	adds	r7, #56	@ 0x38
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	e000ed04 	.word	0xe000ed04

08005460 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b090      	sub	sp, #64	@ 0x40
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
 800546c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10b      	bne.n	8005490 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800547c:	f383 8811 	msr	BASEPRI, r3
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800548a:	bf00      	nop
 800548c:	bf00      	nop
 800548e:	e7fd      	b.n	800548c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d103      	bne.n	800549e <xQueueGenericSendFromISR+0x3e>
 8005496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <xQueueGenericSendFromISR+0x42>
 800549e:	2301      	movs	r3, #1
 80054a0:	e000      	b.n	80054a4 <xQueueGenericSendFromISR+0x44>
 80054a2:	2300      	movs	r3, #0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10b      	bne.n	80054c0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80054a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ac:	f383 8811 	msr	BASEPRI, r3
 80054b0:	f3bf 8f6f 	isb	sy
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80054ba:	bf00      	nop
 80054bc:	bf00      	nop
 80054be:	e7fd      	b.n	80054bc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d103      	bne.n	80054ce <xQueueGenericSendFromISR+0x6e>
 80054c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d101      	bne.n	80054d2 <xQueueGenericSendFromISR+0x72>
 80054ce:	2301      	movs	r3, #1
 80054d0:	e000      	b.n	80054d4 <xQueueGenericSendFromISR+0x74>
 80054d2:	2300      	movs	r3, #0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10b      	bne.n	80054f0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80054d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054dc:	f383 8811 	msr	BASEPRI, r3
 80054e0:	f3bf 8f6f 	isb	sy
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	623b      	str	r3, [r7, #32]
}
 80054ea:	bf00      	nop
 80054ec:	bf00      	nop
 80054ee:	e7fd      	b.n	80054ec <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054f0:	f001 ff4a 	bl	8007388 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80054f4:	f3ef 8211 	mrs	r2, BASEPRI
 80054f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054fc:	f383 8811 	msr	BASEPRI, r3
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	61fa      	str	r2, [r7, #28]
 800550a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800550c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800550e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005512:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005518:	429a      	cmp	r2, r3
 800551a:	d302      	bcc.n	8005522 <xQueueGenericSendFromISR+0xc2>
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	2b02      	cmp	r3, #2
 8005520:	d12f      	bne.n	8005582 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005524:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005528:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800552c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800552e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005530:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	68b9      	ldr	r1, [r7, #8]
 8005536:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005538:	f000 f912 	bl	8005760 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800553c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005540:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005544:	d112      	bne.n	800556c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554a:	2b00      	cmp	r3, #0
 800554c:	d016      	beq.n	800557c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800554e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005550:	3324      	adds	r3, #36	@ 0x24
 8005552:	4618      	mov	r0, r3
 8005554:	f000 ff04 	bl	8006360 <xTaskRemoveFromEventList>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00e      	beq.n	800557c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00b      	beq.n	800557c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	e007      	b.n	800557c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800556c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005570:	3301      	adds	r3, #1
 8005572:	b2db      	uxtb	r3, r3
 8005574:	b25a      	sxtb	r2, r3
 8005576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005578:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800557c:	2301      	movs	r3, #1
 800557e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005580:	e001      	b.n	8005586 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005582:	2300      	movs	r3, #0
 8005584:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005588:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005590:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005594:	4618      	mov	r0, r3
 8005596:	3740      	adds	r7, #64	@ 0x40
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b08c      	sub	sp, #48	@ 0x30
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80055a8:	2300      	movs	r3, #0
 80055aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80055b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10b      	bne.n	80055ce <xQueueReceive+0x32>
	__asm volatile
 80055b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ba:	f383 8811 	msr	BASEPRI, r3
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	f3bf 8f4f 	dsb	sy
 80055c6:	623b      	str	r3, [r7, #32]
}
 80055c8:	bf00      	nop
 80055ca:	bf00      	nop
 80055cc:	e7fd      	b.n	80055ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d103      	bne.n	80055dc <xQueueReceive+0x40>
 80055d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <xQueueReceive+0x44>
 80055dc:	2301      	movs	r3, #1
 80055de:	e000      	b.n	80055e2 <xQueueReceive+0x46>
 80055e0:	2300      	movs	r3, #0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10b      	bne.n	80055fe <xQueueReceive+0x62>
	__asm volatile
 80055e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	61fb      	str	r3, [r7, #28]
}
 80055f8:	bf00      	nop
 80055fa:	bf00      	nop
 80055fc:	e7fd      	b.n	80055fa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055fe:	f001 f875 	bl	80066ec <xTaskGetSchedulerState>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d102      	bne.n	800560e <xQueueReceive+0x72>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <xQueueReceive+0x76>
 800560e:	2301      	movs	r3, #1
 8005610:	e000      	b.n	8005614 <xQueueReceive+0x78>
 8005612:	2300      	movs	r3, #0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10b      	bne.n	8005630 <xQueueReceive+0x94>
	__asm volatile
 8005618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800561c:	f383 8811 	msr	BASEPRI, r3
 8005620:	f3bf 8f6f 	isb	sy
 8005624:	f3bf 8f4f 	dsb	sy
 8005628:	61bb      	str	r3, [r7, #24]
}
 800562a:	bf00      	nop
 800562c:	bf00      	nop
 800562e:	e7fd      	b.n	800562c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005630:	f001 fdca 	bl	80071c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005638:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800563a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563c:	2b00      	cmp	r3, #0
 800563e:	d01f      	beq.n	8005680 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005640:	68b9      	ldr	r1, [r7, #8]
 8005642:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005644:	f000 f8f6 	bl	8005834 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564a:	1e5a      	subs	r2, r3, #1
 800564c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800564e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00f      	beq.n	8005678 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800565a:	3310      	adds	r3, #16
 800565c:	4618      	mov	r0, r3
 800565e:	f000 fe7f 	bl	8006360 <xTaskRemoveFromEventList>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d007      	beq.n	8005678 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005668:	4b3c      	ldr	r3, [pc, #240]	@ (800575c <xQueueReceive+0x1c0>)
 800566a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005678:	f001 fdd8 	bl	800722c <vPortExitCritical>
				return pdPASS;
 800567c:	2301      	movs	r3, #1
 800567e:	e069      	b.n	8005754 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d103      	bne.n	800568e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005686:	f001 fdd1 	bl	800722c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800568a:	2300      	movs	r3, #0
 800568c:	e062      	b.n	8005754 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800568e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005690:	2b00      	cmp	r3, #0
 8005692:	d106      	bne.n	80056a2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005694:	f107 0310 	add.w	r3, r7, #16
 8005698:	4618      	mov	r0, r3
 800569a:	f000 fec5 	bl	8006428 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800569e:	2301      	movs	r3, #1
 80056a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056a2:	f001 fdc3 	bl	800722c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056a6:	f000 fc2d 	bl	8005f04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056aa:	f001 fd8d 	bl	80071c8 <vPortEnterCritical>
 80056ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056b4:	b25b      	sxtb	r3, r3
 80056b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056ba:	d103      	bne.n	80056c4 <xQueueReceive+0x128>
 80056bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056ca:	b25b      	sxtb	r3, r3
 80056cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056d0:	d103      	bne.n	80056da <xQueueReceive+0x13e>
 80056d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056da:	f001 fda7 	bl	800722c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056de:	1d3a      	adds	r2, r7, #4
 80056e0:	f107 0310 	add.w	r3, r7, #16
 80056e4:	4611      	mov	r1, r2
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 feb4 	bl	8006454 <xTaskCheckForTimeOut>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d123      	bne.n	800573a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056f4:	f000 f916 	bl	8005924 <prvIsQueueEmpty>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d017      	beq.n	800572e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80056fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005700:	3324      	adds	r3, #36	@ 0x24
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	4611      	mov	r1, r2
 8005706:	4618      	mov	r0, r3
 8005708:	f000 fdd8 	bl	80062bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800570c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800570e:	f000 f8b7 	bl	8005880 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005712:	f000 fc05 	bl	8005f20 <xTaskResumeAll>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d189      	bne.n	8005630 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800571c:	4b0f      	ldr	r3, [pc, #60]	@ (800575c <xQueueReceive+0x1c0>)
 800571e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	e780      	b.n	8005630 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800572e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005730:	f000 f8a6 	bl	8005880 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005734:	f000 fbf4 	bl	8005f20 <xTaskResumeAll>
 8005738:	e77a      	b.n	8005630 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800573a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800573c:	f000 f8a0 	bl	8005880 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005740:	f000 fbee 	bl	8005f20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005744:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005746:	f000 f8ed 	bl	8005924 <prvIsQueueEmpty>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	f43f af6f 	beq.w	8005630 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005752:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005754:	4618      	mov	r0, r3
 8005756:	3730      	adds	r7, #48	@ 0x30
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	e000ed04 	.word	0xe000ed04

08005760 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800576c:	2300      	movs	r3, #0
 800576e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005774:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10d      	bne.n	800579a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d14d      	bne.n	8005822 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	4618      	mov	r0, r3
 800578c:	f000 ffcc 	bl	8006728 <xTaskPriorityDisinherit>
 8005790:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	609a      	str	r2, [r3, #8]
 8005798:	e043      	b.n	8005822 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d119      	bne.n	80057d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6858      	ldr	r0, [r3, #4]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a8:	461a      	mov	r2, r3
 80057aa:	68b9      	ldr	r1, [r7, #8]
 80057ac:	f002 fb07 	bl	8007dbe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b8:	441a      	add	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d32b      	bcc.n	8005822 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	605a      	str	r2, [r3, #4]
 80057d2:	e026      	b.n	8005822 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	68d8      	ldr	r0, [r3, #12]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057dc:	461a      	mov	r2, r3
 80057de:	68b9      	ldr	r1, [r7, #8]
 80057e0:	f002 faed 	bl	8007dbe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	68da      	ldr	r2, [r3, #12]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ec:	425b      	negs	r3, r3
 80057ee:	441a      	add	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	68da      	ldr	r2, [r3, #12]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d207      	bcs.n	8005810 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005808:	425b      	negs	r3, r3
 800580a:	441a      	add	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b02      	cmp	r3, #2
 8005814:	d105      	bne.n	8005822 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d002      	beq.n	8005822 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	3b01      	subs	r3, #1
 8005820:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800582a:	697b      	ldr	r3, [r7, #20]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005842:	2b00      	cmp	r3, #0
 8005844:	d018      	beq.n	8005878 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68da      	ldr	r2, [r3, #12]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800584e:	441a      	add	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68da      	ldr	r2, [r3, #12]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	429a      	cmp	r2, r3
 800585e:	d303      	bcc.n	8005868 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68d9      	ldr	r1, [r3, #12]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005870:	461a      	mov	r2, r3
 8005872:	6838      	ldr	r0, [r7, #0]
 8005874:	f002 faa3 	bl	8007dbe <memcpy>
	}
}
 8005878:	bf00      	nop
 800587a:	3708      	adds	r7, #8
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005888:	f001 fc9e 	bl	80071c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005892:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005894:	e011      	b.n	80058ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589a:	2b00      	cmp	r3, #0
 800589c:	d012      	beq.n	80058c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	3324      	adds	r3, #36	@ 0x24
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 fd5c 	bl	8006360 <xTaskRemoveFromEventList>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d001      	beq.n	80058b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80058ae:	f000 fe35 	bl	800651c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80058b2:	7bfb      	ldrb	r3, [r7, #15]
 80058b4:	3b01      	subs	r3, #1
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	dce9      	bgt.n	8005896 <prvUnlockQueue+0x16>
 80058c2:	e000      	b.n	80058c6 <prvUnlockQueue+0x46>
					break;
 80058c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	22ff      	movs	r2, #255	@ 0xff
 80058ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80058ce:	f001 fcad 	bl	800722c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80058d2:	f001 fc79 	bl	80071c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058de:	e011      	b.n	8005904 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d012      	beq.n	800590e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	3310      	adds	r3, #16
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 fd37 	bl	8006360 <xTaskRemoveFromEventList>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80058f8:	f000 fe10 	bl	800651c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80058fc:	7bbb      	ldrb	r3, [r7, #14]
 80058fe:	3b01      	subs	r3, #1
 8005900:	b2db      	uxtb	r3, r3
 8005902:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005904:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005908:	2b00      	cmp	r3, #0
 800590a:	dce9      	bgt.n	80058e0 <prvUnlockQueue+0x60>
 800590c:	e000      	b.n	8005910 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800590e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	22ff      	movs	r2, #255	@ 0xff
 8005914:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005918:	f001 fc88 	bl	800722c <vPortExitCritical>
}
 800591c:	bf00      	nop
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800592c:	f001 fc4c 	bl	80071c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005934:	2b00      	cmp	r3, #0
 8005936:	d102      	bne.n	800593e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005938:	2301      	movs	r3, #1
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	e001      	b.n	8005942 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800593e:	2300      	movs	r3, #0
 8005940:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005942:	f001 fc73 	bl	800722c <vPortExitCritical>

	return xReturn;
 8005946:	68fb      	ldr	r3, [r7, #12]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005958:	f001 fc36 	bl	80071c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005964:	429a      	cmp	r2, r3
 8005966:	d102      	bne.n	800596e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005968:	2301      	movs	r3, #1
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	e001      	b.n	8005972 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800596e:	2300      	movs	r3, #0
 8005970:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005972:	f001 fc5b 	bl	800722c <vPortExitCritical>

	return xReturn;
 8005976:	68fb      	ldr	r3, [r7, #12]
}
 8005978:	4618      	mov	r0, r3
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800598a:	2300      	movs	r3, #0
 800598c:	60fb      	str	r3, [r7, #12]
 800598e:	e014      	b.n	80059ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005990:	4a0f      	ldr	r2, [pc, #60]	@ (80059d0 <vQueueAddToRegistry+0x50>)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10b      	bne.n	80059b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800599c:	490c      	ldr	r1, [pc, #48]	@ (80059d0 <vQueueAddToRegistry+0x50>)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80059a6:	4a0a      	ldr	r2, [pc, #40]	@ (80059d0 <vQueueAddToRegistry+0x50>)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	00db      	lsls	r3, r3, #3
 80059ac:	4413      	add	r3, r2
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80059b2:	e006      	b.n	80059c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	3301      	adds	r3, #1
 80059b8:	60fb      	str	r3, [r7, #12]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2b07      	cmp	r3, #7
 80059be:	d9e7      	bls.n	8005990 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80059c0:	bf00      	nop
 80059c2:	bf00      	nop
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	200009b0 	.word	0x200009b0

080059d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80059e4:	f001 fbf0 	bl	80071c8 <vPortEnterCritical>
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059ee:	b25b      	sxtb	r3, r3
 80059f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059f4:	d103      	bne.n	80059fe <vQueueWaitForMessageRestricted+0x2a>
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a04:	b25b      	sxtb	r3, r3
 8005a06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a0a:	d103      	bne.n	8005a14 <vQueueWaitForMessageRestricted+0x40>
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a14:	f001 fc0a 	bl	800722c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d106      	bne.n	8005a2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	3324      	adds	r3, #36	@ 0x24
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	68b9      	ldr	r1, [r7, #8]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f000 fc6d 	bl	8006308 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005a2e:	6978      	ldr	r0, [r7, #20]
 8005a30:	f7ff ff26 	bl	8005880 <prvUnlockQueue>
	}
 8005a34:	bf00      	nop
 8005a36:	3718      	adds	r7, #24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b08e      	sub	sp, #56	@ 0x38
 8005a40:	af04      	add	r7, sp, #16
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
 8005a48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10b      	bne.n	8005a68 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	623b      	str	r3, [r7, #32]
}
 8005a62:	bf00      	nop
 8005a64:	bf00      	nop
 8005a66:	e7fd      	b.n	8005a64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10b      	bne.n	8005a86 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	61fb      	str	r3, [r7, #28]
}
 8005a80:	bf00      	nop
 8005a82:	bf00      	nop
 8005a84:	e7fd      	b.n	8005a82 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a86:	23a8      	movs	r3, #168	@ 0xa8
 8005a88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	2ba8      	cmp	r3, #168	@ 0xa8
 8005a8e:	d00b      	beq.n	8005aa8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	61bb      	str	r3, [r7, #24]
}
 8005aa2:	bf00      	nop
 8005aa4:	bf00      	nop
 8005aa6:	e7fd      	b.n	8005aa4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005aa8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d01e      	beq.n	8005aee <xTaskCreateStatic+0xb2>
 8005ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d01b      	beq.n	8005aee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005abc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005abe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ac8:	2300      	movs	r3, #0
 8005aca:	9303      	str	r3, [sp, #12]
 8005acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ace:	9302      	str	r3, [sp, #8]
 8005ad0:	f107 0314 	add.w	r3, r7, #20
 8005ad4:	9301      	str	r3, [sp, #4]
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	68b9      	ldr	r1, [r7, #8]
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 f851 	bl	8005b88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ae6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005ae8:	f000 f8f6 	bl	8005cd8 <prvAddNewTaskToReadyList>
 8005aec:	e001      	b.n	8005af2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005af2:	697b      	ldr	r3, [r7, #20]
	}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3728      	adds	r7, #40	@ 0x28
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08c      	sub	sp, #48	@ 0x30
 8005b00:	af04      	add	r7, sp, #16
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	603b      	str	r3, [r7, #0]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005b0c:	88fb      	ldrh	r3, [r7, #6]
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4618      	mov	r0, r3
 8005b12:	f001 fc7b 	bl	800740c <pvPortMalloc>
 8005b16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00e      	beq.n	8005b3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005b1e:	20a8      	movs	r0, #168	@ 0xa8
 8005b20:	f001 fc74 	bl	800740c <pvPortMalloc>
 8005b24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b32:	e005      	b.n	8005b40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b34:	6978      	ldr	r0, [r7, #20]
 8005b36:	f001 fd37 	bl	80075a8 <vPortFree>
 8005b3a:	e001      	b.n	8005b40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d017      	beq.n	8005b76 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b4e:	88fa      	ldrh	r2, [r7, #6]
 8005b50:	2300      	movs	r3, #0
 8005b52:	9303      	str	r3, [sp, #12]
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	9302      	str	r3, [sp, #8]
 8005b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b5a:	9301      	str	r3, [sp, #4]
 8005b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	68b9      	ldr	r1, [r7, #8]
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 f80f 	bl	8005b88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b6a:	69f8      	ldr	r0, [r7, #28]
 8005b6c:	f000 f8b4 	bl	8005cd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005b70:	2301      	movs	r3, #1
 8005b72:	61bb      	str	r3, [r7, #24]
 8005b74:	e002      	b.n	8005b7c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b7c:	69bb      	ldr	r3, [r7, #24]
	}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3720      	adds	r7, #32
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
	...

08005b88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b088      	sub	sp, #32
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
 8005b94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b98:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	21a5      	movs	r1, #165	@ 0xa5
 8005ba2:	f002 f833 	bl	8007c0c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	f023 0307 	bic.w	r3, r3, #7
 8005bbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	f003 0307 	and.w	r3, r3, #7
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00b      	beq.n	8005be2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bce:	f383 8811 	msr	BASEPRI, r3
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	617b      	str	r3, [r7, #20]
}
 8005bdc:	bf00      	nop
 8005bde:	bf00      	nop
 8005be0:	e7fd      	b.n	8005bde <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d01f      	beq.n	8005c28 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005be8:	2300      	movs	r3, #0
 8005bea:	61fb      	str	r3, [r7, #28]
 8005bec:	e012      	b.n	8005c14 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	7819      	ldrb	r1, [r3, #0]
 8005bf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	3334      	adds	r3, #52	@ 0x34
 8005bfe:	460a      	mov	r2, r1
 8005c00:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	4413      	add	r3, r2
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d006      	beq.n	8005c1c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	3301      	adds	r3, #1
 8005c12:	61fb      	str	r3, [r7, #28]
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	2b0f      	cmp	r3, #15
 8005c18:	d9e9      	bls.n	8005bee <prvInitialiseNewTask+0x66>
 8005c1a:	e000      	b.n	8005c1e <prvInitialiseNewTask+0x96>
			{
				break;
 8005c1c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c26:	e003      	b.n	8005c30 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c32:	2b37      	cmp	r3, #55	@ 0x37
 8005c34:	d901      	bls.n	8005c3a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c36:	2337      	movs	r3, #55	@ 0x37
 8005c38:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c44:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c48:	2200      	movs	r2, #0
 8005c4a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c4e:	3304      	adds	r3, #4
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7ff f929 	bl	8004ea8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c58:	3318      	adds	r3, #24
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7ff f924 	bl	8004ea8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c64:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c68:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c6e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c74:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c88:	3354      	adds	r3, #84	@ 0x54
 8005c8a:	224c      	movs	r2, #76	@ 0x4c
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f001 ffbc 	bl	8007c0c <memset>
 8005c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c96:	4a0d      	ldr	r2, [pc, #52]	@ (8005ccc <prvInitialiseNewTask+0x144>)
 8005c98:	659a      	str	r2, [r3, #88]	@ 0x58
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9c:	4a0c      	ldr	r2, [pc, #48]	@ (8005cd0 <prvInitialiseNewTask+0x148>)
 8005c9e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca2:	4a0c      	ldr	r2, [pc, #48]	@ (8005cd4 <prvInitialiseNewTask+0x14c>)
 8005ca4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	68f9      	ldr	r1, [r7, #12]
 8005caa:	69b8      	ldr	r0, [r7, #24]
 8005cac:	f001 f95a 	bl	8006f64 <pxPortInitialiseStack>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d002      	beq.n	8005cc2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cc2:	bf00      	nop
 8005cc4:	3720      	adds	r7, #32
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	20001c44 	.word	0x20001c44
 8005cd0:	20001cac 	.word	0x20001cac
 8005cd4:	20001d14 	.word	0x20001d14

08005cd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ce0:	f001 fa72 	bl	80071c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ce4:	4b2d      	ldr	r3, [pc, #180]	@ (8005d9c <prvAddNewTaskToReadyList+0xc4>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	4a2c      	ldr	r2, [pc, #176]	@ (8005d9c <prvAddNewTaskToReadyList+0xc4>)
 8005cec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005cee:	4b2c      	ldr	r3, [pc, #176]	@ (8005da0 <prvAddNewTaskToReadyList+0xc8>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d109      	bne.n	8005d0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005cf6:	4a2a      	ldr	r2, [pc, #168]	@ (8005da0 <prvAddNewTaskToReadyList+0xc8>)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005cfc:	4b27      	ldr	r3, [pc, #156]	@ (8005d9c <prvAddNewTaskToReadyList+0xc4>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d110      	bne.n	8005d26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d04:	f000 fc2e 	bl	8006564 <prvInitialiseTaskLists>
 8005d08:	e00d      	b.n	8005d26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d0a:	4b26      	ldr	r3, [pc, #152]	@ (8005da4 <prvAddNewTaskToReadyList+0xcc>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d109      	bne.n	8005d26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d12:	4b23      	ldr	r3, [pc, #140]	@ (8005da0 <prvAddNewTaskToReadyList+0xc8>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d802      	bhi.n	8005d26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d20:	4a1f      	ldr	r2, [pc, #124]	@ (8005da0 <prvAddNewTaskToReadyList+0xc8>)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d26:	4b20      	ldr	r3, [pc, #128]	@ (8005da8 <prvAddNewTaskToReadyList+0xd0>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	4a1e      	ldr	r2, [pc, #120]	@ (8005da8 <prvAddNewTaskToReadyList+0xd0>)
 8005d2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005d30:	4b1d      	ldr	r3, [pc, #116]	@ (8005da8 <prvAddNewTaskToReadyList+0xd0>)
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8005dac <prvAddNewTaskToReadyList+0xd4>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d903      	bls.n	8005d4c <prvAddNewTaskToReadyList+0x74>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d48:	4a18      	ldr	r2, [pc, #96]	@ (8005dac <prvAddNewTaskToReadyList+0xd4>)
 8005d4a:	6013      	str	r3, [r2, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d50:	4613      	mov	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4a15      	ldr	r2, [pc, #84]	@ (8005db0 <prvAddNewTaskToReadyList+0xd8>)
 8005d5a:	441a      	add	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	3304      	adds	r3, #4
 8005d60:	4619      	mov	r1, r3
 8005d62:	4610      	mov	r0, r2
 8005d64:	f7ff f8ad 	bl	8004ec2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d68:	f001 fa60 	bl	800722c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8005da4 <prvAddNewTaskToReadyList+0xcc>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00e      	beq.n	8005d92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d74:	4b0a      	ldr	r3, [pc, #40]	@ (8005da0 <prvAddNewTaskToReadyList+0xc8>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d207      	bcs.n	8005d92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d82:	4b0c      	ldr	r3, [pc, #48]	@ (8005db4 <prvAddNewTaskToReadyList+0xdc>)
 8005d84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d88:	601a      	str	r2, [r3, #0]
 8005d8a:	f3bf 8f4f 	dsb	sy
 8005d8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d92:	bf00      	nop
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	20000ec4 	.word	0x20000ec4
 8005da0:	200009f0 	.word	0x200009f0
 8005da4:	20000ed0 	.word	0x20000ed0
 8005da8:	20000ee0 	.word	0x20000ee0
 8005dac:	20000ecc 	.word	0x20000ecc
 8005db0:	200009f4 	.word	0x200009f4
 8005db4:	e000ed04 	.word	0xe000ed04

08005db8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d018      	beq.n	8005dfc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005dca:	4b14      	ldr	r3, [pc, #80]	@ (8005e1c <vTaskDelay+0x64>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00b      	beq.n	8005dea <vTaskDelay+0x32>
	__asm volatile
 8005dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd6:	f383 8811 	msr	BASEPRI, r3
 8005dda:	f3bf 8f6f 	isb	sy
 8005dde:	f3bf 8f4f 	dsb	sy
 8005de2:	60bb      	str	r3, [r7, #8]
}
 8005de4:	bf00      	nop
 8005de6:	bf00      	nop
 8005de8:	e7fd      	b.n	8005de6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005dea:	f000 f88b 	bl	8005f04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005dee:	2100      	movs	r1, #0
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 fd09 	bl	8006808 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005df6:	f000 f893 	bl	8005f20 <xTaskResumeAll>
 8005dfa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d107      	bne.n	8005e12 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005e02:	4b07      	ldr	r3, [pc, #28]	@ (8005e20 <vTaskDelay+0x68>)
 8005e04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e08:	601a      	str	r2, [r3, #0]
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e12:	bf00      	nop
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000eec 	.word	0x20000eec
 8005e20:	e000ed04 	.word	0xe000ed04

08005e24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08a      	sub	sp, #40	@ 0x28
 8005e28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e32:	463a      	mov	r2, r7
 8005e34:	1d39      	adds	r1, r7, #4
 8005e36:	f107 0308 	add.w	r3, r7, #8
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fe ffe0 	bl	8004e00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e40:	6839      	ldr	r1, [r7, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	9202      	str	r2, [sp, #8]
 8005e48:	9301      	str	r3, [sp, #4]
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	2300      	movs	r3, #0
 8005e50:	460a      	mov	r2, r1
 8005e52:	4924      	ldr	r1, [pc, #144]	@ (8005ee4 <vTaskStartScheduler+0xc0>)
 8005e54:	4824      	ldr	r0, [pc, #144]	@ (8005ee8 <vTaskStartScheduler+0xc4>)
 8005e56:	f7ff fdf1 	bl	8005a3c <xTaskCreateStatic>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	4a23      	ldr	r2, [pc, #140]	@ (8005eec <vTaskStartScheduler+0xc8>)
 8005e5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e60:	4b22      	ldr	r3, [pc, #136]	@ (8005eec <vTaskStartScheduler+0xc8>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d002      	beq.n	8005e6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	617b      	str	r3, [r7, #20]
 8005e6c:	e001      	b.n	8005e72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d102      	bne.n	8005e7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005e78:	f000 fd1a 	bl	80068b0 <xTimerCreateTimerTask>
 8005e7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d11b      	bne.n	8005ebc <vTaskStartScheduler+0x98>
	__asm volatile
 8005e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e88:	f383 8811 	msr	BASEPRI, r3
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	613b      	str	r3, [r7, #16]
}
 8005e96:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005e98:	4b15      	ldr	r3, [pc, #84]	@ (8005ef0 <vTaskStartScheduler+0xcc>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3354      	adds	r3, #84	@ 0x54
 8005e9e:	4a15      	ldr	r2, [pc, #84]	@ (8005ef4 <vTaskStartScheduler+0xd0>)
 8005ea0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ea2:	4b15      	ldr	r3, [pc, #84]	@ (8005ef8 <vTaskStartScheduler+0xd4>)
 8005ea4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ea8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005eaa:	4b14      	ldr	r3, [pc, #80]	@ (8005efc <vTaskStartScheduler+0xd8>)
 8005eac:	2201      	movs	r2, #1
 8005eae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005eb0:	4b13      	ldr	r3, [pc, #76]	@ (8005f00 <vTaskStartScheduler+0xdc>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005eb6:	f001 f8e3 	bl	8007080 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005eba:	e00f      	b.n	8005edc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ec2:	d10b      	bne.n	8005edc <vTaskStartScheduler+0xb8>
	__asm volatile
 8005ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	60fb      	str	r3, [r7, #12]
}
 8005ed6:	bf00      	nop
 8005ed8:	bf00      	nop
 8005eda:	e7fd      	b.n	8005ed8 <vTaskStartScheduler+0xb4>
}
 8005edc:	bf00      	nop
 8005ede:	3718      	adds	r7, #24
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	08008acc 	.word	0x08008acc
 8005ee8:	08006535 	.word	0x08006535
 8005eec:	20000ee8 	.word	0x20000ee8
 8005ef0:	200009f0 	.word	0x200009f0
 8005ef4:	20000030 	.word	0x20000030
 8005ef8:	20000ee4 	.word	0x20000ee4
 8005efc:	20000ed0 	.word	0x20000ed0
 8005f00:	20000ec8 	.word	0x20000ec8

08005f04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f04:	b480      	push	{r7}
 8005f06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005f08:	4b04      	ldr	r3, [pc, #16]	@ (8005f1c <vTaskSuspendAll+0x18>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	4a03      	ldr	r2, [pc, #12]	@ (8005f1c <vTaskSuspendAll+0x18>)
 8005f10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005f12:	bf00      	nop
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	20000eec 	.word	0x20000eec

08005f20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f26:	2300      	movs	r3, #0
 8005f28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f2e:	4b42      	ldr	r3, [pc, #264]	@ (8006038 <xTaskResumeAll+0x118>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10b      	bne.n	8005f4e <xTaskResumeAll+0x2e>
	__asm volatile
 8005f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f3a:	f383 8811 	msr	BASEPRI, r3
 8005f3e:	f3bf 8f6f 	isb	sy
 8005f42:	f3bf 8f4f 	dsb	sy
 8005f46:	603b      	str	r3, [r7, #0]
}
 8005f48:	bf00      	nop
 8005f4a:	bf00      	nop
 8005f4c:	e7fd      	b.n	8005f4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f4e:	f001 f93b 	bl	80071c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f52:	4b39      	ldr	r3, [pc, #228]	@ (8006038 <xTaskResumeAll+0x118>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	3b01      	subs	r3, #1
 8005f58:	4a37      	ldr	r2, [pc, #220]	@ (8006038 <xTaskResumeAll+0x118>)
 8005f5a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f5c:	4b36      	ldr	r3, [pc, #216]	@ (8006038 <xTaskResumeAll+0x118>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d162      	bne.n	800602a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f64:	4b35      	ldr	r3, [pc, #212]	@ (800603c <xTaskResumeAll+0x11c>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d05e      	beq.n	800602a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f6c:	e02f      	b.n	8005fce <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f6e:	4b34      	ldr	r3, [pc, #208]	@ (8006040 <xTaskResumeAll+0x120>)
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	3318      	adds	r3, #24
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fe fffe 	bl	8004f7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	3304      	adds	r3, #4
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7fe fff9 	bl	8004f7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f8e:	4b2d      	ldr	r3, [pc, #180]	@ (8006044 <xTaskResumeAll+0x124>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d903      	bls.n	8005f9e <xTaskResumeAll+0x7e>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f9a:	4a2a      	ldr	r2, [pc, #168]	@ (8006044 <xTaskResumeAll+0x124>)
 8005f9c:	6013      	str	r3, [r2, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	4413      	add	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4a27      	ldr	r2, [pc, #156]	@ (8006048 <xTaskResumeAll+0x128>)
 8005fac:	441a      	add	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	3304      	adds	r3, #4
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	f7fe ff84 	bl	8004ec2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fbe:	4b23      	ldr	r3, [pc, #140]	@ (800604c <xTaskResumeAll+0x12c>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d302      	bcc.n	8005fce <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005fc8:	4b21      	ldr	r3, [pc, #132]	@ (8006050 <xTaskResumeAll+0x130>)
 8005fca:	2201      	movs	r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fce:	4b1c      	ldr	r3, [pc, #112]	@ (8006040 <xTaskResumeAll+0x120>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1cb      	bne.n	8005f6e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d001      	beq.n	8005fe0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005fdc:	f000 fb66 	bl	80066ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8006054 <xTaskResumeAll+0x134>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d010      	beq.n	800600e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005fec:	f000 f846 	bl	800607c <xTaskIncrementTick>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d002      	beq.n	8005ffc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005ff6:	4b16      	ldr	r3, [pc, #88]	@ (8006050 <xTaskResumeAll+0x130>)
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	3b01      	subs	r3, #1
 8006000:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1f1      	bne.n	8005fec <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006008:	4b12      	ldr	r3, [pc, #72]	@ (8006054 <xTaskResumeAll+0x134>)
 800600a:	2200      	movs	r2, #0
 800600c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800600e:	4b10      	ldr	r3, [pc, #64]	@ (8006050 <xTaskResumeAll+0x130>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d009      	beq.n	800602a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006016:	2301      	movs	r3, #1
 8006018:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800601a:	4b0f      	ldr	r3, [pc, #60]	@ (8006058 <xTaskResumeAll+0x138>)
 800601c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	f3bf 8f4f 	dsb	sy
 8006026:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800602a:	f001 f8ff 	bl	800722c <vPortExitCritical>

	return xAlreadyYielded;
 800602e:	68bb      	ldr	r3, [r7, #8]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	20000eec 	.word	0x20000eec
 800603c:	20000ec4 	.word	0x20000ec4
 8006040:	20000e84 	.word	0x20000e84
 8006044:	20000ecc 	.word	0x20000ecc
 8006048:	200009f4 	.word	0x200009f4
 800604c:	200009f0 	.word	0x200009f0
 8006050:	20000ed8 	.word	0x20000ed8
 8006054:	20000ed4 	.word	0x20000ed4
 8006058:	e000ed04 	.word	0xe000ed04

0800605c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006062:	4b05      	ldr	r3, [pc, #20]	@ (8006078 <xTaskGetTickCount+0x1c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006068:	687b      	ldr	r3, [r7, #4]
}
 800606a:	4618      	mov	r0, r3
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	20000ec8 	.word	0x20000ec8

0800607c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b086      	sub	sp, #24
 8006080:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006082:	2300      	movs	r3, #0
 8006084:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006086:	4b4f      	ldr	r3, [pc, #316]	@ (80061c4 <xTaskIncrementTick+0x148>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	f040 8090 	bne.w	80061b0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006090:	4b4d      	ldr	r3, [pc, #308]	@ (80061c8 <xTaskIncrementTick+0x14c>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	3301      	adds	r3, #1
 8006096:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006098:	4a4b      	ldr	r2, [pc, #300]	@ (80061c8 <xTaskIncrementTick+0x14c>)
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d121      	bne.n	80060e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80060a4:	4b49      	ldr	r3, [pc, #292]	@ (80061cc <xTaskIncrementTick+0x150>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00b      	beq.n	80060c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80060ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b2:	f383 8811 	msr	BASEPRI, r3
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	603b      	str	r3, [r7, #0]
}
 80060c0:	bf00      	nop
 80060c2:	bf00      	nop
 80060c4:	e7fd      	b.n	80060c2 <xTaskIncrementTick+0x46>
 80060c6:	4b41      	ldr	r3, [pc, #260]	@ (80061cc <xTaskIncrementTick+0x150>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	60fb      	str	r3, [r7, #12]
 80060cc:	4b40      	ldr	r3, [pc, #256]	@ (80061d0 <xTaskIncrementTick+0x154>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a3e      	ldr	r2, [pc, #248]	@ (80061cc <xTaskIncrementTick+0x150>)
 80060d2:	6013      	str	r3, [r2, #0]
 80060d4:	4a3e      	ldr	r2, [pc, #248]	@ (80061d0 <xTaskIncrementTick+0x154>)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6013      	str	r3, [r2, #0]
 80060da:	4b3e      	ldr	r3, [pc, #248]	@ (80061d4 <xTaskIncrementTick+0x158>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	3301      	adds	r3, #1
 80060e0:	4a3c      	ldr	r2, [pc, #240]	@ (80061d4 <xTaskIncrementTick+0x158>)
 80060e2:	6013      	str	r3, [r2, #0]
 80060e4:	f000 fae2 	bl	80066ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80060e8:	4b3b      	ldr	r3, [pc, #236]	@ (80061d8 <xTaskIncrementTick+0x15c>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d349      	bcc.n	8006186 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060f2:	4b36      	ldr	r3, [pc, #216]	@ (80061cc <xTaskIncrementTick+0x150>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d104      	bne.n	8006106 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060fc:	4b36      	ldr	r3, [pc, #216]	@ (80061d8 <xTaskIncrementTick+0x15c>)
 80060fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006102:	601a      	str	r2, [r3, #0]
					break;
 8006104:	e03f      	b.n	8006186 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006106:	4b31      	ldr	r3, [pc, #196]	@ (80061cc <xTaskIncrementTick+0x150>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	429a      	cmp	r2, r3
 800611c:	d203      	bcs.n	8006126 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800611e:	4a2e      	ldr	r2, [pc, #184]	@ (80061d8 <xTaskIncrementTick+0x15c>)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006124:	e02f      	b.n	8006186 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	3304      	adds	r3, #4
 800612a:	4618      	mov	r0, r3
 800612c:	f7fe ff26 	bl	8004f7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006134:	2b00      	cmp	r3, #0
 8006136:	d004      	beq.n	8006142 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	3318      	adds	r3, #24
 800613c:	4618      	mov	r0, r3
 800613e:	f7fe ff1d 	bl	8004f7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006146:	4b25      	ldr	r3, [pc, #148]	@ (80061dc <xTaskIncrementTick+0x160>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	429a      	cmp	r2, r3
 800614c:	d903      	bls.n	8006156 <xTaskIncrementTick+0xda>
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006152:	4a22      	ldr	r2, [pc, #136]	@ (80061dc <xTaskIncrementTick+0x160>)
 8006154:	6013      	str	r3, [r2, #0]
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800615a:	4613      	mov	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4a1f      	ldr	r2, [pc, #124]	@ (80061e0 <xTaskIncrementTick+0x164>)
 8006164:	441a      	add	r2, r3
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	3304      	adds	r3, #4
 800616a:	4619      	mov	r1, r3
 800616c:	4610      	mov	r0, r2
 800616e:	f7fe fea8 	bl	8004ec2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006176:	4b1b      	ldr	r3, [pc, #108]	@ (80061e4 <xTaskIncrementTick+0x168>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617c:	429a      	cmp	r2, r3
 800617e:	d3b8      	bcc.n	80060f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006180:	2301      	movs	r3, #1
 8006182:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006184:	e7b5      	b.n	80060f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006186:	4b17      	ldr	r3, [pc, #92]	@ (80061e4 <xTaskIncrementTick+0x168>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800618c:	4914      	ldr	r1, [pc, #80]	@ (80061e0 <xTaskIncrementTick+0x164>)
 800618e:	4613      	mov	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	440b      	add	r3, r1
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d901      	bls.n	80061a2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800619e:	2301      	movs	r3, #1
 80061a0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80061a2:	4b11      	ldr	r3, [pc, #68]	@ (80061e8 <xTaskIncrementTick+0x16c>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d007      	beq.n	80061ba <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80061aa:	2301      	movs	r3, #1
 80061ac:	617b      	str	r3, [r7, #20]
 80061ae:	e004      	b.n	80061ba <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80061b0:	4b0e      	ldr	r3, [pc, #56]	@ (80061ec <xTaskIncrementTick+0x170>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	3301      	adds	r3, #1
 80061b6:	4a0d      	ldr	r2, [pc, #52]	@ (80061ec <xTaskIncrementTick+0x170>)
 80061b8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80061ba:	697b      	ldr	r3, [r7, #20]
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3718      	adds	r7, #24
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	20000eec 	.word	0x20000eec
 80061c8:	20000ec8 	.word	0x20000ec8
 80061cc:	20000e7c 	.word	0x20000e7c
 80061d0:	20000e80 	.word	0x20000e80
 80061d4:	20000edc 	.word	0x20000edc
 80061d8:	20000ee4 	.word	0x20000ee4
 80061dc:	20000ecc 	.word	0x20000ecc
 80061e0:	200009f4 	.word	0x200009f4
 80061e4:	200009f0 	.word	0x200009f0
 80061e8:	20000ed8 	.word	0x20000ed8
 80061ec:	20000ed4 	.word	0x20000ed4

080061f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80061f6:	4b2b      	ldr	r3, [pc, #172]	@ (80062a4 <vTaskSwitchContext+0xb4>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80061fe:	4b2a      	ldr	r3, [pc, #168]	@ (80062a8 <vTaskSwitchContext+0xb8>)
 8006200:	2201      	movs	r2, #1
 8006202:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006204:	e047      	b.n	8006296 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006206:	4b28      	ldr	r3, [pc, #160]	@ (80062a8 <vTaskSwitchContext+0xb8>)
 8006208:	2200      	movs	r2, #0
 800620a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800620c:	4b27      	ldr	r3, [pc, #156]	@ (80062ac <vTaskSwitchContext+0xbc>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	60fb      	str	r3, [r7, #12]
 8006212:	e011      	b.n	8006238 <vTaskSwitchContext+0x48>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10b      	bne.n	8006232 <vTaskSwitchContext+0x42>
	__asm volatile
 800621a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621e:	f383 8811 	msr	BASEPRI, r3
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	607b      	str	r3, [r7, #4]
}
 800622c:	bf00      	nop
 800622e:	bf00      	nop
 8006230:	e7fd      	b.n	800622e <vTaskSwitchContext+0x3e>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	3b01      	subs	r3, #1
 8006236:	60fb      	str	r3, [r7, #12]
 8006238:	491d      	ldr	r1, [pc, #116]	@ (80062b0 <vTaskSwitchContext+0xc0>)
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	4613      	mov	r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	440b      	add	r3, r1
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d0e3      	beq.n	8006214 <vTaskSwitchContext+0x24>
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	4613      	mov	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4413      	add	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4a16      	ldr	r2, [pc, #88]	@ (80062b0 <vTaskSwitchContext+0xc0>)
 8006258:	4413      	add	r3, r2
 800625a:	60bb      	str	r3, [r7, #8]
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	685a      	ldr	r2, [r3, #4]
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	605a      	str	r2, [r3, #4]
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	3308      	adds	r3, #8
 800626e:	429a      	cmp	r2, r3
 8006270:	d104      	bne.n	800627c <vTaskSwitchContext+0x8c>
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	685a      	ldr	r2, [r3, #4]
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	605a      	str	r2, [r3, #4]
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	4a0c      	ldr	r2, [pc, #48]	@ (80062b4 <vTaskSwitchContext+0xc4>)
 8006284:	6013      	str	r3, [r2, #0]
 8006286:	4a09      	ldr	r2, [pc, #36]	@ (80062ac <vTaskSwitchContext+0xbc>)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800628c:	4b09      	ldr	r3, [pc, #36]	@ (80062b4 <vTaskSwitchContext+0xc4>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	3354      	adds	r3, #84	@ 0x54
 8006292:	4a09      	ldr	r2, [pc, #36]	@ (80062b8 <vTaskSwitchContext+0xc8>)
 8006294:	6013      	str	r3, [r2, #0]
}
 8006296:	bf00      	nop
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	20000eec 	.word	0x20000eec
 80062a8:	20000ed8 	.word	0x20000ed8
 80062ac:	20000ecc 	.word	0x20000ecc
 80062b0:	200009f4 	.word	0x200009f4
 80062b4:	200009f0 	.word	0x200009f0
 80062b8:	20000030 	.word	0x20000030

080062bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10b      	bne.n	80062e4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80062cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d0:	f383 8811 	msr	BASEPRI, r3
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	60fb      	str	r3, [r7, #12]
}
 80062de:	bf00      	nop
 80062e0:	bf00      	nop
 80062e2:	e7fd      	b.n	80062e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062e4:	4b07      	ldr	r3, [pc, #28]	@ (8006304 <vTaskPlaceOnEventList+0x48>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	3318      	adds	r3, #24
 80062ea:	4619      	mov	r1, r3
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f7fe fe0c 	bl	8004f0a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80062f2:	2101      	movs	r1, #1
 80062f4:	6838      	ldr	r0, [r7, #0]
 80062f6:	f000 fa87 	bl	8006808 <prvAddCurrentTaskToDelayedList>
}
 80062fa:	bf00      	nop
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	200009f0 	.word	0x200009f0

08006308 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10b      	bne.n	8006332 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800631a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800631e:	f383 8811 	msr	BASEPRI, r3
 8006322:	f3bf 8f6f 	isb	sy
 8006326:	f3bf 8f4f 	dsb	sy
 800632a:	617b      	str	r3, [r7, #20]
}
 800632c:	bf00      	nop
 800632e:	bf00      	nop
 8006330:	e7fd      	b.n	800632e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006332:	4b0a      	ldr	r3, [pc, #40]	@ (800635c <vTaskPlaceOnEventListRestricted+0x54>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3318      	adds	r3, #24
 8006338:	4619      	mov	r1, r3
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f7fe fdc1 	bl	8004ec2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d002      	beq.n	800634c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006346:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800634a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800634c:	6879      	ldr	r1, [r7, #4]
 800634e:	68b8      	ldr	r0, [r7, #8]
 8006350:	f000 fa5a 	bl	8006808 <prvAddCurrentTaskToDelayedList>
	}
 8006354:	bf00      	nop
 8006356:	3718      	adds	r7, #24
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	200009f0 	.word	0x200009f0

08006360 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10b      	bne.n	800638e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800637a:	f383 8811 	msr	BASEPRI, r3
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	60fb      	str	r3, [r7, #12]
}
 8006388:	bf00      	nop
 800638a:	bf00      	nop
 800638c:	e7fd      	b.n	800638a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	3318      	adds	r3, #24
 8006392:	4618      	mov	r0, r3
 8006394:	f7fe fdf2 	bl	8004f7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006398:	4b1d      	ldr	r3, [pc, #116]	@ (8006410 <xTaskRemoveFromEventList+0xb0>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d11d      	bne.n	80063dc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	3304      	adds	r3, #4
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7fe fde9 	bl	8004f7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063ae:	4b19      	ldr	r3, [pc, #100]	@ (8006414 <xTaskRemoveFromEventList+0xb4>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d903      	bls.n	80063be <xTaskRemoveFromEventList+0x5e>
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ba:	4a16      	ldr	r2, [pc, #88]	@ (8006414 <xTaskRemoveFromEventList+0xb4>)
 80063bc:	6013      	str	r3, [r2, #0]
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063c2:	4613      	mov	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4413      	add	r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4a13      	ldr	r2, [pc, #76]	@ (8006418 <xTaskRemoveFromEventList+0xb8>)
 80063cc:	441a      	add	r2, r3
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	3304      	adds	r3, #4
 80063d2:	4619      	mov	r1, r3
 80063d4:	4610      	mov	r0, r2
 80063d6:	f7fe fd74 	bl	8004ec2 <vListInsertEnd>
 80063da:	e005      	b.n	80063e8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	3318      	adds	r3, #24
 80063e0:	4619      	mov	r1, r3
 80063e2:	480e      	ldr	r0, [pc, #56]	@ (800641c <xTaskRemoveFromEventList+0xbc>)
 80063e4:	f7fe fd6d 	bl	8004ec2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006420 <xTaskRemoveFromEventList+0xc0>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d905      	bls.n	8006402 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80063f6:	2301      	movs	r3, #1
 80063f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80063fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006424 <xTaskRemoveFromEventList+0xc4>)
 80063fc:	2201      	movs	r2, #1
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	e001      	b.n	8006406 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006402:	2300      	movs	r3, #0
 8006404:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006406:	697b      	ldr	r3, [r7, #20]
}
 8006408:	4618      	mov	r0, r3
 800640a:	3718      	adds	r7, #24
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	20000eec 	.word	0x20000eec
 8006414:	20000ecc 	.word	0x20000ecc
 8006418:	200009f4 	.word	0x200009f4
 800641c:	20000e84 	.word	0x20000e84
 8006420:	200009f0 	.word	0x200009f0
 8006424:	20000ed8 	.word	0x20000ed8

08006428 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006430:	4b06      	ldr	r3, [pc, #24]	@ (800644c <vTaskInternalSetTimeOutState+0x24>)
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006438:	4b05      	ldr	r3, [pc, #20]	@ (8006450 <vTaskInternalSetTimeOutState+0x28>)
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	605a      	str	r2, [r3, #4]
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	20000edc 	.word	0x20000edc
 8006450:	20000ec8 	.word	0x20000ec8

08006454 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b088      	sub	sp, #32
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10b      	bne.n	800647c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	613b      	str	r3, [r7, #16]
}
 8006476:	bf00      	nop
 8006478:	bf00      	nop
 800647a:	e7fd      	b.n	8006478 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10b      	bne.n	800649a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	60fb      	str	r3, [r7, #12]
}
 8006494:	bf00      	nop
 8006496:	bf00      	nop
 8006498:	e7fd      	b.n	8006496 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800649a:	f000 fe95 	bl	80071c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800649e:	4b1d      	ldr	r3, [pc, #116]	@ (8006514 <xTaskCheckForTimeOut+0xc0>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064b6:	d102      	bne.n	80064be <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80064b8:	2300      	movs	r3, #0
 80064ba:	61fb      	str	r3, [r7, #28]
 80064bc:	e023      	b.n	8006506 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	4b15      	ldr	r3, [pc, #84]	@ (8006518 <xTaskCheckForTimeOut+0xc4>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d007      	beq.n	80064da <xTaskCheckForTimeOut+0x86>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d302      	bcc.n	80064da <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80064d4:	2301      	movs	r3, #1
 80064d6:	61fb      	str	r3, [r7, #28]
 80064d8:	e015      	b.n	8006506 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d20b      	bcs.n	80064fc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	1ad2      	subs	r2, r2, r3
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7ff ff99 	bl	8006428 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80064f6:	2300      	movs	r3, #0
 80064f8:	61fb      	str	r3, [r7, #28]
 80064fa:	e004      	b.n	8006506 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2200      	movs	r2, #0
 8006500:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006502:	2301      	movs	r3, #1
 8006504:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006506:	f000 fe91 	bl	800722c <vPortExitCritical>

	return xReturn;
 800650a:	69fb      	ldr	r3, [r7, #28]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3720      	adds	r7, #32
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	20000ec8 	.word	0x20000ec8
 8006518:	20000edc 	.word	0x20000edc

0800651c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800651c:	b480      	push	{r7}
 800651e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006520:	4b03      	ldr	r3, [pc, #12]	@ (8006530 <vTaskMissedYield+0x14>)
 8006522:	2201      	movs	r2, #1
 8006524:	601a      	str	r2, [r3, #0]
}
 8006526:	bf00      	nop
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	20000ed8 	.word	0x20000ed8

08006534 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800653c:	f000 f852 	bl	80065e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006540:	4b06      	ldr	r3, [pc, #24]	@ (800655c <prvIdleTask+0x28>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d9f9      	bls.n	800653c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006548:	4b05      	ldr	r3, [pc, #20]	@ (8006560 <prvIdleTask+0x2c>)
 800654a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006558:	e7f0      	b.n	800653c <prvIdleTask+0x8>
 800655a:	bf00      	nop
 800655c:	200009f4 	.word	0x200009f4
 8006560:	e000ed04 	.word	0xe000ed04

08006564 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800656a:	2300      	movs	r3, #0
 800656c:	607b      	str	r3, [r7, #4]
 800656e:	e00c      	b.n	800658a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	4613      	mov	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4413      	add	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4a12      	ldr	r2, [pc, #72]	@ (80065c4 <prvInitialiseTaskLists+0x60>)
 800657c:	4413      	add	r3, r2
 800657e:	4618      	mov	r0, r3
 8006580:	f7fe fc72 	bl	8004e68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	3301      	adds	r3, #1
 8006588:	607b      	str	r3, [r7, #4]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b37      	cmp	r3, #55	@ 0x37
 800658e:	d9ef      	bls.n	8006570 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006590:	480d      	ldr	r0, [pc, #52]	@ (80065c8 <prvInitialiseTaskLists+0x64>)
 8006592:	f7fe fc69 	bl	8004e68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006596:	480d      	ldr	r0, [pc, #52]	@ (80065cc <prvInitialiseTaskLists+0x68>)
 8006598:	f7fe fc66 	bl	8004e68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800659c:	480c      	ldr	r0, [pc, #48]	@ (80065d0 <prvInitialiseTaskLists+0x6c>)
 800659e:	f7fe fc63 	bl	8004e68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80065a2:	480c      	ldr	r0, [pc, #48]	@ (80065d4 <prvInitialiseTaskLists+0x70>)
 80065a4:	f7fe fc60 	bl	8004e68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80065a8:	480b      	ldr	r0, [pc, #44]	@ (80065d8 <prvInitialiseTaskLists+0x74>)
 80065aa:	f7fe fc5d 	bl	8004e68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80065ae:	4b0b      	ldr	r3, [pc, #44]	@ (80065dc <prvInitialiseTaskLists+0x78>)
 80065b0:	4a05      	ldr	r2, [pc, #20]	@ (80065c8 <prvInitialiseTaskLists+0x64>)
 80065b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80065b4:	4b0a      	ldr	r3, [pc, #40]	@ (80065e0 <prvInitialiseTaskLists+0x7c>)
 80065b6:	4a05      	ldr	r2, [pc, #20]	@ (80065cc <prvInitialiseTaskLists+0x68>)
 80065b8:	601a      	str	r2, [r3, #0]
}
 80065ba:	bf00      	nop
 80065bc:	3708      	adds	r7, #8
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	200009f4 	.word	0x200009f4
 80065c8:	20000e54 	.word	0x20000e54
 80065cc:	20000e68 	.word	0x20000e68
 80065d0:	20000e84 	.word	0x20000e84
 80065d4:	20000e98 	.word	0x20000e98
 80065d8:	20000eb0 	.word	0x20000eb0
 80065dc:	20000e7c 	.word	0x20000e7c
 80065e0:	20000e80 	.word	0x20000e80

080065e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065ea:	e019      	b.n	8006620 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80065ec:	f000 fdec 	bl	80071c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065f0:	4b10      	ldr	r3, [pc, #64]	@ (8006634 <prvCheckTasksWaitingTermination+0x50>)
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3304      	adds	r3, #4
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7fe fcbd 	bl	8004f7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006602:	4b0d      	ldr	r3, [pc, #52]	@ (8006638 <prvCheckTasksWaitingTermination+0x54>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	3b01      	subs	r3, #1
 8006608:	4a0b      	ldr	r2, [pc, #44]	@ (8006638 <prvCheckTasksWaitingTermination+0x54>)
 800660a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800660c:	4b0b      	ldr	r3, [pc, #44]	@ (800663c <prvCheckTasksWaitingTermination+0x58>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3b01      	subs	r3, #1
 8006612:	4a0a      	ldr	r2, [pc, #40]	@ (800663c <prvCheckTasksWaitingTermination+0x58>)
 8006614:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006616:	f000 fe09 	bl	800722c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f810 	bl	8006640 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006620:	4b06      	ldr	r3, [pc, #24]	@ (800663c <prvCheckTasksWaitingTermination+0x58>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1e1      	bne.n	80065ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006628:	bf00      	nop
 800662a:	bf00      	nop
 800662c:	3708      	adds	r7, #8
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	20000e98 	.word	0x20000e98
 8006638:	20000ec4 	.word	0x20000ec4
 800663c:	20000eac 	.word	0x20000eac

08006640 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	3354      	adds	r3, #84	@ 0x54
 800664c:	4618      	mov	r0, r3
 800664e:	f001 faf5 	bl	8007c3c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006658:	2b00      	cmp	r3, #0
 800665a:	d108      	bne.n	800666e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006660:	4618      	mov	r0, r3
 8006662:	f000 ffa1 	bl	80075a8 <vPortFree>
				vPortFree( pxTCB );
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 ff9e 	bl	80075a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800666c:	e019      	b.n	80066a2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006674:	2b01      	cmp	r3, #1
 8006676:	d103      	bne.n	8006680 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 ff95 	bl	80075a8 <vPortFree>
	}
 800667e:	e010      	b.n	80066a2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006686:	2b02      	cmp	r3, #2
 8006688:	d00b      	beq.n	80066a2 <prvDeleteTCB+0x62>
	__asm volatile
 800668a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800668e:	f383 8811 	msr	BASEPRI, r3
 8006692:	f3bf 8f6f 	isb	sy
 8006696:	f3bf 8f4f 	dsb	sy
 800669a:	60fb      	str	r3, [r7, #12]
}
 800669c:	bf00      	nop
 800669e:	bf00      	nop
 80066a0:	e7fd      	b.n	800669e <prvDeleteTCB+0x5e>
	}
 80066a2:	bf00      	nop
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
	...

080066ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066b2:	4b0c      	ldr	r3, [pc, #48]	@ (80066e4 <prvResetNextTaskUnblockTime+0x38>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d104      	bne.n	80066c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80066bc:	4b0a      	ldr	r3, [pc, #40]	@ (80066e8 <prvResetNextTaskUnblockTime+0x3c>)
 80066be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80066c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80066c4:	e008      	b.n	80066d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066c6:	4b07      	ldr	r3, [pc, #28]	@ (80066e4 <prvResetNextTaskUnblockTime+0x38>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	4a04      	ldr	r2, [pc, #16]	@ (80066e8 <prvResetNextTaskUnblockTime+0x3c>)
 80066d6:	6013      	str	r3, [r2, #0]
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr
 80066e4:	20000e7c 	.word	0x20000e7c
 80066e8:	20000ee4 	.word	0x20000ee4

080066ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80066f2:	4b0b      	ldr	r3, [pc, #44]	@ (8006720 <xTaskGetSchedulerState+0x34>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d102      	bne.n	8006700 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80066fa:	2301      	movs	r3, #1
 80066fc:	607b      	str	r3, [r7, #4]
 80066fe:	e008      	b.n	8006712 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006700:	4b08      	ldr	r3, [pc, #32]	@ (8006724 <xTaskGetSchedulerState+0x38>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d102      	bne.n	800670e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006708:	2302      	movs	r3, #2
 800670a:	607b      	str	r3, [r7, #4]
 800670c:	e001      	b.n	8006712 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800670e:	2300      	movs	r3, #0
 8006710:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006712:	687b      	ldr	r3, [r7, #4]
	}
 8006714:	4618      	mov	r0, r3
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	20000ed0 	.word	0x20000ed0
 8006724:	20000eec 	.word	0x20000eec

08006728 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006734:	2300      	movs	r3, #0
 8006736:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d058      	beq.n	80067f0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800673e:	4b2f      	ldr	r3, [pc, #188]	@ (80067fc <xTaskPriorityDisinherit+0xd4>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	429a      	cmp	r2, r3
 8006746:	d00b      	beq.n	8006760 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800674c:	f383 8811 	msr	BASEPRI, r3
 8006750:	f3bf 8f6f 	isb	sy
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	60fb      	str	r3, [r7, #12]
}
 800675a:	bf00      	nop
 800675c:	bf00      	nop
 800675e:	e7fd      	b.n	800675c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10b      	bne.n	8006780 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676c:	f383 8811 	msr	BASEPRI, r3
 8006770:	f3bf 8f6f 	isb	sy
 8006774:	f3bf 8f4f 	dsb	sy
 8006778:	60bb      	str	r3, [r7, #8]
}
 800677a:	bf00      	nop
 800677c:	bf00      	nop
 800677e:	e7fd      	b.n	800677c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006784:	1e5a      	subs	r2, r3, #1
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006792:	429a      	cmp	r2, r3
 8006794:	d02c      	beq.n	80067f0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800679a:	2b00      	cmp	r3, #0
 800679c:	d128      	bne.n	80067f0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	3304      	adds	r3, #4
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7fe fbea 	bl	8004f7c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067c0:	4b0f      	ldr	r3, [pc, #60]	@ (8006800 <xTaskPriorityDisinherit+0xd8>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d903      	bls.n	80067d0 <xTaskPriorityDisinherit+0xa8>
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067cc:	4a0c      	ldr	r2, [pc, #48]	@ (8006800 <xTaskPriorityDisinherit+0xd8>)
 80067ce:	6013      	str	r3, [r2, #0]
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067d4:	4613      	mov	r3, r2
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	4413      	add	r3, r2
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4a09      	ldr	r2, [pc, #36]	@ (8006804 <xTaskPriorityDisinherit+0xdc>)
 80067de:	441a      	add	r2, r3
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	3304      	adds	r3, #4
 80067e4:	4619      	mov	r1, r3
 80067e6:	4610      	mov	r0, r2
 80067e8:	f7fe fb6b 	bl	8004ec2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80067ec:	2301      	movs	r3, #1
 80067ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067f0:	697b      	ldr	r3, [r7, #20]
	}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3718      	adds	r7, #24
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	200009f0 	.word	0x200009f0
 8006800:	20000ecc 	.word	0x20000ecc
 8006804:	200009f4 	.word	0x200009f4

08006808 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006812:	4b21      	ldr	r3, [pc, #132]	@ (8006898 <prvAddCurrentTaskToDelayedList+0x90>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006818:	4b20      	ldr	r3, [pc, #128]	@ (800689c <prvAddCurrentTaskToDelayedList+0x94>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	3304      	adds	r3, #4
 800681e:	4618      	mov	r0, r3
 8006820:	f7fe fbac 	bl	8004f7c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800682a:	d10a      	bne.n	8006842 <prvAddCurrentTaskToDelayedList+0x3a>
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d007      	beq.n	8006842 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006832:	4b1a      	ldr	r3, [pc, #104]	@ (800689c <prvAddCurrentTaskToDelayedList+0x94>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	3304      	adds	r3, #4
 8006838:	4619      	mov	r1, r3
 800683a:	4819      	ldr	r0, [pc, #100]	@ (80068a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800683c:	f7fe fb41 	bl	8004ec2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006840:	e026      	b.n	8006890 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4413      	add	r3, r2
 8006848:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800684a:	4b14      	ldr	r3, [pc, #80]	@ (800689c <prvAddCurrentTaskToDelayedList+0x94>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	429a      	cmp	r2, r3
 8006858:	d209      	bcs.n	800686e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800685a:	4b12      	ldr	r3, [pc, #72]	@ (80068a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	4b0f      	ldr	r3, [pc, #60]	@ (800689c <prvAddCurrentTaskToDelayedList+0x94>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	3304      	adds	r3, #4
 8006864:	4619      	mov	r1, r3
 8006866:	4610      	mov	r0, r2
 8006868:	f7fe fb4f 	bl	8004f0a <vListInsert>
}
 800686c:	e010      	b.n	8006890 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800686e:	4b0e      	ldr	r3, [pc, #56]	@ (80068a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	4b0a      	ldr	r3, [pc, #40]	@ (800689c <prvAddCurrentTaskToDelayedList+0x94>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3304      	adds	r3, #4
 8006878:	4619      	mov	r1, r3
 800687a:	4610      	mov	r0, r2
 800687c:	f7fe fb45 	bl	8004f0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006880:	4b0a      	ldr	r3, [pc, #40]	@ (80068ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	429a      	cmp	r2, r3
 8006888:	d202      	bcs.n	8006890 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800688a:	4a08      	ldr	r2, [pc, #32]	@ (80068ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	6013      	str	r3, [r2, #0]
}
 8006890:	bf00      	nop
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	20000ec8 	.word	0x20000ec8
 800689c:	200009f0 	.word	0x200009f0
 80068a0:	20000eb0 	.word	0x20000eb0
 80068a4:	20000e80 	.word	0x20000e80
 80068a8:	20000e7c 	.word	0x20000e7c
 80068ac:	20000ee4 	.word	0x20000ee4

080068b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b08a      	sub	sp, #40	@ 0x28
 80068b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80068b6:	2300      	movs	r3, #0
 80068b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80068ba:	f000 fb13 	bl	8006ee4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80068be:	4b1d      	ldr	r3, [pc, #116]	@ (8006934 <xTimerCreateTimerTask+0x84>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d021      	beq.n	800690a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80068c6:	2300      	movs	r3, #0
 80068c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80068ca:	2300      	movs	r3, #0
 80068cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80068ce:	1d3a      	adds	r2, r7, #4
 80068d0:	f107 0108 	add.w	r1, r7, #8
 80068d4:	f107 030c 	add.w	r3, r7, #12
 80068d8:	4618      	mov	r0, r3
 80068da:	f7fe faab 	bl	8004e34 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80068de:	6879      	ldr	r1, [r7, #4]
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	9202      	str	r2, [sp, #8]
 80068e6:	9301      	str	r3, [sp, #4]
 80068e8:	2302      	movs	r3, #2
 80068ea:	9300      	str	r3, [sp, #0]
 80068ec:	2300      	movs	r3, #0
 80068ee:	460a      	mov	r2, r1
 80068f0:	4911      	ldr	r1, [pc, #68]	@ (8006938 <xTimerCreateTimerTask+0x88>)
 80068f2:	4812      	ldr	r0, [pc, #72]	@ (800693c <xTimerCreateTimerTask+0x8c>)
 80068f4:	f7ff f8a2 	bl	8005a3c <xTaskCreateStatic>
 80068f8:	4603      	mov	r3, r0
 80068fa:	4a11      	ldr	r2, [pc, #68]	@ (8006940 <xTimerCreateTimerTask+0x90>)
 80068fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80068fe:	4b10      	ldr	r3, [pc, #64]	@ (8006940 <xTimerCreateTimerTask+0x90>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006906:	2301      	movs	r3, #1
 8006908:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d10b      	bne.n	8006928 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	613b      	str	r3, [r7, #16]
}
 8006922:	bf00      	nop
 8006924:	bf00      	nop
 8006926:	e7fd      	b.n	8006924 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006928:	697b      	ldr	r3, [r7, #20]
}
 800692a:	4618      	mov	r0, r3
 800692c:	3718      	adds	r7, #24
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	20000f20 	.word	0x20000f20
 8006938:	08008ad4 	.word	0x08008ad4
 800693c:	08006a7d 	.word	0x08006a7d
 8006940:	20000f24 	.word	0x20000f24

08006944 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b08a      	sub	sp, #40	@ 0x28
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
 8006950:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006952:	2300      	movs	r3, #0
 8006954:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10b      	bne.n	8006974 <xTimerGenericCommand+0x30>
	__asm volatile
 800695c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006960:	f383 8811 	msr	BASEPRI, r3
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	623b      	str	r3, [r7, #32]
}
 800696e:	bf00      	nop
 8006970:	bf00      	nop
 8006972:	e7fd      	b.n	8006970 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006974:	4b19      	ldr	r3, [pc, #100]	@ (80069dc <xTimerGenericCommand+0x98>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d02a      	beq.n	80069d2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	2b05      	cmp	r3, #5
 800698c:	dc18      	bgt.n	80069c0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800698e:	f7ff fead 	bl	80066ec <xTaskGetSchedulerState>
 8006992:	4603      	mov	r3, r0
 8006994:	2b02      	cmp	r3, #2
 8006996:	d109      	bne.n	80069ac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006998:	4b10      	ldr	r3, [pc, #64]	@ (80069dc <xTimerGenericCommand+0x98>)
 800699a:	6818      	ldr	r0, [r3, #0]
 800699c:	f107 0110 	add.w	r1, r7, #16
 80069a0:	2300      	movs	r3, #0
 80069a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069a4:	f7fe fc5a 	bl	800525c <xQueueGenericSend>
 80069a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80069aa:	e012      	b.n	80069d2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80069ac:	4b0b      	ldr	r3, [pc, #44]	@ (80069dc <xTimerGenericCommand+0x98>)
 80069ae:	6818      	ldr	r0, [r3, #0]
 80069b0:	f107 0110 	add.w	r1, r7, #16
 80069b4:	2300      	movs	r3, #0
 80069b6:	2200      	movs	r2, #0
 80069b8:	f7fe fc50 	bl	800525c <xQueueGenericSend>
 80069bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80069be:	e008      	b.n	80069d2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80069c0:	4b06      	ldr	r3, [pc, #24]	@ (80069dc <xTimerGenericCommand+0x98>)
 80069c2:	6818      	ldr	r0, [r3, #0]
 80069c4:	f107 0110 	add.w	r1, r7, #16
 80069c8:	2300      	movs	r3, #0
 80069ca:	683a      	ldr	r2, [r7, #0]
 80069cc:	f7fe fd48 	bl	8005460 <xQueueGenericSendFromISR>
 80069d0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80069d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3728      	adds	r7, #40	@ 0x28
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	20000f20 	.word	0x20000f20

080069e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b088      	sub	sp, #32
 80069e4:	af02      	add	r7, sp, #8
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069ea:	4b23      	ldr	r3, [pc, #140]	@ (8006a78 <prvProcessExpiredTimer+0x98>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	3304      	adds	r3, #4
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7fe fabf 	bl	8004f7c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a04:	f003 0304 	and.w	r3, r3, #4
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d023      	beq.n	8006a54 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	699a      	ldr	r2, [r3, #24]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	18d1      	adds	r1, r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	683a      	ldr	r2, [r7, #0]
 8006a18:	6978      	ldr	r0, [r7, #20]
 8006a1a:	f000 f8d5 	bl	8006bc8 <prvInsertTimerInActiveList>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d020      	beq.n	8006a66 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a24:	2300      	movs	r3, #0
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	2300      	movs	r3, #0
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	6978      	ldr	r0, [r7, #20]
 8006a30:	f7ff ff88 	bl	8006944 <xTimerGenericCommand>
 8006a34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d114      	bne.n	8006a66 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a40:	f383 8811 	msr	BASEPRI, r3
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	60fb      	str	r3, [r7, #12]
}
 8006a4e:	bf00      	nop
 8006a50:	bf00      	nop
 8006a52:	e7fd      	b.n	8006a50 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a5a:	f023 0301 	bic.w	r3, r3, #1
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	6978      	ldr	r0, [r7, #20]
 8006a6c:	4798      	blx	r3
}
 8006a6e:	bf00      	nop
 8006a70:	3718      	adds	r7, #24
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	20000f18 	.word	0x20000f18

08006a7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a84:	f107 0308 	add.w	r3, r7, #8
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f000 f859 	bl	8006b40 <prvGetNextExpireTime>
 8006a8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	4619      	mov	r1, r3
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f000 f805 	bl	8006aa4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006a9a:	f000 f8d7 	bl	8006c4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a9e:	bf00      	nop
 8006aa0:	e7f0      	b.n	8006a84 <prvTimerTask+0x8>
	...

08006aa4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006aae:	f7ff fa29 	bl	8005f04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ab2:	f107 0308 	add.w	r3, r7, #8
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f000 f866 	bl	8006b88 <prvSampleTimeNow>
 8006abc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d130      	bne.n	8006b26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10a      	bne.n	8006ae0 <prvProcessTimerOrBlockTask+0x3c>
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d806      	bhi.n	8006ae0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006ad2:	f7ff fa25 	bl	8005f20 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006ad6:	68f9      	ldr	r1, [r7, #12]
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f7ff ff81 	bl	80069e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006ade:	e024      	b.n	8006b2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d008      	beq.n	8006af8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006ae6:	4b13      	ldr	r3, [pc, #76]	@ (8006b34 <prvProcessTimerOrBlockTask+0x90>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d101      	bne.n	8006af4 <prvProcessTimerOrBlockTask+0x50>
 8006af0:	2301      	movs	r3, #1
 8006af2:	e000      	b.n	8006af6 <prvProcessTimerOrBlockTask+0x52>
 8006af4:	2300      	movs	r3, #0
 8006af6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006af8:	4b0f      	ldr	r3, [pc, #60]	@ (8006b38 <prvProcessTimerOrBlockTask+0x94>)
 8006afa:	6818      	ldr	r0, [r3, #0]
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	4619      	mov	r1, r3
 8006b06:	f7fe ff65 	bl	80059d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006b0a:	f7ff fa09 	bl	8005f20 <xTaskResumeAll>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10a      	bne.n	8006b2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006b14:	4b09      	ldr	r3, [pc, #36]	@ (8006b3c <prvProcessTimerOrBlockTask+0x98>)
 8006b16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b1a:	601a      	str	r2, [r3, #0]
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	f3bf 8f6f 	isb	sy
}
 8006b24:	e001      	b.n	8006b2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006b26:	f7ff f9fb 	bl	8005f20 <xTaskResumeAll>
}
 8006b2a:	bf00      	nop
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	20000f1c 	.word	0x20000f1c
 8006b38:	20000f20 	.word	0x20000f20
 8006b3c:	e000ed04 	.word	0xe000ed04

08006b40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b48:	4b0e      	ldr	r3, [pc, #56]	@ (8006b84 <prvGetNextExpireTime+0x44>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <prvGetNextExpireTime+0x16>
 8006b52:	2201      	movs	r2, #1
 8006b54:	e000      	b.n	8006b58 <prvGetNextExpireTime+0x18>
 8006b56:	2200      	movs	r2, #0
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d105      	bne.n	8006b70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b64:	4b07      	ldr	r3, [pc, #28]	@ (8006b84 <prvGetNextExpireTime+0x44>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	60fb      	str	r3, [r7, #12]
 8006b6e:	e001      	b.n	8006b74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006b74:	68fb      	ldr	r3, [r7, #12]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	20000f18 	.word	0x20000f18

08006b88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006b90:	f7ff fa64 	bl	800605c <xTaskGetTickCount>
 8006b94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006b96:	4b0b      	ldr	r3, [pc, #44]	@ (8006bc4 <prvSampleTimeNow+0x3c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d205      	bcs.n	8006bac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006ba0:	f000 f93a 	bl	8006e18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	601a      	str	r2, [r3, #0]
 8006baa:	e002      	b.n	8006bb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006bb2:	4a04      	ldr	r2, [pc, #16]	@ (8006bc4 <prvSampleTimeNow+0x3c>)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	20000f28 	.word	0x20000f28

08006bc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
 8006bd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d812      	bhi.n	8006c14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	1ad2      	subs	r2, r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d302      	bcc.n	8006c02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	617b      	str	r3, [r7, #20]
 8006c00:	e01b      	b.n	8006c3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006c02:	4b10      	ldr	r3, [pc, #64]	@ (8006c44 <prvInsertTimerInActiveList+0x7c>)
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	3304      	adds	r3, #4
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	4610      	mov	r0, r2
 8006c0e:	f7fe f97c 	bl	8004f0a <vListInsert>
 8006c12:	e012      	b.n	8006c3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d206      	bcs.n	8006c2a <prvInsertTimerInActiveList+0x62>
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d302      	bcc.n	8006c2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006c24:	2301      	movs	r3, #1
 8006c26:	617b      	str	r3, [r7, #20]
 8006c28:	e007      	b.n	8006c3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c2a:	4b07      	ldr	r3, [pc, #28]	@ (8006c48 <prvInsertTimerInActiveList+0x80>)
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	3304      	adds	r3, #4
 8006c32:	4619      	mov	r1, r3
 8006c34:	4610      	mov	r0, r2
 8006c36:	f7fe f968 	bl	8004f0a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006c3a:	697b      	ldr	r3, [r7, #20]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3718      	adds	r7, #24
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	20000f1c 	.word	0x20000f1c
 8006c48:	20000f18 	.word	0x20000f18

08006c4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b08e      	sub	sp, #56	@ 0x38
 8006c50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c52:	e0ce      	b.n	8006df2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	da19      	bge.n	8006c8e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006c5a:	1d3b      	adds	r3, r7, #4
 8006c5c:	3304      	adds	r3, #4
 8006c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10b      	bne.n	8006c7e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c6a:	f383 8811 	msr	BASEPRI, r3
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	61fb      	str	r3, [r7, #28]
}
 8006c78:	bf00      	nop
 8006c7a:	bf00      	nop
 8006c7c:	e7fd      	b.n	8006c7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c84:	6850      	ldr	r0, [r2, #4]
 8006c86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c88:	6892      	ldr	r2, [r2, #8]
 8006c8a:	4611      	mov	r1, r2
 8006c8c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f2c0 80ae 	blt.w	8006df2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d004      	beq.n	8006cac <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7fe f968 	bl	8004f7c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006cac:	463b      	mov	r3, r7
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7ff ff6a 	bl	8006b88 <prvSampleTimeNow>
 8006cb4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2b09      	cmp	r3, #9
 8006cba:	f200 8097 	bhi.w	8006dec <prvProcessReceivedCommands+0x1a0>
 8006cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc4 <prvProcessReceivedCommands+0x78>)
 8006cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc4:	08006ced 	.word	0x08006ced
 8006cc8:	08006ced 	.word	0x08006ced
 8006ccc:	08006ced 	.word	0x08006ced
 8006cd0:	08006d63 	.word	0x08006d63
 8006cd4:	08006d77 	.word	0x08006d77
 8006cd8:	08006dc3 	.word	0x08006dc3
 8006cdc:	08006ced 	.word	0x08006ced
 8006ce0:	08006ced 	.word	0x08006ced
 8006ce4:	08006d63 	.word	0x08006d63
 8006ce8:	08006d77 	.word	0x08006d77
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cf2:	f043 0301 	orr.w	r3, r3, #1
 8006cf6:	b2da      	uxtb	r2, r3
 8006cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	18d1      	adds	r1, r2, r3
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d0c:	f7ff ff5c 	bl	8006bc8 <prvInsertTimerInActiveList>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d06c      	beq.n	8006df0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d24:	f003 0304 	and.w	r3, r3, #4
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d061      	beq.n	8006df0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	441a      	add	r2, r3
 8006d34:	2300      	movs	r3, #0
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	2300      	movs	r3, #0
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d3e:	f7ff fe01 	bl	8006944 <xTimerGenericCommand>
 8006d42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d152      	bne.n	8006df0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	61bb      	str	r3, [r7, #24]
}
 8006d5c:	bf00      	nop
 8006d5e:	bf00      	nop
 8006d60:	e7fd      	b.n	8006d5e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d68:	f023 0301 	bic.w	r3, r3, #1
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006d74:	e03d      	b.n	8006df2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d7c:	f043 0301 	orr.w	r3, r3, #1
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d84:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d8c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10b      	bne.n	8006dae <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d9a:	f383 8811 	msr	BASEPRI, r3
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	617b      	str	r3, [r7, #20]
}
 8006da8:	bf00      	nop
 8006daa:	bf00      	nop
 8006dac:	e7fd      	b.n	8006daa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db0:	699a      	ldr	r2, [r3, #24]
 8006db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db4:	18d1      	adds	r1, r2, r3
 8006db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006dbc:	f7ff ff04 	bl	8006bc8 <prvInsertTimerInActiveList>
					break;
 8006dc0:	e017      	b.n	8006df2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006dc8:	f003 0302 	and.w	r3, r3, #2
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d103      	bne.n	8006dd8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006dd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006dd2:	f000 fbe9 	bl	80075a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006dd6:	e00c      	b.n	8006df2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006dde:	f023 0301 	bic.w	r3, r3, #1
 8006de2:	b2da      	uxtb	r2, r3
 8006de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006dea:	e002      	b.n	8006df2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006dec:	bf00      	nop
 8006dee:	e000      	b.n	8006df2 <prvProcessReceivedCommands+0x1a6>
					break;
 8006df0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006df2:	4b08      	ldr	r3, [pc, #32]	@ (8006e14 <prvProcessReceivedCommands+0x1c8>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	1d39      	adds	r1, r7, #4
 8006df8:	2200      	movs	r2, #0
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7fe fbce 	bl	800559c <xQueueReceive>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f47f af26 	bne.w	8006c54 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006e08:	bf00      	nop
 8006e0a:	bf00      	nop
 8006e0c:	3730      	adds	r7, #48	@ 0x30
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	20000f20 	.word	0x20000f20

08006e18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b088      	sub	sp, #32
 8006e1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e1e:	e049      	b.n	8006eb4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e20:	4b2e      	ldr	r3, [pc, #184]	@ (8006edc <prvSwitchTimerLists+0xc4>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8006edc <prvSwitchTimerLists+0xc4>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	3304      	adds	r3, #4
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7fe f89f 	bl	8004f7c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e4c:	f003 0304 	and.w	r3, r3, #4
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d02f      	beq.n	8006eb4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	693a      	ldr	r2, [r7, #16]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d90e      	bls.n	8006e84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e72:	4b1a      	ldr	r3, [pc, #104]	@ (8006edc <prvSwitchTimerLists+0xc4>)
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	3304      	adds	r3, #4
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	4610      	mov	r0, r2
 8006e7e:	f7fe f844 	bl	8004f0a <vListInsert>
 8006e82:	e017      	b.n	8006eb4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e84:	2300      	movs	r3, #0
 8006e86:	9300      	str	r3, [sp, #0]
 8006e88:	2300      	movs	r3, #0
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f7ff fd58 	bl	8006944 <xTimerGenericCommand>
 8006e94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10b      	bne.n	8006eb4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	603b      	str	r3, [r7, #0]
}
 8006eae:	bf00      	nop
 8006eb0:	bf00      	nop
 8006eb2:	e7fd      	b.n	8006eb0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006eb4:	4b09      	ldr	r3, [pc, #36]	@ (8006edc <prvSwitchTimerLists+0xc4>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1b0      	bne.n	8006e20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006ebe:	4b07      	ldr	r3, [pc, #28]	@ (8006edc <prvSwitchTimerLists+0xc4>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006ec4:	4b06      	ldr	r3, [pc, #24]	@ (8006ee0 <prvSwitchTimerLists+0xc8>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a04      	ldr	r2, [pc, #16]	@ (8006edc <prvSwitchTimerLists+0xc4>)
 8006eca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006ecc:	4a04      	ldr	r2, [pc, #16]	@ (8006ee0 <prvSwitchTimerLists+0xc8>)
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	6013      	str	r3, [r2, #0]
}
 8006ed2:	bf00      	nop
 8006ed4:	3718      	adds	r7, #24
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	20000f18 	.word	0x20000f18
 8006ee0:	20000f1c 	.word	0x20000f1c

08006ee4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006eea:	f000 f96d 	bl	80071c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006eee:	4b15      	ldr	r3, [pc, #84]	@ (8006f44 <prvCheckForValidListAndQueue+0x60>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d120      	bne.n	8006f38 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006ef6:	4814      	ldr	r0, [pc, #80]	@ (8006f48 <prvCheckForValidListAndQueue+0x64>)
 8006ef8:	f7fd ffb6 	bl	8004e68 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006efc:	4813      	ldr	r0, [pc, #76]	@ (8006f4c <prvCheckForValidListAndQueue+0x68>)
 8006efe:	f7fd ffb3 	bl	8004e68 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006f02:	4b13      	ldr	r3, [pc, #76]	@ (8006f50 <prvCheckForValidListAndQueue+0x6c>)
 8006f04:	4a10      	ldr	r2, [pc, #64]	@ (8006f48 <prvCheckForValidListAndQueue+0x64>)
 8006f06:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006f08:	4b12      	ldr	r3, [pc, #72]	@ (8006f54 <prvCheckForValidListAndQueue+0x70>)
 8006f0a:	4a10      	ldr	r2, [pc, #64]	@ (8006f4c <prvCheckForValidListAndQueue+0x68>)
 8006f0c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006f0e:	2300      	movs	r3, #0
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	4b11      	ldr	r3, [pc, #68]	@ (8006f58 <prvCheckForValidListAndQueue+0x74>)
 8006f14:	4a11      	ldr	r2, [pc, #68]	@ (8006f5c <prvCheckForValidListAndQueue+0x78>)
 8006f16:	2110      	movs	r1, #16
 8006f18:	200a      	movs	r0, #10
 8006f1a:	f7fe f8c3 	bl	80050a4 <xQueueGenericCreateStatic>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	4a08      	ldr	r2, [pc, #32]	@ (8006f44 <prvCheckForValidListAndQueue+0x60>)
 8006f22:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006f24:	4b07      	ldr	r3, [pc, #28]	@ (8006f44 <prvCheckForValidListAndQueue+0x60>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d005      	beq.n	8006f38 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f2c:	4b05      	ldr	r3, [pc, #20]	@ (8006f44 <prvCheckForValidListAndQueue+0x60>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	490b      	ldr	r1, [pc, #44]	@ (8006f60 <prvCheckForValidListAndQueue+0x7c>)
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7fe fd24 	bl	8005980 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f38:	f000 f978 	bl	800722c <vPortExitCritical>
}
 8006f3c:	bf00      	nop
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	20000f20 	.word	0x20000f20
 8006f48:	20000ef0 	.word	0x20000ef0
 8006f4c:	20000f04 	.word	0x20000f04
 8006f50:	20000f18 	.word	0x20000f18
 8006f54:	20000f1c 	.word	0x20000f1c
 8006f58:	20000fcc 	.word	0x20000fcc
 8006f5c:	20000f2c 	.word	0x20000f2c
 8006f60:	08008adc 	.word	0x08008adc

08006f64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	3b04      	subs	r3, #4
 8006f74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006f7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	3b04      	subs	r3, #4
 8006f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	f023 0201 	bic.w	r2, r3, #1
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	3b04      	subs	r3, #4
 8006f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f94:	4a0c      	ldr	r2, [pc, #48]	@ (8006fc8 <pxPortInitialiseStack+0x64>)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	3b14      	subs	r3, #20
 8006f9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	3b04      	subs	r3, #4
 8006faa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f06f 0202 	mvn.w	r2, #2
 8006fb2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	3b20      	subs	r3, #32
 8006fb8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006fba:	68fb      	ldr	r3, [r7, #12]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	08006fcd 	.word	0x08006fcd

08006fcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006fd6:	4b13      	ldr	r3, [pc, #76]	@ (8007024 <prvTaskExitError+0x58>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006fde:	d00b      	beq.n	8006ff8 <prvTaskExitError+0x2c>
	__asm volatile
 8006fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe4:	f383 8811 	msr	BASEPRI, r3
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	60fb      	str	r3, [r7, #12]
}
 8006ff2:	bf00      	nop
 8006ff4:	bf00      	nop
 8006ff6:	e7fd      	b.n	8006ff4 <prvTaskExitError+0x28>
	__asm volatile
 8006ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffc:	f383 8811 	msr	BASEPRI, r3
 8007000:	f3bf 8f6f 	isb	sy
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	60bb      	str	r3, [r7, #8]
}
 800700a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800700c:	bf00      	nop
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d0fc      	beq.n	800700e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007014:	bf00      	nop
 8007016:	bf00      	nop
 8007018:	3714      	adds	r7, #20
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	20000020 	.word	0x20000020
	...

08007030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007030:	4b07      	ldr	r3, [pc, #28]	@ (8007050 <pxCurrentTCBConst2>)
 8007032:	6819      	ldr	r1, [r3, #0]
 8007034:	6808      	ldr	r0, [r1, #0]
 8007036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800703a:	f380 8809 	msr	PSP, r0
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f04f 0000 	mov.w	r0, #0
 8007046:	f380 8811 	msr	BASEPRI, r0
 800704a:	4770      	bx	lr
 800704c:	f3af 8000 	nop.w

08007050 <pxCurrentTCBConst2>:
 8007050:	200009f0 	.word	0x200009f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007054:	bf00      	nop
 8007056:	bf00      	nop

08007058 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007058:	4808      	ldr	r0, [pc, #32]	@ (800707c <prvPortStartFirstTask+0x24>)
 800705a:	6800      	ldr	r0, [r0, #0]
 800705c:	6800      	ldr	r0, [r0, #0]
 800705e:	f380 8808 	msr	MSP, r0
 8007062:	f04f 0000 	mov.w	r0, #0
 8007066:	f380 8814 	msr	CONTROL, r0
 800706a:	b662      	cpsie	i
 800706c:	b661      	cpsie	f
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	f3bf 8f6f 	isb	sy
 8007076:	df00      	svc	0
 8007078:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800707a:	bf00      	nop
 800707c:	e000ed08 	.word	0xe000ed08

08007080 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b086      	sub	sp, #24
 8007084:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007086:	4b47      	ldr	r3, [pc, #284]	@ (80071a4 <xPortStartScheduler+0x124>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a47      	ldr	r2, [pc, #284]	@ (80071a8 <xPortStartScheduler+0x128>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d10b      	bne.n	80070a8 <xPortStartScheduler+0x28>
	__asm volatile
 8007090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007094:	f383 8811 	msr	BASEPRI, r3
 8007098:	f3bf 8f6f 	isb	sy
 800709c:	f3bf 8f4f 	dsb	sy
 80070a0:	60fb      	str	r3, [r7, #12]
}
 80070a2:	bf00      	nop
 80070a4:	bf00      	nop
 80070a6:	e7fd      	b.n	80070a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80070a8:	4b3e      	ldr	r3, [pc, #248]	@ (80071a4 <xPortStartScheduler+0x124>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a3f      	ldr	r2, [pc, #252]	@ (80071ac <xPortStartScheduler+0x12c>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d10b      	bne.n	80070ca <xPortStartScheduler+0x4a>
	__asm volatile
 80070b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b6:	f383 8811 	msr	BASEPRI, r3
 80070ba:	f3bf 8f6f 	isb	sy
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	613b      	str	r3, [r7, #16]
}
 80070c4:	bf00      	nop
 80070c6:	bf00      	nop
 80070c8:	e7fd      	b.n	80070c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80070ca:	4b39      	ldr	r3, [pc, #228]	@ (80071b0 <xPortStartScheduler+0x130>)
 80070cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	22ff      	movs	r2, #255	@ 0xff
 80070da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80070e4:	78fb      	ldrb	r3, [r7, #3]
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	4b31      	ldr	r3, [pc, #196]	@ (80071b4 <xPortStartScheduler+0x134>)
 80070f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80070f2:	4b31      	ldr	r3, [pc, #196]	@ (80071b8 <xPortStartScheduler+0x138>)
 80070f4:	2207      	movs	r2, #7
 80070f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070f8:	e009      	b.n	800710e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80070fa:	4b2f      	ldr	r3, [pc, #188]	@ (80071b8 <xPortStartScheduler+0x138>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	3b01      	subs	r3, #1
 8007100:	4a2d      	ldr	r2, [pc, #180]	@ (80071b8 <xPortStartScheduler+0x138>)
 8007102:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007104:	78fb      	ldrb	r3, [r7, #3]
 8007106:	b2db      	uxtb	r3, r3
 8007108:	005b      	lsls	r3, r3, #1
 800710a:	b2db      	uxtb	r3, r3
 800710c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800710e:	78fb      	ldrb	r3, [r7, #3]
 8007110:	b2db      	uxtb	r3, r3
 8007112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007116:	2b80      	cmp	r3, #128	@ 0x80
 8007118:	d0ef      	beq.n	80070fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800711a:	4b27      	ldr	r3, [pc, #156]	@ (80071b8 <xPortStartScheduler+0x138>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f1c3 0307 	rsb	r3, r3, #7
 8007122:	2b04      	cmp	r3, #4
 8007124:	d00b      	beq.n	800713e <xPortStartScheduler+0xbe>
	__asm volatile
 8007126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800712a:	f383 8811 	msr	BASEPRI, r3
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	f3bf 8f4f 	dsb	sy
 8007136:	60bb      	str	r3, [r7, #8]
}
 8007138:	bf00      	nop
 800713a:	bf00      	nop
 800713c:	e7fd      	b.n	800713a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800713e:	4b1e      	ldr	r3, [pc, #120]	@ (80071b8 <xPortStartScheduler+0x138>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	021b      	lsls	r3, r3, #8
 8007144:	4a1c      	ldr	r2, [pc, #112]	@ (80071b8 <xPortStartScheduler+0x138>)
 8007146:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007148:	4b1b      	ldr	r3, [pc, #108]	@ (80071b8 <xPortStartScheduler+0x138>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007150:	4a19      	ldr	r2, [pc, #100]	@ (80071b8 <xPortStartScheduler+0x138>)
 8007152:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	b2da      	uxtb	r2, r3
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800715c:	4b17      	ldr	r3, [pc, #92]	@ (80071bc <xPortStartScheduler+0x13c>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a16      	ldr	r2, [pc, #88]	@ (80071bc <xPortStartScheduler+0x13c>)
 8007162:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007166:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007168:	4b14      	ldr	r3, [pc, #80]	@ (80071bc <xPortStartScheduler+0x13c>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a13      	ldr	r2, [pc, #76]	@ (80071bc <xPortStartScheduler+0x13c>)
 800716e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007172:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007174:	f000 f8da 	bl	800732c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007178:	4b11      	ldr	r3, [pc, #68]	@ (80071c0 <xPortStartScheduler+0x140>)
 800717a:	2200      	movs	r2, #0
 800717c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800717e:	f000 f8f9 	bl	8007374 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007182:	4b10      	ldr	r3, [pc, #64]	@ (80071c4 <xPortStartScheduler+0x144>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a0f      	ldr	r2, [pc, #60]	@ (80071c4 <xPortStartScheduler+0x144>)
 8007188:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800718c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800718e:	f7ff ff63 	bl	8007058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007192:	f7ff f82d 	bl	80061f0 <vTaskSwitchContext>
	prvTaskExitError();
 8007196:	f7ff ff19 	bl	8006fcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3718      	adds	r7, #24
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	e000ed00 	.word	0xe000ed00
 80071a8:	410fc271 	.word	0x410fc271
 80071ac:	410fc270 	.word	0x410fc270
 80071b0:	e000e400 	.word	0xe000e400
 80071b4:	2000101c 	.word	0x2000101c
 80071b8:	20001020 	.word	0x20001020
 80071bc:	e000ed20 	.word	0xe000ed20
 80071c0:	20000020 	.word	0x20000020
 80071c4:	e000ef34 	.word	0xe000ef34

080071c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	607b      	str	r3, [r7, #4]
}
 80071e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80071e2:	4b10      	ldr	r3, [pc, #64]	@ (8007224 <vPortEnterCritical+0x5c>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	3301      	adds	r3, #1
 80071e8:	4a0e      	ldr	r2, [pc, #56]	@ (8007224 <vPortEnterCritical+0x5c>)
 80071ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80071ec:	4b0d      	ldr	r3, [pc, #52]	@ (8007224 <vPortEnterCritical+0x5c>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d110      	bne.n	8007216 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80071f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007228 <vPortEnterCritical+0x60>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00b      	beq.n	8007216 <vPortEnterCritical+0x4e>
	__asm volatile
 80071fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007202:	f383 8811 	msr	BASEPRI, r3
 8007206:	f3bf 8f6f 	isb	sy
 800720a:	f3bf 8f4f 	dsb	sy
 800720e:	603b      	str	r3, [r7, #0]
}
 8007210:	bf00      	nop
 8007212:	bf00      	nop
 8007214:	e7fd      	b.n	8007212 <vPortEnterCritical+0x4a>
	}
}
 8007216:	bf00      	nop
 8007218:	370c      	adds	r7, #12
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	20000020 	.word	0x20000020
 8007228:	e000ed04 	.word	0xe000ed04

0800722c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007232:	4b12      	ldr	r3, [pc, #72]	@ (800727c <vPortExitCritical+0x50>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d10b      	bne.n	8007252 <vPortExitCritical+0x26>
	__asm volatile
 800723a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800723e:	f383 8811 	msr	BASEPRI, r3
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	607b      	str	r3, [r7, #4]
}
 800724c:	bf00      	nop
 800724e:	bf00      	nop
 8007250:	e7fd      	b.n	800724e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007252:	4b0a      	ldr	r3, [pc, #40]	@ (800727c <vPortExitCritical+0x50>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	3b01      	subs	r3, #1
 8007258:	4a08      	ldr	r2, [pc, #32]	@ (800727c <vPortExitCritical+0x50>)
 800725a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800725c:	4b07      	ldr	r3, [pc, #28]	@ (800727c <vPortExitCritical+0x50>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d105      	bne.n	8007270 <vPortExitCritical+0x44>
 8007264:	2300      	movs	r3, #0
 8007266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	f383 8811 	msr	BASEPRI, r3
}
 800726e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr
 800727c:	20000020 	.word	0x20000020

08007280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007280:	f3ef 8009 	mrs	r0, PSP
 8007284:	f3bf 8f6f 	isb	sy
 8007288:	4b15      	ldr	r3, [pc, #84]	@ (80072e0 <pxCurrentTCBConst>)
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	f01e 0f10 	tst.w	lr, #16
 8007290:	bf08      	it	eq
 8007292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800729a:	6010      	str	r0, [r2, #0]
 800729c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80072a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80072a4:	f380 8811 	msr	BASEPRI, r0
 80072a8:	f3bf 8f4f 	dsb	sy
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f7fe ff9e 	bl	80061f0 <vTaskSwitchContext>
 80072b4:	f04f 0000 	mov.w	r0, #0
 80072b8:	f380 8811 	msr	BASEPRI, r0
 80072bc:	bc09      	pop	{r0, r3}
 80072be:	6819      	ldr	r1, [r3, #0]
 80072c0:	6808      	ldr	r0, [r1, #0]
 80072c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c6:	f01e 0f10 	tst.w	lr, #16
 80072ca:	bf08      	it	eq
 80072cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80072d0:	f380 8809 	msr	PSP, r0
 80072d4:	f3bf 8f6f 	isb	sy
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	f3af 8000 	nop.w

080072e0 <pxCurrentTCBConst>:
 80072e0:	200009f0 	.word	0x200009f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80072e4:	bf00      	nop
 80072e6:	bf00      	nop

080072e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
	__asm volatile
 80072ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f2:	f383 8811 	msr	BASEPRI, r3
 80072f6:	f3bf 8f6f 	isb	sy
 80072fa:	f3bf 8f4f 	dsb	sy
 80072fe:	607b      	str	r3, [r7, #4]
}
 8007300:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007302:	f7fe febb 	bl	800607c <xTaskIncrementTick>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d003      	beq.n	8007314 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800730c:	4b06      	ldr	r3, [pc, #24]	@ (8007328 <xPortSysTickHandler+0x40>)
 800730e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007312:	601a      	str	r2, [r3, #0]
 8007314:	2300      	movs	r3, #0
 8007316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	f383 8811 	msr	BASEPRI, r3
}
 800731e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007320:	bf00      	nop
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	e000ed04 	.word	0xe000ed04

0800732c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800732c:	b480      	push	{r7}
 800732e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007330:	4b0b      	ldr	r3, [pc, #44]	@ (8007360 <vPortSetupTimerInterrupt+0x34>)
 8007332:	2200      	movs	r2, #0
 8007334:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007336:	4b0b      	ldr	r3, [pc, #44]	@ (8007364 <vPortSetupTimerInterrupt+0x38>)
 8007338:	2200      	movs	r2, #0
 800733a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800733c:	4b0a      	ldr	r3, [pc, #40]	@ (8007368 <vPortSetupTimerInterrupt+0x3c>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a0a      	ldr	r2, [pc, #40]	@ (800736c <vPortSetupTimerInterrupt+0x40>)
 8007342:	fba2 2303 	umull	r2, r3, r2, r3
 8007346:	099b      	lsrs	r3, r3, #6
 8007348:	4a09      	ldr	r2, [pc, #36]	@ (8007370 <vPortSetupTimerInterrupt+0x44>)
 800734a:	3b01      	subs	r3, #1
 800734c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800734e:	4b04      	ldr	r3, [pc, #16]	@ (8007360 <vPortSetupTimerInterrupt+0x34>)
 8007350:	2207      	movs	r2, #7
 8007352:	601a      	str	r2, [r3, #0]
}
 8007354:	bf00      	nop
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	e000e010 	.word	0xe000e010
 8007364:	e000e018 	.word	0xe000e018
 8007368:	20000008 	.word	0x20000008
 800736c:	10624dd3 	.word	0x10624dd3
 8007370:	e000e014 	.word	0xe000e014

08007374 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007374:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007384 <vPortEnableVFP+0x10>
 8007378:	6801      	ldr	r1, [r0, #0]
 800737a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800737e:	6001      	str	r1, [r0, #0]
 8007380:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007382:	bf00      	nop
 8007384:	e000ed88 	.word	0xe000ed88

08007388 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800738e:	f3ef 8305 	mrs	r3, IPSR
 8007392:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2b0f      	cmp	r3, #15
 8007398:	d915      	bls.n	80073c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800739a:	4a18      	ldr	r2, [pc, #96]	@ (80073fc <vPortValidateInterruptPriority+0x74>)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	4413      	add	r3, r2
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80073a4:	4b16      	ldr	r3, [pc, #88]	@ (8007400 <vPortValidateInterruptPriority+0x78>)
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	7afa      	ldrb	r2, [r7, #11]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d20b      	bcs.n	80073c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80073ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b2:	f383 8811 	msr	BASEPRI, r3
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	607b      	str	r3, [r7, #4]
}
 80073c0:	bf00      	nop
 80073c2:	bf00      	nop
 80073c4:	e7fd      	b.n	80073c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80073c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007404 <vPortValidateInterruptPriority+0x7c>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80073ce:	4b0e      	ldr	r3, [pc, #56]	@ (8007408 <vPortValidateInterruptPriority+0x80>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d90b      	bls.n	80073ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80073d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073da:	f383 8811 	msr	BASEPRI, r3
 80073de:	f3bf 8f6f 	isb	sy
 80073e2:	f3bf 8f4f 	dsb	sy
 80073e6:	603b      	str	r3, [r7, #0]
}
 80073e8:	bf00      	nop
 80073ea:	bf00      	nop
 80073ec:	e7fd      	b.n	80073ea <vPortValidateInterruptPriority+0x62>
	}
 80073ee:	bf00      	nop
 80073f0:	3714      	adds	r7, #20
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	e000e3f0 	.word	0xe000e3f0
 8007400:	2000101c 	.word	0x2000101c
 8007404:	e000ed0c 	.word	0xe000ed0c
 8007408:	20001020 	.word	0x20001020

0800740c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b08a      	sub	sp, #40	@ 0x28
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007414:	2300      	movs	r3, #0
 8007416:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007418:	f7fe fd74 	bl	8005f04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800741c:	4b5c      	ldr	r3, [pc, #368]	@ (8007590 <pvPortMalloc+0x184>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d101      	bne.n	8007428 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007424:	f000 f924 	bl	8007670 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007428:	4b5a      	ldr	r3, [pc, #360]	@ (8007594 <pvPortMalloc+0x188>)
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4013      	ands	r3, r2
 8007430:	2b00      	cmp	r3, #0
 8007432:	f040 8095 	bne.w	8007560 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d01e      	beq.n	800747a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800743c:	2208      	movs	r2, #8
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4413      	add	r3, r2
 8007442:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f003 0307 	and.w	r3, r3, #7
 800744a:	2b00      	cmp	r3, #0
 800744c:	d015      	beq.n	800747a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f023 0307 	bic.w	r3, r3, #7
 8007454:	3308      	adds	r3, #8
 8007456:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f003 0307 	and.w	r3, r3, #7
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00b      	beq.n	800747a <pvPortMalloc+0x6e>
	__asm volatile
 8007462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007466:	f383 8811 	msr	BASEPRI, r3
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	617b      	str	r3, [r7, #20]
}
 8007474:	bf00      	nop
 8007476:	bf00      	nop
 8007478:	e7fd      	b.n	8007476 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d06f      	beq.n	8007560 <pvPortMalloc+0x154>
 8007480:	4b45      	ldr	r3, [pc, #276]	@ (8007598 <pvPortMalloc+0x18c>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	429a      	cmp	r2, r3
 8007488:	d86a      	bhi.n	8007560 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800748a:	4b44      	ldr	r3, [pc, #272]	@ (800759c <pvPortMalloc+0x190>)
 800748c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800748e:	4b43      	ldr	r3, [pc, #268]	@ (800759c <pvPortMalloc+0x190>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007494:	e004      	b.n	80074a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007498:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800749a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d903      	bls.n	80074b2 <pvPortMalloc+0xa6>
 80074aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1f1      	bne.n	8007496 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80074b2:	4b37      	ldr	r3, [pc, #220]	@ (8007590 <pvPortMalloc+0x184>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d051      	beq.n	8007560 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80074bc:	6a3b      	ldr	r3, [r7, #32]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2208      	movs	r2, #8
 80074c2:	4413      	add	r3, r2
 80074c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80074c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	6a3b      	ldr	r3, [r7, #32]
 80074cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80074ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d0:	685a      	ldr	r2, [r3, #4]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	1ad2      	subs	r2, r2, r3
 80074d6:	2308      	movs	r3, #8
 80074d8:	005b      	lsls	r3, r3, #1
 80074da:	429a      	cmp	r2, r3
 80074dc:	d920      	bls.n	8007520 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80074de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4413      	add	r3, r2
 80074e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	f003 0307 	and.w	r3, r3, #7
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00b      	beq.n	8007508 <pvPortMalloc+0xfc>
	__asm volatile
 80074f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	613b      	str	r3, [r7, #16]
}
 8007502:	bf00      	nop
 8007504:	bf00      	nop
 8007506:	e7fd      	b.n	8007504 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800750a:	685a      	ldr	r2, [r3, #4]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	1ad2      	subs	r2, r2, r3
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800751a:	69b8      	ldr	r0, [r7, #24]
 800751c:	f000 f90a 	bl	8007734 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007520:	4b1d      	ldr	r3, [pc, #116]	@ (8007598 <pvPortMalloc+0x18c>)
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	4a1b      	ldr	r2, [pc, #108]	@ (8007598 <pvPortMalloc+0x18c>)
 800752c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800752e:	4b1a      	ldr	r3, [pc, #104]	@ (8007598 <pvPortMalloc+0x18c>)
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	4b1b      	ldr	r3, [pc, #108]	@ (80075a0 <pvPortMalloc+0x194>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	429a      	cmp	r2, r3
 8007538:	d203      	bcs.n	8007542 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800753a:	4b17      	ldr	r3, [pc, #92]	@ (8007598 <pvPortMalloc+0x18c>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a18      	ldr	r2, [pc, #96]	@ (80075a0 <pvPortMalloc+0x194>)
 8007540:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	4b13      	ldr	r3, [pc, #76]	@ (8007594 <pvPortMalloc+0x188>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	431a      	orrs	r2, r3
 800754c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007552:	2200      	movs	r2, #0
 8007554:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007556:	4b13      	ldr	r3, [pc, #76]	@ (80075a4 <pvPortMalloc+0x198>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	3301      	adds	r3, #1
 800755c:	4a11      	ldr	r2, [pc, #68]	@ (80075a4 <pvPortMalloc+0x198>)
 800755e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007560:	f7fe fcde 	bl	8005f20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	f003 0307 	and.w	r3, r3, #7
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00b      	beq.n	8007586 <pvPortMalloc+0x17a>
	__asm volatile
 800756e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	60fb      	str	r3, [r7, #12]
}
 8007580:	bf00      	nop
 8007582:	bf00      	nop
 8007584:	e7fd      	b.n	8007582 <pvPortMalloc+0x176>
	return pvReturn;
 8007586:	69fb      	ldr	r3, [r7, #28]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3728      	adds	r7, #40	@ 0x28
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	20001c2c 	.word	0x20001c2c
 8007594:	20001c40 	.word	0x20001c40
 8007598:	20001c30 	.word	0x20001c30
 800759c:	20001c24 	.word	0x20001c24
 80075a0:	20001c34 	.word	0x20001c34
 80075a4:	20001c38 	.word	0x20001c38

080075a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d04f      	beq.n	800765a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80075ba:	2308      	movs	r3, #8
 80075bc:	425b      	negs	r3, r3
 80075be:	697a      	ldr	r2, [r7, #20]
 80075c0:	4413      	add	r3, r2
 80075c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	685a      	ldr	r2, [r3, #4]
 80075cc:	4b25      	ldr	r3, [pc, #148]	@ (8007664 <vPortFree+0xbc>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4013      	ands	r3, r2
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10b      	bne.n	80075ee <vPortFree+0x46>
	__asm volatile
 80075d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075da:	f383 8811 	msr	BASEPRI, r3
 80075de:	f3bf 8f6f 	isb	sy
 80075e2:	f3bf 8f4f 	dsb	sy
 80075e6:	60fb      	str	r3, [r7, #12]
}
 80075e8:	bf00      	nop
 80075ea:	bf00      	nop
 80075ec:	e7fd      	b.n	80075ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00b      	beq.n	800760e <vPortFree+0x66>
	__asm volatile
 80075f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075fa:	f383 8811 	msr	BASEPRI, r3
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	f3bf 8f4f 	dsb	sy
 8007606:	60bb      	str	r3, [r7, #8]
}
 8007608:	bf00      	nop
 800760a:	bf00      	nop
 800760c:	e7fd      	b.n	800760a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	685a      	ldr	r2, [r3, #4]
 8007612:	4b14      	ldr	r3, [pc, #80]	@ (8007664 <vPortFree+0xbc>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4013      	ands	r3, r2
 8007618:	2b00      	cmp	r3, #0
 800761a:	d01e      	beq.n	800765a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d11a      	bne.n	800765a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	685a      	ldr	r2, [r3, #4]
 8007628:	4b0e      	ldr	r3, [pc, #56]	@ (8007664 <vPortFree+0xbc>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	43db      	mvns	r3, r3
 800762e:	401a      	ands	r2, r3
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007634:	f7fe fc66 	bl	8005f04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	685a      	ldr	r2, [r3, #4]
 800763c:	4b0a      	ldr	r3, [pc, #40]	@ (8007668 <vPortFree+0xc0>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4413      	add	r3, r2
 8007642:	4a09      	ldr	r2, [pc, #36]	@ (8007668 <vPortFree+0xc0>)
 8007644:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007646:	6938      	ldr	r0, [r7, #16]
 8007648:	f000 f874 	bl	8007734 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800764c:	4b07      	ldr	r3, [pc, #28]	@ (800766c <vPortFree+0xc4>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	3301      	adds	r3, #1
 8007652:	4a06      	ldr	r2, [pc, #24]	@ (800766c <vPortFree+0xc4>)
 8007654:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007656:	f7fe fc63 	bl	8005f20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800765a:	bf00      	nop
 800765c:	3718      	adds	r7, #24
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	20001c40 	.word	0x20001c40
 8007668:	20001c30 	.word	0x20001c30
 800766c:	20001c3c 	.word	0x20001c3c

08007670 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007676:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800767a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800767c:	4b27      	ldr	r3, [pc, #156]	@ (800771c <prvHeapInit+0xac>)
 800767e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f003 0307 	and.w	r3, r3, #7
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00c      	beq.n	80076a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	3307      	adds	r3, #7
 800768e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f023 0307 	bic.w	r3, r3, #7
 8007696:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	4a1f      	ldr	r2, [pc, #124]	@ (800771c <prvHeapInit+0xac>)
 80076a0:	4413      	add	r3, r2
 80076a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80076a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007720 <prvHeapInit+0xb0>)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80076ae:	4b1c      	ldr	r3, [pc, #112]	@ (8007720 <prvHeapInit+0xb0>)
 80076b0:	2200      	movs	r2, #0
 80076b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	4413      	add	r3, r2
 80076ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80076bc:	2208      	movs	r2, #8
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	1a9b      	subs	r3, r3, r2
 80076c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f023 0307 	bic.w	r3, r3, #7
 80076ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4a15      	ldr	r2, [pc, #84]	@ (8007724 <prvHeapInit+0xb4>)
 80076d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80076d2:	4b14      	ldr	r3, [pc, #80]	@ (8007724 <prvHeapInit+0xb4>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2200      	movs	r2, #0
 80076d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80076da:	4b12      	ldr	r3, [pc, #72]	@ (8007724 <prvHeapInit+0xb4>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2200      	movs	r2, #0
 80076e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	1ad2      	subs	r2, r2, r3
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007724 <prvHeapInit+0xb4>)
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	4a0a      	ldr	r2, [pc, #40]	@ (8007728 <prvHeapInit+0xb8>)
 80076fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	4a09      	ldr	r2, [pc, #36]	@ (800772c <prvHeapInit+0xbc>)
 8007706:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007708:	4b09      	ldr	r3, [pc, #36]	@ (8007730 <prvHeapInit+0xc0>)
 800770a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800770e:	601a      	str	r2, [r3, #0]
}
 8007710:	bf00      	nop
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	20001024 	.word	0x20001024
 8007720:	20001c24 	.word	0x20001c24
 8007724:	20001c2c 	.word	0x20001c2c
 8007728:	20001c34 	.word	0x20001c34
 800772c:	20001c30 	.word	0x20001c30
 8007730:	20001c40 	.word	0x20001c40

08007734 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800773c:	4b28      	ldr	r3, [pc, #160]	@ (80077e0 <prvInsertBlockIntoFreeList+0xac>)
 800773e:	60fb      	str	r3, [r7, #12]
 8007740:	e002      	b.n	8007748 <prvInsertBlockIntoFreeList+0x14>
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	60fb      	str	r3, [r7, #12]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	429a      	cmp	r2, r3
 8007750:	d8f7      	bhi.n	8007742 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	4413      	add	r3, r2
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	429a      	cmp	r2, r3
 8007762:	d108      	bne.n	8007776 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	685a      	ldr	r2, [r3, #4]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	441a      	add	r2, r3
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	441a      	add	r2, r3
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	429a      	cmp	r2, r3
 8007788:	d118      	bne.n	80077bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	4b15      	ldr	r3, [pc, #84]	@ (80077e4 <prvInsertBlockIntoFreeList+0xb0>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	429a      	cmp	r2, r3
 8007794:	d00d      	beq.n	80077b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	685a      	ldr	r2, [r3, #4]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	441a      	add	r2, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	601a      	str	r2, [r3, #0]
 80077b0:	e008      	b.n	80077c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80077b2:	4b0c      	ldr	r3, [pc, #48]	@ (80077e4 <prvInsertBlockIntoFreeList+0xb0>)
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	601a      	str	r2, [r3, #0]
 80077ba:	e003      	b.n	80077c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d002      	beq.n	80077d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077d2:	bf00      	nop
 80077d4:	3714      	adds	r7, #20
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	20001c24 	.word	0x20001c24
 80077e4:	20001c2c 	.word	0x20001c2c

080077e8 <std>:
 80077e8:	2300      	movs	r3, #0
 80077ea:	b510      	push	{r4, lr}
 80077ec:	4604      	mov	r4, r0
 80077ee:	e9c0 3300 	strd	r3, r3, [r0]
 80077f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077f6:	6083      	str	r3, [r0, #8]
 80077f8:	8181      	strh	r1, [r0, #12]
 80077fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80077fc:	81c2      	strh	r2, [r0, #14]
 80077fe:	6183      	str	r3, [r0, #24]
 8007800:	4619      	mov	r1, r3
 8007802:	2208      	movs	r2, #8
 8007804:	305c      	adds	r0, #92	@ 0x5c
 8007806:	f000 fa01 	bl	8007c0c <memset>
 800780a:	4b0d      	ldr	r3, [pc, #52]	@ (8007840 <std+0x58>)
 800780c:	6263      	str	r3, [r4, #36]	@ 0x24
 800780e:	4b0d      	ldr	r3, [pc, #52]	@ (8007844 <std+0x5c>)
 8007810:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007812:	4b0d      	ldr	r3, [pc, #52]	@ (8007848 <std+0x60>)
 8007814:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007816:	4b0d      	ldr	r3, [pc, #52]	@ (800784c <std+0x64>)
 8007818:	6323      	str	r3, [r4, #48]	@ 0x30
 800781a:	4b0d      	ldr	r3, [pc, #52]	@ (8007850 <std+0x68>)
 800781c:	6224      	str	r4, [r4, #32]
 800781e:	429c      	cmp	r4, r3
 8007820:	d006      	beq.n	8007830 <std+0x48>
 8007822:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007826:	4294      	cmp	r4, r2
 8007828:	d002      	beq.n	8007830 <std+0x48>
 800782a:	33d0      	adds	r3, #208	@ 0xd0
 800782c:	429c      	cmp	r4, r3
 800782e:	d105      	bne.n	800783c <std+0x54>
 8007830:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007838:	f000 babe 	b.w	8007db8 <__retarget_lock_init_recursive>
 800783c:	bd10      	pop	{r4, pc}
 800783e:	bf00      	nop
 8007840:	08007a5d 	.word	0x08007a5d
 8007844:	08007a7f 	.word	0x08007a7f
 8007848:	08007ab7 	.word	0x08007ab7
 800784c:	08007adb 	.word	0x08007adb
 8007850:	20001c44 	.word	0x20001c44

08007854 <stdio_exit_handler>:
 8007854:	4a02      	ldr	r2, [pc, #8]	@ (8007860 <stdio_exit_handler+0xc>)
 8007856:	4903      	ldr	r1, [pc, #12]	@ (8007864 <stdio_exit_handler+0x10>)
 8007858:	4803      	ldr	r0, [pc, #12]	@ (8007868 <stdio_exit_handler+0x14>)
 800785a:	f000 b869 	b.w	8007930 <_fwalk_sglue>
 800785e:	bf00      	nop
 8007860:	20000024 	.word	0x20000024
 8007864:	08008671 	.word	0x08008671
 8007868:	20000034 	.word	0x20000034

0800786c <cleanup_stdio>:
 800786c:	6841      	ldr	r1, [r0, #4]
 800786e:	4b0c      	ldr	r3, [pc, #48]	@ (80078a0 <cleanup_stdio+0x34>)
 8007870:	4299      	cmp	r1, r3
 8007872:	b510      	push	{r4, lr}
 8007874:	4604      	mov	r4, r0
 8007876:	d001      	beq.n	800787c <cleanup_stdio+0x10>
 8007878:	f000 fefa 	bl	8008670 <_fflush_r>
 800787c:	68a1      	ldr	r1, [r4, #8]
 800787e:	4b09      	ldr	r3, [pc, #36]	@ (80078a4 <cleanup_stdio+0x38>)
 8007880:	4299      	cmp	r1, r3
 8007882:	d002      	beq.n	800788a <cleanup_stdio+0x1e>
 8007884:	4620      	mov	r0, r4
 8007886:	f000 fef3 	bl	8008670 <_fflush_r>
 800788a:	68e1      	ldr	r1, [r4, #12]
 800788c:	4b06      	ldr	r3, [pc, #24]	@ (80078a8 <cleanup_stdio+0x3c>)
 800788e:	4299      	cmp	r1, r3
 8007890:	d004      	beq.n	800789c <cleanup_stdio+0x30>
 8007892:	4620      	mov	r0, r4
 8007894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007898:	f000 beea 	b.w	8008670 <_fflush_r>
 800789c:	bd10      	pop	{r4, pc}
 800789e:	bf00      	nop
 80078a0:	20001c44 	.word	0x20001c44
 80078a4:	20001cac 	.word	0x20001cac
 80078a8:	20001d14 	.word	0x20001d14

080078ac <global_stdio_init.part.0>:
 80078ac:	b510      	push	{r4, lr}
 80078ae:	4b0b      	ldr	r3, [pc, #44]	@ (80078dc <global_stdio_init.part.0+0x30>)
 80078b0:	4c0b      	ldr	r4, [pc, #44]	@ (80078e0 <global_stdio_init.part.0+0x34>)
 80078b2:	4a0c      	ldr	r2, [pc, #48]	@ (80078e4 <global_stdio_init.part.0+0x38>)
 80078b4:	601a      	str	r2, [r3, #0]
 80078b6:	4620      	mov	r0, r4
 80078b8:	2200      	movs	r2, #0
 80078ba:	2104      	movs	r1, #4
 80078bc:	f7ff ff94 	bl	80077e8 <std>
 80078c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80078c4:	2201      	movs	r2, #1
 80078c6:	2109      	movs	r1, #9
 80078c8:	f7ff ff8e 	bl	80077e8 <std>
 80078cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80078d0:	2202      	movs	r2, #2
 80078d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078d6:	2112      	movs	r1, #18
 80078d8:	f7ff bf86 	b.w	80077e8 <std>
 80078dc:	20001d7c 	.word	0x20001d7c
 80078e0:	20001c44 	.word	0x20001c44
 80078e4:	08007855 	.word	0x08007855

080078e8 <__sfp_lock_acquire>:
 80078e8:	4801      	ldr	r0, [pc, #4]	@ (80078f0 <__sfp_lock_acquire+0x8>)
 80078ea:	f000 ba66 	b.w	8007dba <__retarget_lock_acquire_recursive>
 80078ee:	bf00      	nop
 80078f0:	20001d85 	.word	0x20001d85

080078f4 <__sfp_lock_release>:
 80078f4:	4801      	ldr	r0, [pc, #4]	@ (80078fc <__sfp_lock_release+0x8>)
 80078f6:	f000 ba61 	b.w	8007dbc <__retarget_lock_release_recursive>
 80078fa:	bf00      	nop
 80078fc:	20001d85 	.word	0x20001d85

08007900 <__sinit>:
 8007900:	b510      	push	{r4, lr}
 8007902:	4604      	mov	r4, r0
 8007904:	f7ff fff0 	bl	80078e8 <__sfp_lock_acquire>
 8007908:	6a23      	ldr	r3, [r4, #32]
 800790a:	b11b      	cbz	r3, 8007914 <__sinit+0x14>
 800790c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007910:	f7ff bff0 	b.w	80078f4 <__sfp_lock_release>
 8007914:	4b04      	ldr	r3, [pc, #16]	@ (8007928 <__sinit+0x28>)
 8007916:	6223      	str	r3, [r4, #32]
 8007918:	4b04      	ldr	r3, [pc, #16]	@ (800792c <__sinit+0x2c>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1f5      	bne.n	800790c <__sinit+0xc>
 8007920:	f7ff ffc4 	bl	80078ac <global_stdio_init.part.0>
 8007924:	e7f2      	b.n	800790c <__sinit+0xc>
 8007926:	bf00      	nop
 8007928:	0800786d 	.word	0x0800786d
 800792c:	20001d7c 	.word	0x20001d7c

08007930 <_fwalk_sglue>:
 8007930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007934:	4607      	mov	r7, r0
 8007936:	4688      	mov	r8, r1
 8007938:	4614      	mov	r4, r2
 800793a:	2600      	movs	r6, #0
 800793c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007940:	f1b9 0901 	subs.w	r9, r9, #1
 8007944:	d505      	bpl.n	8007952 <_fwalk_sglue+0x22>
 8007946:	6824      	ldr	r4, [r4, #0]
 8007948:	2c00      	cmp	r4, #0
 800794a:	d1f7      	bne.n	800793c <_fwalk_sglue+0xc>
 800794c:	4630      	mov	r0, r6
 800794e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007952:	89ab      	ldrh	r3, [r5, #12]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d907      	bls.n	8007968 <_fwalk_sglue+0x38>
 8007958:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800795c:	3301      	adds	r3, #1
 800795e:	d003      	beq.n	8007968 <_fwalk_sglue+0x38>
 8007960:	4629      	mov	r1, r5
 8007962:	4638      	mov	r0, r7
 8007964:	47c0      	blx	r8
 8007966:	4306      	orrs	r6, r0
 8007968:	3568      	adds	r5, #104	@ 0x68
 800796a:	e7e9      	b.n	8007940 <_fwalk_sglue+0x10>

0800796c <iprintf>:
 800796c:	b40f      	push	{r0, r1, r2, r3}
 800796e:	b507      	push	{r0, r1, r2, lr}
 8007970:	4906      	ldr	r1, [pc, #24]	@ (800798c <iprintf+0x20>)
 8007972:	ab04      	add	r3, sp, #16
 8007974:	6808      	ldr	r0, [r1, #0]
 8007976:	f853 2b04 	ldr.w	r2, [r3], #4
 800797a:	6881      	ldr	r1, [r0, #8]
 800797c:	9301      	str	r3, [sp, #4]
 800797e:	f000 fb4f 	bl	8008020 <_vfiprintf_r>
 8007982:	b003      	add	sp, #12
 8007984:	f85d eb04 	ldr.w	lr, [sp], #4
 8007988:	b004      	add	sp, #16
 800798a:	4770      	bx	lr
 800798c:	20000030 	.word	0x20000030

08007990 <putchar>:
 8007990:	4b02      	ldr	r3, [pc, #8]	@ (800799c <putchar+0xc>)
 8007992:	4601      	mov	r1, r0
 8007994:	6818      	ldr	r0, [r3, #0]
 8007996:	6882      	ldr	r2, [r0, #8]
 8007998:	f000 bef4 	b.w	8008784 <_putc_r>
 800799c:	20000030 	.word	0x20000030

080079a0 <_puts_r>:
 80079a0:	6a03      	ldr	r3, [r0, #32]
 80079a2:	b570      	push	{r4, r5, r6, lr}
 80079a4:	6884      	ldr	r4, [r0, #8]
 80079a6:	4605      	mov	r5, r0
 80079a8:	460e      	mov	r6, r1
 80079aa:	b90b      	cbnz	r3, 80079b0 <_puts_r+0x10>
 80079ac:	f7ff ffa8 	bl	8007900 <__sinit>
 80079b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079b2:	07db      	lsls	r3, r3, #31
 80079b4:	d405      	bmi.n	80079c2 <_puts_r+0x22>
 80079b6:	89a3      	ldrh	r3, [r4, #12]
 80079b8:	0598      	lsls	r0, r3, #22
 80079ba:	d402      	bmi.n	80079c2 <_puts_r+0x22>
 80079bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079be:	f000 f9fc 	bl	8007dba <__retarget_lock_acquire_recursive>
 80079c2:	89a3      	ldrh	r3, [r4, #12]
 80079c4:	0719      	lsls	r1, r3, #28
 80079c6:	d502      	bpl.n	80079ce <_puts_r+0x2e>
 80079c8:	6923      	ldr	r3, [r4, #16]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d135      	bne.n	8007a3a <_puts_r+0x9a>
 80079ce:	4621      	mov	r1, r4
 80079d0:	4628      	mov	r0, r5
 80079d2:	f000 f8c5 	bl	8007b60 <__swsetup_r>
 80079d6:	b380      	cbz	r0, 8007a3a <_puts_r+0x9a>
 80079d8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80079dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079de:	07da      	lsls	r2, r3, #31
 80079e0:	d405      	bmi.n	80079ee <_puts_r+0x4e>
 80079e2:	89a3      	ldrh	r3, [r4, #12]
 80079e4:	059b      	lsls	r3, r3, #22
 80079e6:	d402      	bmi.n	80079ee <_puts_r+0x4e>
 80079e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079ea:	f000 f9e7 	bl	8007dbc <__retarget_lock_release_recursive>
 80079ee:	4628      	mov	r0, r5
 80079f0:	bd70      	pop	{r4, r5, r6, pc}
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	da04      	bge.n	8007a00 <_puts_r+0x60>
 80079f6:	69a2      	ldr	r2, [r4, #24]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	dc17      	bgt.n	8007a2c <_puts_r+0x8c>
 80079fc:	290a      	cmp	r1, #10
 80079fe:	d015      	beq.n	8007a2c <_puts_r+0x8c>
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	1c5a      	adds	r2, r3, #1
 8007a04:	6022      	str	r2, [r4, #0]
 8007a06:	7019      	strb	r1, [r3, #0]
 8007a08:	68a3      	ldr	r3, [r4, #8]
 8007a0a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	60a3      	str	r3, [r4, #8]
 8007a12:	2900      	cmp	r1, #0
 8007a14:	d1ed      	bne.n	80079f2 <_puts_r+0x52>
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	da11      	bge.n	8007a3e <_puts_r+0x9e>
 8007a1a:	4622      	mov	r2, r4
 8007a1c:	210a      	movs	r1, #10
 8007a1e:	4628      	mov	r0, r5
 8007a20:	f000 f85f 	bl	8007ae2 <__swbuf_r>
 8007a24:	3001      	adds	r0, #1
 8007a26:	d0d7      	beq.n	80079d8 <_puts_r+0x38>
 8007a28:	250a      	movs	r5, #10
 8007a2a:	e7d7      	b.n	80079dc <_puts_r+0x3c>
 8007a2c:	4622      	mov	r2, r4
 8007a2e:	4628      	mov	r0, r5
 8007a30:	f000 f857 	bl	8007ae2 <__swbuf_r>
 8007a34:	3001      	adds	r0, #1
 8007a36:	d1e7      	bne.n	8007a08 <_puts_r+0x68>
 8007a38:	e7ce      	b.n	80079d8 <_puts_r+0x38>
 8007a3a:	3e01      	subs	r6, #1
 8007a3c:	e7e4      	b.n	8007a08 <_puts_r+0x68>
 8007a3e:	6823      	ldr	r3, [r4, #0]
 8007a40:	1c5a      	adds	r2, r3, #1
 8007a42:	6022      	str	r2, [r4, #0]
 8007a44:	220a      	movs	r2, #10
 8007a46:	701a      	strb	r2, [r3, #0]
 8007a48:	e7ee      	b.n	8007a28 <_puts_r+0x88>
	...

08007a4c <puts>:
 8007a4c:	4b02      	ldr	r3, [pc, #8]	@ (8007a58 <puts+0xc>)
 8007a4e:	4601      	mov	r1, r0
 8007a50:	6818      	ldr	r0, [r3, #0]
 8007a52:	f7ff bfa5 	b.w	80079a0 <_puts_r>
 8007a56:	bf00      	nop
 8007a58:	20000030 	.word	0x20000030

08007a5c <__sread>:
 8007a5c:	b510      	push	{r4, lr}
 8007a5e:	460c      	mov	r4, r1
 8007a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a64:	f000 f95a 	bl	8007d1c <_read_r>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	bfab      	itete	ge
 8007a6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007a6e:	89a3      	ldrhlt	r3, [r4, #12]
 8007a70:	181b      	addge	r3, r3, r0
 8007a72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007a76:	bfac      	ite	ge
 8007a78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007a7a:	81a3      	strhlt	r3, [r4, #12]
 8007a7c:	bd10      	pop	{r4, pc}

08007a7e <__swrite>:
 8007a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a82:	461f      	mov	r7, r3
 8007a84:	898b      	ldrh	r3, [r1, #12]
 8007a86:	05db      	lsls	r3, r3, #23
 8007a88:	4605      	mov	r5, r0
 8007a8a:	460c      	mov	r4, r1
 8007a8c:	4616      	mov	r6, r2
 8007a8e:	d505      	bpl.n	8007a9c <__swrite+0x1e>
 8007a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a94:	2302      	movs	r3, #2
 8007a96:	2200      	movs	r2, #0
 8007a98:	f000 f92e 	bl	8007cf8 <_lseek_r>
 8007a9c:	89a3      	ldrh	r3, [r4, #12]
 8007a9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007aa2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007aa6:	81a3      	strh	r3, [r4, #12]
 8007aa8:	4632      	mov	r2, r6
 8007aaa:	463b      	mov	r3, r7
 8007aac:	4628      	mov	r0, r5
 8007aae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab2:	f000 b945 	b.w	8007d40 <_write_r>

08007ab6 <__sseek>:
 8007ab6:	b510      	push	{r4, lr}
 8007ab8:	460c      	mov	r4, r1
 8007aba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007abe:	f000 f91b 	bl	8007cf8 <_lseek_r>
 8007ac2:	1c43      	adds	r3, r0, #1
 8007ac4:	89a3      	ldrh	r3, [r4, #12]
 8007ac6:	bf15      	itete	ne
 8007ac8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007aca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007ace:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007ad2:	81a3      	strheq	r3, [r4, #12]
 8007ad4:	bf18      	it	ne
 8007ad6:	81a3      	strhne	r3, [r4, #12]
 8007ad8:	bd10      	pop	{r4, pc}

08007ada <__sclose>:
 8007ada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ade:	f000 b89d 	b.w	8007c1c <_close_r>

08007ae2 <__swbuf_r>:
 8007ae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ae4:	460e      	mov	r6, r1
 8007ae6:	4614      	mov	r4, r2
 8007ae8:	4605      	mov	r5, r0
 8007aea:	b118      	cbz	r0, 8007af4 <__swbuf_r+0x12>
 8007aec:	6a03      	ldr	r3, [r0, #32]
 8007aee:	b90b      	cbnz	r3, 8007af4 <__swbuf_r+0x12>
 8007af0:	f7ff ff06 	bl	8007900 <__sinit>
 8007af4:	69a3      	ldr	r3, [r4, #24]
 8007af6:	60a3      	str	r3, [r4, #8]
 8007af8:	89a3      	ldrh	r3, [r4, #12]
 8007afa:	071a      	lsls	r2, r3, #28
 8007afc:	d501      	bpl.n	8007b02 <__swbuf_r+0x20>
 8007afe:	6923      	ldr	r3, [r4, #16]
 8007b00:	b943      	cbnz	r3, 8007b14 <__swbuf_r+0x32>
 8007b02:	4621      	mov	r1, r4
 8007b04:	4628      	mov	r0, r5
 8007b06:	f000 f82b 	bl	8007b60 <__swsetup_r>
 8007b0a:	b118      	cbz	r0, 8007b14 <__swbuf_r+0x32>
 8007b0c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007b10:	4638      	mov	r0, r7
 8007b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b14:	6823      	ldr	r3, [r4, #0]
 8007b16:	6922      	ldr	r2, [r4, #16]
 8007b18:	1a98      	subs	r0, r3, r2
 8007b1a:	6963      	ldr	r3, [r4, #20]
 8007b1c:	b2f6      	uxtb	r6, r6
 8007b1e:	4283      	cmp	r3, r0
 8007b20:	4637      	mov	r7, r6
 8007b22:	dc05      	bgt.n	8007b30 <__swbuf_r+0x4e>
 8007b24:	4621      	mov	r1, r4
 8007b26:	4628      	mov	r0, r5
 8007b28:	f000 fda2 	bl	8008670 <_fflush_r>
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	d1ed      	bne.n	8007b0c <__swbuf_r+0x2a>
 8007b30:	68a3      	ldr	r3, [r4, #8]
 8007b32:	3b01      	subs	r3, #1
 8007b34:	60a3      	str	r3, [r4, #8]
 8007b36:	6823      	ldr	r3, [r4, #0]
 8007b38:	1c5a      	adds	r2, r3, #1
 8007b3a:	6022      	str	r2, [r4, #0]
 8007b3c:	701e      	strb	r6, [r3, #0]
 8007b3e:	6962      	ldr	r2, [r4, #20]
 8007b40:	1c43      	adds	r3, r0, #1
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d004      	beq.n	8007b50 <__swbuf_r+0x6e>
 8007b46:	89a3      	ldrh	r3, [r4, #12]
 8007b48:	07db      	lsls	r3, r3, #31
 8007b4a:	d5e1      	bpl.n	8007b10 <__swbuf_r+0x2e>
 8007b4c:	2e0a      	cmp	r6, #10
 8007b4e:	d1df      	bne.n	8007b10 <__swbuf_r+0x2e>
 8007b50:	4621      	mov	r1, r4
 8007b52:	4628      	mov	r0, r5
 8007b54:	f000 fd8c 	bl	8008670 <_fflush_r>
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	d0d9      	beq.n	8007b10 <__swbuf_r+0x2e>
 8007b5c:	e7d6      	b.n	8007b0c <__swbuf_r+0x2a>
	...

08007b60 <__swsetup_r>:
 8007b60:	b538      	push	{r3, r4, r5, lr}
 8007b62:	4b29      	ldr	r3, [pc, #164]	@ (8007c08 <__swsetup_r+0xa8>)
 8007b64:	4605      	mov	r5, r0
 8007b66:	6818      	ldr	r0, [r3, #0]
 8007b68:	460c      	mov	r4, r1
 8007b6a:	b118      	cbz	r0, 8007b74 <__swsetup_r+0x14>
 8007b6c:	6a03      	ldr	r3, [r0, #32]
 8007b6e:	b90b      	cbnz	r3, 8007b74 <__swsetup_r+0x14>
 8007b70:	f7ff fec6 	bl	8007900 <__sinit>
 8007b74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b78:	0719      	lsls	r1, r3, #28
 8007b7a:	d422      	bmi.n	8007bc2 <__swsetup_r+0x62>
 8007b7c:	06da      	lsls	r2, r3, #27
 8007b7e:	d407      	bmi.n	8007b90 <__swsetup_r+0x30>
 8007b80:	2209      	movs	r2, #9
 8007b82:	602a      	str	r2, [r5, #0]
 8007b84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b88:	81a3      	strh	r3, [r4, #12]
 8007b8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b8e:	e033      	b.n	8007bf8 <__swsetup_r+0x98>
 8007b90:	0758      	lsls	r0, r3, #29
 8007b92:	d512      	bpl.n	8007bba <__swsetup_r+0x5a>
 8007b94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b96:	b141      	cbz	r1, 8007baa <__swsetup_r+0x4a>
 8007b98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b9c:	4299      	cmp	r1, r3
 8007b9e:	d002      	beq.n	8007ba6 <__swsetup_r+0x46>
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	f000 f91b 	bl	8007ddc <_free_r>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007baa:	89a3      	ldrh	r3, [r4, #12]
 8007bac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007bb0:	81a3      	strh	r3, [r4, #12]
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	6063      	str	r3, [r4, #4]
 8007bb6:	6923      	ldr	r3, [r4, #16]
 8007bb8:	6023      	str	r3, [r4, #0]
 8007bba:	89a3      	ldrh	r3, [r4, #12]
 8007bbc:	f043 0308 	orr.w	r3, r3, #8
 8007bc0:	81a3      	strh	r3, [r4, #12]
 8007bc2:	6923      	ldr	r3, [r4, #16]
 8007bc4:	b94b      	cbnz	r3, 8007bda <__swsetup_r+0x7a>
 8007bc6:	89a3      	ldrh	r3, [r4, #12]
 8007bc8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007bcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bd0:	d003      	beq.n	8007bda <__swsetup_r+0x7a>
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	f000 fd99 	bl	800870c <__smakebuf_r>
 8007bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bde:	f013 0201 	ands.w	r2, r3, #1
 8007be2:	d00a      	beq.n	8007bfa <__swsetup_r+0x9a>
 8007be4:	2200      	movs	r2, #0
 8007be6:	60a2      	str	r2, [r4, #8]
 8007be8:	6962      	ldr	r2, [r4, #20]
 8007bea:	4252      	negs	r2, r2
 8007bec:	61a2      	str	r2, [r4, #24]
 8007bee:	6922      	ldr	r2, [r4, #16]
 8007bf0:	b942      	cbnz	r2, 8007c04 <__swsetup_r+0xa4>
 8007bf2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007bf6:	d1c5      	bne.n	8007b84 <__swsetup_r+0x24>
 8007bf8:	bd38      	pop	{r3, r4, r5, pc}
 8007bfa:	0799      	lsls	r1, r3, #30
 8007bfc:	bf58      	it	pl
 8007bfe:	6962      	ldrpl	r2, [r4, #20]
 8007c00:	60a2      	str	r2, [r4, #8]
 8007c02:	e7f4      	b.n	8007bee <__swsetup_r+0x8e>
 8007c04:	2000      	movs	r0, #0
 8007c06:	e7f7      	b.n	8007bf8 <__swsetup_r+0x98>
 8007c08:	20000030 	.word	0x20000030

08007c0c <memset>:
 8007c0c:	4402      	add	r2, r0
 8007c0e:	4603      	mov	r3, r0
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d100      	bne.n	8007c16 <memset+0xa>
 8007c14:	4770      	bx	lr
 8007c16:	f803 1b01 	strb.w	r1, [r3], #1
 8007c1a:	e7f9      	b.n	8007c10 <memset+0x4>

08007c1c <_close_r>:
 8007c1c:	b538      	push	{r3, r4, r5, lr}
 8007c1e:	4d06      	ldr	r5, [pc, #24]	@ (8007c38 <_close_r+0x1c>)
 8007c20:	2300      	movs	r3, #0
 8007c22:	4604      	mov	r4, r0
 8007c24:	4608      	mov	r0, r1
 8007c26:	602b      	str	r3, [r5, #0]
 8007c28:	f7f9 faa9 	bl	800117e <_close>
 8007c2c:	1c43      	adds	r3, r0, #1
 8007c2e:	d102      	bne.n	8007c36 <_close_r+0x1a>
 8007c30:	682b      	ldr	r3, [r5, #0]
 8007c32:	b103      	cbz	r3, 8007c36 <_close_r+0x1a>
 8007c34:	6023      	str	r3, [r4, #0]
 8007c36:	bd38      	pop	{r3, r4, r5, pc}
 8007c38:	20001d80 	.word	0x20001d80

08007c3c <_reclaim_reent>:
 8007c3c:	4b2d      	ldr	r3, [pc, #180]	@ (8007cf4 <_reclaim_reent+0xb8>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4283      	cmp	r3, r0
 8007c42:	b570      	push	{r4, r5, r6, lr}
 8007c44:	4604      	mov	r4, r0
 8007c46:	d053      	beq.n	8007cf0 <_reclaim_reent+0xb4>
 8007c48:	69c3      	ldr	r3, [r0, #28]
 8007c4a:	b31b      	cbz	r3, 8007c94 <_reclaim_reent+0x58>
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	b163      	cbz	r3, 8007c6a <_reclaim_reent+0x2e>
 8007c50:	2500      	movs	r5, #0
 8007c52:	69e3      	ldr	r3, [r4, #28]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	5959      	ldr	r1, [r3, r5]
 8007c58:	b9b1      	cbnz	r1, 8007c88 <_reclaim_reent+0x4c>
 8007c5a:	3504      	adds	r5, #4
 8007c5c:	2d80      	cmp	r5, #128	@ 0x80
 8007c5e:	d1f8      	bne.n	8007c52 <_reclaim_reent+0x16>
 8007c60:	69e3      	ldr	r3, [r4, #28]
 8007c62:	4620      	mov	r0, r4
 8007c64:	68d9      	ldr	r1, [r3, #12]
 8007c66:	f000 f8b9 	bl	8007ddc <_free_r>
 8007c6a:	69e3      	ldr	r3, [r4, #28]
 8007c6c:	6819      	ldr	r1, [r3, #0]
 8007c6e:	b111      	cbz	r1, 8007c76 <_reclaim_reent+0x3a>
 8007c70:	4620      	mov	r0, r4
 8007c72:	f000 f8b3 	bl	8007ddc <_free_r>
 8007c76:	69e3      	ldr	r3, [r4, #28]
 8007c78:	689d      	ldr	r5, [r3, #8]
 8007c7a:	b15d      	cbz	r5, 8007c94 <_reclaim_reent+0x58>
 8007c7c:	4629      	mov	r1, r5
 8007c7e:	4620      	mov	r0, r4
 8007c80:	682d      	ldr	r5, [r5, #0]
 8007c82:	f000 f8ab 	bl	8007ddc <_free_r>
 8007c86:	e7f8      	b.n	8007c7a <_reclaim_reent+0x3e>
 8007c88:	680e      	ldr	r6, [r1, #0]
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	f000 f8a6 	bl	8007ddc <_free_r>
 8007c90:	4631      	mov	r1, r6
 8007c92:	e7e1      	b.n	8007c58 <_reclaim_reent+0x1c>
 8007c94:	6961      	ldr	r1, [r4, #20]
 8007c96:	b111      	cbz	r1, 8007c9e <_reclaim_reent+0x62>
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f000 f89f 	bl	8007ddc <_free_r>
 8007c9e:	69e1      	ldr	r1, [r4, #28]
 8007ca0:	b111      	cbz	r1, 8007ca8 <_reclaim_reent+0x6c>
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f000 f89a 	bl	8007ddc <_free_r>
 8007ca8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007caa:	b111      	cbz	r1, 8007cb2 <_reclaim_reent+0x76>
 8007cac:	4620      	mov	r0, r4
 8007cae:	f000 f895 	bl	8007ddc <_free_r>
 8007cb2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007cb4:	b111      	cbz	r1, 8007cbc <_reclaim_reent+0x80>
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f000 f890 	bl	8007ddc <_free_r>
 8007cbc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007cbe:	b111      	cbz	r1, 8007cc6 <_reclaim_reent+0x8a>
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	f000 f88b 	bl	8007ddc <_free_r>
 8007cc6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007cc8:	b111      	cbz	r1, 8007cd0 <_reclaim_reent+0x94>
 8007cca:	4620      	mov	r0, r4
 8007ccc:	f000 f886 	bl	8007ddc <_free_r>
 8007cd0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007cd2:	b111      	cbz	r1, 8007cda <_reclaim_reent+0x9e>
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	f000 f881 	bl	8007ddc <_free_r>
 8007cda:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007cdc:	b111      	cbz	r1, 8007ce4 <_reclaim_reent+0xa8>
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f000 f87c 	bl	8007ddc <_free_r>
 8007ce4:	6a23      	ldr	r3, [r4, #32]
 8007ce6:	b11b      	cbz	r3, 8007cf0 <_reclaim_reent+0xb4>
 8007ce8:	4620      	mov	r0, r4
 8007cea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007cee:	4718      	bx	r3
 8007cf0:	bd70      	pop	{r4, r5, r6, pc}
 8007cf2:	bf00      	nop
 8007cf4:	20000030 	.word	0x20000030

08007cf8 <_lseek_r>:
 8007cf8:	b538      	push	{r3, r4, r5, lr}
 8007cfa:	4d07      	ldr	r5, [pc, #28]	@ (8007d18 <_lseek_r+0x20>)
 8007cfc:	4604      	mov	r4, r0
 8007cfe:	4608      	mov	r0, r1
 8007d00:	4611      	mov	r1, r2
 8007d02:	2200      	movs	r2, #0
 8007d04:	602a      	str	r2, [r5, #0]
 8007d06:	461a      	mov	r2, r3
 8007d08:	f7f9 fa60 	bl	80011cc <_lseek>
 8007d0c:	1c43      	adds	r3, r0, #1
 8007d0e:	d102      	bne.n	8007d16 <_lseek_r+0x1e>
 8007d10:	682b      	ldr	r3, [r5, #0]
 8007d12:	b103      	cbz	r3, 8007d16 <_lseek_r+0x1e>
 8007d14:	6023      	str	r3, [r4, #0]
 8007d16:	bd38      	pop	{r3, r4, r5, pc}
 8007d18:	20001d80 	.word	0x20001d80

08007d1c <_read_r>:
 8007d1c:	b538      	push	{r3, r4, r5, lr}
 8007d1e:	4d07      	ldr	r5, [pc, #28]	@ (8007d3c <_read_r+0x20>)
 8007d20:	4604      	mov	r4, r0
 8007d22:	4608      	mov	r0, r1
 8007d24:	4611      	mov	r1, r2
 8007d26:	2200      	movs	r2, #0
 8007d28:	602a      	str	r2, [r5, #0]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	f7f9 fa0a 	bl	8001144 <_read>
 8007d30:	1c43      	adds	r3, r0, #1
 8007d32:	d102      	bne.n	8007d3a <_read_r+0x1e>
 8007d34:	682b      	ldr	r3, [r5, #0]
 8007d36:	b103      	cbz	r3, 8007d3a <_read_r+0x1e>
 8007d38:	6023      	str	r3, [r4, #0]
 8007d3a:	bd38      	pop	{r3, r4, r5, pc}
 8007d3c:	20001d80 	.word	0x20001d80

08007d40 <_write_r>:
 8007d40:	b538      	push	{r3, r4, r5, lr}
 8007d42:	4d07      	ldr	r5, [pc, #28]	@ (8007d60 <_write_r+0x20>)
 8007d44:	4604      	mov	r4, r0
 8007d46:	4608      	mov	r0, r1
 8007d48:	4611      	mov	r1, r2
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	602a      	str	r2, [r5, #0]
 8007d4e:	461a      	mov	r2, r3
 8007d50:	f7f8 fe3c 	bl	80009cc <_write>
 8007d54:	1c43      	adds	r3, r0, #1
 8007d56:	d102      	bne.n	8007d5e <_write_r+0x1e>
 8007d58:	682b      	ldr	r3, [r5, #0]
 8007d5a:	b103      	cbz	r3, 8007d5e <_write_r+0x1e>
 8007d5c:	6023      	str	r3, [r4, #0]
 8007d5e:	bd38      	pop	{r3, r4, r5, pc}
 8007d60:	20001d80 	.word	0x20001d80

08007d64 <__errno>:
 8007d64:	4b01      	ldr	r3, [pc, #4]	@ (8007d6c <__errno+0x8>)
 8007d66:	6818      	ldr	r0, [r3, #0]
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	20000030 	.word	0x20000030

08007d70 <__libc_init_array>:
 8007d70:	b570      	push	{r4, r5, r6, lr}
 8007d72:	4d0d      	ldr	r5, [pc, #52]	@ (8007da8 <__libc_init_array+0x38>)
 8007d74:	4c0d      	ldr	r4, [pc, #52]	@ (8007dac <__libc_init_array+0x3c>)
 8007d76:	1b64      	subs	r4, r4, r5
 8007d78:	10a4      	asrs	r4, r4, #2
 8007d7a:	2600      	movs	r6, #0
 8007d7c:	42a6      	cmp	r6, r4
 8007d7e:	d109      	bne.n	8007d94 <__libc_init_array+0x24>
 8007d80:	4d0b      	ldr	r5, [pc, #44]	@ (8007db0 <__libc_init_array+0x40>)
 8007d82:	4c0c      	ldr	r4, [pc, #48]	@ (8007db4 <__libc_init_array+0x44>)
 8007d84:	f000 fd64 	bl	8008850 <_init>
 8007d88:	1b64      	subs	r4, r4, r5
 8007d8a:	10a4      	asrs	r4, r4, #2
 8007d8c:	2600      	movs	r6, #0
 8007d8e:	42a6      	cmp	r6, r4
 8007d90:	d105      	bne.n	8007d9e <__libc_init_array+0x2e>
 8007d92:	bd70      	pop	{r4, r5, r6, pc}
 8007d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d98:	4798      	blx	r3
 8007d9a:	3601      	adds	r6, #1
 8007d9c:	e7ee      	b.n	8007d7c <__libc_init_array+0xc>
 8007d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007da2:	4798      	blx	r3
 8007da4:	3601      	adds	r6, #1
 8007da6:	e7f2      	b.n	8007d8e <__libc_init_array+0x1e>
 8007da8:	08008c80 	.word	0x08008c80
 8007dac:	08008c80 	.word	0x08008c80
 8007db0:	08008c80 	.word	0x08008c80
 8007db4:	08008c84 	.word	0x08008c84

08007db8 <__retarget_lock_init_recursive>:
 8007db8:	4770      	bx	lr

08007dba <__retarget_lock_acquire_recursive>:
 8007dba:	4770      	bx	lr

08007dbc <__retarget_lock_release_recursive>:
 8007dbc:	4770      	bx	lr

08007dbe <memcpy>:
 8007dbe:	440a      	add	r2, r1
 8007dc0:	4291      	cmp	r1, r2
 8007dc2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007dc6:	d100      	bne.n	8007dca <memcpy+0xc>
 8007dc8:	4770      	bx	lr
 8007dca:	b510      	push	{r4, lr}
 8007dcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dd4:	4291      	cmp	r1, r2
 8007dd6:	d1f9      	bne.n	8007dcc <memcpy+0xe>
 8007dd8:	bd10      	pop	{r4, pc}
	...

08007ddc <_free_r>:
 8007ddc:	b538      	push	{r3, r4, r5, lr}
 8007dde:	4605      	mov	r5, r0
 8007de0:	2900      	cmp	r1, #0
 8007de2:	d041      	beq.n	8007e68 <_free_r+0x8c>
 8007de4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007de8:	1f0c      	subs	r4, r1, #4
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	bfb8      	it	lt
 8007dee:	18e4      	addlt	r4, r4, r3
 8007df0:	f000 f8e0 	bl	8007fb4 <__malloc_lock>
 8007df4:	4a1d      	ldr	r2, [pc, #116]	@ (8007e6c <_free_r+0x90>)
 8007df6:	6813      	ldr	r3, [r2, #0]
 8007df8:	b933      	cbnz	r3, 8007e08 <_free_r+0x2c>
 8007dfa:	6063      	str	r3, [r4, #4]
 8007dfc:	6014      	str	r4, [r2, #0]
 8007dfe:	4628      	mov	r0, r5
 8007e00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e04:	f000 b8dc 	b.w	8007fc0 <__malloc_unlock>
 8007e08:	42a3      	cmp	r3, r4
 8007e0a:	d908      	bls.n	8007e1e <_free_r+0x42>
 8007e0c:	6820      	ldr	r0, [r4, #0]
 8007e0e:	1821      	adds	r1, r4, r0
 8007e10:	428b      	cmp	r3, r1
 8007e12:	bf01      	itttt	eq
 8007e14:	6819      	ldreq	r1, [r3, #0]
 8007e16:	685b      	ldreq	r3, [r3, #4]
 8007e18:	1809      	addeq	r1, r1, r0
 8007e1a:	6021      	streq	r1, [r4, #0]
 8007e1c:	e7ed      	b.n	8007dfa <_free_r+0x1e>
 8007e1e:	461a      	mov	r2, r3
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	b10b      	cbz	r3, 8007e28 <_free_r+0x4c>
 8007e24:	42a3      	cmp	r3, r4
 8007e26:	d9fa      	bls.n	8007e1e <_free_r+0x42>
 8007e28:	6811      	ldr	r1, [r2, #0]
 8007e2a:	1850      	adds	r0, r2, r1
 8007e2c:	42a0      	cmp	r0, r4
 8007e2e:	d10b      	bne.n	8007e48 <_free_r+0x6c>
 8007e30:	6820      	ldr	r0, [r4, #0]
 8007e32:	4401      	add	r1, r0
 8007e34:	1850      	adds	r0, r2, r1
 8007e36:	4283      	cmp	r3, r0
 8007e38:	6011      	str	r1, [r2, #0]
 8007e3a:	d1e0      	bne.n	8007dfe <_free_r+0x22>
 8007e3c:	6818      	ldr	r0, [r3, #0]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	6053      	str	r3, [r2, #4]
 8007e42:	4408      	add	r0, r1
 8007e44:	6010      	str	r0, [r2, #0]
 8007e46:	e7da      	b.n	8007dfe <_free_r+0x22>
 8007e48:	d902      	bls.n	8007e50 <_free_r+0x74>
 8007e4a:	230c      	movs	r3, #12
 8007e4c:	602b      	str	r3, [r5, #0]
 8007e4e:	e7d6      	b.n	8007dfe <_free_r+0x22>
 8007e50:	6820      	ldr	r0, [r4, #0]
 8007e52:	1821      	adds	r1, r4, r0
 8007e54:	428b      	cmp	r3, r1
 8007e56:	bf04      	itt	eq
 8007e58:	6819      	ldreq	r1, [r3, #0]
 8007e5a:	685b      	ldreq	r3, [r3, #4]
 8007e5c:	6063      	str	r3, [r4, #4]
 8007e5e:	bf04      	itt	eq
 8007e60:	1809      	addeq	r1, r1, r0
 8007e62:	6021      	streq	r1, [r4, #0]
 8007e64:	6054      	str	r4, [r2, #4]
 8007e66:	e7ca      	b.n	8007dfe <_free_r+0x22>
 8007e68:	bd38      	pop	{r3, r4, r5, pc}
 8007e6a:	bf00      	nop
 8007e6c:	20001d8c 	.word	0x20001d8c

08007e70 <sbrk_aligned>:
 8007e70:	b570      	push	{r4, r5, r6, lr}
 8007e72:	4e0f      	ldr	r6, [pc, #60]	@ (8007eb0 <sbrk_aligned+0x40>)
 8007e74:	460c      	mov	r4, r1
 8007e76:	6831      	ldr	r1, [r6, #0]
 8007e78:	4605      	mov	r5, r0
 8007e7a:	b911      	cbnz	r1, 8007e82 <sbrk_aligned+0x12>
 8007e7c:	f000 fcd8 	bl	8008830 <_sbrk_r>
 8007e80:	6030      	str	r0, [r6, #0]
 8007e82:	4621      	mov	r1, r4
 8007e84:	4628      	mov	r0, r5
 8007e86:	f000 fcd3 	bl	8008830 <_sbrk_r>
 8007e8a:	1c43      	adds	r3, r0, #1
 8007e8c:	d103      	bne.n	8007e96 <sbrk_aligned+0x26>
 8007e8e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007e92:	4620      	mov	r0, r4
 8007e94:	bd70      	pop	{r4, r5, r6, pc}
 8007e96:	1cc4      	adds	r4, r0, #3
 8007e98:	f024 0403 	bic.w	r4, r4, #3
 8007e9c:	42a0      	cmp	r0, r4
 8007e9e:	d0f8      	beq.n	8007e92 <sbrk_aligned+0x22>
 8007ea0:	1a21      	subs	r1, r4, r0
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	f000 fcc4 	bl	8008830 <_sbrk_r>
 8007ea8:	3001      	adds	r0, #1
 8007eaa:	d1f2      	bne.n	8007e92 <sbrk_aligned+0x22>
 8007eac:	e7ef      	b.n	8007e8e <sbrk_aligned+0x1e>
 8007eae:	bf00      	nop
 8007eb0:	20001d88 	.word	0x20001d88

08007eb4 <_malloc_r>:
 8007eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007eb8:	1ccd      	adds	r5, r1, #3
 8007eba:	f025 0503 	bic.w	r5, r5, #3
 8007ebe:	3508      	adds	r5, #8
 8007ec0:	2d0c      	cmp	r5, #12
 8007ec2:	bf38      	it	cc
 8007ec4:	250c      	movcc	r5, #12
 8007ec6:	2d00      	cmp	r5, #0
 8007ec8:	4606      	mov	r6, r0
 8007eca:	db01      	blt.n	8007ed0 <_malloc_r+0x1c>
 8007ecc:	42a9      	cmp	r1, r5
 8007ece:	d904      	bls.n	8007eda <_malloc_r+0x26>
 8007ed0:	230c      	movs	r3, #12
 8007ed2:	6033      	str	r3, [r6, #0]
 8007ed4:	2000      	movs	r0, #0
 8007ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007fb0 <_malloc_r+0xfc>
 8007ede:	f000 f869 	bl	8007fb4 <__malloc_lock>
 8007ee2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ee6:	461c      	mov	r4, r3
 8007ee8:	bb44      	cbnz	r4, 8007f3c <_malloc_r+0x88>
 8007eea:	4629      	mov	r1, r5
 8007eec:	4630      	mov	r0, r6
 8007eee:	f7ff ffbf 	bl	8007e70 <sbrk_aligned>
 8007ef2:	1c43      	adds	r3, r0, #1
 8007ef4:	4604      	mov	r4, r0
 8007ef6:	d158      	bne.n	8007faa <_malloc_r+0xf6>
 8007ef8:	f8d8 4000 	ldr.w	r4, [r8]
 8007efc:	4627      	mov	r7, r4
 8007efe:	2f00      	cmp	r7, #0
 8007f00:	d143      	bne.n	8007f8a <_malloc_r+0xd6>
 8007f02:	2c00      	cmp	r4, #0
 8007f04:	d04b      	beq.n	8007f9e <_malloc_r+0xea>
 8007f06:	6823      	ldr	r3, [r4, #0]
 8007f08:	4639      	mov	r1, r7
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	eb04 0903 	add.w	r9, r4, r3
 8007f10:	f000 fc8e 	bl	8008830 <_sbrk_r>
 8007f14:	4581      	cmp	r9, r0
 8007f16:	d142      	bne.n	8007f9e <_malloc_r+0xea>
 8007f18:	6821      	ldr	r1, [r4, #0]
 8007f1a:	1a6d      	subs	r5, r5, r1
 8007f1c:	4629      	mov	r1, r5
 8007f1e:	4630      	mov	r0, r6
 8007f20:	f7ff ffa6 	bl	8007e70 <sbrk_aligned>
 8007f24:	3001      	adds	r0, #1
 8007f26:	d03a      	beq.n	8007f9e <_malloc_r+0xea>
 8007f28:	6823      	ldr	r3, [r4, #0]
 8007f2a:	442b      	add	r3, r5
 8007f2c:	6023      	str	r3, [r4, #0]
 8007f2e:	f8d8 3000 	ldr.w	r3, [r8]
 8007f32:	685a      	ldr	r2, [r3, #4]
 8007f34:	bb62      	cbnz	r2, 8007f90 <_malloc_r+0xdc>
 8007f36:	f8c8 7000 	str.w	r7, [r8]
 8007f3a:	e00f      	b.n	8007f5c <_malloc_r+0xa8>
 8007f3c:	6822      	ldr	r2, [r4, #0]
 8007f3e:	1b52      	subs	r2, r2, r5
 8007f40:	d420      	bmi.n	8007f84 <_malloc_r+0xd0>
 8007f42:	2a0b      	cmp	r2, #11
 8007f44:	d917      	bls.n	8007f76 <_malloc_r+0xc2>
 8007f46:	1961      	adds	r1, r4, r5
 8007f48:	42a3      	cmp	r3, r4
 8007f4a:	6025      	str	r5, [r4, #0]
 8007f4c:	bf18      	it	ne
 8007f4e:	6059      	strne	r1, [r3, #4]
 8007f50:	6863      	ldr	r3, [r4, #4]
 8007f52:	bf08      	it	eq
 8007f54:	f8c8 1000 	streq.w	r1, [r8]
 8007f58:	5162      	str	r2, [r4, r5]
 8007f5a:	604b      	str	r3, [r1, #4]
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	f000 f82f 	bl	8007fc0 <__malloc_unlock>
 8007f62:	f104 000b 	add.w	r0, r4, #11
 8007f66:	1d23      	adds	r3, r4, #4
 8007f68:	f020 0007 	bic.w	r0, r0, #7
 8007f6c:	1ac2      	subs	r2, r0, r3
 8007f6e:	bf1c      	itt	ne
 8007f70:	1a1b      	subne	r3, r3, r0
 8007f72:	50a3      	strne	r3, [r4, r2]
 8007f74:	e7af      	b.n	8007ed6 <_malloc_r+0x22>
 8007f76:	6862      	ldr	r2, [r4, #4]
 8007f78:	42a3      	cmp	r3, r4
 8007f7a:	bf0c      	ite	eq
 8007f7c:	f8c8 2000 	streq.w	r2, [r8]
 8007f80:	605a      	strne	r2, [r3, #4]
 8007f82:	e7eb      	b.n	8007f5c <_malloc_r+0xa8>
 8007f84:	4623      	mov	r3, r4
 8007f86:	6864      	ldr	r4, [r4, #4]
 8007f88:	e7ae      	b.n	8007ee8 <_malloc_r+0x34>
 8007f8a:	463c      	mov	r4, r7
 8007f8c:	687f      	ldr	r7, [r7, #4]
 8007f8e:	e7b6      	b.n	8007efe <_malloc_r+0x4a>
 8007f90:	461a      	mov	r2, r3
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	42a3      	cmp	r3, r4
 8007f96:	d1fb      	bne.n	8007f90 <_malloc_r+0xdc>
 8007f98:	2300      	movs	r3, #0
 8007f9a:	6053      	str	r3, [r2, #4]
 8007f9c:	e7de      	b.n	8007f5c <_malloc_r+0xa8>
 8007f9e:	230c      	movs	r3, #12
 8007fa0:	6033      	str	r3, [r6, #0]
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	f000 f80c 	bl	8007fc0 <__malloc_unlock>
 8007fa8:	e794      	b.n	8007ed4 <_malloc_r+0x20>
 8007faa:	6005      	str	r5, [r0, #0]
 8007fac:	e7d6      	b.n	8007f5c <_malloc_r+0xa8>
 8007fae:	bf00      	nop
 8007fb0:	20001d8c 	.word	0x20001d8c

08007fb4 <__malloc_lock>:
 8007fb4:	4801      	ldr	r0, [pc, #4]	@ (8007fbc <__malloc_lock+0x8>)
 8007fb6:	f7ff bf00 	b.w	8007dba <__retarget_lock_acquire_recursive>
 8007fba:	bf00      	nop
 8007fbc:	20001d84 	.word	0x20001d84

08007fc0 <__malloc_unlock>:
 8007fc0:	4801      	ldr	r0, [pc, #4]	@ (8007fc8 <__malloc_unlock+0x8>)
 8007fc2:	f7ff befb 	b.w	8007dbc <__retarget_lock_release_recursive>
 8007fc6:	bf00      	nop
 8007fc8:	20001d84 	.word	0x20001d84

08007fcc <__sfputc_r>:
 8007fcc:	6893      	ldr	r3, [r2, #8]
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	b410      	push	{r4}
 8007fd4:	6093      	str	r3, [r2, #8]
 8007fd6:	da08      	bge.n	8007fea <__sfputc_r+0x1e>
 8007fd8:	6994      	ldr	r4, [r2, #24]
 8007fda:	42a3      	cmp	r3, r4
 8007fdc:	db01      	blt.n	8007fe2 <__sfputc_r+0x16>
 8007fde:	290a      	cmp	r1, #10
 8007fe0:	d103      	bne.n	8007fea <__sfputc_r+0x1e>
 8007fe2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fe6:	f7ff bd7c 	b.w	8007ae2 <__swbuf_r>
 8007fea:	6813      	ldr	r3, [r2, #0]
 8007fec:	1c58      	adds	r0, r3, #1
 8007fee:	6010      	str	r0, [r2, #0]
 8007ff0:	7019      	strb	r1, [r3, #0]
 8007ff2:	4608      	mov	r0, r1
 8007ff4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ff8:	4770      	bx	lr

08007ffa <__sfputs_r>:
 8007ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ffc:	4606      	mov	r6, r0
 8007ffe:	460f      	mov	r7, r1
 8008000:	4614      	mov	r4, r2
 8008002:	18d5      	adds	r5, r2, r3
 8008004:	42ac      	cmp	r4, r5
 8008006:	d101      	bne.n	800800c <__sfputs_r+0x12>
 8008008:	2000      	movs	r0, #0
 800800a:	e007      	b.n	800801c <__sfputs_r+0x22>
 800800c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008010:	463a      	mov	r2, r7
 8008012:	4630      	mov	r0, r6
 8008014:	f7ff ffda 	bl	8007fcc <__sfputc_r>
 8008018:	1c43      	adds	r3, r0, #1
 800801a:	d1f3      	bne.n	8008004 <__sfputs_r+0xa>
 800801c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008020 <_vfiprintf_r>:
 8008020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008024:	460d      	mov	r5, r1
 8008026:	b09d      	sub	sp, #116	@ 0x74
 8008028:	4614      	mov	r4, r2
 800802a:	4698      	mov	r8, r3
 800802c:	4606      	mov	r6, r0
 800802e:	b118      	cbz	r0, 8008038 <_vfiprintf_r+0x18>
 8008030:	6a03      	ldr	r3, [r0, #32]
 8008032:	b90b      	cbnz	r3, 8008038 <_vfiprintf_r+0x18>
 8008034:	f7ff fc64 	bl	8007900 <__sinit>
 8008038:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800803a:	07d9      	lsls	r1, r3, #31
 800803c:	d405      	bmi.n	800804a <_vfiprintf_r+0x2a>
 800803e:	89ab      	ldrh	r3, [r5, #12]
 8008040:	059a      	lsls	r2, r3, #22
 8008042:	d402      	bmi.n	800804a <_vfiprintf_r+0x2a>
 8008044:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008046:	f7ff feb8 	bl	8007dba <__retarget_lock_acquire_recursive>
 800804a:	89ab      	ldrh	r3, [r5, #12]
 800804c:	071b      	lsls	r3, r3, #28
 800804e:	d501      	bpl.n	8008054 <_vfiprintf_r+0x34>
 8008050:	692b      	ldr	r3, [r5, #16]
 8008052:	b99b      	cbnz	r3, 800807c <_vfiprintf_r+0x5c>
 8008054:	4629      	mov	r1, r5
 8008056:	4630      	mov	r0, r6
 8008058:	f7ff fd82 	bl	8007b60 <__swsetup_r>
 800805c:	b170      	cbz	r0, 800807c <_vfiprintf_r+0x5c>
 800805e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008060:	07dc      	lsls	r4, r3, #31
 8008062:	d504      	bpl.n	800806e <_vfiprintf_r+0x4e>
 8008064:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008068:	b01d      	add	sp, #116	@ 0x74
 800806a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800806e:	89ab      	ldrh	r3, [r5, #12]
 8008070:	0598      	lsls	r0, r3, #22
 8008072:	d4f7      	bmi.n	8008064 <_vfiprintf_r+0x44>
 8008074:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008076:	f7ff fea1 	bl	8007dbc <__retarget_lock_release_recursive>
 800807a:	e7f3      	b.n	8008064 <_vfiprintf_r+0x44>
 800807c:	2300      	movs	r3, #0
 800807e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008080:	2320      	movs	r3, #32
 8008082:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008086:	f8cd 800c 	str.w	r8, [sp, #12]
 800808a:	2330      	movs	r3, #48	@ 0x30
 800808c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800823c <_vfiprintf_r+0x21c>
 8008090:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008094:	f04f 0901 	mov.w	r9, #1
 8008098:	4623      	mov	r3, r4
 800809a:	469a      	mov	sl, r3
 800809c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080a0:	b10a      	cbz	r2, 80080a6 <_vfiprintf_r+0x86>
 80080a2:	2a25      	cmp	r2, #37	@ 0x25
 80080a4:	d1f9      	bne.n	800809a <_vfiprintf_r+0x7a>
 80080a6:	ebba 0b04 	subs.w	fp, sl, r4
 80080aa:	d00b      	beq.n	80080c4 <_vfiprintf_r+0xa4>
 80080ac:	465b      	mov	r3, fp
 80080ae:	4622      	mov	r2, r4
 80080b0:	4629      	mov	r1, r5
 80080b2:	4630      	mov	r0, r6
 80080b4:	f7ff ffa1 	bl	8007ffa <__sfputs_r>
 80080b8:	3001      	adds	r0, #1
 80080ba:	f000 80a7 	beq.w	800820c <_vfiprintf_r+0x1ec>
 80080be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080c0:	445a      	add	r2, fp
 80080c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80080c4:	f89a 3000 	ldrb.w	r3, [sl]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f000 809f 	beq.w	800820c <_vfiprintf_r+0x1ec>
 80080ce:	2300      	movs	r3, #0
 80080d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80080d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080d8:	f10a 0a01 	add.w	sl, sl, #1
 80080dc:	9304      	str	r3, [sp, #16]
 80080de:	9307      	str	r3, [sp, #28]
 80080e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80080e6:	4654      	mov	r4, sl
 80080e8:	2205      	movs	r2, #5
 80080ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080ee:	4853      	ldr	r0, [pc, #332]	@ (800823c <_vfiprintf_r+0x21c>)
 80080f0:	f7f8 f846 	bl	8000180 <memchr>
 80080f4:	9a04      	ldr	r2, [sp, #16]
 80080f6:	b9d8      	cbnz	r0, 8008130 <_vfiprintf_r+0x110>
 80080f8:	06d1      	lsls	r1, r2, #27
 80080fa:	bf44      	itt	mi
 80080fc:	2320      	movmi	r3, #32
 80080fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008102:	0713      	lsls	r3, r2, #28
 8008104:	bf44      	itt	mi
 8008106:	232b      	movmi	r3, #43	@ 0x2b
 8008108:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800810c:	f89a 3000 	ldrb.w	r3, [sl]
 8008110:	2b2a      	cmp	r3, #42	@ 0x2a
 8008112:	d015      	beq.n	8008140 <_vfiprintf_r+0x120>
 8008114:	9a07      	ldr	r2, [sp, #28]
 8008116:	4654      	mov	r4, sl
 8008118:	2000      	movs	r0, #0
 800811a:	f04f 0c0a 	mov.w	ip, #10
 800811e:	4621      	mov	r1, r4
 8008120:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008124:	3b30      	subs	r3, #48	@ 0x30
 8008126:	2b09      	cmp	r3, #9
 8008128:	d94b      	bls.n	80081c2 <_vfiprintf_r+0x1a2>
 800812a:	b1b0      	cbz	r0, 800815a <_vfiprintf_r+0x13a>
 800812c:	9207      	str	r2, [sp, #28]
 800812e:	e014      	b.n	800815a <_vfiprintf_r+0x13a>
 8008130:	eba0 0308 	sub.w	r3, r0, r8
 8008134:	fa09 f303 	lsl.w	r3, r9, r3
 8008138:	4313      	orrs	r3, r2
 800813a:	9304      	str	r3, [sp, #16]
 800813c:	46a2      	mov	sl, r4
 800813e:	e7d2      	b.n	80080e6 <_vfiprintf_r+0xc6>
 8008140:	9b03      	ldr	r3, [sp, #12]
 8008142:	1d19      	adds	r1, r3, #4
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	9103      	str	r1, [sp, #12]
 8008148:	2b00      	cmp	r3, #0
 800814a:	bfbb      	ittet	lt
 800814c:	425b      	neglt	r3, r3
 800814e:	f042 0202 	orrlt.w	r2, r2, #2
 8008152:	9307      	strge	r3, [sp, #28]
 8008154:	9307      	strlt	r3, [sp, #28]
 8008156:	bfb8      	it	lt
 8008158:	9204      	strlt	r2, [sp, #16]
 800815a:	7823      	ldrb	r3, [r4, #0]
 800815c:	2b2e      	cmp	r3, #46	@ 0x2e
 800815e:	d10a      	bne.n	8008176 <_vfiprintf_r+0x156>
 8008160:	7863      	ldrb	r3, [r4, #1]
 8008162:	2b2a      	cmp	r3, #42	@ 0x2a
 8008164:	d132      	bne.n	80081cc <_vfiprintf_r+0x1ac>
 8008166:	9b03      	ldr	r3, [sp, #12]
 8008168:	1d1a      	adds	r2, r3, #4
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	9203      	str	r2, [sp, #12]
 800816e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008172:	3402      	adds	r4, #2
 8008174:	9305      	str	r3, [sp, #20]
 8008176:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800824c <_vfiprintf_r+0x22c>
 800817a:	7821      	ldrb	r1, [r4, #0]
 800817c:	2203      	movs	r2, #3
 800817e:	4650      	mov	r0, sl
 8008180:	f7f7 fffe 	bl	8000180 <memchr>
 8008184:	b138      	cbz	r0, 8008196 <_vfiprintf_r+0x176>
 8008186:	9b04      	ldr	r3, [sp, #16]
 8008188:	eba0 000a 	sub.w	r0, r0, sl
 800818c:	2240      	movs	r2, #64	@ 0x40
 800818e:	4082      	lsls	r2, r0
 8008190:	4313      	orrs	r3, r2
 8008192:	3401      	adds	r4, #1
 8008194:	9304      	str	r3, [sp, #16]
 8008196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800819a:	4829      	ldr	r0, [pc, #164]	@ (8008240 <_vfiprintf_r+0x220>)
 800819c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081a0:	2206      	movs	r2, #6
 80081a2:	f7f7 ffed 	bl	8000180 <memchr>
 80081a6:	2800      	cmp	r0, #0
 80081a8:	d03f      	beq.n	800822a <_vfiprintf_r+0x20a>
 80081aa:	4b26      	ldr	r3, [pc, #152]	@ (8008244 <_vfiprintf_r+0x224>)
 80081ac:	bb1b      	cbnz	r3, 80081f6 <_vfiprintf_r+0x1d6>
 80081ae:	9b03      	ldr	r3, [sp, #12]
 80081b0:	3307      	adds	r3, #7
 80081b2:	f023 0307 	bic.w	r3, r3, #7
 80081b6:	3308      	adds	r3, #8
 80081b8:	9303      	str	r3, [sp, #12]
 80081ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081bc:	443b      	add	r3, r7
 80081be:	9309      	str	r3, [sp, #36]	@ 0x24
 80081c0:	e76a      	b.n	8008098 <_vfiprintf_r+0x78>
 80081c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80081c6:	460c      	mov	r4, r1
 80081c8:	2001      	movs	r0, #1
 80081ca:	e7a8      	b.n	800811e <_vfiprintf_r+0xfe>
 80081cc:	2300      	movs	r3, #0
 80081ce:	3401      	adds	r4, #1
 80081d0:	9305      	str	r3, [sp, #20]
 80081d2:	4619      	mov	r1, r3
 80081d4:	f04f 0c0a 	mov.w	ip, #10
 80081d8:	4620      	mov	r0, r4
 80081da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081de:	3a30      	subs	r2, #48	@ 0x30
 80081e0:	2a09      	cmp	r2, #9
 80081e2:	d903      	bls.n	80081ec <_vfiprintf_r+0x1cc>
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d0c6      	beq.n	8008176 <_vfiprintf_r+0x156>
 80081e8:	9105      	str	r1, [sp, #20]
 80081ea:	e7c4      	b.n	8008176 <_vfiprintf_r+0x156>
 80081ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80081f0:	4604      	mov	r4, r0
 80081f2:	2301      	movs	r3, #1
 80081f4:	e7f0      	b.n	80081d8 <_vfiprintf_r+0x1b8>
 80081f6:	ab03      	add	r3, sp, #12
 80081f8:	9300      	str	r3, [sp, #0]
 80081fa:	462a      	mov	r2, r5
 80081fc:	4b12      	ldr	r3, [pc, #72]	@ (8008248 <_vfiprintf_r+0x228>)
 80081fe:	a904      	add	r1, sp, #16
 8008200:	4630      	mov	r0, r6
 8008202:	f3af 8000 	nop.w
 8008206:	4607      	mov	r7, r0
 8008208:	1c78      	adds	r0, r7, #1
 800820a:	d1d6      	bne.n	80081ba <_vfiprintf_r+0x19a>
 800820c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800820e:	07d9      	lsls	r1, r3, #31
 8008210:	d405      	bmi.n	800821e <_vfiprintf_r+0x1fe>
 8008212:	89ab      	ldrh	r3, [r5, #12]
 8008214:	059a      	lsls	r2, r3, #22
 8008216:	d402      	bmi.n	800821e <_vfiprintf_r+0x1fe>
 8008218:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800821a:	f7ff fdcf 	bl	8007dbc <__retarget_lock_release_recursive>
 800821e:	89ab      	ldrh	r3, [r5, #12]
 8008220:	065b      	lsls	r3, r3, #25
 8008222:	f53f af1f 	bmi.w	8008064 <_vfiprintf_r+0x44>
 8008226:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008228:	e71e      	b.n	8008068 <_vfiprintf_r+0x48>
 800822a:	ab03      	add	r3, sp, #12
 800822c:	9300      	str	r3, [sp, #0]
 800822e:	462a      	mov	r2, r5
 8008230:	4b05      	ldr	r3, [pc, #20]	@ (8008248 <_vfiprintf_r+0x228>)
 8008232:	a904      	add	r1, sp, #16
 8008234:	4630      	mov	r0, r6
 8008236:	f000 f879 	bl	800832c <_printf_i>
 800823a:	e7e4      	b.n	8008206 <_vfiprintf_r+0x1e6>
 800823c:	08008c44 	.word	0x08008c44
 8008240:	08008c4e 	.word	0x08008c4e
 8008244:	00000000 	.word	0x00000000
 8008248:	08007ffb 	.word	0x08007ffb
 800824c:	08008c4a 	.word	0x08008c4a

08008250 <_printf_common>:
 8008250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008254:	4616      	mov	r6, r2
 8008256:	4698      	mov	r8, r3
 8008258:	688a      	ldr	r2, [r1, #8]
 800825a:	690b      	ldr	r3, [r1, #16]
 800825c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008260:	4293      	cmp	r3, r2
 8008262:	bfb8      	it	lt
 8008264:	4613      	movlt	r3, r2
 8008266:	6033      	str	r3, [r6, #0]
 8008268:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800826c:	4607      	mov	r7, r0
 800826e:	460c      	mov	r4, r1
 8008270:	b10a      	cbz	r2, 8008276 <_printf_common+0x26>
 8008272:	3301      	adds	r3, #1
 8008274:	6033      	str	r3, [r6, #0]
 8008276:	6823      	ldr	r3, [r4, #0]
 8008278:	0699      	lsls	r1, r3, #26
 800827a:	bf42      	ittt	mi
 800827c:	6833      	ldrmi	r3, [r6, #0]
 800827e:	3302      	addmi	r3, #2
 8008280:	6033      	strmi	r3, [r6, #0]
 8008282:	6825      	ldr	r5, [r4, #0]
 8008284:	f015 0506 	ands.w	r5, r5, #6
 8008288:	d106      	bne.n	8008298 <_printf_common+0x48>
 800828a:	f104 0a19 	add.w	sl, r4, #25
 800828e:	68e3      	ldr	r3, [r4, #12]
 8008290:	6832      	ldr	r2, [r6, #0]
 8008292:	1a9b      	subs	r3, r3, r2
 8008294:	42ab      	cmp	r3, r5
 8008296:	dc26      	bgt.n	80082e6 <_printf_common+0x96>
 8008298:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800829c:	6822      	ldr	r2, [r4, #0]
 800829e:	3b00      	subs	r3, #0
 80082a0:	bf18      	it	ne
 80082a2:	2301      	movne	r3, #1
 80082a4:	0692      	lsls	r2, r2, #26
 80082a6:	d42b      	bmi.n	8008300 <_printf_common+0xb0>
 80082a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80082ac:	4641      	mov	r1, r8
 80082ae:	4638      	mov	r0, r7
 80082b0:	47c8      	blx	r9
 80082b2:	3001      	adds	r0, #1
 80082b4:	d01e      	beq.n	80082f4 <_printf_common+0xa4>
 80082b6:	6823      	ldr	r3, [r4, #0]
 80082b8:	6922      	ldr	r2, [r4, #16]
 80082ba:	f003 0306 	and.w	r3, r3, #6
 80082be:	2b04      	cmp	r3, #4
 80082c0:	bf02      	ittt	eq
 80082c2:	68e5      	ldreq	r5, [r4, #12]
 80082c4:	6833      	ldreq	r3, [r6, #0]
 80082c6:	1aed      	subeq	r5, r5, r3
 80082c8:	68a3      	ldr	r3, [r4, #8]
 80082ca:	bf0c      	ite	eq
 80082cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082d0:	2500      	movne	r5, #0
 80082d2:	4293      	cmp	r3, r2
 80082d4:	bfc4      	itt	gt
 80082d6:	1a9b      	subgt	r3, r3, r2
 80082d8:	18ed      	addgt	r5, r5, r3
 80082da:	2600      	movs	r6, #0
 80082dc:	341a      	adds	r4, #26
 80082de:	42b5      	cmp	r5, r6
 80082e0:	d11a      	bne.n	8008318 <_printf_common+0xc8>
 80082e2:	2000      	movs	r0, #0
 80082e4:	e008      	b.n	80082f8 <_printf_common+0xa8>
 80082e6:	2301      	movs	r3, #1
 80082e8:	4652      	mov	r2, sl
 80082ea:	4641      	mov	r1, r8
 80082ec:	4638      	mov	r0, r7
 80082ee:	47c8      	blx	r9
 80082f0:	3001      	adds	r0, #1
 80082f2:	d103      	bne.n	80082fc <_printf_common+0xac>
 80082f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80082f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082fc:	3501      	adds	r5, #1
 80082fe:	e7c6      	b.n	800828e <_printf_common+0x3e>
 8008300:	18e1      	adds	r1, r4, r3
 8008302:	1c5a      	adds	r2, r3, #1
 8008304:	2030      	movs	r0, #48	@ 0x30
 8008306:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800830a:	4422      	add	r2, r4
 800830c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008310:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008314:	3302      	adds	r3, #2
 8008316:	e7c7      	b.n	80082a8 <_printf_common+0x58>
 8008318:	2301      	movs	r3, #1
 800831a:	4622      	mov	r2, r4
 800831c:	4641      	mov	r1, r8
 800831e:	4638      	mov	r0, r7
 8008320:	47c8      	blx	r9
 8008322:	3001      	adds	r0, #1
 8008324:	d0e6      	beq.n	80082f4 <_printf_common+0xa4>
 8008326:	3601      	adds	r6, #1
 8008328:	e7d9      	b.n	80082de <_printf_common+0x8e>
	...

0800832c <_printf_i>:
 800832c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008330:	7e0f      	ldrb	r7, [r1, #24]
 8008332:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008334:	2f78      	cmp	r7, #120	@ 0x78
 8008336:	4691      	mov	r9, r2
 8008338:	4680      	mov	r8, r0
 800833a:	460c      	mov	r4, r1
 800833c:	469a      	mov	sl, r3
 800833e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008342:	d807      	bhi.n	8008354 <_printf_i+0x28>
 8008344:	2f62      	cmp	r7, #98	@ 0x62
 8008346:	d80a      	bhi.n	800835e <_printf_i+0x32>
 8008348:	2f00      	cmp	r7, #0
 800834a:	f000 80d1 	beq.w	80084f0 <_printf_i+0x1c4>
 800834e:	2f58      	cmp	r7, #88	@ 0x58
 8008350:	f000 80b8 	beq.w	80084c4 <_printf_i+0x198>
 8008354:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008358:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800835c:	e03a      	b.n	80083d4 <_printf_i+0xa8>
 800835e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008362:	2b15      	cmp	r3, #21
 8008364:	d8f6      	bhi.n	8008354 <_printf_i+0x28>
 8008366:	a101      	add	r1, pc, #4	@ (adr r1, 800836c <_printf_i+0x40>)
 8008368:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800836c:	080083c5 	.word	0x080083c5
 8008370:	080083d9 	.word	0x080083d9
 8008374:	08008355 	.word	0x08008355
 8008378:	08008355 	.word	0x08008355
 800837c:	08008355 	.word	0x08008355
 8008380:	08008355 	.word	0x08008355
 8008384:	080083d9 	.word	0x080083d9
 8008388:	08008355 	.word	0x08008355
 800838c:	08008355 	.word	0x08008355
 8008390:	08008355 	.word	0x08008355
 8008394:	08008355 	.word	0x08008355
 8008398:	080084d7 	.word	0x080084d7
 800839c:	08008403 	.word	0x08008403
 80083a0:	08008491 	.word	0x08008491
 80083a4:	08008355 	.word	0x08008355
 80083a8:	08008355 	.word	0x08008355
 80083ac:	080084f9 	.word	0x080084f9
 80083b0:	08008355 	.word	0x08008355
 80083b4:	08008403 	.word	0x08008403
 80083b8:	08008355 	.word	0x08008355
 80083bc:	08008355 	.word	0x08008355
 80083c0:	08008499 	.word	0x08008499
 80083c4:	6833      	ldr	r3, [r6, #0]
 80083c6:	1d1a      	adds	r2, r3, #4
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	6032      	str	r2, [r6, #0]
 80083cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80083d4:	2301      	movs	r3, #1
 80083d6:	e09c      	b.n	8008512 <_printf_i+0x1e6>
 80083d8:	6833      	ldr	r3, [r6, #0]
 80083da:	6820      	ldr	r0, [r4, #0]
 80083dc:	1d19      	adds	r1, r3, #4
 80083de:	6031      	str	r1, [r6, #0]
 80083e0:	0606      	lsls	r6, r0, #24
 80083e2:	d501      	bpl.n	80083e8 <_printf_i+0xbc>
 80083e4:	681d      	ldr	r5, [r3, #0]
 80083e6:	e003      	b.n	80083f0 <_printf_i+0xc4>
 80083e8:	0645      	lsls	r5, r0, #25
 80083ea:	d5fb      	bpl.n	80083e4 <_printf_i+0xb8>
 80083ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80083f0:	2d00      	cmp	r5, #0
 80083f2:	da03      	bge.n	80083fc <_printf_i+0xd0>
 80083f4:	232d      	movs	r3, #45	@ 0x2d
 80083f6:	426d      	negs	r5, r5
 80083f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083fc:	4858      	ldr	r0, [pc, #352]	@ (8008560 <_printf_i+0x234>)
 80083fe:	230a      	movs	r3, #10
 8008400:	e011      	b.n	8008426 <_printf_i+0xfa>
 8008402:	6821      	ldr	r1, [r4, #0]
 8008404:	6833      	ldr	r3, [r6, #0]
 8008406:	0608      	lsls	r0, r1, #24
 8008408:	f853 5b04 	ldr.w	r5, [r3], #4
 800840c:	d402      	bmi.n	8008414 <_printf_i+0xe8>
 800840e:	0649      	lsls	r1, r1, #25
 8008410:	bf48      	it	mi
 8008412:	b2ad      	uxthmi	r5, r5
 8008414:	2f6f      	cmp	r7, #111	@ 0x6f
 8008416:	4852      	ldr	r0, [pc, #328]	@ (8008560 <_printf_i+0x234>)
 8008418:	6033      	str	r3, [r6, #0]
 800841a:	bf14      	ite	ne
 800841c:	230a      	movne	r3, #10
 800841e:	2308      	moveq	r3, #8
 8008420:	2100      	movs	r1, #0
 8008422:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008426:	6866      	ldr	r6, [r4, #4]
 8008428:	60a6      	str	r6, [r4, #8]
 800842a:	2e00      	cmp	r6, #0
 800842c:	db05      	blt.n	800843a <_printf_i+0x10e>
 800842e:	6821      	ldr	r1, [r4, #0]
 8008430:	432e      	orrs	r6, r5
 8008432:	f021 0104 	bic.w	r1, r1, #4
 8008436:	6021      	str	r1, [r4, #0]
 8008438:	d04b      	beq.n	80084d2 <_printf_i+0x1a6>
 800843a:	4616      	mov	r6, r2
 800843c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008440:	fb03 5711 	mls	r7, r3, r1, r5
 8008444:	5dc7      	ldrb	r7, [r0, r7]
 8008446:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800844a:	462f      	mov	r7, r5
 800844c:	42bb      	cmp	r3, r7
 800844e:	460d      	mov	r5, r1
 8008450:	d9f4      	bls.n	800843c <_printf_i+0x110>
 8008452:	2b08      	cmp	r3, #8
 8008454:	d10b      	bne.n	800846e <_printf_i+0x142>
 8008456:	6823      	ldr	r3, [r4, #0]
 8008458:	07df      	lsls	r7, r3, #31
 800845a:	d508      	bpl.n	800846e <_printf_i+0x142>
 800845c:	6923      	ldr	r3, [r4, #16]
 800845e:	6861      	ldr	r1, [r4, #4]
 8008460:	4299      	cmp	r1, r3
 8008462:	bfde      	ittt	le
 8008464:	2330      	movle	r3, #48	@ 0x30
 8008466:	f806 3c01 	strble.w	r3, [r6, #-1]
 800846a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800846e:	1b92      	subs	r2, r2, r6
 8008470:	6122      	str	r2, [r4, #16]
 8008472:	f8cd a000 	str.w	sl, [sp]
 8008476:	464b      	mov	r3, r9
 8008478:	aa03      	add	r2, sp, #12
 800847a:	4621      	mov	r1, r4
 800847c:	4640      	mov	r0, r8
 800847e:	f7ff fee7 	bl	8008250 <_printf_common>
 8008482:	3001      	adds	r0, #1
 8008484:	d14a      	bne.n	800851c <_printf_i+0x1f0>
 8008486:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800848a:	b004      	add	sp, #16
 800848c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	f043 0320 	orr.w	r3, r3, #32
 8008496:	6023      	str	r3, [r4, #0]
 8008498:	4832      	ldr	r0, [pc, #200]	@ (8008564 <_printf_i+0x238>)
 800849a:	2778      	movs	r7, #120	@ 0x78
 800849c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80084a0:	6823      	ldr	r3, [r4, #0]
 80084a2:	6831      	ldr	r1, [r6, #0]
 80084a4:	061f      	lsls	r7, r3, #24
 80084a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80084aa:	d402      	bmi.n	80084b2 <_printf_i+0x186>
 80084ac:	065f      	lsls	r7, r3, #25
 80084ae:	bf48      	it	mi
 80084b0:	b2ad      	uxthmi	r5, r5
 80084b2:	6031      	str	r1, [r6, #0]
 80084b4:	07d9      	lsls	r1, r3, #31
 80084b6:	bf44      	itt	mi
 80084b8:	f043 0320 	orrmi.w	r3, r3, #32
 80084bc:	6023      	strmi	r3, [r4, #0]
 80084be:	b11d      	cbz	r5, 80084c8 <_printf_i+0x19c>
 80084c0:	2310      	movs	r3, #16
 80084c2:	e7ad      	b.n	8008420 <_printf_i+0xf4>
 80084c4:	4826      	ldr	r0, [pc, #152]	@ (8008560 <_printf_i+0x234>)
 80084c6:	e7e9      	b.n	800849c <_printf_i+0x170>
 80084c8:	6823      	ldr	r3, [r4, #0]
 80084ca:	f023 0320 	bic.w	r3, r3, #32
 80084ce:	6023      	str	r3, [r4, #0]
 80084d0:	e7f6      	b.n	80084c0 <_printf_i+0x194>
 80084d2:	4616      	mov	r6, r2
 80084d4:	e7bd      	b.n	8008452 <_printf_i+0x126>
 80084d6:	6833      	ldr	r3, [r6, #0]
 80084d8:	6825      	ldr	r5, [r4, #0]
 80084da:	6961      	ldr	r1, [r4, #20]
 80084dc:	1d18      	adds	r0, r3, #4
 80084de:	6030      	str	r0, [r6, #0]
 80084e0:	062e      	lsls	r6, r5, #24
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	d501      	bpl.n	80084ea <_printf_i+0x1be>
 80084e6:	6019      	str	r1, [r3, #0]
 80084e8:	e002      	b.n	80084f0 <_printf_i+0x1c4>
 80084ea:	0668      	lsls	r0, r5, #25
 80084ec:	d5fb      	bpl.n	80084e6 <_printf_i+0x1ba>
 80084ee:	8019      	strh	r1, [r3, #0]
 80084f0:	2300      	movs	r3, #0
 80084f2:	6123      	str	r3, [r4, #16]
 80084f4:	4616      	mov	r6, r2
 80084f6:	e7bc      	b.n	8008472 <_printf_i+0x146>
 80084f8:	6833      	ldr	r3, [r6, #0]
 80084fa:	1d1a      	adds	r2, r3, #4
 80084fc:	6032      	str	r2, [r6, #0]
 80084fe:	681e      	ldr	r6, [r3, #0]
 8008500:	6862      	ldr	r2, [r4, #4]
 8008502:	2100      	movs	r1, #0
 8008504:	4630      	mov	r0, r6
 8008506:	f7f7 fe3b 	bl	8000180 <memchr>
 800850a:	b108      	cbz	r0, 8008510 <_printf_i+0x1e4>
 800850c:	1b80      	subs	r0, r0, r6
 800850e:	6060      	str	r0, [r4, #4]
 8008510:	6863      	ldr	r3, [r4, #4]
 8008512:	6123      	str	r3, [r4, #16]
 8008514:	2300      	movs	r3, #0
 8008516:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800851a:	e7aa      	b.n	8008472 <_printf_i+0x146>
 800851c:	6923      	ldr	r3, [r4, #16]
 800851e:	4632      	mov	r2, r6
 8008520:	4649      	mov	r1, r9
 8008522:	4640      	mov	r0, r8
 8008524:	47d0      	blx	sl
 8008526:	3001      	adds	r0, #1
 8008528:	d0ad      	beq.n	8008486 <_printf_i+0x15a>
 800852a:	6823      	ldr	r3, [r4, #0]
 800852c:	079b      	lsls	r3, r3, #30
 800852e:	d413      	bmi.n	8008558 <_printf_i+0x22c>
 8008530:	68e0      	ldr	r0, [r4, #12]
 8008532:	9b03      	ldr	r3, [sp, #12]
 8008534:	4298      	cmp	r0, r3
 8008536:	bfb8      	it	lt
 8008538:	4618      	movlt	r0, r3
 800853a:	e7a6      	b.n	800848a <_printf_i+0x15e>
 800853c:	2301      	movs	r3, #1
 800853e:	4632      	mov	r2, r6
 8008540:	4649      	mov	r1, r9
 8008542:	4640      	mov	r0, r8
 8008544:	47d0      	blx	sl
 8008546:	3001      	adds	r0, #1
 8008548:	d09d      	beq.n	8008486 <_printf_i+0x15a>
 800854a:	3501      	adds	r5, #1
 800854c:	68e3      	ldr	r3, [r4, #12]
 800854e:	9903      	ldr	r1, [sp, #12]
 8008550:	1a5b      	subs	r3, r3, r1
 8008552:	42ab      	cmp	r3, r5
 8008554:	dcf2      	bgt.n	800853c <_printf_i+0x210>
 8008556:	e7eb      	b.n	8008530 <_printf_i+0x204>
 8008558:	2500      	movs	r5, #0
 800855a:	f104 0619 	add.w	r6, r4, #25
 800855e:	e7f5      	b.n	800854c <_printf_i+0x220>
 8008560:	08008c55 	.word	0x08008c55
 8008564:	08008c66 	.word	0x08008c66

08008568 <__sflush_r>:
 8008568:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800856c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008570:	0716      	lsls	r6, r2, #28
 8008572:	4605      	mov	r5, r0
 8008574:	460c      	mov	r4, r1
 8008576:	d454      	bmi.n	8008622 <__sflush_r+0xba>
 8008578:	684b      	ldr	r3, [r1, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	dc02      	bgt.n	8008584 <__sflush_r+0x1c>
 800857e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008580:	2b00      	cmp	r3, #0
 8008582:	dd48      	ble.n	8008616 <__sflush_r+0xae>
 8008584:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008586:	2e00      	cmp	r6, #0
 8008588:	d045      	beq.n	8008616 <__sflush_r+0xae>
 800858a:	2300      	movs	r3, #0
 800858c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008590:	682f      	ldr	r7, [r5, #0]
 8008592:	6a21      	ldr	r1, [r4, #32]
 8008594:	602b      	str	r3, [r5, #0]
 8008596:	d030      	beq.n	80085fa <__sflush_r+0x92>
 8008598:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800859a:	89a3      	ldrh	r3, [r4, #12]
 800859c:	0759      	lsls	r1, r3, #29
 800859e:	d505      	bpl.n	80085ac <__sflush_r+0x44>
 80085a0:	6863      	ldr	r3, [r4, #4]
 80085a2:	1ad2      	subs	r2, r2, r3
 80085a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80085a6:	b10b      	cbz	r3, 80085ac <__sflush_r+0x44>
 80085a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80085aa:	1ad2      	subs	r2, r2, r3
 80085ac:	2300      	movs	r3, #0
 80085ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085b0:	6a21      	ldr	r1, [r4, #32]
 80085b2:	4628      	mov	r0, r5
 80085b4:	47b0      	blx	r6
 80085b6:	1c43      	adds	r3, r0, #1
 80085b8:	89a3      	ldrh	r3, [r4, #12]
 80085ba:	d106      	bne.n	80085ca <__sflush_r+0x62>
 80085bc:	6829      	ldr	r1, [r5, #0]
 80085be:	291d      	cmp	r1, #29
 80085c0:	d82b      	bhi.n	800861a <__sflush_r+0xb2>
 80085c2:	4a2a      	ldr	r2, [pc, #168]	@ (800866c <__sflush_r+0x104>)
 80085c4:	40ca      	lsrs	r2, r1
 80085c6:	07d6      	lsls	r6, r2, #31
 80085c8:	d527      	bpl.n	800861a <__sflush_r+0xb2>
 80085ca:	2200      	movs	r2, #0
 80085cc:	6062      	str	r2, [r4, #4]
 80085ce:	04d9      	lsls	r1, r3, #19
 80085d0:	6922      	ldr	r2, [r4, #16]
 80085d2:	6022      	str	r2, [r4, #0]
 80085d4:	d504      	bpl.n	80085e0 <__sflush_r+0x78>
 80085d6:	1c42      	adds	r2, r0, #1
 80085d8:	d101      	bne.n	80085de <__sflush_r+0x76>
 80085da:	682b      	ldr	r3, [r5, #0]
 80085dc:	b903      	cbnz	r3, 80085e0 <__sflush_r+0x78>
 80085de:	6560      	str	r0, [r4, #84]	@ 0x54
 80085e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085e2:	602f      	str	r7, [r5, #0]
 80085e4:	b1b9      	cbz	r1, 8008616 <__sflush_r+0xae>
 80085e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80085ea:	4299      	cmp	r1, r3
 80085ec:	d002      	beq.n	80085f4 <__sflush_r+0x8c>
 80085ee:	4628      	mov	r0, r5
 80085f0:	f7ff fbf4 	bl	8007ddc <_free_r>
 80085f4:	2300      	movs	r3, #0
 80085f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80085f8:	e00d      	b.n	8008616 <__sflush_r+0xae>
 80085fa:	2301      	movs	r3, #1
 80085fc:	4628      	mov	r0, r5
 80085fe:	47b0      	blx	r6
 8008600:	4602      	mov	r2, r0
 8008602:	1c50      	adds	r0, r2, #1
 8008604:	d1c9      	bne.n	800859a <__sflush_r+0x32>
 8008606:	682b      	ldr	r3, [r5, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d0c6      	beq.n	800859a <__sflush_r+0x32>
 800860c:	2b1d      	cmp	r3, #29
 800860e:	d001      	beq.n	8008614 <__sflush_r+0xac>
 8008610:	2b16      	cmp	r3, #22
 8008612:	d11e      	bne.n	8008652 <__sflush_r+0xea>
 8008614:	602f      	str	r7, [r5, #0]
 8008616:	2000      	movs	r0, #0
 8008618:	e022      	b.n	8008660 <__sflush_r+0xf8>
 800861a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800861e:	b21b      	sxth	r3, r3
 8008620:	e01b      	b.n	800865a <__sflush_r+0xf2>
 8008622:	690f      	ldr	r7, [r1, #16]
 8008624:	2f00      	cmp	r7, #0
 8008626:	d0f6      	beq.n	8008616 <__sflush_r+0xae>
 8008628:	0793      	lsls	r3, r2, #30
 800862a:	680e      	ldr	r6, [r1, #0]
 800862c:	bf08      	it	eq
 800862e:	694b      	ldreq	r3, [r1, #20]
 8008630:	600f      	str	r7, [r1, #0]
 8008632:	bf18      	it	ne
 8008634:	2300      	movne	r3, #0
 8008636:	eba6 0807 	sub.w	r8, r6, r7
 800863a:	608b      	str	r3, [r1, #8]
 800863c:	f1b8 0f00 	cmp.w	r8, #0
 8008640:	dde9      	ble.n	8008616 <__sflush_r+0xae>
 8008642:	6a21      	ldr	r1, [r4, #32]
 8008644:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008646:	4643      	mov	r3, r8
 8008648:	463a      	mov	r2, r7
 800864a:	4628      	mov	r0, r5
 800864c:	47b0      	blx	r6
 800864e:	2800      	cmp	r0, #0
 8008650:	dc08      	bgt.n	8008664 <__sflush_r+0xfc>
 8008652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800865a:	81a3      	strh	r3, [r4, #12]
 800865c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008664:	4407      	add	r7, r0
 8008666:	eba8 0800 	sub.w	r8, r8, r0
 800866a:	e7e7      	b.n	800863c <__sflush_r+0xd4>
 800866c:	20400001 	.word	0x20400001

08008670 <_fflush_r>:
 8008670:	b538      	push	{r3, r4, r5, lr}
 8008672:	690b      	ldr	r3, [r1, #16]
 8008674:	4605      	mov	r5, r0
 8008676:	460c      	mov	r4, r1
 8008678:	b913      	cbnz	r3, 8008680 <_fflush_r+0x10>
 800867a:	2500      	movs	r5, #0
 800867c:	4628      	mov	r0, r5
 800867e:	bd38      	pop	{r3, r4, r5, pc}
 8008680:	b118      	cbz	r0, 800868a <_fflush_r+0x1a>
 8008682:	6a03      	ldr	r3, [r0, #32]
 8008684:	b90b      	cbnz	r3, 800868a <_fflush_r+0x1a>
 8008686:	f7ff f93b 	bl	8007900 <__sinit>
 800868a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d0f3      	beq.n	800867a <_fflush_r+0xa>
 8008692:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008694:	07d0      	lsls	r0, r2, #31
 8008696:	d404      	bmi.n	80086a2 <_fflush_r+0x32>
 8008698:	0599      	lsls	r1, r3, #22
 800869a:	d402      	bmi.n	80086a2 <_fflush_r+0x32>
 800869c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800869e:	f7ff fb8c 	bl	8007dba <__retarget_lock_acquire_recursive>
 80086a2:	4628      	mov	r0, r5
 80086a4:	4621      	mov	r1, r4
 80086a6:	f7ff ff5f 	bl	8008568 <__sflush_r>
 80086aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086ac:	07da      	lsls	r2, r3, #31
 80086ae:	4605      	mov	r5, r0
 80086b0:	d4e4      	bmi.n	800867c <_fflush_r+0xc>
 80086b2:	89a3      	ldrh	r3, [r4, #12]
 80086b4:	059b      	lsls	r3, r3, #22
 80086b6:	d4e1      	bmi.n	800867c <_fflush_r+0xc>
 80086b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086ba:	f7ff fb7f 	bl	8007dbc <__retarget_lock_release_recursive>
 80086be:	e7dd      	b.n	800867c <_fflush_r+0xc>

080086c0 <__swhatbuf_r>:
 80086c0:	b570      	push	{r4, r5, r6, lr}
 80086c2:	460c      	mov	r4, r1
 80086c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086c8:	2900      	cmp	r1, #0
 80086ca:	b096      	sub	sp, #88	@ 0x58
 80086cc:	4615      	mov	r5, r2
 80086ce:	461e      	mov	r6, r3
 80086d0:	da0d      	bge.n	80086ee <__swhatbuf_r+0x2e>
 80086d2:	89a3      	ldrh	r3, [r4, #12]
 80086d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80086d8:	f04f 0100 	mov.w	r1, #0
 80086dc:	bf14      	ite	ne
 80086de:	2340      	movne	r3, #64	@ 0x40
 80086e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80086e4:	2000      	movs	r0, #0
 80086e6:	6031      	str	r1, [r6, #0]
 80086e8:	602b      	str	r3, [r5, #0]
 80086ea:	b016      	add	sp, #88	@ 0x58
 80086ec:	bd70      	pop	{r4, r5, r6, pc}
 80086ee:	466a      	mov	r2, sp
 80086f0:	f000 f87c 	bl	80087ec <_fstat_r>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	dbec      	blt.n	80086d2 <__swhatbuf_r+0x12>
 80086f8:	9901      	ldr	r1, [sp, #4]
 80086fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80086fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008702:	4259      	negs	r1, r3
 8008704:	4159      	adcs	r1, r3
 8008706:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800870a:	e7eb      	b.n	80086e4 <__swhatbuf_r+0x24>

0800870c <__smakebuf_r>:
 800870c:	898b      	ldrh	r3, [r1, #12]
 800870e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008710:	079d      	lsls	r5, r3, #30
 8008712:	4606      	mov	r6, r0
 8008714:	460c      	mov	r4, r1
 8008716:	d507      	bpl.n	8008728 <__smakebuf_r+0x1c>
 8008718:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800871c:	6023      	str	r3, [r4, #0]
 800871e:	6123      	str	r3, [r4, #16]
 8008720:	2301      	movs	r3, #1
 8008722:	6163      	str	r3, [r4, #20]
 8008724:	b003      	add	sp, #12
 8008726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008728:	ab01      	add	r3, sp, #4
 800872a:	466a      	mov	r2, sp
 800872c:	f7ff ffc8 	bl	80086c0 <__swhatbuf_r>
 8008730:	9f00      	ldr	r7, [sp, #0]
 8008732:	4605      	mov	r5, r0
 8008734:	4639      	mov	r1, r7
 8008736:	4630      	mov	r0, r6
 8008738:	f7ff fbbc 	bl	8007eb4 <_malloc_r>
 800873c:	b948      	cbnz	r0, 8008752 <__smakebuf_r+0x46>
 800873e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008742:	059a      	lsls	r2, r3, #22
 8008744:	d4ee      	bmi.n	8008724 <__smakebuf_r+0x18>
 8008746:	f023 0303 	bic.w	r3, r3, #3
 800874a:	f043 0302 	orr.w	r3, r3, #2
 800874e:	81a3      	strh	r3, [r4, #12]
 8008750:	e7e2      	b.n	8008718 <__smakebuf_r+0xc>
 8008752:	89a3      	ldrh	r3, [r4, #12]
 8008754:	6020      	str	r0, [r4, #0]
 8008756:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800875a:	81a3      	strh	r3, [r4, #12]
 800875c:	9b01      	ldr	r3, [sp, #4]
 800875e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008762:	b15b      	cbz	r3, 800877c <__smakebuf_r+0x70>
 8008764:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008768:	4630      	mov	r0, r6
 800876a:	f000 f851 	bl	8008810 <_isatty_r>
 800876e:	b128      	cbz	r0, 800877c <__smakebuf_r+0x70>
 8008770:	89a3      	ldrh	r3, [r4, #12]
 8008772:	f023 0303 	bic.w	r3, r3, #3
 8008776:	f043 0301 	orr.w	r3, r3, #1
 800877a:	81a3      	strh	r3, [r4, #12]
 800877c:	89a3      	ldrh	r3, [r4, #12]
 800877e:	431d      	orrs	r5, r3
 8008780:	81a5      	strh	r5, [r4, #12]
 8008782:	e7cf      	b.n	8008724 <__smakebuf_r+0x18>

08008784 <_putc_r>:
 8008784:	b570      	push	{r4, r5, r6, lr}
 8008786:	460d      	mov	r5, r1
 8008788:	4614      	mov	r4, r2
 800878a:	4606      	mov	r6, r0
 800878c:	b118      	cbz	r0, 8008796 <_putc_r+0x12>
 800878e:	6a03      	ldr	r3, [r0, #32]
 8008790:	b90b      	cbnz	r3, 8008796 <_putc_r+0x12>
 8008792:	f7ff f8b5 	bl	8007900 <__sinit>
 8008796:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008798:	07d8      	lsls	r0, r3, #31
 800879a:	d405      	bmi.n	80087a8 <_putc_r+0x24>
 800879c:	89a3      	ldrh	r3, [r4, #12]
 800879e:	0599      	lsls	r1, r3, #22
 80087a0:	d402      	bmi.n	80087a8 <_putc_r+0x24>
 80087a2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087a4:	f7ff fb09 	bl	8007dba <__retarget_lock_acquire_recursive>
 80087a8:	68a3      	ldr	r3, [r4, #8]
 80087aa:	3b01      	subs	r3, #1
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	60a3      	str	r3, [r4, #8]
 80087b0:	da05      	bge.n	80087be <_putc_r+0x3a>
 80087b2:	69a2      	ldr	r2, [r4, #24]
 80087b4:	4293      	cmp	r3, r2
 80087b6:	db12      	blt.n	80087de <_putc_r+0x5a>
 80087b8:	b2eb      	uxtb	r3, r5
 80087ba:	2b0a      	cmp	r3, #10
 80087bc:	d00f      	beq.n	80087de <_putc_r+0x5a>
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	1c5a      	adds	r2, r3, #1
 80087c2:	6022      	str	r2, [r4, #0]
 80087c4:	701d      	strb	r5, [r3, #0]
 80087c6:	b2ed      	uxtb	r5, r5
 80087c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087ca:	07da      	lsls	r2, r3, #31
 80087cc:	d405      	bmi.n	80087da <_putc_r+0x56>
 80087ce:	89a3      	ldrh	r3, [r4, #12]
 80087d0:	059b      	lsls	r3, r3, #22
 80087d2:	d402      	bmi.n	80087da <_putc_r+0x56>
 80087d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087d6:	f7ff faf1 	bl	8007dbc <__retarget_lock_release_recursive>
 80087da:	4628      	mov	r0, r5
 80087dc:	bd70      	pop	{r4, r5, r6, pc}
 80087de:	4629      	mov	r1, r5
 80087e0:	4622      	mov	r2, r4
 80087e2:	4630      	mov	r0, r6
 80087e4:	f7ff f97d 	bl	8007ae2 <__swbuf_r>
 80087e8:	4605      	mov	r5, r0
 80087ea:	e7ed      	b.n	80087c8 <_putc_r+0x44>

080087ec <_fstat_r>:
 80087ec:	b538      	push	{r3, r4, r5, lr}
 80087ee:	4d07      	ldr	r5, [pc, #28]	@ (800880c <_fstat_r+0x20>)
 80087f0:	2300      	movs	r3, #0
 80087f2:	4604      	mov	r4, r0
 80087f4:	4608      	mov	r0, r1
 80087f6:	4611      	mov	r1, r2
 80087f8:	602b      	str	r3, [r5, #0]
 80087fa:	f7f8 fccc 	bl	8001196 <_fstat>
 80087fe:	1c43      	adds	r3, r0, #1
 8008800:	d102      	bne.n	8008808 <_fstat_r+0x1c>
 8008802:	682b      	ldr	r3, [r5, #0]
 8008804:	b103      	cbz	r3, 8008808 <_fstat_r+0x1c>
 8008806:	6023      	str	r3, [r4, #0]
 8008808:	bd38      	pop	{r3, r4, r5, pc}
 800880a:	bf00      	nop
 800880c:	20001d80 	.word	0x20001d80

08008810 <_isatty_r>:
 8008810:	b538      	push	{r3, r4, r5, lr}
 8008812:	4d06      	ldr	r5, [pc, #24]	@ (800882c <_isatty_r+0x1c>)
 8008814:	2300      	movs	r3, #0
 8008816:	4604      	mov	r4, r0
 8008818:	4608      	mov	r0, r1
 800881a:	602b      	str	r3, [r5, #0]
 800881c:	f7f8 fccb 	bl	80011b6 <_isatty>
 8008820:	1c43      	adds	r3, r0, #1
 8008822:	d102      	bne.n	800882a <_isatty_r+0x1a>
 8008824:	682b      	ldr	r3, [r5, #0]
 8008826:	b103      	cbz	r3, 800882a <_isatty_r+0x1a>
 8008828:	6023      	str	r3, [r4, #0]
 800882a:	bd38      	pop	{r3, r4, r5, pc}
 800882c:	20001d80 	.word	0x20001d80

08008830 <_sbrk_r>:
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	4d06      	ldr	r5, [pc, #24]	@ (800884c <_sbrk_r+0x1c>)
 8008834:	2300      	movs	r3, #0
 8008836:	4604      	mov	r4, r0
 8008838:	4608      	mov	r0, r1
 800883a:	602b      	str	r3, [r5, #0]
 800883c:	f7f8 fcd4 	bl	80011e8 <_sbrk>
 8008840:	1c43      	adds	r3, r0, #1
 8008842:	d102      	bne.n	800884a <_sbrk_r+0x1a>
 8008844:	682b      	ldr	r3, [r5, #0]
 8008846:	b103      	cbz	r3, 800884a <_sbrk_r+0x1a>
 8008848:	6023      	str	r3, [r4, #0]
 800884a:	bd38      	pop	{r3, r4, r5, pc}
 800884c:	20001d80 	.word	0x20001d80

08008850 <_init>:
 8008850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008852:	bf00      	nop
 8008854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008856:	bc08      	pop	{r3}
 8008858:	469e      	mov	lr, r3
 800885a:	4770      	bx	lr

0800885c <_fini>:
 800885c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800885e:	bf00      	nop
 8008860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008862:	bc08      	pop	{r3}
 8008864:	469e      	mov	lr, r3
 8008866:	4770      	bx	lr
