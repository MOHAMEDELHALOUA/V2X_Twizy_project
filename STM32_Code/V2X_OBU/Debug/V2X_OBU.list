
V2X_OBU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a3c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08005b7c  08005b7c  00006b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005d34  08005d34  00006d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005d3c  08005d3c  00006d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08005d40  08005d40  00006d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  20000008  08005d44  00007008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002f4  20000080  08005dbc  00007080  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000374  08005dbc  00007374  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00007080  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012f25  00000000  00000000  000070b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000029d0  00000000  00000000  00019fd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001578  00000000  00000000  0001c9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000105a  00000000  00000000  0001df20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00022e12  00000000  00000000  0001ef7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000121b6  00000000  00000000  00041d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000db216  00000000  00000000  00053f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0012f158  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000619c  00000000  00000000  0012f19c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  00135338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000080 	.word	0x20000080
 800015c:	00000000 	.word	0x00000000
 8000160:	08005b64 	.word	0x08005b64

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000084 	.word	0x20000084
 800017c:	08005b64 	.word	0x08005b64

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000554:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000558:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800055c:	f003 0301 	and.w	r3, r3, #1
 8000560:	2b00      	cmp	r3, #0
 8000562:	d013      	beq.n	800058c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000564:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000568:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800056c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000570:	2b00      	cmp	r3, #0
 8000572:	d00b      	beq.n	800058c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000574:	e000      	b.n	8000578 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000576:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000578:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d0f9      	beq.n	8000576 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000582:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	b2d2      	uxtb	r2, r2
 800058a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800058c:	687b      	ldr	r3, [r7, #4]
}
 800058e:	4618      	mov	r0, r3
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800059a:	b480      	push	{r7}
 800059c:	b085      	sub	sp, #20
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80005a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80005a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4313      	orrs	r3, r2
 80005b0:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80005b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4013      	ands	r3, r2
 80005bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005be:	68fb      	ldr	r3, [r7, #12]
}
 80005c0:	bf00      	nop
 80005c2:	3714      	adds	r7, #20
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4313      	orrs	r3, r2
 80005e2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4013      	ands	r3, r2
 80005ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005f0:	68fb      	ldr	r3, [r7, #12]
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
	...

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000602:	b085      	sub	sp, #20
 8000604:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
	SPI_Slave_Init();
 8000606:	f000 f9c5 	bl	8000994 <SPI_Slave_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060a:	f000 fcf7 	bl	8000ffc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060e:	f000 f891 	bl	8000734 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000612:	f000 f8e7 	bl	80007e4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f000 f94f 	bl	80008b8 <MX_GPIO_Init>
  MX_DMA_Init();
 800061a:	f000 f93b 	bl	8000894 <MX_DMA_Init>
  MX_SPI1_Init();
 800061e:	f000 f8ff 	bl	8000820 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin (GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000622:	2201      	movs	r2, #1
 8000624:	2110      	movs	r1, #16
 8000626:	483b      	ldr	r0, [pc, #236]	@ (8000714 <main+0x114>)
 8000628:	f001 fa86 	bl	8001b38 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 800062c:	2014      	movs	r0, #20
 800062e:	f000 fd6b 	bl	8001108 <HAL_Delay>
  HAL_GPIO_WritePin (GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	2110      	movs	r1, #16
 8000636:	4837      	ldr	r0, [pc, #220]	@ (8000714 <main+0x114>)
 8000638:	f001 fa7e 	bl	8001b38 <HAL_GPIO_WritePin>

  /* Send or receive something to the ESP32*/
  printf("STM32 will start receiving data via SPI...");
 800063c:	4836      	ldr	r0, [pc, #216]	@ (8000718 <main+0x118>)
 800063e:	f004 fbe9 	bl	8004e14 <iprintf>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 8000642:	2000      	movs	r0, #0
 8000644:	f000 fc0e 	bl	8000e64 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8000648:	2001      	movs	r0, #1
 800064a:	f000 fc0b 	bl	8000e64 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800064e:	2002      	movs	r0, #2
 8000650:	f000 fc08 	bl	8000e64 <BSP_LED_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000654:	4b31      	ldr	r3, [pc, #196]	@ (800071c <main+0x11c>)
 8000656:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800065a:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800065c:	4b2f      	ldr	r3, [pc, #188]	@ (800071c <main+0x11c>)
 800065e:	2200      	movs	r2, #0
 8000660:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000662:	4b2e      	ldr	r3, [pc, #184]	@ (800071c <main+0x11c>)
 8000664:	2200      	movs	r2, #0
 8000666:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000668:	4b2c      	ldr	r3, [pc, #176]	@ (800071c <main+0x11c>)
 800066a:	2200      	movs	r2, #0
 800066c:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800066e:	4b2b      	ldr	r3, [pc, #172]	@ (800071c <main+0x11c>)
 8000670:	2200      	movs	r2, #0
 8000672:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000674:	4929      	ldr	r1, [pc, #164]	@ (800071c <main+0x11c>)
 8000676:	2000      	movs	r0, #0
 8000678:	f000 fc2e 	bl	8000ed8 <BSP_COM_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <main+0x86>
  {
    Error_Handler();
 8000682:	f000 f9d1 	bl	8000a28 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (data_received_flag) {
 8000686:	4b26      	ldr	r3, [pc, #152]	@ (8000720 <main+0x120>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	b2db      	uxtb	r3, r3
 800068c:	2b00      	cmp	r3, #0
 800068e:	d02a      	beq.n	80006e6 <main+0xe6>
		data_received_flag = 0;
 8000690:	4b23      	ldr	r3, [pc, #140]	@ (8000720 <main+0x120>)
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
		last_received_time = HAL_GetTick();  // Update timestamp on new data
 8000696:	f000 fd1f 	bl	80010d8 <HAL_GetTick>
 800069a:	4603      	mov	r3, r0
 800069c:	4a21      	ldr	r2, [pc, #132]	@ (8000724 <main+0x124>)
 800069e:	6013      	str	r3, [r2, #0]
		printf("Received: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
			   receivedData.value,
 80006a0:	4b21      	ldr	r3, [pc, #132]	@ (8000728 <main+0x128>)
 80006a2:	6819      	ldr	r1, [r3, #0]
			   receivedData.MacAddress[0], receivedData.MacAddress[1],
 80006a4:	4b20      	ldr	r3, [pc, #128]	@ (8000728 <main+0x128>)
 80006a6:	791b      	ldrb	r3, [r3, #4]
 80006a8:	b2db      	uxtb	r3, r3
		printf("Received: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 80006aa:	461d      	mov	r5, r3
			   receivedData.MacAddress[0], receivedData.MacAddress[1],
 80006ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000728 <main+0x128>)
 80006ae:	795b      	ldrb	r3, [r3, #5]
 80006b0:	b2db      	uxtb	r3, r3
		printf("Received: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 80006b2:	461e      	mov	r6, r3
			   receivedData.MacAddress[2], receivedData.MacAddress[3],
 80006b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000728 <main+0x128>)
 80006b6:	799b      	ldrb	r3, [r3, #6]
 80006b8:	b2db      	uxtb	r3, r3
		printf("Received: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 80006ba:	461a      	mov	r2, r3
			   receivedData.MacAddress[2], receivedData.MacAddress[3],
 80006bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000728 <main+0x128>)
 80006be:	79db      	ldrb	r3, [r3, #7]
 80006c0:	b2db      	uxtb	r3, r3
		printf("Received: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 80006c2:	4618      	mov	r0, r3
			   receivedData.MacAddress[4], receivedData.MacAddress[5]);
 80006c4:	4b18      	ldr	r3, [pc, #96]	@ (8000728 <main+0x128>)
 80006c6:	7a1b      	ldrb	r3, [r3, #8]
 80006c8:	b2db      	uxtb	r3, r3
		printf("Received: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 80006ca:	461c      	mov	r4, r3
			   receivedData.MacAddress[4], receivedData.MacAddress[5]);
 80006cc:	4b16      	ldr	r3, [pc, #88]	@ (8000728 <main+0x128>)
 80006ce:	7a5b      	ldrb	r3, [r3, #9]
 80006d0:	b2db      	uxtb	r3, r3
		printf("Received: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 80006d2:	9303      	str	r3, [sp, #12]
 80006d4:	9402      	str	r4, [sp, #8]
 80006d6:	9001      	str	r0, [sp, #4]
 80006d8:	9200      	str	r2, [sp, #0]
 80006da:	4633      	mov	r3, r6
 80006dc:	462a      	mov	r2, r5
 80006de:	4813      	ldr	r0, [pc, #76]	@ (800072c <main+0x12c>)
 80006e0:	f004 fb98 	bl	8004e14 <iprintf>
 80006e4:	e012      	b.n	800070c <main+0x10c>
	}
	else {
		// Check if timeout occurred (no data for SPI_TIMEOUT_MS)
		if (HAL_GetTick() - last_received_time > SPI_TIMEOUT_MS) {
 80006e6:	f000 fcf7 	bl	80010d8 <HAL_GetTick>
 80006ea:	4602      	mov	r2, r0
 80006ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000724 <main+0x124>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80006f6:	d909      	bls.n	800070c <main+0x10c>
			printf("No data received for %lu ms!\n", SPI_TIMEOUT_MS);
 80006f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006fc:	480c      	ldr	r0, [pc, #48]	@ (8000730 <main+0x130>)
 80006fe:	f004 fb89 	bl	8004e14 <iprintf>
			last_received_time = HAL_GetTick();  // Reset timeout
 8000702:	f000 fce9 	bl	80010d8 <HAL_GetTick>
 8000706:	4603      	mov	r3, r0
 8000708:	4a06      	ldr	r2, [pc, #24]	@ (8000724 <main+0x124>)
 800070a:	6013      	str	r3, [r2, #0]
		}
	}
	HAL_Delay(1);  // Reduce CPU usage
 800070c:	2001      	movs	r0, #1
 800070e:	f000 fcfb 	bl	8001108 <HAL_Delay>
	if (data_received_flag) {
 8000712:	e7b8      	b.n	8000686 <main+0x86>
 8000714:	48000400 	.word	0x48000400
 8000718:	08005b7c 	.word	0x08005b7c
 800071c:	2000009c 	.word	0x2000009c
 8000720:	2000018a 	.word	0x2000018a
 8000724:	20000170 	.word	0x20000170
 8000728:	20000174 	.word	0x20000174
 800072c:	08005ba8 	.word	0x08005ba8
 8000730:	08005bdc 	.word	0x08005bdc

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b09a      	sub	sp, #104	@ 0x68
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 0320 	add.w	r3, r7, #32
 800073e:	2248      	movs	r2, #72	@ 0x48
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f004 fbc3 	bl	8004ece <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]
 8000756:	615a      	str	r2, [r3, #20]
 8000758:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800075a:	4b21      	ldr	r3, [pc, #132]	@ (80007e0 <SystemClock_Config+0xac>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000762:	4a1f      	ldr	r2, [pc, #124]	@ (80007e0 <SystemClock_Config+0xac>)
 8000764:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000768:	6013      	str	r3, [r2, #0]
 800076a:	4b1d      	ldr	r3, [pc, #116]	@ (80007e0 <SystemClock_Config+0xac>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000776:	2322      	movs	r3, #34	@ 0x22
 8000778:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800077e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000780:	2301      	movs	r3, #1
 8000782:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000784:	2340      	movs	r3, #64	@ 0x40
 8000786:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000788:	2300      	movs	r3, #0
 800078a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 800078c:	23a0      	movs	r3, #160	@ 0xa0
 800078e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000790:	2300      	movs	r3, #0
 8000792:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000794:	f107 0320 	add.w	r3, r7, #32
 8000798:	4618      	mov	r0, r3
 800079a:	f001 fd79 	bl	8002290 <HAL_RCC_OscConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80007a4:	f000 f940 	bl	8000a28 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80007a8:	236f      	movs	r3, #111	@ 0x6f
 80007aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2101      	movs	r1, #1
 80007c8:	4618      	mov	r0, r3
 80007ca:	f002 f8d5 	bl	8002978 <HAL_RCC_ClockConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80007d4:	f000 f928 	bl	8000a28 <Error_Handler>
  }
}
 80007d8:	bf00      	nop
 80007da:	3768      	adds	r7, #104	@ 0x68
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	58000400 	.word	0x58000400

080007e4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b094      	sub	sp, #80	@ 0x50
 80007e8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007ea:	463b      	mov	r3, r7
 80007ec:	2250      	movs	r2, #80	@ 0x50
 80007ee:	2100      	movs	r1, #0
 80007f0:	4618      	mov	r0, r3
 80007f2:	f004 fb6c 	bl	8004ece <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80007f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007fa:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80007fc:	2300      	movs	r3, #0
 80007fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000800:	2300      	movs	r3, #0
 8000802:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000804:	463b      	mov	r3, r7
 8000806:	4618      	mov	r0, r3
 8000808:	f002 fcf3 	bl	80031f2 <HAL_RCCEx_PeriphCLKConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000812:	f000 f909 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000816:	bf00      	nop
 8000818:	3750      	adds	r7, #80	@ 0x50
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000824:	4b19      	ldr	r3, [pc, #100]	@ (800088c <MX_SPI1_Init+0x6c>)
 8000826:	4a1a      	ldr	r2, [pc, #104]	@ (8000890 <MX_SPI1_Init+0x70>)
 8000828:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800082a:	4b18      	ldr	r3, [pc, #96]	@ (800088c <MX_SPI1_Init+0x6c>)
 800082c:	2200      	movs	r2, #0
 800082e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000830:	4b16      	ldr	r3, [pc, #88]	@ (800088c <MX_SPI1_Init+0x6c>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000836:	4b15      	ldr	r3, [pc, #84]	@ (800088c <MX_SPI1_Init+0x6c>)
 8000838:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800083c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800083e:	4b13      	ldr	r3, [pc, #76]	@ (800088c <MX_SPI1_Init+0x6c>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000844:	4b11      	ldr	r3, [pc, #68]	@ (800088c <MX_SPI1_Init+0x6c>)
 8000846:	2200      	movs	r2, #0
 8000848:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800084a:	4b10      	ldr	r3, [pc, #64]	@ (800088c <MX_SPI1_Init+0x6c>)
 800084c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000850:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000852:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <MX_SPI1_Init+0x6c>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000858:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <MX_SPI1_Init+0x6c>)
 800085a:	2200      	movs	r2, #0
 800085c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <MX_SPI1_Init+0x6c>)
 8000860:	2200      	movs	r2, #0
 8000862:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000864:	4b09      	ldr	r3, [pc, #36]	@ (800088c <MX_SPI1_Init+0x6c>)
 8000866:	2207      	movs	r2, #7
 8000868:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800086a:	4b08      	ldr	r3, [pc, #32]	@ (800088c <MX_SPI1_Init+0x6c>)
 800086c:	2200      	movs	r2, #0
 800086e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000870:	4b06      	ldr	r3, [pc, #24]	@ (800088c <MX_SPI1_Init+0x6c>)
 8000872:	2200      	movs	r2, #0
 8000874:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	@ (800088c <MX_SPI1_Init+0x6c>)
 8000878:	f002 ff42 	bl	8003700 <HAL_SPI_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8000882:	f000 f8d1 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200000ac 	.word	0x200000ac
 8000890:	40013000 	.word	0x40013000

08000894 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000898:	2004      	movs	r0, #4
 800089a:	f7ff fe7e 	bl	800059a <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800089e:	2001      	movs	r0, #1
 80008a0:	f7ff fe7b 	bl	800059a <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2100      	movs	r1, #0
 80008a8:	200b      	movs	r0, #11
 80008aa:	f000 fd2c 	bl	8001306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008ae:	200b      	movs	r0, #11
 80008b0:	f000 fd43 	bl	800133a <HAL_NVIC_EnableIRQ>

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008cc:	2004      	movs	r0, #4
 80008ce:	f7ff fe7d 	bl	80005cc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2001      	movs	r0, #1
 80008d4:	f7ff fe7a 	bl	80005cc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d8:	2008      	movs	r0, #8
 80008da:	f7ff fe77 	bl	80005cc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	2002      	movs	r0, #2
 80008e0:	f7ff fe74 	bl	80005cc <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008e4:	2310      	movs	r3, #16
 80008e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	4619      	mov	r1, r3
 80008f4:	4816      	ldr	r0, [pc, #88]	@ (8000950 <MX_GPIO_Init+0x98>)
 80008f6:	f000 ffaf 	bl	8001858 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 80008fa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80008fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800090c:	230a      	movs	r3, #10
 800090e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	4619      	mov	r1, r3
 8000914:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000918:	f000 ff9e 	bl	8001858 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 800091c:	2303      	movs	r3, #3
 800091e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	4619      	mov	r1, r3
 800092c:	4809      	ldr	r0, [pc, #36]	@ (8000954 <MX_GPIO_Init+0x9c>)
 800092e:	f000 ff93 	bl	8001858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000932:	2310      	movs	r3, #16
 8000934:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	4619      	mov	r1, r3
 8000942:	4805      	ldr	r0, [pc, #20]	@ (8000958 <MX_GPIO_Init+0xa0>)
 8000944:	f000 ff88 	bl	8001858 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000948:	bf00      	nop
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	48000800 	.word	0x48000800
 8000954:	48000c00 	.word	0x48000c00
 8000958:	48000400 	.word	0x48000400

0800095c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	e009      	b.n	8000982 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	1c5a      	adds	r2, r3, #1
 8000972:	60ba      	str	r2, [r7, #8]
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fde8 	bl	800054c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	3301      	adds	r3, #1
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	697a      	ldr	r2, [r7, #20]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	429a      	cmp	r2, r3
 8000988:	dbf1      	blt.n	800096e <_write+0x12>
  }
  return len;
 800098a:	687b      	ldr	r3, [r7, #4]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <SPI_Slave_Init>:

// Initialize SPI for receiving data
void SPI_Slave_Init(void) {
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
    // Start SPI receive with interrupt
    HAL_SPI_Receive_DMA(&hspi1, (uint8_t*)spi_rx_buffer, sizeof(Item));
 8000998:	220a      	movs	r2, #10
 800099a:	4903      	ldr	r1, [pc, #12]	@ (80009a8 <SPI_Slave_Init+0x14>)
 800099c:	4803      	ldr	r0, [pc, #12]	@ (80009ac <SPI_Slave_Init+0x18>)
 800099e:	f002 ff53 	bl	8003848 <HAL_SPI_Receive_DMA>
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000180 	.word	0x20000180
 80009ac:	200000ac 	.word	0x200000ac

080009b0 <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	f107 0318 	add.w	r3, r7, #24
 80009bc:	60bb      	str	r3, [r7, #8]
    // Callback: No restart needed!
    if (hspi->Instance == SPI1) {
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a13      	ldr	r2, [pc, #76]	@ (8000a10 <HAL_SPI_RxCpltCallback+0x60>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d11f      	bne.n	8000a08 <HAL_SPI_RxCpltCallback+0x58>
        printf("Raw SPI Bytes: ");
 80009c8:	4812      	ldr	r0, [pc, #72]	@ (8000a14 <HAL_SPI_RxCpltCallback+0x64>)
 80009ca:	f004 fa23 	bl	8004e14 <iprintf>
        for (int i = 0; i < sizeof(Item); i++) {
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	e00b      	b.n	80009ec <HAL_SPI_RxCpltCallback+0x3c>
            printf("%02X ", spi_rx_buffer[i]);
 80009d4:	4a10      	ldr	r2, [pc, #64]	@ (8000a18 <HAL_SPI_RxCpltCallback+0x68>)
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4413      	add	r3, r2
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	4619      	mov	r1, r3
 80009e0:	480e      	ldr	r0, [pc, #56]	@ (8000a1c <HAL_SPI_RxCpltCallback+0x6c>)
 80009e2:	f004 fa17 	bl	8004e14 <iprintf>
        for (int i = 0; i < sizeof(Item); i++) {
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	3301      	adds	r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	2b09      	cmp	r3, #9
 80009f0:	d9f0      	bls.n	80009d4 <HAL_SPI_RxCpltCallback+0x24>
        }
        printf("\n");
 80009f2:	200a      	movs	r0, #10
 80009f4:	f004 fa20 	bl	8004e38 <putchar>

        memcpy((void*)&receivedData, (void*)spi_rx_buffer, sizeof(Item));
 80009f8:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <HAL_SPI_RxCpltCallback+0x70>)
 80009fa:	4a07      	ldr	r2, [pc, #28]	@ (8000a18 <HAL_SPI_RxCpltCallback+0x68>)
 80009fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80009fe:	c303      	stmia	r3!, {r0, r1}
 8000a00:	801a      	strh	r2, [r3, #0]
        data_received_flag = 1;
 8000a02:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <HAL_SPI_RxCpltCallback+0x74>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	701a      	strb	r2, [r3, #0]
    }
    // Optional: Error handling
    void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
        printf("SPI Error: %lu\n", hspi->ErrorCode);
    }
}
 8000a08:	bf00      	nop
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40013000 	.word	0x40013000
 8000a14:	08005bfc 	.word	0x08005bfc
 8000a18:	20000180 	.word	0x20000180
 8000a1c:	08005c0c 	.word	0x08005c0c
 8000a20:	20000174 	.word	0x20000174
 8000a24:	2000018a 	.word	0x2000018a

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <Error_Handler+0x8>

08000a34 <LL_AHB2_GRP1_EnableClock>:
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a40:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a50:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4013      	ands	r3, r2
 8000a56:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a58:	68fb      	ldr	r3, [r7, #12]
}
 8000a5a:	bf00      	nop
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b085      	sub	sp, #20
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a72:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000a74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a82:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4013      	ands	r3, r2
 8000a88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
}
 8000a8c:	bf00      	nop
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
	...

08000aa8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a24      	ldr	r2, [pc, #144]	@ (8000b58 <HAL_SPI_MspInit+0xb0>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d141      	bne.n	8000b4e <HAL_SPI_MspInit+0xa6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000aca:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000ace:	f7ff ffca 	bl	8000a66 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	f7ff ffae 	bl	8000a34 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000ad8:	23c2      	movs	r3, #194	@ 0xc2
 8000ada:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ae8:	2305      	movs	r3, #5
 8000aea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aec:	f107 030c 	add.w	r3, r7, #12
 8000af0:	4619      	mov	r1, r3
 8000af2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af6:	f000 feaf 	bl	8001858 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel1;
 8000afa:	4b18      	ldr	r3, [pc, #96]	@ (8000b5c <HAL_SPI_MspInit+0xb4>)
 8000afc:	4a18      	ldr	r2, [pc, #96]	@ (8000b60 <HAL_SPI_MspInit+0xb8>)
 8000afe:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000b00:	4b16      	ldr	r3, [pc, #88]	@ (8000b5c <HAL_SPI_MspInit+0xb4>)
 8000b02:	2206      	movs	r2, #6
 8000b04:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b06:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <HAL_SPI_MspInit+0xb4>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b0c:	4b13      	ldr	r3, [pc, #76]	@ (8000b5c <HAL_SPI_MspInit+0xb4>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b12:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <HAL_SPI_MspInit+0xb4>)
 8000b14:	2280      	movs	r2, #128	@ 0x80
 8000b16:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b18:	4b10      	ldr	r3, [pc, #64]	@ (8000b5c <HAL_SPI_MspInit+0xb4>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <HAL_SPI_MspInit+0xb4>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8000b24:	4b0d      	ldr	r3, [pc, #52]	@ (8000b5c <HAL_SPI_MspInit+0xb4>)
 8000b26:	2220      	movs	r2, #32
 8000b28:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b5c <HAL_SPI_MspInit+0xb4>)
 8000b2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b30:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000b32:	480a      	ldr	r0, [pc, #40]	@ (8000b5c <HAL_SPI_MspInit+0xb4>)
 8000b34:	f000 fc1c 	bl	8001370 <HAL_DMA_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <HAL_SPI_MspInit+0x9a>
    {
      Error_Handler();
 8000b3e:	f7ff ff73 	bl	8000a28 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a05      	ldr	r2, [pc, #20]	@ (8000b5c <HAL_SPI_MspInit+0xb4>)
 8000b46:	659a      	str	r2, [r3, #88]	@ 0x58
 8000b48:	4a04      	ldr	r2, [pc, #16]	@ (8000b5c <HAL_SPI_MspInit+0xb4>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b4e:	bf00      	nop
 8000b50:	3720      	adds	r7, #32
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40013000 	.word	0x40013000
 8000b5c:	20000110 	.word	0x20000110
 8000b60:	40020008 	.word	0x40020008

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <NMI_Handler+0x4>

08000b6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <HardFault_Handler+0x4>

08000b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <MemManage_Handler+0x4>

08000b7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bba:	f000 fa79 	bl	80010b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000bc8:	4802      	ldr	r0, [pc, #8]	@ (8000bd4 <DMA1_Channel1_IRQHandler+0x10>)
 8000bca:	f000 fcf4 	bl	80015b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000110 	.word	0x20000110

08000bd8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	e00a      	b.n	8000c00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bea:	f3af 8000 	nop.w
 8000bee:	4601      	mov	r1, r0
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	1c5a      	adds	r2, r3, #1
 8000bf4:	60ba      	str	r2, [r7, #8]
 8000bf6:	b2ca      	uxtb	r2, r1
 8000bf8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	dbf0      	blt.n	8000bea <_read+0x12>
  }

  return len;
 8000c08:	687b      	ldr	r3, [r7, #4]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c12:	b480      	push	{r7}
 8000c14:	b083      	sub	sp, #12
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
 8000c32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c3a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <_isatty>:

int _isatty(int file)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b083      	sub	sp, #12
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c52:	2301      	movs	r3, #1
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
	...

08000c7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c84:	4a14      	ldr	r2, [pc, #80]	@ (8000cd8 <_sbrk+0x5c>)
 8000c86:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <_sbrk+0x60>)
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c90:	4b13      	ldr	r3, [pc, #76]	@ (8000ce0 <_sbrk+0x64>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d102      	bne.n	8000c9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c98:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <_sbrk+0x64>)
 8000c9a:	4a12      	ldr	r2, [pc, #72]	@ (8000ce4 <_sbrk+0x68>)
 8000c9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ce0 <_sbrk+0x64>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d207      	bcs.n	8000cbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cac:	f004 f95e 	bl	8004f6c <__errno>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	220c      	movs	r2, #12
 8000cb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cba:	e009      	b.n	8000cd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cbc:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <_sbrk+0x64>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cc2:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <_sbrk+0x64>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	4a05      	ldr	r2, [pc, #20]	@ (8000ce0 <_sbrk+0x64>)
 8000ccc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cce:	68fb      	ldr	r3, [r7, #12]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20030000 	.word	0x20030000
 8000cdc:	00000400 	.word	0x00000400
 8000ce0:	2000018c 	.word	0x2000018c
 8000ce4:	20000378 	.word	0x20000378

08000ce8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000cec:	4b24      	ldr	r3, [pc, #144]	@ (8000d80 <SystemInit+0x98>)
 8000cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cf2:	4a23      	ldr	r2, [pc, #140]	@ (8000d80 <SystemInit+0x98>)
 8000cf4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cf8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000cfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000d0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d10:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000d14:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000d16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d20:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <SystemInit+0x9c>)
 8000d22:	4013      	ands	r3, r2
 8000d24:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000d26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000d32:	f023 0305 	bic.w	r3, r3, #5
 8000d36:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000d3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000d42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000d46:	f023 0301 	bic.w	r3, r3, #1
 8000d4a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000d4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d52:	4a0d      	ldr	r2, [pc, #52]	@ (8000d88 <SystemInit+0xa0>)
 8000d54:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000d56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d5a:	4a0b      	ldr	r2, [pc, #44]	@ (8000d88 <SystemInit+0xa0>)
 8000d5c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000d68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d6c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d72:	2200      	movs	r2, #0
 8000d74:	619a      	str	r2, [r3, #24]
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00
 8000d84:	faf6fefb 	.word	0xfaf6fefb
 8000d88:	22041000 	.word	0x22041000

08000d8c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000d8c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d90:	3304      	adds	r3, #4

08000d92 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d92:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d94:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000d96:	d3f9      	bcc.n	8000d8c <CopyDataInit>
  bx lr
 8000d98:	4770      	bx	lr

08000d9a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000d9a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000d9c:	3004      	adds	r0, #4

08000d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000d9e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000da0:	d3fb      	bcc.n	8000d9a <FillZerobss>
  bx lr
 8000da2:	4770      	bx	lr

08000da4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000da4:	480c      	ldr	r0, [pc, #48]	@ (8000dd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000da6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000da8:	f7ff ff9e 	bl	8000ce8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000dac:	480b      	ldr	r0, [pc, #44]	@ (8000ddc <LoopForever+0x6>)
 8000dae:	490c      	ldr	r1, [pc, #48]	@ (8000de0 <LoopForever+0xa>)
 8000db0:	4a0c      	ldr	r2, [pc, #48]	@ (8000de4 <LoopForever+0xe>)
 8000db2:	2300      	movs	r3, #0
 8000db4:	f7ff ffed 	bl	8000d92 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000db8:	480b      	ldr	r0, [pc, #44]	@ (8000de8 <LoopForever+0x12>)
 8000dba:	490c      	ldr	r1, [pc, #48]	@ (8000dec <LoopForever+0x16>)
 8000dbc:	4a0c      	ldr	r2, [pc, #48]	@ (8000df0 <LoopForever+0x1a>)
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f7ff ffe7 	bl	8000d92 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000dc4:	480b      	ldr	r0, [pc, #44]	@ (8000df4 <LoopForever+0x1e>)
 8000dc6:	490c      	ldr	r1, [pc, #48]	@ (8000df8 <LoopForever+0x22>)
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f7ff ffe8 	bl	8000d9e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dce:	f004 f8d3 	bl	8004f78 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000dd2:	f7ff fc15 	bl	8000600 <main>

08000dd6 <LoopForever>:

LoopForever:
  b LoopForever
 8000dd6:	e7fe      	b.n	8000dd6 <LoopForever>
  ldr   r0, =_estack
 8000dd8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	20000080 	.word	0x20000080
 8000de4:	08005d44 	.word	0x08005d44
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000de8:	20030000 	.word	0x20030000
 8000dec:	20030000 	.word	0x20030000
 8000df0:	08005dbc 	.word	0x08005dbc
  INIT_BSS _sbss, _ebss
 8000df4:	20000080 	.word	0x20000080
 8000df8:	20000374 	.word	0x20000374

08000dfc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dfc:	e7fe      	b.n	8000dfc <ADC1_IRQHandler>

08000dfe <LL_AHB2_GRP1_EnableClock>:
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b085      	sub	sp, #20
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e22:	68fb      	ldr	r3, [r7, #12]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <LL_APB2_GRP1_EnableClock>:
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e3c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000e3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e4c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4013      	ands	r3, r2
 8000e52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e54:	68fb      	ldr	r3, [r7, #12]
}
 8000e56:	bf00      	nop
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
	...

08000e64 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8000e6e:	f107 030c 	add.w	r3, r7, #12
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000e7e:	2002      	movs	r0, #2
 8000e80:	f7ff ffbd 	bl	8000dfe <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	4a12      	ldr	r2, [pc, #72]	@ (8000ed0 <BSP_LED_Init+0x6c>)
 8000e88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e8c:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e96:	2302      	movs	r3, #2
 8000e98:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed4 <BSP_LED_Init+0x70>)
 8000e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea2:	f107 020c 	add.w	r2, r7, #12
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 fcd5 	bl	8001858 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	4a08      	ldr	r2, [pc, #32]	@ (8000ed4 <BSP_LED_Init+0x70>)
 8000eb2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	4a05      	ldr	r2, [pc, #20]	@ (8000ed0 <BSP_LED_Init+0x6c>)
 8000eba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f000 fe39 	bl	8001b38 <HAL_GPIO_WritePin>
}
 8000ec6:	bf00      	nop
 8000ec8:	3720      	adds	r7, #32
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	08005ce0 	.word	0x08005ce0
 8000ed4:	2000000c 	.word	0x2000000c

08000ed8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d903      	bls.n	8000ef6 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000eee:	f06f 0301 	mvn.w	r3, #1
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	e018      	b.n	8000f28 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	2294      	movs	r2, #148	@ 0x94
 8000efa:	fb02 f303 	mul.w	r3, r2, r3
 8000efe:	4a0d      	ldr	r2, [pc, #52]	@ (8000f34 <BSP_COM_Init+0x5c>)
 8000f00:	4413      	add	r3, r2
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f84a 	bl	8000f9c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	2294      	movs	r2, #148	@ 0x94
 8000f0c:	fb02 f303 	mul.w	r3, r2, r3
 8000f10:	4a08      	ldr	r2, [pc, #32]	@ (8000f34 <BSP_COM_Init+0x5c>)
 8000f12:	4413      	add	r3, r2
 8000f14:	6839      	ldr	r1, [r7, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 f80e 	bl	8000f38 <MX_LPUART1_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d002      	beq.n	8000f28 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8000f22:	f06f 0303 	mvn.w	r3, #3
 8000f26:	e000      	b.n	8000f2a <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8000f28:	68fb      	ldr	r3, [r7, #12]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000190 	.word	0x20000190

08000f38 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000f42:	4b15      	ldr	r3, [pc, #84]	@ (8000f98 <MX_LPUART1_Init+0x60>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	220c      	movs	r2, #12
 8000f56:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	895b      	ldrh	r3, [r3, #10]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685a      	ldr	r2, [r3, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	891b      	ldrh	r3, [r3, #8]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	899b      	ldrh	r3, [r3, #12]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f84:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f003 f9e0 	bl	800434c <HAL_UART_Init>
 8000f8c:	4603      	mov	r3, r0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000018 	.word	0x20000018

08000f9c <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	f7ff ff2a 	bl	8000dfe <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 8000faa:	2002      	movs	r0, #2
 8000fac:	f7ff ff27 	bl	8000dfe <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000fb0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000fb4:	f7ff ff3c 	bl	8000e30 <LL_APB2_GRP1_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000fb8:	2340      	movs	r3, #64	@ 0x40
 8000fba:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000fc8:	2307      	movs	r3, #7
 8000fca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4809      	ldr	r0, [pc, #36]	@ (8000ff8 <COM1_MspInit+0x5c>)
 8000fd4:	f000 fc40 	bl	8001858 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000fd8:	2380      	movs	r3, #128	@ 0x80
 8000fda:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000fe0:	2307      	movs	r3, #7
 8000fe2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4803      	ldr	r0, [pc, #12]	@ (8000ff8 <COM1_MspInit+0x5c>)
 8000fec:	f000 fc34 	bl	8001858 <HAL_GPIO_Init>
}
 8000ff0:	bf00      	nop
 8000ff2:	3720      	adds	r7, #32
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	48000400 	.word	0x48000400

08000ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001006:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <HAL_Init+0x3c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a0b      	ldr	r2, [pc, #44]	@ (8001038 <HAL_Init+0x3c>)
 800100c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001010:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001012:	2003      	movs	r0, #3
 8001014:	f000 f96c 	bl	80012f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001018:	2000      	movs	r0, #0
 800101a:	f000 f80f 	bl	800103c <HAL_InitTick>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d002      	beq.n	800102a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	71fb      	strb	r3, [r7, #7]
 8001028:	e001      	b.n	800102e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800102a:	f7ff fd35 	bl	8000a98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800102e:	79fb      	ldrb	r3, [r7, #7]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	58004000 	.word	0x58004000

0800103c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001044:	2300      	movs	r3, #0
 8001046:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001048:	4b17      	ldr	r3, [pc, #92]	@ (80010a8 <HAL_InitTick+0x6c>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d024      	beq.n	800109a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001050:	f001 fe3e 	bl	8002cd0 <HAL_RCC_GetHCLKFreq>
 8001054:	4602      	mov	r2, r0
 8001056:	4b14      	ldr	r3, [pc, #80]	@ (80010a8 <HAL_InitTick+0x6c>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	4619      	mov	r1, r3
 800105c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001060:	fbb3 f3f1 	udiv	r3, r3, r1
 8001064:	fbb2 f3f3 	udiv	r3, r2, r3
 8001068:	4618      	mov	r0, r3
 800106a:	f000 f974 	bl	8001356 <HAL_SYSTICK_Config>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d10f      	bne.n	8001094 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b0f      	cmp	r3, #15
 8001078:	d809      	bhi.n	800108e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800107a:	2200      	movs	r2, #0
 800107c:	6879      	ldr	r1, [r7, #4]
 800107e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001082:	f000 f940 	bl	8001306 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001086:	4a09      	ldr	r2, [pc, #36]	@ (80010ac <HAL_InitTick+0x70>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	e007      	b.n	800109e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	73fb      	strb	r3, [r7, #15]
 8001092:	e004      	b.n	800109e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
 8001098:	e001      	b.n	800109e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800109e:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000020 	.word	0x20000020
 80010ac:	2000001c 	.word	0x2000001c

080010b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <HAL_IncTick+0x20>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <HAL_IncTick+0x24>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a04      	ldr	r2, [pc, #16]	@ (80010d4 <HAL_IncTick+0x24>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000020 	.word	0x20000020
 80010d4:	20000224 	.word	0x20000224

080010d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return uwTick;
 80010dc:	4b03      	ldr	r3, [pc, #12]	@ (80010ec <HAL_GetTick+0x14>)
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20000224 	.word	0x20000224

080010f0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80010f4:	4b03      	ldr	r3, [pc, #12]	@ (8001104 <HAL_GetTickPrio+0x14>)
 80010f6:	681b      	ldr	r3, [r3, #0]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	2000001c 	.word	0x2000001c

08001108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001110:	f7ff ffe2 	bl	80010d8 <HAL_GetTick>
 8001114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001120:	d005      	beq.n	800112e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001122:	4b0a      	ldr	r3, [pc, #40]	@ (800114c <HAL_Delay+0x44>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4413      	add	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800112e:	bf00      	nop
 8001130:	f7ff ffd2 	bl	80010d8 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	429a      	cmp	r2, r3
 800113e:	d8f7      	bhi.n	8001130 <HAL_Delay+0x28>
  {
  }
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000020 	.word	0x20000020

08001150 <__NVIC_SetPriorityGrouping>:
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001160:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800116c:	4013      	ands	r3, r2
 800116e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001178:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800117c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001182:	4a04      	ldr	r2, [pc, #16]	@ (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	60d3      	str	r3, [r2, #12]
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_GetPriorityGrouping>:
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800119c:	4b04      	ldr	r3, [pc, #16]	@ (80011b0 <__NVIC_GetPriorityGrouping+0x18>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	0a1b      	lsrs	r3, r3, #8
 80011a2:	f003 0307 	and.w	r3, r3, #7
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_EnableIRQ>:
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	db0b      	blt.n	80011de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	f003 021f 	and.w	r2, r3, #31
 80011cc:	4907      	ldr	r1, [pc, #28]	@ (80011ec <__NVIC_EnableIRQ+0x38>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	095b      	lsrs	r3, r3, #5
 80011d4:	2001      	movs	r0, #1
 80011d6:	fa00 f202 	lsl.w	r2, r0, r2
 80011da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000e100 	.word	0xe000e100

080011f0 <__NVIC_SetPriority>:
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	6039      	str	r1, [r7, #0]
 80011fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001200:	2b00      	cmp	r3, #0
 8001202:	db0a      	blt.n	800121a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	b2da      	uxtb	r2, r3
 8001208:	490c      	ldr	r1, [pc, #48]	@ (800123c <__NVIC_SetPriority+0x4c>)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	0112      	lsls	r2, r2, #4
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	440b      	add	r3, r1
 8001214:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001218:	e00a      	b.n	8001230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4908      	ldr	r1, [pc, #32]	@ (8001240 <__NVIC_SetPriority+0x50>)
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	3b04      	subs	r3, #4
 8001228:	0112      	lsls	r2, r2, #4
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	440b      	add	r3, r1
 800122e:	761a      	strb	r2, [r3, #24]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000e100 	.word	0xe000e100
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <NVIC_EncodePriority>:
{
 8001244:	b480      	push	{r7}
 8001246:	b089      	sub	sp, #36	@ 0x24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f1c3 0307 	rsb	r3, r3, #7
 800125e:	2b04      	cmp	r3, #4
 8001260:	bf28      	it	cs
 8001262:	2304      	movcs	r3, #4
 8001264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3304      	adds	r3, #4
 800126a:	2b06      	cmp	r3, #6
 800126c:	d902      	bls.n	8001274 <NVIC_EncodePriority+0x30>
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3b03      	subs	r3, #3
 8001272:	e000      	b.n	8001276 <NVIC_EncodePriority+0x32>
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001278:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43da      	mvns	r2, r3
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	401a      	ands	r2, r3
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800128c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	fa01 f303 	lsl.w	r3, r1, r3
 8001296:	43d9      	mvns	r1, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129c:	4313      	orrs	r3, r2
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3724      	adds	r7, #36	@ 0x24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <SysTick_Config>:
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012bc:	d301      	bcc.n	80012c2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80012be:	2301      	movs	r3, #1
 80012c0:	e00f      	b.n	80012e2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c2:	4a0a      	ldr	r2, [pc, #40]	@ (80012ec <SysTick_Config+0x40>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ca:	210f      	movs	r1, #15
 80012cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012d0:	f7ff ff8e 	bl	80011f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d4:	4b05      	ldr	r3, [pc, #20]	@ (80012ec <SysTick_Config+0x40>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012da:	4b04      	ldr	r3, [pc, #16]	@ (80012ec <SysTick_Config+0x40>)
 80012dc:	2207      	movs	r2, #7
 80012de:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	e000e010 	.word	0xe000e010

080012f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ff29 	bl	8001150 <__NVIC_SetPriorityGrouping>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b086      	sub	sp, #24
 800130a:	af00      	add	r7, sp, #0
 800130c:	4603      	mov	r3, r0
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	607a      	str	r2, [r7, #4]
 8001312:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001314:	f7ff ff40 	bl	8001198 <__NVIC_GetPriorityGrouping>
 8001318:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	68b9      	ldr	r1, [r7, #8]
 800131e:	6978      	ldr	r0, [r7, #20]
 8001320:	f7ff ff90 	bl	8001244 <NVIC_EncodePriority>
 8001324:	4602      	mov	r2, r0
 8001326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132a:	4611      	mov	r1, r2
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff5f 	bl	80011f0 <__NVIC_SetPriority>
}
 8001332:	bf00      	nop
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff33 	bl	80011b4 <__NVIC_EnableIRQ>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ffa4 	bl	80012ac <SysTick_Config>
 8001364:	4603      	mov	r3, r0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e08e      	b.n	80014a0 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	461a      	mov	r2, r3
 8001388:	4b47      	ldr	r3, [pc, #284]	@ (80014a8 <HAL_DMA_Init+0x138>)
 800138a:	429a      	cmp	r2, r3
 800138c:	d80f      	bhi.n	80013ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	4b45      	ldr	r3, [pc, #276]	@ (80014ac <HAL_DMA_Init+0x13c>)
 8001396:	4413      	add	r3, r2
 8001398:	4a45      	ldr	r2, [pc, #276]	@ (80014b0 <HAL_DMA_Init+0x140>)
 800139a:	fba2 2303 	umull	r2, r3, r2, r3
 800139e:	091b      	lsrs	r3, r3, #4
 80013a0:	009a      	lsls	r2, r3, #2
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a42      	ldr	r2, [pc, #264]	@ (80014b4 <HAL_DMA_Init+0x144>)
 80013aa:	641a      	str	r2, [r3, #64]	@ 0x40
 80013ac:	e00e      	b.n	80013cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	4b40      	ldr	r3, [pc, #256]	@ (80014b8 <HAL_DMA_Init+0x148>)
 80013b6:	4413      	add	r3, r2
 80013b8:	4a3d      	ldr	r2, [pc, #244]	@ (80014b0 <HAL_DMA_Init+0x140>)
 80013ba:	fba2 2303 	umull	r2, r3, r2, r3
 80013be:	091b      	lsrs	r3, r3, #4
 80013c0:	009a      	lsls	r2, r3, #2
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a3c      	ldr	r2, [pc, #240]	@ (80014bc <HAL_DMA_Init+0x14c>)
 80013ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2202      	movs	r2, #2
 80013d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80013e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80013e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80013f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001408:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a1b      	ldr	r3, [r3, #32]
 800140e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	4313      	orrs	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 f9b6 	bl	8001790 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800142c:	d102      	bne.n	8001434 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800143c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001440:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800144a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d010      	beq.n	8001476 <HAL_DMA_Init+0x106>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b04      	cmp	r3, #4
 800145a:	d80c      	bhi.n	8001476 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 f9d5 	bl	800180c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	e008      	b.n	8001488 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2201      	movs	r2, #1
 8001492:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40020407 	.word	0x40020407
 80014ac:	bffdfff8 	.word	0xbffdfff8
 80014b0:	cccccccd 	.word	0xcccccccd
 80014b4:	40020000 	.word	0x40020000
 80014b8:	bffdfbf8 	.word	0xbffdfbf8
 80014bc:	40020400 	.word	0x40020400

080014c0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
 80014cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014ce:	2300      	movs	r3, #0
 80014d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d101      	bne.n	80014e0 <HAL_DMA_Start_IT+0x20>
 80014dc:	2302      	movs	r3, #2
 80014de:	e066      	b.n	80015ae <HAL_DMA_Start_IT+0xee>
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d155      	bne.n	80015a0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2202      	movs	r2, #2
 80014f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2200      	movs	r2, #0
 8001500:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 0201 	bic.w	r2, r2, #1
 8001510:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	68b9      	ldr	r1, [r7, #8]
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f000 f8fb 	bl	8001714 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	2b00      	cmp	r3, #0
 8001524:	d008      	beq.n	8001538 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f042 020e 	orr.w	r2, r2, #14
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	e00f      	b.n	8001558 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0204 	bic.w	r2, r2, #4
 8001546:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 020a 	orr.w	r2, r2, #10
 8001556:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d007      	beq.n	8001576 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001570:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001574:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800157a:	2b00      	cmp	r3, #0
 800157c:	d007      	beq.n	800158e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001588:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800158c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f042 0201 	orr.w	r2, r2, #1
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	e005      	b.n	80015ac <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80015a8:	2302      	movs	r3, #2
 80015aa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80015ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b084      	sub	sp, #16
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d2:	f003 031c 	and.w	r3, r3, #28
 80015d6:	2204      	movs	r2, #4
 80015d8:	409a      	lsls	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4013      	ands	r3, r2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d026      	beq.n	8001630 <HAL_DMA_IRQHandler+0x7a>
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d021      	beq.n	8001630 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0320 	and.w	r3, r3, #32
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d107      	bne.n	800160a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 0204 	bic.w	r2, r2, #4
 8001608:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160e:	f003 021c 	and.w	r2, r3, #28
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001616:	2104      	movs	r1, #4
 8001618:	fa01 f202 	lsl.w	r2, r1, r2
 800161c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	2b00      	cmp	r3, #0
 8001624:	d071      	beq.n	800170a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800162e:	e06c      	b.n	800170a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001634:	f003 031c 	and.w	r3, r3, #28
 8001638:	2202      	movs	r2, #2
 800163a:	409a      	lsls	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4013      	ands	r3, r2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d02e      	beq.n	80016a2 <HAL_DMA_IRQHandler+0xec>
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d029      	beq.n	80016a2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0320 	and.w	r3, r3, #32
 8001658:	2b00      	cmp	r3, #0
 800165a:	d10b      	bne.n	8001674 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 020a 	bic.w	r2, r2, #10
 800166a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001678:	f003 021c 	and.w	r2, r3, #28
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001680:	2102      	movs	r1, #2
 8001682:	fa01 f202 	lsl.w	r2, r1, r2
 8001686:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001694:	2b00      	cmp	r3, #0
 8001696:	d038      	beq.n	800170a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80016a0:	e033      	b.n	800170a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a6:	f003 031c 	and.w	r3, r3, #28
 80016aa:	2208      	movs	r2, #8
 80016ac:	409a      	lsls	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4013      	ands	r3, r2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d02a      	beq.n	800170c <HAL_DMA_IRQHandler+0x156>
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	f003 0308 	and.w	r3, r3, #8
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d025      	beq.n	800170c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 020e 	bic.w	r2, r2, #14
 80016ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d4:	f003 021c 	and.w	r2, r3, #28
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016dc:	2101      	movs	r1, #1
 80016de:	fa01 f202 	lsl.w	r2, r1, r2
 80016e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d004      	beq.n	800170c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800170a:	bf00      	nop
 800170c:	bf00      	nop
}
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
 8001720:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800172a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001730:	2b00      	cmp	r3, #0
 8001732:	d004      	beq.n	800173e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800173c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001742:	f003 021c 	and.w	r2, r3, #28
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174a:	2101      	movs	r1, #1
 800174c:	fa01 f202 	lsl.w	r2, r1, r2
 8001750:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b10      	cmp	r3, #16
 8001760:	d108      	bne.n	8001774 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001772:	e007      	b.n	8001784 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	68ba      	ldr	r2, [r7, #8]
 800177a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	60da      	str	r2, [r3, #12]
}
 8001784:	bf00      	nop
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	4b17      	ldr	r3, [pc, #92]	@ (80017fc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d80a      	bhi.n	80017ba <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a8:	089b      	lsrs	r3, r3, #2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80017b0:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6493      	str	r3, [r2, #72]	@ 0x48
 80017b8:	e007      	b.n	80017ca <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017be:	089b      	lsrs	r3, r3, #2
 80017c0:	009a      	lsls	r2, r3, #2
 80017c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001800 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80017c4:	4413      	add	r3, r2
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	3b08      	subs	r3, #8
 80017d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001804 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80017d4:	fba2 2303 	umull	r2, r3, r2, r3
 80017d8:	091b      	lsrs	r3, r3, #4
 80017da:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a0a      	ldr	r2, [pc, #40]	@ (8001808 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80017e0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f003 031f 	and.w	r3, r3, #31
 80017e8:	2201      	movs	r2, #1
 80017ea:	409a      	lsls	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	40020407 	.word	0x40020407
 8001800:	4002081c 	.word	0x4002081c
 8001804:	cccccccd 	.word	0xcccccccd
 8001808:	40020880 	.word	0x40020880

0800180c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800181c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	4b0b      	ldr	r3, [pc, #44]	@ (8001850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001822:	4413      	add	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	461a      	mov	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a09      	ldr	r2, [pc, #36]	@ (8001854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8001830:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	3b01      	subs	r3, #1
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	2201      	movs	r2, #1
 800183c:	409a      	lsls	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001842:	bf00      	nop
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	1000823f 	.word	0x1000823f
 8001854:	40020940 	.word	0x40020940

08001858 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001858:	b480      	push	{r7}
 800185a:	b087      	sub	sp, #28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001866:	e14c      	b.n	8001b02 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	2101      	movs	r1, #1
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	fa01 f303 	lsl.w	r3, r1, r3
 8001874:	4013      	ands	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 813e 	beq.w	8001afc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 0303 	and.w	r3, r3, #3
 8001888:	2b01      	cmp	r3, #1
 800188a:	d005      	beq.n	8001898 <HAL_GPIO_Init+0x40>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d130      	bne.n	80018fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	2203      	movs	r2, #3
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	4313      	orrs	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018ce:	2201      	movs	r2, #1
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	091b      	lsrs	r3, r3, #4
 80018e4:	f003 0201 	and.w	r2, r3, #1
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	2b03      	cmp	r3, #3
 8001904:	d017      	beq.n	8001936 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	2203      	movs	r2, #3
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	689a      	ldr	r2, [r3, #8]
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d123      	bne.n	800198a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	08da      	lsrs	r2, r3, #3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3208      	adds	r2, #8
 800194a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800194e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	220f      	movs	r2, #15
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	691a      	ldr	r2, [r3, #16]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	08da      	lsrs	r2, r3, #3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3208      	adds	r2, #8
 8001984:	6939      	ldr	r1, [r7, #16]
 8001986:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	2203      	movs	r2, #3
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	4013      	ands	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f003 0203 	and.w	r2, r3, #3
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 8098 	beq.w	8001afc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80019cc:	4a54      	ldr	r2, [pc, #336]	@ (8001b20 <HAL_GPIO_Init+0x2c8>)
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	089b      	lsrs	r3, r3, #2
 80019d2:	3302      	adds	r3, #2
 80019d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	220f      	movs	r2, #15
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4013      	ands	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80019f6:	d019      	beq.n	8001a2c <HAL_GPIO_Init+0x1d4>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a4a      	ldr	r2, [pc, #296]	@ (8001b24 <HAL_GPIO_Init+0x2cc>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d013      	beq.n	8001a28 <HAL_GPIO_Init+0x1d0>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a49      	ldr	r2, [pc, #292]	@ (8001b28 <HAL_GPIO_Init+0x2d0>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d00d      	beq.n	8001a24 <HAL_GPIO_Init+0x1cc>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a48      	ldr	r2, [pc, #288]	@ (8001b2c <HAL_GPIO_Init+0x2d4>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d007      	beq.n	8001a20 <HAL_GPIO_Init+0x1c8>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a47      	ldr	r2, [pc, #284]	@ (8001b30 <HAL_GPIO_Init+0x2d8>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d101      	bne.n	8001a1c <HAL_GPIO_Init+0x1c4>
 8001a18:	2304      	movs	r3, #4
 8001a1a:	e008      	b.n	8001a2e <HAL_GPIO_Init+0x1d6>
 8001a1c:	2307      	movs	r3, #7
 8001a1e:	e006      	b.n	8001a2e <HAL_GPIO_Init+0x1d6>
 8001a20:	2303      	movs	r3, #3
 8001a22:	e004      	b.n	8001a2e <HAL_GPIO_Init+0x1d6>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e002      	b.n	8001a2e <HAL_GPIO_Init+0x1d6>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <HAL_GPIO_Init+0x1d6>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	f002 0203 	and.w	r2, r2, #3
 8001a34:	0092      	lsls	r2, r2, #2
 8001a36:	4093      	lsls	r3, r2
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a3e:	4938      	ldr	r1, [pc, #224]	@ (8001b20 <HAL_GPIO_Init+0x2c8>)
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	089b      	lsrs	r3, r3, #2
 8001a44:	3302      	adds	r3, #2
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a4c:	4b39      	ldr	r3, [pc, #228]	@ (8001b34 <HAL_GPIO_Init+0x2dc>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a70:	4a30      	ldr	r2, [pc, #192]	@ (8001b34 <HAL_GPIO_Init+0x2dc>)
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a76:	4b2f      	ldr	r3, [pc, #188]	@ (8001b34 <HAL_GPIO_Init+0x2dc>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4013      	ands	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a9a:	4a26      	ldr	r2, [pc, #152]	@ (8001b34 <HAL_GPIO_Init+0x2dc>)
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001aa0:	4b24      	ldr	r3, [pc, #144]	@ (8001b34 <HAL_GPIO_Init+0x2dc>)
 8001aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8001b34 <HAL_GPIO_Init+0x2dc>)
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8001ace:	4b19      	ldr	r3, [pc, #100]	@ (8001b34 <HAL_GPIO_Init+0x2dc>)
 8001ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4013      	ands	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001af4:	4a0f      	ldr	r2, [pc, #60]	@ (8001b34 <HAL_GPIO_Init+0x2dc>)
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	3301      	adds	r3, #1
 8001b00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	fa22 f303 	lsr.w	r3, r2, r3
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f47f aeab 	bne.w	8001868 <HAL_GPIO_Init+0x10>
  }
}
 8001b12:	bf00      	nop
 8001b14:	bf00      	nop
 8001b16:	371c      	adds	r7, #28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	40010000 	.word	0x40010000
 8001b24:	48000400 	.word	0x48000400
 8001b28:	48000800 	.word	0x48000800
 8001b2c:	48000c00 	.word	0x48000c00
 8001b30:	48001000 	.word	0x48001000
 8001b34:	58000800 	.word	0x58000800

08001b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	807b      	strh	r3, [r7, #2]
 8001b44:	4613      	mov	r3, r2
 8001b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b48:	787b      	ldrb	r3, [r7, #1]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b4e:	887a      	ldrh	r2, [r7, #2]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b54:	e002      	b.n	8001b5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b56:	887a      	ldrh	r2, [r7, #2]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b6c:	4b05      	ldr	r3, [pc, #20]	@ (8001b84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a04      	ldr	r2, [pc, #16]	@ (8001b84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b76:	6013      	str	r3, [r2, #0]
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	58000400 	.word	0x58000400

08001b88 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001b8c:	4b04      	ldr	r3, [pc, #16]	@ (8001ba0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	58000400 	.word	0x58000400

08001ba4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001ba8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001bb6:	d101      	bne.n	8001bbc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e000      	b.n	8001bbe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001bcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bda:	6013      	str	r3, [r2, #0]
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001bea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bf8:	6013      	str	r3, [r2, #0]
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001c08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001c16:	d101      	bne.n	8001c1c <LL_RCC_HSE_IsReady+0x18>
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e000      	b.n	8001c1e <LL_RCC_HSE_IsReady+0x1a>
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001c2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c3a:	6013      	str	r3, [r2, #0]
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001c4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c58:	6013      	str	r3, [r2, #0]
}
 8001c5a:	bf00      	nop
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001c68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c76:	d101      	bne.n	8001c7c <LL_RCC_HSI_IsReady+0x18>
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e000      	b.n	8001c7e <LL_RCC_HSI_IsReady+0x1a>
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001c90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	061b      	lsls	r3, r3, #24
 8001c9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	604b      	str	r3, [r1, #4]
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001cb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001cbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001cd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ce0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001cfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d101      	bne.n	8001d0e <LL_RCC_HSI48_IsReady+0x18>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <LL_RCC_HSI48_IsReady+0x1a>
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001d32:	bf00      	nop
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d4c:	f023 0301 	bic.w	r3, r3, #1
 8001d50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001d62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d6e:	f043 0304 	orr.w	r3, r3, #4
 8001d72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d90:	f023 0304 	bic.w	r3, r3, #4
 8001d94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001da6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d101      	bne.n	8001dba <LL_RCC_LSE_IsReady+0x18>
 8001db6:	2301      	movs	r3, #1
 8001db8:	e000      	b.n	8001dbc <LL_RCC_LSE_IsReady+0x1a>
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001dca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dd2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001df4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001df8:	f023 0301 	bic.w	r3, r3, #1
 8001dfc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001e0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d101      	bne.n	8001e22 <LL_RCC_LSI1_IsReady+0x18>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <LL_RCC_LSI1_IsReady+0x1a>
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001e32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e3e:	f043 0304 	orr.w	r3, r3, #4
 8001e42:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001e54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e60:	f023 0304 	bic.w	r3, r3, #4
 8001e64:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001e76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d101      	bne.n	8001e8a <LL_RCC_LSI2_IsReady+0x18>
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <LL_RCC_LSI2_IsReady+0x1a>
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001e9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ea6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	021b      	lsls	r3, r3, #8
 8001eae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001ec8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	6013      	str	r3, [r2, #0]
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	6013      	str	r3, [r2, #0]
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001f04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d101      	bne.n	8001f16 <LL_RCC_MSI_IsReady+0x16>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <LL_RCC_MSI_IsReady+0x18>
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001f2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001f50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f5a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2bb0      	cmp	r3, #176	@ 0xb0
 8001f60:	d901      	bls.n	8001f66 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001f62:	23b0      	movs	r3, #176	@ 0xb0
 8001f64:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001f66:	687b      	ldr	r3, [r7, #4]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001f7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	021b      	lsls	r3, r3, #8
 8001f8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	604b      	str	r3, [r1, #4]
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001fa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f023 0203 	bic.w	r2, r3, #3
 8001fb0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	608b      	str	r3, [r1, #8]
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001fca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 030c 	and.w	r3, r3, #12
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001fe6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ff0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800200e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002012:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002016:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800201a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4313      	orrs	r3, r2
 8002022:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800203a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800203e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002042:	f023 020f 	bic.w	r2, r3, #15
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800204e:	4313      	orrs	r3, r2
 8002050:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002068:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002072:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4313      	orrs	r3, r2
 800207a:	608b      	str	r3, [r1, #8]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002090:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800209a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	608b      	str	r3, [r1, #8]
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80020b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80020cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020d0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80020d4:	011b      	lsls	r3, r3, #4
 80020d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80020e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002100:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800210a:	4618      	mov	r0, r3
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002118:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002122:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002126:	6013      	str	r3, [r2, #0]
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002136:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002140:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002144:	6013      	str	r3, [r2, #0]
}
 8002146:	bf00      	nop
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002154:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800215e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002162:	d101      	bne.n	8002168 <LL_RCC_PLL_IsReady+0x18>
 8002164:	2301      	movs	r3, #1
 8002166:	e000      	b.n	800216a <LL_RCC_PLL_IsReady+0x1a>
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002178:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	0a1b      	lsrs	r3, r3, #8
 8002180:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002192:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800219c:	4618      	mov	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80021a6:	b480      	push	{r7}
 80021a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80021aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80021c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f003 0303 	and.w	r3, r3, #3
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80021d6:	b480      	push	{r7}
 80021d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80021da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021e8:	d101      	bne.n	80021ee <LL_RCC_IsActiveFlag_HPRE+0x18>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80021fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002202:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800220a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800220e:	d101      	bne.n	8002214 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002210:	2301      	movs	r3, #1
 8002212:	e000      	b.n	8002216 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002224:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002228:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800222c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002234:	d101      	bne.n	800223a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800224a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002254:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002258:	d101      	bne.n	800225e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800226e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002278:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800227c:	d101      	bne.n	8002282 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
	...

08002290 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002290:	b590      	push	{r4, r7, lr}
 8002292:	b08d      	sub	sp, #52	@ 0x34
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e363      	b.n	800296a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0320 	and.w	r3, r3, #32
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 808d 	beq.w	80023ca <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022b0:	f7ff fe89 	bl	8001fc6 <LL_RCC_GetSysClkSource>
 80022b4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022b6:	f7ff ff82 	bl	80021be <LL_RCC_PLL_GetMainSource>
 80022ba:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80022bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d005      	beq.n	80022ce <HAL_RCC_OscConfig+0x3e>
 80022c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022c4:	2b0c      	cmp	r3, #12
 80022c6:	d147      	bne.n	8002358 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80022c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d144      	bne.n	8002358 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e347      	b.n	800296a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80022de:	f7ff fe34 	bl	8001f4a <LL_RCC_MSI_GetRange>
 80022e2:	4603      	mov	r3, r0
 80022e4:	429c      	cmp	r4, r3
 80022e6:	d914      	bls.n	8002312 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 fd2f 	bl	8002d50 <RCC_SetFlashLatencyFromMSIRange>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e336      	b.n	800296a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fe0e 	bl	8001f22 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff fe32 	bl	8001f74 <LL_RCC_MSI_SetCalibTrimming>
 8002310:	e013      	b.n	800233a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fe03 	bl	8001f22 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fe27 	bl	8001f74 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232a:	4618      	mov	r0, r3
 800232c:	f000 fd10 	bl	8002d50 <RCC_SetFlashLatencyFromMSIRange>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e317      	b.n	800296a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800233a:	f000 fcc9 	bl	8002cd0 <HAL_RCC_GetHCLKFreq>
 800233e:	4603      	mov	r3, r0
 8002340:	4aa4      	ldr	r2, [pc, #656]	@ (80025d4 <HAL_RCC_OscConfig+0x344>)
 8002342:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002344:	4ba4      	ldr	r3, [pc, #656]	@ (80025d8 <HAL_RCC_OscConfig+0x348>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe fe77 	bl	800103c <HAL_InitTick>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d039      	beq.n	80023c8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e308      	b.n	800296a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d01e      	beq.n	800239e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002360:	f7ff fdb0 	bl	8001ec4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002364:	f7fe feb8 	bl	80010d8 <HAL_GetTick>
 8002368:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800236c:	f7fe feb4 	bl	80010d8 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e2f5      	b.n	800296a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800237e:	f7ff fdbf 	bl	8001f00 <LL_RCC_MSI_IsReady>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0f1      	beq.n	800236c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fdc8 	bl	8001f22 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff fdec 	bl	8001f74 <LL_RCC_MSI_SetCalibTrimming>
 800239c:	e015      	b.n	80023ca <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800239e:	f7ff fda0 	bl	8001ee2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023a2:	f7fe fe99 	bl	80010d8 <HAL_GetTick>
 80023a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023aa:	f7fe fe95 	bl	80010d8 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e2d6      	b.n	800296a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80023bc:	f7ff fda0 	bl	8001f00 <LL_RCC_MSI_IsReady>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f1      	bne.n	80023aa <HAL_RCC_OscConfig+0x11a>
 80023c6:	e000      	b.n	80023ca <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80023c8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d047      	beq.n	8002466 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023d6:	f7ff fdf6 	bl	8001fc6 <LL_RCC_GetSysClkSource>
 80023da:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023dc:	f7ff feef 	bl	80021be <LL_RCC_PLL_GetMainSource>
 80023e0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d005      	beq.n	80023f4 <HAL_RCC_OscConfig+0x164>
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	2b0c      	cmp	r3, #12
 80023ec:	d108      	bne.n	8002400 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	d105      	bne.n	8002400 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d134      	bne.n	8002466 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e2b4      	b.n	800296a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002408:	d102      	bne.n	8002410 <HAL_RCC_OscConfig+0x180>
 800240a:	f7ff fbdd 	bl	8001bc8 <LL_RCC_HSE_Enable>
 800240e:	e001      	b.n	8002414 <HAL_RCC_OscConfig+0x184>
 8002410:	f7ff fbe9 	bl	8001be6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d012      	beq.n	8002442 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241c:	f7fe fe5c 	bl	80010d8 <HAL_GetTick>
 8002420:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002424:	f7fe fe58 	bl	80010d8 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b64      	cmp	r3, #100	@ 0x64
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e299      	b.n	800296a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002436:	f7ff fbe5 	bl	8001c04 <LL_RCC_HSE_IsReady>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f1      	beq.n	8002424 <HAL_RCC_OscConfig+0x194>
 8002440:	e011      	b.n	8002466 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002442:	f7fe fe49 	bl	80010d8 <HAL_GetTick>
 8002446:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800244a:	f7fe fe45 	bl	80010d8 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b64      	cmp	r3, #100	@ 0x64
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e286      	b.n	800296a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800245c:	f7ff fbd2 	bl	8001c04 <LL_RCC_HSE_IsReady>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f1      	bne.n	800244a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d04c      	beq.n	800250c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002472:	f7ff fda8 	bl	8001fc6 <LL_RCC_GetSysClkSource>
 8002476:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002478:	f7ff fea1 	bl	80021be <LL_RCC_PLL_GetMainSource>
 800247c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	2b04      	cmp	r3, #4
 8002482:	d005      	beq.n	8002490 <HAL_RCC_OscConfig+0x200>
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	2b0c      	cmp	r3, #12
 8002488:	d10e      	bne.n	80024a8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	2b02      	cmp	r3, #2
 800248e:	d10b      	bne.n	80024a8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e266      	b.n	800296a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff fbf1 	bl	8001c88 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80024a6:	e031      	b.n	800250c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d019      	beq.n	80024e4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024b0:	f7ff fbba 	bl	8001c28 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7fe fe10 	bl	80010d8 <HAL_GetTick>
 80024b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024bc:	f7fe fe0c 	bl	80010d8 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e24d      	b.n	800296a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80024ce:	f7ff fbc9 	bl	8001c64 <LL_RCC_HSI_IsReady>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0f1      	beq.n	80024bc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fbd3 	bl	8001c88 <LL_RCC_HSI_SetCalibTrimming>
 80024e2:	e013      	b.n	800250c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024e4:	f7ff fbaf 	bl	8001c46 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7fe fdf6 	bl	80010d8 <HAL_GetTick>
 80024ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f0:	f7fe fdf2 	bl	80010d8 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e233      	b.n	800296a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002502:	f7ff fbaf 	bl	8001c64 <LL_RCC_HSI_IsReady>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1f1      	bne.n	80024f0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0308 	and.w	r3, r3, #8
 8002514:	2b00      	cmp	r3, #0
 8002516:	d106      	bne.n	8002526 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 80a3 	beq.w	800266c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d076      	beq.n	800261c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0310 	and.w	r3, r3, #16
 8002536:	2b00      	cmp	r3, #0
 8002538:	d046      	beq.n	80025c8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800253a:	f7ff fc66 	bl	8001e0a <LL_RCC_LSI1_IsReady>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d113      	bne.n	800256c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002544:	f7ff fc3f 	bl	8001dc6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002548:	f7fe fdc6 	bl	80010d8 <HAL_GetTick>
 800254c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002550:	f7fe fdc2 	bl	80010d8 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e203      	b.n	800296a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002562:	f7ff fc52 	bl	8001e0a <LL_RCC_LSI1_IsReady>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f1      	beq.n	8002550 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800256c:	f7ff fc5f 	bl	8001e2e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002570:	f7fe fdb2 	bl	80010d8 <HAL_GetTick>
 8002574:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002578:	f7fe fdae 	bl	80010d8 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b03      	cmp	r3, #3
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e1ef      	b.n	800296a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800258a:	f7ff fc72 	bl	8001e72 <LL_RCC_LSI2_IsReady>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f1      	beq.n	8002578 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff fc7c 	bl	8001e96 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800259e:	f7ff fc23 	bl	8001de8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a2:	f7fe fd99 	bl	80010d8 <HAL_GetTick>
 80025a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80025aa:	f7fe fd95 	bl	80010d8 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e1d6      	b.n	800296a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80025bc:	f7ff fc25 	bl	8001e0a <LL_RCC_LSI1_IsReady>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f1      	bne.n	80025aa <HAL_RCC_OscConfig+0x31a>
 80025c6:	e051      	b.n	800266c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80025c8:	f7ff fbfd 	bl	8001dc6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025cc:	f7fe fd84 	bl	80010d8 <HAL_GetTick>
 80025d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80025d2:	e00c      	b.n	80025ee <HAL_RCC_OscConfig+0x35e>
 80025d4:	20000008 	.word	0x20000008
 80025d8:	2000001c 	.word	0x2000001c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80025dc:	f7fe fd7c 	bl	80010d8 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e1bd      	b.n	800296a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80025ee:	f7ff fc0c 	bl	8001e0a <LL_RCC_LSI1_IsReady>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0f1      	beq.n	80025dc <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80025f8:	f7ff fc2a 	bl	8001e50 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80025fe:	f7fe fd6b 	bl	80010d8 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b03      	cmp	r3, #3
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e1ac      	b.n	800296a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002610:	f7ff fc2f 	bl	8001e72 <LL_RCC_LSI2_IsReady>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f1      	bne.n	80025fe <HAL_RCC_OscConfig+0x36e>
 800261a:	e027      	b.n	800266c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800261c:	f7ff fc18 	bl	8001e50 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002620:	f7fe fd5a 	bl	80010d8 <HAL_GetTick>
 8002624:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002628:	f7fe fd56 	bl	80010d8 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b03      	cmp	r3, #3
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e197      	b.n	800296a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800263a:	f7ff fc1a 	bl	8001e72 <LL_RCC_LSI2_IsReady>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1f1      	bne.n	8002628 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002644:	f7ff fbd0 	bl	8001de8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002648:	f7fe fd46 	bl	80010d8 <HAL_GetTick>
 800264c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002650:	f7fe fd42 	bl	80010d8 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e183      	b.n	800296a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002662:	f7ff fbd2 	bl	8001e0a <LL_RCC_LSI1_IsReady>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1f1      	bne.n	8002650 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d05b      	beq.n	8002730 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002678:	4ba7      	ldr	r3, [pc, #668]	@ (8002918 <HAL_RCC_OscConfig+0x688>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002680:	2b00      	cmp	r3, #0
 8002682:	d114      	bne.n	80026ae <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002684:	f7ff fa70 	bl	8001b68 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002688:	f7fe fd26 	bl	80010d8 <HAL_GetTick>
 800268c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002690:	f7fe fd22 	bl	80010d8 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e163      	b.n	800296a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026a2:	4b9d      	ldr	r3, [pc, #628]	@ (8002918 <HAL_RCC_OscConfig+0x688>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d102      	bne.n	80026bc <HAL_RCC_OscConfig+0x42c>
 80026b6:	f7ff fb30 	bl	8001d1a <LL_RCC_LSE_Enable>
 80026ba:	e00c      	b.n	80026d6 <HAL_RCC_OscConfig+0x446>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	2b05      	cmp	r3, #5
 80026c2:	d104      	bne.n	80026ce <HAL_RCC_OscConfig+0x43e>
 80026c4:	f7ff fb4b 	bl	8001d5e <LL_RCC_LSE_EnableBypass>
 80026c8:	f7ff fb27 	bl	8001d1a <LL_RCC_LSE_Enable>
 80026cc:	e003      	b.n	80026d6 <HAL_RCC_OscConfig+0x446>
 80026ce:	f7ff fb35 	bl	8001d3c <LL_RCC_LSE_Disable>
 80026d2:	f7ff fb55 	bl	8001d80 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d014      	beq.n	8002708 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026de:	f7fe fcfb 	bl	80010d8 <HAL_GetTick>
 80026e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80026e4:	e00a      	b.n	80026fc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e6:	f7fe fcf7 	bl	80010d8 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e136      	b.n	800296a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80026fc:	f7ff fb51 	bl	8001da2 <LL_RCC_LSE_IsReady>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0ef      	beq.n	80026e6 <HAL_RCC_OscConfig+0x456>
 8002706:	e013      	b.n	8002730 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002708:	f7fe fce6 	bl	80010d8 <HAL_GetTick>
 800270c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800270e:	e00a      	b.n	8002726 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002710:	f7fe fce2 	bl	80010d8 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800271e:	4293      	cmp	r3, r2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e121      	b.n	800296a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002726:	f7ff fb3c 	bl	8001da2 <LL_RCC_LSE_IsReady>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1ef      	bne.n	8002710 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002738:	2b00      	cmp	r3, #0
 800273a:	d02c      	beq.n	8002796 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002740:	2b00      	cmp	r3, #0
 8002742:	d014      	beq.n	800276e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002744:	f7ff fab5 	bl	8001cb2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002748:	f7fe fcc6 	bl	80010d8 <HAL_GetTick>
 800274c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002750:	f7fe fcc2 	bl	80010d8 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e103      	b.n	800296a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002762:	f7ff fac8 	bl	8001cf6 <LL_RCC_HSI48_IsReady>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0f1      	beq.n	8002750 <HAL_RCC_OscConfig+0x4c0>
 800276c:	e013      	b.n	8002796 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800276e:	f7ff fab1 	bl	8001cd4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002772:	f7fe fcb1 	bl	80010d8 <HAL_GetTick>
 8002776:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800277a:	f7fe fcad 	bl	80010d8 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e0ee      	b.n	800296a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800278c:	f7ff fab3 	bl	8001cf6 <LL_RCC_HSI48_IsReady>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f1      	bne.n	800277a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 80e4 	beq.w	8002968 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027a0:	f7ff fc11 	bl	8001fc6 <LL_RCC_GetSysClkSource>
 80027a4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80027a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	f040 80b4 	bne.w	8002920 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f003 0203 	and.w	r2, r3, #3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d123      	bne.n	800280e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d11c      	bne.n	800280e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	0a1b      	lsrs	r3, r3, #8
 80027d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d114      	bne.n	800280e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d10d      	bne.n	800280e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d106      	bne.n	800280e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800280a:	429a      	cmp	r2, r3
 800280c:	d05d      	beq.n	80028ca <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	2b0c      	cmp	r3, #12
 8002812:	d058      	beq.n	80028c6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002814:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e0a1      	b.n	800296a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002826:	f7ff fc84 	bl	8002132 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800282a:	f7fe fc55 	bl	80010d8 <HAL_GetTick>
 800282e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002832:	f7fe fc51 	bl	80010d8 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e092      	b.n	800296a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002844:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1ef      	bne.n	8002832 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002852:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	4b30      	ldr	r3, [pc, #192]	@ (800291c <HAL_RCC_OscConfig+0x68c>)
 800285a:	4013      	ands	r3, r2
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002864:	4311      	orrs	r1, r2
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800286a:	0212      	lsls	r2, r2, #8
 800286c:	4311      	orrs	r1, r2
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002872:	4311      	orrs	r1, r2
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002878:	4311      	orrs	r1, r2
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800287e:	430a      	orrs	r2, r1
 8002880:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002884:	4313      	orrs	r3, r2
 8002886:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002888:	f7ff fc44 	bl	8002114 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800288c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002896:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800289a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800289c:	f7fe fc1c 	bl	80010d8 <HAL_GetTick>
 80028a0:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a4:	f7fe fc18 	bl	80010d8 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e059      	b.n	800296a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0ef      	beq.n	80028a4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028c4:	e050      	b.n	8002968 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e04f      	b.n	800296a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d147      	bne.n	8002968 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028d8:	f7ff fc1c 	bl	8002114 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028ec:	f7fe fbf4 	bl	80010d8 <HAL_GetTick>
 80028f0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f4:	f7fe fbf0 	bl	80010d8 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e031      	b.n	800296a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002906:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0ef      	beq.n	80028f4 <HAL_RCC_OscConfig+0x664>
 8002914:	e028      	b.n	8002968 <HAL_RCC_OscConfig+0x6d8>
 8002916:	bf00      	nop
 8002918:	58000400 	.word	0x58000400
 800291c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	2b0c      	cmp	r3, #12
 8002924:	d01e      	beq.n	8002964 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002926:	f7ff fc04 	bl	8002132 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292a:	f7fe fbd5 	bl	80010d8 <HAL_GetTick>
 800292e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002932:	f7fe fbd1 	bl	80010d8 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e012      	b.n	800296a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002944:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1ef      	bne.n	8002932 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002952:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800295c:	4b05      	ldr	r3, [pc, #20]	@ (8002974 <HAL_RCC_OscConfig+0x6e4>)
 800295e:	4013      	ands	r3, r2
 8002960:	60cb      	str	r3, [r1, #12]
 8002962:	e001      	b.n	8002968 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3734      	adds	r7, #52	@ 0x34
 800296e:	46bd      	mov	sp, r7
 8002970:	bd90      	pop	{r4, r7, pc}
 8002972:	bf00      	nop
 8002974:	eefefffc 	.word	0xeefefffc

08002978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e12d      	b.n	8002be8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800298c:	4b98      	ldr	r3, [pc, #608]	@ (8002bf0 <HAL_RCC_ClockConfig+0x278>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d91b      	bls.n	80029d2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299a:	4b95      	ldr	r3, [pc, #596]	@ (8002bf0 <HAL_RCC_ClockConfig+0x278>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 0207 	bic.w	r2, r3, #7
 80029a2:	4993      	ldr	r1, [pc, #588]	@ (8002bf0 <HAL_RCC_ClockConfig+0x278>)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029aa:	f7fe fb95 	bl	80010d8 <HAL_GetTick>
 80029ae:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80029b2:	f7fe fb91 	bl	80010d8 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e111      	b.n	8002be8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c4:	4b8a      	ldr	r3, [pc, #552]	@ (8002bf0 <HAL_RCC_ClockConfig+0x278>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d1ef      	bne.n	80029b2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d016      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff fafb 	bl	8001fde <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80029e8:	f7fe fb76 	bl	80010d8 <HAL_GetTick>
 80029ec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80029f0:	f7fe fb72 	bl	80010d8 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e0f2      	b.n	8002be8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002a02:	f7ff fbe8 	bl	80021d6 <LL_RCC_IsActiveFlag_HPRE>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0f1      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0320 	and.w	r3, r3, #32
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d016      	beq.n	8002a46 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff faf2 	bl	8002006 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a22:	f7fe fb59 	bl	80010d8 <HAL_GetTick>
 8002a26:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a2a:	f7fe fb55 	bl	80010d8 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e0d5      	b.n	8002be8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002a3c:	f7ff fbdd 	bl	80021fa <LL_RCC_IsActiveFlag_C2HPRE>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f1      	beq.n	8002a2a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d016      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff faeb 	bl	8002032 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a5c:	f7fe fb3c 	bl	80010d8 <HAL_GetTick>
 8002a60:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a64:	f7fe fb38 	bl	80010d8 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e0b8      	b.n	8002be8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002a76:	f7ff fbd3 	bl	8002220 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f1      	beq.n	8002a64 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d016      	beq.n	8002aba <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff fae5 	bl	8002060 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a96:	f7fe fb1f 	bl	80010d8 <HAL_GetTick>
 8002a9a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a9e:	f7fe fb1b 	bl	80010d8 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e09b      	b.n	8002be8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002ab0:	f7ff fbc9 	bl	8002246 <LL_RCC_IsActiveFlag_PPRE1>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0f1      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d017      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff fadb 	bl	8002088 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ad2:	f7fe fb01 	bl	80010d8 <HAL_GetTick>
 8002ad6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ada:	f7fe fafd 	bl	80010d8 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e07d      	b.n	8002be8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002aec:	f7ff fbbd 	bl	800226a <LL_RCC_IsActiveFlag_PPRE2>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0f1      	beq.n	8002ada <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d043      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d106      	bne.n	8002b18 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002b0a:	f7ff f87b 	bl	8001c04 <LL_RCC_HSE_IsReady>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d11e      	bne.n	8002b52 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e067      	b.n	8002be8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b03      	cmp	r3, #3
 8002b1e:	d106      	bne.n	8002b2e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002b20:	f7ff fb16 	bl	8002150 <LL_RCC_PLL_IsReady>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d113      	bne.n	8002b52 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e05c      	b.n	8002be8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d106      	bne.n	8002b44 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002b36:	f7ff f9e3 	bl	8001f00 <LL_RCC_MSI_IsReady>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d108      	bne.n	8002b52 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e051      	b.n	8002be8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002b44:	f7ff f88e 	bl	8001c64 <LL_RCC_HSI_IsReady>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e04a      	b.n	8002be8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff fa21 	bl	8001f9e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b5c:	f7fe fabc 	bl	80010d8 <HAL_GetTick>
 8002b60:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b62:	e00a      	b.n	8002b7a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b64:	f7fe fab8 	bl	80010d8 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e036      	b.n	8002be8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7a:	f7ff fa24 	bl	8001fc6 <LL_RCC_GetSysClkSource>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d1ec      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b8a:	4b19      	ldr	r3, [pc, #100]	@ (8002bf0 <HAL_RCC_ClockConfig+0x278>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d21b      	bcs.n	8002bd0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b98:	4b15      	ldr	r3, [pc, #84]	@ (8002bf0 <HAL_RCC_ClockConfig+0x278>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f023 0207 	bic.w	r2, r3, #7
 8002ba0:	4913      	ldr	r1, [pc, #76]	@ (8002bf0 <HAL_RCC_ClockConfig+0x278>)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ba8:	f7fe fa96 	bl	80010d8 <HAL_GetTick>
 8002bac:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002bb0:	f7fe fa92 	bl	80010d8 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e012      	b.n	8002be8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf0 <HAL_RCC_ClockConfig+0x278>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d1ef      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002bd0:	f000 f87e 	bl	8002cd0 <HAL_RCC_GetHCLKFreq>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	4a07      	ldr	r2, [pc, #28]	@ (8002bf4 <HAL_RCC_ClockConfig+0x27c>)
 8002bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002bda:	f7fe fa89 	bl	80010f0 <HAL_GetTickPrio>
 8002bde:	4603      	mov	r3, r0
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fe fa2b 	bl	800103c <HAL_InitTick>
 8002be6:	4603      	mov	r3, r0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	58004000 	.word	0x58004000
 8002bf4:	20000008 	.word	0x20000008

08002bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bf8:	b590      	push	{r4, r7, lr}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bfe:	f7ff f9e2 	bl	8001fc6 <LL_RCC_GetSysClkSource>
 8002c02:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10a      	bne.n	8002c20 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002c0a:	f7ff f99e 	bl	8001f4a <LL_RCC_MSI_GetRange>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	4a2b      	ldr	r2, [pc, #172]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	e04b      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d102      	bne.n	8002c2c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c26:	4b28      	ldr	r3, [pc, #160]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	e045      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d10a      	bne.n	8002c48 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002c32:	f7fe ffb7 	bl	8001ba4 <LL_RCC_HSE_IsEnabledDiv2>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d102      	bne.n	8002c42 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002c3c:	4b22      	ldr	r3, [pc, #136]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	e03a      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002c42:	4b22      	ldr	r3, [pc, #136]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	e037      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002c48:	f7ff fab9 	bl	80021be <LL_RCC_PLL_GetMainSource>
 8002c4c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d003      	beq.n	8002c5c <HAL_RCC_GetSysClockFreq+0x64>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	d003      	beq.n	8002c62 <HAL_RCC_GetSysClockFreq+0x6a>
 8002c5a:	e00d      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c5e:	60bb      	str	r3, [r7, #8]
        break;
 8002c60:	e015      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002c62:	f7fe ff9f 	bl	8001ba4 <LL_RCC_HSE_IsEnabledDiv2>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d102      	bne.n	8002c72 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002c6c:	4b16      	ldr	r3, [pc, #88]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c6e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002c70:	e00d      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002c72:	4b16      	ldr	r3, [pc, #88]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002c74:	60bb      	str	r3, [r7, #8]
        break;
 8002c76:	e00a      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002c78:	f7ff f967 	bl	8001f4a <LL_RCC_MSI_GetRange>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	091b      	lsrs	r3, r3, #4
 8002c80:	f003 030f 	and.w	r3, r3, #15
 8002c84:	4a0f      	ldr	r2, [pc, #60]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c8a:	60bb      	str	r3, [r7, #8]
        break;
 8002c8c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002c8e:	f7ff fa71 	bl	8002174 <LL_RCC_PLL_GetN>
 8002c92:	4602      	mov	r2, r0
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	fb03 f402 	mul.w	r4, r3, r2
 8002c9a:	f7ff fa84 	bl	80021a6 <LL_RCC_PLL_GetDivider>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	fbb4 f4f3 	udiv	r4, r4, r3
 8002ca8:	f7ff fa71 	bl	800218e <LL_RCC_PLL_GetR>
 8002cac:	4603      	mov	r3, r0
 8002cae:	0f5b      	lsrs	r3, r3, #29
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	fbb4 f3f3 	udiv	r3, r4, r3
 8002cb6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd90      	pop	{r4, r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	08005ca0 	.word	0x08005ca0
 8002cc8:	00f42400 	.word	0x00f42400
 8002ccc:	01e84800 	.word	0x01e84800

08002cd0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cd0:	b598      	push	{r3, r4, r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002cd4:	f7ff ff90 	bl	8002bf8 <HAL_RCC_GetSysClockFreq>
 8002cd8:	4604      	mov	r4, r0
 8002cda:	f7ff f9e9 	bl	80020b0 <LL_RCC_GetAHBPrescaler>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	091b      	lsrs	r3, r3, #4
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	4a03      	ldr	r2, [pc, #12]	@ (8002cf4 <HAL_RCC_GetHCLKFreq+0x24>)
 8002ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cec:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	bd98      	pop	{r3, r4, r7, pc}
 8002cf4:	08005c40 	.word	0x08005c40

08002cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cf8:	b598      	push	{r3, r4, r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002cfc:	f7ff ffe8 	bl	8002cd0 <HAL_RCC_GetHCLKFreq>
 8002d00:	4604      	mov	r4, r0
 8002d02:	f7ff f9ef 	bl	80020e4 <LL_RCC_GetAPB1Prescaler>
 8002d06:	4603      	mov	r3, r0
 8002d08:	0a1b      	lsrs	r3, r3, #8
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	4a04      	ldr	r2, [pc, #16]	@ (8002d20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d14:	f003 031f 	and.w	r3, r3, #31
 8002d18:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	bd98      	pop	{r3, r4, r7, pc}
 8002d20:	08005c80 	.word	0x08005c80

08002d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d24:	b598      	push	{r3, r4, r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002d28:	f7ff ffd2 	bl	8002cd0 <HAL_RCC_GetHCLKFreq>
 8002d2c:	4604      	mov	r4, r0
 8002d2e:	f7ff f9e5 	bl	80020fc <LL_RCC_GetAPB2Prescaler>
 8002d32:	4603      	mov	r3, r0
 8002d34:	0adb      	lsrs	r3, r3, #11
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	4a04      	ldr	r2, [pc, #16]	@ (8002d4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d40:	f003 031f 	and.w	r3, r3, #31
 8002d44:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	bd98      	pop	{r3, r4, r7, pc}
 8002d4c:	08005c80 	.word	0x08005c80

08002d50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002d50:	b590      	push	{r4, r7, lr}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2bb0      	cmp	r3, #176	@ 0xb0
 8002d5c:	d903      	bls.n	8002d66 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002d5e:	4b15      	ldr	r3, [pc, #84]	@ (8002db4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	e007      	b.n	8002d76 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	091b      	lsrs	r3, r3, #4
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	4a11      	ldr	r2, [pc, #68]	@ (8002db4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d74:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002d76:	f7ff f9a7 	bl	80020c8 <LL_RCC_GetAHB4Prescaler>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	091b      	lsrs	r3, r3, #4
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	4a0d      	ldr	r2, [pc, #52]	@ (8002db8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4a0a      	ldr	r2, [pc, #40]	@ (8002dbc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002d94:	fba2 2303 	umull	r2, r3, r2, r3
 8002d98:	0c9c      	lsrs	r4, r3, #18
 8002d9a:	f7fe fef5 	bl	8001b88 <HAL_PWREx_GetVoltageRange>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	4619      	mov	r1, r3
 8002da2:	4620      	mov	r0, r4
 8002da4:	f000 f80c 	bl	8002dc0 <RCC_SetFlashLatency>
 8002da8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd90      	pop	{r4, r7, pc}
 8002db2:	bf00      	nop
 8002db4:	08005ca0 	.word	0x08005ca0
 8002db8:	08005c40 	.word	0x08005c40
 8002dbc:	431bde83 	.word	0x431bde83

08002dc0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002dc0:	b590      	push	{r4, r7, lr}
 8002dc2:	b093      	sub	sp, #76	@ 0x4c
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002dca:	4b37      	ldr	r3, [pc, #220]	@ (8002ea8 <RCC_SetFlashLatency+0xe8>)
 8002dcc:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002dd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002dd6:	4a35      	ldr	r2, [pc, #212]	@ (8002eac <RCC_SetFlashLatency+0xec>)
 8002dd8:	f107 031c 	add.w	r3, r7, #28
 8002ddc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002dde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002de2:	4b33      	ldr	r3, [pc, #204]	@ (8002eb0 <RCC_SetFlashLatency+0xf0>)
 8002de4:	f107 040c 	add.w	r4, r7, #12
 8002de8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002dee:	2300      	movs	r3, #0
 8002df0:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002df8:	d11a      	bne.n	8002e30 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	643b      	str	r3, [r7, #64]	@ 0x40
 8002dfe:	e013      	b.n	8002e28 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002e00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	3348      	adds	r3, #72	@ 0x48
 8002e06:	443b      	add	r3, r7
 8002e08:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d807      	bhi.n	8002e22 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002e12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	3348      	adds	r3, #72	@ 0x48
 8002e18:	443b      	add	r3, r7
 8002e1a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002e1e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002e20:	e020      	b.n	8002e64 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002e22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e24:	3301      	adds	r3, #1
 8002e26:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e2a:	2b03      	cmp	r3, #3
 8002e2c:	d9e8      	bls.n	8002e00 <RCC_SetFlashLatency+0x40>
 8002e2e:	e019      	b.n	8002e64 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002e30:	2300      	movs	r3, #0
 8002e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e34:	e013      	b.n	8002e5e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002e36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	3348      	adds	r3, #72	@ 0x48
 8002e3c:	443b      	add	r3, r7
 8002e3e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d807      	bhi.n	8002e58 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002e48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	3348      	adds	r3, #72	@ 0x48
 8002e4e:	443b      	add	r3, r7
 8002e50:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002e54:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002e56:	e005      	b.n	8002e64 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d9e8      	bls.n	8002e36 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002e64:	4b13      	ldr	r3, [pc, #76]	@ (8002eb4 <RCC_SetFlashLatency+0xf4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f023 0207 	bic.w	r2, r3, #7
 8002e6c:	4911      	ldr	r1, [pc, #68]	@ (8002eb4 <RCC_SetFlashLatency+0xf4>)
 8002e6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e70:	4313      	orrs	r3, r2
 8002e72:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002e74:	f7fe f930 	bl	80010d8 <HAL_GetTick>
 8002e78:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002e7a:	e008      	b.n	8002e8e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002e7c:	f7fe f92c 	bl	80010d8 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e007      	b.n	8002e9e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002e8e:	4b09      	ldr	r3, [pc, #36]	@ (8002eb4 <RCC_SetFlashLatency+0xf4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d1ef      	bne.n	8002e7c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	374c      	adds	r7, #76	@ 0x4c
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd90      	pop	{r4, r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	08005c14 	.word	0x08005c14
 8002eac:	08005c24 	.word	0x08005c24
 8002eb0:	08005c30 	.word	0x08005c30
 8002eb4:	58004000 	.word	0x58004000

08002eb8 <LL_RCC_LSE_IsEnabled>:
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002ebc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <LL_RCC_LSE_IsEnabled+0x18>
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <LL_RCC_LSE_IsEnabled+0x1a>
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <LL_RCC_LSE_IsReady>:
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002ee0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d101      	bne.n	8002ef4 <LL_RCC_LSE_IsReady+0x18>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e000      	b.n	8002ef6 <LL_RCC_LSE_IsReady+0x1a>
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <LL_RCC_SetRFWKPClockSource>:
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002f08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f10:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <LL_RCC_SetSMPSClockSource>:
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002f34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3a:	f023 0203 	bic.w	r2, r3, #3
 8002f3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <LL_RCC_SetSMPSPrescaler>:
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002f5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f62:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002f66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <LL_RCC_SetUSARTClockSource>:
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002f84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f8c:	f023 0203 	bic.w	r2, r3, #3
 8002f90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <LL_RCC_SetLPUARTClockSource>:
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002fb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002fbc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <LL_RCC_SetI2CClockSource>:
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002fdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fe0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	091b      	lsrs	r3, r3, #4
 8002fe8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002fec:	43db      	mvns	r3, r3
 8002fee:	401a      	ands	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002ff8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <LL_RCC_SetLPTIMClockSource>:
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003016:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800301a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	0c1b      	lsrs	r3, r3, #16
 8003022:	041b      	lsls	r3, r3, #16
 8003024:	43db      	mvns	r3, r3
 8003026:	401a      	ands	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	041b      	lsls	r3, r3, #16
 800302c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003030:	4313      	orrs	r3, r2
 8003032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <LL_RCC_SetSAIClockSource>:
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800304a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800304e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003052:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003056:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <LL_RCC_SetRNGClockSource>:
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003076:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003082:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <LL_RCC_SetCLK48ClockSource>:
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80030a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <LL_RCC_SetUSBClockSource>:
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7ff ffe3 	bl	800309a <LL_RCC_SetCLK48ClockSource>
}
 80030d4:	bf00      	nop
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <LL_RCC_SetADCClockSource>:
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80030e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ec:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80030f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <LL_RCC_SetRTCClockSource>:
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003110:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003114:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003118:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800311c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4313      	orrs	r3, r2
 8003124:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <LL_RCC_GetRTCClockSource>:
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003138:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800313c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003140:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003144:	4618      	mov	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <LL_RCC_ForceBackupDomainReset>:
{
 800314e:	b480      	push	{r7}
 8003150:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003152:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800315a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800315e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003162:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003166:	bf00      	nop
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003174:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800317c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003180:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003184:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003188:	bf00      	nop
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <LL_RCC_PLLSAI1_Enable>:
{
 8003192:	b480      	push	{r7}
 8003194:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003196:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80031a4:	6013      	str	r3, [r2, #0]
}
 80031a6:	bf00      	nop
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <LL_RCC_PLLSAI1_Disable>:
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80031b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80031c2:	6013      	str	r3, [r2, #0]
}
 80031c4:	bf00      	nop
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <LL_RCC_PLLSAI1_IsReady>:
{
 80031ce:	b480      	push	{r7}
 80031d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80031d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031e0:	d101      	bne.n	80031e6 <LL_RCC_PLLSAI1_IsReady+0x18>
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b088      	sub	sp, #32
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80031fa:	2300      	movs	r3, #0
 80031fc:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80031fe:	2300      	movs	r3, #0
 8003200:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800320a:	2b00      	cmp	r3, #0
 800320c:	d034      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003212:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003216:	d021      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003218:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800321c:	d81b      	bhi.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800321e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003222:	d01d      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003224:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003228:	d815      	bhi.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00b      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800322e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003232:	d110      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003234:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800323e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003242:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003244:	e00d      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3304      	adds	r3, #4
 800324a:	4618      	mov	r0, r3
 800324c:	f000 f947 	bl	80034de <RCCEx_PLLSAI1_ConfigNP>
 8003250:	4603      	mov	r3, r0
 8003252:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003254:	e005      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	77fb      	strb	r3, [r7, #31]
        break;
 800325a:	e002      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800325c:	bf00      	nop
 800325e:	e000      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003260:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003262:	7ffb      	ldrb	r3, [r7, #31]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d105      	bne.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff fee8 	bl	8003042 <LL_RCC_SetSAIClockSource>
 8003272:	e001      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003274:	7ffb      	ldrb	r3, [r7, #31]
 8003276:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003280:	2b00      	cmp	r3, #0
 8003282:	d046      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003284:	f7ff ff56 	bl	8003134 <LL_RCC_GetRTCClockSource>
 8003288:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	429a      	cmp	r2, r3
 8003292:	d03c      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003294:	f7fe fc68 	bl	8001b68 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d105      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff ff30 	bl	8003108 <LL_RCC_SetRTCClockSource>
 80032a8:	e02e      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80032aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80032b4:	f7ff ff4b 	bl	800314e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80032b8:	f7ff ff5a 	bl	8003170 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c6:	4313      	orrs	r3, r2
 80032c8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80032ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80032d4:	f7ff fdf0 	bl	8002eb8 <LL_RCC_LSE_IsEnabled>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d114      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032de:	f7fd fefb 	bl	80010d8 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80032e4:	e00b      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e6:	f7fd fef7 	bl	80010d8 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d902      	bls.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	77fb      	strb	r3, [r7, #31]
              break;
 80032fc:	e004      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80032fe:	f7ff fded 	bl	8002edc <LL_RCC_LSE_IsReady>
 8003302:	4603      	mov	r3, r0
 8003304:	2b01      	cmp	r3, #1
 8003306:	d1ee      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003308:	7ffb      	ldrb	r3, [r7, #31]
 800330a:	77bb      	strb	r3, [r7, #30]
 800330c:	e001      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800330e:	7ffb      	ldrb	r3, [r7, #31]
 8003310:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d004      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff fe2a 	bl	8002f7c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d004      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff fe35 	bl	8002fa8 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0310 	and.w	r3, r3, #16
 8003346:	2b00      	cmp	r3, #0
 8003348:	d004      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff fe5d 	bl	800300e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0320 	and.w	r3, r3, #32
 800335c:	2b00      	cmp	r3, #0
 800335e:	d004      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff fe52 	bl	800300e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b00      	cmp	r3, #0
 8003374:	d004      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff fe2a 	bl	8002fd4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	2b00      	cmp	r3, #0
 800338a:	d004      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff fe1f 	bl	8002fd4 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d022      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff fe8d 	bl	80030c6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033b4:	d107      	bne.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80033b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033c4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033ce:	d10b      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3304      	adds	r3, #4
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 f8dd 	bl	8003594 <RCCEx_PLLSAI1_ConfigNQ>
 80033da:	4603      	mov	r3, r0
 80033dc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80033de:	7ffb      	ldrb	r3, [r7, #31]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80033e4:	7ffb      	ldrb	r3, [r7, #31]
 80033e6:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d02b      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033fc:	d008      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003402:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003406:	d003      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800340c:	2b00      	cmp	r3, #0
 800340e:	d105      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff fe2a 	bl	800306e <LL_RCC_SetRNGClockSource>
 800341a:	e00a      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003420:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	2000      	movs	r0, #0
 8003428:	f7ff fe21 	bl	800306e <LL_RCC_SetRNGClockSource>
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f7ff fe34 	bl	800309a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003436:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800343a:	d107      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800343c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003446:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800344a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003454:	2b00      	cmp	r3, #0
 8003456:	d022      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff fe3d 	bl	80030dc <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003466:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800346a:	d107      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800346c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003476:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800347a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003480:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003484:	d10b      	bne.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3304      	adds	r3, #4
 800348a:	4618      	mov	r0, r3
 800348c:	f000 f8dd 	bl	800364a <RCCEx_PLLSAI1_ConfigNR>
 8003490:	4603      	mov	r3, r0
 8003492:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003494:	7ffb      	ldrb	r3, [r7, #31]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800349a:	7ffb      	ldrb	r3, [r7, #31]
 800349c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d004      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff fd26 	bl	8002f00 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d009      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff fd45 	bl	8002f54 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff fd2c 	bl	8002f2c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80034d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3720      	adds	r7, #32
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b084      	sub	sp, #16
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80034ea:	f7ff fe61 	bl	80031b0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80034ee:	f7fd fdf3 	bl	80010d8 <HAL_GetTick>
 80034f2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80034f4:	e009      	b.n	800350a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034f6:	f7fd fdef 	bl	80010d8 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d902      	bls.n	800350a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	73fb      	strb	r3, [r7, #15]
      break;
 8003508:	e004      	b.n	8003514 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800350a:	f7ff fe60 	bl	80031ce <LL_RCC_PLLSAI1_IsReady>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1f0      	bne.n	80034f6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003514:	7bfb      	ldrb	r3, [r7, #15]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d137      	bne.n	800358a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800351a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	021b      	lsls	r3, r3, #8
 800352a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800352e:	4313      	orrs	r3, r2
 8003530:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003532:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003544:	4313      	orrs	r3, r2
 8003546:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003548:	f7ff fe23 	bl	8003192 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800354c:	f7fd fdc4 	bl	80010d8 <HAL_GetTick>
 8003550:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003552:	e009      	b.n	8003568 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003554:	f7fd fdc0 	bl	80010d8 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d902      	bls.n	8003568 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	73fb      	strb	r3, [r7, #15]
        break;
 8003566:	e004      	b.n	8003572 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003568:	f7ff fe31 	bl	80031ce <LL_RCC_PLLSAI1_IsReady>
 800356c:	4603      	mov	r3, r0
 800356e:	2b01      	cmp	r3, #1
 8003570:	d1f0      	bne.n	8003554 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d108      	bne.n	800358a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003578:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800357c:	691a      	ldr	r2, [r3, #16]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003586:	4313      	orrs	r3, r2
 8003588:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800358a:	7bfb      	ldrb	r3, [r7, #15]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800359c:	2300      	movs	r3, #0
 800359e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80035a0:	f7ff fe06 	bl	80031b0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80035a4:	f7fd fd98 	bl	80010d8 <HAL_GetTick>
 80035a8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80035aa:	e009      	b.n	80035c0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035ac:	f7fd fd94 	bl	80010d8 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d902      	bls.n	80035c0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	73fb      	strb	r3, [r7, #15]
      break;
 80035be:	e004      	b.n	80035ca <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80035c0:	f7ff fe05 	bl	80031ce <LL_RCC_PLLSAI1_IsReady>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d137      	bne.n	8003640 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80035d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	021b      	lsls	r3, r3, #8
 80035e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035e4:	4313      	orrs	r3, r2
 80035e6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80035e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035fa:	4313      	orrs	r3, r2
 80035fc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80035fe:	f7ff fdc8 	bl	8003192 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003602:	f7fd fd69 	bl	80010d8 <HAL_GetTick>
 8003606:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003608:	e009      	b.n	800361e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800360a:	f7fd fd65 	bl	80010d8 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d902      	bls.n	800361e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	73fb      	strb	r3, [r7, #15]
        break;
 800361c:	e004      	b.n	8003628 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800361e:	f7ff fdd6 	bl	80031ce <LL_RCC_PLLSAI1_IsReady>
 8003622:	4603      	mov	r3, r0
 8003624:	2b01      	cmp	r3, #1
 8003626:	d1f0      	bne.n	800360a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003628:	7bfb      	ldrb	r3, [r7, #15]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d108      	bne.n	8003640 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800362e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800363c:	4313      	orrs	r3, r2
 800363e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003640:	7bfb      	ldrb	r3, [r7, #15]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b084      	sub	sp, #16
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003656:	f7ff fdab 	bl	80031b0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800365a:	f7fd fd3d 	bl	80010d8 <HAL_GetTick>
 800365e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003660:	e009      	b.n	8003676 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003662:	f7fd fd39 	bl	80010d8 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d902      	bls.n	8003676 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	73fb      	strb	r3, [r7, #15]
      break;
 8003674:	e004      	b.n	8003680 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003676:	f7ff fdaa 	bl	80031ce <LL_RCC_PLLSAI1_IsReady>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1f0      	bne.n	8003662 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003680:	7bfb      	ldrb	r3, [r7, #15]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d137      	bne.n	80036f6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003686:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	021b      	lsls	r3, r3, #8
 8003696:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800369a:	4313      	orrs	r3, r2
 800369c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800369e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036b0:	4313      	orrs	r3, r2
 80036b2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80036b4:	f7ff fd6d 	bl	8003192 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036b8:	f7fd fd0e 	bl	80010d8 <HAL_GetTick>
 80036bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80036be:	e009      	b.n	80036d4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036c0:	f7fd fd0a 	bl	80010d8 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d902      	bls.n	80036d4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	73fb      	strb	r3, [r7, #15]
        break;
 80036d2:	e004      	b.n	80036de <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80036d4:	f7ff fd7b 	bl	80031ce <LL_RCC_PLLSAI1_IsReady>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d1f0      	bne.n	80036c0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80036de:	7bfb      	ldrb	r3, [r7, #15]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d108      	bne.n	80036f6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80036e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036f2:	4313      	orrs	r3, r2
 80036f4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e095      	b.n	800383e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003716:	2b00      	cmp	r3, #0
 8003718:	d108      	bne.n	800372c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003722:	d009      	beq.n	8003738 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	61da      	str	r2, [r3, #28]
 800372a:	e005      	b.n	8003738 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7fd f9a8 	bl	8000aa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800376e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003778:	d902      	bls.n	8003780 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	e002      	b.n	8003786 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003780:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003784:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800378e:	d007      	beq.n	80037a0 <HAL_SPI_Init+0xa0>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003798:	d002      	beq.n	80037a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80037b0:	431a      	orrs	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	431a      	orrs	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037e2:	ea42 0103 	orr.w	r1, r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ea:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	0c1b      	lsrs	r3, r3, #16
 80037fc:	f003 0204 	and.w	r2, r3, #4
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003804:	f003 0310 	and.w	r3, r3, #16
 8003808:	431a      	orrs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800381c:	ea42 0103 	orr.w	r1, r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	4613      	mov	r3, r2
 8003854:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b01      	cmp	r3, #1
 8003860:	d001      	beq.n	8003866 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8003862:	2302      	movs	r3, #2
 8003864:	e105      	b.n	8003a72 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <HAL_SPI_Receive_DMA+0x2a>
 800386c:	88fb      	ldrh	r3, [r7, #6]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_SPI_Receive_DMA+0x2e>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e0fd      	b.n	8003a72 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d110      	bne.n	80038a0 <HAL_SPI_Receive_DMA+0x58>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003886:	d10b      	bne.n	80038a0 <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2204      	movs	r2, #4
 800388c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8003890:	88fb      	ldrh	r3, [r7, #6]
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	68b9      	ldr	r1, [r7, #8]
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 f8f6 	bl	8003a88 <HAL_SPI_TransmitReceive_DMA>
 800389c:	4603      	mov	r3, r0
 800389e:	e0e8      	b.n	8003a72 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_SPI_Receive_DMA+0x66>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e0e1      	b.n	8003a72 <HAL_SPI_Receive_DMA+0x22a>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2204      	movs	r2, #4
 80038ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	88fa      	ldrh	r2, [r7, #6]
 80038ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	88fa      	ldrh	r2, [r7, #6]
 80038d6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038fa:	d10f      	bne.n	800391c <HAL_SPI_Receive_DMA+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800390a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800391a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800392a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003934:	d908      	bls.n	8003948 <HAL_SPI_Receive_DMA+0x100>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003944:	605a      	str	r2, [r3, #4]
 8003946:	e042      	b.n	80039ce <HAL_SPI_Receive_DMA+0x186>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003956:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003962:	d134      	bne.n	80039ce <HAL_SPI_Receive_DMA+0x186>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003972:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800397a:	b29b      	uxth	r3, r3
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b00      	cmp	r3, #0
 8003982:	d111      	bne.n	80039a8 <HAL_SPI_Receive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003992:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800399a:	b29b      	uxth	r3, r3
 800399c:	085b      	lsrs	r3, r3, #1
 800399e:	b29a      	uxth	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80039a6:	e012      	b.n	80039ce <HAL_SPI_Receive_DMA+0x186>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039b6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039be:	b29b      	uxth	r3, r3
 80039c0:	085b      	lsrs	r3, r3, #1
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	3301      	adds	r3, #1
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d2:	4a2a      	ldr	r2, [pc, #168]	@ (8003a7c <HAL_SPI_Receive_DMA+0x234>)
 80039d4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039da:	4a29      	ldr	r2, [pc, #164]	@ (8003a80 <HAL_SPI_Receive_DMA+0x238>)
 80039dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e2:	4a28      	ldr	r2, [pc, #160]	@ (8003a84 <HAL_SPI_Receive_DMA+0x23c>)
 80039e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ea:	2200      	movs	r2, #0
 80039ec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	330c      	adds	r3, #12
 80039f8:	4619      	mov	r1, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fe:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a06:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003a08:	f7fd fd5a 	bl	80014c0 <HAL_DMA_Start_IT>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00b      	beq.n	8003a2a <HAL_SPI_Receive_DMA+0x1e2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a16:	f043 0210 	orr.w	r2, r3, #16
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e023      	b.n	8003a72 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a34:	2b40      	cmp	r3, #64	@ 0x40
 8003a36:	d007      	beq.n	8003a48 <HAL_SPI_Receive_DMA+0x200>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a46:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0220 	orr.w	r2, r2, #32
 8003a5e:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0201 	orr.w	r2, r2, #1
 8003a6e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	08003f1d 	.word	0x08003f1d
 8003a80:	08003de5 	.word	0x08003de5
 8003a84:	08003f55 	.word	0x08003f55

08003a88 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
 8003a94:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a9c:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003aa4:	7dfb      	ldrb	r3, [r7, #23]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d00c      	beq.n	8003ac4 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ab0:	d106      	bne.n	8003ac0 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d102      	bne.n	8003ac0 <HAL_SPI_TransmitReceive_DMA+0x38>
 8003aba:	7dfb      	ldrb	r3, [r7, #23]
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d001      	beq.n	8003ac4 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e158      	b.n	8003d76 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d005      	beq.n	8003ad6 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d002      	beq.n	8003ad6 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8003ad0:	887b      	ldrh	r3, [r7, #2]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e14d      	b.n	8003d76 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_SPI_TransmitReceive_DMA+0x60>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e146      	b.n	8003d76 <HAL_SPI_TransmitReceive_DMA+0x2ee>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d003      	beq.n	8003b04 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2205      	movs	r2, #5
 8003b00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	887a      	ldrh	r2, [r7, #2]
 8003b14:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	887a      	ldrh	r2, [r7, #2]
 8003b1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	887a      	ldrh	r2, [r7, #2]
 8003b26:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	887a      	ldrh	r2, [r7, #2]
 8003b2e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8003b4c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b56:	d908      	bls.n	8003b6a <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b66:	605a      	str	r2, [r3, #4]
 8003b68:	e06f      	b.n	8003c4a <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b78:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b84:	d126      	bne.n	8003bd4 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10f      	bne.n	8003bb2 <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003ba0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	085b      	lsrs	r3, r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003bb0:	e010      	b.n	8003bd4 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bc0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	085b      	lsrs	r3, r3, #1
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	3301      	adds	r3, #1
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bde:	d134      	bne.n	8003c4a <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003bee:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d111      	bne.n	8003c24 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c0e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	085b      	lsrs	r3, r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003c22:	e012      	b.n	8003c4a <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c32:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	085b      	lsrs	r3, r3, #1
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	3301      	adds	r3, #1
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d108      	bne.n	8003c68 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c5a:	4a49      	ldr	r2, [pc, #292]	@ (8003d80 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8003c5c:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c62:	4a48      	ldr	r2, [pc, #288]	@ (8003d84 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8003c64:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003c66:	e007      	b.n	8003c78 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c6c:	4a46      	ldr	r2, [pc, #280]	@ (8003d88 <HAL_SPI_TransmitReceive_DMA+0x300>)
 8003c6e:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c74:	4a45      	ldr	r2, [pc, #276]	@ (8003d8c <HAL_SPI_TransmitReceive_DMA+0x304>)
 8003c76:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c7c:	4a44      	ldr	r2, [pc, #272]	@ (8003d90 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8003c7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c84:	2200      	movs	r2, #0
 8003c86:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	330c      	adds	r3, #12
 8003c92:	4619      	mov	r1, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c98:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ca0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003ca2:	f7fd fc0d 	bl	80014c0 <HAL_DMA_Start_IT>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00b      	beq.n	8003cc4 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cb0:	f043 0210 	orr.w	r2, r3, #16
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e058      	b.n	8003d76 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0201 	orr.w	r2, r2, #1
 8003cd2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd8:	2200      	movs	r2, #0
 8003cda:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce8:	2200      	movs	r2, #0
 8003cea:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	330c      	adds	r3, #12
 8003d04:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d0a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003d0c:	f7fd fbd8 	bl	80014c0 <HAL_DMA_Start_IT>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00b      	beq.n	8003d2e <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d1a:	f043 0210 	orr.w	r2, r3, #16
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e023      	b.n	8003d76 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d38:	2b40      	cmp	r3, #64	@ 0x40
 8003d3a:	d007      	beq.n	8003d4c <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d4a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 0220 	orr.w	r2, r2, #32
 8003d62:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 0202 	orr.w	r2, r2, #2
 8003d72:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	08003f1d 	.word	0x08003f1d
 8003d84:	08003de5 	.word	0x08003de5
 8003d88:	08003f39 	.word	0x08003f39
 8003d8c:	08003e8d 	.word	0x08003e8d
 8003d90:	08003f55 	.word	0x08003f55

08003d94 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df0:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003df2:	f7fd f971 	bl	80010d8 <HAL_GetTick>
 8003df6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0320 	and.w	r3, r3, #32
 8003e02:	2b20      	cmp	r3, #32
 8003e04:	d03c      	beq.n	8003e80 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0220 	bic.w	r2, r2, #32
 8003e14:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10d      	bne.n	8003e3a <SPI_DMAReceiveCplt+0x56>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e26:	d108      	bne.n	8003e3a <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0203 	bic.w	r2, r2, #3
 8003e36:	605a      	str	r2, [r3, #4]
 8003e38:	e007      	b.n	8003e4a <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0201 	bic.w	r2, r2, #1
 8003e48:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	2164      	movs	r1, #100	@ 0x64
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 f9be 	bl	80041d0 <SPI_EndRxTransaction>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f7ff ffa9 	bl	8003dd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003e7e:	e002      	b.n	8003e86 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f7fc fd95 	bl	80009b0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e98:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e9a:	f7fd f91d 	bl	80010d8 <HAL_GetTick>
 8003e9e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0320 	and.w	r3, r3, #32
 8003eaa:	2b20      	cmp	r3, #32
 8003eac:	d030      	beq.n	8003f10 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0220 	bic.w	r2, r2, #32
 8003ebc:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	2164      	movs	r1, #100	@ 0x64
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 f9dc 	bl	8004280 <SPI_EndRxTxTransaction>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d005      	beq.n	8003eda <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ed2:	f043 0220 	orr.w	r2, r3, #32
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0203 	bic.w	r2, r2, #3
 8003ee8:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f7ff ff61 	bl	8003dd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003f0e:	e002      	b.n	8003f16 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f7ff ff3f 	bl	8003d94 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f28:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f7ff ff3c 	bl	8003da8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f30:	bf00      	nop
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f44:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f7ff ff38 	bl	8003dbc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f4c:	bf00      	nop
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f60:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0203 	bic.w	r2, r2, #3
 8003f70:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f76:	f043 0210 	orr.w	r2, r3, #16
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f7ff ff22 	bl	8003dd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f8c:	bf00      	nop
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b088      	sub	sp, #32
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	603b      	str	r3, [r7, #0]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003fa4:	f7fd f898 	bl	80010d8 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fac:	1a9b      	subs	r3, r3, r2
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003fb4:	f7fd f890 	bl	80010d8 <HAL_GetTick>
 8003fb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003fba:	4b39      	ldr	r3, [pc, #228]	@ (80040a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	015b      	lsls	r3, r3, #5
 8003fc0:	0d1b      	lsrs	r3, r3, #20
 8003fc2:	69fa      	ldr	r2, [r7, #28]
 8003fc4:	fb02 f303 	mul.w	r3, r2, r3
 8003fc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fca:	e054      	b.n	8004076 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fd2:	d050      	beq.n	8004076 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fd4:	f7fd f880 	bl	80010d8 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	69fa      	ldr	r2, [r7, #28]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d902      	bls.n	8003fea <SPI_WaitFlagStateUntilTimeout+0x56>
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d13d      	bne.n	8004066 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003ff8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004002:	d111      	bne.n	8004028 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800400c:	d004      	beq.n	8004018 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004016:	d107      	bne.n	8004028 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004026:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800402c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004030:	d10f      	bne.n	8004052 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004050:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e017      	b.n	8004096 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	3b01      	subs	r3, #1
 8004074:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4013      	ands	r3, r2
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	429a      	cmp	r2, r3
 8004084:	bf0c      	ite	eq
 8004086:	2301      	moveq	r3, #1
 8004088:	2300      	movne	r3, #0
 800408a:	b2db      	uxtb	r3, r3
 800408c:	461a      	mov	r2, r3
 800408e:	79fb      	ldrb	r3, [r7, #7]
 8004090:	429a      	cmp	r2, r3
 8004092:	d19b      	bne.n	8003fcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3720      	adds	r7, #32
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	20000008 	.word	0x20000008

080040a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b08a      	sub	sp, #40	@ 0x28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80040b2:	2300      	movs	r3, #0
 80040b4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80040b6:	f7fd f80f 	bl	80010d8 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040be:	1a9b      	subs	r3, r3, r2
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	4413      	add	r3, r2
 80040c4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80040c6:	f7fd f807 	bl	80010d8 <HAL_GetTick>
 80040ca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	330c      	adds	r3, #12
 80040d2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80040d4:	4b3d      	ldr	r3, [pc, #244]	@ (80041cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	4613      	mov	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	00da      	lsls	r2, r3, #3
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	0d1b      	lsrs	r3, r3, #20
 80040e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040e6:	fb02 f303 	mul.w	r3, r2, r3
 80040ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80040ec:	e060      	b.n	80041b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80040f4:	d107      	bne.n	8004106 <SPI_WaitFifoStateUntilTimeout+0x62>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d104      	bne.n	8004106 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	b2db      	uxtb	r3, r3
 8004102:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004104:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800410c:	d050      	beq.n	80041b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800410e:	f7fc ffe3 	bl	80010d8 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800411a:	429a      	cmp	r2, r3
 800411c:	d902      	bls.n	8004124 <SPI_WaitFifoStateUntilTimeout+0x80>
 800411e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004120:	2b00      	cmp	r3, #0
 8004122:	d13d      	bne.n	80041a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004132:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800413c:	d111      	bne.n	8004162 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004146:	d004      	beq.n	8004152 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004150:	d107      	bne.n	8004162 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004160:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004166:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800416a:	d10f      	bne.n	800418c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800418a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e010      	b.n	80041c2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	3b01      	subs	r3, #1
 80041ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689a      	ldr	r2, [r3, #8]
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	4013      	ands	r3, r2
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d196      	bne.n	80040ee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3728      	adds	r7, #40	@ 0x28
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	20000008 	.word	0x20000008

080041d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af02      	add	r7, sp, #8
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041e4:	d111      	bne.n	800420a <SPI_EndRxTransaction+0x3a>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041ee:	d004      	beq.n	80041fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041f8:	d107      	bne.n	800420a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004208:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2200      	movs	r2, #0
 8004212:	2180      	movs	r1, #128	@ 0x80
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f7ff febd 	bl	8003f94 <SPI_WaitFlagStateUntilTimeout>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d007      	beq.n	8004230 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004224:	f043 0220 	orr.w	r2, r3, #32
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e023      	b.n	8004278 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004238:	d11d      	bne.n	8004276 <SPI_EndRxTransaction+0xa6>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004242:	d004      	beq.n	800424e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800424c:	d113      	bne.n	8004276 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2200      	movs	r2, #0
 8004256:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f7ff ff22 	bl	80040a4 <SPI_WaitFifoStateUntilTimeout>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d007      	beq.n	8004276 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800426a:	f043 0220 	orr.w	r2, r3, #32
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e000      	b.n	8004278 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af02      	add	r7, sp, #8
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	2200      	movs	r2, #0
 8004294:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f7ff ff03 	bl	80040a4 <SPI_WaitFifoStateUntilTimeout>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d007      	beq.n	80042b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042a8:	f043 0220 	orr.w	r2, r3, #32
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e027      	b.n	8004304 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2200      	movs	r2, #0
 80042bc:	2180      	movs	r1, #128	@ 0x80
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f7ff fe68 	bl	8003f94 <SPI_WaitFlagStateUntilTimeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d007      	beq.n	80042da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042ce:	f043 0220 	orr.w	r2, r3, #32
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e014      	b.n	8004304 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f7ff fedc 	bl	80040a4 <SPI_WaitFifoStateUntilTimeout>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d007      	beq.n	8004302 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042f6:	f043 0220 	orr.w	r2, r3, #32
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e000      	b.n	8004304 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <LL_RCC_GetUSARTClockSource>:
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004314:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004318:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4013      	ands	r3, r2
}
 8004320:	4618      	mov	r0, r3
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <LL_RCC_GetLPUARTClockSource>:
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004334:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004338:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4013      	ands	r3, r2
}
 8004340:	4618      	mov	r0, r3
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e042      	b.n	80043e4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004364:	2b00      	cmp	r3, #0
 8004366:	d106      	bne.n	8004376 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f83b 	bl	80043ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2224      	movs	r2, #36	@ 0x24
 800437a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0201 	bic.w	r2, r2, #1
 800438c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004392:	2b00      	cmp	r3, #0
 8004394:	d002      	beq.n	800439c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 fa5a 	bl	8004850 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f82f 	bl	8004400 <UART_SetConfig>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d101      	bne.n	80043ac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e01b      	b.n	80043e4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689a      	ldr	r2, [r3, #8]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0201 	orr.w	r2, r2, #1
 80043da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 fad9 	bl	8004994 <UART_CheckIdleState>
 80043e2:	4603      	mov	r3, r0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004404:	b08c      	sub	sp, #48	@ 0x30
 8004406:	af00      	add	r7, sp, #0
 8004408:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800440a:	2300      	movs	r3, #0
 800440c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	431a      	orrs	r2, r3
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	431a      	orrs	r2, r3
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	4313      	orrs	r3, r2
 8004426:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	4baf      	ldr	r3, [pc, #700]	@ (80046ec <UART_SetConfig+0x2ec>)
 8004430:	4013      	ands	r3, r2
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	6812      	ldr	r2, [r2, #0]
 8004436:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004438:	430b      	orrs	r3, r1
 800443a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	68da      	ldr	r2, [r3, #12]
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4aa4      	ldr	r2, [pc, #656]	@ (80046f0 <UART_SetConfig+0x2f0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d004      	beq.n	800446c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004468:	4313      	orrs	r3, r2
 800446a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004476:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	6812      	ldr	r2, [r2, #0]
 800447e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004480:	430b      	orrs	r3, r1
 8004482:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448a:	f023 010f 	bic.w	r1, r3, #15
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a95      	ldr	r2, [pc, #596]	@ (80046f4 <UART_SetConfig+0x2f4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d125      	bne.n	80044f0 <UART_SetConfig+0xf0>
 80044a4:	2003      	movs	r0, #3
 80044a6:	f7ff ff31 	bl	800430c <LL_RCC_GetUSARTClockSource>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b03      	cmp	r3, #3
 80044ae:	d81b      	bhi.n	80044e8 <UART_SetConfig+0xe8>
 80044b0:	a201      	add	r2, pc, #4	@ (adr r2, 80044b8 <UART_SetConfig+0xb8>)
 80044b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b6:	bf00      	nop
 80044b8:	080044c9 	.word	0x080044c9
 80044bc:	080044d9 	.word	0x080044d9
 80044c0:	080044d1 	.word	0x080044d1
 80044c4:	080044e1 	.word	0x080044e1
 80044c8:	2301      	movs	r3, #1
 80044ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044ce:	e042      	b.n	8004556 <UART_SetConfig+0x156>
 80044d0:	2302      	movs	r3, #2
 80044d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044d6:	e03e      	b.n	8004556 <UART_SetConfig+0x156>
 80044d8:	2304      	movs	r3, #4
 80044da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044de:	e03a      	b.n	8004556 <UART_SetConfig+0x156>
 80044e0:	2308      	movs	r3, #8
 80044e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044e6:	e036      	b.n	8004556 <UART_SetConfig+0x156>
 80044e8:	2310      	movs	r3, #16
 80044ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044ee:	e032      	b.n	8004556 <UART_SetConfig+0x156>
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a7e      	ldr	r2, [pc, #504]	@ (80046f0 <UART_SetConfig+0x2f0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d12a      	bne.n	8004550 <UART_SetConfig+0x150>
 80044fa:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80044fe:	f7ff ff15 	bl	800432c <LL_RCC_GetLPUARTClockSource>
 8004502:	4603      	mov	r3, r0
 8004504:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004508:	d01a      	beq.n	8004540 <UART_SetConfig+0x140>
 800450a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800450e:	d81b      	bhi.n	8004548 <UART_SetConfig+0x148>
 8004510:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004514:	d00c      	beq.n	8004530 <UART_SetConfig+0x130>
 8004516:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800451a:	d815      	bhi.n	8004548 <UART_SetConfig+0x148>
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <UART_SetConfig+0x128>
 8004520:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004524:	d008      	beq.n	8004538 <UART_SetConfig+0x138>
 8004526:	e00f      	b.n	8004548 <UART_SetConfig+0x148>
 8004528:	2300      	movs	r3, #0
 800452a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800452e:	e012      	b.n	8004556 <UART_SetConfig+0x156>
 8004530:	2302      	movs	r3, #2
 8004532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004536:	e00e      	b.n	8004556 <UART_SetConfig+0x156>
 8004538:	2304      	movs	r3, #4
 800453a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800453e:	e00a      	b.n	8004556 <UART_SetConfig+0x156>
 8004540:	2308      	movs	r3, #8
 8004542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004546:	e006      	b.n	8004556 <UART_SetConfig+0x156>
 8004548:	2310      	movs	r3, #16
 800454a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800454e:	e002      	b.n	8004556 <UART_SetConfig+0x156>
 8004550:	2310      	movs	r3, #16
 8004552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a65      	ldr	r2, [pc, #404]	@ (80046f0 <UART_SetConfig+0x2f0>)
 800455c:	4293      	cmp	r3, r2
 800455e:	f040 8097 	bne.w	8004690 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004562:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004566:	2b08      	cmp	r3, #8
 8004568:	d823      	bhi.n	80045b2 <UART_SetConfig+0x1b2>
 800456a:	a201      	add	r2, pc, #4	@ (adr r2, 8004570 <UART_SetConfig+0x170>)
 800456c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004570:	08004595 	.word	0x08004595
 8004574:	080045b3 	.word	0x080045b3
 8004578:	0800459d 	.word	0x0800459d
 800457c:	080045b3 	.word	0x080045b3
 8004580:	080045a3 	.word	0x080045a3
 8004584:	080045b3 	.word	0x080045b3
 8004588:	080045b3 	.word	0x080045b3
 800458c:	080045b3 	.word	0x080045b3
 8004590:	080045ab 	.word	0x080045ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004594:	f7fe fbb0 	bl	8002cf8 <HAL_RCC_GetPCLK1Freq>
 8004598:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800459a:	e010      	b.n	80045be <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800459c:	4b56      	ldr	r3, [pc, #344]	@ (80046f8 <UART_SetConfig+0x2f8>)
 800459e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80045a0:	e00d      	b.n	80045be <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045a2:	f7fe fb29 	bl	8002bf8 <HAL_RCC_GetSysClockFreq>
 80045a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045a8:	e009      	b.n	80045be <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80045b0:	e005      	b.n	80045be <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80045bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 812b 	beq.w	800481c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ca:	4a4c      	ldr	r2, [pc, #304]	@ (80046fc <UART_SetConfig+0x2fc>)
 80045cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045d0:	461a      	mov	r2, r3
 80045d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	4613      	mov	r3, r2
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	4413      	add	r3, r2
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d305      	bcc.n	80045f6 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d903      	bls.n	80045fe <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80045fc:	e10e      	b.n	800481c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004600:	2200      	movs	r2, #0
 8004602:	60bb      	str	r3, [r7, #8]
 8004604:	60fa      	str	r2, [r7, #12]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460a:	4a3c      	ldr	r2, [pc, #240]	@ (80046fc <UART_SetConfig+0x2fc>)
 800460c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004610:	b29b      	uxth	r3, r3
 8004612:	2200      	movs	r2, #0
 8004614:	603b      	str	r3, [r7, #0]
 8004616:	607a      	str	r2, [r7, #4]
 8004618:	e9d7 2300 	ldrd	r2, r3, [r7]
 800461c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004620:	f7fb fdfe 	bl	8000220 <__aeabi_uldivmod>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4610      	mov	r0, r2
 800462a:	4619      	mov	r1, r3
 800462c:	f04f 0200 	mov.w	r2, #0
 8004630:	f04f 0300 	mov.w	r3, #0
 8004634:	020b      	lsls	r3, r1, #8
 8004636:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800463a:	0202      	lsls	r2, r0, #8
 800463c:	6979      	ldr	r1, [r7, #20]
 800463e:	6849      	ldr	r1, [r1, #4]
 8004640:	0849      	lsrs	r1, r1, #1
 8004642:	2000      	movs	r0, #0
 8004644:	460c      	mov	r4, r1
 8004646:	4605      	mov	r5, r0
 8004648:	eb12 0804 	adds.w	r8, r2, r4
 800464c:	eb43 0905 	adc.w	r9, r3, r5
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	469a      	mov	sl, r3
 8004658:	4693      	mov	fp, r2
 800465a:	4652      	mov	r2, sl
 800465c:	465b      	mov	r3, fp
 800465e:	4640      	mov	r0, r8
 8004660:	4649      	mov	r1, r9
 8004662:	f7fb fddd 	bl	8000220 <__aeabi_uldivmod>
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	4613      	mov	r3, r2
 800466c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004674:	d308      	bcc.n	8004688 <UART_SetConfig+0x288>
 8004676:	6a3b      	ldr	r3, [r7, #32]
 8004678:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800467c:	d204      	bcs.n	8004688 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6a3a      	ldr	r2, [r7, #32]
 8004684:	60da      	str	r2, [r3, #12]
 8004686:	e0c9      	b.n	800481c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800468e:	e0c5      	b.n	800481c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	69db      	ldr	r3, [r3, #28]
 8004694:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004698:	d16d      	bne.n	8004776 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800469a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800469e:	3b01      	subs	r3, #1
 80046a0:	2b07      	cmp	r3, #7
 80046a2:	d82d      	bhi.n	8004700 <UART_SetConfig+0x300>
 80046a4:	a201      	add	r2, pc, #4	@ (adr r2, 80046ac <UART_SetConfig+0x2ac>)
 80046a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046aa:	bf00      	nop
 80046ac:	080046cd 	.word	0x080046cd
 80046b0:	080046d5 	.word	0x080046d5
 80046b4:	08004701 	.word	0x08004701
 80046b8:	080046db 	.word	0x080046db
 80046bc:	08004701 	.word	0x08004701
 80046c0:	08004701 	.word	0x08004701
 80046c4:	08004701 	.word	0x08004701
 80046c8:	080046e3 	.word	0x080046e3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046cc:	f7fe fb2a 	bl	8002d24 <HAL_RCC_GetPCLK2Freq>
 80046d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046d2:	e01b      	b.n	800470c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046d4:	4b08      	ldr	r3, [pc, #32]	@ (80046f8 <UART_SetConfig+0x2f8>)
 80046d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80046d8:	e018      	b.n	800470c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046da:	f7fe fa8d 	bl	8002bf8 <HAL_RCC_GetSysClockFreq>
 80046de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046e0:	e014      	b.n	800470c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80046e8:	e010      	b.n	800470c <UART_SetConfig+0x30c>
 80046ea:	bf00      	nop
 80046ec:	cfff69f3 	.word	0xcfff69f3
 80046f0:	40008000 	.word	0x40008000
 80046f4:	40013800 	.word	0x40013800
 80046f8:	00f42400 	.word	0x00f42400
 80046fc:	08005ce8 	.word	0x08005ce8
      default:
        pclk = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800470a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800470c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 8084 	beq.w	800481c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004718:	4a4b      	ldr	r2, [pc, #300]	@ (8004848 <UART_SetConfig+0x448>)
 800471a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800471e:	461a      	mov	r2, r3
 8004720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004722:	fbb3 f3f2 	udiv	r3, r3, r2
 8004726:	005a      	lsls	r2, r3, #1
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	085b      	lsrs	r3, r3, #1
 800472e:	441a      	add	r2, r3
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	fbb2 f3f3 	udiv	r3, r2, r3
 8004738:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	2b0f      	cmp	r3, #15
 800473e:	d916      	bls.n	800476e <UART_SetConfig+0x36e>
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004746:	d212      	bcs.n	800476e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	b29b      	uxth	r3, r3
 800474c:	f023 030f 	bic.w	r3, r3, #15
 8004750:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	085b      	lsrs	r3, r3, #1
 8004756:	b29b      	uxth	r3, r3
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	b29a      	uxth	r2, r3
 800475e:	8bfb      	ldrh	r3, [r7, #30]
 8004760:	4313      	orrs	r3, r2
 8004762:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	8bfa      	ldrh	r2, [r7, #30]
 800476a:	60da      	str	r2, [r3, #12]
 800476c:	e056      	b.n	800481c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004774:	e052      	b.n	800481c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004776:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800477a:	3b01      	subs	r3, #1
 800477c:	2b07      	cmp	r3, #7
 800477e:	d822      	bhi.n	80047c6 <UART_SetConfig+0x3c6>
 8004780:	a201      	add	r2, pc, #4	@ (adr r2, 8004788 <UART_SetConfig+0x388>)
 8004782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004786:	bf00      	nop
 8004788:	080047a9 	.word	0x080047a9
 800478c:	080047b1 	.word	0x080047b1
 8004790:	080047c7 	.word	0x080047c7
 8004794:	080047b7 	.word	0x080047b7
 8004798:	080047c7 	.word	0x080047c7
 800479c:	080047c7 	.word	0x080047c7
 80047a0:	080047c7 	.word	0x080047c7
 80047a4:	080047bf 	.word	0x080047bf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047a8:	f7fe fabc 	bl	8002d24 <HAL_RCC_GetPCLK2Freq>
 80047ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047ae:	e010      	b.n	80047d2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047b0:	4b26      	ldr	r3, [pc, #152]	@ (800484c <UART_SetConfig+0x44c>)
 80047b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047b4:	e00d      	b.n	80047d2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047b6:	f7fe fa1f 	bl	8002bf8 <HAL_RCC_GetSysClockFreq>
 80047ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047bc:	e009      	b.n	80047d2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047c4:	e005      	b.n	80047d2 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80047d0:	bf00      	nop
    }

    if (pclk != 0U)
 80047d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d021      	beq.n	800481c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047dc:	4a1a      	ldr	r2, [pc, #104]	@ (8004848 <UART_SetConfig+0x448>)
 80047de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047e2:	461a      	mov	r2, r3
 80047e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	085b      	lsrs	r3, r3, #1
 80047f0:	441a      	add	r2, r3
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	2b0f      	cmp	r3, #15
 8004800:	d909      	bls.n	8004816 <UART_SetConfig+0x416>
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004808:	d205      	bcs.n	8004816 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	b29a      	uxth	r2, r3
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	60da      	str	r2, [r3, #12]
 8004814:	e002      	b.n	800481c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	2201      	movs	r2, #1
 8004820:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	2201      	movs	r2, #1
 8004828:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	2200      	movs	r2, #0
 8004830:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2200      	movs	r2, #0
 8004836:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004838:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800483c:	4618      	mov	r0, r3
 800483e:	3730      	adds	r7, #48	@ 0x30
 8004840:	46bd      	mov	sp, r7
 8004842:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004846:	bf00      	nop
 8004848:	08005ce8 	.word	0x08005ce8
 800484c:	00f42400 	.word	0x00f42400

08004850 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800485c:	f003 0308 	and.w	r3, r3, #8
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00a      	beq.n	800487a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00a      	beq.n	800489c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00a      	beq.n	80048be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c2:	f003 0304 	and.w	r3, r3, #4
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e4:	f003 0310 	and.w	r3, r3, #16
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00a      	beq.n	8004902 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01a      	beq.n	8004966 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800494a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800494e:	d10a      	bne.n	8004966 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	605a      	str	r2, [r3, #4]
  }
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b098      	sub	sp, #96	@ 0x60
 8004998:	af02      	add	r7, sp, #8
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049a4:	f7fc fb98 	bl	80010d8 <HAL_GetTick>
 80049a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0308 	and.w	r3, r3, #8
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d12f      	bne.n	8004a18 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049c0:	2200      	movs	r2, #0
 80049c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f88e 	bl	8004ae8 <UART_WaitOnFlagUntilTimeout>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d022      	beq.n	8004a18 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049da:	e853 3f00 	ldrex	r3, [r3]
 80049de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80049e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	461a      	mov	r2, r3
 80049ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80049f2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80049f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049f8:	e841 2300 	strex	r3, r2, [r1]
 80049fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80049fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1e6      	bne.n	80049d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e063      	b.n	8004ae0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0304 	and.w	r3, r3, #4
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	d149      	bne.n	8004aba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a26:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f857 	bl	8004ae8 <UART_WaitOnFlagUntilTimeout>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d03c      	beq.n	8004aba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a48:	e853 3f00 	ldrex	r3, [r3]
 8004a4c:	623b      	str	r3, [r7, #32]
   return(result);
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a60:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a66:	e841 2300 	strex	r3, r2, [r1]
 8004a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1e6      	bne.n	8004a40 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	3308      	adds	r3, #8
 8004a78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	e853 3f00 	ldrex	r3, [r3]
 8004a80:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f023 0301 	bic.w	r3, r3, #1
 8004a88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3308      	adds	r3, #8
 8004a90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a92:	61fa      	str	r2, [r7, #28]
 8004a94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a96:	69b9      	ldr	r1, [r7, #24]
 8004a98:	69fa      	ldr	r2, [r7, #28]
 8004a9a:	e841 2300 	strex	r3, r2, [r1]
 8004a9e:	617b      	str	r3, [r7, #20]
   return(result);
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1e5      	bne.n	8004a72 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e012      	b.n	8004ae0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2220      	movs	r2, #32
 8004abe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3758      	adds	r7, #88	@ 0x58
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	603b      	str	r3, [r7, #0]
 8004af4:	4613      	mov	r3, r2
 8004af6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004af8:	e04f      	b.n	8004b9a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b00:	d04b      	beq.n	8004b9a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b02:	f7fc fae9 	bl	80010d8 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d302      	bcc.n	8004b18 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e04e      	b.n	8004bba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0304 	and.w	r3, r3, #4
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d037      	beq.n	8004b9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2b80      	cmp	r3, #128	@ 0x80
 8004b2e:	d034      	beq.n	8004b9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2b40      	cmp	r3, #64	@ 0x40
 8004b34:	d031      	beq.n	8004b9a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	f003 0308 	and.w	r3, r3, #8
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d110      	bne.n	8004b66 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2208      	movs	r2, #8
 8004b4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 f838 	bl	8004bc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2208      	movs	r2, #8
 8004b56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e029      	b.n	8004bba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b74:	d111      	bne.n	8004b9a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 f81e 	bl	8004bc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e00f      	b.n	8004bba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69da      	ldr	r2, [r3, #28]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	bf0c      	ite	eq
 8004baa:	2301      	moveq	r3, #1
 8004bac:	2300      	movne	r3, #0
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	79fb      	ldrb	r3, [r7, #7]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d0a0      	beq.n	8004afa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b095      	sub	sp, #84	@ 0x54
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bd2:	e853 3f00 	ldrex	r3, [r3]
 8004bd6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	461a      	mov	r2, r3
 8004be6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004be8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004bee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004bf0:	e841 2300 	strex	r3, r2, [r1]
 8004bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1e6      	bne.n	8004bca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	3308      	adds	r3, #8
 8004c02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	e853 3f00 	ldrex	r3, [r3]
 8004c0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c12:	f023 0301 	bic.w	r3, r3, #1
 8004c16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3308      	adds	r3, #8
 8004c1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c28:	e841 2300 	strex	r3, r2, [r1]
 8004c2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1e3      	bne.n	8004bfc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d118      	bne.n	8004c6e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	e853 3f00 	ldrex	r3, [r3]
 8004c48:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	f023 0310 	bic.w	r3, r3, #16
 8004c50:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	461a      	mov	r2, r3
 8004c58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c5a:	61bb      	str	r3, [r7, #24]
 8004c5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5e:	6979      	ldr	r1, [r7, #20]
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	e841 2300 	strex	r3, r2, [r1]
 8004c66:	613b      	str	r3, [r7, #16]
   return(result);
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1e6      	bne.n	8004c3c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2220      	movs	r2, #32
 8004c72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004c82:	bf00      	nop
 8004c84:	3754      	adds	r7, #84	@ 0x54
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
	...

08004c90 <std>:
 8004c90:	2300      	movs	r3, #0
 8004c92:	b510      	push	{r4, lr}
 8004c94:	4604      	mov	r4, r0
 8004c96:	e9c0 3300 	strd	r3, r3, [r0]
 8004c9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c9e:	6083      	str	r3, [r0, #8]
 8004ca0:	8181      	strh	r1, [r0, #12]
 8004ca2:	6643      	str	r3, [r0, #100]	@ 0x64
 8004ca4:	81c2      	strh	r2, [r0, #14]
 8004ca6:	6183      	str	r3, [r0, #24]
 8004ca8:	4619      	mov	r1, r3
 8004caa:	2208      	movs	r2, #8
 8004cac:	305c      	adds	r0, #92	@ 0x5c
 8004cae:	f000 f90e 	bl	8004ece <memset>
 8004cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce8 <std+0x58>)
 8004cb4:	6263      	str	r3, [r4, #36]	@ 0x24
 8004cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8004cec <std+0x5c>)
 8004cb8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004cba:	4b0d      	ldr	r3, [pc, #52]	@ (8004cf0 <std+0x60>)
 8004cbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004cf4 <std+0x64>)
 8004cc0:	6323      	str	r3, [r4, #48]	@ 0x30
 8004cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004cf8 <std+0x68>)
 8004cc4:	6224      	str	r4, [r4, #32]
 8004cc6:	429c      	cmp	r4, r3
 8004cc8:	d006      	beq.n	8004cd8 <std+0x48>
 8004cca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004cce:	4294      	cmp	r4, r2
 8004cd0:	d002      	beq.n	8004cd8 <std+0x48>
 8004cd2:	33d0      	adds	r3, #208	@ 0xd0
 8004cd4:	429c      	cmp	r4, r3
 8004cd6:	d105      	bne.n	8004ce4 <std+0x54>
 8004cd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ce0:	f000 b96e 	b.w	8004fc0 <__retarget_lock_init_recursive>
 8004ce4:	bd10      	pop	{r4, pc}
 8004ce6:	bf00      	nop
 8004ce8:	08004e49 	.word	0x08004e49
 8004cec:	08004e6b 	.word	0x08004e6b
 8004cf0:	08004ea3 	.word	0x08004ea3
 8004cf4:	08004ec7 	.word	0x08004ec7
 8004cf8:	20000228 	.word	0x20000228

08004cfc <stdio_exit_handler>:
 8004cfc:	4a02      	ldr	r2, [pc, #8]	@ (8004d08 <stdio_exit_handler+0xc>)
 8004cfe:	4903      	ldr	r1, [pc, #12]	@ (8004d0c <stdio_exit_handler+0x10>)
 8004d00:	4803      	ldr	r0, [pc, #12]	@ (8004d10 <stdio_exit_handler+0x14>)
 8004d02:	f000 b869 	b.w	8004dd8 <_fwalk_sglue>
 8004d06:	bf00      	nop
 8004d08:	20000024 	.word	0x20000024
 8004d0c:	0800585d 	.word	0x0800585d
 8004d10:	20000034 	.word	0x20000034

08004d14 <cleanup_stdio>:
 8004d14:	6841      	ldr	r1, [r0, #4]
 8004d16:	4b0c      	ldr	r3, [pc, #48]	@ (8004d48 <cleanup_stdio+0x34>)
 8004d18:	4299      	cmp	r1, r3
 8004d1a:	b510      	push	{r4, lr}
 8004d1c:	4604      	mov	r4, r0
 8004d1e:	d001      	beq.n	8004d24 <cleanup_stdio+0x10>
 8004d20:	f000 fd9c 	bl	800585c <_fflush_r>
 8004d24:	68a1      	ldr	r1, [r4, #8]
 8004d26:	4b09      	ldr	r3, [pc, #36]	@ (8004d4c <cleanup_stdio+0x38>)
 8004d28:	4299      	cmp	r1, r3
 8004d2a:	d002      	beq.n	8004d32 <cleanup_stdio+0x1e>
 8004d2c:	4620      	mov	r0, r4
 8004d2e:	f000 fd95 	bl	800585c <_fflush_r>
 8004d32:	68e1      	ldr	r1, [r4, #12]
 8004d34:	4b06      	ldr	r3, [pc, #24]	@ (8004d50 <cleanup_stdio+0x3c>)
 8004d36:	4299      	cmp	r1, r3
 8004d38:	d004      	beq.n	8004d44 <cleanup_stdio+0x30>
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d40:	f000 bd8c 	b.w	800585c <_fflush_r>
 8004d44:	bd10      	pop	{r4, pc}
 8004d46:	bf00      	nop
 8004d48:	20000228 	.word	0x20000228
 8004d4c:	20000290 	.word	0x20000290
 8004d50:	200002f8 	.word	0x200002f8

08004d54 <global_stdio_init.part.0>:
 8004d54:	b510      	push	{r4, lr}
 8004d56:	4b0b      	ldr	r3, [pc, #44]	@ (8004d84 <global_stdio_init.part.0+0x30>)
 8004d58:	4c0b      	ldr	r4, [pc, #44]	@ (8004d88 <global_stdio_init.part.0+0x34>)
 8004d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8004d8c <global_stdio_init.part.0+0x38>)
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	4620      	mov	r0, r4
 8004d60:	2200      	movs	r2, #0
 8004d62:	2104      	movs	r1, #4
 8004d64:	f7ff ff94 	bl	8004c90 <std>
 8004d68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	2109      	movs	r1, #9
 8004d70:	f7ff ff8e 	bl	8004c90 <std>
 8004d74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004d78:	2202      	movs	r2, #2
 8004d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d7e:	2112      	movs	r1, #18
 8004d80:	f7ff bf86 	b.w	8004c90 <std>
 8004d84:	20000360 	.word	0x20000360
 8004d88:	20000228 	.word	0x20000228
 8004d8c:	08004cfd 	.word	0x08004cfd

08004d90 <__sfp_lock_acquire>:
 8004d90:	4801      	ldr	r0, [pc, #4]	@ (8004d98 <__sfp_lock_acquire+0x8>)
 8004d92:	f000 b916 	b.w	8004fc2 <__retarget_lock_acquire_recursive>
 8004d96:	bf00      	nop
 8004d98:	20000369 	.word	0x20000369

08004d9c <__sfp_lock_release>:
 8004d9c:	4801      	ldr	r0, [pc, #4]	@ (8004da4 <__sfp_lock_release+0x8>)
 8004d9e:	f000 b911 	b.w	8004fc4 <__retarget_lock_release_recursive>
 8004da2:	bf00      	nop
 8004da4:	20000369 	.word	0x20000369

08004da8 <__sinit>:
 8004da8:	b510      	push	{r4, lr}
 8004daa:	4604      	mov	r4, r0
 8004dac:	f7ff fff0 	bl	8004d90 <__sfp_lock_acquire>
 8004db0:	6a23      	ldr	r3, [r4, #32]
 8004db2:	b11b      	cbz	r3, 8004dbc <__sinit+0x14>
 8004db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004db8:	f7ff bff0 	b.w	8004d9c <__sfp_lock_release>
 8004dbc:	4b04      	ldr	r3, [pc, #16]	@ (8004dd0 <__sinit+0x28>)
 8004dbe:	6223      	str	r3, [r4, #32]
 8004dc0:	4b04      	ldr	r3, [pc, #16]	@ (8004dd4 <__sinit+0x2c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1f5      	bne.n	8004db4 <__sinit+0xc>
 8004dc8:	f7ff ffc4 	bl	8004d54 <global_stdio_init.part.0>
 8004dcc:	e7f2      	b.n	8004db4 <__sinit+0xc>
 8004dce:	bf00      	nop
 8004dd0:	08004d15 	.word	0x08004d15
 8004dd4:	20000360 	.word	0x20000360

08004dd8 <_fwalk_sglue>:
 8004dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ddc:	4607      	mov	r7, r0
 8004dde:	4688      	mov	r8, r1
 8004de0:	4614      	mov	r4, r2
 8004de2:	2600      	movs	r6, #0
 8004de4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004de8:	f1b9 0901 	subs.w	r9, r9, #1
 8004dec:	d505      	bpl.n	8004dfa <_fwalk_sglue+0x22>
 8004dee:	6824      	ldr	r4, [r4, #0]
 8004df0:	2c00      	cmp	r4, #0
 8004df2:	d1f7      	bne.n	8004de4 <_fwalk_sglue+0xc>
 8004df4:	4630      	mov	r0, r6
 8004df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dfa:	89ab      	ldrh	r3, [r5, #12]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d907      	bls.n	8004e10 <_fwalk_sglue+0x38>
 8004e00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e04:	3301      	adds	r3, #1
 8004e06:	d003      	beq.n	8004e10 <_fwalk_sglue+0x38>
 8004e08:	4629      	mov	r1, r5
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	47c0      	blx	r8
 8004e0e:	4306      	orrs	r6, r0
 8004e10:	3568      	adds	r5, #104	@ 0x68
 8004e12:	e7e9      	b.n	8004de8 <_fwalk_sglue+0x10>

08004e14 <iprintf>:
 8004e14:	b40f      	push	{r0, r1, r2, r3}
 8004e16:	b507      	push	{r0, r1, r2, lr}
 8004e18:	4906      	ldr	r1, [pc, #24]	@ (8004e34 <iprintf+0x20>)
 8004e1a:	ab04      	add	r3, sp, #16
 8004e1c:	6808      	ldr	r0, [r1, #0]
 8004e1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e22:	6881      	ldr	r1, [r0, #8]
 8004e24:	9301      	str	r3, [sp, #4]
 8004e26:	f000 f9f1 	bl	800520c <_vfiprintf_r>
 8004e2a:	b003      	add	sp, #12
 8004e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e30:	b004      	add	sp, #16
 8004e32:	4770      	bx	lr
 8004e34:	20000030 	.word	0x20000030

08004e38 <putchar>:
 8004e38:	4b02      	ldr	r3, [pc, #8]	@ (8004e44 <putchar+0xc>)
 8004e3a:	4601      	mov	r1, r0
 8004e3c:	6818      	ldr	r0, [r3, #0]
 8004e3e:	6882      	ldr	r2, [r0, #8]
 8004e40:	f000 bd34 	b.w	80058ac <_putc_r>
 8004e44:	20000030 	.word	0x20000030

08004e48 <__sread>:
 8004e48:	b510      	push	{r4, lr}
 8004e4a:	460c      	mov	r4, r1
 8004e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e50:	f000 f868 	bl	8004f24 <_read_r>
 8004e54:	2800      	cmp	r0, #0
 8004e56:	bfab      	itete	ge
 8004e58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004e5a:	89a3      	ldrhlt	r3, [r4, #12]
 8004e5c:	181b      	addge	r3, r3, r0
 8004e5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004e62:	bfac      	ite	ge
 8004e64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004e66:	81a3      	strhlt	r3, [r4, #12]
 8004e68:	bd10      	pop	{r4, pc}

08004e6a <__swrite>:
 8004e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e6e:	461f      	mov	r7, r3
 8004e70:	898b      	ldrh	r3, [r1, #12]
 8004e72:	05db      	lsls	r3, r3, #23
 8004e74:	4605      	mov	r5, r0
 8004e76:	460c      	mov	r4, r1
 8004e78:	4616      	mov	r6, r2
 8004e7a:	d505      	bpl.n	8004e88 <__swrite+0x1e>
 8004e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e80:	2302      	movs	r3, #2
 8004e82:	2200      	movs	r2, #0
 8004e84:	f000 f83c 	bl	8004f00 <_lseek_r>
 8004e88:	89a3      	ldrh	r3, [r4, #12]
 8004e8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e92:	81a3      	strh	r3, [r4, #12]
 8004e94:	4632      	mov	r2, r6
 8004e96:	463b      	mov	r3, r7
 8004e98:	4628      	mov	r0, r5
 8004e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e9e:	f000 b853 	b.w	8004f48 <_write_r>

08004ea2 <__sseek>:
 8004ea2:	b510      	push	{r4, lr}
 8004ea4:	460c      	mov	r4, r1
 8004ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eaa:	f000 f829 	bl	8004f00 <_lseek_r>
 8004eae:	1c43      	adds	r3, r0, #1
 8004eb0:	89a3      	ldrh	r3, [r4, #12]
 8004eb2:	bf15      	itete	ne
 8004eb4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004eb6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004eba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004ebe:	81a3      	strheq	r3, [r4, #12]
 8004ec0:	bf18      	it	ne
 8004ec2:	81a3      	strhne	r3, [r4, #12]
 8004ec4:	bd10      	pop	{r4, pc}

08004ec6 <__sclose>:
 8004ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eca:	f000 b809 	b.w	8004ee0 <_close_r>

08004ece <memset>:
 8004ece:	4402      	add	r2, r0
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d100      	bne.n	8004ed8 <memset+0xa>
 8004ed6:	4770      	bx	lr
 8004ed8:	f803 1b01 	strb.w	r1, [r3], #1
 8004edc:	e7f9      	b.n	8004ed2 <memset+0x4>
	...

08004ee0 <_close_r>:
 8004ee0:	b538      	push	{r3, r4, r5, lr}
 8004ee2:	4d06      	ldr	r5, [pc, #24]	@ (8004efc <_close_r+0x1c>)
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	4604      	mov	r4, r0
 8004ee8:	4608      	mov	r0, r1
 8004eea:	602b      	str	r3, [r5, #0]
 8004eec:	f7fb fe91 	bl	8000c12 <_close>
 8004ef0:	1c43      	adds	r3, r0, #1
 8004ef2:	d102      	bne.n	8004efa <_close_r+0x1a>
 8004ef4:	682b      	ldr	r3, [r5, #0]
 8004ef6:	b103      	cbz	r3, 8004efa <_close_r+0x1a>
 8004ef8:	6023      	str	r3, [r4, #0]
 8004efa:	bd38      	pop	{r3, r4, r5, pc}
 8004efc:	20000364 	.word	0x20000364

08004f00 <_lseek_r>:
 8004f00:	b538      	push	{r3, r4, r5, lr}
 8004f02:	4d07      	ldr	r5, [pc, #28]	@ (8004f20 <_lseek_r+0x20>)
 8004f04:	4604      	mov	r4, r0
 8004f06:	4608      	mov	r0, r1
 8004f08:	4611      	mov	r1, r2
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	602a      	str	r2, [r5, #0]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	f7fb fea6 	bl	8000c60 <_lseek>
 8004f14:	1c43      	adds	r3, r0, #1
 8004f16:	d102      	bne.n	8004f1e <_lseek_r+0x1e>
 8004f18:	682b      	ldr	r3, [r5, #0]
 8004f1a:	b103      	cbz	r3, 8004f1e <_lseek_r+0x1e>
 8004f1c:	6023      	str	r3, [r4, #0]
 8004f1e:	bd38      	pop	{r3, r4, r5, pc}
 8004f20:	20000364 	.word	0x20000364

08004f24 <_read_r>:
 8004f24:	b538      	push	{r3, r4, r5, lr}
 8004f26:	4d07      	ldr	r5, [pc, #28]	@ (8004f44 <_read_r+0x20>)
 8004f28:	4604      	mov	r4, r0
 8004f2a:	4608      	mov	r0, r1
 8004f2c:	4611      	mov	r1, r2
 8004f2e:	2200      	movs	r2, #0
 8004f30:	602a      	str	r2, [r5, #0]
 8004f32:	461a      	mov	r2, r3
 8004f34:	f7fb fe50 	bl	8000bd8 <_read>
 8004f38:	1c43      	adds	r3, r0, #1
 8004f3a:	d102      	bne.n	8004f42 <_read_r+0x1e>
 8004f3c:	682b      	ldr	r3, [r5, #0]
 8004f3e:	b103      	cbz	r3, 8004f42 <_read_r+0x1e>
 8004f40:	6023      	str	r3, [r4, #0]
 8004f42:	bd38      	pop	{r3, r4, r5, pc}
 8004f44:	20000364 	.word	0x20000364

08004f48 <_write_r>:
 8004f48:	b538      	push	{r3, r4, r5, lr}
 8004f4a:	4d07      	ldr	r5, [pc, #28]	@ (8004f68 <_write_r+0x20>)
 8004f4c:	4604      	mov	r4, r0
 8004f4e:	4608      	mov	r0, r1
 8004f50:	4611      	mov	r1, r2
 8004f52:	2200      	movs	r2, #0
 8004f54:	602a      	str	r2, [r5, #0]
 8004f56:	461a      	mov	r2, r3
 8004f58:	f7fb fd00 	bl	800095c <_write>
 8004f5c:	1c43      	adds	r3, r0, #1
 8004f5e:	d102      	bne.n	8004f66 <_write_r+0x1e>
 8004f60:	682b      	ldr	r3, [r5, #0]
 8004f62:	b103      	cbz	r3, 8004f66 <_write_r+0x1e>
 8004f64:	6023      	str	r3, [r4, #0]
 8004f66:	bd38      	pop	{r3, r4, r5, pc}
 8004f68:	20000364 	.word	0x20000364

08004f6c <__errno>:
 8004f6c:	4b01      	ldr	r3, [pc, #4]	@ (8004f74 <__errno+0x8>)
 8004f6e:	6818      	ldr	r0, [r3, #0]
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	20000030 	.word	0x20000030

08004f78 <__libc_init_array>:
 8004f78:	b570      	push	{r4, r5, r6, lr}
 8004f7a:	4d0d      	ldr	r5, [pc, #52]	@ (8004fb0 <__libc_init_array+0x38>)
 8004f7c:	4c0d      	ldr	r4, [pc, #52]	@ (8004fb4 <__libc_init_array+0x3c>)
 8004f7e:	1b64      	subs	r4, r4, r5
 8004f80:	10a4      	asrs	r4, r4, #2
 8004f82:	2600      	movs	r6, #0
 8004f84:	42a6      	cmp	r6, r4
 8004f86:	d109      	bne.n	8004f9c <__libc_init_array+0x24>
 8004f88:	4d0b      	ldr	r5, [pc, #44]	@ (8004fb8 <__libc_init_array+0x40>)
 8004f8a:	4c0c      	ldr	r4, [pc, #48]	@ (8004fbc <__libc_init_array+0x44>)
 8004f8c:	f000 fdea 	bl	8005b64 <_init>
 8004f90:	1b64      	subs	r4, r4, r5
 8004f92:	10a4      	asrs	r4, r4, #2
 8004f94:	2600      	movs	r6, #0
 8004f96:	42a6      	cmp	r6, r4
 8004f98:	d105      	bne.n	8004fa6 <__libc_init_array+0x2e>
 8004f9a:	bd70      	pop	{r4, r5, r6, pc}
 8004f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fa0:	4798      	blx	r3
 8004fa2:	3601      	adds	r6, #1
 8004fa4:	e7ee      	b.n	8004f84 <__libc_init_array+0xc>
 8004fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004faa:	4798      	blx	r3
 8004fac:	3601      	adds	r6, #1
 8004fae:	e7f2      	b.n	8004f96 <__libc_init_array+0x1e>
 8004fb0:	08005d3c 	.word	0x08005d3c
 8004fb4:	08005d3c 	.word	0x08005d3c
 8004fb8:	08005d3c 	.word	0x08005d3c
 8004fbc:	08005d40 	.word	0x08005d40

08004fc0 <__retarget_lock_init_recursive>:
 8004fc0:	4770      	bx	lr

08004fc2 <__retarget_lock_acquire_recursive>:
 8004fc2:	4770      	bx	lr

08004fc4 <__retarget_lock_release_recursive>:
 8004fc4:	4770      	bx	lr
	...

08004fc8 <_free_r>:
 8004fc8:	b538      	push	{r3, r4, r5, lr}
 8004fca:	4605      	mov	r5, r0
 8004fcc:	2900      	cmp	r1, #0
 8004fce:	d041      	beq.n	8005054 <_free_r+0x8c>
 8004fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fd4:	1f0c      	subs	r4, r1, #4
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	bfb8      	it	lt
 8004fda:	18e4      	addlt	r4, r4, r3
 8004fdc:	f000 f8e0 	bl	80051a0 <__malloc_lock>
 8004fe0:	4a1d      	ldr	r2, [pc, #116]	@ (8005058 <_free_r+0x90>)
 8004fe2:	6813      	ldr	r3, [r2, #0]
 8004fe4:	b933      	cbnz	r3, 8004ff4 <_free_r+0x2c>
 8004fe6:	6063      	str	r3, [r4, #4]
 8004fe8:	6014      	str	r4, [r2, #0]
 8004fea:	4628      	mov	r0, r5
 8004fec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ff0:	f000 b8dc 	b.w	80051ac <__malloc_unlock>
 8004ff4:	42a3      	cmp	r3, r4
 8004ff6:	d908      	bls.n	800500a <_free_r+0x42>
 8004ff8:	6820      	ldr	r0, [r4, #0]
 8004ffa:	1821      	adds	r1, r4, r0
 8004ffc:	428b      	cmp	r3, r1
 8004ffe:	bf01      	itttt	eq
 8005000:	6819      	ldreq	r1, [r3, #0]
 8005002:	685b      	ldreq	r3, [r3, #4]
 8005004:	1809      	addeq	r1, r1, r0
 8005006:	6021      	streq	r1, [r4, #0]
 8005008:	e7ed      	b.n	8004fe6 <_free_r+0x1e>
 800500a:	461a      	mov	r2, r3
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	b10b      	cbz	r3, 8005014 <_free_r+0x4c>
 8005010:	42a3      	cmp	r3, r4
 8005012:	d9fa      	bls.n	800500a <_free_r+0x42>
 8005014:	6811      	ldr	r1, [r2, #0]
 8005016:	1850      	adds	r0, r2, r1
 8005018:	42a0      	cmp	r0, r4
 800501a:	d10b      	bne.n	8005034 <_free_r+0x6c>
 800501c:	6820      	ldr	r0, [r4, #0]
 800501e:	4401      	add	r1, r0
 8005020:	1850      	adds	r0, r2, r1
 8005022:	4283      	cmp	r3, r0
 8005024:	6011      	str	r1, [r2, #0]
 8005026:	d1e0      	bne.n	8004fea <_free_r+0x22>
 8005028:	6818      	ldr	r0, [r3, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	6053      	str	r3, [r2, #4]
 800502e:	4408      	add	r0, r1
 8005030:	6010      	str	r0, [r2, #0]
 8005032:	e7da      	b.n	8004fea <_free_r+0x22>
 8005034:	d902      	bls.n	800503c <_free_r+0x74>
 8005036:	230c      	movs	r3, #12
 8005038:	602b      	str	r3, [r5, #0]
 800503a:	e7d6      	b.n	8004fea <_free_r+0x22>
 800503c:	6820      	ldr	r0, [r4, #0]
 800503e:	1821      	adds	r1, r4, r0
 8005040:	428b      	cmp	r3, r1
 8005042:	bf04      	itt	eq
 8005044:	6819      	ldreq	r1, [r3, #0]
 8005046:	685b      	ldreq	r3, [r3, #4]
 8005048:	6063      	str	r3, [r4, #4]
 800504a:	bf04      	itt	eq
 800504c:	1809      	addeq	r1, r1, r0
 800504e:	6021      	streq	r1, [r4, #0]
 8005050:	6054      	str	r4, [r2, #4]
 8005052:	e7ca      	b.n	8004fea <_free_r+0x22>
 8005054:	bd38      	pop	{r3, r4, r5, pc}
 8005056:	bf00      	nop
 8005058:	20000370 	.word	0x20000370

0800505c <sbrk_aligned>:
 800505c:	b570      	push	{r4, r5, r6, lr}
 800505e:	4e0f      	ldr	r6, [pc, #60]	@ (800509c <sbrk_aligned+0x40>)
 8005060:	460c      	mov	r4, r1
 8005062:	6831      	ldr	r1, [r6, #0]
 8005064:	4605      	mov	r5, r0
 8005066:	b911      	cbnz	r1, 800506e <sbrk_aligned+0x12>
 8005068:	f000 fce8 	bl	8005a3c <_sbrk_r>
 800506c:	6030      	str	r0, [r6, #0]
 800506e:	4621      	mov	r1, r4
 8005070:	4628      	mov	r0, r5
 8005072:	f000 fce3 	bl	8005a3c <_sbrk_r>
 8005076:	1c43      	adds	r3, r0, #1
 8005078:	d103      	bne.n	8005082 <sbrk_aligned+0x26>
 800507a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800507e:	4620      	mov	r0, r4
 8005080:	bd70      	pop	{r4, r5, r6, pc}
 8005082:	1cc4      	adds	r4, r0, #3
 8005084:	f024 0403 	bic.w	r4, r4, #3
 8005088:	42a0      	cmp	r0, r4
 800508a:	d0f8      	beq.n	800507e <sbrk_aligned+0x22>
 800508c:	1a21      	subs	r1, r4, r0
 800508e:	4628      	mov	r0, r5
 8005090:	f000 fcd4 	bl	8005a3c <_sbrk_r>
 8005094:	3001      	adds	r0, #1
 8005096:	d1f2      	bne.n	800507e <sbrk_aligned+0x22>
 8005098:	e7ef      	b.n	800507a <sbrk_aligned+0x1e>
 800509a:	bf00      	nop
 800509c:	2000036c 	.word	0x2000036c

080050a0 <_malloc_r>:
 80050a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050a4:	1ccd      	adds	r5, r1, #3
 80050a6:	f025 0503 	bic.w	r5, r5, #3
 80050aa:	3508      	adds	r5, #8
 80050ac:	2d0c      	cmp	r5, #12
 80050ae:	bf38      	it	cc
 80050b0:	250c      	movcc	r5, #12
 80050b2:	2d00      	cmp	r5, #0
 80050b4:	4606      	mov	r6, r0
 80050b6:	db01      	blt.n	80050bc <_malloc_r+0x1c>
 80050b8:	42a9      	cmp	r1, r5
 80050ba:	d904      	bls.n	80050c6 <_malloc_r+0x26>
 80050bc:	230c      	movs	r3, #12
 80050be:	6033      	str	r3, [r6, #0]
 80050c0:	2000      	movs	r0, #0
 80050c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800519c <_malloc_r+0xfc>
 80050ca:	f000 f869 	bl	80051a0 <__malloc_lock>
 80050ce:	f8d8 3000 	ldr.w	r3, [r8]
 80050d2:	461c      	mov	r4, r3
 80050d4:	bb44      	cbnz	r4, 8005128 <_malloc_r+0x88>
 80050d6:	4629      	mov	r1, r5
 80050d8:	4630      	mov	r0, r6
 80050da:	f7ff ffbf 	bl	800505c <sbrk_aligned>
 80050de:	1c43      	adds	r3, r0, #1
 80050e0:	4604      	mov	r4, r0
 80050e2:	d158      	bne.n	8005196 <_malloc_r+0xf6>
 80050e4:	f8d8 4000 	ldr.w	r4, [r8]
 80050e8:	4627      	mov	r7, r4
 80050ea:	2f00      	cmp	r7, #0
 80050ec:	d143      	bne.n	8005176 <_malloc_r+0xd6>
 80050ee:	2c00      	cmp	r4, #0
 80050f0:	d04b      	beq.n	800518a <_malloc_r+0xea>
 80050f2:	6823      	ldr	r3, [r4, #0]
 80050f4:	4639      	mov	r1, r7
 80050f6:	4630      	mov	r0, r6
 80050f8:	eb04 0903 	add.w	r9, r4, r3
 80050fc:	f000 fc9e 	bl	8005a3c <_sbrk_r>
 8005100:	4581      	cmp	r9, r0
 8005102:	d142      	bne.n	800518a <_malloc_r+0xea>
 8005104:	6821      	ldr	r1, [r4, #0]
 8005106:	1a6d      	subs	r5, r5, r1
 8005108:	4629      	mov	r1, r5
 800510a:	4630      	mov	r0, r6
 800510c:	f7ff ffa6 	bl	800505c <sbrk_aligned>
 8005110:	3001      	adds	r0, #1
 8005112:	d03a      	beq.n	800518a <_malloc_r+0xea>
 8005114:	6823      	ldr	r3, [r4, #0]
 8005116:	442b      	add	r3, r5
 8005118:	6023      	str	r3, [r4, #0]
 800511a:	f8d8 3000 	ldr.w	r3, [r8]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	bb62      	cbnz	r2, 800517c <_malloc_r+0xdc>
 8005122:	f8c8 7000 	str.w	r7, [r8]
 8005126:	e00f      	b.n	8005148 <_malloc_r+0xa8>
 8005128:	6822      	ldr	r2, [r4, #0]
 800512a:	1b52      	subs	r2, r2, r5
 800512c:	d420      	bmi.n	8005170 <_malloc_r+0xd0>
 800512e:	2a0b      	cmp	r2, #11
 8005130:	d917      	bls.n	8005162 <_malloc_r+0xc2>
 8005132:	1961      	adds	r1, r4, r5
 8005134:	42a3      	cmp	r3, r4
 8005136:	6025      	str	r5, [r4, #0]
 8005138:	bf18      	it	ne
 800513a:	6059      	strne	r1, [r3, #4]
 800513c:	6863      	ldr	r3, [r4, #4]
 800513e:	bf08      	it	eq
 8005140:	f8c8 1000 	streq.w	r1, [r8]
 8005144:	5162      	str	r2, [r4, r5]
 8005146:	604b      	str	r3, [r1, #4]
 8005148:	4630      	mov	r0, r6
 800514a:	f000 f82f 	bl	80051ac <__malloc_unlock>
 800514e:	f104 000b 	add.w	r0, r4, #11
 8005152:	1d23      	adds	r3, r4, #4
 8005154:	f020 0007 	bic.w	r0, r0, #7
 8005158:	1ac2      	subs	r2, r0, r3
 800515a:	bf1c      	itt	ne
 800515c:	1a1b      	subne	r3, r3, r0
 800515e:	50a3      	strne	r3, [r4, r2]
 8005160:	e7af      	b.n	80050c2 <_malloc_r+0x22>
 8005162:	6862      	ldr	r2, [r4, #4]
 8005164:	42a3      	cmp	r3, r4
 8005166:	bf0c      	ite	eq
 8005168:	f8c8 2000 	streq.w	r2, [r8]
 800516c:	605a      	strne	r2, [r3, #4]
 800516e:	e7eb      	b.n	8005148 <_malloc_r+0xa8>
 8005170:	4623      	mov	r3, r4
 8005172:	6864      	ldr	r4, [r4, #4]
 8005174:	e7ae      	b.n	80050d4 <_malloc_r+0x34>
 8005176:	463c      	mov	r4, r7
 8005178:	687f      	ldr	r7, [r7, #4]
 800517a:	e7b6      	b.n	80050ea <_malloc_r+0x4a>
 800517c:	461a      	mov	r2, r3
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	42a3      	cmp	r3, r4
 8005182:	d1fb      	bne.n	800517c <_malloc_r+0xdc>
 8005184:	2300      	movs	r3, #0
 8005186:	6053      	str	r3, [r2, #4]
 8005188:	e7de      	b.n	8005148 <_malloc_r+0xa8>
 800518a:	230c      	movs	r3, #12
 800518c:	6033      	str	r3, [r6, #0]
 800518e:	4630      	mov	r0, r6
 8005190:	f000 f80c 	bl	80051ac <__malloc_unlock>
 8005194:	e794      	b.n	80050c0 <_malloc_r+0x20>
 8005196:	6005      	str	r5, [r0, #0]
 8005198:	e7d6      	b.n	8005148 <_malloc_r+0xa8>
 800519a:	bf00      	nop
 800519c:	20000370 	.word	0x20000370

080051a0 <__malloc_lock>:
 80051a0:	4801      	ldr	r0, [pc, #4]	@ (80051a8 <__malloc_lock+0x8>)
 80051a2:	f7ff bf0e 	b.w	8004fc2 <__retarget_lock_acquire_recursive>
 80051a6:	bf00      	nop
 80051a8:	20000368 	.word	0x20000368

080051ac <__malloc_unlock>:
 80051ac:	4801      	ldr	r0, [pc, #4]	@ (80051b4 <__malloc_unlock+0x8>)
 80051ae:	f7ff bf09 	b.w	8004fc4 <__retarget_lock_release_recursive>
 80051b2:	bf00      	nop
 80051b4:	20000368 	.word	0x20000368

080051b8 <__sfputc_r>:
 80051b8:	6893      	ldr	r3, [r2, #8]
 80051ba:	3b01      	subs	r3, #1
 80051bc:	2b00      	cmp	r3, #0
 80051be:	b410      	push	{r4}
 80051c0:	6093      	str	r3, [r2, #8]
 80051c2:	da08      	bge.n	80051d6 <__sfputc_r+0x1e>
 80051c4:	6994      	ldr	r4, [r2, #24]
 80051c6:	42a3      	cmp	r3, r4
 80051c8:	db01      	blt.n	80051ce <__sfputc_r+0x16>
 80051ca:	290a      	cmp	r1, #10
 80051cc:	d103      	bne.n	80051d6 <__sfputc_r+0x1e>
 80051ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051d2:	f000 bb9f 	b.w	8005914 <__swbuf_r>
 80051d6:	6813      	ldr	r3, [r2, #0]
 80051d8:	1c58      	adds	r0, r3, #1
 80051da:	6010      	str	r0, [r2, #0]
 80051dc:	7019      	strb	r1, [r3, #0]
 80051de:	4608      	mov	r0, r1
 80051e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <__sfputs_r>:
 80051e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e8:	4606      	mov	r6, r0
 80051ea:	460f      	mov	r7, r1
 80051ec:	4614      	mov	r4, r2
 80051ee:	18d5      	adds	r5, r2, r3
 80051f0:	42ac      	cmp	r4, r5
 80051f2:	d101      	bne.n	80051f8 <__sfputs_r+0x12>
 80051f4:	2000      	movs	r0, #0
 80051f6:	e007      	b.n	8005208 <__sfputs_r+0x22>
 80051f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051fc:	463a      	mov	r2, r7
 80051fe:	4630      	mov	r0, r6
 8005200:	f7ff ffda 	bl	80051b8 <__sfputc_r>
 8005204:	1c43      	adds	r3, r0, #1
 8005206:	d1f3      	bne.n	80051f0 <__sfputs_r+0xa>
 8005208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800520c <_vfiprintf_r>:
 800520c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005210:	460d      	mov	r5, r1
 8005212:	b09d      	sub	sp, #116	@ 0x74
 8005214:	4614      	mov	r4, r2
 8005216:	4698      	mov	r8, r3
 8005218:	4606      	mov	r6, r0
 800521a:	b118      	cbz	r0, 8005224 <_vfiprintf_r+0x18>
 800521c:	6a03      	ldr	r3, [r0, #32]
 800521e:	b90b      	cbnz	r3, 8005224 <_vfiprintf_r+0x18>
 8005220:	f7ff fdc2 	bl	8004da8 <__sinit>
 8005224:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005226:	07d9      	lsls	r1, r3, #31
 8005228:	d405      	bmi.n	8005236 <_vfiprintf_r+0x2a>
 800522a:	89ab      	ldrh	r3, [r5, #12]
 800522c:	059a      	lsls	r2, r3, #22
 800522e:	d402      	bmi.n	8005236 <_vfiprintf_r+0x2a>
 8005230:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005232:	f7ff fec6 	bl	8004fc2 <__retarget_lock_acquire_recursive>
 8005236:	89ab      	ldrh	r3, [r5, #12]
 8005238:	071b      	lsls	r3, r3, #28
 800523a:	d501      	bpl.n	8005240 <_vfiprintf_r+0x34>
 800523c:	692b      	ldr	r3, [r5, #16]
 800523e:	b99b      	cbnz	r3, 8005268 <_vfiprintf_r+0x5c>
 8005240:	4629      	mov	r1, r5
 8005242:	4630      	mov	r0, r6
 8005244:	f000 fba4 	bl	8005990 <__swsetup_r>
 8005248:	b170      	cbz	r0, 8005268 <_vfiprintf_r+0x5c>
 800524a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800524c:	07dc      	lsls	r4, r3, #31
 800524e:	d504      	bpl.n	800525a <_vfiprintf_r+0x4e>
 8005250:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005254:	b01d      	add	sp, #116	@ 0x74
 8005256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800525a:	89ab      	ldrh	r3, [r5, #12]
 800525c:	0598      	lsls	r0, r3, #22
 800525e:	d4f7      	bmi.n	8005250 <_vfiprintf_r+0x44>
 8005260:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005262:	f7ff feaf 	bl	8004fc4 <__retarget_lock_release_recursive>
 8005266:	e7f3      	b.n	8005250 <_vfiprintf_r+0x44>
 8005268:	2300      	movs	r3, #0
 800526a:	9309      	str	r3, [sp, #36]	@ 0x24
 800526c:	2320      	movs	r3, #32
 800526e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005272:	f8cd 800c 	str.w	r8, [sp, #12]
 8005276:	2330      	movs	r3, #48	@ 0x30
 8005278:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005428 <_vfiprintf_r+0x21c>
 800527c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005280:	f04f 0901 	mov.w	r9, #1
 8005284:	4623      	mov	r3, r4
 8005286:	469a      	mov	sl, r3
 8005288:	f813 2b01 	ldrb.w	r2, [r3], #1
 800528c:	b10a      	cbz	r2, 8005292 <_vfiprintf_r+0x86>
 800528e:	2a25      	cmp	r2, #37	@ 0x25
 8005290:	d1f9      	bne.n	8005286 <_vfiprintf_r+0x7a>
 8005292:	ebba 0b04 	subs.w	fp, sl, r4
 8005296:	d00b      	beq.n	80052b0 <_vfiprintf_r+0xa4>
 8005298:	465b      	mov	r3, fp
 800529a:	4622      	mov	r2, r4
 800529c:	4629      	mov	r1, r5
 800529e:	4630      	mov	r0, r6
 80052a0:	f7ff ffa1 	bl	80051e6 <__sfputs_r>
 80052a4:	3001      	adds	r0, #1
 80052a6:	f000 80a7 	beq.w	80053f8 <_vfiprintf_r+0x1ec>
 80052aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80052ac:	445a      	add	r2, fp
 80052ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80052b0:	f89a 3000 	ldrb.w	r3, [sl]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 809f 	beq.w	80053f8 <_vfiprintf_r+0x1ec>
 80052ba:	2300      	movs	r3, #0
 80052bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80052c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052c4:	f10a 0a01 	add.w	sl, sl, #1
 80052c8:	9304      	str	r3, [sp, #16]
 80052ca:	9307      	str	r3, [sp, #28]
 80052cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80052d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80052d2:	4654      	mov	r4, sl
 80052d4:	2205      	movs	r2, #5
 80052d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052da:	4853      	ldr	r0, [pc, #332]	@ (8005428 <_vfiprintf_r+0x21c>)
 80052dc:	f7fa ff50 	bl	8000180 <memchr>
 80052e0:	9a04      	ldr	r2, [sp, #16]
 80052e2:	b9d8      	cbnz	r0, 800531c <_vfiprintf_r+0x110>
 80052e4:	06d1      	lsls	r1, r2, #27
 80052e6:	bf44      	itt	mi
 80052e8:	2320      	movmi	r3, #32
 80052ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052ee:	0713      	lsls	r3, r2, #28
 80052f0:	bf44      	itt	mi
 80052f2:	232b      	movmi	r3, #43	@ 0x2b
 80052f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052f8:	f89a 3000 	ldrb.w	r3, [sl]
 80052fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80052fe:	d015      	beq.n	800532c <_vfiprintf_r+0x120>
 8005300:	9a07      	ldr	r2, [sp, #28]
 8005302:	4654      	mov	r4, sl
 8005304:	2000      	movs	r0, #0
 8005306:	f04f 0c0a 	mov.w	ip, #10
 800530a:	4621      	mov	r1, r4
 800530c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005310:	3b30      	subs	r3, #48	@ 0x30
 8005312:	2b09      	cmp	r3, #9
 8005314:	d94b      	bls.n	80053ae <_vfiprintf_r+0x1a2>
 8005316:	b1b0      	cbz	r0, 8005346 <_vfiprintf_r+0x13a>
 8005318:	9207      	str	r2, [sp, #28]
 800531a:	e014      	b.n	8005346 <_vfiprintf_r+0x13a>
 800531c:	eba0 0308 	sub.w	r3, r0, r8
 8005320:	fa09 f303 	lsl.w	r3, r9, r3
 8005324:	4313      	orrs	r3, r2
 8005326:	9304      	str	r3, [sp, #16]
 8005328:	46a2      	mov	sl, r4
 800532a:	e7d2      	b.n	80052d2 <_vfiprintf_r+0xc6>
 800532c:	9b03      	ldr	r3, [sp, #12]
 800532e:	1d19      	adds	r1, r3, #4
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	9103      	str	r1, [sp, #12]
 8005334:	2b00      	cmp	r3, #0
 8005336:	bfbb      	ittet	lt
 8005338:	425b      	neglt	r3, r3
 800533a:	f042 0202 	orrlt.w	r2, r2, #2
 800533e:	9307      	strge	r3, [sp, #28]
 8005340:	9307      	strlt	r3, [sp, #28]
 8005342:	bfb8      	it	lt
 8005344:	9204      	strlt	r2, [sp, #16]
 8005346:	7823      	ldrb	r3, [r4, #0]
 8005348:	2b2e      	cmp	r3, #46	@ 0x2e
 800534a:	d10a      	bne.n	8005362 <_vfiprintf_r+0x156>
 800534c:	7863      	ldrb	r3, [r4, #1]
 800534e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005350:	d132      	bne.n	80053b8 <_vfiprintf_r+0x1ac>
 8005352:	9b03      	ldr	r3, [sp, #12]
 8005354:	1d1a      	adds	r2, r3, #4
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	9203      	str	r2, [sp, #12]
 800535a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800535e:	3402      	adds	r4, #2
 8005360:	9305      	str	r3, [sp, #20]
 8005362:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005438 <_vfiprintf_r+0x22c>
 8005366:	7821      	ldrb	r1, [r4, #0]
 8005368:	2203      	movs	r2, #3
 800536a:	4650      	mov	r0, sl
 800536c:	f7fa ff08 	bl	8000180 <memchr>
 8005370:	b138      	cbz	r0, 8005382 <_vfiprintf_r+0x176>
 8005372:	9b04      	ldr	r3, [sp, #16]
 8005374:	eba0 000a 	sub.w	r0, r0, sl
 8005378:	2240      	movs	r2, #64	@ 0x40
 800537a:	4082      	lsls	r2, r0
 800537c:	4313      	orrs	r3, r2
 800537e:	3401      	adds	r4, #1
 8005380:	9304      	str	r3, [sp, #16]
 8005382:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005386:	4829      	ldr	r0, [pc, #164]	@ (800542c <_vfiprintf_r+0x220>)
 8005388:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800538c:	2206      	movs	r2, #6
 800538e:	f7fa fef7 	bl	8000180 <memchr>
 8005392:	2800      	cmp	r0, #0
 8005394:	d03f      	beq.n	8005416 <_vfiprintf_r+0x20a>
 8005396:	4b26      	ldr	r3, [pc, #152]	@ (8005430 <_vfiprintf_r+0x224>)
 8005398:	bb1b      	cbnz	r3, 80053e2 <_vfiprintf_r+0x1d6>
 800539a:	9b03      	ldr	r3, [sp, #12]
 800539c:	3307      	adds	r3, #7
 800539e:	f023 0307 	bic.w	r3, r3, #7
 80053a2:	3308      	adds	r3, #8
 80053a4:	9303      	str	r3, [sp, #12]
 80053a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053a8:	443b      	add	r3, r7
 80053aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80053ac:	e76a      	b.n	8005284 <_vfiprintf_r+0x78>
 80053ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80053b2:	460c      	mov	r4, r1
 80053b4:	2001      	movs	r0, #1
 80053b6:	e7a8      	b.n	800530a <_vfiprintf_r+0xfe>
 80053b8:	2300      	movs	r3, #0
 80053ba:	3401      	adds	r4, #1
 80053bc:	9305      	str	r3, [sp, #20]
 80053be:	4619      	mov	r1, r3
 80053c0:	f04f 0c0a 	mov.w	ip, #10
 80053c4:	4620      	mov	r0, r4
 80053c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053ca:	3a30      	subs	r2, #48	@ 0x30
 80053cc:	2a09      	cmp	r2, #9
 80053ce:	d903      	bls.n	80053d8 <_vfiprintf_r+0x1cc>
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d0c6      	beq.n	8005362 <_vfiprintf_r+0x156>
 80053d4:	9105      	str	r1, [sp, #20]
 80053d6:	e7c4      	b.n	8005362 <_vfiprintf_r+0x156>
 80053d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80053dc:	4604      	mov	r4, r0
 80053de:	2301      	movs	r3, #1
 80053e0:	e7f0      	b.n	80053c4 <_vfiprintf_r+0x1b8>
 80053e2:	ab03      	add	r3, sp, #12
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	462a      	mov	r2, r5
 80053e8:	4b12      	ldr	r3, [pc, #72]	@ (8005434 <_vfiprintf_r+0x228>)
 80053ea:	a904      	add	r1, sp, #16
 80053ec:	4630      	mov	r0, r6
 80053ee:	f3af 8000 	nop.w
 80053f2:	4607      	mov	r7, r0
 80053f4:	1c78      	adds	r0, r7, #1
 80053f6:	d1d6      	bne.n	80053a6 <_vfiprintf_r+0x19a>
 80053f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80053fa:	07d9      	lsls	r1, r3, #31
 80053fc:	d405      	bmi.n	800540a <_vfiprintf_r+0x1fe>
 80053fe:	89ab      	ldrh	r3, [r5, #12]
 8005400:	059a      	lsls	r2, r3, #22
 8005402:	d402      	bmi.n	800540a <_vfiprintf_r+0x1fe>
 8005404:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005406:	f7ff fddd 	bl	8004fc4 <__retarget_lock_release_recursive>
 800540a:	89ab      	ldrh	r3, [r5, #12]
 800540c:	065b      	lsls	r3, r3, #25
 800540e:	f53f af1f 	bmi.w	8005250 <_vfiprintf_r+0x44>
 8005412:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005414:	e71e      	b.n	8005254 <_vfiprintf_r+0x48>
 8005416:	ab03      	add	r3, sp, #12
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	462a      	mov	r2, r5
 800541c:	4b05      	ldr	r3, [pc, #20]	@ (8005434 <_vfiprintf_r+0x228>)
 800541e:	a904      	add	r1, sp, #16
 8005420:	4630      	mov	r0, r6
 8005422:	f000 f879 	bl	8005518 <_printf_i>
 8005426:	e7e4      	b.n	80053f2 <_vfiprintf_r+0x1e6>
 8005428:	08005d00 	.word	0x08005d00
 800542c:	08005d0a 	.word	0x08005d0a
 8005430:	00000000 	.word	0x00000000
 8005434:	080051e7 	.word	0x080051e7
 8005438:	08005d06 	.word	0x08005d06

0800543c <_printf_common>:
 800543c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005440:	4616      	mov	r6, r2
 8005442:	4698      	mov	r8, r3
 8005444:	688a      	ldr	r2, [r1, #8]
 8005446:	690b      	ldr	r3, [r1, #16]
 8005448:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800544c:	4293      	cmp	r3, r2
 800544e:	bfb8      	it	lt
 8005450:	4613      	movlt	r3, r2
 8005452:	6033      	str	r3, [r6, #0]
 8005454:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005458:	4607      	mov	r7, r0
 800545a:	460c      	mov	r4, r1
 800545c:	b10a      	cbz	r2, 8005462 <_printf_common+0x26>
 800545e:	3301      	adds	r3, #1
 8005460:	6033      	str	r3, [r6, #0]
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	0699      	lsls	r1, r3, #26
 8005466:	bf42      	ittt	mi
 8005468:	6833      	ldrmi	r3, [r6, #0]
 800546a:	3302      	addmi	r3, #2
 800546c:	6033      	strmi	r3, [r6, #0]
 800546e:	6825      	ldr	r5, [r4, #0]
 8005470:	f015 0506 	ands.w	r5, r5, #6
 8005474:	d106      	bne.n	8005484 <_printf_common+0x48>
 8005476:	f104 0a19 	add.w	sl, r4, #25
 800547a:	68e3      	ldr	r3, [r4, #12]
 800547c:	6832      	ldr	r2, [r6, #0]
 800547e:	1a9b      	subs	r3, r3, r2
 8005480:	42ab      	cmp	r3, r5
 8005482:	dc26      	bgt.n	80054d2 <_printf_common+0x96>
 8005484:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005488:	6822      	ldr	r2, [r4, #0]
 800548a:	3b00      	subs	r3, #0
 800548c:	bf18      	it	ne
 800548e:	2301      	movne	r3, #1
 8005490:	0692      	lsls	r2, r2, #26
 8005492:	d42b      	bmi.n	80054ec <_printf_common+0xb0>
 8005494:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005498:	4641      	mov	r1, r8
 800549a:	4638      	mov	r0, r7
 800549c:	47c8      	blx	r9
 800549e:	3001      	adds	r0, #1
 80054a0:	d01e      	beq.n	80054e0 <_printf_common+0xa4>
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	6922      	ldr	r2, [r4, #16]
 80054a6:	f003 0306 	and.w	r3, r3, #6
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	bf02      	ittt	eq
 80054ae:	68e5      	ldreq	r5, [r4, #12]
 80054b0:	6833      	ldreq	r3, [r6, #0]
 80054b2:	1aed      	subeq	r5, r5, r3
 80054b4:	68a3      	ldr	r3, [r4, #8]
 80054b6:	bf0c      	ite	eq
 80054b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054bc:	2500      	movne	r5, #0
 80054be:	4293      	cmp	r3, r2
 80054c0:	bfc4      	itt	gt
 80054c2:	1a9b      	subgt	r3, r3, r2
 80054c4:	18ed      	addgt	r5, r5, r3
 80054c6:	2600      	movs	r6, #0
 80054c8:	341a      	adds	r4, #26
 80054ca:	42b5      	cmp	r5, r6
 80054cc:	d11a      	bne.n	8005504 <_printf_common+0xc8>
 80054ce:	2000      	movs	r0, #0
 80054d0:	e008      	b.n	80054e4 <_printf_common+0xa8>
 80054d2:	2301      	movs	r3, #1
 80054d4:	4652      	mov	r2, sl
 80054d6:	4641      	mov	r1, r8
 80054d8:	4638      	mov	r0, r7
 80054da:	47c8      	blx	r9
 80054dc:	3001      	adds	r0, #1
 80054de:	d103      	bne.n	80054e8 <_printf_common+0xac>
 80054e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80054e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054e8:	3501      	adds	r5, #1
 80054ea:	e7c6      	b.n	800547a <_printf_common+0x3e>
 80054ec:	18e1      	adds	r1, r4, r3
 80054ee:	1c5a      	adds	r2, r3, #1
 80054f0:	2030      	movs	r0, #48	@ 0x30
 80054f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80054f6:	4422      	add	r2, r4
 80054f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80054fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005500:	3302      	adds	r3, #2
 8005502:	e7c7      	b.n	8005494 <_printf_common+0x58>
 8005504:	2301      	movs	r3, #1
 8005506:	4622      	mov	r2, r4
 8005508:	4641      	mov	r1, r8
 800550a:	4638      	mov	r0, r7
 800550c:	47c8      	blx	r9
 800550e:	3001      	adds	r0, #1
 8005510:	d0e6      	beq.n	80054e0 <_printf_common+0xa4>
 8005512:	3601      	adds	r6, #1
 8005514:	e7d9      	b.n	80054ca <_printf_common+0x8e>
	...

08005518 <_printf_i>:
 8005518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800551c:	7e0f      	ldrb	r7, [r1, #24]
 800551e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005520:	2f78      	cmp	r7, #120	@ 0x78
 8005522:	4691      	mov	r9, r2
 8005524:	4680      	mov	r8, r0
 8005526:	460c      	mov	r4, r1
 8005528:	469a      	mov	sl, r3
 800552a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800552e:	d807      	bhi.n	8005540 <_printf_i+0x28>
 8005530:	2f62      	cmp	r7, #98	@ 0x62
 8005532:	d80a      	bhi.n	800554a <_printf_i+0x32>
 8005534:	2f00      	cmp	r7, #0
 8005536:	f000 80d1 	beq.w	80056dc <_printf_i+0x1c4>
 800553a:	2f58      	cmp	r7, #88	@ 0x58
 800553c:	f000 80b8 	beq.w	80056b0 <_printf_i+0x198>
 8005540:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005544:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005548:	e03a      	b.n	80055c0 <_printf_i+0xa8>
 800554a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800554e:	2b15      	cmp	r3, #21
 8005550:	d8f6      	bhi.n	8005540 <_printf_i+0x28>
 8005552:	a101      	add	r1, pc, #4	@ (adr r1, 8005558 <_printf_i+0x40>)
 8005554:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005558:	080055b1 	.word	0x080055b1
 800555c:	080055c5 	.word	0x080055c5
 8005560:	08005541 	.word	0x08005541
 8005564:	08005541 	.word	0x08005541
 8005568:	08005541 	.word	0x08005541
 800556c:	08005541 	.word	0x08005541
 8005570:	080055c5 	.word	0x080055c5
 8005574:	08005541 	.word	0x08005541
 8005578:	08005541 	.word	0x08005541
 800557c:	08005541 	.word	0x08005541
 8005580:	08005541 	.word	0x08005541
 8005584:	080056c3 	.word	0x080056c3
 8005588:	080055ef 	.word	0x080055ef
 800558c:	0800567d 	.word	0x0800567d
 8005590:	08005541 	.word	0x08005541
 8005594:	08005541 	.word	0x08005541
 8005598:	080056e5 	.word	0x080056e5
 800559c:	08005541 	.word	0x08005541
 80055a0:	080055ef 	.word	0x080055ef
 80055a4:	08005541 	.word	0x08005541
 80055a8:	08005541 	.word	0x08005541
 80055ac:	08005685 	.word	0x08005685
 80055b0:	6833      	ldr	r3, [r6, #0]
 80055b2:	1d1a      	adds	r2, r3, #4
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6032      	str	r2, [r6, #0]
 80055b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80055c0:	2301      	movs	r3, #1
 80055c2:	e09c      	b.n	80056fe <_printf_i+0x1e6>
 80055c4:	6833      	ldr	r3, [r6, #0]
 80055c6:	6820      	ldr	r0, [r4, #0]
 80055c8:	1d19      	adds	r1, r3, #4
 80055ca:	6031      	str	r1, [r6, #0]
 80055cc:	0606      	lsls	r6, r0, #24
 80055ce:	d501      	bpl.n	80055d4 <_printf_i+0xbc>
 80055d0:	681d      	ldr	r5, [r3, #0]
 80055d2:	e003      	b.n	80055dc <_printf_i+0xc4>
 80055d4:	0645      	lsls	r5, r0, #25
 80055d6:	d5fb      	bpl.n	80055d0 <_printf_i+0xb8>
 80055d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80055dc:	2d00      	cmp	r5, #0
 80055de:	da03      	bge.n	80055e8 <_printf_i+0xd0>
 80055e0:	232d      	movs	r3, #45	@ 0x2d
 80055e2:	426d      	negs	r5, r5
 80055e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055e8:	4858      	ldr	r0, [pc, #352]	@ (800574c <_printf_i+0x234>)
 80055ea:	230a      	movs	r3, #10
 80055ec:	e011      	b.n	8005612 <_printf_i+0xfa>
 80055ee:	6821      	ldr	r1, [r4, #0]
 80055f0:	6833      	ldr	r3, [r6, #0]
 80055f2:	0608      	lsls	r0, r1, #24
 80055f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80055f8:	d402      	bmi.n	8005600 <_printf_i+0xe8>
 80055fa:	0649      	lsls	r1, r1, #25
 80055fc:	bf48      	it	mi
 80055fe:	b2ad      	uxthmi	r5, r5
 8005600:	2f6f      	cmp	r7, #111	@ 0x6f
 8005602:	4852      	ldr	r0, [pc, #328]	@ (800574c <_printf_i+0x234>)
 8005604:	6033      	str	r3, [r6, #0]
 8005606:	bf14      	ite	ne
 8005608:	230a      	movne	r3, #10
 800560a:	2308      	moveq	r3, #8
 800560c:	2100      	movs	r1, #0
 800560e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005612:	6866      	ldr	r6, [r4, #4]
 8005614:	60a6      	str	r6, [r4, #8]
 8005616:	2e00      	cmp	r6, #0
 8005618:	db05      	blt.n	8005626 <_printf_i+0x10e>
 800561a:	6821      	ldr	r1, [r4, #0]
 800561c:	432e      	orrs	r6, r5
 800561e:	f021 0104 	bic.w	r1, r1, #4
 8005622:	6021      	str	r1, [r4, #0]
 8005624:	d04b      	beq.n	80056be <_printf_i+0x1a6>
 8005626:	4616      	mov	r6, r2
 8005628:	fbb5 f1f3 	udiv	r1, r5, r3
 800562c:	fb03 5711 	mls	r7, r3, r1, r5
 8005630:	5dc7      	ldrb	r7, [r0, r7]
 8005632:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005636:	462f      	mov	r7, r5
 8005638:	42bb      	cmp	r3, r7
 800563a:	460d      	mov	r5, r1
 800563c:	d9f4      	bls.n	8005628 <_printf_i+0x110>
 800563e:	2b08      	cmp	r3, #8
 8005640:	d10b      	bne.n	800565a <_printf_i+0x142>
 8005642:	6823      	ldr	r3, [r4, #0]
 8005644:	07df      	lsls	r7, r3, #31
 8005646:	d508      	bpl.n	800565a <_printf_i+0x142>
 8005648:	6923      	ldr	r3, [r4, #16]
 800564a:	6861      	ldr	r1, [r4, #4]
 800564c:	4299      	cmp	r1, r3
 800564e:	bfde      	ittt	le
 8005650:	2330      	movle	r3, #48	@ 0x30
 8005652:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005656:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800565a:	1b92      	subs	r2, r2, r6
 800565c:	6122      	str	r2, [r4, #16]
 800565e:	f8cd a000 	str.w	sl, [sp]
 8005662:	464b      	mov	r3, r9
 8005664:	aa03      	add	r2, sp, #12
 8005666:	4621      	mov	r1, r4
 8005668:	4640      	mov	r0, r8
 800566a:	f7ff fee7 	bl	800543c <_printf_common>
 800566e:	3001      	adds	r0, #1
 8005670:	d14a      	bne.n	8005708 <_printf_i+0x1f0>
 8005672:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005676:	b004      	add	sp, #16
 8005678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800567c:	6823      	ldr	r3, [r4, #0]
 800567e:	f043 0320 	orr.w	r3, r3, #32
 8005682:	6023      	str	r3, [r4, #0]
 8005684:	4832      	ldr	r0, [pc, #200]	@ (8005750 <_printf_i+0x238>)
 8005686:	2778      	movs	r7, #120	@ 0x78
 8005688:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800568c:	6823      	ldr	r3, [r4, #0]
 800568e:	6831      	ldr	r1, [r6, #0]
 8005690:	061f      	lsls	r7, r3, #24
 8005692:	f851 5b04 	ldr.w	r5, [r1], #4
 8005696:	d402      	bmi.n	800569e <_printf_i+0x186>
 8005698:	065f      	lsls	r7, r3, #25
 800569a:	bf48      	it	mi
 800569c:	b2ad      	uxthmi	r5, r5
 800569e:	6031      	str	r1, [r6, #0]
 80056a0:	07d9      	lsls	r1, r3, #31
 80056a2:	bf44      	itt	mi
 80056a4:	f043 0320 	orrmi.w	r3, r3, #32
 80056a8:	6023      	strmi	r3, [r4, #0]
 80056aa:	b11d      	cbz	r5, 80056b4 <_printf_i+0x19c>
 80056ac:	2310      	movs	r3, #16
 80056ae:	e7ad      	b.n	800560c <_printf_i+0xf4>
 80056b0:	4826      	ldr	r0, [pc, #152]	@ (800574c <_printf_i+0x234>)
 80056b2:	e7e9      	b.n	8005688 <_printf_i+0x170>
 80056b4:	6823      	ldr	r3, [r4, #0]
 80056b6:	f023 0320 	bic.w	r3, r3, #32
 80056ba:	6023      	str	r3, [r4, #0]
 80056bc:	e7f6      	b.n	80056ac <_printf_i+0x194>
 80056be:	4616      	mov	r6, r2
 80056c0:	e7bd      	b.n	800563e <_printf_i+0x126>
 80056c2:	6833      	ldr	r3, [r6, #0]
 80056c4:	6825      	ldr	r5, [r4, #0]
 80056c6:	6961      	ldr	r1, [r4, #20]
 80056c8:	1d18      	adds	r0, r3, #4
 80056ca:	6030      	str	r0, [r6, #0]
 80056cc:	062e      	lsls	r6, r5, #24
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	d501      	bpl.n	80056d6 <_printf_i+0x1be>
 80056d2:	6019      	str	r1, [r3, #0]
 80056d4:	e002      	b.n	80056dc <_printf_i+0x1c4>
 80056d6:	0668      	lsls	r0, r5, #25
 80056d8:	d5fb      	bpl.n	80056d2 <_printf_i+0x1ba>
 80056da:	8019      	strh	r1, [r3, #0]
 80056dc:	2300      	movs	r3, #0
 80056de:	6123      	str	r3, [r4, #16]
 80056e0:	4616      	mov	r6, r2
 80056e2:	e7bc      	b.n	800565e <_printf_i+0x146>
 80056e4:	6833      	ldr	r3, [r6, #0]
 80056e6:	1d1a      	adds	r2, r3, #4
 80056e8:	6032      	str	r2, [r6, #0]
 80056ea:	681e      	ldr	r6, [r3, #0]
 80056ec:	6862      	ldr	r2, [r4, #4]
 80056ee:	2100      	movs	r1, #0
 80056f0:	4630      	mov	r0, r6
 80056f2:	f7fa fd45 	bl	8000180 <memchr>
 80056f6:	b108      	cbz	r0, 80056fc <_printf_i+0x1e4>
 80056f8:	1b80      	subs	r0, r0, r6
 80056fa:	6060      	str	r0, [r4, #4]
 80056fc:	6863      	ldr	r3, [r4, #4]
 80056fe:	6123      	str	r3, [r4, #16]
 8005700:	2300      	movs	r3, #0
 8005702:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005706:	e7aa      	b.n	800565e <_printf_i+0x146>
 8005708:	6923      	ldr	r3, [r4, #16]
 800570a:	4632      	mov	r2, r6
 800570c:	4649      	mov	r1, r9
 800570e:	4640      	mov	r0, r8
 8005710:	47d0      	blx	sl
 8005712:	3001      	adds	r0, #1
 8005714:	d0ad      	beq.n	8005672 <_printf_i+0x15a>
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	079b      	lsls	r3, r3, #30
 800571a:	d413      	bmi.n	8005744 <_printf_i+0x22c>
 800571c:	68e0      	ldr	r0, [r4, #12]
 800571e:	9b03      	ldr	r3, [sp, #12]
 8005720:	4298      	cmp	r0, r3
 8005722:	bfb8      	it	lt
 8005724:	4618      	movlt	r0, r3
 8005726:	e7a6      	b.n	8005676 <_printf_i+0x15e>
 8005728:	2301      	movs	r3, #1
 800572a:	4632      	mov	r2, r6
 800572c:	4649      	mov	r1, r9
 800572e:	4640      	mov	r0, r8
 8005730:	47d0      	blx	sl
 8005732:	3001      	adds	r0, #1
 8005734:	d09d      	beq.n	8005672 <_printf_i+0x15a>
 8005736:	3501      	adds	r5, #1
 8005738:	68e3      	ldr	r3, [r4, #12]
 800573a:	9903      	ldr	r1, [sp, #12]
 800573c:	1a5b      	subs	r3, r3, r1
 800573e:	42ab      	cmp	r3, r5
 8005740:	dcf2      	bgt.n	8005728 <_printf_i+0x210>
 8005742:	e7eb      	b.n	800571c <_printf_i+0x204>
 8005744:	2500      	movs	r5, #0
 8005746:	f104 0619 	add.w	r6, r4, #25
 800574a:	e7f5      	b.n	8005738 <_printf_i+0x220>
 800574c:	08005d11 	.word	0x08005d11
 8005750:	08005d22 	.word	0x08005d22

08005754 <__sflush_r>:
 8005754:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800575c:	0716      	lsls	r6, r2, #28
 800575e:	4605      	mov	r5, r0
 8005760:	460c      	mov	r4, r1
 8005762:	d454      	bmi.n	800580e <__sflush_r+0xba>
 8005764:	684b      	ldr	r3, [r1, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	dc02      	bgt.n	8005770 <__sflush_r+0x1c>
 800576a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800576c:	2b00      	cmp	r3, #0
 800576e:	dd48      	ble.n	8005802 <__sflush_r+0xae>
 8005770:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005772:	2e00      	cmp	r6, #0
 8005774:	d045      	beq.n	8005802 <__sflush_r+0xae>
 8005776:	2300      	movs	r3, #0
 8005778:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800577c:	682f      	ldr	r7, [r5, #0]
 800577e:	6a21      	ldr	r1, [r4, #32]
 8005780:	602b      	str	r3, [r5, #0]
 8005782:	d030      	beq.n	80057e6 <__sflush_r+0x92>
 8005784:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005786:	89a3      	ldrh	r3, [r4, #12]
 8005788:	0759      	lsls	r1, r3, #29
 800578a:	d505      	bpl.n	8005798 <__sflush_r+0x44>
 800578c:	6863      	ldr	r3, [r4, #4]
 800578e:	1ad2      	subs	r2, r2, r3
 8005790:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005792:	b10b      	cbz	r3, 8005798 <__sflush_r+0x44>
 8005794:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005796:	1ad2      	subs	r2, r2, r3
 8005798:	2300      	movs	r3, #0
 800579a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800579c:	6a21      	ldr	r1, [r4, #32]
 800579e:	4628      	mov	r0, r5
 80057a0:	47b0      	blx	r6
 80057a2:	1c43      	adds	r3, r0, #1
 80057a4:	89a3      	ldrh	r3, [r4, #12]
 80057a6:	d106      	bne.n	80057b6 <__sflush_r+0x62>
 80057a8:	6829      	ldr	r1, [r5, #0]
 80057aa:	291d      	cmp	r1, #29
 80057ac:	d82b      	bhi.n	8005806 <__sflush_r+0xb2>
 80057ae:	4a2a      	ldr	r2, [pc, #168]	@ (8005858 <__sflush_r+0x104>)
 80057b0:	40ca      	lsrs	r2, r1
 80057b2:	07d6      	lsls	r6, r2, #31
 80057b4:	d527      	bpl.n	8005806 <__sflush_r+0xb2>
 80057b6:	2200      	movs	r2, #0
 80057b8:	6062      	str	r2, [r4, #4]
 80057ba:	04d9      	lsls	r1, r3, #19
 80057bc:	6922      	ldr	r2, [r4, #16]
 80057be:	6022      	str	r2, [r4, #0]
 80057c0:	d504      	bpl.n	80057cc <__sflush_r+0x78>
 80057c2:	1c42      	adds	r2, r0, #1
 80057c4:	d101      	bne.n	80057ca <__sflush_r+0x76>
 80057c6:	682b      	ldr	r3, [r5, #0]
 80057c8:	b903      	cbnz	r3, 80057cc <__sflush_r+0x78>
 80057ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80057cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057ce:	602f      	str	r7, [r5, #0]
 80057d0:	b1b9      	cbz	r1, 8005802 <__sflush_r+0xae>
 80057d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057d6:	4299      	cmp	r1, r3
 80057d8:	d002      	beq.n	80057e0 <__sflush_r+0x8c>
 80057da:	4628      	mov	r0, r5
 80057dc:	f7ff fbf4 	bl	8004fc8 <_free_r>
 80057e0:	2300      	movs	r3, #0
 80057e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80057e4:	e00d      	b.n	8005802 <__sflush_r+0xae>
 80057e6:	2301      	movs	r3, #1
 80057e8:	4628      	mov	r0, r5
 80057ea:	47b0      	blx	r6
 80057ec:	4602      	mov	r2, r0
 80057ee:	1c50      	adds	r0, r2, #1
 80057f0:	d1c9      	bne.n	8005786 <__sflush_r+0x32>
 80057f2:	682b      	ldr	r3, [r5, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d0c6      	beq.n	8005786 <__sflush_r+0x32>
 80057f8:	2b1d      	cmp	r3, #29
 80057fa:	d001      	beq.n	8005800 <__sflush_r+0xac>
 80057fc:	2b16      	cmp	r3, #22
 80057fe:	d11e      	bne.n	800583e <__sflush_r+0xea>
 8005800:	602f      	str	r7, [r5, #0]
 8005802:	2000      	movs	r0, #0
 8005804:	e022      	b.n	800584c <__sflush_r+0xf8>
 8005806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800580a:	b21b      	sxth	r3, r3
 800580c:	e01b      	b.n	8005846 <__sflush_r+0xf2>
 800580e:	690f      	ldr	r7, [r1, #16]
 8005810:	2f00      	cmp	r7, #0
 8005812:	d0f6      	beq.n	8005802 <__sflush_r+0xae>
 8005814:	0793      	lsls	r3, r2, #30
 8005816:	680e      	ldr	r6, [r1, #0]
 8005818:	bf08      	it	eq
 800581a:	694b      	ldreq	r3, [r1, #20]
 800581c:	600f      	str	r7, [r1, #0]
 800581e:	bf18      	it	ne
 8005820:	2300      	movne	r3, #0
 8005822:	eba6 0807 	sub.w	r8, r6, r7
 8005826:	608b      	str	r3, [r1, #8]
 8005828:	f1b8 0f00 	cmp.w	r8, #0
 800582c:	dde9      	ble.n	8005802 <__sflush_r+0xae>
 800582e:	6a21      	ldr	r1, [r4, #32]
 8005830:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005832:	4643      	mov	r3, r8
 8005834:	463a      	mov	r2, r7
 8005836:	4628      	mov	r0, r5
 8005838:	47b0      	blx	r6
 800583a:	2800      	cmp	r0, #0
 800583c:	dc08      	bgt.n	8005850 <__sflush_r+0xfc>
 800583e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005842:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005846:	81a3      	strh	r3, [r4, #12]
 8005848:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800584c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005850:	4407      	add	r7, r0
 8005852:	eba8 0800 	sub.w	r8, r8, r0
 8005856:	e7e7      	b.n	8005828 <__sflush_r+0xd4>
 8005858:	20400001 	.word	0x20400001

0800585c <_fflush_r>:
 800585c:	b538      	push	{r3, r4, r5, lr}
 800585e:	690b      	ldr	r3, [r1, #16]
 8005860:	4605      	mov	r5, r0
 8005862:	460c      	mov	r4, r1
 8005864:	b913      	cbnz	r3, 800586c <_fflush_r+0x10>
 8005866:	2500      	movs	r5, #0
 8005868:	4628      	mov	r0, r5
 800586a:	bd38      	pop	{r3, r4, r5, pc}
 800586c:	b118      	cbz	r0, 8005876 <_fflush_r+0x1a>
 800586e:	6a03      	ldr	r3, [r0, #32]
 8005870:	b90b      	cbnz	r3, 8005876 <_fflush_r+0x1a>
 8005872:	f7ff fa99 	bl	8004da8 <__sinit>
 8005876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d0f3      	beq.n	8005866 <_fflush_r+0xa>
 800587e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005880:	07d0      	lsls	r0, r2, #31
 8005882:	d404      	bmi.n	800588e <_fflush_r+0x32>
 8005884:	0599      	lsls	r1, r3, #22
 8005886:	d402      	bmi.n	800588e <_fflush_r+0x32>
 8005888:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800588a:	f7ff fb9a 	bl	8004fc2 <__retarget_lock_acquire_recursive>
 800588e:	4628      	mov	r0, r5
 8005890:	4621      	mov	r1, r4
 8005892:	f7ff ff5f 	bl	8005754 <__sflush_r>
 8005896:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005898:	07da      	lsls	r2, r3, #31
 800589a:	4605      	mov	r5, r0
 800589c:	d4e4      	bmi.n	8005868 <_fflush_r+0xc>
 800589e:	89a3      	ldrh	r3, [r4, #12]
 80058a0:	059b      	lsls	r3, r3, #22
 80058a2:	d4e1      	bmi.n	8005868 <_fflush_r+0xc>
 80058a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058a6:	f7ff fb8d 	bl	8004fc4 <__retarget_lock_release_recursive>
 80058aa:	e7dd      	b.n	8005868 <_fflush_r+0xc>

080058ac <_putc_r>:
 80058ac:	b570      	push	{r4, r5, r6, lr}
 80058ae:	460d      	mov	r5, r1
 80058b0:	4614      	mov	r4, r2
 80058b2:	4606      	mov	r6, r0
 80058b4:	b118      	cbz	r0, 80058be <_putc_r+0x12>
 80058b6:	6a03      	ldr	r3, [r0, #32]
 80058b8:	b90b      	cbnz	r3, 80058be <_putc_r+0x12>
 80058ba:	f7ff fa75 	bl	8004da8 <__sinit>
 80058be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80058c0:	07d8      	lsls	r0, r3, #31
 80058c2:	d405      	bmi.n	80058d0 <_putc_r+0x24>
 80058c4:	89a3      	ldrh	r3, [r4, #12]
 80058c6:	0599      	lsls	r1, r3, #22
 80058c8:	d402      	bmi.n	80058d0 <_putc_r+0x24>
 80058ca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058cc:	f7ff fb79 	bl	8004fc2 <__retarget_lock_acquire_recursive>
 80058d0:	68a3      	ldr	r3, [r4, #8]
 80058d2:	3b01      	subs	r3, #1
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	60a3      	str	r3, [r4, #8]
 80058d8:	da05      	bge.n	80058e6 <_putc_r+0x3a>
 80058da:	69a2      	ldr	r2, [r4, #24]
 80058dc:	4293      	cmp	r3, r2
 80058de:	db12      	blt.n	8005906 <_putc_r+0x5a>
 80058e0:	b2eb      	uxtb	r3, r5
 80058e2:	2b0a      	cmp	r3, #10
 80058e4:	d00f      	beq.n	8005906 <_putc_r+0x5a>
 80058e6:	6823      	ldr	r3, [r4, #0]
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	6022      	str	r2, [r4, #0]
 80058ec:	701d      	strb	r5, [r3, #0]
 80058ee:	b2ed      	uxtb	r5, r5
 80058f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80058f2:	07da      	lsls	r2, r3, #31
 80058f4:	d405      	bmi.n	8005902 <_putc_r+0x56>
 80058f6:	89a3      	ldrh	r3, [r4, #12]
 80058f8:	059b      	lsls	r3, r3, #22
 80058fa:	d402      	bmi.n	8005902 <_putc_r+0x56>
 80058fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058fe:	f7ff fb61 	bl	8004fc4 <__retarget_lock_release_recursive>
 8005902:	4628      	mov	r0, r5
 8005904:	bd70      	pop	{r4, r5, r6, pc}
 8005906:	4629      	mov	r1, r5
 8005908:	4622      	mov	r2, r4
 800590a:	4630      	mov	r0, r6
 800590c:	f000 f802 	bl	8005914 <__swbuf_r>
 8005910:	4605      	mov	r5, r0
 8005912:	e7ed      	b.n	80058f0 <_putc_r+0x44>

08005914 <__swbuf_r>:
 8005914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005916:	460e      	mov	r6, r1
 8005918:	4614      	mov	r4, r2
 800591a:	4605      	mov	r5, r0
 800591c:	b118      	cbz	r0, 8005926 <__swbuf_r+0x12>
 800591e:	6a03      	ldr	r3, [r0, #32]
 8005920:	b90b      	cbnz	r3, 8005926 <__swbuf_r+0x12>
 8005922:	f7ff fa41 	bl	8004da8 <__sinit>
 8005926:	69a3      	ldr	r3, [r4, #24]
 8005928:	60a3      	str	r3, [r4, #8]
 800592a:	89a3      	ldrh	r3, [r4, #12]
 800592c:	071a      	lsls	r2, r3, #28
 800592e:	d501      	bpl.n	8005934 <__swbuf_r+0x20>
 8005930:	6923      	ldr	r3, [r4, #16]
 8005932:	b943      	cbnz	r3, 8005946 <__swbuf_r+0x32>
 8005934:	4621      	mov	r1, r4
 8005936:	4628      	mov	r0, r5
 8005938:	f000 f82a 	bl	8005990 <__swsetup_r>
 800593c:	b118      	cbz	r0, 8005946 <__swbuf_r+0x32>
 800593e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005942:	4638      	mov	r0, r7
 8005944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005946:	6823      	ldr	r3, [r4, #0]
 8005948:	6922      	ldr	r2, [r4, #16]
 800594a:	1a98      	subs	r0, r3, r2
 800594c:	6963      	ldr	r3, [r4, #20]
 800594e:	b2f6      	uxtb	r6, r6
 8005950:	4283      	cmp	r3, r0
 8005952:	4637      	mov	r7, r6
 8005954:	dc05      	bgt.n	8005962 <__swbuf_r+0x4e>
 8005956:	4621      	mov	r1, r4
 8005958:	4628      	mov	r0, r5
 800595a:	f7ff ff7f 	bl	800585c <_fflush_r>
 800595e:	2800      	cmp	r0, #0
 8005960:	d1ed      	bne.n	800593e <__swbuf_r+0x2a>
 8005962:	68a3      	ldr	r3, [r4, #8]
 8005964:	3b01      	subs	r3, #1
 8005966:	60a3      	str	r3, [r4, #8]
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	6022      	str	r2, [r4, #0]
 800596e:	701e      	strb	r6, [r3, #0]
 8005970:	6962      	ldr	r2, [r4, #20]
 8005972:	1c43      	adds	r3, r0, #1
 8005974:	429a      	cmp	r2, r3
 8005976:	d004      	beq.n	8005982 <__swbuf_r+0x6e>
 8005978:	89a3      	ldrh	r3, [r4, #12]
 800597a:	07db      	lsls	r3, r3, #31
 800597c:	d5e1      	bpl.n	8005942 <__swbuf_r+0x2e>
 800597e:	2e0a      	cmp	r6, #10
 8005980:	d1df      	bne.n	8005942 <__swbuf_r+0x2e>
 8005982:	4621      	mov	r1, r4
 8005984:	4628      	mov	r0, r5
 8005986:	f7ff ff69 	bl	800585c <_fflush_r>
 800598a:	2800      	cmp	r0, #0
 800598c:	d0d9      	beq.n	8005942 <__swbuf_r+0x2e>
 800598e:	e7d6      	b.n	800593e <__swbuf_r+0x2a>

08005990 <__swsetup_r>:
 8005990:	b538      	push	{r3, r4, r5, lr}
 8005992:	4b29      	ldr	r3, [pc, #164]	@ (8005a38 <__swsetup_r+0xa8>)
 8005994:	4605      	mov	r5, r0
 8005996:	6818      	ldr	r0, [r3, #0]
 8005998:	460c      	mov	r4, r1
 800599a:	b118      	cbz	r0, 80059a4 <__swsetup_r+0x14>
 800599c:	6a03      	ldr	r3, [r0, #32]
 800599e:	b90b      	cbnz	r3, 80059a4 <__swsetup_r+0x14>
 80059a0:	f7ff fa02 	bl	8004da8 <__sinit>
 80059a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059a8:	0719      	lsls	r1, r3, #28
 80059aa:	d422      	bmi.n	80059f2 <__swsetup_r+0x62>
 80059ac:	06da      	lsls	r2, r3, #27
 80059ae:	d407      	bmi.n	80059c0 <__swsetup_r+0x30>
 80059b0:	2209      	movs	r2, #9
 80059b2:	602a      	str	r2, [r5, #0]
 80059b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059b8:	81a3      	strh	r3, [r4, #12]
 80059ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059be:	e033      	b.n	8005a28 <__swsetup_r+0x98>
 80059c0:	0758      	lsls	r0, r3, #29
 80059c2:	d512      	bpl.n	80059ea <__swsetup_r+0x5a>
 80059c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059c6:	b141      	cbz	r1, 80059da <__swsetup_r+0x4a>
 80059c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80059cc:	4299      	cmp	r1, r3
 80059ce:	d002      	beq.n	80059d6 <__swsetup_r+0x46>
 80059d0:	4628      	mov	r0, r5
 80059d2:	f7ff faf9 	bl	8004fc8 <_free_r>
 80059d6:	2300      	movs	r3, #0
 80059d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80059da:	89a3      	ldrh	r3, [r4, #12]
 80059dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80059e0:	81a3      	strh	r3, [r4, #12]
 80059e2:	2300      	movs	r3, #0
 80059e4:	6063      	str	r3, [r4, #4]
 80059e6:	6923      	ldr	r3, [r4, #16]
 80059e8:	6023      	str	r3, [r4, #0]
 80059ea:	89a3      	ldrh	r3, [r4, #12]
 80059ec:	f043 0308 	orr.w	r3, r3, #8
 80059f0:	81a3      	strh	r3, [r4, #12]
 80059f2:	6923      	ldr	r3, [r4, #16]
 80059f4:	b94b      	cbnz	r3, 8005a0a <__swsetup_r+0x7a>
 80059f6:	89a3      	ldrh	r3, [r4, #12]
 80059f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80059fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a00:	d003      	beq.n	8005a0a <__swsetup_r+0x7a>
 8005a02:	4621      	mov	r1, r4
 8005a04:	4628      	mov	r0, r5
 8005a06:	f000 f84f 	bl	8005aa8 <__smakebuf_r>
 8005a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a0e:	f013 0201 	ands.w	r2, r3, #1
 8005a12:	d00a      	beq.n	8005a2a <__swsetup_r+0x9a>
 8005a14:	2200      	movs	r2, #0
 8005a16:	60a2      	str	r2, [r4, #8]
 8005a18:	6962      	ldr	r2, [r4, #20]
 8005a1a:	4252      	negs	r2, r2
 8005a1c:	61a2      	str	r2, [r4, #24]
 8005a1e:	6922      	ldr	r2, [r4, #16]
 8005a20:	b942      	cbnz	r2, 8005a34 <__swsetup_r+0xa4>
 8005a22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005a26:	d1c5      	bne.n	80059b4 <__swsetup_r+0x24>
 8005a28:	bd38      	pop	{r3, r4, r5, pc}
 8005a2a:	0799      	lsls	r1, r3, #30
 8005a2c:	bf58      	it	pl
 8005a2e:	6962      	ldrpl	r2, [r4, #20]
 8005a30:	60a2      	str	r2, [r4, #8]
 8005a32:	e7f4      	b.n	8005a1e <__swsetup_r+0x8e>
 8005a34:	2000      	movs	r0, #0
 8005a36:	e7f7      	b.n	8005a28 <__swsetup_r+0x98>
 8005a38:	20000030 	.word	0x20000030

08005a3c <_sbrk_r>:
 8005a3c:	b538      	push	{r3, r4, r5, lr}
 8005a3e:	4d06      	ldr	r5, [pc, #24]	@ (8005a58 <_sbrk_r+0x1c>)
 8005a40:	2300      	movs	r3, #0
 8005a42:	4604      	mov	r4, r0
 8005a44:	4608      	mov	r0, r1
 8005a46:	602b      	str	r3, [r5, #0]
 8005a48:	f7fb f918 	bl	8000c7c <_sbrk>
 8005a4c:	1c43      	adds	r3, r0, #1
 8005a4e:	d102      	bne.n	8005a56 <_sbrk_r+0x1a>
 8005a50:	682b      	ldr	r3, [r5, #0]
 8005a52:	b103      	cbz	r3, 8005a56 <_sbrk_r+0x1a>
 8005a54:	6023      	str	r3, [r4, #0]
 8005a56:	bd38      	pop	{r3, r4, r5, pc}
 8005a58:	20000364 	.word	0x20000364

08005a5c <__swhatbuf_r>:
 8005a5c:	b570      	push	{r4, r5, r6, lr}
 8005a5e:	460c      	mov	r4, r1
 8005a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a64:	2900      	cmp	r1, #0
 8005a66:	b096      	sub	sp, #88	@ 0x58
 8005a68:	4615      	mov	r5, r2
 8005a6a:	461e      	mov	r6, r3
 8005a6c:	da0d      	bge.n	8005a8a <__swhatbuf_r+0x2e>
 8005a6e:	89a3      	ldrh	r3, [r4, #12]
 8005a70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005a74:	f04f 0100 	mov.w	r1, #0
 8005a78:	bf14      	ite	ne
 8005a7a:	2340      	movne	r3, #64	@ 0x40
 8005a7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005a80:	2000      	movs	r0, #0
 8005a82:	6031      	str	r1, [r6, #0]
 8005a84:	602b      	str	r3, [r5, #0]
 8005a86:	b016      	add	sp, #88	@ 0x58
 8005a88:	bd70      	pop	{r4, r5, r6, pc}
 8005a8a:	466a      	mov	r2, sp
 8005a8c:	f000 f848 	bl	8005b20 <_fstat_r>
 8005a90:	2800      	cmp	r0, #0
 8005a92:	dbec      	blt.n	8005a6e <__swhatbuf_r+0x12>
 8005a94:	9901      	ldr	r1, [sp, #4]
 8005a96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005a9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005a9e:	4259      	negs	r1, r3
 8005aa0:	4159      	adcs	r1, r3
 8005aa2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005aa6:	e7eb      	b.n	8005a80 <__swhatbuf_r+0x24>

08005aa8 <__smakebuf_r>:
 8005aa8:	898b      	ldrh	r3, [r1, #12]
 8005aaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005aac:	079d      	lsls	r5, r3, #30
 8005aae:	4606      	mov	r6, r0
 8005ab0:	460c      	mov	r4, r1
 8005ab2:	d507      	bpl.n	8005ac4 <__smakebuf_r+0x1c>
 8005ab4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005ab8:	6023      	str	r3, [r4, #0]
 8005aba:	6123      	str	r3, [r4, #16]
 8005abc:	2301      	movs	r3, #1
 8005abe:	6163      	str	r3, [r4, #20]
 8005ac0:	b003      	add	sp, #12
 8005ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ac4:	ab01      	add	r3, sp, #4
 8005ac6:	466a      	mov	r2, sp
 8005ac8:	f7ff ffc8 	bl	8005a5c <__swhatbuf_r>
 8005acc:	9f00      	ldr	r7, [sp, #0]
 8005ace:	4605      	mov	r5, r0
 8005ad0:	4639      	mov	r1, r7
 8005ad2:	4630      	mov	r0, r6
 8005ad4:	f7ff fae4 	bl	80050a0 <_malloc_r>
 8005ad8:	b948      	cbnz	r0, 8005aee <__smakebuf_r+0x46>
 8005ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ade:	059a      	lsls	r2, r3, #22
 8005ae0:	d4ee      	bmi.n	8005ac0 <__smakebuf_r+0x18>
 8005ae2:	f023 0303 	bic.w	r3, r3, #3
 8005ae6:	f043 0302 	orr.w	r3, r3, #2
 8005aea:	81a3      	strh	r3, [r4, #12]
 8005aec:	e7e2      	b.n	8005ab4 <__smakebuf_r+0xc>
 8005aee:	89a3      	ldrh	r3, [r4, #12]
 8005af0:	6020      	str	r0, [r4, #0]
 8005af2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005af6:	81a3      	strh	r3, [r4, #12]
 8005af8:	9b01      	ldr	r3, [sp, #4]
 8005afa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005afe:	b15b      	cbz	r3, 8005b18 <__smakebuf_r+0x70>
 8005b00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b04:	4630      	mov	r0, r6
 8005b06:	f000 f81d 	bl	8005b44 <_isatty_r>
 8005b0a:	b128      	cbz	r0, 8005b18 <__smakebuf_r+0x70>
 8005b0c:	89a3      	ldrh	r3, [r4, #12]
 8005b0e:	f023 0303 	bic.w	r3, r3, #3
 8005b12:	f043 0301 	orr.w	r3, r3, #1
 8005b16:	81a3      	strh	r3, [r4, #12]
 8005b18:	89a3      	ldrh	r3, [r4, #12]
 8005b1a:	431d      	orrs	r5, r3
 8005b1c:	81a5      	strh	r5, [r4, #12]
 8005b1e:	e7cf      	b.n	8005ac0 <__smakebuf_r+0x18>

08005b20 <_fstat_r>:
 8005b20:	b538      	push	{r3, r4, r5, lr}
 8005b22:	4d07      	ldr	r5, [pc, #28]	@ (8005b40 <_fstat_r+0x20>)
 8005b24:	2300      	movs	r3, #0
 8005b26:	4604      	mov	r4, r0
 8005b28:	4608      	mov	r0, r1
 8005b2a:	4611      	mov	r1, r2
 8005b2c:	602b      	str	r3, [r5, #0]
 8005b2e:	f7fb f87c 	bl	8000c2a <_fstat>
 8005b32:	1c43      	adds	r3, r0, #1
 8005b34:	d102      	bne.n	8005b3c <_fstat_r+0x1c>
 8005b36:	682b      	ldr	r3, [r5, #0]
 8005b38:	b103      	cbz	r3, 8005b3c <_fstat_r+0x1c>
 8005b3a:	6023      	str	r3, [r4, #0]
 8005b3c:	bd38      	pop	{r3, r4, r5, pc}
 8005b3e:	bf00      	nop
 8005b40:	20000364 	.word	0x20000364

08005b44 <_isatty_r>:
 8005b44:	b538      	push	{r3, r4, r5, lr}
 8005b46:	4d06      	ldr	r5, [pc, #24]	@ (8005b60 <_isatty_r+0x1c>)
 8005b48:	2300      	movs	r3, #0
 8005b4a:	4604      	mov	r4, r0
 8005b4c:	4608      	mov	r0, r1
 8005b4e:	602b      	str	r3, [r5, #0]
 8005b50:	f7fb f87b 	bl	8000c4a <_isatty>
 8005b54:	1c43      	adds	r3, r0, #1
 8005b56:	d102      	bne.n	8005b5e <_isatty_r+0x1a>
 8005b58:	682b      	ldr	r3, [r5, #0]
 8005b5a:	b103      	cbz	r3, 8005b5e <_isatty_r+0x1a>
 8005b5c:	6023      	str	r3, [r4, #0]
 8005b5e:	bd38      	pop	{r3, r4, r5, pc}
 8005b60:	20000364 	.word	0x20000364

08005b64 <_init>:
 8005b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b66:	bf00      	nop
 8005b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b6a:	bc08      	pop	{r3}
 8005b6c:	469e      	mov	lr, r3
 8005b6e:	4770      	bx	lr

08005b70 <_fini>:
 8005b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b72:	bf00      	nop
 8005b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b76:	bc08      	pop	{r3}
 8005b78:	469e      	mov	lr, r3
 8005b7a:	4770      	bx	lr
