
V2X_OBU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059e0  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08005b20  08005b20  00006b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005d54  08005d54  00006d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005d5c  08005d5c  00006d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08005d60  08005d60  00006d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  20000008  08005d64  00007008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000288  20000080  08005ddc  00007080  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000308  08005ddc  00007308  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00007080  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001321d  00000000  00000000  000070b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000029a9  00000000  00000000  0001a2cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001570  00000000  00000000  0001cc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001054  00000000  00000000  0001e1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00022e12  00000000  00000000  0001f23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000121cc  00000000  00000000  0004204e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000db220  00000000  00000000  0005421a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0012f43a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006160  00000000  00000000  0012f480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  001355e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000080 	.word	0x20000080
 800015c:	00000000 	.word	0x00000000
 8000160:	08005b08 	.word	0x08005b08

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000084 	.word	0x20000084
 800017c:	08005b08 	.word	0x08005b08

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000554:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000558:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800055c:	f003 0301 	and.w	r3, r3, #1
 8000560:	2b00      	cmp	r3, #0
 8000562:	d013      	beq.n	800058c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000564:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000568:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800056c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000570:	2b00      	cmp	r3, #0
 8000572:	d00b      	beq.n	800058c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000574:	e000      	b.n	8000578 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000576:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000578:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d0f9      	beq.n	8000576 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000582:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	b2d2      	uxtb	r2, r2
 800058a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800058c:	687b      	ldr	r3, [r7, #4]
}
 800058e:	4618      	mov	r0, r3
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800059a:	b480      	push	{r7}
 800059c:	b085      	sub	sp, #20
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4313      	orrs	r3, r2
 80005b0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4013      	ands	r3, r2
 80005bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005be:	68fb      	ldr	r3, [r7, #12]
}
 80005c0:	bf00      	nop
 80005c2:	3714      	adds	r7, #20
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ce:	b089      	sub	sp, #36	@ 0x24
 80005d0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f000 fcd1 	bl	8000f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f8bf 	bl	8000758 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005da:	f000 f915 	bl	8000808 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 f96b 	bl	80008b8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005e2:	f000 f92f 	bl	8000844 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  /* Send or receive something to the ESP32*/
  printf("STM32 will start receiving data via SPI...");
 80005e6:	4852      	ldr	r0, [pc, #328]	@ (8000730 <main+0x164>)
 80005e8:	f004 fbc4 	bl	8004d74 <iprintf>


  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 fbf7 	bl	8000de0 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80005f2:	2001      	movs	r0, #1
 80005f4:	f000 fbf4 	bl	8000de0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80005f8:	2002      	movs	r0, #2
 80005fa:	f000 fbf1 	bl	8000de0 <BSP_LED_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80005fe:	4b4d      	ldr	r3, [pc, #308]	@ (8000734 <main+0x168>)
 8000600:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000604:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000606:	4b4b      	ldr	r3, [pc, #300]	@ (8000734 <main+0x168>)
 8000608:	2200      	movs	r2, #0
 800060a:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800060c:	4b49      	ldr	r3, [pc, #292]	@ (8000734 <main+0x168>)
 800060e:	2200      	movs	r2, #0
 8000610:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000612:	4b48      	ldr	r3, [pc, #288]	@ (8000734 <main+0x168>)
 8000614:	2200      	movs	r2, #0
 8000616:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000618:	4b46      	ldr	r3, [pc, #280]	@ (8000734 <main+0x168>)
 800061a:	2200      	movs	r2, #0
 800061c:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800061e:	4945      	ldr	r1, [pc, #276]	@ (8000734 <main+0x168>)
 8000620:	2000      	movs	r0, #0
 8000622:	f000 fc17 	bl	8000e54 <BSP_COM_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <main+0x64>
  {
    Error_Handler();
 800062c:	f000 f9b2 	bl	8000994 <Error_Handler>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// Try to receive data with timeout
	HAL_StatusTypeDef status = HAL_SPI_Receive(&hspi1, (uint8_t *)&receivedData, sizeof(Item), 1000);
 8000630:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000634:	220a      	movs	r2, #10
 8000636:	4940      	ldr	r1, [pc, #256]	@ (8000738 <main+0x16c>)
 8000638:	4840      	ldr	r0, [pc, #256]	@ (800073c <main+0x170>)
 800063a:	f002 ffe4 	bl	8003606 <HAL_SPI_Receive>
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]

	if (status == HAL_OK) {
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d142      	bne.n	80006ce <main+0x102>
		// Reset timeout counter on success
		spi_timeout_counter = 0;
 8000648:	4b3d      	ldr	r3, [pc, #244]	@ (8000740 <main+0x174>)
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]

		// Check if MAC address is valid (not all zeros)
		uint8_t mac_valid = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	73fb      	strb	r3, [r7, #15]
		for (int i = 0; i < 6; i++) {
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	e00d      	b.n	8000674 <main+0xa8>
			if (receivedData.MacAddress[i] != 0) {
 8000658:	4a37      	ldr	r2, [pc, #220]	@ (8000738 <main+0x16c>)
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	4413      	add	r3, r2
 800065e:	3304      	adds	r3, #4
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	d002      	beq.n	800066e <main+0xa2>
				mac_valid = 1;
 8000668:	2301      	movs	r3, #1
 800066a:	73fb      	strb	r3, [r7, #15]
				break;
 800066c:	e005      	b.n	800067a <main+0xae>
		for (int i = 0; i < 6; i++) {
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	3301      	adds	r3, #1
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	2b05      	cmp	r3, #5
 8000678:	ddee      	ble.n	8000658 <main+0x8c>
			}
		}

		if (mac_valid) {
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d022      	beq.n	80006c6 <main+0xfa>
			printf("SPI OK - Received: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
				receivedData.value,
 8000680:	4b2d      	ldr	r3, [pc, #180]	@ (8000738 <main+0x16c>)
 8000682:	6819      	ldr	r1, [r3, #0]
				receivedData.MacAddress[0], receivedData.MacAddress[1],
 8000684:	4b2c      	ldr	r3, [pc, #176]	@ (8000738 <main+0x16c>)
 8000686:	791b      	ldrb	r3, [r3, #4]
 8000688:	b2db      	uxtb	r3, r3
			printf("SPI OK - Received: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 800068a:	461d      	mov	r5, r3
				receivedData.MacAddress[0], receivedData.MacAddress[1],
 800068c:	4b2a      	ldr	r3, [pc, #168]	@ (8000738 <main+0x16c>)
 800068e:	795b      	ldrb	r3, [r3, #5]
 8000690:	b2db      	uxtb	r3, r3
			printf("SPI OK - Received: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 8000692:	461e      	mov	r6, r3
				receivedData.MacAddress[2], receivedData.MacAddress[3],
 8000694:	4b28      	ldr	r3, [pc, #160]	@ (8000738 <main+0x16c>)
 8000696:	799b      	ldrb	r3, [r3, #6]
 8000698:	b2db      	uxtb	r3, r3
			printf("SPI OK - Received: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 800069a:	461a      	mov	r2, r3
				receivedData.MacAddress[2], receivedData.MacAddress[3],
 800069c:	4b26      	ldr	r3, [pc, #152]	@ (8000738 <main+0x16c>)
 800069e:	79db      	ldrb	r3, [r3, #7]
 80006a0:	b2db      	uxtb	r3, r3
			printf("SPI OK - Received: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 80006a2:	4618      	mov	r0, r3
				receivedData.MacAddress[4], receivedData.MacAddress[5]);
 80006a4:	4b24      	ldr	r3, [pc, #144]	@ (8000738 <main+0x16c>)
 80006a6:	7a1b      	ldrb	r3, [r3, #8]
 80006a8:	b2db      	uxtb	r3, r3
			printf("SPI OK - Received: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 80006aa:	461c      	mov	r4, r3
				receivedData.MacAddress[4], receivedData.MacAddress[5]);
 80006ac:	4b22      	ldr	r3, [pc, #136]	@ (8000738 <main+0x16c>)
 80006ae:	7a5b      	ldrb	r3, [r3, #9]
 80006b0:	b2db      	uxtb	r3, r3
			printf("SPI OK - Received: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 80006b2:	9303      	str	r3, [sp, #12]
 80006b4:	9402      	str	r4, [sp, #8]
 80006b6:	9001      	str	r0, [sp, #4]
 80006b8:	9200      	str	r2, [sp, #0]
 80006ba:	4633      	mov	r3, r6
 80006bc:	462a      	mov	r2, r5
 80006be:	4821      	ldr	r0, [pc, #132]	@ (8000744 <main+0x178>)
 80006c0:	f004 fb58 	bl	8004d74 <iprintf>
 80006c4:	e02f      	b.n	8000726 <main+0x15a>
		} else {
			printf("SPI Warning - Received data with invalid MAC\n");
 80006c6:	4820      	ldr	r0, [pc, #128]	@ (8000748 <main+0x17c>)
 80006c8:	f004 fbbc 	bl	8004e44 <puts>
 80006cc:	e02b      	b.n	8000726 <main+0x15a>
		}
	}
	else if (status == HAL_TIMEOUT) {
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	2b03      	cmp	r3, #3
 80006d2:	d118      	bne.n	8000706 <main+0x13a>
		// Timeout is normal when no data is being sent
		spi_timeout_counter++;
 80006d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000740 <main+0x174>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	3301      	adds	r3, #1
 80006da:	4a19      	ldr	r2, [pc, #100]	@ (8000740 <main+0x174>)
 80006dc:	6013      	str	r3, [r2, #0]
		if (spi_timeout_counter % 10 == 0) {  // Print every 10 seconds
 80006de:	4b18      	ldr	r3, [pc, #96]	@ (8000740 <main+0x174>)
 80006e0:	6819      	ldr	r1, [r3, #0]
 80006e2:	4b1a      	ldr	r3, [pc, #104]	@ (800074c <main+0x180>)
 80006e4:	fba3 2301 	umull	r2, r3, r3, r1
 80006e8:	08da      	lsrs	r2, r3, #3
 80006ea:	4613      	mov	r3, r2
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	4413      	add	r3, r2
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	1aca      	subs	r2, r1, r3
 80006f4:	2a00      	cmp	r2, #0
 80006f6:	d116      	bne.n	8000726 <main+0x15a>
			printf("SPI Waiting for data... (%lu)\n", spi_timeout_counter);
 80006f8:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <main+0x174>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4619      	mov	r1, r3
 80006fe:	4814      	ldr	r0, [pc, #80]	@ (8000750 <main+0x184>)
 8000700:	f004 fb38 	bl	8004d74 <iprintf>
 8000704:	e00f      	b.n	8000726 <main+0x15a>
		}
	}
	else {
		// Handle other errors
		printf("SPI Error: %d, resetting...\n", status);
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	4619      	mov	r1, r3
 800070a:	4812      	ldr	r0, [pc, #72]	@ (8000754 <main+0x188>)
 800070c:	f004 fb32 	bl	8004d74 <iprintf>

		// Reset SPI peripheral
		HAL_SPI_DeInit(&hspi1);
 8000710:	480a      	ldr	r0, [pc, #40]	@ (800073c <main+0x170>)
 8000712:	f002 ff50 	bl	80035b6 <HAL_SPI_DeInit>
		HAL_Delay(10);
 8000716:	200a      	movs	r0, #10
 8000718:	f000 fcb4 	bl	8001084 <HAL_Delay>
		MX_SPI1_Init();
 800071c:	f000 f892 	bl	8000844 <MX_SPI1_Init>

		spi_timeout_counter = 0;
 8000720:	4b07      	ldr	r3, [pc, #28]	@ (8000740 <main+0x174>)
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
	}

	// Small delay to prevent overwhelming the system
	HAL_Delay(10);
 8000726:	200a      	movs	r0, #10
 8000728:	f000 fcac 	bl	8001084 <HAL_Delay>
  {
 800072c:	e780      	b.n	8000630 <main+0x64>
 800072e:	bf00      	nop
 8000730:	08005b38 	.word	0x08005b38
 8000734:	2000009c 	.word	0x2000009c
 8000738:	20000110 	.word	0x20000110
 800073c:	200000ac 	.word	0x200000ac
 8000740:	2000011c 	.word	0x2000011c
 8000744:	08005b64 	.word	0x08005b64
 8000748:	08005ba0 	.word	0x08005ba0
 800074c:	cccccccd 	.word	0xcccccccd
 8000750:	08005bd0 	.word	0x08005bd0
 8000754:	08005bf0 	.word	0x08005bf0

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b09a      	sub	sp, #104	@ 0x68
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 0320 	add.w	r3, r7, #32
 8000762:	2248      	movs	r2, #72	@ 0x48
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f004 fc4c 	bl	8005004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]
 800077a:	615a      	str	r2, [r3, #20]
 800077c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800077e:	4b21      	ldr	r3, [pc, #132]	@ (8000804 <SystemClock_Config+0xac>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000786:	4a1f      	ldr	r2, [pc, #124]	@ (8000804 <SystemClock_Config+0xac>)
 8000788:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800078c:	6013      	str	r3, [r2, #0]
 800078e:	4b1d      	ldr	r3, [pc, #116]	@ (8000804 <SystemClock_Config+0xac>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800079a:	2322      	movs	r3, #34	@ 0x22
 800079c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007a4:	2301      	movs	r3, #1
 80007a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a8:	2340      	movs	r3, #64	@ 0x40
 80007aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80007ac:	2300      	movs	r3, #0
 80007ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80007b0:	23a0      	movs	r3, #160	@ 0xa0
 80007b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b8:	f107 0320 	add.w	r3, r7, #32
 80007bc:	4618      	mov	r0, r3
 80007be:	f001 fc1f 	bl	8002000 <HAL_RCC_OscConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80007c8:	f000 f8e4 	bl	8000994 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80007cc:	236f      	movs	r3, #111	@ 0x6f
 80007ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	2101      	movs	r1, #1
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 ff7b 	bl	80026e8 <HAL_RCC_ClockConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80007f8:	f000 f8cc 	bl	8000994 <Error_Handler>
  }
}
 80007fc:	bf00      	nop
 80007fe:	3768      	adds	r7, #104	@ 0x68
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	58000400 	.word	0x58000400

08000808 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b094      	sub	sp, #80	@ 0x50
 800080c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800080e:	463b      	mov	r3, r7
 8000810:	2250      	movs	r2, #80	@ 0x50
 8000812:	2100      	movs	r1, #0
 8000814:	4618      	mov	r0, r3
 8000816:	f004 fbf5 	bl	8005004 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800081a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800081e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000820:	2300      	movs	r3, #0
 8000822:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000824:	2300      	movs	r3, #0
 8000826:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000828:	463b      	mov	r3, r7
 800082a:	4618      	mov	r0, r3
 800082c:	f002 fb99 	bl	8002f62 <HAL_RCCEx_PeriphCLKConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000836:	f000 f8ad 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800083a:	bf00      	nop
 800083c:	3750      	adds	r7, #80	@ 0x50
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000848:	4b19      	ldr	r3, [pc, #100]	@ (80008b0 <MX_SPI1_Init+0x6c>)
 800084a:	4a1a      	ldr	r2, [pc, #104]	@ (80008b4 <MX_SPI1_Init+0x70>)
 800084c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800084e:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <MX_SPI1_Init+0x6c>)
 8000850:	2200      	movs	r2, #0
 8000852:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000854:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <MX_SPI1_Init+0x6c>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800085a:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <MX_SPI1_Init+0x6c>)
 800085c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000860:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000862:	4b13      	ldr	r3, [pc, #76]	@ (80008b0 <MX_SPI1_Init+0x6c>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000868:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <MX_SPI1_Init+0x6c>)
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800086e:	4b10      	ldr	r3, [pc, #64]	@ (80008b0 <MX_SPI1_Init+0x6c>)
 8000870:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000874:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <MX_SPI1_Init+0x6c>)
 8000878:	2200      	movs	r2, #0
 800087a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800087c:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <MX_SPI1_Init+0x6c>)
 800087e:	2200      	movs	r2, #0
 8000880:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <MX_SPI1_Init+0x6c>)
 8000884:	2200      	movs	r2, #0
 8000886:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000888:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <MX_SPI1_Init+0x6c>)
 800088a:	2207      	movs	r2, #7
 800088c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800088e:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <MX_SPI1_Init+0x6c>)
 8000890:	2200      	movs	r2, #0
 8000892:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000894:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <MX_SPI1_Init+0x6c>)
 8000896:	2200      	movs	r2, #0
 8000898:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <MX_SPI1_Init+0x6c>)
 800089c:	f002 fde8 	bl	8003470 <HAL_SPI_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 80008a6:	f000 f875 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200000ac 	.word	0x200000ac
 80008b4:	40013000 	.word	0x40013000

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008cc:	2004      	movs	r0, #4
 80008ce:	f7ff fe64 	bl	800059a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2001      	movs	r0, #1
 80008d4:	f7ff fe61 	bl	800059a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d8:	2008      	movs	r0, #8
 80008da:	f7ff fe5e 	bl	800059a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	2002      	movs	r0, #2
 80008e0:	f7ff fe5b 	bl	800059a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008e4:	2310      	movs	r3, #16
 80008e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	4619      	mov	r1, r3
 80008f4:	4816      	ldr	r0, [pc, #88]	@ (8000950 <MX_GPIO_Init+0x98>)
 80008f6:	f000 fd89 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 80008fa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80008fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800090c:	230a      	movs	r3, #10
 800090e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	4619      	mov	r1, r3
 8000914:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000918:	f000 fd78 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 800091c:	2303      	movs	r3, #3
 800091e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	4619      	mov	r1, r3
 800092c:	4809      	ldr	r0, [pc, #36]	@ (8000954 <MX_GPIO_Init+0x9c>)
 800092e:	f000 fd6d 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000932:	2310      	movs	r3, #16
 8000934:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	4619      	mov	r1, r3
 8000942:	4805      	ldr	r0, [pc, #20]	@ (8000958 <MX_GPIO_Init+0xa0>)
 8000944:	f000 fd62 	bl	800140c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000948:	bf00      	nop
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	48000800 	.word	0x48000800
 8000954:	48000c00 	.word	0x48000c00
 8000958:	48000400 	.word	0x48000400

0800095c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	e009      	b.n	8000982 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	1c5a      	adds	r2, r3, #1
 8000972:	60ba      	str	r2, [r7, #8]
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fde8 	bl	800054c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	3301      	adds	r3, #1
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	697a      	ldr	r2, [r7, #20]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	429a      	cmp	r2, r3
 8000988:	dbf1      	blt.n	800096e <_write+0x12>
  }
  return len;
 800098a:	687b      	ldr	r3, [r7, #4]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000998:	b672      	cpsid	i
}
 800099a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <Error_Handler+0x8>

080009a0 <LL_AHB2_GRP1_EnableClock>:
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80009ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4013      	ands	r3, r2
 80009c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009c4:	68fb      	ldr	r3, [r7, #12]
}
 80009c6:	bf00      	nop
 80009c8:	3714      	adds	r7, #20
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80009d2:	b480      	push	{r7}
 80009d4:	b085      	sub	sp, #20
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80009da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009de:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80009e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009ee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4013      	ands	r3, r2
 80009f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009f6:	68fb      	ldr	r3, [r7, #12]
}
 80009f8:	bf00      	nop
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000a0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a10:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	43db      	mvns	r3, r3
 8000a16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a13      	ldr	r2, [pc, #76]	@ (8000aa4 <HAL_SPI_MspInit+0x6c>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d11f      	bne.n	8000a9a <HAL_SPI_MspInit+0x62>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a5a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000a5e:	f7ff ffb8 	bl	80009d2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	2001      	movs	r0, #1
 8000a64:	f7ff ff9c 	bl	80009a0 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000a68:	23c2      	movs	r3, #194	@ 0xc2
 8000a6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a78:	2305      	movs	r3, #5
 8000a7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7c:	f107 030c 	add.w	r3, r7, #12
 8000a80:	4619      	mov	r1, r3
 8000a82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a86:	f000 fcc1 	bl	800140c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2022      	movs	r0, #34	@ 0x22
 8000a90:	f000 fc1b 	bl	80012ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000a94:	2022      	movs	r0, #34	@ 0x22
 8000a96:	f000 fc32 	bl	80012fe <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000a9a:	bf00      	nop
 8000a9c:	3720      	adds	r7, #32
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40013000 	.word	0x40013000

08000aa8 <HAL_SPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a09      	ldr	r2, [pc, #36]	@ (8000adc <HAL_SPI_MspDeInit+0x34>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d10b      	bne.n	8000ad2 <HAL_SPI_MspDeInit+0x2a>
  {
    /* USER CODE BEGIN SPI1_MspDeInit 0 */

    /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000aba:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000abe:	f7ff ffa1 	bl	8000a04 <LL_APB2_GRP1_DisableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7);
 8000ac2:	21c2      	movs	r1, #194	@ 0xc2
 8000ac4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ac8:	f000 fe10 	bl	80016ec <HAL_GPIO_DeInit>

    /* SPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8000acc:	2022      	movs	r0, #34	@ 0x22
 8000ace:	f000 fc24 	bl	800131a <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN SPI1_MspDeInit 1 */

    /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40013000 	.word	0x40013000

08000ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <NMI_Handler+0x4>

08000ae8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <HardFault_Handler+0x4>

08000af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <MemManage_Handler+0x4>

08000af8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <BusFault_Handler+0x4>

08000b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <UsageFault_Handler+0x4>

08000b08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b36:	f000 fa79 	bl	800102c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000b44:	4802      	ldr	r0, [pc, #8]	@ (8000b50 <SPI1_IRQHandler+0x10>)
 8000b46:	f003 f8b5 	bl	8003cb4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200000ac 	.word	0x200000ac

08000b54 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	e00a      	b.n	8000b7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b66:	f3af 8000 	nop.w
 8000b6a:	4601      	mov	r1, r0
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	1c5a      	adds	r2, r3, #1
 8000b70:	60ba      	str	r2, [r7, #8]
 8000b72:	b2ca      	uxtb	r2, r1
 8000b74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	697a      	ldr	r2, [r7, #20]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	dbf0      	blt.n	8000b66 <_read+0x12>
  }

  return len;
 8000b84:	687b      	ldr	r3, [r7, #4]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3718      	adds	r7, #24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b083      	sub	sp, #12
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bb6:	605a      	str	r2, [r3, #4]
  return 0;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <_isatty>:

int _isatty(int file)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
	...

08000bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c00:	4a14      	ldr	r2, [pc, #80]	@ (8000c54 <_sbrk+0x5c>)
 8000c02:	4b15      	ldr	r3, [pc, #84]	@ (8000c58 <_sbrk+0x60>)
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c0c:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d102      	bne.n	8000c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c14:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <_sbrk+0x64>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	@ (8000c60 <_sbrk+0x68>)
 8000c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1a:	4b10      	ldr	r3, [pc, #64]	@ (8000c5c <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d207      	bcs.n	8000c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c28:	f004 fa3a 	bl	80050a0 <__errno>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	220c      	movs	r2, #12
 8000c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c36:	e009      	b.n	8000c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c38:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3e:	4b07      	ldr	r3, [pc, #28]	@ (8000c5c <_sbrk+0x64>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	4a05      	ldr	r2, [pc, #20]	@ (8000c5c <_sbrk+0x64>)
 8000c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20030000 	.word	0x20030000
 8000c58:	00000400 	.word	0x00000400
 8000c5c:	20000120 	.word	0x20000120
 8000c60:	20000308 	.word	0x20000308

08000c64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000c68:	4b24      	ldr	r3, [pc, #144]	@ (8000cfc <SystemInit+0x98>)
 8000c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c6e:	4a23      	ldr	r2, [pc, #140]	@ (8000cfc <SystemInit+0x98>)
 8000c70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000c88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c8c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000c90:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000c92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c9c:	4b18      	ldr	r3, [pc, #96]	@ (8000d00 <SystemInit+0x9c>)
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000ca2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000caa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000cae:	f023 0305 	bic.w	r3, r3, #5
 8000cb2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000cb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000cbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000cc2:	f023 0301 	bic.w	r3, r3, #1
 8000cc6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000cca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cce:	4a0d      	ldr	r2, [pc, #52]	@ (8000d04 <SystemInit+0xa0>)
 8000cd0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000cd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cd6:	4a0b      	ldr	r2, [pc, #44]	@ (8000d04 <SystemInit+0xa0>)
 8000cd8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000ce4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ce8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000cea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00
 8000d00:	faf6fefb 	.word	0xfaf6fefb
 8000d04:	22041000 	.word	0x22041000

08000d08 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000d08:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d0a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0c:	3304      	adds	r3, #4

08000d0e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d0e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d10:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000d12:	d3f9      	bcc.n	8000d08 <CopyDataInit>
  bx lr
 8000d14:	4770      	bx	lr

08000d16 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000d16:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000d18:	3004      	adds	r0, #4

08000d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000d1a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000d1c:	d3fb      	bcc.n	8000d16 <FillZerobss>
  bx lr
 8000d1e:	4770      	bx	lr

08000d20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d20:	480c      	ldr	r0, [pc, #48]	@ (8000d54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d22:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d24:	f7ff ff9e 	bl	8000c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000d28:	480b      	ldr	r0, [pc, #44]	@ (8000d58 <LoopForever+0x6>)
 8000d2a:	490c      	ldr	r1, [pc, #48]	@ (8000d5c <LoopForever+0xa>)
 8000d2c:	4a0c      	ldr	r2, [pc, #48]	@ (8000d60 <LoopForever+0xe>)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	f7ff ffed 	bl	8000d0e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000d34:	480b      	ldr	r0, [pc, #44]	@ (8000d64 <LoopForever+0x12>)
 8000d36:	490c      	ldr	r1, [pc, #48]	@ (8000d68 <LoopForever+0x16>)
 8000d38:	4a0c      	ldr	r2, [pc, #48]	@ (8000d6c <LoopForever+0x1a>)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f7ff ffe7 	bl	8000d0e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000d40:	480b      	ldr	r0, [pc, #44]	@ (8000d70 <LoopForever+0x1e>)
 8000d42:	490c      	ldr	r1, [pc, #48]	@ (8000d74 <LoopForever+0x22>)
 8000d44:	2300      	movs	r3, #0
 8000d46:	f7ff ffe8 	bl	8000d1a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d4a:	f004 f9af 	bl	80050ac <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d4e:	f7ff fc3d 	bl	80005cc <main>

08000d52 <LoopForever>:

LoopForever:
  b LoopForever
 8000d52:	e7fe      	b.n	8000d52 <LoopForever>
  ldr   r0, =_estack
 8000d54:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000d58:	20000008 	.word	0x20000008
 8000d5c:	20000080 	.word	0x20000080
 8000d60:	08005d64 	.word	0x08005d64
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000d64:	20030000 	.word	0x20030000
 8000d68:	20030000 	.word	0x20030000
 8000d6c:	08005ddc 	.word	0x08005ddc
  INIT_BSS _sbss, _ebss
 8000d70:	20000080 	.word	0x20000080
 8000d74:	20000308 	.word	0x20000308

08000d78 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d78:	e7fe      	b.n	8000d78 <ADC1_IRQHandler>

08000d7a <LL_AHB2_GRP1_EnableClock>:
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b085      	sub	sp, #20
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <LL_APB2_GRP1_EnableClock>:
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000db4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000db8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000dba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000dc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dc8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
}
 8000dd2:	bf00      	nop
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
 8000df8:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000dfa:	2002      	movs	r0, #2
 8000dfc:	f7ff ffbd 	bl	8000d7a <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	4a12      	ldr	r2, [pc, #72]	@ (8000e4c <BSP_LED_Init+0x6c>)
 8000e04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e08:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e12:	2302      	movs	r3, #2
 8000e14:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	4a0d      	ldr	r2, [pc, #52]	@ (8000e50 <BSP_LED_Init+0x70>)
 8000e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e1e:	f107 020c 	add.w	r2, r7, #12
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 faf1 	bl	800140c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	4a08      	ldr	r2, [pc, #32]	@ (8000e50 <BSP_LED_Init+0x70>)
 8000e2e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	4a05      	ldr	r2, [pc, #20]	@ (8000e4c <BSP_LED_Init+0x6c>)
 8000e36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f000 fd33 	bl	80018a8 <HAL_GPIO_WritePin>
}
 8000e42:	bf00      	nop
 8000e44:	3720      	adds	r7, #32
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	08005d00 	.word	0x08005d00
 8000e50:	2000000c 	.word	0x2000000c

08000e54 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	6039      	str	r1, [r7, #0]
 8000e5e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d903      	bls.n	8000e72 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000e6a:	f06f 0301 	mvn.w	r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	e018      	b.n	8000ea4 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	2294      	movs	r2, #148	@ 0x94
 8000e76:	fb02 f303 	mul.w	r3, r2, r3
 8000e7a:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb0 <BSP_COM_Init+0x5c>)
 8000e7c:	4413      	add	r3, r2
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f84a 	bl	8000f18 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	2294      	movs	r2, #148	@ 0x94
 8000e88:	fb02 f303 	mul.w	r3, r2, r3
 8000e8c:	4a08      	ldr	r2, [pc, #32]	@ (8000eb0 <BSP_COM_Init+0x5c>)
 8000e8e:	4413      	add	r3, r2
 8000e90:	6839      	ldr	r1, [r7, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f80e 	bl	8000eb4 <MX_LPUART1_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d002      	beq.n	8000ea4 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8000e9e:	f06f 0303 	mvn.w	r3, #3
 8000ea2:	e000      	b.n	8000ea6 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000124 	.word	0x20000124

08000eb4 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000ebe:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <MX_LPUART1_Init+0x60>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	220c      	movs	r2, #12
 8000ed2:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	895b      	ldrh	r3, [r3, #10]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	891b      	ldrh	r3, [r3, #8]
 8000eea:	461a      	mov	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	899b      	ldrh	r3, [r3, #12]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f00:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f003 f9d2 	bl	80042ac <HAL_UART_Init>
 8000f08:	4603      	mov	r3, r0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000018 	.word	0x20000018

08000f18 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000f20:	2002      	movs	r0, #2
 8000f22:	f7ff ff2a 	bl	8000d7a <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 8000f26:	2002      	movs	r0, #2
 8000f28:	f7ff ff27 	bl	8000d7a <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000f2c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000f30:	f7ff ff3c 	bl	8000dac <LL_APB2_GRP1_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000f34:	2340      	movs	r3, #64	@ 0x40
 8000f36:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000f44:	2307      	movs	r3, #7
 8000f46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4809      	ldr	r0, [pc, #36]	@ (8000f74 <COM1_MspInit+0x5c>)
 8000f50:	f000 fa5c 	bl	800140c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000f54:	2380      	movs	r3, #128	@ 0x80
 8000f56:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000f5c:	2307      	movs	r3, #7
 8000f5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	4619      	mov	r1, r3
 8000f66:	4803      	ldr	r0, [pc, #12]	@ (8000f74 <COM1_MspInit+0x5c>)
 8000f68:	f000 fa50 	bl	800140c <HAL_GPIO_Init>
}
 8000f6c:	bf00      	nop
 8000f6e:	3720      	adds	r7, #32
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	48000400 	.word	0x48000400

08000f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f82:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb4 <HAL_Init+0x3c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a0b      	ldr	r2, [pc, #44]	@ (8000fb4 <HAL_Init+0x3c>)
 8000f88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f8c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f8e:	2003      	movs	r0, #3
 8000f90:	f000 f990 	bl	80012b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f94:	2000      	movs	r0, #0
 8000f96:	f000 f80f 	bl	8000fb8 <HAL_InitTick>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d002      	beq.n	8000fa6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	71fb      	strb	r3, [r7, #7]
 8000fa4:	e001      	b.n	8000faa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fa6:	f7ff fd40 	bl	8000a2a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000faa:	79fb      	ldrb	r3, [r7, #7]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	58004000 	.word	0x58004000

08000fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000fc4:	4b17      	ldr	r3, [pc, #92]	@ (8001024 <HAL_InitTick+0x6c>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d024      	beq.n	8001016 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fcc:	f001 fd38 	bl	8002a40 <HAL_RCC_GetHCLKFreq>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	4b14      	ldr	r3, [pc, #80]	@ (8001024 <HAL_InitTick+0x6c>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fdc:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 f9a6 	bl	8001336 <HAL_SYSTICK_Config>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d10f      	bne.n	8001010 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b0f      	cmp	r3, #15
 8000ff4:	d809      	bhi.n	800100a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ffe:	f000 f964 	bl	80012ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001002:	4a09      	ldr	r2, [pc, #36]	@ (8001028 <HAL_InitTick+0x70>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	e007      	b.n	800101a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	73fb      	strb	r3, [r7, #15]
 800100e:	e004      	b.n	800101a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	73fb      	strb	r3, [r7, #15]
 8001014:	e001      	b.n	800101a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800101a:	7bfb      	ldrb	r3, [r7, #15]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000020 	.word	0x20000020
 8001028:	2000001c 	.word	0x2000001c

0800102c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	@ (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	@ (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000020 	.word	0x20000020
 8001050:	200001b8 	.word	0x200001b8

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	@ (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	200001b8 	.word	0x200001b8

0800106c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001070:	4b03      	ldr	r3, [pc, #12]	@ (8001080 <HAL_GetTickPrio+0x14>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	2000001c 	.word	0x2000001c

08001084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800108c:	f7ff ffe2 	bl	8001054 <HAL_GetTick>
 8001090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800109c:	d005      	beq.n	80010aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800109e:	4b0a      	ldr	r3, [pc, #40]	@ (80010c8 <HAL_Delay+0x44>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4413      	add	r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010aa:	bf00      	nop
 80010ac:	f7ff ffd2 	bl	8001054 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d8f7      	bhi.n	80010ac <HAL_Delay+0x28>
  {
  }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000020 	.word	0x20000020

080010cc <__NVIC_SetPriorityGrouping>:
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010e8:	4013      	ands	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fe:	4a04      	ldr	r2, [pc, #16]	@ (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	60d3      	str	r3, [r2, #12]
}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_GetPriorityGrouping>:
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001118:	4b04      	ldr	r3, [pc, #16]	@ (800112c <__NVIC_GetPriorityGrouping+0x18>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	f003 0307 	and.w	r3, r3, #7
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_EnableIRQ>:
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	2b00      	cmp	r3, #0
 8001140:	db0b      	blt.n	800115a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f003 021f 	and.w	r2, r3, #31
 8001148:	4907      	ldr	r1, [pc, #28]	@ (8001168 <__NVIC_EnableIRQ+0x38>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	095b      	lsrs	r3, r3, #5
 8001150:	2001      	movs	r0, #1
 8001152:	fa00 f202 	lsl.w	r2, r0, r2
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000e100 	.word	0xe000e100

0800116c <__NVIC_DisableIRQ>:
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	2b00      	cmp	r3, #0
 800117c:	db12      	blt.n	80011a4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	f003 021f 	and.w	r2, r3, #31
 8001184:	490a      	ldr	r1, [pc, #40]	@ (80011b0 <__NVIC_DisableIRQ+0x44>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	095b      	lsrs	r3, r3, #5
 800118c:	2001      	movs	r0, #1
 800118e:	fa00 f202 	lsl.w	r2, r0, r2
 8001192:	3320      	adds	r3, #32
 8001194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001198:	f3bf 8f4f 	dsb	sy
}
 800119c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800119e:	f3bf 8f6f 	isb	sy
}
 80011a2:	bf00      	nop
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000e100 	.word	0xe000e100

080011b4 <__NVIC_SetPriority>:
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	db0a      	blt.n	80011de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	490c      	ldr	r1, [pc, #48]	@ (8001200 <__NVIC_SetPriority+0x4c>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	0112      	lsls	r2, r2, #4
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	440b      	add	r3, r1
 80011d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80011dc:	e00a      	b.n	80011f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4908      	ldr	r1, [pc, #32]	@ (8001204 <__NVIC_SetPriority+0x50>)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	3b04      	subs	r3, #4
 80011ec:	0112      	lsls	r2, r2, #4
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	440b      	add	r3, r1
 80011f2:	761a      	strb	r2, [r3, #24]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000e100 	.word	0xe000e100
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <NVIC_EncodePriority>:
{
 8001208:	b480      	push	{r7}
 800120a:	b089      	sub	sp, #36	@ 0x24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f1c3 0307 	rsb	r3, r3, #7
 8001222:	2b04      	cmp	r3, #4
 8001224:	bf28      	it	cs
 8001226:	2304      	movcs	r3, #4
 8001228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3304      	adds	r3, #4
 800122e:	2b06      	cmp	r3, #6
 8001230:	d902      	bls.n	8001238 <NVIC_EncodePriority+0x30>
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3b03      	subs	r3, #3
 8001236:	e000      	b.n	800123a <NVIC_EncodePriority+0x32>
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43da      	mvns	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	401a      	ands	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001250:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	43d9      	mvns	r1, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	4313      	orrs	r3, r2
}
 8001262:	4618      	mov	r0, r3
 8001264:	3724      	adds	r7, #36	@ 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <SysTick_Config>:
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001280:	d301      	bcc.n	8001286 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001282:	2301      	movs	r3, #1
 8001284:	e00f      	b.n	80012a6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001286:	4a0a      	ldr	r2, [pc, #40]	@ (80012b0 <SysTick_Config+0x40>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128e:	210f      	movs	r1, #15
 8001290:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001294:	f7ff ff8e 	bl	80011b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001298:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <SysTick_Config+0x40>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129e:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <SysTick_Config+0x40>)
 80012a0:	2207      	movs	r2, #7
 80012a2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	e000e010 	.word	0xe000e010

080012b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff ff05 	bl	80010cc <__NVIC_SetPriorityGrouping>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b086      	sub	sp, #24
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
 80012d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012d8:	f7ff ff1c 	bl	8001114 <__NVIC_GetPriorityGrouping>
 80012dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff ff90 	bl	8001208 <NVIC_EncodePriority>
 80012e8:	4602      	mov	r2, r0
 80012ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff5f 	bl	80011b4 <__NVIC_SetPriority>
}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff0f 	bl	8001130 <__NVIC_EnableIRQ>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff1f 	bl	800116c <__NVIC_DisableIRQ>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ff96 	bl	8001270 <SysTick_Config>
 8001344:	4603      	mov	r3, r0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b084      	sub	sp, #16
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d005      	beq.n	8001372 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2204      	movs	r2, #4
 800136a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	73fb      	strb	r3, [r7, #15]
 8001370:	e047      	b.n	8001402 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 020e 	bic.w	r2, r2, #14
 8001380:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f022 0201 	bic.w	r2, r2, #1
 8001390:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800139c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a6:	f003 021c 	and.w	r2, r3, #28
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ae:	2101      	movs	r1, #1
 80013b0:	fa01 f202 	lsl.w	r2, r1, r2
 80013b4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80013be:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d00c      	beq.n	80013e2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80013e0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	4798      	blx	r3
    }
  }
  return status;
 8001402:	7bfb      	ldrb	r3, [r7, #15]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800140c:	b480      	push	{r7}
 800140e:	b087      	sub	sp, #28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141a:	e14c      	b.n	80016b6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	2101      	movs	r1, #1
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	fa01 f303 	lsl.w	r3, r1, r3
 8001428:	4013      	ands	r3, r2
 800142a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 813e 	beq.w	80016b0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	2b01      	cmp	r3, #1
 800143e:	d005      	beq.n	800144c <HAL_GPIO_Init+0x40>
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d130      	bne.n	80014ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	2203      	movs	r2, #3
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	68da      	ldr	r2, [r3, #12]
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001482:	2201      	movs	r2, #1
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4013      	ands	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	091b      	lsrs	r3, r3, #4
 8001498:	f003 0201 	and.w	r2, r3, #1
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	d017      	beq.n	80014ea <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	2203      	movs	r2, #3
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d123      	bne.n	800153e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	08da      	lsrs	r2, r3, #3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3208      	adds	r2, #8
 80014fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001502:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	220f      	movs	r2, #15
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	691a      	ldr	r2, [r3, #16]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	08da      	lsrs	r2, r3, #3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3208      	adds	r2, #8
 8001538:	6939      	ldr	r1, [r7, #16]
 800153a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	2203      	movs	r2, #3
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4013      	ands	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 0203 	and.w	r2, r3, #3
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4313      	orrs	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 8098 	beq.w	80016b0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001580:	4a54      	ldr	r2, [pc, #336]	@ (80016d4 <HAL_GPIO_Init+0x2c8>)
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	089b      	lsrs	r3, r3, #2
 8001586:	3302      	adds	r3, #2
 8001588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	f003 0303 	and.w	r3, r3, #3
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	220f      	movs	r2, #15
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4013      	ands	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015aa:	d019      	beq.n	80015e0 <HAL_GPIO_Init+0x1d4>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a4a      	ldr	r2, [pc, #296]	@ (80016d8 <HAL_GPIO_Init+0x2cc>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d013      	beq.n	80015dc <HAL_GPIO_Init+0x1d0>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a49      	ldr	r2, [pc, #292]	@ (80016dc <HAL_GPIO_Init+0x2d0>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d00d      	beq.n	80015d8 <HAL_GPIO_Init+0x1cc>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a48      	ldr	r2, [pc, #288]	@ (80016e0 <HAL_GPIO_Init+0x2d4>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d007      	beq.n	80015d4 <HAL_GPIO_Init+0x1c8>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a47      	ldr	r2, [pc, #284]	@ (80016e4 <HAL_GPIO_Init+0x2d8>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d101      	bne.n	80015d0 <HAL_GPIO_Init+0x1c4>
 80015cc:	2304      	movs	r3, #4
 80015ce:	e008      	b.n	80015e2 <HAL_GPIO_Init+0x1d6>
 80015d0:	2307      	movs	r3, #7
 80015d2:	e006      	b.n	80015e2 <HAL_GPIO_Init+0x1d6>
 80015d4:	2303      	movs	r3, #3
 80015d6:	e004      	b.n	80015e2 <HAL_GPIO_Init+0x1d6>
 80015d8:	2302      	movs	r3, #2
 80015da:	e002      	b.n	80015e2 <HAL_GPIO_Init+0x1d6>
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <HAL_GPIO_Init+0x1d6>
 80015e0:	2300      	movs	r3, #0
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	f002 0203 	and.w	r2, r2, #3
 80015e8:	0092      	lsls	r2, r2, #2
 80015ea:	4093      	lsls	r3, r2
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015f2:	4938      	ldr	r1, [pc, #224]	@ (80016d4 <HAL_GPIO_Init+0x2c8>)
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	089b      	lsrs	r3, r3, #2
 80015f8:	3302      	adds	r3, #2
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001600:	4b39      	ldr	r3, [pc, #228]	@ (80016e8 <HAL_GPIO_Init+0x2dc>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	43db      	mvns	r3, r3
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	4013      	ands	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	4313      	orrs	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001624:	4a30      	ldr	r2, [pc, #192]	@ (80016e8 <HAL_GPIO_Init+0x2dc>)
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800162a:	4b2f      	ldr	r3, [pc, #188]	@ (80016e8 <HAL_GPIO_Init+0x2dc>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	43db      	mvns	r3, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4013      	ands	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4313      	orrs	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800164e:	4a26      	ldr	r2, [pc, #152]	@ (80016e8 <HAL_GPIO_Init+0x2dc>)
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001654:	4b24      	ldr	r3, [pc, #144]	@ (80016e8 <HAL_GPIO_Init+0x2dc>)
 8001656:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800165a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	43db      	mvns	r3, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4013      	ands	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4313      	orrs	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800167a:	4a1b      	ldr	r2, [pc, #108]	@ (80016e8 <HAL_GPIO_Init+0x2dc>)
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8001682:	4b19      	ldr	r3, [pc, #100]	@ (80016e8 <HAL_GPIO_Init+0x2dc>)
 8001684:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001688:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	43db      	mvns	r3, r3
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4013      	ands	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016a8:	4a0f      	ldr	r2, [pc, #60]	@ (80016e8 <HAL_GPIO_Init+0x2dc>)
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	3301      	adds	r3, #1
 80016b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	fa22 f303 	lsr.w	r3, r2, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f47f aeab 	bne.w	800141c <HAL_GPIO_Init+0x10>
  }
}
 80016c6:	bf00      	nop
 80016c8:	bf00      	nop
 80016ca:	371c      	adds	r7, #28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	40010000 	.word	0x40010000
 80016d8:	48000400 	.word	0x48000400
 80016dc:	48000800 	.word	0x48000800
 80016e0:	48000c00 	.word	0x48000c00
 80016e4:	48001000 	.word	0x48001000
 80016e8:	58000800 	.word	0x58000800

080016ec <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b087      	sub	sp, #28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80016fa:	e0bb      	b.n	8001874 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80016fc:	2201      	movs	r2, #1
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	4013      	ands	r3, r2
 8001708:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 80ae 	beq.w	800186e <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001712:	4a5f      	ldr	r2, [pc, #380]	@ (8001890 <HAL_GPIO_DeInit+0x1a4>)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	089b      	lsrs	r3, r3, #2
 8001718:	3302      	adds	r3, #2
 800171a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	220f      	movs	r2, #15
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	4013      	ands	r3, r2
 8001732:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800173a:	d019      	beq.n	8001770 <HAL_GPIO_DeInit+0x84>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a55      	ldr	r2, [pc, #340]	@ (8001894 <HAL_GPIO_DeInit+0x1a8>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d013      	beq.n	800176c <HAL_GPIO_DeInit+0x80>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a54      	ldr	r2, [pc, #336]	@ (8001898 <HAL_GPIO_DeInit+0x1ac>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d00d      	beq.n	8001768 <HAL_GPIO_DeInit+0x7c>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a53      	ldr	r2, [pc, #332]	@ (800189c <HAL_GPIO_DeInit+0x1b0>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d007      	beq.n	8001764 <HAL_GPIO_DeInit+0x78>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a52      	ldr	r2, [pc, #328]	@ (80018a0 <HAL_GPIO_DeInit+0x1b4>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d101      	bne.n	8001760 <HAL_GPIO_DeInit+0x74>
 800175c:	2304      	movs	r3, #4
 800175e:	e008      	b.n	8001772 <HAL_GPIO_DeInit+0x86>
 8001760:	2307      	movs	r3, #7
 8001762:	e006      	b.n	8001772 <HAL_GPIO_DeInit+0x86>
 8001764:	2303      	movs	r3, #3
 8001766:	e004      	b.n	8001772 <HAL_GPIO_DeInit+0x86>
 8001768:	2302      	movs	r3, #2
 800176a:	e002      	b.n	8001772 <HAL_GPIO_DeInit+0x86>
 800176c:	2301      	movs	r3, #1
 800176e:	e000      	b.n	8001772 <HAL_GPIO_DeInit+0x86>
 8001770:	2300      	movs	r3, #0
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	f002 0203 	and.w	r2, r2, #3
 8001778:	0092      	lsls	r2, r2, #2
 800177a:	4093      	lsls	r3, r2
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	429a      	cmp	r2, r3
 8001780:	d136      	bne.n	80017f0 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001782:	4b48      	ldr	r3, [pc, #288]	@ (80018a4 <HAL_GPIO_DeInit+0x1b8>)
 8001784:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	43db      	mvns	r3, r3
 800178c:	4945      	ldr	r1, [pc, #276]	@ (80018a4 <HAL_GPIO_DeInit+0x1b8>)
 800178e:	4013      	ands	r3, r2
 8001790:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8001794:	4b43      	ldr	r3, [pc, #268]	@ (80018a4 <HAL_GPIO_DeInit+0x1b8>)
 8001796:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	43db      	mvns	r3, r3
 800179e:	4941      	ldr	r1, [pc, #260]	@ (80018a4 <HAL_GPIO_DeInit+0x1b8>)
 80017a0:	4013      	ands	r3, r2
 80017a2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80017a6:	4b3f      	ldr	r3, [pc, #252]	@ (80018a4 <HAL_GPIO_DeInit+0x1b8>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	493d      	ldr	r1, [pc, #244]	@ (80018a4 <HAL_GPIO_DeInit+0x1b8>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80017b4:	4b3b      	ldr	r3, [pc, #236]	@ (80018a4 <HAL_GPIO_DeInit+0x1b8>)
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	43db      	mvns	r3, r3
 80017bc:	4939      	ldr	r1, [pc, #228]	@ (80018a4 <HAL_GPIO_DeInit+0x1b8>)
 80017be:	4013      	ands	r3, r2
 80017c0:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	220f      	movs	r2, #15
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80017d2:	4a2f      	ldr	r2, [pc, #188]	@ (8001890 <HAL_GPIO_DeInit+0x1a4>)
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	089b      	lsrs	r3, r3, #2
 80017d8:	3302      	adds	r3, #2
 80017da:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	43da      	mvns	r2, r3
 80017e2:	482b      	ldr	r0, [pc, #172]	@ (8001890 <HAL_GPIO_DeInit+0x1a4>)
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	089b      	lsrs	r3, r3, #2
 80017e8:	400a      	ands	r2, r1
 80017ea:	3302      	adds	r3, #2
 80017ec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	2103      	movs	r1, #3
 80017fa:	fa01 f303 	lsl.w	r3, r1, r3
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	08da      	lsrs	r2, r3, #3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3208      	adds	r2, #8
 800180c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	220f      	movs	r2, #15
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	08d2      	lsrs	r2, r2, #3
 8001824:	4019      	ands	r1, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3208      	adds	r2, #8
 800182a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	68da      	ldr	r2, [r3, #12]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	2103      	movs	r1, #3
 8001838:	fa01 f303 	lsl.w	r3, r1, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	401a      	ands	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	2101      	movs	r1, #1
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	fa01 f303 	lsl.w	r3, r1, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	401a      	ands	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	2103      	movs	r1, #3
 8001862:	fa01 f303 	lsl.w	r3, r1, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	401a      	ands	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	3301      	adds	r3, #1
 8001872:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	fa22 f303 	lsr.w	r3, r2, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	f47f af3d 	bne.w	80016fc <HAL_GPIO_DeInit+0x10>
  }
}
 8001882:	bf00      	nop
 8001884:	bf00      	nop
 8001886:	371c      	adds	r7, #28
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	40010000 	.word	0x40010000
 8001894:	48000400 	.word	0x48000400
 8001898:	48000800 	.word	0x48000800
 800189c:	48000c00 	.word	0x48000c00
 80018a0:	48001000 	.word	0x48001000
 80018a4:	58000800 	.word	0x58000800

080018a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	807b      	strh	r3, [r7, #2]
 80018b4:	4613      	mov	r3, r2
 80018b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018b8:	787b      	ldrb	r3, [r7, #1]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018be:	887a      	ldrh	r2, [r7, #2]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018c4:	e002      	b.n	80018cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018c6:	887a      	ldrh	r2, [r7, #2]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018dc:	4b05      	ldr	r3, [pc, #20]	@ (80018f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a04      	ldr	r2, [pc, #16]	@ (80018f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018e6:	6013      	str	r3, [r2, #0]
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	58000400 	.word	0x58000400

080018f8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80018fc:	4b04      	ldr	r3, [pc, #16]	@ (8001910 <HAL_PWREx_GetVoltageRange+0x18>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	58000400 	.word	0x58000400

08001914 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001918:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001922:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001926:	d101      	bne.n	800192c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800193c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001946:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800194a:	6013      	str	r3, [r2, #0]
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800195a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001964:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001968:	6013      	str	r3, [r2, #0]
}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001978:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001982:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001986:	d101      	bne.n	800198c <LL_RCC_HSE_IsReady+0x18>
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <LL_RCC_HSE_IsReady+0x1a>
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800199c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019aa:	6013      	str	r3, [r2, #0]
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80019ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019c8:	6013      	str	r3, [r2, #0]
}
 80019ca:	bf00      	nop
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80019d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019e6:	d101      	bne.n	80019ec <LL_RCC_HSI_IsReady+0x18>
 80019e8:	2301      	movs	r3, #1
 80019ea:	e000      	b.n	80019ee <LL_RCC_HSI_IsReady+0x1a>
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001a00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	061b      	lsls	r3, r3, #24
 8001a0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a12:	4313      	orrs	r3, r2
 8001a14:	604b      	str	r3, [r1, #4]
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001a26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001a48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a54:	f023 0301 	bic.w	r3, r3, #1
 8001a58:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001a6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d101      	bne.n	8001a7e <LL_RCC_HSI48_IsReady+0x18>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <LL_RCC_HSI48_IsReady+0x1a>
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ab0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ab8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001abc:	f023 0301 	bic.w	r3, r3, #1
 8001ac0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001ad2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ada:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ade:	f043 0304 	orr.w	r3, r3, #4
 8001ae2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001af4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001afc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b00:	f023 0304 	bic.w	r3, r3, #4
 8001b04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001b16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d101      	bne.n	8001b2a <LL_RCC_LSE_IsReady+0x18>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <LL_RCC_LSE_IsReady+0x1a>
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001b3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001b5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b68:	f023 0301 	bic.w	r3, r3, #1
 8001b6c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001b7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d101      	bne.n	8001b92 <LL_RCC_LSI1_IsReady+0x18>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <LL_RCC_LSI1_IsReady+0x1a>
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001ba2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001baa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bae:	f043 0304 	orr.w	r3, r3, #4
 8001bb2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001bb6:	bf00      	nop
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001bc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bcc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bd0:	f023 0304 	bic.w	r3, r3, #4
 8001bd4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001be6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b08      	cmp	r3, #8
 8001bf4:	d101      	bne.n	8001bfa <LL_RCC_LSI2_IsReady+0x18>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <LL_RCC_LSI2_IsReady+0x1a>
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001c0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c16:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	021b      	lsls	r3, r3, #8
 8001c1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c22:	4313      	orrs	r3, r2
 8001c24:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001c38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6013      	str	r3, [r2, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001c56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c60:	f023 0301 	bic.w	r3, r3, #1
 8001c64:	6013      	str	r3, [r2, #0]
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001c74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d101      	bne.n	8001c86 <LL_RCC_MSI_IsReady+0x16>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <LL_RCC_MSI_IsReady+0x18>
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001c9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ca4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	600b      	str	r3, [r1, #0]
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001cc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cca:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2bb0      	cmp	r3, #176	@ 0xb0
 8001cd0:	d901      	bls.n	8001cd6 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001cd2:	23b0      	movs	r3, #176	@ 0xb0
 8001cd4:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001cd6:	687b      	ldr	r3, [r7, #4]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001cec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	021b      	lsls	r3, r3, #8
 8001cfa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	604b      	str	r3, [r1, #4]
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001d16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f023 0203 	bic.w	r2, r3, #3
 8001d20:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	608b      	str	r3, [r1, #8]
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001d3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 030c 	and.w	r3, r3, #12
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001d56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d60:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	608b      	str	r3, [r1, #8]
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001d7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d82:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001d86:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001daa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dae:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001db2:	f023 020f 	bic.w	r2, r3, #15
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001dd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001de2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	608b      	str	r3, [r1, #8]
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001e00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	608b      	str	r3, [r1, #8]
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001e24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001e3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e40:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001e44:	011b      	lsls	r3, r3, #4
 8001e46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001e58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001e70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001e88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e96:	6013      	str	r3, [r2, #0]
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001ea6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001eb0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001eb4:	6013      	str	r3, [r2, #0]
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001ec4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ece:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ed2:	d101      	bne.n	8001ed8 <LL_RCC_PLL_IsReady+0x18>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <LL_RCC_PLL_IsReady+0x1a>
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001ee8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	0a1b      	lsrs	r3, r3, #8
 8001ef0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001f02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001f1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001f32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	f003 0303 	and.w	r3, r3, #3
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001f4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f58:	d101      	bne.n	8001f5e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001f6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f72:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001f7e:	d101      	bne.n	8001f84 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001f80:	2301      	movs	r3, #1
 8001f82:	e000      	b.n	8001f86 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001f94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f98:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001f9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fa4:	d101      	bne.n	8001faa <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001fba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001fc8:	d101      	bne.n	8001fce <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001fde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fe8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001fec:	d101      	bne.n	8001ff2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
	...

08002000 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002000:	b590      	push	{r4, r7, lr}
 8002002:	b08d      	sub	sp, #52	@ 0x34
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e363      	b.n	80026da <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0320 	and.w	r3, r3, #32
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 808d 	beq.w	800213a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002020:	f7ff fe89 	bl	8001d36 <LL_RCC_GetSysClkSource>
 8002024:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002026:	f7ff ff82 	bl	8001f2e <LL_RCC_PLL_GetMainSource>
 800202a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800202c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800202e:	2b00      	cmp	r3, #0
 8002030:	d005      	beq.n	800203e <HAL_RCC_OscConfig+0x3e>
 8002032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002034:	2b0c      	cmp	r3, #12
 8002036:	d147      	bne.n	80020c8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800203a:	2b01      	cmp	r3, #1
 800203c:	d144      	bne.n	80020c8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e347      	b.n	80026da <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800204e:	f7ff fe34 	bl	8001cba <LL_RCC_MSI_GetRange>
 8002052:	4603      	mov	r3, r0
 8002054:	429c      	cmp	r4, r3
 8002056:	d914      	bls.n	8002082 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205c:	4618      	mov	r0, r3
 800205e:	f000 fd2f 	bl	8002ac0 <RCC_SetFlashLatencyFromMSIRange>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e336      	b.n	80026da <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff fe0e 	bl	8001c92 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fe32 	bl	8001ce4 <LL_RCC_MSI_SetCalibTrimming>
 8002080:	e013      	b.n	80020aa <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff fe03 	bl	8001c92 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff fe27 	bl	8001ce4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209a:	4618      	mov	r0, r3
 800209c:	f000 fd10 	bl	8002ac0 <RCC_SetFlashLatencyFromMSIRange>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e317      	b.n	80026da <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80020aa:	f000 fcc9 	bl	8002a40 <HAL_RCC_GetHCLKFreq>
 80020ae:	4603      	mov	r3, r0
 80020b0:	4aa4      	ldr	r2, [pc, #656]	@ (8002344 <HAL_RCC_OscConfig+0x344>)
 80020b2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80020b4:	4ba4      	ldr	r3, [pc, #656]	@ (8002348 <HAL_RCC_OscConfig+0x348>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe ff7d 	bl	8000fb8 <HAL_InitTick>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d039      	beq.n	8002138 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e308      	b.n	80026da <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d01e      	beq.n	800210e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020d0:	f7ff fdb0 	bl	8001c34 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020d4:	f7fe ffbe 	bl	8001054 <HAL_GetTick>
 80020d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020dc:	f7fe ffba 	bl	8001054 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e2f5      	b.n	80026da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80020ee:	f7ff fdbf 	bl	8001c70 <LL_RCC_MSI_IsReady>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f1      	beq.n	80020dc <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fdc8 	bl	8001c92 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff fdec 	bl	8001ce4 <LL_RCC_MSI_SetCalibTrimming>
 800210c:	e015      	b.n	800213a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800210e:	f7ff fda0 	bl	8001c52 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002112:	f7fe ff9f 	bl	8001054 <HAL_GetTick>
 8002116:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800211a:	f7fe ff9b 	bl	8001054 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e2d6      	b.n	80026da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800212c:	f7ff fda0 	bl	8001c70 <LL_RCC_MSI_IsReady>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f1      	bne.n	800211a <HAL_RCC_OscConfig+0x11a>
 8002136:	e000      	b.n	800213a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002138:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d047      	beq.n	80021d6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002146:	f7ff fdf6 	bl	8001d36 <LL_RCC_GetSysClkSource>
 800214a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800214c:	f7ff feef 	bl	8001f2e <LL_RCC_PLL_GetMainSource>
 8002150:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	2b08      	cmp	r3, #8
 8002156:	d005      	beq.n	8002164 <HAL_RCC_OscConfig+0x164>
 8002158:	6a3b      	ldr	r3, [r7, #32]
 800215a:	2b0c      	cmp	r3, #12
 800215c:	d108      	bne.n	8002170 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	2b03      	cmp	r3, #3
 8002162:	d105      	bne.n	8002170 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d134      	bne.n	80021d6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e2b4      	b.n	80026da <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002178:	d102      	bne.n	8002180 <HAL_RCC_OscConfig+0x180>
 800217a:	f7ff fbdd 	bl	8001938 <LL_RCC_HSE_Enable>
 800217e:	e001      	b.n	8002184 <HAL_RCC_OscConfig+0x184>
 8002180:	f7ff fbe9 	bl	8001956 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d012      	beq.n	80021b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7fe ff62 	bl	8001054 <HAL_GetTick>
 8002190:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002194:	f7fe ff5e 	bl	8001054 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b64      	cmp	r3, #100	@ 0x64
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e299      	b.n	80026da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80021a6:	f7ff fbe5 	bl	8001974 <LL_RCC_HSE_IsReady>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0f1      	beq.n	8002194 <HAL_RCC_OscConfig+0x194>
 80021b0:	e011      	b.n	80021d6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b2:	f7fe ff4f 	bl	8001054 <HAL_GetTick>
 80021b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ba:	f7fe ff4b 	bl	8001054 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b64      	cmp	r3, #100	@ 0x64
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e286      	b.n	80026da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80021cc:	f7ff fbd2 	bl	8001974 <LL_RCC_HSE_IsReady>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f1      	bne.n	80021ba <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d04c      	beq.n	800227c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021e2:	f7ff fda8 	bl	8001d36 <LL_RCC_GetSysClkSource>
 80021e6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021e8:	f7ff fea1 	bl	8001f2e <LL_RCC_PLL_GetMainSource>
 80021ec:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	2b04      	cmp	r3, #4
 80021f2:	d005      	beq.n	8002200 <HAL_RCC_OscConfig+0x200>
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	2b0c      	cmp	r3, #12
 80021f8:	d10e      	bne.n	8002218 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d10b      	bne.n	8002218 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e266      	b.n	80026da <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff fbf1 	bl	80019f8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002216:	e031      	b.n	800227c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d019      	beq.n	8002254 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002220:	f7ff fbba 	bl	8001998 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002224:	f7fe ff16 	bl	8001054 <HAL_GetTick>
 8002228:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800222c:	f7fe ff12 	bl	8001054 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e24d      	b.n	80026da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800223e:	f7ff fbc9 	bl	80019d4 <LL_RCC_HSI_IsReady>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f1      	beq.n	800222c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff fbd3 	bl	80019f8 <LL_RCC_HSI_SetCalibTrimming>
 8002252:	e013      	b.n	800227c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002254:	f7ff fbaf 	bl	80019b6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002258:	f7fe fefc 	bl	8001054 <HAL_GetTick>
 800225c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002260:	f7fe fef8 	bl	8001054 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e233      	b.n	80026da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002272:	f7ff fbaf 	bl	80019d4 <LL_RCC_HSI_IsReady>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1f1      	bne.n	8002260 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0308 	and.w	r3, r3, #8
 8002284:	2b00      	cmp	r3, #0
 8002286:	d106      	bne.n	8002296 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 80a3 	beq.w	80023dc <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d076      	beq.n	800238c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0310 	and.w	r3, r3, #16
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d046      	beq.n	8002338 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80022aa:	f7ff fc66 	bl	8001b7a <LL_RCC_LSI1_IsReady>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d113      	bne.n	80022dc <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80022b4:	f7ff fc3f 	bl	8001b36 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022b8:	f7fe fecc 	bl	8001054 <HAL_GetTick>
 80022bc:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80022c0:	f7fe fec8 	bl	8001054 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e203      	b.n	80026da <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80022d2:	f7ff fc52 	bl	8001b7a <LL_RCC_LSI1_IsReady>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f1      	beq.n	80022c0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80022dc:	f7ff fc5f 	bl	8001b9e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e0:	f7fe feb8 	bl	8001054 <HAL_GetTick>
 80022e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80022e8:	f7fe feb4 	bl	8001054 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e1ef      	b.n	80026da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80022fa:	f7ff fc72 	bl	8001be2 <LL_RCC_LSI2_IsReady>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0f1      	beq.n	80022e8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff fc7c 	bl	8001c06 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800230e:	f7ff fc23 	bl	8001b58 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002312:	f7fe fe9f 	bl	8001054 <HAL_GetTick>
 8002316:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800231a:	f7fe fe9b 	bl	8001054 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e1d6      	b.n	80026da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800232c:	f7ff fc25 	bl	8001b7a <LL_RCC_LSI1_IsReady>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f1      	bne.n	800231a <HAL_RCC_OscConfig+0x31a>
 8002336:	e051      	b.n	80023dc <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002338:	f7ff fbfd 	bl	8001b36 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233c:	f7fe fe8a 	bl	8001054 <HAL_GetTick>
 8002340:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002342:	e00c      	b.n	800235e <HAL_RCC_OscConfig+0x35e>
 8002344:	20000008 	.word	0x20000008
 8002348:	2000001c 	.word	0x2000001c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800234c:	f7fe fe82 	bl	8001054 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e1bd      	b.n	80026da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800235e:	f7ff fc0c 	bl	8001b7a <LL_RCC_LSI1_IsReady>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0f1      	beq.n	800234c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002368:	f7ff fc2a 	bl	8001bc0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800236e:	f7fe fe71 	bl	8001054 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b03      	cmp	r3, #3
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e1ac      	b.n	80026da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002380:	f7ff fc2f 	bl	8001be2 <LL_RCC_LSI2_IsReady>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f1      	bne.n	800236e <HAL_RCC_OscConfig+0x36e>
 800238a:	e027      	b.n	80023dc <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800238c:	f7ff fc18 	bl	8001bc0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002390:	f7fe fe60 	bl	8001054 <HAL_GetTick>
 8002394:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002398:	f7fe fe5c 	bl	8001054 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e197      	b.n	80026da <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80023aa:	f7ff fc1a 	bl	8001be2 <LL_RCC_LSI2_IsReady>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1f1      	bne.n	8002398 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80023b4:	f7ff fbd0 	bl	8001b58 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b8:	f7fe fe4c 	bl	8001054 <HAL_GetTick>
 80023bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80023c0:	f7fe fe48 	bl	8001054 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e183      	b.n	80026da <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80023d2:	f7ff fbd2 	bl	8001b7a <LL_RCC_LSI1_IsReady>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1f1      	bne.n	80023c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d05b      	beq.n	80024a0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023e8:	4ba7      	ldr	r3, [pc, #668]	@ (8002688 <HAL_RCC_OscConfig+0x688>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d114      	bne.n	800241e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80023f4:	f7ff fa70 	bl	80018d8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023f8:	f7fe fe2c 	bl	8001054 <HAL_GetTick>
 80023fc:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002400:	f7fe fe28 	bl	8001054 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e163      	b.n	80026da <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002412:	4b9d      	ldr	r3, [pc, #628]	@ (8002688 <HAL_RCC_OscConfig+0x688>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f0      	beq.n	8002400 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d102      	bne.n	800242c <HAL_RCC_OscConfig+0x42c>
 8002426:	f7ff fb30 	bl	8001a8a <LL_RCC_LSE_Enable>
 800242a:	e00c      	b.n	8002446 <HAL_RCC_OscConfig+0x446>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b05      	cmp	r3, #5
 8002432:	d104      	bne.n	800243e <HAL_RCC_OscConfig+0x43e>
 8002434:	f7ff fb4b 	bl	8001ace <LL_RCC_LSE_EnableBypass>
 8002438:	f7ff fb27 	bl	8001a8a <LL_RCC_LSE_Enable>
 800243c:	e003      	b.n	8002446 <HAL_RCC_OscConfig+0x446>
 800243e:	f7ff fb35 	bl	8001aac <LL_RCC_LSE_Disable>
 8002442:	f7ff fb55 	bl	8001af0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d014      	beq.n	8002478 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244e:	f7fe fe01 	bl	8001054 <HAL_GetTick>
 8002452:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002454:	e00a      	b.n	800246c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002456:	f7fe fdfd 	bl	8001054 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002464:	4293      	cmp	r3, r2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e136      	b.n	80026da <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800246c:	f7ff fb51 	bl	8001b12 <LL_RCC_LSE_IsReady>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0ef      	beq.n	8002456 <HAL_RCC_OscConfig+0x456>
 8002476:	e013      	b.n	80024a0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002478:	f7fe fdec 	bl	8001054 <HAL_GetTick>
 800247c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800247e:	e00a      	b.n	8002496 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002480:	f7fe fde8 	bl	8001054 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800248e:	4293      	cmp	r3, r2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e121      	b.n	80026da <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002496:	f7ff fb3c 	bl	8001b12 <LL_RCC_LSE_IsReady>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1ef      	bne.n	8002480 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d02c      	beq.n	8002506 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d014      	beq.n	80024de <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024b4:	f7ff fab5 	bl	8001a22 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b8:	f7fe fdcc 	bl	8001054 <HAL_GetTick>
 80024bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024c0:	f7fe fdc8 	bl	8001054 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e103      	b.n	80026da <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80024d2:	f7ff fac8 	bl	8001a66 <LL_RCC_HSI48_IsReady>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0f1      	beq.n	80024c0 <HAL_RCC_OscConfig+0x4c0>
 80024dc:	e013      	b.n	8002506 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024de:	f7ff fab1 	bl	8001a44 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e2:	f7fe fdb7 	bl	8001054 <HAL_GetTick>
 80024e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024ea:	f7fe fdb3 	bl	8001054 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e0ee      	b.n	80026da <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80024fc:	f7ff fab3 	bl	8001a66 <LL_RCC_HSI48_IsReady>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f1      	bne.n	80024ea <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 80e4 	beq.w	80026d8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002510:	f7ff fc11 	bl	8001d36 <LL_RCC_GetSysClkSource>
 8002514:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002516:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002522:	2b02      	cmp	r3, #2
 8002524:	f040 80b4 	bne.w	8002690 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f003 0203 	and.w	r2, r3, #3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002532:	429a      	cmp	r2, r3
 8002534:	d123      	bne.n	800257e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002540:	429a      	cmp	r2, r3
 8002542:	d11c      	bne.n	800257e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	0a1b      	lsrs	r3, r3, #8
 8002548:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002550:	429a      	cmp	r2, r3
 8002552:	d114      	bne.n	800257e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800255e:	429a      	cmp	r2, r3
 8002560:	d10d      	bne.n	800257e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800256c:	429a      	cmp	r2, r3
 800256e:	d106      	bne.n	800257e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800257a:	429a      	cmp	r2, r3
 800257c:	d05d      	beq.n	800263a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	2b0c      	cmp	r3, #12
 8002582:	d058      	beq.n	8002636 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002584:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e0a1      	b.n	80026da <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002596:	f7ff fc84 	bl	8001ea2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800259a:	f7fe fd5b 	bl	8001054 <HAL_GetTick>
 800259e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a2:	f7fe fd57 	bl	8001054 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e092      	b.n	80026da <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1ef      	bne.n	80025a2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	4b30      	ldr	r3, [pc, #192]	@ (800268c <HAL_RCC_OscConfig+0x68c>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80025d4:	4311      	orrs	r1, r2
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80025da:	0212      	lsls	r2, r2, #8
 80025dc:	4311      	orrs	r1, r2
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80025e2:	4311      	orrs	r1, r2
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80025e8:	4311      	orrs	r1, r2
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80025ee:	430a      	orrs	r2, r1
 80025f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025f4:	4313      	orrs	r3, r2
 80025f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025f8:	f7ff fc44 	bl	8001e84 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800260a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800260c:	f7fe fd22 	bl	8001054 <HAL_GetTick>
 8002610:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002614:	f7fe fd1e 	bl	8001054 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e059      	b.n	80026da <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002626:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0ef      	beq.n	8002614 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002634:	e050      	b.n	80026d8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e04f      	b.n	80026da <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800263a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d147      	bne.n	80026d8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002648:	f7ff fc1c 	bl	8001e84 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800264c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800265a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800265c:	f7fe fcfa 	bl	8001054 <HAL_GetTick>
 8002660:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002664:	f7fe fcf6 	bl	8001054 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e031      	b.n	80026da <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002676:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0ef      	beq.n	8002664 <HAL_RCC_OscConfig+0x664>
 8002684:	e028      	b.n	80026d8 <HAL_RCC_OscConfig+0x6d8>
 8002686:	bf00      	nop
 8002688:	58000400 	.word	0x58000400
 800268c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	2b0c      	cmp	r3, #12
 8002694:	d01e      	beq.n	80026d4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002696:	f7ff fc04 	bl	8001ea2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269a:	f7fe fcdb 	bl	8001054 <HAL_GetTick>
 800269e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a2:	f7fe fcd7 	bl	8001054 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e012      	b.n	80026da <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1ef      	bne.n	80026a2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80026c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026cc:	4b05      	ldr	r3, [pc, #20]	@ (80026e4 <HAL_RCC_OscConfig+0x6e4>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	60cb      	str	r3, [r1, #12]
 80026d2:	e001      	b.n	80026d8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e000      	b.n	80026da <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3734      	adds	r7, #52	@ 0x34
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd90      	pop	{r4, r7, pc}
 80026e2:	bf00      	nop
 80026e4:	eefefffc 	.word	0xeefefffc

080026e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e12d      	b.n	8002958 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026fc:	4b98      	ldr	r3, [pc, #608]	@ (8002960 <HAL_RCC_ClockConfig+0x278>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d91b      	bls.n	8002742 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270a:	4b95      	ldr	r3, [pc, #596]	@ (8002960 <HAL_RCC_ClockConfig+0x278>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f023 0207 	bic.w	r2, r3, #7
 8002712:	4993      	ldr	r1, [pc, #588]	@ (8002960 <HAL_RCC_ClockConfig+0x278>)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	4313      	orrs	r3, r2
 8002718:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800271a:	f7fe fc9b 	bl	8001054 <HAL_GetTick>
 800271e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002720:	e008      	b.n	8002734 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002722:	f7fe fc97 	bl	8001054 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e111      	b.n	8002958 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002734:	4b8a      	ldr	r3, [pc, #552]	@ (8002960 <HAL_RCC_ClockConfig+0x278>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d1ef      	bne.n	8002722 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d016      	beq.n	800277c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fafb 	bl	8001d4e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002758:	f7fe fc7c 	bl	8001054 <HAL_GetTick>
 800275c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002760:	f7fe fc78 	bl	8001054 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e0f2      	b.n	8002958 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002772:	f7ff fbe8 	bl	8001f46 <LL_RCC_IsActiveFlag_HPRE>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0f1      	beq.n	8002760 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0320 	and.w	r3, r3, #32
 8002784:	2b00      	cmp	r3, #0
 8002786:	d016      	beq.n	80027b6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff faf2 	bl	8001d76 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002792:	f7fe fc5f 	bl	8001054 <HAL_GetTick>
 8002796:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002798:	e008      	b.n	80027ac <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800279a:	f7fe fc5b 	bl	8001054 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e0d5      	b.n	8002958 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80027ac:	f7ff fbdd 	bl	8001f6a <LL_RCC_IsActiveFlag_C2HPRE>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f1      	beq.n	800279a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d016      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff faeb 	bl	8001da2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027cc:	f7fe fc42 	bl	8001054 <HAL_GetTick>
 80027d0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027d4:	f7fe fc3e 	bl	8001054 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e0b8      	b.n	8002958 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80027e6:	f7ff fbd3 	bl	8001f90 <LL_RCC_IsActiveFlag_SHDHPRE>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0f1      	beq.n	80027d4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d016      	beq.n	800282a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff fae5 	bl	8001dd0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002806:	f7fe fc25 	bl	8001054 <HAL_GetTick>
 800280a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800280c:	e008      	b.n	8002820 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800280e:	f7fe fc21 	bl	8001054 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e09b      	b.n	8002958 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002820:	f7ff fbc9 	bl	8001fb6 <LL_RCC_IsActiveFlag_PPRE1>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f1      	beq.n	800280e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b00      	cmp	r3, #0
 8002834:	d017      	beq.n	8002866 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff fadb 	bl	8001df8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002842:	f7fe fc07 	bl	8001054 <HAL_GetTick>
 8002846:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002848:	e008      	b.n	800285c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800284a:	f7fe fc03 	bl	8001054 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e07d      	b.n	8002958 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800285c:	f7ff fbbd 	bl	8001fda <LL_RCC_IsActiveFlag_PPRE2>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f1      	beq.n	800284a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d043      	beq.n	80028fa <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b02      	cmp	r3, #2
 8002878:	d106      	bne.n	8002888 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800287a:	f7ff f87b 	bl	8001974 <LL_RCC_HSE_IsReady>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d11e      	bne.n	80028c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e067      	b.n	8002958 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b03      	cmp	r3, #3
 800288e:	d106      	bne.n	800289e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002890:	f7ff fb16 	bl	8001ec0 <LL_RCC_PLL_IsReady>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d113      	bne.n	80028c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e05c      	b.n	8002958 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d106      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80028a6:	f7ff f9e3 	bl	8001c70 <LL_RCC_MSI_IsReady>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d108      	bne.n	80028c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e051      	b.n	8002958 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80028b4:	f7ff f88e 	bl	80019d4 <LL_RCC_HSI_IsReady>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e04a      	b.n	8002958 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff fa21 	bl	8001d0e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028cc:	f7fe fbc2 	bl	8001054 <HAL_GetTick>
 80028d0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d2:	e00a      	b.n	80028ea <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d4:	f7fe fbbe 	bl	8001054 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e036      	b.n	8002958 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ea:	f7ff fa24 	bl	8001d36 <LL_RCC_GetSysClkSource>
 80028ee:	4602      	mov	r2, r0
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d1ec      	bne.n	80028d4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028fa:	4b19      	ldr	r3, [pc, #100]	@ (8002960 <HAL_RCC_ClockConfig+0x278>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d21b      	bcs.n	8002940 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002908:	4b15      	ldr	r3, [pc, #84]	@ (8002960 <HAL_RCC_ClockConfig+0x278>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f023 0207 	bic.w	r2, r3, #7
 8002910:	4913      	ldr	r1, [pc, #76]	@ (8002960 <HAL_RCC_ClockConfig+0x278>)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	4313      	orrs	r3, r2
 8002916:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002918:	f7fe fb9c 	bl	8001054 <HAL_GetTick>
 800291c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800291e:	e008      	b.n	8002932 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002920:	f7fe fb98 	bl	8001054 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e012      	b.n	8002958 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002932:	4b0b      	ldr	r3, [pc, #44]	@ (8002960 <HAL_RCC_ClockConfig+0x278>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d1ef      	bne.n	8002920 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002940:	f000 f87e 	bl	8002a40 <HAL_RCC_GetHCLKFreq>
 8002944:	4603      	mov	r3, r0
 8002946:	4a07      	ldr	r2, [pc, #28]	@ (8002964 <HAL_RCC_ClockConfig+0x27c>)
 8002948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800294a:	f7fe fb8f 	bl	800106c <HAL_GetTickPrio>
 800294e:	4603      	mov	r3, r0
 8002950:	4618      	mov	r0, r3
 8002952:	f7fe fb31 	bl	8000fb8 <HAL_InitTick>
 8002956:	4603      	mov	r3, r0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	58004000 	.word	0x58004000
 8002964:	20000008 	.word	0x20000008

08002968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002968:	b590      	push	{r4, r7, lr}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800296e:	f7ff f9e2 	bl	8001d36 <LL_RCC_GetSysClkSource>
 8002972:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10a      	bne.n	8002990 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800297a:	f7ff f99e 	bl	8001cba <LL_RCC_MSI_GetRange>
 800297e:	4603      	mov	r3, r0
 8002980:	091b      	lsrs	r3, r3, #4
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	4a2b      	ldr	r2, [pc, #172]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	e04b      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b04      	cmp	r3, #4
 8002994:	d102      	bne.n	800299c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002996:	4b28      	ldr	r3, [pc, #160]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	e045      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d10a      	bne.n	80029b8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80029a2:	f7fe ffb7 	bl	8001914 <LL_RCC_HSE_IsEnabledDiv2>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d102      	bne.n	80029b2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80029ac:	4b22      	ldr	r3, [pc, #136]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0xd0>)
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	e03a      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80029b2:	4b22      	ldr	r3, [pc, #136]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0xd4>)
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	e037      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80029b8:	f7ff fab9 	bl	8001f2e <LL_RCC_PLL_GetMainSource>
 80029bc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d003      	beq.n	80029cc <HAL_RCC_GetSysClockFreq+0x64>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d003      	beq.n	80029d2 <HAL_RCC_GetSysClockFreq+0x6a>
 80029ca:	e00d      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80029cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0xd0>)
 80029ce:	60bb      	str	r3, [r7, #8]
        break;
 80029d0:	e015      	b.n	80029fe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80029d2:	f7fe ff9f 	bl	8001914 <LL_RCC_HSE_IsEnabledDiv2>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d102      	bne.n	80029e2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80029dc:	4b16      	ldr	r3, [pc, #88]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0xd0>)
 80029de:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80029e0:	e00d      	b.n	80029fe <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80029e2:	4b16      	ldr	r3, [pc, #88]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0xd4>)
 80029e4:	60bb      	str	r3, [r7, #8]
        break;
 80029e6:	e00a      	b.n	80029fe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80029e8:	f7ff f967 	bl	8001cba <LL_RCC_MSI_GetRange>
 80029ec:	4603      	mov	r3, r0
 80029ee:	091b      	lsrs	r3, r3, #4
 80029f0:	f003 030f 	and.w	r3, r3, #15
 80029f4:	4a0f      	ldr	r2, [pc, #60]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0xcc>)
 80029f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fa:	60bb      	str	r3, [r7, #8]
        break;
 80029fc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80029fe:	f7ff fa71 	bl	8001ee4 <LL_RCC_PLL_GetN>
 8002a02:	4602      	mov	r2, r0
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	fb03 f402 	mul.w	r4, r3, r2
 8002a0a:	f7ff fa84 	bl	8001f16 <LL_RCC_PLL_GetDivider>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	091b      	lsrs	r3, r3, #4
 8002a12:	3301      	adds	r3, #1
 8002a14:	fbb4 f4f3 	udiv	r4, r4, r3
 8002a18:	f7ff fa71 	bl	8001efe <LL_RCC_PLL_GetR>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	0f5b      	lsrs	r3, r3, #29
 8002a20:	3301      	adds	r3, #1
 8002a22:	fbb4 f3f3 	udiv	r3, r4, r3
 8002a26:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002a28:	68fb      	ldr	r3, [r7, #12]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd90      	pop	{r4, r7, pc}
 8002a32:	bf00      	nop
 8002a34:	08005cc0 	.word	0x08005cc0
 8002a38:	00f42400 	.word	0x00f42400
 8002a3c:	01e84800 	.word	0x01e84800

08002a40 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a40:	b598      	push	{r3, r4, r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002a44:	f7ff ff90 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 8002a48:	4604      	mov	r4, r0
 8002a4a:	f7ff f9e9 	bl	8001e20 <LL_RCC_GetAHBPrescaler>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	091b      	lsrs	r3, r3, #4
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	4a03      	ldr	r2, [pc, #12]	@ (8002a64 <HAL_RCC_GetHCLKFreq+0x24>)
 8002a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	bd98      	pop	{r3, r4, r7, pc}
 8002a64:	08005c60 	.word	0x08005c60

08002a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a68:	b598      	push	{r3, r4, r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002a6c:	f7ff ffe8 	bl	8002a40 <HAL_RCC_GetHCLKFreq>
 8002a70:	4604      	mov	r4, r0
 8002a72:	f7ff f9ef 	bl	8001e54 <LL_RCC_GetAPB1Prescaler>
 8002a76:	4603      	mov	r3, r0
 8002a78:	0a1b      	lsrs	r3, r3, #8
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	4a04      	ldr	r2, [pc, #16]	@ (8002a90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a84:	f003 031f 	and.w	r3, r3, #31
 8002a88:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	bd98      	pop	{r3, r4, r7, pc}
 8002a90:	08005ca0 	.word	0x08005ca0

08002a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a94:	b598      	push	{r3, r4, r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002a98:	f7ff ffd2 	bl	8002a40 <HAL_RCC_GetHCLKFreq>
 8002a9c:	4604      	mov	r4, r0
 8002a9e:	f7ff f9e5 	bl	8001e6c <LL_RCC_GetAPB2Prescaler>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	0adb      	lsrs	r3, r3, #11
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	4a04      	ldr	r2, [pc, #16]	@ (8002abc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	bd98      	pop	{r3, r4, r7, pc}
 8002abc:	08005ca0 	.word	0x08005ca0

08002ac0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002ac0:	b590      	push	{r4, r7, lr}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2bb0      	cmp	r3, #176	@ 0xb0
 8002acc:	d903      	bls.n	8002ad6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002ace:	4b15      	ldr	r3, [pc, #84]	@ (8002b24 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	e007      	b.n	8002ae6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	091b      	lsrs	r3, r3, #4
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	4a11      	ldr	r2, [pc, #68]	@ (8002b24 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002ae6:	f7ff f9a7 	bl	8001e38 <LL_RCC_GetAHB4Prescaler>
 8002aea:	4603      	mov	r3, r0
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	4a0d      	ldr	r2, [pc, #52]	@ (8002b28 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afe:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	4a0a      	ldr	r2, [pc, #40]	@ (8002b2c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002b04:	fba2 2303 	umull	r2, r3, r2, r3
 8002b08:	0c9c      	lsrs	r4, r3, #18
 8002b0a:	f7fe fef5 	bl	80018f8 <HAL_PWREx_GetVoltageRange>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	4619      	mov	r1, r3
 8002b12:	4620      	mov	r0, r4
 8002b14:	f000 f80c 	bl	8002b30 <RCC_SetFlashLatency>
 8002b18:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd90      	pop	{r4, r7, pc}
 8002b22:	bf00      	nop
 8002b24:	08005cc0 	.word	0x08005cc0
 8002b28:	08005c60 	.word	0x08005c60
 8002b2c:	431bde83 	.word	0x431bde83

08002b30 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002b30:	b590      	push	{r4, r7, lr}
 8002b32:	b093      	sub	sp, #76	@ 0x4c
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002b3a:	4b37      	ldr	r3, [pc, #220]	@ (8002c18 <RCC_SetFlashLatency+0xe8>)
 8002b3c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002b40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002b46:	4a35      	ldr	r2, [pc, #212]	@ (8002c1c <RCC_SetFlashLatency+0xec>)
 8002b48:	f107 031c 	add.w	r3, r7, #28
 8002b4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002b52:	4b33      	ldr	r3, [pc, #204]	@ (8002c20 <RCC_SetFlashLatency+0xf0>)
 8002b54:	f107 040c 	add.w	r4, r7, #12
 8002b58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002b5e:	2300      	movs	r3, #0
 8002b60:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b68:	d11a      	bne.n	8002ba0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b6e:	e013      	b.n	8002b98 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002b70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	3348      	adds	r3, #72	@ 0x48
 8002b76:	443b      	add	r3, r7
 8002b78:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d807      	bhi.n	8002b92 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	3348      	adds	r3, #72	@ 0x48
 8002b88:	443b      	add	r3, r7
 8002b8a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002b8e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002b90:	e020      	b.n	8002bd4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b94:	3301      	adds	r3, #1
 8002b96:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b9a:	2b03      	cmp	r3, #3
 8002b9c:	d9e8      	bls.n	8002b70 <RCC_SetFlashLatency+0x40>
 8002b9e:	e019      	b.n	8002bd4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ba4:	e013      	b.n	8002bce <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	3348      	adds	r3, #72	@ 0x48
 8002bac:	443b      	add	r3, r7
 8002bae:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d807      	bhi.n	8002bc8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002bb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	3348      	adds	r3, #72	@ 0x48
 8002bbe:	443b      	add	r3, r7
 8002bc0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002bc4:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002bc6:	e005      	b.n	8002bd4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002bc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bca:	3301      	adds	r3, #1
 8002bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d9e8      	bls.n	8002ba6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002bd4:	4b13      	ldr	r3, [pc, #76]	@ (8002c24 <RCC_SetFlashLatency+0xf4>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f023 0207 	bic.w	r2, r3, #7
 8002bdc:	4911      	ldr	r1, [pc, #68]	@ (8002c24 <RCC_SetFlashLatency+0xf4>)
 8002bde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002be0:	4313      	orrs	r3, r2
 8002be2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002be4:	f7fe fa36 	bl	8001054 <HAL_GetTick>
 8002be8:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002bea:	e008      	b.n	8002bfe <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002bec:	f7fe fa32 	bl	8001054 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e007      	b.n	8002c0e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002bfe:	4b09      	ldr	r3, [pc, #36]	@ (8002c24 <RCC_SetFlashLatency+0xf4>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d1ef      	bne.n	8002bec <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	374c      	adds	r7, #76	@ 0x4c
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd90      	pop	{r4, r7, pc}
 8002c16:	bf00      	nop
 8002c18:	08005c34 	.word	0x08005c34
 8002c1c:	08005c44 	.word	0x08005c44
 8002c20:	08005c50 	.word	0x08005c50
 8002c24:	58004000 	.word	0x58004000

08002c28 <LL_RCC_LSE_IsEnabled>:
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002c2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d101      	bne.n	8002c40 <LL_RCC_LSE_IsEnabled+0x18>
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e000      	b.n	8002c42 <LL_RCC_LSE_IsEnabled+0x1a>
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <LL_RCC_LSE_IsReady>:
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002c50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d101      	bne.n	8002c64 <LL_RCC_LSE_IsReady+0x18>
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <LL_RCC_LSE_IsReady+0x1a>
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <LL_RCC_SetRFWKPClockSource>:
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c80:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <LL_RCC_SetSMPSClockSource>:
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002ca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002caa:	f023 0203 	bic.w	r2, r3, #3
 8002cae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <LL_RCC_SetSMPSPrescaler>:
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002ccc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002cd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <LL_RCC_SetUSARTClockSource>:
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002cf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cfc:	f023 0203 	bic.w	r2, r3, #3
 8002d00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <LL_RCC_SetLPUARTClockSource>:
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002d20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d28:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002d2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <LL_RCC_SetI2CClockSource>:
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002d4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d50:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	091b      	lsrs	r3, r3, #4
 8002d58:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	401a      	ands	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002d68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <LL_RCC_SetLPTIMClockSource>:
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002d86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	0c1b      	lsrs	r3, r3, #16
 8002d92:	041b      	lsls	r3, r3, #16
 8002d94:	43db      	mvns	r3, r3
 8002d96:	401a      	ands	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	041b      	lsls	r3, r3, #16
 8002d9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <LL_RCC_SetSAIClockSource>:
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002dba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dc2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002dc6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <LL_RCC_SetRNGClockSource>:
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002de6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dee:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002df2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <LL_RCC_SetCLK48ClockSource>:
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002e12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <LL_RCC_SetUSBClockSource>:
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff ffe3 	bl	8002e0a <LL_RCC_SetCLK48ClockSource>
}
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <LL_RCC_SetADCClockSource>:
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002e54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e5c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002e60:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <LL_RCC_SetRTCClockSource>:
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002e80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e8c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <LL_RCC_GetRTCClockSource>:
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002ea8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <LL_RCC_ForceBackupDomainReset>:
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ec2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ece:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ed2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002ed6:	bf00      	nop
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ee4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ef0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ef4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002ef8:	bf00      	nop
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <LL_RCC_PLLSAI1_Enable>:
{
 8002f02:	b480      	push	{r7}
 8002f04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002f06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f10:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f14:	6013      	str	r3, [r2, #0]
}
 8002f16:	bf00      	nop
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <LL_RCC_PLLSAI1_Disable>:
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002f24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002f32:	6013      	str	r3, [r2, #0]
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <LL_RCC_PLLSAI1_IsReady>:
{
 8002f3e:	b480      	push	{r7}
 8002f40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002f42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f50:	d101      	bne.n	8002f56 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b088      	sub	sp, #32
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002f6e:	2300      	movs	r3, #0
 8002f70:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d034      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f82:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f86:	d021      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002f88:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f8c:	d81b      	bhi.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f8e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f92:	d01d      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002f94:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f98:	d815      	bhi.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00b      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002f9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fa2:	d110      	bne.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002fa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002fae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fb2:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002fb4:	e00d      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	3304      	adds	r3, #4
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 f947 	bl	800324e <RCCEx_PLLSAI1_ConfigNP>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002fc4:	e005      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	77fb      	strb	r3, [r7, #31]
        break;
 8002fca:	e002      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002fcc:	bf00      	nop
 8002fce:	e000      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002fd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fd2:	7ffb      	ldrb	r3, [r7, #31]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d105      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff fee8 	bl	8002db2 <LL_RCC_SetSAIClockSource>
 8002fe2:	e001      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe4:	7ffb      	ldrb	r3, [r7, #31]
 8002fe6:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d046      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002ff4:	f7ff ff56 	bl	8002ea4 <LL_RCC_GetRTCClockSource>
 8002ff8:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	429a      	cmp	r2, r3
 8003002:	d03c      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003004:	f7fe fc68 	bl	80018d8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d105      	bne.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff ff30 	bl	8002e78 <LL_RCC_SetRTCClockSource>
 8003018:	e02e      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800301a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800301e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003022:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003024:	f7ff ff4b 	bl	8002ebe <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003028:	f7ff ff5a 	bl	8002ee0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003036:	4313      	orrs	r3, r2
 8003038:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800303a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003044:	f7ff fdf0 	bl	8002c28 <LL_RCC_LSE_IsEnabled>
 8003048:	4603      	mov	r3, r0
 800304a:	2b01      	cmp	r3, #1
 800304c:	d114      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800304e:	f7fe f801 	bl	8001054 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003054:	e00b      	b.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003056:	f7fd fffd 	bl	8001054 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003064:	4293      	cmp	r3, r2
 8003066:	d902      	bls.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	77fb      	strb	r3, [r7, #31]
              break;
 800306c:	e004      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800306e:	f7ff fded 	bl	8002c4c <LL_RCC_LSE_IsReady>
 8003072:	4603      	mov	r3, r0
 8003074:	2b01      	cmp	r3, #1
 8003076:	d1ee      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003078:	7ffb      	ldrb	r3, [r7, #31]
 800307a:	77bb      	strb	r3, [r7, #30]
 800307c:	e001      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800307e:	7ffb      	ldrb	r3, [r7, #31]
 8003080:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d004      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff fe2a 	bl	8002cec <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d004      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff fe35 	bl	8002d18 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d004      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff fe5d 	bl	8002d7e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0320 	and.w	r3, r3, #32
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d004      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff fe52 	bl	8002d7e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d004      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff fe2a 	bl	8002d44 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d004      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff fe1f 	bl	8002d44 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800310e:	2b00      	cmp	r3, #0
 8003110:	d022      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fe8d 	bl	8002e36 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003120:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003124:	d107      	bne.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003126:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003130:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003134:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800313a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800313e:	d10b      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3304      	adds	r3, #4
 8003144:	4618      	mov	r0, r3
 8003146:	f000 f8dd 	bl	8003304 <RCCEx_PLLSAI1_ConfigNQ>
 800314a:	4603      	mov	r3, r0
 800314c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800314e:	7ffb      	ldrb	r3, [r7, #31]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003154:	7ffb      	ldrb	r3, [r7, #31]
 8003156:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003160:	2b00      	cmp	r3, #0
 8003162:	d02b      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003168:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800316c:	d008      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003172:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003176:	d003      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800317c:	2b00      	cmp	r3, #0
 800317e:	d105      	bne.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff fe2a 	bl	8002dde <LL_RCC_SetRNGClockSource>
 800318a:	e00a      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003190:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	2000      	movs	r0, #0
 8003198:	f7ff fe21 	bl	8002dde <LL_RCC_SetRNGClockSource>
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f7ff fe34 	bl	8002e0a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80031aa:	d107      	bne.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80031ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031ba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d022      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff fe3d 	bl	8002e4c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031da:	d107      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80031dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031ea:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031f4:	d10b      	bne.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	3304      	adds	r3, #4
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 f8dd 	bl	80033ba <RCCEx_PLLSAI1_ConfigNR>
 8003200:	4603      	mov	r3, r0
 8003202:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003204:	7ffb      	ldrb	r3, [r7, #31]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800320a:	7ffb      	ldrb	r3, [r7, #31]
 800320c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d004      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff fd26 	bl	8002c70 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d009      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fd45 	bl	8002cc4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff fd2c 	bl	8002c9c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003244:	7fbb      	ldrb	r3, [r7, #30]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3720      	adds	r7, #32
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b084      	sub	sp, #16
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003256:	2300      	movs	r3, #0
 8003258:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800325a:	f7ff fe61 	bl	8002f20 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800325e:	f7fd fef9 	bl	8001054 <HAL_GetTick>
 8003262:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003264:	e009      	b.n	800327a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003266:	f7fd fef5 	bl	8001054 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d902      	bls.n	800327a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	73fb      	strb	r3, [r7, #15]
      break;
 8003278:	e004      	b.n	8003284 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800327a:	f7ff fe60 	bl	8002f3e <LL_RCC_PLLSAI1_IsReady>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1f0      	bne.n	8003266 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d137      	bne.n	80032fa <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800328a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	021b      	lsls	r3, r3, #8
 800329a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800329e:	4313      	orrs	r3, r2
 80032a0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80032a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032b4:	4313      	orrs	r3, r2
 80032b6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80032b8:	f7ff fe23 	bl	8002f02 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032bc:	f7fd feca 	bl	8001054 <HAL_GetTick>
 80032c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80032c2:	e009      	b.n	80032d8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032c4:	f7fd fec6 	bl	8001054 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d902      	bls.n	80032d8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	73fb      	strb	r3, [r7, #15]
        break;
 80032d6:	e004      	b.n	80032e2 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80032d8:	f7ff fe31 	bl	8002f3e <LL_RCC_PLLSAI1_IsReady>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d1f0      	bne.n	80032c4 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80032e2:	7bfb      	ldrb	r3, [r7, #15]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d108      	bne.n	80032fa <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80032e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032ec:	691a      	ldr	r2, [r3, #16]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032f6:	4313      	orrs	r3, r2
 80032f8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80032fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003310:	f7ff fe06 	bl	8002f20 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003314:	f7fd fe9e 	bl	8001054 <HAL_GetTick>
 8003318:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800331a:	e009      	b.n	8003330 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800331c:	f7fd fe9a 	bl	8001054 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d902      	bls.n	8003330 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	73fb      	strb	r3, [r7, #15]
      break;
 800332e:	e004      	b.n	800333a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003330:	f7ff fe05 	bl	8002f3e <LL_RCC_PLLSAI1_IsReady>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d137      	bne.n	80033b0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003340:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	021b      	lsls	r3, r3, #8
 8003350:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003354:	4313      	orrs	r3, r2
 8003356:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003358:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800336a:	4313      	orrs	r3, r2
 800336c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800336e:	f7ff fdc8 	bl	8002f02 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003372:	f7fd fe6f 	bl	8001054 <HAL_GetTick>
 8003376:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003378:	e009      	b.n	800338e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800337a:	f7fd fe6b 	bl	8001054 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d902      	bls.n	800338e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	73fb      	strb	r3, [r7, #15]
        break;
 800338c:	e004      	b.n	8003398 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800338e:	f7ff fdd6 	bl	8002f3e <LL_RCC_PLLSAI1_IsReady>
 8003392:	4603      	mov	r3, r0
 8003394:	2b01      	cmp	r3, #1
 8003396:	d1f0      	bne.n	800337a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003398:	7bfb      	ldrb	r3, [r7, #15]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d108      	bne.n	80033b0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800339e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033a2:	691a      	ldr	r2, [r3, #16]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033ac:	4313      	orrs	r3, r2
 80033ae:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b084      	sub	sp, #16
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033c2:	2300      	movs	r3, #0
 80033c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80033c6:	f7ff fdab 	bl	8002f20 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80033ca:	f7fd fe43 	bl	8001054 <HAL_GetTick>
 80033ce:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80033d0:	e009      	b.n	80033e6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033d2:	f7fd fe3f 	bl	8001054 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d902      	bls.n	80033e6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	73fb      	strb	r3, [r7, #15]
      break;
 80033e4:	e004      	b.n	80033f0 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80033e6:	f7ff fdaa 	bl	8002f3e <LL_RCC_PLLSAI1_IsReady>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1f0      	bne.n	80033d2 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d137      	bne.n	8003466 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80033f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	021b      	lsls	r3, r3, #8
 8003406:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800340a:	4313      	orrs	r3, r2
 800340c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800340e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003420:	4313      	orrs	r3, r2
 8003422:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003424:	f7ff fd6d 	bl	8002f02 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003428:	f7fd fe14 	bl	8001054 <HAL_GetTick>
 800342c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800342e:	e009      	b.n	8003444 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003430:	f7fd fe10 	bl	8001054 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d902      	bls.n	8003444 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	73fb      	strb	r3, [r7, #15]
        break;
 8003442:	e004      	b.n	800344e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003444:	f7ff fd7b 	bl	8002f3e <LL_RCC_PLLSAI1_IsReady>
 8003448:	4603      	mov	r3, r0
 800344a:	2b01      	cmp	r3, #1
 800344c:	d1f0      	bne.n	8003430 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800344e:	7bfb      	ldrb	r3, [r7, #15]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d108      	bne.n	8003466 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003454:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003458:	691a      	ldr	r2, [r3, #16]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003462:	4313      	orrs	r3, r2
 8003464:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003466:	7bfb      	ldrb	r3, [r7, #15]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e095      	b.n	80035ae <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003486:	2b00      	cmp	r3, #0
 8003488:	d108      	bne.n	800349c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003492:	d009      	beq.n	80034a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	61da      	str	r2, [r3, #28]
 800349a:	e005      	b.n	80034a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d106      	bne.n	80034c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7fd fab8 	bl	8000a38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034e8:	d902      	bls.n	80034f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	e002      	b.n	80034f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80034f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80034fe:	d007      	beq.n	8003510 <HAL_SPI_Init+0xa0>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003508:	d002      	beq.n	8003510 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003520:	431a      	orrs	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	431a      	orrs	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003552:	ea42 0103 	orr.w	r1, r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800355a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	0c1b      	lsrs	r3, r3, #16
 800356c:	f003 0204 	and.w	r2, r3, #4
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003574:	f003 0310 	and.w	r3, r3, #16
 8003578:	431a      	orrs	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800358c:	ea42 0103 	orr.w	r1, r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b082      	sub	sp, #8
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e01a      	b.n	80035fe <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035de:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7fd fa61 	bl	8000aa8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b088      	sub	sp, #32
 800360a:	af02      	add	r7, sp, #8
 800360c:	60f8      	str	r0, [r7, #12]
 800360e:	60b9      	str	r1, [r7, #8]
 8003610:	603b      	str	r3, [r7, #0]
 8003612:	4613      	mov	r3, r2
 8003614:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b01      	cmp	r3, #1
 8003620:	d001      	beq.n	8003626 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003622:	2302      	movs	r3, #2
 8003624:	e123      	b.n	800386e <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d002      	beq.n	8003632 <HAL_SPI_Receive+0x2c>
 800362c:	88fb      	ldrh	r3, [r7, #6]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e11b      	b.n	800386e <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800363e:	d112      	bne.n	8003666 <HAL_SPI_Receive+0x60>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10e      	bne.n	8003666 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2204      	movs	r2, #4
 800364c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003650:	88fa      	ldrh	r2, [r7, #6]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	4613      	mov	r3, r2
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	68b9      	ldr	r1, [r7, #8]
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 f90a 	bl	8003876 <HAL_SPI_TransmitReceive>
 8003662:	4603      	mov	r3, r0
 8003664:	e103      	b.n	800386e <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003666:	f7fd fcf5 	bl	8001054 <HAL_GetTick>
 800366a:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003672:	2b01      	cmp	r3, #1
 8003674:	d101      	bne.n	800367a <HAL_SPI_Receive+0x74>
 8003676:	2302      	movs	r3, #2
 8003678:	e0f9      	b.n	800386e <HAL_SPI_Receive+0x268>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2204      	movs	r2, #4
 8003686:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	88fa      	ldrh	r2, [r7, #6]
 800369a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	88fa      	ldrh	r2, [r7, #6]
 80036a2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80036cc:	d908      	bls.n	80036e0 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80036dc:	605a      	str	r2, [r3, #4]
 80036de:	e007      	b.n	80036f0 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80036ee:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036f8:	d10f      	bne.n	800371a <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003708:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003718:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003724:	2b40      	cmp	r3, #64	@ 0x40
 8003726:	d007      	beq.n	8003738 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003736:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003740:	d875      	bhi.n	800382e <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003742:	e037      	b.n	80037b4 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b01      	cmp	r3, #1
 8003750:	d117      	bne.n	8003782 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f103 020c 	add.w	r2, r3, #12
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375e:	7812      	ldrb	r2, [r2, #0]
 8003760:	b2d2      	uxtb	r2, r2
 8003762:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003774:	b29b      	uxth	r3, r3
 8003776:	3b01      	subs	r3, #1
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003780:	e018      	b.n	80037b4 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003782:	f7fd fc67 	bl	8001054 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	429a      	cmp	r2, r3
 8003790:	d803      	bhi.n	800379a <HAL_SPI_Receive+0x194>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003798:	d102      	bne.n	80037a0 <HAL_SPI_Receive+0x19a>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d109      	bne.n	80037b4 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e05c      	b.n	800386e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1c1      	bne.n	8003744 <HAL_SPI_Receive+0x13e>
 80037c0:	e03b      	b.n	800383a <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d115      	bne.n	80037fc <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68da      	ldr	r2, [r3, #12]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037da:	b292      	uxth	r2, r2
 80037dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e2:	1c9a      	adds	r2, r3, #2
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80037fa:	e018      	b.n	800382e <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037fc:	f7fd fc2a 	bl	8001054 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	429a      	cmp	r2, r3
 800380a:	d803      	bhi.n	8003814 <HAL_SPI_Receive+0x20e>
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003812:	d102      	bne.n	800381a <HAL_SPI_Receive+0x214>
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d109      	bne.n	800382e <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e01f      	b.n	800386e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003834:	b29b      	uxth	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1c3      	bne.n	80037c2 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	6839      	ldr	r1, [r7, #0]
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 fc76 	bl	8004130 <SPI_EndRxTransaction>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d002      	beq.n	8003850 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2220      	movs	r2, #32
 800384e:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e000      	b.n	800386e <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800386c:	2300      	movs	r3, #0
  }
}
 800386e:	4618      	mov	r0, r3
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b08a      	sub	sp, #40	@ 0x28
 800387a:	af00      	add	r7, sp, #0
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	607a      	str	r2, [r7, #4]
 8003882:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003884:	2301      	movs	r3, #1
 8003886:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003888:	f7fd fbe4 	bl	8001054 <HAL_GetTick>
 800388c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003894:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800389c:	887b      	ldrh	r3, [r7, #2]
 800389e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80038a0:	887b      	ldrh	r3, [r7, #2]
 80038a2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038a4:	7ffb      	ldrb	r3, [r7, #31]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d00c      	beq.n	80038c4 <HAL_SPI_TransmitReceive+0x4e>
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038b0:	d106      	bne.n	80038c0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d102      	bne.n	80038c0 <HAL_SPI_TransmitReceive+0x4a>
 80038ba:	7ffb      	ldrb	r3, [r7, #31]
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d001      	beq.n	80038c4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80038c0:	2302      	movs	r3, #2
 80038c2:	e1f3      	b.n	8003cac <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d005      	beq.n	80038d6 <HAL_SPI_TransmitReceive+0x60>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d002      	beq.n	80038d6 <HAL_SPI_TransmitReceive+0x60>
 80038d0:	887b      	ldrh	r3, [r7, #2]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e1e8      	b.n	8003cac <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d101      	bne.n	80038e8 <HAL_SPI_TransmitReceive+0x72>
 80038e4:	2302      	movs	r3, #2
 80038e6:	e1e1      	b.n	8003cac <HAL_SPI_TransmitReceive+0x436>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d003      	beq.n	8003904 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2205      	movs	r2, #5
 8003900:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	887a      	ldrh	r2, [r7, #2]
 8003914:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	887a      	ldrh	r2, [r7, #2]
 800391c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	887a      	ldrh	r2, [r7, #2]
 800392a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	887a      	ldrh	r2, [r7, #2]
 8003930:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003946:	d802      	bhi.n	800394e <HAL_SPI_TransmitReceive+0xd8>
 8003948:	8abb      	ldrh	r3, [r7, #20]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d908      	bls.n	8003960 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800395c:	605a      	str	r2, [r3, #4]
 800395e:	e007      	b.n	8003970 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800396e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800397a:	2b40      	cmp	r3, #64	@ 0x40
 800397c:	d007      	beq.n	800398e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800398c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003996:	f240 8083 	bls.w	8003aa0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <HAL_SPI_TransmitReceive+0x132>
 80039a2:	8afb      	ldrh	r3, [r7, #22]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d16f      	bne.n	8003a88 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ac:	881a      	ldrh	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b8:	1c9a      	adds	r2, r3, #2
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039cc:	e05c      	b.n	8003a88 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d11b      	bne.n	8003a14 <HAL_SPI_TransmitReceive+0x19e>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d016      	beq.n	8003a14 <HAL_SPI_TransmitReceive+0x19e>
 80039e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d113      	bne.n	8003a14 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f0:	881a      	ldrh	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039fc:	1c9a      	adds	r2, r3, #2
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d11c      	bne.n	8003a5c <HAL_SPI_TransmitReceive+0x1e6>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d016      	beq.n	8003a5c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a38:	b292      	uxth	r2, r2
 8003a3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a40:	1c9a      	adds	r2, r3, #2
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a5c:	f7fd fafa 	bl	8001054 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d80d      	bhi.n	8003a88 <HAL_SPI_TransmitReceive+0x212>
 8003a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a72:	d009      	beq.n	8003a88 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e111      	b.n	8003cac <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d19d      	bne.n	80039ce <HAL_SPI_TransmitReceive+0x158>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d197      	bne.n	80039ce <HAL_SPI_TransmitReceive+0x158>
 8003a9e:	e0e5      	b.n	8003c6c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_SPI_TransmitReceive+0x23a>
 8003aa8:	8afb      	ldrh	r3, [r7, #22]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	f040 80d1 	bne.w	8003c52 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d912      	bls.n	8003ae0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003abe:	881a      	ldrh	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aca:	1c9a      	adds	r2, r3, #2
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	3b02      	subs	r3, #2
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ade:	e0b8      	b.n	8003c52 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	330c      	adds	r3, #12
 8003aea:	7812      	ldrb	r2, [r2, #0]
 8003aec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af2:	1c5a      	adds	r2, r3, #1
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b06:	e0a4      	b.n	8003c52 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d134      	bne.n	8003b80 <HAL_SPI_TransmitReceive+0x30a>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d02f      	beq.n	8003b80 <HAL_SPI_TransmitReceive+0x30a>
 8003b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d12c      	bne.n	8003b80 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d912      	bls.n	8003b56 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b34:	881a      	ldrh	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b40:	1c9a      	adds	r2, r3, #2
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	3b02      	subs	r3, #2
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b54:	e012      	b.n	8003b7c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	330c      	adds	r3, #12
 8003b60:	7812      	ldrb	r2, [r2, #0]
 8003b62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d148      	bne.n	8003c20 <HAL_SPI_TransmitReceive+0x3aa>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d042      	beq.n	8003c20 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d923      	bls.n	8003bee <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68da      	ldr	r2, [r3, #12]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb0:	b292      	uxth	r2, r2
 8003bb2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb8:	1c9a      	adds	r2, r3, #2
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	3b02      	subs	r3, #2
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d81f      	bhi.n	8003c1c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003bea:	605a      	str	r2, [r3, #4]
 8003bec:	e016      	b.n	8003c1c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f103 020c 	add.w	r2, r3, #12
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfa:	7812      	ldrb	r2, [r2, #0]
 8003bfc:	b2d2      	uxtb	r2, r2
 8003bfe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c04:	1c5a      	adds	r2, r3, #1
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	3b01      	subs	r3, #1
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c20:	f7fd fa18 	bl	8001054 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d803      	bhi.n	8003c38 <HAL_SPI_TransmitReceive+0x3c2>
 8003c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c36:	d102      	bne.n	8003c3e <HAL_SPI_TransmitReceive+0x3c8>
 8003c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d109      	bne.n	8003c52 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e02c      	b.n	8003cac <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f47f af55 	bne.w	8003b08 <HAL_SPI_TransmitReceive+0x292>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f47f af4e 	bne.w	8003b08 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c6c:	6a3a      	ldr	r2, [r7, #32]
 8003c6e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 fab5 	bl	80041e0 <SPI_EndRxTxTransaction>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d008      	beq.n	8003c8e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e00e      	b.n	8003cac <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003caa:	2300      	movs	r3, #0
  }
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3728      	adds	r7, #40	@ 0x28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	099b      	lsrs	r3, r3, #6
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10f      	bne.n	8003cf8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	099b      	lsrs	r3, r3, #6
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d004      	beq.n	8003cf8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	4798      	blx	r3
    return;
 8003cf6:	e0d7      	b.n	8003ea8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	085b      	lsrs	r3, r3, #1
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00a      	beq.n	8003d1a <HAL_SPI_IRQHandler+0x66>
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	09db      	lsrs	r3, r3, #7
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d004      	beq.n	8003d1a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	4798      	blx	r3
    return;
 8003d18:	e0c6      	b.n	8003ea8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	095b      	lsrs	r3, r3, #5
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10c      	bne.n	8003d40 <HAL_SPI_IRQHandler+0x8c>
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	099b      	lsrs	r3, r3, #6
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d106      	bne.n	8003d40 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	0a1b      	lsrs	r3, r3, #8
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 80b4 	beq.w	8003ea8 <HAL_SPI_IRQHandler+0x1f4>
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	095b      	lsrs	r3, r3, #5
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 80ad 	beq.w	8003ea8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	099b      	lsrs	r3, r3, #6
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d023      	beq.n	8003da2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	d011      	beq.n	8003d8a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d6a:	f043 0204 	orr.w	r2, r3, #4
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d72:	2300      	movs	r3, #0
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	e00b      	b.n	8003da2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	613b      	str	r3, [r7, #16]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	693b      	ldr	r3, [r7, #16]
        return;
 8003da0:	e082      	b.n	8003ea8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	095b      	lsrs	r3, r3, #5
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d014      	beq.n	8003dd8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003db2:	f043 0201 	orr.w	r2, r3, #1
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	0a1b      	lsrs	r3, r3, #8
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00c      	beq.n	8003dfe <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003de8:	f043 0208 	orr.w	r2, r3, #8
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003df0:	2300      	movs	r3, #0
 8003df2:	60bb      	str	r3, [r7, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	60bb      	str	r3, [r7, #8]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d04f      	beq.n	8003ea6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e14:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d104      	bne.n	8003e32 <HAL_SPI_IRQHandler+0x17e>
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d034      	beq.n	8003e9c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0203 	bic.w	r2, r2, #3
 8003e40:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d011      	beq.n	8003e6e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e4e:	4a18      	ldr	r2, [pc, #96]	@ (8003eb0 <HAL_SPI_IRQHandler+0x1fc>)
 8003e50:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fd fa79 	bl	800134e <HAL_DMA_Abort_IT>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d005      	beq.n	8003e6e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e66:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d016      	beq.n	8003ea4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e7a:	4a0d      	ldr	r2, [pc, #52]	@ (8003eb0 <HAL_SPI_IRQHandler+0x1fc>)
 8003e7c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fd fa63 	bl	800134e <HAL_DMA_Abort_IT>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e92:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8003e9a:	e003      	b.n	8003ea4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f809 	bl	8003eb4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003ea2:	e000      	b.n	8003ea6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003ea4:	bf00      	nop
    return;
 8003ea6:	bf00      	nop
  }
}
 8003ea8:	3720      	adds	r7, #32
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	08003ec9 	.word	0x08003ec9

08003eb4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f7ff ffe5 	bl	8003eb4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003eea:	bf00      	nop
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	603b      	str	r3, [r7, #0]
 8003f00:	4613      	mov	r3, r2
 8003f02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f04:	f7fd f8a6 	bl	8001054 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0c:	1a9b      	subs	r3, r3, r2
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	4413      	add	r3, r2
 8003f12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f14:	f7fd f89e 	bl	8001054 <HAL_GetTick>
 8003f18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f1a:	4b39      	ldr	r3, [pc, #228]	@ (8004000 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	015b      	lsls	r3, r3, #5
 8003f20:	0d1b      	lsrs	r3, r3, #20
 8003f22:	69fa      	ldr	r2, [r7, #28]
 8003f24:	fb02 f303 	mul.w	r3, r2, r3
 8003f28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f2a:	e054      	b.n	8003fd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f32:	d050      	beq.n	8003fd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f34:	f7fd f88e 	bl	8001054 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	69fa      	ldr	r2, [r7, #28]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d902      	bls.n	8003f4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d13d      	bne.n	8003fc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f62:	d111      	bne.n	8003f88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f6c:	d004      	beq.n	8003f78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f76:	d107      	bne.n	8003f88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f90:	d10f      	bne.n	8003fb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e017      	b.n	8003ff6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	bf0c      	ite	eq
 8003fe6:	2301      	moveq	r3, #1
 8003fe8:	2300      	movne	r3, #0
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	461a      	mov	r2, r3
 8003fee:	79fb      	ldrb	r3, [r7, #7]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d19b      	bne.n	8003f2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3720      	adds	r7, #32
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	20000008 	.word	0x20000008

08004004 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08a      	sub	sp, #40	@ 0x28
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
 8004010:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004012:	2300      	movs	r3, #0
 8004014:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004016:	f7fd f81d 	bl	8001054 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401e:	1a9b      	subs	r3, r3, r2
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	4413      	add	r3, r2
 8004024:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004026:	f7fd f815 	bl	8001054 <HAL_GetTick>
 800402a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	330c      	adds	r3, #12
 8004032:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004034:	4b3d      	ldr	r3, [pc, #244]	@ (800412c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	4613      	mov	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	00da      	lsls	r2, r3, #3
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	0d1b      	lsrs	r3, r3, #20
 8004044:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004046:	fb02 f303 	mul.w	r3, r2, r3
 800404a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800404c:	e060      	b.n	8004110 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004054:	d107      	bne.n	8004066 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d104      	bne.n	8004066 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	b2db      	uxtb	r3, r3
 8004062:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004064:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800406c:	d050      	beq.n	8004110 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800406e:	f7fc fff1 	bl	8001054 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800407a:	429a      	cmp	r2, r3
 800407c:	d902      	bls.n	8004084 <SPI_WaitFifoStateUntilTimeout+0x80>
 800407e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004080:	2b00      	cmp	r3, #0
 8004082:	d13d      	bne.n	8004100 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004092:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800409c:	d111      	bne.n	80040c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040a6:	d004      	beq.n	80040b2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040b0:	d107      	bne.n	80040c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040c0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040ca:	d10f      	bne.n	80040ec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e010      	b.n	8004122 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004106:	2300      	movs	r3, #0
 8004108:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	3b01      	subs	r3, #1
 800410e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689a      	ldr	r2, [r3, #8]
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	4013      	ands	r3, r2
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	429a      	cmp	r2, r3
 800411e:	d196      	bne.n	800404e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3728      	adds	r7, #40	@ 0x28
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	20000008 	.word	0x20000008

08004130 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af02      	add	r7, sp, #8
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004144:	d111      	bne.n	800416a <SPI_EndRxTransaction+0x3a>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800414e:	d004      	beq.n	800415a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004158:	d107      	bne.n	800416a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004168:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2200      	movs	r2, #0
 8004172:	2180      	movs	r1, #128	@ 0x80
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f7ff febd 	bl	8003ef4 <SPI_WaitFlagStateUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d007      	beq.n	8004190 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004184:	f043 0220 	orr.w	r2, r3, #32
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e023      	b.n	80041d8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004198:	d11d      	bne.n	80041d6 <SPI_EndRxTransaction+0xa6>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041a2:	d004      	beq.n	80041ae <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041ac:	d113      	bne.n	80041d6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f7ff ff22 	bl	8004004 <SPI_WaitFifoStateUntilTimeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d007      	beq.n	80041d6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ca:	f043 0220 	orr.w	r2, r3, #32
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e000      	b.n	80041d8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af02      	add	r7, sp, #8
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f7ff ff03 	bl	8004004 <SPI_WaitFifoStateUntilTimeout>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d007      	beq.n	8004214 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004208:	f043 0220 	orr.w	r2, r3, #32
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e027      	b.n	8004264 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2200      	movs	r2, #0
 800421c:	2180      	movs	r1, #128	@ 0x80
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f7ff fe68 	bl	8003ef4 <SPI_WaitFlagStateUntilTimeout>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d007      	beq.n	800423a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800422e:	f043 0220 	orr.w	r2, r3, #32
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e014      	b.n	8004264 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	2200      	movs	r2, #0
 8004242:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f7ff fedc 	bl	8004004 <SPI_WaitFifoStateUntilTimeout>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d007      	beq.n	8004262 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004256:	f043 0220 	orr.w	r2, r3, #32
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e000      	b.n	8004264 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <LL_RCC_GetUSARTClockSource>:
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004274:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004278:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4013      	ands	r3, r2
}
 8004280:	4618      	mov	r0, r3
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <LL_RCC_GetLPUARTClockSource>:
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004294:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004298:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4013      	ands	r3, r2
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e042      	b.n	8004344 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d106      	bne.n	80042d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f83b 	bl	800434c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2224      	movs	r2, #36	@ 0x24
 80042da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0201 	bic.w	r2, r2, #1
 80042ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d002      	beq.n	80042fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 fa5a 	bl	80047b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f82f 	bl	8004360 <UART_SetConfig>
 8004302:	4603      	mov	r3, r0
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e01b      	b.n	8004344 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800431a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800432a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f042 0201 	orr.w	r2, r2, #1
 800433a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 fad9 	bl	80048f4 <UART_CheckIdleState>
 8004342:	4603      	mov	r3, r0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004364:	b08c      	sub	sp, #48	@ 0x30
 8004366:	af00      	add	r7, sp, #0
 8004368:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800436a:	2300      	movs	r3, #0
 800436c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	431a      	orrs	r2, r3
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	431a      	orrs	r2, r3
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	4313      	orrs	r3, r2
 8004386:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	4baf      	ldr	r3, [pc, #700]	@ (800464c <UART_SetConfig+0x2ec>)
 8004390:	4013      	ands	r3, r2
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	6812      	ldr	r2, [r2, #0]
 8004396:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004398:	430b      	orrs	r3, r1
 800439a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4aa4      	ldr	r2, [pc, #656]	@ (8004650 <UART_SetConfig+0x2f0>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d004      	beq.n	80043cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043c8:	4313      	orrs	r3, r2
 80043ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80043d6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	6812      	ldr	r2, [r2, #0]
 80043de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043e0:	430b      	orrs	r3, r1
 80043e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ea:	f023 010f 	bic.w	r1, r3, #15
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a95      	ldr	r2, [pc, #596]	@ (8004654 <UART_SetConfig+0x2f4>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d125      	bne.n	8004450 <UART_SetConfig+0xf0>
 8004404:	2003      	movs	r0, #3
 8004406:	f7ff ff31 	bl	800426c <LL_RCC_GetUSARTClockSource>
 800440a:	4603      	mov	r3, r0
 800440c:	2b03      	cmp	r3, #3
 800440e:	d81b      	bhi.n	8004448 <UART_SetConfig+0xe8>
 8004410:	a201      	add	r2, pc, #4	@ (adr r2, 8004418 <UART_SetConfig+0xb8>)
 8004412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004416:	bf00      	nop
 8004418:	08004429 	.word	0x08004429
 800441c:	08004439 	.word	0x08004439
 8004420:	08004431 	.word	0x08004431
 8004424:	08004441 	.word	0x08004441
 8004428:	2301      	movs	r3, #1
 800442a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800442e:	e042      	b.n	80044b6 <UART_SetConfig+0x156>
 8004430:	2302      	movs	r3, #2
 8004432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004436:	e03e      	b.n	80044b6 <UART_SetConfig+0x156>
 8004438:	2304      	movs	r3, #4
 800443a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800443e:	e03a      	b.n	80044b6 <UART_SetConfig+0x156>
 8004440:	2308      	movs	r3, #8
 8004442:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004446:	e036      	b.n	80044b6 <UART_SetConfig+0x156>
 8004448:	2310      	movs	r3, #16
 800444a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800444e:	e032      	b.n	80044b6 <UART_SetConfig+0x156>
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a7e      	ldr	r2, [pc, #504]	@ (8004650 <UART_SetConfig+0x2f0>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d12a      	bne.n	80044b0 <UART_SetConfig+0x150>
 800445a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800445e:	f7ff ff15 	bl	800428c <LL_RCC_GetLPUARTClockSource>
 8004462:	4603      	mov	r3, r0
 8004464:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004468:	d01a      	beq.n	80044a0 <UART_SetConfig+0x140>
 800446a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800446e:	d81b      	bhi.n	80044a8 <UART_SetConfig+0x148>
 8004470:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004474:	d00c      	beq.n	8004490 <UART_SetConfig+0x130>
 8004476:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800447a:	d815      	bhi.n	80044a8 <UART_SetConfig+0x148>
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <UART_SetConfig+0x128>
 8004480:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004484:	d008      	beq.n	8004498 <UART_SetConfig+0x138>
 8004486:	e00f      	b.n	80044a8 <UART_SetConfig+0x148>
 8004488:	2300      	movs	r3, #0
 800448a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800448e:	e012      	b.n	80044b6 <UART_SetConfig+0x156>
 8004490:	2302      	movs	r3, #2
 8004492:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004496:	e00e      	b.n	80044b6 <UART_SetConfig+0x156>
 8004498:	2304      	movs	r3, #4
 800449a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800449e:	e00a      	b.n	80044b6 <UART_SetConfig+0x156>
 80044a0:	2308      	movs	r3, #8
 80044a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044a6:	e006      	b.n	80044b6 <UART_SetConfig+0x156>
 80044a8:	2310      	movs	r3, #16
 80044aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044ae:	e002      	b.n	80044b6 <UART_SetConfig+0x156>
 80044b0:	2310      	movs	r3, #16
 80044b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a65      	ldr	r2, [pc, #404]	@ (8004650 <UART_SetConfig+0x2f0>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	f040 8097 	bne.w	80045f0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d823      	bhi.n	8004512 <UART_SetConfig+0x1b2>
 80044ca:	a201      	add	r2, pc, #4	@ (adr r2, 80044d0 <UART_SetConfig+0x170>)
 80044cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d0:	080044f5 	.word	0x080044f5
 80044d4:	08004513 	.word	0x08004513
 80044d8:	080044fd 	.word	0x080044fd
 80044dc:	08004513 	.word	0x08004513
 80044e0:	08004503 	.word	0x08004503
 80044e4:	08004513 	.word	0x08004513
 80044e8:	08004513 	.word	0x08004513
 80044ec:	08004513 	.word	0x08004513
 80044f0:	0800450b 	.word	0x0800450b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044f4:	f7fe fab8 	bl	8002a68 <HAL_RCC_GetPCLK1Freq>
 80044f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80044fa:	e010      	b.n	800451e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044fc:	4b56      	ldr	r3, [pc, #344]	@ (8004658 <UART_SetConfig+0x2f8>)
 80044fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004500:	e00d      	b.n	800451e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004502:	f7fe fa31 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 8004506:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004508:	e009      	b.n	800451e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800450a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800450e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004510:	e005      	b.n	800451e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800451c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800451e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 812b 	beq.w	800477c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452a:	4a4c      	ldr	r2, [pc, #304]	@ (800465c <UART_SetConfig+0x2fc>)
 800452c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004530:	461a      	mov	r2, r3
 8004532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004534:	fbb3 f3f2 	udiv	r3, r3, r2
 8004538:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	4613      	mov	r3, r2
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	4413      	add	r3, r2
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	429a      	cmp	r2, r3
 8004548:	d305      	bcc.n	8004556 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	429a      	cmp	r2, r3
 8004554:	d903      	bls.n	800455e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800455c:	e10e      	b.n	800477c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800455e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004560:	2200      	movs	r2, #0
 8004562:	60bb      	str	r3, [r7, #8]
 8004564:	60fa      	str	r2, [r7, #12]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456a:	4a3c      	ldr	r2, [pc, #240]	@ (800465c <UART_SetConfig+0x2fc>)
 800456c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004570:	b29b      	uxth	r3, r3
 8004572:	2200      	movs	r2, #0
 8004574:	603b      	str	r3, [r7, #0]
 8004576:	607a      	str	r2, [r7, #4]
 8004578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800457c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004580:	f7fb fe4e 	bl	8000220 <__aeabi_uldivmod>
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	4610      	mov	r0, r2
 800458a:	4619      	mov	r1, r3
 800458c:	f04f 0200 	mov.w	r2, #0
 8004590:	f04f 0300 	mov.w	r3, #0
 8004594:	020b      	lsls	r3, r1, #8
 8004596:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800459a:	0202      	lsls	r2, r0, #8
 800459c:	6979      	ldr	r1, [r7, #20]
 800459e:	6849      	ldr	r1, [r1, #4]
 80045a0:	0849      	lsrs	r1, r1, #1
 80045a2:	2000      	movs	r0, #0
 80045a4:	460c      	mov	r4, r1
 80045a6:	4605      	mov	r5, r0
 80045a8:	eb12 0804 	adds.w	r8, r2, r4
 80045ac:	eb43 0905 	adc.w	r9, r3, r5
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	469a      	mov	sl, r3
 80045b8:	4693      	mov	fp, r2
 80045ba:	4652      	mov	r2, sl
 80045bc:	465b      	mov	r3, fp
 80045be:	4640      	mov	r0, r8
 80045c0:	4649      	mov	r1, r9
 80045c2:	f7fb fe2d 	bl	8000220 <__aeabi_uldivmod>
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	4613      	mov	r3, r2
 80045cc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045d4:	d308      	bcc.n	80045e8 <UART_SetConfig+0x288>
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045dc:	d204      	bcs.n	80045e8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6a3a      	ldr	r2, [r7, #32]
 80045e4:	60da      	str	r2, [r3, #12]
 80045e6:	e0c9      	b.n	800477c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80045ee:	e0c5      	b.n	800477c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045f8:	d16d      	bne.n	80046d6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80045fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80045fe:	3b01      	subs	r3, #1
 8004600:	2b07      	cmp	r3, #7
 8004602:	d82d      	bhi.n	8004660 <UART_SetConfig+0x300>
 8004604:	a201      	add	r2, pc, #4	@ (adr r2, 800460c <UART_SetConfig+0x2ac>)
 8004606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460a:	bf00      	nop
 800460c:	0800462d 	.word	0x0800462d
 8004610:	08004635 	.word	0x08004635
 8004614:	08004661 	.word	0x08004661
 8004618:	0800463b 	.word	0x0800463b
 800461c:	08004661 	.word	0x08004661
 8004620:	08004661 	.word	0x08004661
 8004624:	08004661 	.word	0x08004661
 8004628:	08004643 	.word	0x08004643
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800462c:	f7fe fa32 	bl	8002a94 <HAL_RCC_GetPCLK2Freq>
 8004630:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004632:	e01b      	b.n	800466c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004634:	4b08      	ldr	r3, [pc, #32]	@ (8004658 <UART_SetConfig+0x2f8>)
 8004636:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004638:	e018      	b.n	800466c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800463a:	f7fe f995 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 800463e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004640:	e014      	b.n	800466c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004642:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004646:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004648:	e010      	b.n	800466c <UART_SetConfig+0x30c>
 800464a:	bf00      	nop
 800464c:	cfff69f3 	.word	0xcfff69f3
 8004650:	40008000 	.word	0x40008000
 8004654:	40013800 	.word	0x40013800
 8004658:	00f42400 	.word	0x00f42400
 800465c:	08005d08 	.word	0x08005d08
      default:
        pclk = 0U;
 8004660:	2300      	movs	r3, #0
 8004662:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800466a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800466c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 8084 	beq.w	800477c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004678:	4a4b      	ldr	r2, [pc, #300]	@ (80047a8 <UART_SetConfig+0x448>)
 800467a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800467e:	461a      	mov	r2, r3
 8004680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004682:	fbb3 f3f2 	udiv	r3, r3, r2
 8004686:	005a      	lsls	r2, r3, #1
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	085b      	lsrs	r3, r3, #1
 800468e:	441a      	add	r2, r3
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	fbb2 f3f3 	udiv	r3, r2, r3
 8004698:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	2b0f      	cmp	r3, #15
 800469e:	d916      	bls.n	80046ce <UART_SetConfig+0x36e>
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046a6:	d212      	bcs.n	80046ce <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	f023 030f 	bic.w	r3, r3, #15
 80046b0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	085b      	lsrs	r3, r3, #1
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	f003 0307 	and.w	r3, r3, #7
 80046bc:	b29a      	uxth	r2, r3
 80046be:	8bfb      	ldrh	r3, [r7, #30]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	8bfa      	ldrh	r2, [r7, #30]
 80046ca:	60da      	str	r2, [r3, #12]
 80046cc:	e056      	b.n	800477c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80046d4:	e052      	b.n	800477c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80046da:	3b01      	subs	r3, #1
 80046dc:	2b07      	cmp	r3, #7
 80046de:	d822      	bhi.n	8004726 <UART_SetConfig+0x3c6>
 80046e0:	a201      	add	r2, pc, #4	@ (adr r2, 80046e8 <UART_SetConfig+0x388>)
 80046e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e6:	bf00      	nop
 80046e8:	08004709 	.word	0x08004709
 80046ec:	08004711 	.word	0x08004711
 80046f0:	08004727 	.word	0x08004727
 80046f4:	08004717 	.word	0x08004717
 80046f8:	08004727 	.word	0x08004727
 80046fc:	08004727 	.word	0x08004727
 8004700:	08004727 	.word	0x08004727
 8004704:	0800471f 	.word	0x0800471f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004708:	f7fe f9c4 	bl	8002a94 <HAL_RCC_GetPCLK2Freq>
 800470c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800470e:	e010      	b.n	8004732 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004710:	4b26      	ldr	r3, [pc, #152]	@ (80047ac <UART_SetConfig+0x44c>)
 8004712:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004714:	e00d      	b.n	8004732 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004716:	f7fe f927 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 800471a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800471c:	e009      	b.n	8004732 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800471e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004722:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004724:	e005      	b.n	8004732 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004726:	2300      	movs	r3, #0
 8004728:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004730:	bf00      	nop
    }

    if (pclk != 0U)
 8004732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004734:	2b00      	cmp	r3, #0
 8004736:	d021      	beq.n	800477c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473c:	4a1a      	ldr	r2, [pc, #104]	@ (80047a8 <UART_SetConfig+0x448>)
 800473e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004742:	461a      	mov	r2, r3
 8004744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004746:	fbb3 f2f2 	udiv	r2, r3, r2
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	085b      	lsrs	r3, r3, #1
 8004750:	441a      	add	r2, r3
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	fbb2 f3f3 	udiv	r3, r2, r3
 800475a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	2b0f      	cmp	r3, #15
 8004760:	d909      	bls.n	8004776 <UART_SetConfig+0x416>
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004768:	d205      	bcs.n	8004776 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	b29a      	uxth	r2, r3
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	60da      	str	r2, [r3, #12]
 8004774:	e002      	b.n	800477c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	2201      	movs	r2, #1
 8004780:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	2201      	movs	r2, #1
 8004788:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	2200      	movs	r2, #0
 8004790:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2200      	movs	r2, #0
 8004796:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004798:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800479c:	4618      	mov	r0, r3
 800479e:	3730      	adds	r7, #48	@ 0x30
 80047a0:	46bd      	mov	sp, r7
 80047a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047a6:	bf00      	nop
 80047a8:	08005d08 	.word	0x08005d08
 80047ac:	00f42400 	.word	0x00f42400

080047b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047bc:	f003 0308 	and.w	r3, r3, #8
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00a      	beq.n	800481e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004822:	f003 0304 	and.w	r3, r3, #4
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004844:	f003 0310 	and.w	r3, r3, #16
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00a      	beq.n	8004862 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004866:	f003 0320 	and.w	r3, r3, #32
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800488c:	2b00      	cmp	r3, #0
 800488e:	d01a      	beq.n	80048c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048ae:	d10a      	bne.n	80048c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00a      	beq.n	80048e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	605a      	str	r2, [r3, #4]
  }
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b098      	sub	sp, #96	@ 0x60
 80048f8:	af02      	add	r7, sp, #8
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004904:	f7fc fba6 	bl	8001054 <HAL_GetTick>
 8004908:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0308 	and.w	r3, r3, #8
 8004914:	2b08      	cmp	r3, #8
 8004916:	d12f      	bne.n	8004978 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004918:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004920:	2200      	movs	r2, #0
 8004922:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f88e 	bl	8004a48 <UART_WaitOnFlagUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d022      	beq.n	8004978 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800493a:	e853 3f00 	ldrex	r3, [r3]
 800493e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004942:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004946:	653b      	str	r3, [r7, #80]	@ 0x50
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	461a      	mov	r2, r3
 800494e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004950:	647b      	str	r3, [r7, #68]	@ 0x44
 8004952:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004954:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004956:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004958:	e841 2300 	strex	r3, r2, [r1]
 800495c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800495e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1e6      	bne.n	8004932 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2220      	movs	r2, #32
 8004968:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e063      	b.n	8004a40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0304 	and.w	r3, r3, #4
 8004982:	2b04      	cmp	r3, #4
 8004984:	d149      	bne.n	8004a1a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004986:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800498e:	2200      	movs	r2, #0
 8004990:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f857 	bl	8004a48 <UART_WaitOnFlagUntilTimeout>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d03c      	beq.n	8004a1a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a8:	e853 3f00 	ldrex	r3, [r3]
 80049ac:	623b      	str	r3, [r7, #32]
   return(result);
 80049ae:	6a3b      	ldr	r3, [r7, #32]
 80049b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	461a      	mov	r2, r3
 80049bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049be:	633b      	str	r3, [r7, #48]	@ 0x30
 80049c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049c6:	e841 2300 	strex	r3, r2, [r1]
 80049ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1e6      	bne.n	80049a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	3308      	adds	r3, #8
 80049d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	e853 3f00 	ldrex	r3, [r3]
 80049e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f023 0301 	bic.w	r3, r3, #1
 80049e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	3308      	adds	r3, #8
 80049f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049f2:	61fa      	str	r2, [r7, #28]
 80049f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f6:	69b9      	ldr	r1, [r7, #24]
 80049f8:	69fa      	ldr	r2, [r7, #28]
 80049fa:	e841 2300 	strex	r3, r2, [r1]
 80049fe:	617b      	str	r3, [r7, #20]
   return(result);
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1e5      	bne.n	80049d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e012      	b.n	8004a40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3758      	adds	r7, #88	@ 0x58
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	603b      	str	r3, [r7, #0]
 8004a54:	4613      	mov	r3, r2
 8004a56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a58:	e04f      	b.n	8004afa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a60:	d04b      	beq.n	8004afa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a62:	f7fc faf7 	bl	8001054 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d302      	bcc.n	8004a78 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e04e      	b.n	8004b1a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0304 	and.w	r3, r3, #4
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d037      	beq.n	8004afa <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	2b80      	cmp	r3, #128	@ 0x80
 8004a8e:	d034      	beq.n	8004afa <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2b40      	cmp	r3, #64	@ 0x40
 8004a94:	d031      	beq.n	8004afa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	69db      	ldr	r3, [r3, #28]
 8004a9c:	f003 0308 	and.w	r3, r3, #8
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d110      	bne.n	8004ac6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2208      	movs	r2, #8
 8004aaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f000 f838 	bl	8004b22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2208      	movs	r2, #8
 8004ab6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e029      	b.n	8004b1a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ad0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ad4:	d111      	bne.n	8004afa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ade:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f000 f81e 	bl	8004b22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e00f      	b.n	8004b1a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69da      	ldr	r2, [r3, #28]
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	4013      	ands	r3, r2
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	bf0c      	ite	eq
 8004b0a:	2301      	moveq	r3, #1
 8004b0c:	2300      	movne	r3, #0
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	461a      	mov	r2, r3
 8004b12:	79fb      	ldrb	r3, [r7, #7]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d0a0      	beq.n	8004a5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b095      	sub	sp, #84	@ 0x54
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b32:	e853 3f00 	ldrex	r3, [r3]
 8004b36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	461a      	mov	r2, r3
 8004b46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b48:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b4a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b50:	e841 2300 	strex	r3, r2, [r1]
 8004b54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1e6      	bne.n	8004b2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3308      	adds	r3, #8
 8004b62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	e853 3f00 	ldrex	r3, [r3]
 8004b6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b72:	f023 0301 	bic.w	r3, r3, #1
 8004b76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3308      	adds	r3, #8
 8004b7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b88:	e841 2300 	strex	r3, r2, [r1]
 8004b8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1e3      	bne.n	8004b5c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d118      	bne.n	8004bce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	e853 3f00 	ldrex	r3, [r3]
 8004ba8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	f023 0310 	bic.w	r3, r3, #16
 8004bb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bba:	61bb      	str	r3, [r7, #24]
 8004bbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbe:	6979      	ldr	r1, [r7, #20]
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	e841 2300 	strex	r3, r2, [r1]
 8004bc6:	613b      	str	r3, [r7, #16]
   return(result);
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1e6      	bne.n	8004b9c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004be2:	bf00      	nop
 8004be4:	3754      	adds	r7, #84	@ 0x54
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
	...

08004bf0 <std>:
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	b510      	push	{r4, lr}
 8004bf4:	4604      	mov	r4, r0
 8004bf6:	e9c0 3300 	strd	r3, r3, [r0]
 8004bfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004bfe:	6083      	str	r3, [r0, #8]
 8004c00:	8181      	strh	r1, [r0, #12]
 8004c02:	6643      	str	r3, [r0, #100]	@ 0x64
 8004c04:	81c2      	strh	r2, [r0, #14]
 8004c06:	6183      	str	r3, [r0, #24]
 8004c08:	4619      	mov	r1, r3
 8004c0a:	2208      	movs	r2, #8
 8004c0c:	305c      	adds	r0, #92	@ 0x5c
 8004c0e:	f000 f9f9 	bl	8005004 <memset>
 8004c12:	4b0d      	ldr	r3, [pc, #52]	@ (8004c48 <std+0x58>)
 8004c14:	6263      	str	r3, [r4, #36]	@ 0x24
 8004c16:	4b0d      	ldr	r3, [pc, #52]	@ (8004c4c <std+0x5c>)
 8004c18:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c50 <std+0x60>)
 8004c1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c54 <std+0x64>)
 8004c20:	6323      	str	r3, [r4, #48]	@ 0x30
 8004c22:	4b0d      	ldr	r3, [pc, #52]	@ (8004c58 <std+0x68>)
 8004c24:	6224      	str	r4, [r4, #32]
 8004c26:	429c      	cmp	r4, r3
 8004c28:	d006      	beq.n	8004c38 <std+0x48>
 8004c2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004c2e:	4294      	cmp	r4, r2
 8004c30:	d002      	beq.n	8004c38 <std+0x48>
 8004c32:	33d0      	adds	r3, #208	@ 0xd0
 8004c34:	429c      	cmp	r4, r3
 8004c36:	d105      	bne.n	8004c44 <std+0x54>
 8004c38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c40:	f000 ba58 	b.w	80050f4 <__retarget_lock_init_recursive>
 8004c44:	bd10      	pop	{r4, pc}
 8004c46:	bf00      	nop
 8004c48:	08004e55 	.word	0x08004e55
 8004c4c:	08004e77 	.word	0x08004e77
 8004c50:	08004eaf 	.word	0x08004eaf
 8004c54:	08004ed3 	.word	0x08004ed3
 8004c58:	200001bc 	.word	0x200001bc

08004c5c <stdio_exit_handler>:
 8004c5c:	4a02      	ldr	r2, [pc, #8]	@ (8004c68 <stdio_exit_handler+0xc>)
 8004c5e:	4903      	ldr	r1, [pc, #12]	@ (8004c6c <stdio_exit_handler+0x10>)
 8004c60:	4803      	ldr	r0, [pc, #12]	@ (8004c70 <stdio_exit_handler+0x14>)
 8004c62:	f000 b869 	b.w	8004d38 <_fwalk_sglue>
 8004c66:	bf00      	nop
 8004c68:	20000024 	.word	0x20000024
 8004c6c:	08005991 	.word	0x08005991
 8004c70:	20000034 	.word	0x20000034

08004c74 <cleanup_stdio>:
 8004c74:	6841      	ldr	r1, [r0, #4]
 8004c76:	4b0c      	ldr	r3, [pc, #48]	@ (8004ca8 <cleanup_stdio+0x34>)
 8004c78:	4299      	cmp	r1, r3
 8004c7a:	b510      	push	{r4, lr}
 8004c7c:	4604      	mov	r4, r0
 8004c7e:	d001      	beq.n	8004c84 <cleanup_stdio+0x10>
 8004c80:	f000 fe86 	bl	8005990 <_fflush_r>
 8004c84:	68a1      	ldr	r1, [r4, #8]
 8004c86:	4b09      	ldr	r3, [pc, #36]	@ (8004cac <cleanup_stdio+0x38>)
 8004c88:	4299      	cmp	r1, r3
 8004c8a:	d002      	beq.n	8004c92 <cleanup_stdio+0x1e>
 8004c8c:	4620      	mov	r0, r4
 8004c8e:	f000 fe7f 	bl	8005990 <_fflush_r>
 8004c92:	68e1      	ldr	r1, [r4, #12]
 8004c94:	4b06      	ldr	r3, [pc, #24]	@ (8004cb0 <cleanup_stdio+0x3c>)
 8004c96:	4299      	cmp	r1, r3
 8004c98:	d004      	beq.n	8004ca4 <cleanup_stdio+0x30>
 8004c9a:	4620      	mov	r0, r4
 8004c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ca0:	f000 be76 	b.w	8005990 <_fflush_r>
 8004ca4:	bd10      	pop	{r4, pc}
 8004ca6:	bf00      	nop
 8004ca8:	200001bc 	.word	0x200001bc
 8004cac:	20000224 	.word	0x20000224
 8004cb0:	2000028c 	.word	0x2000028c

08004cb4 <global_stdio_init.part.0>:
 8004cb4:	b510      	push	{r4, lr}
 8004cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce4 <global_stdio_init.part.0+0x30>)
 8004cb8:	4c0b      	ldr	r4, [pc, #44]	@ (8004ce8 <global_stdio_init.part.0+0x34>)
 8004cba:	4a0c      	ldr	r2, [pc, #48]	@ (8004cec <global_stdio_init.part.0+0x38>)
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	2104      	movs	r1, #4
 8004cc4:	f7ff ff94 	bl	8004bf0 <std>
 8004cc8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ccc:	2201      	movs	r2, #1
 8004cce:	2109      	movs	r1, #9
 8004cd0:	f7ff ff8e 	bl	8004bf0 <std>
 8004cd4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004cd8:	2202      	movs	r2, #2
 8004cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cde:	2112      	movs	r1, #18
 8004ce0:	f7ff bf86 	b.w	8004bf0 <std>
 8004ce4:	200002f4 	.word	0x200002f4
 8004ce8:	200001bc 	.word	0x200001bc
 8004cec:	08004c5d 	.word	0x08004c5d

08004cf0 <__sfp_lock_acquire>:
 8004cf0:	4801      	ldr	r0, [pc, #4]	@ (8004cf8 <__sfp_lock_acquire+0x8>)
 8004cf2:	f000 ba00 	b.w	80050f6 <__retarget_lock_acquire_recursive>
 8004cf6:	bf00      	nop
 8004cf8:	200002fd 	.word	0x200002fd

08004cfc <__sfp_lock_release>:
 8004cfc:	4801      	ldr	r0, [pc, #4]	@ (8004d04 <__sfp_lock_release+0x8>)
 8004cfe:	f000 b9fb 	b.w	80050f8 <__retarget_lock_release_recursive>
 8004d02:	bf00      	nop
 8004d04:	200002fd 	.word	0x200002fd

08004d08 <__sinit>:
 8004d08:	b510      	push	{r4, lr}
 8004d0a:	4604      	mov	r4, r0
 8004d0c:	f7ff fff0 	bl	8004cf0 <__sfp_lock_acquire>
 8004d10:	6a23      	ldr	r3, [r4, #32]
 8004d12:	b11b      	cbz	r3, 8004d1c <__sinit+0x14>
 8004d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d18:	f7ff bff0 	b.w	8004cfc <__sfp_lock_release>
 8004d1c:	4b04      	ldr	r3, [pc, #16]	@ (8004d30 <__sinit+0x28>)
 8004d1e:	6223      	str	r3, [r4, #32]
 8004d20:	4b04      	ldr	r3, [pc, #16]	@ (8004d34 <__sinit+0x2c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1f5      	bne.n	8004d14 <__sinit+0xc>
 8004d28:	f7ff ffc4 	bl	8004cb4 <global_stdio_init.part.0>
 8004d2c:	e7f2      	b.n	8004d14 <__sinit+0xc>
 8004d2e:	bf00      	nop
 8004d30:	08004c75 	.word	0x08004c75
 8004d34:	200002f4 	.word	0x200002f4

08004d38 <_fwalk_sglue>:
 8004d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d3c:	4607      	mov	r7, r0
 8004d3e:	4688      	mov	r8, r1
 8004d40:	4614      	mov	r4, r2
 8004d42:	2600      	movs	r6, #0
 8004d44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d48:	f1b9 0901 	subs.w	r9, r9, #1
 8004d4c:	d505      	bpl.n	8004d5a <_fwalk_sglue+0x22>
 8004d4e:	6824      	ldr	r4, [r4, #0]
 8004d50:	2c00      	cmp	r4, #0
 8004d52:	d1f7      	bne.n	8004d44 <_fwalk_sglue+0xc>
 8004d54:	4630      	mov	r0, r6
 8004d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d5a:	89ab      	ldrh	r3, [r5, #12]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d907      	bls.n	8004d70 <_fwalk_sglue+0x38>
 8004d60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d64:	3301      	adds	r3, #1
 8004d66:	d003      	beq.n	8004d70 <_fwalk_sglue+0x38>
 8004d68:	4629      	mov	r1, r5
 8004d6a:	4638      	mov	r0, r7
 8004d6c:	47c0      	blx	r8
 8004d6e:	4306      	orrs	r6, r0
 8004d70:	3568      	adds	r5, #104	@ 0x68
 8004d72:	e7e9      	b.n	8004d48 <_fwalk_sglue+0x10>

08004d74 <iprintf>:
 8004d74:	b40f      	push	{r0, r1, r2, r3}
 8004d76:	b507      	push	{r0, r1, r2, lr}
 8004d78:	4906      	ldr	r1, [pc, #24]	@ (8004d94 <iprintf+0x20>)
 8004d7a:	ab04      	add	r3, sp, #16
 8004d7c:	6808      	ldr	r0, [r1, #0]
 8004d7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d82:	6881      	ldr	r1, [r0, #8]
 8004d84:	9301      	str	r3, [sp, #4]
 8004d86:	f000 fadb 	bl	8005340 <_vfiprintf_r>
 8004d8a:	b003      	add	sp, #12
 8004d8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d90:	b004      	add	sp, #16
 8004d92:	4770      	bx	lr
 8004d94:	20000030 	.word	0x20000030

08004d98 <_puts_r>:
 8004d98:	6a03      	ldr	r3, [r0, #32]
 8004d9a:	b570      	push	{r4, r5, r6, lr}
 8004d9c:	6884      	ldr	r4, [r0, #8]
 8004d9e:	4605      	mov	r5, r0
 8004da0:	460e      	mov	r6, r1
 8004da2:	b90b      	cbnz	r3, 8004da8 <_puts_r+0x10>
 8004da4:	f7ff ffb0 	bl	8004d08 <__sinit>
 8004da8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004daa:	07db      	lsls	r3, r3, #31
 8004dac:	d405      	bmi.n	8004dba <_puts_r+0x22>
 8004dae:	89a3      	ldrh	r3, [r4, #12]
 8004db0:	0598      	lsls	r0, r3, #22
 8004db2:	d402      	bmi.n	8004dba <_puts_r+0x22>
 8004db4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004db6:	f000 f99e 	bl	80050f6 <__retarget_lock_acquire_recursive>
 8004dba:	89a3      	ldrh	r3, [r4, #12]
 8004dbc:	0719      	lsls	r1, r3, #28
 8004dbe:	d502      	bpl.n	8004dc6 <_puts_r+0x2e>
 8004dc0:	6923      	ldr	r3, [r4, #16]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d135      	bne.n	8004e32 <_puts_r+0x9a>
 8004dc6:	4621      	mov	r1, r4
 8004dc8:	4628      	mov	r0, r5
 8004dca:	f000 f8c5 	bl	8004f58 <__swsetup_r>
 8004dce:	b380      	cbz	r0, 8004e32 <_puts_r+0x9a>
 8004dd0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004dd4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004dd6:	07da      	lsls	r2, r3, #31
 8004dd8:	d405      	bmi.n	8004de6 <_puts_r+0x4e>
 8004dda:	89a3      	ldrh	r3, [r4, #12]
 8004ddc:	059b      	lsls	r3, r3, #22
 8004dde:	d402      	bmi.n	8004de6 <_puts_r+0x4e>
 8004de0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004de2:	f000 f989 	bl	80050f8 <__retarget_lock_release_recursive>
 8004de6:	4628      	mov	r0, r5
 8004de8:	bd70      	pop	{r4, r5, r6, pc}
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	da04      	bge.n	8004df8 <_puts_r+0x60>
 8004dee:	69a2      	ldr	r2, [r4, #24]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	dc17      	bgt.n	8004e24 <_puts_r+0x8c>
 8004df4:	290a      	cmp	r1, #10
 8004df6:	d015      	beq.n	8004e24 <_puts_r+0x8c>
 8004df8:	6823      	ldr	r3, [r4, #0]
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	6022      	str	r2, [r4, #0]
 8004dfe:	7019      	strb	r1, [r3, #0]
 8004e00:	68a3      	ldr	r3, [r4, #8]
 8004e02:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004e06:	3b01      	subs	r3, #1
 8004e08:	60a3      	str	r3, [r4, #8]
 8004e0a:	2900      	cmp	r1, #0
 8004e0c:	d1ed      	bne.n	8004dea <_puts_r+0x52>
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	da11      	bge.n	8004e36 <_puts_r+0x9e>
 8004e12:	4622      	mov	r2, r4
 8004e14:	210a      	movs	r1, #10
 8004e16:	4628      	mov	r0, r5
 8004e18:	f000 f85f 	bl	8004eda <__swbuf_r>
 8004e1c:	3001      	adds	r0, #1
 8004e1e:	d0d7      	beq.n	8004dd0 <_puts_r+0x38>
 8004e20:	250a      	movs	r5, #10
 8004e22:	e7d7      	b.n	8004dd4 <_puts_r+0x3c>
 8004e24:	4622      	mov	r2, r4
 8004e26:	4628      	mov	r0, r5
 8004e28:	f000 f857 	bl	8004eda <__swbuf_r>
 8004e2c:	3001      	adds	r0, #1
 8004e2e:	d1e7      	bne.n	8004e00 <_puts_r+0x68>
 8004e30:	e7ce      	b.n	8004dd0 <_puts_r+0x38>
 8004e32:	3e01      	subs	r6, #1
 8004e34:	e7e4      	b.n	8004e00 <_puts_r+0x68>
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	1c5a      	adds	r2, r3, #1
 8004e3a:	6022      	str	r2, [r4, #0]
 8004e3c:	220a      	movs	r2, #10
 8004e3e:	701a      	strb	r2, [r3, #0]
 8004e40:	e7ee      	b.n	8004e20 <_puts_r+0x88>
	...

08004e44 <puts>:
 8004e44:	4b02      	ldr	r3, [pc, #8]	@ (8004e50 <puts+0xc>)
 8004e46:	4601      	mov	r1, r0
 8004e48:	6818      	ldr	r0, [r3, #0]
 8004e4a:	f7ff bfa5 	b.w	8004d98 <_puts_r>
 8004e4e:	bf00      	nop
 8004e50:	20000030 	.word	0x20000030

08004e54 <__sread>:
 8004e54:	b510      	push	{r4, lr}
 8004e56:	460c      	mov	r4, r1
 8004e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e5c:	f000 f8fc 	bl	8005058 <_read_r>
 8004e60:	2800      	cmp	r0, #0
 8004e62:	bfab      	itete	ge
 8004e64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004e66:	89a3      	ldrhlt	r3, [r4, #12]
 8004e68:	181b      	addge	r3, r3, r0
 8004e6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004e6e:	bfac      	ite	ge
 8004e70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004e72:	81a3      	strhlt	r3, [r4, #12]
 8004e74:	bd10      	pop	{r4, pc}

08004e76 <__swrite>:
 8004e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e7a:	461f      	mov	r7, r3
 8004e7c:	898b      	ldrh	r3, [r1, #12]
 8004e7e:	05db      	lsls	r3, r3, #23
 8004e80:	4605      	mov	r5, r0
 8004e82:	460c      	mov	r4, r1
 8004e84:	4616      	mov	r6, r2
 8004e86:	d505      	bpl.n	8004e94 <__swrite+0x1e>
 8004e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f000 f8d0 	bl	8005034 <_lseek_r>
 8004e94:	89a3      	ldrh	r3, [r4, #12]
 8004e96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e9e:	81a3      	strh	r3, [r4, #12]
 8004ea0:	4632      	mov	r2, r6
 8004ea2:	463b      	mov	r3, r7
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004eaa:	f000 b8e7 	b.w	800507c <_write_r>

08004eae <__sseek>:
 8004eae:	b510      	push	{r4, lr}
 8004eb0:	460c      	mov	r4, r1
 8004eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eb6:	f000 f8bd 	bl	8005034 <_lseek_r>
 8004eba:	1c43      	adds	r3, r0, #1
 8004ebc:	89a3      	ldrh	r3, [r4, #12]
 8004ebe:	bf15      	itete	ne
 8004ec0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004ec2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004ec6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004eca:	81a3      	strheq	r3, [r4, #12]
 8004ecc:	bf18      	it	ne
 8004ece:	81a3      	strhne	r3, [r4, #12]
 8004ed0:	bd10      	pop	{r4, pc}

08004ed2 <__sclose>:
 8004ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ed6:	f000 b89d 	b.w	8005014 <_close_r>

08004eda <__swbuf_r>:
 8004eda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004edc:	460e      	mov	r6, r1
 8004ede:	4614      	mov	r4, r2
 8004ee0:	4605      	mov	r5, r0
 8004ee2:	b118      	cbz	r0, 8004eec <__swbuf_r+0x12>
 8004ee4:	6a03      	ldr	r3, [r0, #32]
 8004ee6:	b90b      	cbnz	r3, 8004eec <__swbuf_r+0x12>
 8004ee8:	f7ff ff0e 	bl	8004d08 <__sinit>
 8004eec:	69a3      	ldr	r3, [r4, #24]
 8004eee:	60a3      	str	r3, [r4, #8]
 8004ef0:	89a3      	ldrh	r3, [r4, #12]
 8004ef2:	071a      	lsls	r2, r3, #28
 8004ef4:	d501      	bpl.n	8004efa <__swbuf_r+0x20>
 8004ef6:	6923      	ldr	r3, [r4, #16]
 8004ef8:	b943      	cbnz	r3, 8004f0c <__swbuf_r+0x32>
 8004efa:	4621      	mov	r1, r4
 8004efc:	4628      	mov	r0, r5
 8004efe:	f000 f82b 	bl	8004f58 <__swsetup_r>
 8004f02:	b118      	cbz	r0, 8004f0c <__swbuf_r+0x32>
 8004f04:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004f08:	4638      	mov	r0, r7
 8004f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f0c:	6823      	ldr	r3, [r4, #0]
 8004f0e:	6922      	ldr	r2, [r4, #16]
 8004f10:	1a98      	subs	r0, r3, r2
 8004f12:	6963      	ldr	r3, [r4, #20]
 8004f14:	b2f6      	uxtb	r6, r6
 8004f16:	4283      	cmp	r3, r0
 8004f18:	4637      	mov	r7, r6
 8004f1a:	dc05      	bgt.n	8004f28 <__swbuf_r+0x4e>
 8004f1c:	4621      	mov	r1, r4
 8004f1e:	4628      	mov	r0, r5
 8004f20:	f000 fd36 	bl	8005990 <_fflush_r>
 8004f24:	2800      	cmp	r0, #0
 8004f26:	d1ed      	bne.n	8004f04 <__swbuf_r+0x2a>
 8004f28:	68a3      	ldr	r3, [r4, #8]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	60a3      	str	r3, [r4, #8]
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	6022      	str	r2, [r4, #0]
 8004f34:	701e      	strb	r6, [r3, #0]
 8004f36:	6962      	ldr	r2, [r4, #20]
 8004f38:	1c43      	adds	r3, r0, #1
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d004      	beq.n	8004f48 <__swbuf_r+0x6e>
 8004f3e:	89a3      	ldrh	r3, [r4, #12]
 8004f40:	07db      	lsls	r3, r3, #31
 8004f42:	d5e1      	bpl.n	8004f08 <__swbuf_r+0x2e>
 8004f44:	2e0a      	cmp	r6, #10
 8004f46:	d1df      	bne.n	8004f08 <__swbuf_r+0x2e>
 8004f48:	4621      	mov	r1, r4
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	f000 fd20 	bl	8005990 <_fflush_r>
 8004f50:	2800      	cmp	r0, #0
 8004f52:	d0d9      	beq.n	8004f08 <__swbuf_r+0x2e>
 8004f54:	e7d6      	b.n	8004f04 <__swbuf_r+0x2a>
	...

08004f58 <__swsetup_r>:
 8004f58:	b538      	push	{r3, r4, r5, lr}
 8004f5a:	4b29      	ldr	r3, [pc, #164]	@ (8005000 <__swsetup_r+0xa8>)
 8004f5c:	4605      	mov	r5, r0
 8004f5e:	6818      	ldr	r0, [r3, #0]
 8004f60:	460c      	mov	r4, r1
 8004f62:	b118      	cbz	r0, 8004f6c <__swsetup_r+0x14>
 8004f64:	6a03      	ldr	r3, [r0, #32]
 8004f66:	b90b      	cbnz	r3, 8004f6c <__swsetup_r+0x14>
 8004f68:	f7ff fece 	bl	8004d08 <__sinit>
 8004f6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f70:	0719      	lsls	r1, r3, #28
 8004f72:	d422      	bmi.n	8004fba <__swsetup_r+0x62>
 8004f74:	06da      	lsls	r2, r3, #27
 8004f76:	d407      	bmi.n	8004f88 <__swsetup_r+0x30>
 8004f78:	2209      	movs	r2, #9
 8004f7a:	602a      	str	r2, [r5, #0]
 8004f7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f80:	81a3      	strh	r3, [r4, #12]
 8004f82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f86:	e033      	b.n	8004ff0 <__swsetup_r+0x98>
 8004f88:	0758      	lsls	r0, r3, #29
 8004f8a:	d512      	bpl.n	8004fb2 <__swsetup_r+0x5a>
 8004f8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f8e:	b141      	cbz	r1, 8004fa2 <__swsetup_r+0x4a>
 8004f90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f94:	4299      	cmp	r1, r3
 8004f96:	d002      	beq.n	8004f9e <__swsetup_r+0x46>
 8004f98:	4628      	mov	r0, r5
 8004f9a:	f000 f8af 	bl	80050fc <_free_r>
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	6363      	str	r3, [r4, #52]	@ 0x34
 8004fa2:	89a3      	ldrh	r3, [r4, #12]
 8004fa4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004fa8:	81a3      	strh	r3, [r4, #12]
 8004faa:	2300      	movs	r3, #0
 8004fac:	6063      	str	r3, [r4, #4]
 8004fae:	6923      	ldr	r3, [r4, #16]
 8004fb0:	6023      	str	r3, [r4, #0]
 8004fb2:	89a3      	ldrh	r3, [r4, #12]
 8004fb4:	f043 0308 	orr.w	r3, r3, #8
 8004fb8:	81a3      	strh	r3, [r4, #12]
 8004fba:	6923      	ldr	r3, [r4, #16]
 8004fbc:	b94b      	cbnz	r3, 8004fd2 <__swsetup_r+0x7a>
 8004fbe:	89a3      	ldrh	r3, [r4, #12]
 8004fc0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004fc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fc8:	d003      	beq.n	8004fd2 <__swsetup_r+0x7a>
 8004fca:	4621      	mov	r1, r4
 8004fcc:	4628      	mov	r0, r5
 8004fce:	f000 fd2d 	bl	8005a2c <__smakebuf_r>
 8004fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fd6:	f013 0201 	ands.w	r2, r3, #1
 8004fda:	d00a      	beq.n	8004ff2 <__swsetup_r+0x9a>
 8004fdc:	2200      	movs	r2, #0
 8004fde:	60a2      	str	r2, [r4, #8]
 8004fe0:	6962      	ldr	r2, [r4, #20]
 8004fe2:	4252      	negs	r2, r2
 8004fe4:	61a2      	str	r2, [r4, #24]
 8004fe6:	6922      	ldr	r2, [r4, #16]
 8004fe8:	b942      	cbnz	r2, 8004ffc <__swsetup_r+0xa4>
 8004fea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004fee:	d1c5      	bne.n	8004f7c <__swsetup_r+0x24>
 8004ff0:	bd38      	pop	{r3, r4, r5, pc}
 8004ff2:	0799      	lsls	r1, r3, #30
 8004ff4:	bf58      	it	pl
 8004ff6:	6962      	ldrpl	r2, [r4, #20]
 8004ff8:	60a2      	str	r2, [r4, #8]
 8004ffa:	e7f4      	b.n	8004fe6 <__swsetup_r+0x8e>
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	e7f7      	b.n	8004ff0 <__swsetup_r+0x98>
 8005000:	20000030 	.word	0x20000030

08005004 <memset>:
 8005004:	4402      	add	r2, r0
 8005006:	4603      	mov	r3, r0
 8005008:	4293      	cmp	r3, r2
 800500a:	d100      	bne.n	800500e <memset+0xa>
 800500c:	4770      	bx	lr
 800500e:	f803 1b01 	strb.w	r1, [r3], #1
 8005012:	e7f9      	b.n	8005008 <memset+0x4>

08005014 <_close_r>:
 8005014:	b538      	push	{r3, r4, r5, lr}
 8005016:	4d06      	ldr	r5, [pc, #24]	@ (8005030 <_close_r+0x1c>)
 8005018:	2300      	movs	r3, #0
 800501a:	4604      	mov	r4, r0
 800501c:	4608      	mov	r0, r1
 800501e:	602b      	str	r3, [r5, #0]
 8005020:	f7fb fdb5 	bl	8000b8e <_close>
 8005024:	1c43      	adds	r3, r0, #1
 8005026:	d102      	bne.n	800502e <_close_r+0x1a>
 8005028:	682b      	ldr	r3, [r5, #0]
 800502a:	b103      	cbz	r3, 800502e <_close_r+0x1a>
 800502c:	6023      	str	r3, [r4, #0]
 800502e:	bd38      	pop	{r3, r4, r5, pc}
 8005030:	200002f8 	.word	0x200002f8

08005034 <_lseek_r>:
 8005034:	b538      	push	{r3, r4, r5, lr}
 8005036:	4d07      	ldr	r5, [pc, #28]	@ (8005054 <_lseek_r+0x20>)
 8005038:	4604      	mov	r4, r0
 800503a:	4608      	mov	r0, r1
 800503c:	4611      	mov	r1, r2
 800503e:	2200      	movs	r2, #0
 8005040:	602a      	str	r2, [r5, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	f7fb fdca 	bl	8000bdc <_lseek>
 8005048:	1c43      	adds	r3, r0, #1
 800504a:	d102      	bne.n	8005052 <_lseek_r+0x1e>
 800504c:	682b      	ldr	r3, [r5, #0]
 800504e:	b103      	cbz	r3, 8005052 <_lseek_r+0x1e>
 8005050:	6023      	str	r3, [r4, #0]
 8005052:	bd38      	pop	{r3, r4, r5, pc}
 8005054:	200002f8 	.word	0x200002f8

08005058 <_read_r>:
 8005058:	b538      	push	{r3, r4, r5, lr}
 800505a:	4d07      	ldr	r5, [pc, #28]	@ (8005078 <_read_r+0x20>)
 800505c:	4604      	mov	r4, r0
 800505e:	4608      	mov	r0, r1
 8005060:	4611      	mov	r1, r2
 8005062:	2200      	movs	r2, #0
 8005064:	602a      	str	r2, [r5, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	f7fb fd74 	bl	8000b54 <_read>
 800506c:	1c43      	adds	r3, r0, #1
 800506e:	d102      	bne.n	8005076 <_read_r+0x1e>
 8005070:	682b      	ldr	r3, [r5, #0]
 8005072:	b103      	cbz	r3, 8005076 <_read_r+0x1e>
 8005074:	6023      	str	r3, [r4, #0]
 8005076:	bd38      	pop	{r3, r4, r5, pc}
 8005078:	200002f8 	.word	0x200002f8

0800507c <_write_r>:
 800507c:	b538      	push	{r3, r4, r5, lr}
 800507e:	4d07      	ldr	r5, [pc, #28]	@ (800509c <_write_r+0x20>)
 8005080:	4604      	mov	r4, r0
 8005082:	4608      	mov	r0, r1
 8005084:	4611      	mov	r1, r2
 8005086:	2200      	movs	r2, #0
 8005088:	602a      	str	r2, [r5, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	f7fb fc66 	bl	800095c <_write>
 8005090:	1c43      	adds	r3, r0, #1
 8005092:	d102      	bne.n	800509a <_write_r+0x1e>
 8005094:	682b      	ldr	r3, [r5, #0]
 8005096:	b103      	cbz	r3, 800509a <_write_r+0x1e>
 8005098:	6023      	str	r3, [r4, #0]
 800509a:	bd38      	pop	{r3, r4, r5, pc}
 800509c:	200002f8 	.word	0x200002f8

080050a0 <__errno>:
 80050a0:	4b01      	ldr	r3, [pc, #4]	@ (80050a8 <__errno+0x8>)
 80050a2:	6818      	ldr	r0, [r3, #0]
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	20000030 	.word	0x20000030

080050ac <__libc_init_array>:
 80050ac:	b570      	push	{r4, r5, r6, lr}
 80050ae:	4d0d      	ldr	r5, [pc, #52]	@ (80050e4 <__libc_init_array+0x38>)
 80050b0:	4c0d      	ldr	r4, [pc, #52]	@ (80050e8 <__libc_init_array+0x3c>)
 80050b2:	1b64      	subs	r4, r4, r5
 80050b4:	10a4      	asrs	r4, r4, #2
 80050b6:	2600      	movs	r6, #0
 80050b8:	42a6      	cmp	r6, r4
 80050ba:	d109      	bne.n	80050d0 <__libc_init_array+0x24>
 80050bc:	4d0b      	ldr	r5, [pc, #44]	@ (80050ec <__libc_init_array+0x40>)
 80050be:	4c0c      	ldr	r4, [pc, #48]	@ (80050f0 <__libc_init_array+0x44>)
 80050c0:	f000 fd22 	bl	8005b08 <_init>
 80050c4:	1b64      	subs	r4, r4, r5
 80050c6:	10a4      	asrs	r4, r4, #2
 80050c8:	2600      	movs	r6, #0
 80050ca:	42a6      	cmp	r6, r4
 80050cc:	d105      	bne.n	80050da <__libc_init_array+0x2e>
 80050ce:	bd70      	pop	{r4, r5, r6, pc}
 80050d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050d4:	4798      	blx	r3
 80050d6:	3601      	adds	r6, #1
 80050d8:	e7ee      	b.n	80050b8 <__libc_init_array+0xc>
 80050da:	f855 3b04 	ldr.w	r3, [r5], #4
 80050de:	4798      	blx	r3
 80050e0:	3601      	adds	r6, #1
 80050e2:	e7f2      	b.n	80050ca <__libc_init_array+0x1e>
 80050e4:	08005d5c 	.word	0x08005d5c
 80050e8:	08005d5c 	.word	0x08005d5c
 80050ec:	08005d5c 	.word	0x08005d5c
 80050f0:	08005d60 	.word	0x08005d60

080050f4 <__retarget_lock_init_recursive>:
 80050f4:	4770      	bx	lr

080050f6 <__retarget_lock_acquire_recursive>:
 80050f6:	4770      	bx	lr

080050f8 <__retarget_lock_release_recursive>:
 80050f8:	4770      	bx	lr
	...

080050fc <_free_r>:
 80050fc:	b538      	push	{r3, r4, r5, lr}
 80050fe:	4605      	mov	r5, r0
 8005100:	2900      	cmp	r1, #0
 8005102:	d041      	beq.n	8005188 <_free_r+0x8c>
 8005104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005108:	1f0c      	subs	r4, r1, #4
 800510a:	2b00      	cmp	r3, #0
 800510c:	bfb8      	it	lt
 800510e:	18e4      	addlt	r4, r4, r3
 8005110:	f000 f8e0 	bl	80052d4 <__malloc_lock>
 8005114:	4a1d      	ldr	r2, [pc, #116]	@ (800518c <_free_r+0x90>)
 8005116:	6813      	ldr	r3, [r2, #0]
 8005118:	b933      	cbnz	r3, 8005128 <_free_r+0x2c>
 800511a:	6063      	str	r3, [r4, #4]
 800511c:	6014      	str	r4, [r2, #0]
 800511e:	4628      	mov	r0, r5
 8005120:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005124:	f000 b8dc 	b.w	80052e0 <__malloc_unlock>
 8005128:	42a3      	cmp	r3, r4
 800512a:	d908      	bls.n	800513e <_free_r+0x42>
 800512c:	6820      	ldr	r0, [r4, #0]
 800512e:	1821      	adds	r1, r4, r0
 8005130:	428b      	cmp	r3, r1
 8005132:	bf01      	itttt	eq
 8005134:	6819      	ldreq	r1, [r3, #0]
 8005136:	685b      	ldreq	r3, [r3, #4]
 8005138:	1809      	addeq	r1, r1, r0
 800513a:	6021      	streq	r1, [r4, #0]
 800513c:	e7ed      	b.n	800511a <_free_r+0x1e>
 800513e:	461a      	mov	r2, r3
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	b10b      	cbz	r3, 8005148 <_free_r+0x4c>
 8005144:	42a3      	cmp	r3, r4
 8005146:	d9fa      	bls.n	800513e <_free_r+0x42>
 8005148:	6811      	ldr	r1, [r2, #0]
 800514a:	1850      	adds	r0, r2, r1
 800514c:	42a0      	cmp	r0, r4
 800514e:	d10b      	bne.n	8005168 <_free_r+0x6c>
 8005150:	6820      	ldr	r0, [r4, #0]
 8005152:	4401      	add	r1, r0
 8005154:	1850      	adds	r0, r2, r1
 8005156:	4283      	cmp	r3, r0
 8005158:	6011      	str	r1, [r2, #0]
 800515a:	d1e0      	bne.n	800511e <_free_r+0x22>
 800515c:	6818      	ldr	r0, [r3, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	6053      	str	r3, [r2, #4]
 8005162:	4408      	add	r0, r1
 8005164:	6010      	str	r0, [r2, #0]
 8005166:	e7da      	b.n	800511e <_free_r+0x22>
 8005168:	d902      	bls.n	8005170 <_free_r+0x74>
 800516a:	230c      	movs	r3, #12
 800516c:	602b      	str	r3, [r5, #0]
 800516e:	e7d6      	b.n	800511e <_free_r+0x22>
 8005170:	6820      	ldr	r0, [r4, #0]
 8005172:	1821      	adds	r1, r4, r0
 8005174:	428b      	cmp	r3, r1
 8005176:	bf04      	itt	eq
 8005178:	6819      	ldreq	r1, [r3, #0]
 800517a:	685b      	ldreq	r3, [r3, #4]
 800517c:	6063      	str	r3, [r4, #4]
 800517e:	bf04      	itt	eq
 8005180:	1809      	addeq	r1, r1, r0
 8005182:	6021      	streq	r1, [r4, #0]
 8005184:	6054      	str	r4, [r2, #4]
 8005186:	e7ca      	b.n	800511e <_free_r+0x22>
 8005188:	bd38      	pop	{r3, r4, r5, pc}
 800518a:	bf00      	nop
 800518c:	20000304 	.word	0x20000304

08005190 <sbrk_aligned>:
 8005190:	b570      	push	{r4, r5, r6, lr}
 8005192:	4e0f      	ldr	r6, [pc, #60]	@ (80051d0 <sbrk_aligned+0x40>)
 8005194:	460c      	mov	r4, r1
 8005196:	6831      	ldr	r1, [r6, #0]
 8005198:	4605      	mov	r5, r0
 800519a:	b911      	cbnz	r1, 80051a2 <sbrk_aligned+0x12>
 800519c:	f000 fca4 	bl	8005ae8 <_sbrk_r>
 80051a0:	6030      	str	r0, [r6, #0]
 80051a2:	4621      	mov	r1, r4
 80051a4:	4628      	mov	r0, r5
 80051a6:	f000 fc9f 	bl	8005ae8 <_sbrk_r>
 80051aa:	1c43      	adds	r3, r0, #1
 80051ac:	d103      	bne.n	80051b6 <sbrk_aligned+0x26>
 80051ae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80051b2:	4620      	mov	r0, r4
 80051b4:	bd70      	pop	{r4, r5, r6, pc}
 80051b6:	1cc4      	adds	r4, r0, #3
 80051b8:	f024 0403 	bic.w	r4, r4, #3
 80051bc:	42a0      	cmp	r0, r4
 80051be:	d0f8      	beq.n	80051b2 <sbrk_aligned+0x22>
 80051c0:	1a21      	subs	r1, r4, r0
 80051c2:	4628      	mov	r0, r5
 80051c4:	f000 fc90 	bl	8005ae8 <_sbrk_r>
 80051c8:	3001      	adds	r0, #1
 80051ca:	d1f2      	bne.n	80051b2 <sbrk_aligned+0x22>
 80051cc:	e7ef      	b.n	80051ae <sbrk_aligned+0x1e>
 80051ce:	bf00      	nop
 80051d0:	20000300 	.word	0x20000300

080051d4 <_malloc_r>:
 80051d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051d8:	1ccd      	adds	r5, r1, #3
 80051da:	f025 0503 	bic.w	r5, r5, #3
 80051de:	3508      	adds	r5, #8
 80051e0:	2d0c      	cmp	r5, #12
 80051e2:	bf38      	it	cc
 80051e4:	250c      	movcc	r5, #12
 80051e6:	2d00      	cmp	r5, #0
 80051e8:	4606      	mov	r6, r0
 80051ea:	db01      	blt.n	80051f0 <_malloc_r+0x1c>
 80051ec:	42a9      	cmp	r1, r5
 80051ee:	d904      	bls.n	80051fa <_malloc_r+0x26>
 80051f0:	230c      	movs	r3, #12
 80051f2:	6033      	str	r3, [r6, #0]
 80051f4:	2000      	movs	r0, #0
 80051f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80052d0 <_malloc_r+0xfc>
 80051fe:	f000 f869 	bl	80052d4 <__malloc_lock>
 8005202:	f8d8 3000 	ldr.w	r3, [r8]
 8005206:	461c      	mov	r4, r3
 8005208:	bb44      	cbnz	r4, 800525c <_malloc_r+0x88>
 800520a:	4629      	mov	r1, r5
 800520c:	4630      	mov	r0, r6
 800520e:	f7ff ffbf 	bl	8005190 <sbrk_aligned>
 8005212:	1c43      	adds	r3, r0, #1
 8005214:	4604      	mov	r4, r0
 8005216:	d158      	bne.n	80052ca <_malloc_r+0xf6>
 8005218:	f8d8 4000 	ldr.w	r4, [r8]
 800521c:	4627      	mov	r7, r4
 800521e:	2f00      	cmp	r7, #0
 8005220:	d143      	bne.n	80052aa <_malloc_r+0xd6>
 8005222:	2c00      	cmp	r4, #0
 8005224:	d04b      	beq.n	80052be <_malloc_r+0xea>
 8005226:	6823      	ldr	r3, [r4, #0]
 8005228:	4639      	mov	r1, r7
 800522a:	4630      	mov	r0, r6
 800522c:	eb04 0903 	add.w	r9, r4, r3
 8005230:	f000 fc5a 	bl	8005ae8 <_sbrk_r>
 8005234:	4581      	cmp	r9, r0
 8005236:	d142      	bne.n	80052be <_malloc_r+0xea>
 8005238:	6821      	ldr	r1, [r4, #0]
 800523a:	1a6d      	subs	r5, r5, r1
 800523c:	4629      	mov	r1, r5
 800523e:	4630      	mov	r0, r6
 8005240:	f7ff ffa6 	bl	8005190 <sbrk_aligned>
 8005244:	3001      	adds	r0, #1
 8005246:	d03a      	beq.n	80052be <_malloc_r+0xea>
 8005248:	6823      	ldr	r3, [r4, #0]
 800524a:	442b      	add	r3, r5
 800524c:	6023      	str	r3, [r4, #0]
 800524e:	f8d8 3000 	ldr.w	r3, [r8]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	bb62      	cbnz	r2, 80052b0 <_malloc_r+0xdc>
 8005256:	f8c8 7000 	str.w	r7, [r8]
 800525a:	e00f      	b.n	800527c <_malloc_r+0xa8>
 800525c:	6822      	ldr	r2, [r4, #0]
 800525e:	1b52      	subs	r2, r2, r5
 8005260:	d420      	bmi.n	80052a4 <_malloc_r+0xd0>
 8005262:	2a0b      	cmp	r2, #11
 8005264:	d917      	bls.n	8005296 <_malloc_r+0xc2>
 8005266:	1961      	adds	r1, r4, r5
 8005268:	42a3      	cmp	r3, r4
 800526a:	6025      	str	r5, [r4, #0]
 800526c:	bf18      	it	ne
 800526e:	6059      	strne	r1, [r3, #4]
 8005270:	6863      	ldr	r3, [r4, #4]
 8005272:	bf08      	it	eq
 8005274:	f8c8 1000 	streq.w	r1, [r8]
 8005278:	5162      	str	r2, [r4, r5]
 800527a:	604b      	str	r3, [r1, #4]
 800527c:	4630      	mov	r0, r6
 800527e:	f000 f82f 	bl	80052e0 <__malloc_unlock>
 8005282:	f104 000b 	add.w	r0, r4, #11
 8005286:	1d23      	adds	r3, r4, #4
 8005288:	f020 0007 	bic.w	r0, r0, #7
 800528c:	1ac2      	subs	r2, r0, r3
 800528e:	bf1c      	itt	ne
 8005290:	1a1b      	subne	r3, r3, r0
 8005292:	50a3      	strne	r3, [r4, r2]
 8005294:	e7af      	b.n	80051f6 <_malloc_r+0x22>
 8005296:	6862      	ldr	r2, [r4, #4]
 8005298:	42a3      	cmp	r3, r4
 800529a:	bf0c      	ite	eq
 800529c:	f8c8 2000 	streq.w	r2, [r8]
 80052a0:	605a      	strne	r2, [r3, #4]
 80052a2:	e7eb      	b.n	800527c <_malloc_r+0xa8>
 80052a4:	4623      	mov	r3, r4
 80052a6:	6864      	ldr	r4, [r4, #4]
 80052a8:	e7ae      	b.n	8005208 <_malloc_r+0x34>
 80052aa:	463c      	mov	r4, r7
 80052ac:	687f      	ldr	r7, [r7, #4]
 80052ae:	e7b6      	b.n	800521e <_malloc_r+0x4a>
 80052b0:	461a      	mov	r2, r3
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	42a3      	cmp	r3, r4
 80052b6:	d1fb      	bne.n	80052b0 <_malloc_r+0xdc>
 80052b8:	2300      	movs	r3, #0
 80052ba:	6053      	str	r3, [r2, #4]
 80052bc:	e7de      	b.n	800527c <_malloc_r+0xa8>
 80052be:	230c      	movs	r3, #12
 80052c0:	6033      	str	r3, [r6, #0]
 80052c2:	4630      	mov	r0, r6
 80052c4:	f000 f80c 	bl	80052e0 <__malloc_unlock>
 80052c8:	e794      	b.n	80051f4 <_malloc_r+0x20>
 80052ca:	6005      	str	r5, [r0, #0]
 80052cc:	e7d6      	b.n	800527c <_malloc_r+0xa8>
 80052ce:	bf00      	nop
 80052d0:	20000304 	.word	0x20000304

080052d4 <__malloc_lock>:
 80052d4:	4801      	ldr	r0, [pc, #4]	@ (80052dc <__malloc_lock+0x8>)
 80052d6:	f7ff bf0e 	b.w	80050f6 <__retarget_lock_acquire_recursive>
 80052da:	bf00      	nop
 80052dc:	200002fc 	.word	0x200002fc

080052e0 <__malloc_unlock>:
 80052e0:	4801      	ldr	r0, [pc, #4]	@ (80052e8 <__malloc_unlock+0x8>)
 80052e2:	f7ff bf09 	b.w	80050f8 <__retarget_lock_release_recursive>
 80052e6:	bf00      	nop
 80052e8:	200002fc 	.word	0x200002fc

080052ec <__sfputc_r>:
 80052ec:	6893      	ldr	r3, [r2, #8]
 80052ee:	3b01      	subs	r3, #1
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	b410      	push	{r4}
 80052f4:	6093      	str	r3, [r2, #8]
 80052f6:	da08      	bge.n	800530a <__sfputc_r+0x1e>
 80052f8:	6994      	ldr	r4, [r2, #24]
 80052fa:	42a3      	cmp	r3, r4
 80052fc:	db01      	blt.n	8005302 <__sfputc_r+0x16>
 80052fe:	290a      	cmp	r1, #10
 8005300:	d103      	bne.n	800530a <__sfputc_r+0x1e>
 8005302:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005306:	f7ff bde8 	b.w	8004eda <__swbuf_r>
 800530a:	6813      	ldr	r3, [r2, #0]
 800530c:	1c58      	adds	r0, r3, #1
 800530e:	6010      	str	r0, [r2, #0]
 8005310:	7019      	strb	r1, [r3, #0]
 8005312:	4608      	mov	r0, r1
 8005314:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005318:	4770      	bx	lr

0800531a <__sfputs_r>:
 800531a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800531c:	4606      	mov	r6, r0
 800531e:	460f      	mov	r7, r1
 8005320:	4614      	mov	r4, r2
 8005322:	18d5      	adds	r5, r2, r3
 8005324:	42ac      	cmp	r4, r5
 8005326:	d101      	bne.n	800532c <__sfputs_r+0x12>
 8005328:	2000      	movs	r0, #0
 800532a:	e007      	b.n	800533c <__sfputs_r+0x22>
 800532c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005330:	463a      	mov	r2, r7
 8005332:	4630      	mov	r0, r6
 8005334:	f7ff ffda 	bl	80052ec <__sfputc_r>
 8005338:	1c43      	adds	r3, r0, #1
 800533a:	d1f3      	bne.n	8005324 <__sfputs_r+0xa>
 800533c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005340 <_vfiprintf_r>:
 8005340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005344:	460d      	mov	r5, r1
 8005346:	b09d      	sub	sp, #116	@ 0x74
 8005348:	4614      	mov	r4, r2
 800534a:	4698      	mov	r8, r3
 800534c:	4606      	mov	r6, r0
 800534e:	b118      	cbz	r0, 8005358 <_vfiprintf_r+0x18>
 8005350:	6a03      	ldr	r3, [r0, #32]
 8005352:	b90b      	cbnz	r3, 8005358 <_vfiprintf_r+0x18>
 8005354:	f7ff fcd8 	bl	8004d08 <__sinit>
 8005358:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800535a:	07d9      	lsls	r1, r3, #31
 800535c:	d405      	bmi.n	800536a <_vfiprintf_r+0x2a>
 800535e:	89ab      	ldrh	r3, [r5, #12]
 8005360:	059a      	lsls	r2, r3, #22
 8005362:	d402      	bmi.n	800536a <_vfiprintf_r+0x2a>
 8005364:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005366:	f7ff fec6 	bl	80050f6 <__retarget_lock_acquire_recursive>
 800536a:	89ab      	ldrh	r3, [r5, #12]
 800536c:	071b      	lsls	r3, r3, #28
 800536e:	d501      	bpl.n	8005374 <_vfiprintf_r+0x34>
 8005370:	692b      	ldr	r3, [r5, #16]
 8005372:	b99b      	cbnz	r3, 800539c <_vfiprintf_r+0x5c>
 8005374:	4629      	mov	r1, r5
 8005376:	4630      	mov	r0, r6
 8005378:	f7ff fdee 	bl	8004f58 <__swsetup_r>
 800537c:	b170      	cbz	r0, 800539c <_vfiprintf_r+0x5c>
 800537e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005380:	07dc      	lsls	r4, r3, #31
 8005382:	d504      	bpl.n	800538e <_vfiprintf_r+0x4e>
 8005384:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005388:	b01d      	add	sp, #116	@ 0x74
 800538a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800538e:	89ab      	ldrh	r3, [r5, #12]
 8005390:	0598      	lsls	r0, r3, #22
 8005392:	d4f7      	bmi.n	8005384 <_vfiprintf_r+0x44>
 8005394:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005396:	f7ff feaf 	bl	80050f8 <__retarget_lock_release_recursive>
 800539a:	e7f3      	b.n	8005384 <_vfiprintf_r+0x44>
 800539c:	2300      	movs	r3, #0
 800539e:	9309      	str	r3, [sp, #36]	@ 0x24
 80053a0:	2320      	movs	r3, #32
 80053a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80053a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80053aa:	2330      	movs	r3, #48	@ 0x30
 80053ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800555c <_vfiprintf_r+0x21c>
 80053b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80053b4:	f04f 0901 	mov.w	r9, #1
 80053b8:	4623      	mov	r3, r4
 80053ba:	469a      	mov	sl, r3
 80053bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053c0:	b10a      	cbz	r2, 80053c6 <_vfiprintf_r+0x86>
 80053c2:	2a25      	cmp	r2, #37	@ 0x25
 80053c4:	d1f9      	bne.n	80053ba <_vfiprintf_r+0x7a>
 80053c6:	ebba 0b04 	subs.w	fp, sl, r4
 80053ca:	d00b      	beq.n	80053e4 <_vfiprintf_r+0xa4>
 80053cc:	465b      	mov	r3, fp
 80053ce:	4622      	mov	r2, r4
 80053d0:	4629      	mov	r1, r5
 80053d2:	4630      	mov	r0, r6
 80053d4:	f7ff ffa1 	bl	800531a <__sfputs_r>
 80053d8:	3001      	adds	r0, #1
 80053da:	f000 80a7 	beq.w	800552c <_vfiprintf_r+0x1ec>
 80053de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053e0:	445a      	add	r2, fp
 80053e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80053e4:	f89a 3000 	ldrb.w	r3, [sl]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 809f 	beq.w	800552c <_vfiprintf_r+0x1ec>
 80053ee:	2300      	movs	r3, #0
 80053f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80053f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053f8:	f10a 0a01 	add.w	sl, sl, #1
 80053fc:	9304      	str	r3, [sp, #16]
 80053fe:	9307      	str	r3, [sp, #28]
 8005400:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005404:	931a      	str	r3, [sp, #104]	@ 0x68
 8005406:	4654      	mov	r4, sl
 8005408:	2205      	movs	r2, #5
 800540a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800540e:	4853      	ldr	r0, [pc, #332]	@ (800555c <_vfiprintf_r+0x21c>)
 8005410:	f7fa feb6 	bl	8000180 <memchr>
 8005414:	9a04      	ldr	r2, [sp, #16]
 8005416:	b9d8      	cbnz	r0, 8005450 <_vfiprintf_r+0x110>
 8005418:	06d1      	lsls	r1, r2, #27
 800541a:	bf44      	itt	mi
 800541c:	2320      	movmi	r3, #32
 800541e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005422:	0713      	lsls	r3, r2, #28
 8005424:	bf44      	itt	mi
 8005426:	232b      	movmi	r3, #43	@ 0x2b
 8005428:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800542c:	f89a 3000 	ldrb.w	r3, [sl]
 8005430:	2b2a      	cmp	r3, #42	@ 0x2a
 8005432:	d015      	beq.n	8005460 <_vfiprintf_r+0x120>
 8005434:	9a07      	ldr	r2, [sp, #28]
 8005436:	4654      	mov	r4, sl
 8005438:	2000      	movs	r0, #0
 800543a:	f04f 0c0a 	mov.w	ip, #10
 800543e:	4621      	mov	r1, r4
 8005440:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005444:	3b30      	subs	r3, #48	@ 0x30
 8005446:	2b09      	cmp	r3, #9
 8005448:	d94b      	bls.n	80054e2 <_vfiprintf_r+0x1a2>
 800544a:	b1b0      	cbz	r0, 800547a <_vfiprintf_r+0x13a>
 800544c:	9207      	str	r2, [sp, #28]
 800544e:	e014      	b.n	800547a <_vfiprintf_r+0x13a>
 8005450:	eba0 0308 	sub.w	r3, r0, r8
 8005454:	fa09 f303 	lsl.w	r3, r9, r3
 8005458:	4313      	orrs	r3, r2
 800545a:	9304      	str	r3, [sp, #16]
 800545c:	46a2      	mov	sl, r4
 800545e:	e7d2      	b.n	8005406 <_vfiprintf_r+0xc6>
 8005460:	9b03      	ldr	r3, [sp, #12]
 8005462:	1d19      	adds	r1, r3, #4
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	9103      	str	r1, [sp, #12]
 8005468:	2b00      	cmp	r3, #0
 800546a:	bfbb      	ittet	lt
 800546c:	425b      	neglt	r3, r3
 800546e:	f042 0202 	orrlt.w	r2, r2, #2
 8005472:	9307      	strge	r3, [sp, #28]
 8005474:	9307      	strlt	r3, [sp, #28]
 8005476:	bfb8      	it	lt
 8005478:	9204      	strlt	r2, [sp, #16]
 800547a:	7823      	ldrb	r3, [r4, #0]
 800547c:	2b2e      	cmp	r3, #46	@ 0x2e
 800547e:	d10a      	bne.n	8005496 <_vfiprintf_r+0x156>
 8005480:	7863      	ldrb	r3, [r4, #1]
 8005482:	2b2a      	cmp	r3, #42	@ 0x2a
 8005484:	d132      	bne.n	80054ec <_vfiprintf_r+0x1ac>
 8005486:	9b03      	ldr	r3, [sp, #12]
 8005488:	1d1a      	adds	r2, r3, #4
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	9203      	str	r2, [sp, #12]
 800548e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005492:	3402      	adds	r4, #2
 8005494:	9305      	str	r3, [sp, #20]
 8005496:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800556c <_vfiprintf_r+0x22c>
 800549a:	7821      	ldrb	r1, [r4, #0]
 800549c:	2203      	movs	r2, #3
 800549e:	4650      	mov	r0, sl
 80054a0:	f7fa fe6e 	bl	8000180 <memchr>
 80054a4:	b138      	cbz	r0, 80054b6 <_vfiprintf_r+0x176>
 80054a6:	9b04      	ldr	r3, [sp, #16]
 80054a8:	eba0 000a 	sub.w	r0, r0, sl
 80054ac:	2240      	movs	r2, #64	@ 0x40
 80054ae:	4082      	lsls	r2, r0
 80054b0:	4313      	orrs	r3, r2
 80054b2:	3401      	adds	r4, #1
 80054b4:	9304      	str	r3, [sp, #16]
 80054b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054ba:	4829      	ldr	r0, [pc, #164]	@ (8005560 <_vfiprintf_r+0x220>)
 80054bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80054c0:	2206      	movs	r2, #6
 80054c2:	f7fa fe5d 	bl	8000180 <memchr>
 80054c6:	2800      	cmp	r0, #0
 80054c8:	d03f      	beq.n	800554a <_vfiprintf_r+0x20a>
 80054ca:	4b26      	ldr	r3, [pc, #152]	@ (8005564 <_vfiprintf_r+0x224>)
 80054cc:	bb1b      	cbnz	r3, 8005516 <_vfiprintf_r+0x1d6>
 80054ce:	9b03      	ldr	r3, [sp, #12]
 80054d0:	3307      	adds	r3, #7
 80054d2:	f023 0307 	bic.w	r3, r3, #7
 80054d6:	3308      	adds	r3, #8
 80054d8:	9303      	str	r3, [sp, #12]
 80054da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054dc:	443b      	add	r3, r7
 80054de:	9309      	str	r3, [sp, #36]	@ 0x24
 80054e0:	e76a      	b.n	80053b8 <_vfiprintf_r+0x78>
 80054e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80054e6:	460c      	mov	r4, r1
 80054e8:	2001      	movs	r0, #1
 80054ea:	e7a8      	b.n	800543e <_vfiprintf_r+0xfe>
 80054ec:	2300      	movs	r3, #0
 80054ee:	3401      	adds	r4, #1
 80054f0:	9305      	str	r3, [sp, #20]
 80054f2:	4619      	mov	r1, r3
 80054f4:	f04f 0c0a 	mov.w	ip, #10
 80054f8:	4620      	mov	r0, r4
 80054fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054fe:	3a30      	subs	r2, #48	@ 0x30
 8005500:	2a09      	cmp	r2, #9
 8005502:	d903      	bls.n	800550c <_vfiprintf_r+0x1cc>
 8005504:	2b00      	cmp	r3, #0
 8005506:	d0c6      	beq.n	8005496 <_vfiprintf_r+0x156>
 8005508:	9105      	str	r1, [sp, #20]
 800550a:	e7c4      	b.n	8005496 <_vfiprintf_r+0x156>
 800550c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005510:	4604      	mov	r4, r0
 8005512:	2301      	movs	r3, #1
 8005514:	e7f0      	b.n	80054f8 <_vfiprintf_r+0x1b8>
 8005516:	ab03      	add	r3, sp, #12
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	462a      	mov	r2, r5
 800551c:	4b12      	ldr	r3, [pc, #72]	@ (8005568 <_vfiprintf_r+0x228>)
 800551e:	a904      	add	r1, sp, #16
 8005520:	4630      	mov	r0, r6
 8005522:	f3af 8000 	nop.w
 8005526:	4607      	mov	r7, r0
 8005528:	1c78      	adds	r0, r7, #1
 800552a:	d1d6      	bne.n	80054da <_vfiprintf_r+0x19a>
 800552c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800552e:	07d9      	lsls	r1, r3, #31
 8005530:	d405      	bmi.n	800553e <_vfiprintf_r+0x1fe>
 8005532:	89ab      	ldrh	r3, [r5, #12]
 8005534:	059a      	lsls	r2, r3, #22
 8005536:	d402      	bmi.n	800553e <_vfiprintf_r+0x1fe>
 8005538:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800553a:	f7ff fddd 	bl	80050f8 <__retarget_lock_release_recursive>
 800553e:	89ab      	ldrh	r3, [r5, #12]
 8005540:	065b      	lsls	r3, r3, #25
 8005542:	f53f af1f 	bmi.w	8005384 <_vfiprintf_r+0x44>
 8005546:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005548:	e71e      	b.n	8005388 <_vfiprintf_r+0x48>
 800554a:	ab03      	add	r3, sp, #12
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	462a      	mov	r2, r5
 8005550:	4b05      	ldr	r3, [pc, #20]	@ (8005568 <_vfiprintf_r+0x228>)
 8005552:	a904      	add	r1, sp, #16
 8005554:	4630      	mov	r0, r6
 8005556:	f000 f879 	bl	800564c <_printf_i>
 800555a:	e7e4      	b.n	8005526 <_vfiprintf_r+0x1e6>
 800555c:	08005d20 	.word	0x08005d20
 8005560:	08005d2a 	.word	0x08005d2a
 8005564:	00000000 	.word	0x00000000
 8005568:	0800531b 	.word	0x0800531b
 800556c:	08005d26 	.word	0x08005d26

08005570 <_printf_common>:
 8005570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005574:	4616      	mov	r6, r2
 8005576:	4698      	mov	r8, r3
 8005578:	688a      	ldr	r2, [r1, #8]
 800557a:	690b      	ldr	r3, [r1, #16]
 800557c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005580:	4293      	cmp	r3, r2
 8005582:	bfb8      	it	lt
 8005584:	4613      	movlt	r3, r2
 8005586:	6033      	str	r3, [r6, #0]
 8005588:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800558c:	4607      	mov	r7, r0
 800558e:	460c      	mov	r4, r1
 8005590:	b10a      	cbz	r2, 8005596 <_printf_common+0x26>
 8005592:	3301      	adds	r3, #1
 8005594:	6033      	str	r3, [r6, #0]
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	0699      	lsls	r1, r3, #26
 800559a:	bf42      	ittt	mi
 800559c:	6833      	ldrmi	r3, [r6, #0]
 800559e:	3302      	addmi	r3, #2
 80055a0:	6033      	strmi	r3, [r6, #0]
 80055a2:	6825      	ldr	r5, [r4, #0]
 80055a4:	f015 0506 	ands.w	r5, r5, #6
 80055a8:	d106      	bne.n	80055b8 <_printf_common+0x48>
 80055aa:	f104 0a19 	add.w	sl, r4, #25
 80055ae:	68e3      	ldr	r3, [r4, #12]
 80055b0:	6832      	ldr	r2, [r6, #0]
 80055b2:	1a9b      	subs	r3, r3, r2
 80055b4:	42ab      	cmp	r3, r5
 80055b6:	dc26      	bgt.n	8005606 <_printf_common+0x96>
 80055b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80055bc:	6822      	ldr	r2, [r4, #0]
 80055be:	3b00      	subs	r3, #0
 80055c0:	bf18      	it	ne
 80055c2:	2301      	movne	r3, #1
 80055c4:	0692      	lsls	r2, r2, #26
 80055c6:	d42b      	bmi.n	8005620 <_printf_common+0xb0>
 80055c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80055cc:	4641      	mov	r1, r8
 80055ce:	4638      	mov	r0, r7
 80055d0:	47c8      	blx	r9
 80055d2:	3001      	adds	r0, #1
 80055d4:	d01e      	beq.n	8005614 <_printf_common+0xa4>
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	6922      	ldr	r2, [r4, #16]
 80055da:	f003 0306 	and.w	r3, r3, #6
 80055de:	2b04      	cmp	r3, #4
 80055e0:	bf02      	ittt	eq
 80055e2:	68e5      	ldreq	r5, [r4, #12]
 80055e4:	6833      	ldreq	r3, [r6, #0]
 80055e6:	1aed      	subeq	r5, r5, r3
 80055e8:	68a3      	ldr	r3, [r4, #8]
 80055ea:	bf0c      	ite	eq
 80055ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055f0:	2500      	movne	r5, #0
 80055f2:	4293      	cmp	r3, r2
 80055f4:	bfc4      	itt	gt
 80055f6:	1a9b      	subgt	r3, r3, r2
 80055f8:	18ed      	addgt	r5, r5, r3
 80055fa:	2600      	movs	r6, #0
 80055fc:	341a      	adds	r4, #26
 80055fe:	42b5      	cmp	r5, r6
 8005600:	d11a      	bne.n	8005638 <_printf_common+0xc8>
 8005602:	2000      	movs	r0, #0
 8005604:	e008      	b.n	8005618 <_printf_common+0xa8>
 8005606:	2301      	movs	r3, #1
 8005608:	4652      	mov	r2, sl
 800560a:	4641      	mov	r1, r8
 800560c:	4638      	mov	r0, r7
 800560e:	47c8      	blx	r9
 8005610:	3001      	adds	r0, #1
 8005612:	d103      	bne.n	800561c <_printf_common+0xac>
 8005614:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800561c:	3501      	adds	r5, #1
 800561e:	e7c6      	b.n	80055ae <_printf_common+0x3e>
 8005620:	18e1      	adds	r1, r4, r3
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	2030      	movs	r0, #48	@ 0x30
 8005626:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800562a:	4422      	add	r2, r4
 800562c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005630:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005634:	3302      	adds	r3, #2
 8005636:	e7c7      	b.n	80055c8 <_printf_common+0x58>
 8005638:	2301      	movs	r3, #1
 800563a:	4622      	mov	r2, r4
 800563c:	4641      	mov	r1, r8
 800563e:	4638      	mov	r0, r7
 8005640:	47c8      	blx	r9
 8005642:	3001      	adds	r0, #1
 8005644:	d0e6      	beq.n	8005614 <_printf_common+0xa4>
 8005646:	3601      	adds	r6, #1
 8005648:	e7d9      	b.n	80055fe <_printf_common+0x8e>
	...

0800564c <_printf_i>:
 800564c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005650:	7e0f      	ldrb	r7, [r1, #24]
 8005652:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005654:	2f78      	cmp	r7, #120	@ 0x78
 8005656:	4691      	mov	r9, r2
 8005658:	4680      	mov	r8, r0
 800565a:	460c      	mov	r4, r1
 800565c:	469a      	mov	sl, r3
 800565e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005662:	d807      	bhi.n	8005674 <_printf_i+0x28>
 8005664:	2f62      	cmp	r7, #98	@ 0x62
 8005666:	d80a      	bhi.n	800567e <_printf_i+0x32>
 8005668:	2f00      	cmp	r7, #0
 800566a:	f000 80d1 	beq.w	8005810 <_printf_i+0x1c4>
 800566e:	2f58      	cmp	r7, #88	@ 0x58
 8005670:	f000 80b8 	beq.w	80057e4 <_printf_i+0x198>
 8005674:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005678:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800567c:	e03a      	b.n	80056f4 <_printf_i+0xa8>
 800567e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005682:	2b15      	cmp	r3, #21
 8005684:	d8f6      	bhi.n	8005674 <_printf_i+0x28>
 8005686:	a101      	add	r1, pc, #4	@ (adr r1, 800568c <_printf_i+0x40>)
 8005688:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800568c:	080056e5 	.word	0x080056e5
 8005690:	080056f9 	.word	0x080056f9
 8005694:	08005675 	.word	0x08005675
 8005698:	08005675 	.word	0x08005675
 800569c:	08005675 	.word	0x08005675
 80056a0:	08005675 	.word	0x08005675
 80056a4:	080056f9 	.word	0x080056f9
 80056a8:	08005675 	.word	0x08005675
 80056ac:	08005675 	.word	0x08005675
 80056b0:	08005675 	.word	0x08005675
 80056b4:	08005675 	.word	0x08005675
 80056b8:	080057f7 	.word	0x080057f7
 80056bc:	08005723 	.word	0x08005723
 80056c0:	080057b1 	.word	0x080057b1
 80056c4:	08005675 	.word	0x08005675
 80056c8:	08005675 	.word	0x08005675
 80056cc:	08005819 	.word	0x08005819
 80056d0:	08005675 	.word	0x08005675
 80056d4:	08005723 	.word	0x08005723
 80056d8:	08005675 	.word	0x08005675
 80056dc:	08005675 	.word	0x08005675
 80056e0:	080057b9 	.word	0x080057b9
 80056e4:	6833      	ldr	r3, [r6, #0]
 80056e6:	1d1a      	adds	r2, r3, #4
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6032      	str	r2, [r6, #0]
 80056ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80056f4:	2301      	movs	r3, #1
 80056f6:	e09c      	b.n	8005832 <_printf_i+0x1e6>
 80056f8:	6833      	ldr	r3, [r6, #0]
 80056fa:	6820      	ldr	r0, [r4, #0]
 80056fc:	1d19      	adds	r1, r3, #4
 80056fe:	6031      	str	r1, [r6, #0]
 8005700:	0606      	lsls	r6, r0, #24
 8005702:	d501      	bpl.n	8005708 <_printf_i+0xbc>
 8005704:	681d      	ldr	r5, [r3, #0]
 8005706:	e003      	b.n	8005710 <_printf_i+0xc4>
 8005708:	0645      	lsls	r5, r0, #25
 800570a:	d5fb      	bpl.n	8005704 <_printf_i+0xb8>
 800570c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005710:	2d00      	cmp	r5, #0
 8005712:	da03      	bge.n	800571c <_printf_i+0xd0>
 8005714:	232d      	movs	r3, #45	@ 0x2d
 8005716:	426d      	negs	r5, r5
 8005718:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800571c:	4858      	ldr	r0, [pc, #352]	@ (8005880 <_printf_i+0x234>)
 800571e:	230a      	movs	r3, #10
 8005720:	e011      	b.n	8005746 <_printf_i+0xfa>
 8005722:	6821      	ldr	r1, [r4, #0]
 8005724:	6833      	ldr	r3, [r6, #0]
 8005726:	0608      	lsls	r0, r1, #24
 8005728:	f853 5b04 	ldr.w	r5, [r3], #4
 800572c:	d402      	bmi.n	8005734 <_printf_i+0xe8>
 800572e:	0649      	lsls	r1, r1, #25
 8005730:	bf48      	it	mi
 8005732:	b2ad      	uxthmi	r5, r5
 8005734:	2f6f      	cmp	r7, #111	@ 0x6f
 8005736:	4852      	ldr	r0, [pc, #328]	@ (8005880 <_printf_i+0x234>)
 8005738:	6033      	str	r3, [r6, #0]
 800573a:	bf14      	ite	ne
 800573c:	230a      	movne	r3, #10
 800573e:	2308      	moveq	r3, #8
 8005740:	2100      	movs	r1, #0
 8005742:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005746:	6866      	ldr	r6, [r4, #4]
 8005748:	60a6      	str	r6, [r4, #8]
 800574a:	2e00      	cmp	r6, #0
 800574c:	db05      	blt.n	800575a <_printf_i+0x10e>
 800574e:	6821      	ldr	r1, [r4, #0]
 8005750:	432e      	orrs	r6, r5
 8005752:	f021 0104 	bic.w	r1, r1, #4
 8005756:	6021      	str	r1, [r4, #0]
 8005758:	d04b      	beq.n	80057f2 <_printf_i+0x1a6>
 800575a:	4616      	mov	r6, r2
 800575c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005760:	fb03 5711 	mls	r7, r3, r1, r5
 8005764:	5dc7      	ldrb	r7, [r0, r7]
 8005766:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800576a:	462f      	mov	r7, r5
 800576c:	42bb      	cmp	r3, r7
 800576e:	460d      	mov	r5, r1
 8005770:	d9f4      	bls.n	800575c <_printf_i+0x110>
 8005772:	2b08      	cmp	r3, #8
 8005774:	d10b      	bne.n	800578e <_printf_i+0x142>
 8005776:	6823      	ldr	r3, [r4, #0]
 8005778:	07df      	lsls	r7, r3, #31
 800577a:	d508      	bpl.n	800578e <_printf_i+0x142>
 800577c:	6923      	ldr	r3, [r4, #16]
 800577e:	6861      	ldr	r1, [r4, #4]
 8005780:	4299      	cmp	r1, r3
 8005782:	bfde      	ittt	le
 8005784:	2330      	movle	r3, #48	@ 0x30
 8005786:	f806 3c01 	strble.w	r3, [r6, #-1]
 800578a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800578e:	1b92      	subs	r2, r2, r6
 8005790:	6122      	str	r2, [r4, #16]
 8005792:	f8cd a000 	str.w	sl, [sp]
 8005796:	464b      	mov	r3, r9
 8005798:	aa03      	add	r2, sp, #12
 800579a:	4621      	mov	r1, r4
 800579c:	4640      	mov	r0, r8
 800579e:	f7ff fee7 	bl	8005570 <_printf_common>
 80057a2:	3001      	adds	r0, #1
 80057a4:	d14a      	bne.n	800583c <_printf_i+0x1f0>
 80057a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80057aa:	b004      	add	sp, #16
 80057ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057b0:	6823      	ldr	r3, [r4, #0]
 80057b2:	f043 0320 	orr.w	r3, r3, #32
 80057b6:	6023      	str	r3, [r4, #0]
 80057b8:	4832      	ldr	r0, [pc, #200]	@ (8005884 <_printf_i+0x238>)
 80057ba:	2778      	movs	r7, #120	@ 0x78
 80057bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80057c0:	6823      	ldr	r3, [r4, #0]
 80057c2:	6831      	ldr	r1, [r6, #0]
 80057c4:	061f      	lsls	r7, r3, #24
 80057c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80057ca:	d402      	bmi.n	80057d2 <_printf_i+0x186>
 80057cc:	065f      	lsls	r7, r3, #25
 80057ce:	bf48      	it	mi
 80057d0:	b2ad      	uxthmi	r5, r5
 80057d2:	6031      	str	r1, [r6, #0]
 80057d4:	07d9      	lsls	r1, r3, #31
 80057d6:	bf44      	itt	mi
 80057d8:	f043 0320 	orrmi.w	r3, r3, #32
 80057dc:	6023      	strmi	r3, [r4, #0]
 80057de:	b11d      	cbz	r5, 80057e8 <_printf_i+0x19c>
 80057e0:	2310      	movs	r3, #16
 80057e2:	e7ad      	b.n	8005740 <_printf_i+0xf4>
 80057e4:	4826      	ldr	r0, [pc, #152]	@ (8005880 <_printf_i+0x234>)
 80057e6:	e7e9      	b.n	80057bc <_printf_i+0x170>
 80057e8:	6823      	ldr	r3, [r4, #0]
 80057ea:	f023 0320 	bic.w	r3, r3, #32
 80057ee:	6023      	str	r3, [r4, #0]
 80057f0:	e7f6      	b.n	80057e0 <_printf_i+0x194>
 80057f2:	4616      	mov	r6, r2
 80057f4:	e7bd      	b.n	8005772 <_printf_i+0x126>
 80057f6:	6833      	ldr	r3, [r6, #0]
 80057f8:	6825      	ldr	r5, [r4, #0]
 80057fa:	6961      	ldr	r1, [r4, #20]
 80057fc:	1d18      	adds	r0, r3, #4
 80057fe:	6030      	str	r0, [r6, #0]
 8005800:	062e      	lsls	r6, r5, #24
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	d501      	bpl.n	800580a <_printf_i+0x1be>
 8005806:	6019      	str	r1, [r3, #0]
 8005808:	e002      	b.n	8005810 <_printf_i+0x1c4>
 800580a:	0668      	lsls	r0, r5, #25
 800580c:	d5fb      	bpl.n	8005806 <_printf_i+0x1ba>
 800580e:	8019      	strh	r1, [r3, #0]
 8005810:	2300      	movs	r3, #0
 8005812:	6123      	str	r3, [r4, #16]
 8005814:	4616      	mov	r6, r2
 8005816:	e7bc      	b.n	8005792 <_printf_i+0x146>
 8005818:	6833      	ldr	r3, [r6, #0]
 800581a:	1d1a      	adds	r2, r3, #4
 800581c:	6032      	str	r2, [r6, #0]
 800581e:	681e      	ldr	r6, [r3, #0]
 8005820:	6862      	ldr	r2, [r4, #4]
 8005822:	2100      	movs	r1, #0
 8005824:	4630      	mov	r0, r6
 8005826:	f7fa fcab 	bl	8000180 <memchr>
 800582a:	b108      	cbz	r0, 8005830 <_printf_i+0x1e4>
 800582c:	1b80      	subs	r0, r0, r6
 800582e:	6060      	str	r0, [r4, #4]
 8005830:	6863      	ldr	r3, [r4, #4]
 8005832:	6123      	str	r3, [r4, #16]
 8005834:	2300      	movs	r3, #0
 8005836:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800583a:	e7aa      	b.n	8005792 <_printf_i+0x146>
 800583c:	6923      	ldr	r3, [r4, #16]
 800583e:	4632      	mov	r2, r6
 8005840:	4649      	mov	r1, r9
 8005842:	4640      	mov	r0, r8
 8005844:	47d0      	blx	sl
 8005846:	3001      	adds	r0, #1
 8005848:	d0ad      	beq.n	80057a6 <_printf_i+0x15a>
 800584a:	6823      	ldr	r3, [r4, #0]
 800584c:	079b      	lsls	r3, r3, #30
 800584e:	d413      	bmi.n	8005878 <_printf_i+0x22c>
 8005850:	68e0      	ldr	r0, [r4, #12]
 8005852:	9b03      	ldr	r3, [sp, #12]
 8005854:	4298      	cmp	r0, r3
 8005856:	bfb8      	it	lt
 8005858:	4618      	movlt	r0, r3
 800585a:	e7a6      	b.n	80057aa <_printf_i+0x15e>
 800585c:	2301      	movs	r3, #1
 800585e:	4632      	mov	r2, r6
 8005860:	4649      	mov	r1, r9
 8005862:	4640      	mov	r0, r8
 8005864:	47d0      	blx	sl
 8005866:	3001      	adds	r0, #1
 8005868:	d09d      	beq.n	80057a6 <_printf_i+0x15a>
 800586a:	3501      	adds	r5, #1
 800586c:	68e3      	ldr	r3, [r4, #12]
 800586e:	9903      	ldr	r1, [sp, #12]
 8005870:	1a5b      	subs	r3, r3, r1
 8005872:	42ab      	cmp	r3, r5
 8005874:	dcf2      	bgt.n	800585c <_printf_i+0x210>
 8005876:	e7eb      	b.n	8005850 <_printf_i+0x204>
 8005878:	2500      	movs	r5, #0
 800587a:	f104 0619 	add.w	r6, r4, #25
 800587e:	e7f5      	b.n	800586c <_printf_i+0x220>
 8005880:	08005d31 	.word	0x08005d31
 8005884:	08005d42 	.word	0x08005d42

08005888 <__sflush_r>:
 8005888:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800588c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005890:	0716      	lsls	r6, r2, #28
 8005892:	4605      	mov	r5, r0
 8005894:	460c      	mov	r4, r1
 8005896:	d454      	bmi.n	8005942 <__sflush_r+0xba>
 8005898:	684b      	ldr	r3, [r1, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	dc02      	bgt.n	80058a4 <__sflush_r+0x1c>
 800589e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	dd48      	ble.n	8005936 <__sflush_r+0xae>
 80058a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80058a6:	2e00      	cmp	r6, #0
 80058a8:	d045      	beq.n	8005936 <__sflush_r+0xae>
 80058aa:	2300      	movs	r3, #0
 80058ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80058b0:	682f      	ldr	r7, [r5, #0]
 80058b2:	6a21      	ldr	r1, [r4, #32]
 80058b4:	602b      	str	r3, [r5, #0]
 80058b6:	d030      	beq.n	800591a <__sflush_r+0x92>
 80058b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80058ba:	89a3      	ldrh	r3, [r4, #12]
 80058bc:	0759      	lsls	r1, r3, #29
 80058be:	d505      	bpl.n	80058cc <__sflush_r+0x44>
 80058c0:	6863      	ldr	r3, [r4, #4]
 80058c2:	1ad2      	subs	r2, r2, r3
 80058c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80058c6:	b10b      	cbz	r3, 80058cc <__sflush_r+0x44>
 80058c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80058ca:	1ad2      	subs	r2, r2, r3
 80058cc:	2300      	movs	r3, #0
 80058ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80058d0:	6a21      	ldr	r1, [r4, #32]
 80058d2:	4628      	mov	r0, r5
 80058d4:	47b0      	blx	r6
 80058d6:	1c43      	adds	r3, r0, #1
 80058d8:	89a3      	ldrh	r3, [r4, #12]
 80058da:	d106      	bne.n	80058ea <__sflush_r+0x62>
 80058dc:	6829      	ldr	r1, [r5, #0]
 80058de:	291d      	cmp	r1, #29
 80058e0:	d82b      	bhi.n	800593a <__sflush_r+0xb2>
 80058e2:	4a2a      	ldr	r2, [pc, #168]	@ (800598c <__sflush_r+0x104>)
 80058e4:	40ca      	lsrs	r2, r1
 80058e6:	07d6      	lsls	r6, r2, #31
 80058e8:	d527      	bpl.n	800593a <__sflush_r+0xb2>
 80058ea:	2200      	movs	r2, #0
 80058ec:	6062      	str	r2, [r4, #4]
 80058ee:	04d9      	lsls	r1, r3, #19
 80058f0:	6922      	ldr	r2, [r4, #16]
 80058f2:	6022      	str	r2, [r4, #0]
 80058f4:	d504      	bpl.n	8005900 <__sflush_r+0x78>
 80058f6:	1c42      	adds	r2, r0, #1
 80058f8:	d101      	bne.n	80058fe <__sflush_r+0x76>
 80058fa:	682b      	ldr	r3, [r5, #0]
 80058fc:	b903      	cbnz	r3, 8005900 <__sflush_r+0x78>
 80058fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8005900:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005902:	602f      	str	r7, [r5, #0]
 8005904:	b1b9      	cbz	r1, 8005936 <__sflush_r+0xae>
 8005906:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800590a:	4299      	cmp	r1, r3
 800590c:	d002      	beq.n	8005914 <__sflush_r+0x8c>
 800590e:	4628      	mov	r0, r5
 8005910:	f7ff fbf4 	bl	80050fc <_free_r>
 8005914:	2300      	movs	r3, #0
 8005916:	6363      	str	r3, [r4, #52]	@ 0x34
 8005918:	e00d      	b.n	8005936 <__sflush_r+0xae>
 800591a:	2301      	movs	r3, #1
 800591c:	4628      	mov	r0, r5
 800591e:	47b0      	blx	r6
 8005920:	4602      	mov	r2, r0
 8005922:	1c50      	adds	r0, r2, #1
 8005924:	d1c9      	bne.n	80058ba <__sflush_r+0x32>
 8005926:	682b      	ldr	r3, [r5, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d0c6      	beq.n	80058ba <__sflush_r+0x32>
 800592c:	2b1d      	cmp	r3, #29
 800592e:	d001      	beq.n	8005934 <__sflush_r+0xac>
 8005930:	2b16      	cmp	r3, #22
 8005932:	d11e      	bne.n	8005972 <__sflush_r+0xea>
 8005934:	602f      	str	r7, [r5, #0]
 8005936:	2000      	movs	r0, #0
 8005938:	e022      	b.n	8005980 <__sflush_r+0xf8>
 800593a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800593e:	b21b      	sxth	r3, r3
 8005940:	e01b      	b.n	800597a <__sflush_r+0xf2>
 8005942:	690f      	ldr	r7, [r1, #16]
 8005944:	2f00      	cmp	r7, #0
 8005946:	d0f6      	beq.n	8005936 <__sflush_r+0xae>
 8005948:	0793      	lsls	r3, r2, #30
 800594a:	680e      	ldr	r6, [r1, #0]
 800594c:	bf08      	it	eq
 800594e:	694b      	ldreq	r3, [r1, #20]
 8005950:	600f      	str	r7, [r1, #0]
 8005952:	bf18      	it	ne
 8005954:	2300      	movne	r3, #0
 8005956:	eba6 0807 	sub.w	r8, r6, r7
 800595a:	608b      	str	r3, [r1, #8]
 800595c:	f1b8 0f00 	cmp.w	r8, #0
 8005960:	dde9      	ble.n	8005936 <__sflush_r+0xae>
 8005962:	6a21      	ldr	r1, [r4, #32]
 8005964:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005966:	4643      	mov	r3, r8
 8005968:	463a      	mov	r2, r7
 800596a:	4628      	mov	r0, r5
 800596c:	47b0      	blx	r6
 800596e:	2800      	cmp	r0, #0
 8005970:	dc08      	bgt.n	8005984 <__sflush_r+0xfc>
 8005972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005976:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800597a:	81a3      	strh	r3, [r4, #12]
 800597c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005984:	4407      	add	r7, r0
 8005986:	eba8 0800 	sub.w	r8, r8, r0
 800598a:	e7e7      	b.n	800595c <__sflush_r+0xd4>
 800598c:	20400001 	.word	0x20400001

08005990 <_fflush_r>:
 8005990:	b538      	push	{r3, r4, r5, lr}
 8005992:	690b      	ldr	r3, [r1, #16]
 8005994:	4605      	mov	r5, r0
 8005996:	460c      	mov	r4, r1
 8005998:	b913      	cbnz	r3, 80059a0 <_fflush_r+0x10>
 800599a:	2500      	movs	r5, #0
 800599c:	4628      	mov	r0, r5
 800599e:	bd38      	pop	{r3, r4, r5, pc}
 80059a0:	b118      	cbz	r0, 80059aa <_fflush_r+0x1a>
 80059a2:	6a03      	ldr	r3, [r0, #32]
 80059a4:	b90b      	cbnz	r3, 80059aa <_fflush_r+0x1a>
 80059a6:	f7ff f9af 	bl	8004d08 <__sinit>
 80059aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0f3      	beq.n	800599a <_fflush_r+0xa>
 80059b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80059b4:	07d0      	lsls	r0, r2, #31
 80059b6:	d404      	bmi.n	80059c2 <_fflush_r+0x32>
 80059b8:	0599      	lsls	r1, r3, #22
 80059ba:	d402      	bmi.n	80059c2 <_fflush_r+0x32>
 80059bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059be:	f7ff fb9a 	bl	80050f6 <__retarget_lock_acquire_recursive>
 80059c2:	4628      	mov	r0, r5
 80059c4:	4621      	mov	r1, r4
 80059c6:	f7ff ff5f 	bl	8005888 <__sflush_r>
 80059ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059cc:	07da      	lsls	r2, r3, #31
 80059ce:	4605      	mov	r5, r0
 80059d0:	d4e4      	bmi.n	800599c <_fflush_r+0xc>
 80059d2:	89a3      	ldrh	r3, [r4, #12]
 80059d4:	059b      	lsls	r3, r3, #22
 80059d6:	d4e1      	bmi.n	800599c <_fflush_r+0xc>
 80059d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059da:	f7ff fb8d 	bl	80050f8 <__retarget_lock_release_recursive>
 80059de:	e7dd      	b.n	800599c <_fflush_r+0xc>

080059e0 <__swhatbuf_r>:
 80059e0:	b570      	push	{r4, r5, r6, lr}
 80059e2:	460c      	mov	r4, r1
 80059e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059e8:	2900      	cmp	r1, #0
 80059ea:	b096      	sub	sp, #88	@ 0x58
 80059ec:	4615      	mov	r5, r2
 80059ee:	461e      	mov	r6, r3
 80059f0:	da0d      	bge.n	8005a0e <__swhatbuf_r+0x2e>
 80059f2:	89a3      	ldrh	r3, [r4, #12]
 80059f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80059f8:	f04f 0100 	mov.w	r1, #0
 80059fc:	bf14      	ite	ne
 80059fe:	2340      	movne	r3, #64	@ 0x40
 8005a00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005a04:	2000      	movs	r0, #0
 8005a06:	6031      	str	r1, [r6, #0]
 8005a08:	602b      	str	r3, [r5, #0]
 8005a0a:	b016      	add	sp, #88	@ 0x58
 8005a0c:	bd70      	pop	{r4, r5, r6, pc}
 8005a0e:	466a      	mov	r2, sp
 8005a10:	f000 f848 	bl	8005aa4 <_fstat_r>
 8005a14:	2800      	cmp	r0, #0
 8005a16:	dbec      	blt.n	80059f2 <__swhatbuf_r+0x12>
 8005a18:	9901      	ldr	r1, [sp, #4]
 8005a1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005a1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005a22:	4259      	negs	r1, r3
 8005a24:	4159      	adcs	r1, r3
 8005a26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a2a:	e7eb      	b.n	8005a04 <__swhatbuf_r+0x24>

08005a2c <__smakebuf_r>:
 8005a2c:	898b      	ldrh	r3, [r1, #12]
 8005a2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a30:	079d      	lsls	r5, r3, #30
 8005a32:	4606      	mov	r6, r0
 8005a34:	460c      	mov	r4, r1
 8005a36:	d507      	bpl.n	8005a48 <__smakebuf_r+0x1c>
 8005a38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005a3c:	6023      	str	r3, [r4, #0]
 8005a3e:	6123      	str	r3, [r4, #16]
 8005a40:	2301      	movs	r3, #1
 8005a42:	6163      	str	r3, [r4, #20]
 8005a44:	b003      	add	sp, #12
 8005a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a48:	ab01      	add	r3, sp, #4
 8005a4a:	466a      	mov	r2, sp
 8005a4c:	f7ff ffc8 	bl	80059e0 <__swhatbuf_r>
 8005a50:	9f00      	ldr	r7, [sp, #0]
 8005a52:	4605      	mov	r5, r0
 8005a54:	4639      	mov	r1, r7
 8005a56:	4630      	mov	r0, r6
 8005a58:	f7ff fbbc 	bl	80051d4 <_malloc_r>
 8005a5c:	b948      	cbnz	r0, 8005a72 <__smakebuf_r+0x46>
 8005a5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a62:	059a      	lsls	r2, r3, #22
 8005a64:	d4ee      	bmi.n	8005a44 <__smakebuf_r+0x18>
 8005a66:	f023 0303 	bic.w	r3, r3, #3
 8005a6a:	f043 0302 	orr.w	r3, r3, #2
 8005a6e:	81a3      	strh	r3, [r4, #12]
 8005a70:	e7e2      	b.n	8005a38 <__smakebuf_r+0xc>
 8005a72:	89a3      	ldrh	r3, [r4, #12]
 8005a74:	6020      	str	r0, [r4, #0]
 8005a76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a7a:	81a3      	strh	r3, [r4, #12]
 8005a7c:	9b01      	ldr	r3, [sp, #4]
 8005a7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005a82:	b15b      	cbz	r3, 8005a9c <__smakebuf_r+0x70>
 8005a84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a88:	4630      	mov	r0, r6
 8005a8a:	f000 f81d 	bl	8005ac8 <_isatty_r>
 8005a8e:	b128      	cbz	r0, 8005a9c <__smakebuf_r+0x70>
 8005a90:	89a3      	ldrh	r3, [r4, #12]
 8005a92:	f023 0303 	bic.w	r3, r3, #3
 8005a96:	f043 0301 	orr.w	r3, r3, #1
 8005a9a:	81a3      	strh	r3, [r4, #12]
 8005a9c:	89a3      	ldrh	r3, [r4, #12]
 8005a9e:	431d      	orrs	r5, r3
 8005aa0:	81a5      	strh	r5, [r4, #12]
 8005aa2:	e7cf      	b.n	8005a44 <__smakebuf_r+0x18>

08005aa4 <_fstat_r>:
 8005aa4:	b538      	push	{r3, r4, r5, lr}
 8005aa6:	4d07      	ldr	r5, [pc, #28]	@ (8005ac4 <_fstat_r+0x20>)
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	4604      	mov	r4, r0
 8005aac:	4608      	mov	r0, r1
 8005aae:	4611      	mov	r1, r2
 8005ab0:	602b      	str	r3, [r5, #0]
 8005ab2:	f7fb f878 	bl	8000ba6 <_fstat>
 8005ab6:	1c43      	adds	r3, r0, #1
 8005ab8:	d102      	bne.n	8005ac0 <_fstat_r+0x1c>
 8005aba:	682b      	ldr	r3, [r5, #0]
 8005abc:	b103      	cbz	r3, 8005ac0 <_fstat_r+0x1c>
 8005abe:	6023      	str	r3, [r4, #0]
 8005ac0:	bd38      	pop	{r3, r4, r5, pc}
 8005ac2:	bf00      	nop
 8005ac4:	200002f8 	.word	0x200002f8

08005ac8 <_isatty_r>:
 8005ac8:	b538      	push	{r3, r4, r5, lr}
 8005aca:	4d06      	ldr	r5, [pc, #24]	@ (8005ae4 <_isatty_r+0x1c>)
 8005acc:	2300      	movs	r3, #0
 8005ace:	4604      	mov	r4, r0
 8005ad0:	4608      	mov	r0, r1
 8005ad2:	602b      	str	r3, [r5, #0]
 8005ad4:	f7fb f877 	bl	8000bc6 <_isatty>
 8005ad8:	1c43      	adds	r3, r0, #1
 8005ada:	d102      	bne.n	8005ae2 <_isatty_r+0x1a>
 8005adc:	682b      	ldr	r3, [r5, #0]
 8005ade:	b103      	cbz	r3, 8005ae2 <_isatty_r+0x1a>
 8005ae0:	6023      	str	r3, [r4, #0]
 8005ae2:	bd38      	pop	{r3, r4, r5, pc}
 8005ae4:	200002f8 	.word	0x200002f8

08005ae8 <_sbrk_r>:
 8005ae8:	b538      	push	{r3, r4, r5, lr}
 8005aea:	4d06      	ldr	r5, [pc, #24]	@ (8005b04 <_sbrk_r+0x1c>)
 8005aec:	2300      	movs	r3, #0
 8005aee:	4604      	mov	r4, r0
 8005af0:	4608      	mov	r0, r1
 8005af2:	602b      	str	r3, [r5, #0]
 8005af4:	f7fb f880 	bl	8000bf8 <_sbrk>
 8005af8:	1c43      	adds	r3, r0, #1
 8005afa:	d102      	bne.n	8005b02 <_sbrk_r+0x1a>
 8005afc:	682b      	ldr	r3, [r5, #0]
 8005afe:	b103      	cbz	r3, 8005b02 <_sbrk_r+0x1a>
 8005b00:	6023      	str	r3, [r4, #0]
 8005b02:	bd38      	pop	{r3, r4, r5, pc}
 8005b04:	200002f8 	.word	0x200002f8

08005b08 <_init>:
 8005b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b0a:	bf00      	nop
 8005b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b0e:	bc08      	pop	{r3}
 8005b10:	469e      	mov	lr, r3
 8005b12:	4770      	bx	lr

08005b14 <_fini>:
 8005b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b16:	bf00      	nop
 8005b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b1a:	bc08      	pop	{r3}
 8005b1c:	469e      	mov	lr, r3
 8005b1e:	4770      	bx	lr
