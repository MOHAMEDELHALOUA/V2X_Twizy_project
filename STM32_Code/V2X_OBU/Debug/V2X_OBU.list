
V2X_OBU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c438  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000080c  0800c578  0800c578  0000d578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cd84  0800cd84  0000dd84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cd8c  0800cd8c  0000dd8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800cd90  0800cd90  0000dd90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e4  20000008  0800cd94  0000e008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001d34  200001ec  0800cf78  0000e1ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001f20  0800cf78  0000ef20  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000e1ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022fc5  00000000  00000000  0000e21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000470f  00000000  00000000  000311e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000021b0  00000000  00000000  000358f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000019f4  00000000  00000000  00037aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00005514  00000000  00000000  00039494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e955  00000000  00000000  0003e9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ee65c  00000000  00000000  0005d2fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0014b959  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009f9c  00000000  00000000  0014b99c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  00155938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001ec 	.word	0x200001ec
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c560 	.word	0x0800c560

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f0 	.word	0x200001f0
 800017c:	0800c560 	.word	0x0800c560

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b6c:	f000 b988 	b.w	8000e80 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	468e      	mov	lr, r1
 8000b90:	4604      	mov	r4, r0
 8000b92:	4688      	mov	r8, r1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d14a      	bne.n	8000c2e <__udivmoddi4+0xa6>
 8000b98:	428a      	cmp	r2, r1
 8000b9a:	4617      	mov	r7, r2
 8000b9c:	d962      	bls.n	8000c64 <__udivmoddi4+0xdc>
 8000b9e:	fab2 f682 	clz	r6, r2
 8000ba2:	b14e      	cbz	r6, 8000bb8 <__udivmoddi4+0x30>
 8000ba4:	f1c6 0320 	rsb	r3, r6, #32
 8000ba8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bac:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb0:	40b7      	lsls	r7, r6
 8000bb2:	ea43 0808 	orr.w	r8, r3, r8
 8000bb6:	40b4      	lsls	r4, r6
 8000bb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bbc:	fa1f fc87 	uxth.w	ip, r7
 8000bc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bc4:	0c23      	lsrs	r3, r4, #16
 8000bc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bce:	fb01 f20c 	mul.w	r2, r1, ip
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d909      	bls.n	8000bea <__udivmoddi4+0x62>
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000bdc:	f080 80ea 	bcs.w	8000db4 <__udivmoddi4+0x22c>
 8000be0:	429a      	cmp	r2, r3
 8000be2:	f240 80e7 	bls.w	8000db4 <__udivmoddi4+0x22c>
 8000be6:	3902      	subs	r1, #2
 8000be8:	443b      	add	r3, r7
 8000bea:	1a9a      	subs	r2, r3, r2
 8000bec:	b2a3      	uxth	r3, r4
 8000bee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bfe:	459c      	cmp	ip, r3
 8000c00:	d909      	bls.n	8000c16 <__udivmoddi4+0x8e>
 8000c02:	18fb      	adds	r3, r7, r3
 8000c04:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c08:	f080 80d6 	bcs.w	8000db8 <__udivmoddi4+0x230>
 8000c0c:	459c      	cmp	ip, r3
 8000c0e:	f240 80d3 	bls.w	8000db8 <__udivmoddi4+0x230>
 8000c12:	443b      	add	r3, r7
 8000c14:	3802      	subs	r0, #2
 8000c16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c1a:	eba3 030c 	sub.w	r3, r3, ip
 8000c1e:	2100      	movs	r1, #0
 8000c20:	b11d      	cbz	r5, 8000c2a <__udivmoddi4+0xa2>
 8000c22:	40f3      	lsrs	r3, r6
 8000c24:	2200      	movs	r2, #0
 8000c26:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d905      	bls.n	8000c3e <__udivmoddi4+0xb6>
 8000c32:	b10d      	cbz	r5, 8000c38 <__udivmoddi4+0xb0>
 8000c34:	e9c5 0100 	strd	r0, r1, [r5]
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4608      	mov	r0, r1
 8000c3c:	e7f5      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000c3e:	fab3 f183 	clz	r1, r3
 8000c42:	2900      	cmp	r1, #0
 8000c44:	d146      	bne.n	8000cd4 <__udivmoddi4+0x14c>
 8000c46:	4573      	cmp	r3, lr
 8000c48:	d302      	bcc.n	8000c50 <__udivmoddi4+0xc8>
 8000c4a:	4282      	cmp	r2, r0
 8000c4c:	f200 8105 	bhi.w	8000e5a <__udivmoddi4+0x2d2>
 8000c50:	1a84      	subs	r4, r0, r2
 8000c52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	4690      	mov	r8, r2
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	d0e5      	beq.n	8000c2a <__udivmoddi4+0xa2>
 8000c5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000c62:	e7e2      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	f000 8090 	beq.w	8000d8a <__udivmoddi4+0x202>
 8000c6a:	fab2 f682 	clz	r6, r2
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	f040 80a4 	bne.w	8000dbc <__udivmoddi4+0x234>
 8000c74:	1a8a      	subs	r2, r1, r2
 8000c76:	0c03      	lsrs	r3, r0, #16
 8000c78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c7c:	b280      	uxth	r0, r0
 8000c7e:	b2bc      	uxth	r4, r7
 8000c80:	2101      	movs	r1, #1
 8000c82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d907      	bls.n	8000ca6 <__udivmoddi4+0x11e>
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000c9c:	d202      	bcs.n	8000ca4 <__udivmoddi4+0x11c>
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	f200 80e0 	bhi.w	8000e64 <__udivmoddi4+0x2dc>
 8000ca4:	46c4      	mov	ip, r8
 8000ca6:	1a9b      	subs	r3, r3, r2
 8000ca8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cb0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cb4:	fb02 f404 	mul.w	r4, r2, r4
 8000cb8:	429c      	cmp	r4, r3
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x144>
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x142>
 8000cc4:	429c      	cmp	r4, r3
 8000cc6:	f200 80ca 	bhi.w	8000e5e <__udivmoddi4+0x2d6>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	1b1b      	subs	r3, r3, r4
 8000cce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cd2:	e7a5      	b.n	8000c20 <__udivmoddi4+0x98>
 8000cd4:	f1c1 0620 	rsb	r6, r1, #32
 8000cd8:	408b      	lsls	r3, r1
 8000cda:	fa22 f706 	lsr.w	r7, r2, r6
 8000cde:	431f      	orrs	r7, r3
 8000ce0:	fa0e f401 	lsl.w	r4, lr, r1
 8000ce4:	fa20 f306 	lsr.w	r3, r0, r6
 8000ce8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cf0:	4323      	orrs	r3, r4
 8000cf2:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf6:	fa1f fc87 	uxth.w	ip, r7
 8000cfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000cfe:	0c1c      	lsrs	r4, r3, #16
 8000d00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x1a0>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d1a:	f080 809c 	bcs.w	8000e56 <__udivmoddi4+0x2ce>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f240 8099 	bls.w	8000e56 <__udivmoddi4+0x2ce>
 8000d24:	3802      	subs	r0, #2
 8000d26:	443c      	add	r4, r7
 8000d28:	eba4 040e 	sub.w	r4, r4, lr
 8000d2c:	fa1f fe83 	uxth.w	lr, r3
 8000d30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d34:	fb09 4413 	mls	r4, r9, r3, r4
 8000d38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d40:	45a4      	cmp	ip, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x1ce>
 8000d44:	193c      	adds	r4, r7, r4
 8000d46:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000d4a:	f080 8082 	bcs.w	8000e52 <__udivmoddi4+0x2ca>
 8000d4e:	45a4      	cmp	ip, r4
 8000d50:	d97f      	bls.n	8000e52 <__udivmoddi4+0x2ca>
 8000d52:	3b02      	subs	r3, #2
 8000d54:	443c      	add	r4, r7
 8000d56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d5a:	eba4 040c 	sub.w	r4, r4, ip
 8000d5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d62:	4564      	cmp	r4, ip
 8000d64:	4673      	mov	r3, lr
 8000d66:	46e1      	mov	r9, ip
 8000d68:	d362      	bcc.n	8000e30 <__udivmoddi4+0x2a8>
 8000d6a:	d05f      	beq.n	8000e2c <__udivmoddi4+0x2a4>
 8000d6c:	b15d      	cbz	r5, 8000d86 <__udivmoddi4+0x1fe>
 8000d6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000d72:	eb64 0409 	sbc.w	r4, r4, r9
 8000d76:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000d7e:	431e      	orrs	r6, r3
 8000d80:	40cc      	lsrs	r4, r1
 8000d82:	e9c5 6400 	strd	r6, r4, [r5]
 8000d86:	2100      	movs	r1, #0
 8000d88:	e74f      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000d8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d8e:	0c01      	lsrs	r1, r0, #16
 8000d90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d94:	b280      	uxth	r0, r0
 8000d96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	4638      	mov	r0, r7
 8000d9e:	463c      	mov	r4, r7
 8000da0:	46b8      	mov	r8, r7
 8000da2:	46be      	mov	lr, r7
 8000da4:	2620      	movs	r6, #32
 8000da6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000daa:	eba2 0208 	sub.w	r2, r2, r8
 8000dae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000db2:	e766      	b.n	8000c82 <__udivmoddi4+0xfa>
 8000db4:	4601      	mov	r1, r0
 8000db6:	e718      	b.n	8000bea <__udivmoddi4+0x62>
 8000db8:	4610      	mov	r0, r2
 8000dba:	e72c      	b.n	8000c16 <__udivmoddi4+0x8e>
 8000dbc:	f1c6 0220 	rsb	r2, r6, #32
 8000dc0:	fa2e f302 	lsr.w	r3, lr, r2
 8000dc4:	40b7      	lsls	r7, r6
 8000dc6:	40b1      	lsls	r1, r6
 8000dc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000dcc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dd6:	b2bc      	uxth	r4, r7
 8000dd8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ddc:	0c11      	lsrs	r1, r2, #16
 8000dde:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de2:	fb08 f904 	mul.w	r9, r8, r4
 8000de6:	40b0      	lsls	r0, r6
 8000de8:	4589      	cmp	r9, r1
 8000dea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dee:	b280      	uxth	r0, r0
 8000df0:	d93e      	bls.n	8000e70 <__udivmoddi4+0x2e8>
 8000df2:	1879      	adds	r1, r7, r1
 8000df4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000df8:	d201      	bcs.n	8000dfe <__udivmoddi4+0x276>
 8000dfa:	4589      	cmp	r9, r1
 8000dfc:	d81f      	bhi.n	8000e3e <__udivmoddi4+0x2b6>
 8000dfe:	eba1 0109 	sub.w	r1, r1, r9
 8000e02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e06:	fb09 f804 	mul.w	r8, r9, r4
 8000e0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e0e:	b292      	uxth	r2, r2
 8000e10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e14:	4542      	cmp	r2, r8
 8000e16:	d229      	bcs.n	8000e6c <__udivmoddi4+0x2e4>
 8000e18:	18ba      	adds	r2, r7, r2
 8000e1a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e1e:	d2c4      	bcs.n	8000daa <__udivmoddi4+0x222>
 8000e20:	4542      	cmp	r2, r8
 8000e22:	d2c2      	bcs.n	8000daa <__udivmoddi4+0x222>
 8000e24:	f1a9 0102 	sub.w	r1, r9, #2
 8000e28:	443a      	add	r2, r7
 8000e2a:	e7be      	b.n	8000daa <__udivmoddi4+0x222>
 8000e2c:	45f0      	cmp	r8, lr
 8000e2e:	d29d      	bcs.n	8000d6c <__udivmoddi4+0x1e4>
 8000e30:	ebbe 0302 	subs.w	r3, lr, r2
 8000e34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e38:	3801      	subs	r0, #1
 8000e3a:	46e1      	mov	r9, ip
 8000e3c:	e796      	b.n	8000d6c <__udivmoddi4+0x1e4>
 8000e3e:	eba7 0909 	sub.w	r9, r7, r9
 8000e42:	4449      	add	r1, r9
 8000e44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e4c:	fb09 f804 	mul.w	r8, r9, r4
 8000e50:	e7db      	b.n	8000e0a <__udivmoddi4+0x282>
 8000e52:	4673      	mov	r3, lr
 8000e54:	e77f      	b.n	8000d56 <__udivmoddi4+0x1ce>
 8000e56:	4650      	mov	r0, sl
 8000e58:	e766      	b.n	8000d28 <__udivmoddi4+0x1a0>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e6fd      	b.n	8000c5a <__udivmoddi4+0xd2>
 8000e5e:	443b      	add	r3, r7
 8000e60:	3a02      	subs	r2, #2
 8000e62:	e733      	b.n	8000ccc <__udivmoddi4+0x144>
 8000e64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e68:	443b      	add	r3, r7
 8000e6a:	e71c      	b.n	8000ca6 <__udivmoddi4+0x11e>
 8000e6c:	4649      	mov	r1, r9
 8000e6e:	e79c      	b.n	8000daa <__udivmoddi4+0x222>
 8000e70:	eba1 0109 	sub.w	r1, r1, r9
 8000e74:	46c4      	mov	ip, r8
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fb09 f804 	mul.w	r8, r9, r4
 8000e7e:	e7c4      	b.n	8000e0a <__udivmoddi4+0x282>

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e8c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e90:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d013      	beq.n	8000ec4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e9c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ea0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000ea4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d00b      	beq.n	8000ec4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000eac:	e000      	b.n	8000eb0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000eae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000eb0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d0f9      	beq.n	8000eae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000eba:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ec4:	687b      	ldr	r3, [r7, #4]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b085      	sub	sp, #20
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000eda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ede:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ee0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000eea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <ValidateReceivedData>:
static void StartUARTInterrupts(void);
/* USER CODE END PFP */
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//THIS IS TO VALIDATE RECEIVED DATA from ESP-NOW
static inline uint8_t ValidateReceivedData(const Item *data) {
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
    // Check if at least one byte of MAC address is non-zero
    for (int i = 0; i < 6; i++) {
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	e00b      	b.n	8000f2a <ValidateReceivedData+0x26>
        if (data->MacAddress[i] != 0) {
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4413      	add	r3, r2
 8000f18:	3310      	adds	r3, #16
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <ValidateReceivedData+0x20>
            return 1;
 8000f20:	2301      	movs	r3, #1
 8000f22:	e006      	b.n	8000f32 <ValidateReceivedData+0x2e>
    for (int i = 0; i < 6; i++) {
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	3301      	adds	r3, #1
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	2b05      	cmp	r3, #5
 8000f2e:	ddf0      	ble.n	8000f12 <ValidateReceivedData+0xe>
        }
    }
    return 0;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <ValidateReceivedCANData>:
//THIS IS TO VALIDATE RECEIVED DATA from CAN
static inline uint8_t ValidateReceivedCANData(const CANFrame *data) {
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
    return (data->can_id != 0 && data->dlc <= 8);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d005      	beq.n	8000f5a <ValidateReceivedCANData+0x1c>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	791b      	ldrb	r3, [r3, #4]
 8000f52:	2b08      	cmp	r3, #8
 8000f54:	d801      	bhi.n	8000f5a <ValidateReceivedCANData+0x1c>
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <ValidateReceivedCANData+0x1e>
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	b2db      	uxtb	r3, r3
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <PrintMAC>:
// Helper function to print MAC address
static void PrintMAC(const uint8_t *mac) {
 8000f6c:	b5b0      	push	{r4, r5, r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af04      	add	r7, sp, #16
 8000f72:	6078      	str	r0, [r7, #4]
    printf("%02X:%02X:%02X:%02X:%02X:%02X",
           mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	781b      	ldrb	r3, [r3, #0]
    printf("%02X:%02X:%02X:%02X:%02X:%02X",
 8000f78:	4618      	mov	r0, r3
           mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	781b      	ldrb	r3, [r3, #0]
    printf("%02X:%02X:%02X:%02X:%02X:%02X",
 8000f80:	461c      	mov	r4, r3
           mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3302      	adds	r3, #2
 8000f86:	781b      	ldrb	r3, [r3, #0]
    printf("%02X:%02X:%02X:%02X:%02X:%02X",
 8000f88:	461d      	mov	r5, r3
           mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3303      	adds	r3, #3
 8000f8e:	781b      	ldrb	r3, [r3, #0]
    printf("%02X:%02X:%02X:%02X:%02X:%02X",
 8000f90:	461a      	mov	r2, r3
           mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3304      	adds	r3, #4
 8000f96:	781b      	ldrb	r3, [r3, #0]
    printf("%02X:%02X:%02X:%02X:%02X:%02X",
 8000f98:	4619      	mov	r1, r3
           mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3305      	adds	r3, #5
 8000f9e:	781b      	ldrb	r3, [r3, #0]
    printf("%02X:%02X:%02X:%02X:%02X:%02X",
 8000fa0:	9302      	str	r3, [sp, #8]
 8000fa2:	9101      	str	r1, [sp, #4]
 8000fa4:	9200      	str	r2, [sp, #0]
 8000fa6:	462b      	mov	r3, r5
 8000fa8:	4622      	mov	r2, r4
 8000faa:	4601      	mov	r1, r0
 8000fac:	4803      	ldr	r0, [pc, #12]	@ (8000fbc <PrintMAC+0x50>)
 8000fae:	f009 fa63 	bl	800a478 <iprintf>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	0800c5a4 	.word	0x0800c5a4

08000fc0 <PrintCANData>:
// Helper function to print CAN data
static void PrintCANData(const CANFrame *ReceivedCANFrame) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
    if (debug_counter % DEBUG_PRINT_INTERVAL == 0) {
 8000fc8:	4b17      	ldr	r3, [pc, #92]	@ (8001028 <PrintCANData+0x68>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b17      	ldr	r3, [pc, #92]	@ (800102c <PrintCANData+0x6c>)
 8000fce:	fba3 1302 	umull	r1, r3, r3, r2
 8000fd2:	095b      	lsrs	r3, r3, #5
 8000fd4:	2164      	movs	r1, #100	@ 0x64
 8000fd6:	fb01 f303 	mul.w	r3, r1, r3
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d11f      	bne.n	8001020 <PrintCANData+0x60>
        printf("CAN ID:0x%lX DLC:%u DATA:", ReceivedCANFrame->can_id, ReceivedCANFrame->dlc);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6819      	ldr	r1, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	791b      	ldrb	r3, [r3, #4]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4811      	ldr	r0, [pc, #68]	@ (8001030 <PrintCANData+0x70>)
 8000fec:	f009 fa44 	bl	800a478 <iprintf>
        for (int i = 0; i < ReceivedCANFrame->dlc; i++) {
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	e00b      	b.n	800100e <PrintCANData+0x4e>
            printf("%02X ", ReceivedCANFrame->data[i]);
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	3305      	adds	r3, #5
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	480c      	ldr	r0, [pc, #48]	@ (8001034 <PrintCANData+0x74>)
 8001004:	f009 fa38 	bl	800a478 <iprintf>
        for (int i = 0; i < ReceivedCANFrame->dlc; i++) {
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	3301      	adds	r3, #1
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	791b      	ldrb	r3, [r3, #4]
 8001012:	461a      	mov	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4293      	cmp	r3, r2
 8001018:	dbed      	blt.n	8000ff6 <PrintCANData+0x36>
        }
        printf("\n");
 800101a:	200a      	movs	r0, #10
 800101c:	f009 fa3e 	bl	800a49c <putchar>
    }
}
 8001020:	bf00      	nop
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	2000036c 	.word	0x2000036c
 800102c:	51eb851f 	.word	0x51eb851f
 8001030:	0800c5c4 	.word	0x0800c5c4
 8001034:	0800c5e0 	.word	0x0800c5e0

08001038 <parseTwizyFrame>:
//Function to parse the CAN data and update parsedCANData:
static void parseTwizyFrame(CANFrame* ReceivedCANFrame) {
 8001038:	b5b0      	push	{r4, r5, r7, lr}
 800103a:	b09a      	sub	sp, #104	@ 0x68
 800103c:	af02      	add	r7, sp, #8
 800103e:	6078      	str	r0, [r7, #4]
    switch (ReceivedCANFrame->can_id) {
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f240 52d7 	movw	r2, #1495	@ 0x5d7
 8001048:	4293      	cmp	r3, r2
 800104a:	f000 808f 	beq.w	800116c <parseTwizyFrame+0x134>
 800104e:	f5b3 6fbb 	cmp.w	r3, #1496	@ 0x5d8
 8001052:	f080 8295 	bcs.w	8001580 <parseTwizyFrame+0x548>
 8001056:	f240 5297 	movw	r2, #1431	@ 0x597
 800105a:	4293      	cmp	r3, r2
 800105c:	f000 8241 	beq.w	80014e2 <parseTwizyFrame+0x4aa>
 8001060:	f5b3 6fb3 	cmp.w	r3, #1432	@ 0x598
 8001064:	f080 828c 	bcs.w	8001580 <parseTwizyFrame+0x548>
 8001068:	f240 4236 	movw	r2, #1078	@ 0x436
 800106c:	4293      	cmp	r3, r2
 800106e:	f200 8287 	bhi.w	8001580 <parseTwizyFrame+0x548>
 8001072:	f240 4223 	movw	r2, #1059	@ 0x423
 8001076:	4293      	cmp	r3, r2
 8001078:	d209      	bcs.n	800108e <parseTwizyFrame+0x56>
 800107a:	f240 1255 	movw	r2, #341	@ 0x155
 800107e:	4293      	cmp	r3, r2
 8001080:	d036      	beq.n	80010f0 <parseTwizyFrame+0xb8>
 8001082:	f240 129f 	movw	r2, #415	@ 0x19f
 8001086:	4293      	cmp	r3, r2
 8001088:	f000 80cc 	beq.w	8001224 <parseTwizyFrame+0x1ec>
                }
            }
            break;
        default:
            // Unknown frame - could log if needed
            break;
 800108c:	e278      	b.n	8001580 <parseTwizyFrame+0x548>
    switch (ReceivedCANFrame->can_id) {
 800108e:	f2a3 4323 	subw	r3, r3, #1059	@ 0x423
 8001092:	2b13      	cmp	r3, #19
 8001094:	f200 8274 	bhi.w	8001580 <parseTwizyFrame+0x548>
 8001098:	a201      	add	r2, pc, #4	@ (adr r2, 80010a0 <parseTwizyFrame+0x68>)
 800109a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800109e:	bf00      	nop
 80010a0:	08001351 	.word	0x08001351
 80010a4:	080013f9 	.word	0x080013f9
 80010a8:	08001453 	.word	0x08001453
 80010ac:	08001581 	.word	0x08001581
 80010b0:	08001581 	.word	0x08001581
 80010b4:	08001581 	.word	0x08001581
 80010b8:	08001581 	.word	0x08001581
 80010bc:	08001581 	.word	0x08001581
 80010c0:	08001581 	.word	0x08001581
 80010c4:	08001581 	.word	0x08001581
 80010c8:	08001581 	.word	0x08001581
 80010cc:	08001581 	.word	0x08001581
 80010d0:	08001581 	.word	0x08001581
 80010d4:	08001581 	.word	0x08001581
 80010d8:	08001581 	.word	0x08001581
 80010dc:	08001581 	.word	0x08001581
 80010e0:	08001581 	.word	0x08001581
 80010e4:	08001581 	.word	0x08001581
 80010e8:	08001581 	.word	0x08001581
 80010ec:	080012d1 	.word	0x080012d1
            if (ReceivedCANFrame->dlc >= 8) {
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	791b      	ldrb	r3, [r3, #4]
 80010f4:	2b07      	cmp	r3, #7
 80010f6:	f240 8245 	bls.w	8001584 <parseTwizyFrame+0x54c>
                uint16_t raw_soc = (ReceivedCANFrame->data[4] << 8) | ReceivedCANFrame->data[5];
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	7a5b      	ldrb	r3, [r3, #9]
 80010fe:	b21b      	sxth	r3, r3
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	b21a      	sxth	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	7a9b      	ldrb	r3, [r3, #10]
 8001108:	b21b      	sxth	r3, r3
 800110a:	4313      	orrs	r3, r2
 800110c:	b21b      	sxth	r3, r3
 800110e:	81fb      	strh	r3, [r7, #14]
                float soc = raw_soc / 400.0f;
 8001110:	89fb      	ldrh	r3, [r7, #14]
 8001112:	ee07 3a90 	vmov	s15, r3
 8001116:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800111a:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 80013ac <parseTwizyFrame+0x374>
 800111e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001122:	edc7 7a02 	vstr	s15, [r7, #8]
                parsedCANData.SOC = (unsigned short)(soc * 100);  // Convert to percentage * 100
 8001126:	edd7 7a02 	vldr	s15, [r7, #8]
 800112a:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 80013b0 <parseTwizyFrame+0x378>
 800112e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001136:	ee17 3a90 	vmov	r3, s15
 800113a:	b29a      	uxth	r2, r3
 800113c:	4b9d      	ldr	r3, [pc, #628]	@ (80013b4 <parseTwizyFrame+0x37c>)
 800113e:	801a      	strh	r2, [r3, #0]
                if (debug_counter % (DEBUG_PRINT_INTERVAL * 2) == 0) {
 8001140:	4b9d      	ldr	r3, [pc, #628]	@ (80013b8 <parseTwizyFrame+0x380>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b9d      	ldr	r3, [pc, #628]	@ (80013bc <parseTwizyFrame+0x384>)
 8001146:	fba3 1302 	umull	r1, r3, r3, r2
 800114a:	099b      	lsrs	r3, r3, #6
 800114c:	21c8      	movs	r1, #200	@ 0xc8
 800114e:	fb01 f303 	mul.w	r3, r1, r3
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	f040 8215 	bne.w	8001584 <parseTwizyFrame+0x54c>
                    printf("SoC: %.1f%%\n", soc);
 800115a:	68b8      	ldr	r0, [r7, #8]
 800115c:	f7ff f9cc 	bl	80004f8 <__aeabi_f2d>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4896      	ldr	r0, [pc, #600]	@ (80013c0 <parseTwizyFrame+0x388>)
 8001166:	f009 f987 	bl	800a478 <iprintf>
            break;
 800116a:	e20b      	b.n	8001584 <parseTwizyFrame+0x54c>
            if (ReceivedCANFrame->dlc >= 6) {
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	791b      	ldrb	r3, [r3, #4]
 8001170:	2b05      	cmp	r3, #5
 8001172:	f240 8209 	bls.w	8001588 <parseTwizyFrame+0x550>
                uint16_t displaySpeedRaw = (ReceivedCANFrame->data[0] << 8) | ReceivedCANFrame->data[1];
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	795b      	ldrb	r3, [r3, #5]
 800117a:	b21b      	sxth	r3, r3
 800117c:	021b      	lsls	r3, r3, #8
 800117e:	b21a      	sxth	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	799b      	ldrb	r3, [r3, #6]
 8001184:	b21b      	sxth	r3, r3
 8001186:	4313      	orrs	r3, r2
 8001188:	b21b      	sxth	r3, r3
 800118a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
                parsedCANData.displaySpeed = displaySpeedRaw / 100.0f;
 800118e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001192:	ee07 3a90 	vmov	s15, r3
 8001196:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800119a:	eddf 6a85 	vldr	s13, [pc, #532]	@ 80013b0 <parseTwizyFrame+0x378>
 800119e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011a2:	4b84      	ldr	r3, [pc, #528]	@ (80013b4 <parseTwizyFrame+0x37c>)
 80011a4:	edc3 7a03 	vstr	s15, [r3, #12]
                uint32_t odometerRaw = (ReceivedCANFrame->data[2] << 24) | (ReceivedCANFrame->data[3] << 16) |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	79db      	ldrb	r3, [r3, #7]
 80011ac:	061a      	lsls	r2, r3, #24
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	7a1b      	ldrb	r3, [r3, #8]
 80011b2:	041b      	lsls	r3, r3, #16
 80011b4:	431a      	orrs	r2, r3
                                       (ReceivedCANFrame->data[4] << 8) | ReceivedCANFrame->data[5];
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7a5b      	ldrb	r3, [r3, #9]
 80011ba:	021b      	lsls	r3, r3, #8
                uint32_t odometerRaw = (ReceivedCANFrame->data[2] << 24) | (ReceivedCANFrame->data[3] << 16) |
 80011bc:	4313      	orrs	r3, r2
                                       (ReceivedCANFrame->data[4] << 8) | ReceivedCANFrame->data[5];
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	7a92      	ldrb	r2, [r2, #10]
 80011c2:	4313      	orrs	r3, r2
                uint32_t odometerRaw = (ReceivedCANFrame->data[2] << 24) | (ReceivedCANFrame->data[3] << 16) |
 80011c4:	657b      	str	r3, [r7, #84]	@ 0x54
                parsedCANData.odometerKm = odometerRaw / 1600.0f;
 80011c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011c8:	ee07 3a90 	vmov	s15, r3
 80011cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011d0:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 80013c4 <parseTwizyFrame+0x38c>
 80011d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011d8:	4b76      	ldr	r3, [pc, #472]	@ (80013b4 <parseTwizyFrame+0x37c>)
 80011da:	edc3 7a02 	vstr	s15, [r3, #8]
                if (debug_counter % (DEBUG_PRINT_INTERVAL * 2) == 0) {
 80011de:	4b76      	ldr	r3, [pc, #472]	@ (80013b8 <parseTwizyFrame+0x380>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	4b76      	ldr	r3, [pc, #472]	@ (80013bc <parseTwizyFrame+0x384>)
 80011e4:	fba3 1302 	umull	r1, r3, r3, r2
 80011e8:	099b      	lsrs	r3, r3, #6
 80011ea:	21c8      	movs	r1, #200	@ 0xc8
 80011ec:	fb01 f303 	mul.w	r3, r1, r3
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f040 81c8 	bne.w	8001588 <parseTwizyFrame+0x550>
                    printf("Display: %.1f km/h | Odometer: %.1f km\n", parsedCANData.displaySpeed, parsedCANData.odometerKm);
 80011f8:	4b6e      	ldr	r3, [pc, #440]	@ (80013b4 <parseTwizyFrame+0x37c>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f97b 	bl	80004f8 <__aeabi_f2d>
 8001202:	4604      	mov	r4, r0
 8001204:	460d      	mov	r5, r1
 8001206:	4b6b      	ldr	r3, [pc, #428]	@ (80013b4 <parseTwizyFrame+0x37c>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff f974 	bl	80004f8 <__aeabi_f2d>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	e9cd 2300 	strd	r2, r3, [sp]
 8001218:	4622      	mov	r2, r4
 800121a:	462b      	mov	r3, r5
 800121c:	486a      	ldr	r0, [pc, #424]	@ (80013c8 <parseTwizyFrame+0x390>)
 800121e:	f009 f92b 	bl	800a478 <iprintf>
            break;
 8001222:	e1b1      	b.n	8001588 <parseTwizyFrame+0x550>
            if (ReceivedCANFrame->dlc >= 4) {
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	791b      	ldrb	r3, [r3, #4]
 8001228:	2b03      	cmp	r3, #3
 800122a:	f240 81af 	bls.w	800158c <parseTwizyFrame+0x554>
                uint8_t byte2 = ReceivedCANFrame->data[2];
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	79db      	ldrb	r3, [r3, #7]
 8001232:	76fb      	strb	r3, [r7, #27]
                uint8_t byte3 = ReceivedCANFrame->data[3];
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	7a1b      	ldrb	r3, [r3, #8]
 8001238:	76bb      	strb	r3, [r7, #26]
                uint16_t speedRaw = (byte2 << 4) | (byte3 & 0x0F);
 800123a:	7efb      	ldrb	r3, [r7, #27]
 800123c:	b21b      	sxth	r3, r3
 800123e:	011b      	lsls	r3, r3, #4
 8001240:	b21a      	sxth	r2, r3
 8001242:	7ebb      	ldrb	r3, [r7, #26]
 8001244:	b21b      	sxth	r3, r3
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	b21b      	sxth	r3, r3
 800124c:	4313      	orrs	r3, r2
 800124e:	b21b      	sxth	r3, r3
 8001250:	833b      	strh	r3, [r7, #24]
                int16_t speedDeviation = speedRaw - 0x7D0;
 8001252:	8b3b      	ldrh	r3, [r7, #24]
 8001254:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001258:	b29b      	uxth	r3, r3
 800125a:	82fb      	strh	r3, [r7, #22]
                float speedRPM = speedDeviation * 10.0f;
 800125c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001260:	ee07 3a90 	vmov	s15, r3
 8001264:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001268:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800126c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001270:	edc7 7a04 	vstr	s15, [r7, #16]
                parsedCANData.speedKmh = (speedRPM / 7250.0f) * 80.0f;
 8001274:	ed97 7a04 	vldr	s14, [r7, #16]
 8001278:	eddf 6a54 	vldr	s13, [pc, #336]	@ 80013cc <parseTwizyFrame+0x394>
 800127c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001280:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 80013d0 <parseTwizyFrame+0x398>
 8001284:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001288:	4b4a      	ldr	r3, [pc, #296]	@ (80013b4 <parseTwizyFrame+0x37c>)
 800128a:	edc3 7a01 	vstr	s15, [r3, #4]
                if (debug_counter % (DEBUG_PRINT_INTERVAL * 2) == 0) {
 800128e:	4b4a      	ldr	r3, [pc, #296]	@ (80013b8 <parseTwizyFrame+0x380>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	4b4a      	ldr	r3, [pc, #296]	@ (80013bc <parseTwizyFrame+0x384>)
 8001294:	fba3 1302 	umull	r1, r3, r3, r2
 8001298:	099b      	lsrs	r3, r3, #6
 800129a:	21c8      	movs	r1, #200	@ 0xc8
 800129c:	fb01 f303 	mul.w	r3, r1, r3
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f040 8172 	bne.w	800158c <parseTwizyFrame+0x554>
                    printf("Motor: %.1f km/h | RPM: %.0f\n", parsedCANData.speedKmh, speedRPM);
 80012a8:	4b42      	ldr	r3, [pc, #264]	@ (80013b4 <parseTwizyFrame+0x37c>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff f923 	bl	80004f8 <__aeabi_f2d>
 80012b2:	4604      	mov	r4, r0
 80012b4:	460d      	mov	r5, r1
 80012b6:	6938      	ldr	r0, [r7, #16]
 80012b8:	f7ff f91e 	bl	80004f8 <__aeabi_f2d>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	e9cd 2300 	strd	r2, r3, [sp]
 80012c4:	4622      	mov	r2, r4
 80012c6:	462b      	mov	r3, r5
 80012c8:	4842      	ldr	r0, [pc, #264]	@ (80013d4 <parseTwizyFrame+0x39c>)
 80012ca:	f009 f8d5 	bl	800a478 <iprintf>
            break;
 80012ce:	e15d      	b.n	800158c <parseTwizyFrame+0x554>
            if (ReceivedCANFrame->dlc >= 4) {
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	791b      	ldrb	r3, [r3, #4]
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	f240 815b 	bls.w	8001590 <parseTwizyFrame+0x558>
                uint32_t minuteCounter = (ReceivedCANFrame->data[0] << 24) | (ReceivedCANFrame->data[1] << 16) |
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	795b      	ldrb	r3, [r3, #5]
 80012de:	061a      	lsls	r2, r3, #24
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	799b      	ldrb	r3, [r3, #6]
 80012e4:	041b      	lsls	r3, r3, #16
 80012e6:	431a      	orrs	r2, r3
                                         (ReceivedCANFrame->data[2] << 8) | ReceivedCANFrame->data[3];
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	79db      	ldrb	r3, [r3, #7]
 80012ec:	021b      	lsls	r3, r3, #8
                uint32_t minuteCounter = (ReceivedCANFrame->data[0] << 24) | (ReceivedCANFrame->data[1] << 16) |
 80012ee:	4313      	orrs	r3, r2
                                         (ReceivedCANFrame->data[2] << 8) | ReceivedCANFrame->data[3];
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	7a12      	ldrb	r2, [r2, #8]
 80012f4:	4313      	orrs	r3, r2
                uint32_t minuteCounter = (ReceivedCANFrame->data[0] << 24) | (ReceivedCANFrame->data[1] << 16) |
 80012f6:	647b      	str	r3, [r7, #68]	@ 0x44
                uint32_t hours = minuteCounter / 60;
 80012f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80012fa:	4a37      	ldr	r2, [pc, #220]	@ (80013d8 <parseTwizyFrame+0x3a0>)
 80012fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001300:	095b      	lsrs	r3, r3, #5
 8001302:	643b      	str	r3, [r7, #64]	@ 0x40
                uint32_t days = hours / 24;
 8001304:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001306:	4a35      	ldr	r2, [pc, #212]	@ (80013dc <parseTwizyFrame+0x3a4>)
 8001308:	fba2 2303 	umull	r2, r3, r2, r3
 800130c:	091b      	lsrs	r3, r3, #4
 800130e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                uint32_t remainingHours = hours % 24;
 8001310:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001312:	4b32      	ldr	r3, [pc, #200]	@ (80013dc <parseTwizyFrame+0x3a4>)
 8001314:	fba3 1302 	umull	r1, r3, r3, r2
 8001318:	0919      	lsrs	r1, r3, #4
 800131a:	460b      	mov	r3, r1
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	440b      	add	r3, r1
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	63bb      	str	r3, [r7, #56]	@ 0x38
                if (debug_counter % (DEBUG_PRINT_INTERVAL * 5) == 0) {
 8001326:	4b24      	ldr	r3, [pc, #144]	@ (80013b8 <parseTwizyFrame+0x380>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	4b2d      	ldr	r3, [pc, #180]	@ (80013e0 <parseTwizyFrame+0x3a8>)
 800132c:	fba3 1302 	umull	r1, r3, r3, r2
 8001330:	095b      	lsrs	r3, r3, #5
 8001332:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001336:	fb01 f303 	mul.w	r3, r1, r3
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b00      	cmp	r3, #0
 800133e:	f040 8127 	bne.w	8001590 <parseTwizyFrame+0x558>
                    printf("Uptime: %u min | %u h | %u d\n", minuteCounter, remainingHours, days);
 8001342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001344:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001346:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001348:	4826      	ldr	r0, [pc, #152]	@ (80013e4 <parseTwizyFrame+0x3ac>)
 800134a:	f009 f895 	bl	800a478 <iprintf>
            break;
 800134e:	e11f      	b.n	8001590 <parseTwizyFrame+0x558>
            if (ReceivedCANFrame->dlc >= 8) {
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	791b      	ldrb	r3, [r3, #4]
 8001354:	2b07      	cmp	r3, #7
 8001356:	f240 811d 	bls.w	8001594 <parseTwizyFrame+0x55c>
                uint8_t chargerStatus = ReceivedCANFrame->data[0];
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	795b      	ldrb	r3, [r3, #5]
 800135e:	77fb      	strb	r3, [r7, #31]
                uint16_t counter = (ReceivedCANFrame->data[6] << 8) | ReceivedCANFrame->data[7];
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	7adb      	ldrb	r3, [r3, #11]
 8001364:	b21b      	sxth	r3, r3
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	b21a      	sxth	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	7b1b      	ldrb	r3, [r3, #12]
 800136e:	b21b      	sxth	r3, r3
 8001370:	4313      	orrs	r3, r2
 8001372:	b21b      	sxth	r3, r3
 8001374:	83bb      	strh	r3, [r7, #28]
                if (debug_counter % (DEBUG_PRINT_INTERVAL * 3) == 0) {
 8001376:	4b10      	ldr	r3, [pc, #64]	@ (80013b8 <parseTwizyFrame+0x380>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4b1b      	ldr	r3, [pc, #108]	@ (80013e8 <parseTwizyFrame+0x3b0>)
 800137c:	fba3 1302 	umull	r1, r3, r3, r2
 8001380:	095b      	lsrs	r3, r3, #5
 8001382:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001386:	fb01 f303 	mul.w	r3, r1, r3
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b00      	cmp	r3, #0
 800138e:	f040 8101 	bne.w	8001594 <parseTwizyFrame+0x55c>
                    printf("Charger: %s | Counter: %u\n", chargerStatus == 0x03 ? "ON" : "OFF", counter);
 8001392:	7ffb      	ldrb	r3, [r7, #31]
 8001394:	2b03      	cmp	r3, #3
 8001396:	d101      	bne.n	800139c <parseTwizyFrame+0x364>
 8001398:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <parseTwizyFrame+0x3b4>)
 800139a:	e000      	b.n	800139e <parseTwizyFrame+0x366>
 800139c:	4b14      	ldr	r3, [pc, #80]	@ (80013f0 <parseTwizyFrame+0x3b8>)
 800139e:	8bba      	ldrh	r2, [r7, #28]
 80013a0:	4619      	mov	r1, r3
 80013a2:	4814      	ldr	r0, [pc, #80]	@ (80013f4 <parseTwizyFrame+0x3bc>)
 80013a4:	f009 f868 	bl	800a478 <iprintf>
            break;
 80013a8:	e0f4      	b.n	8001594 <parseTwizyFrame+0x55c>
 80013aa:	bf00      	nop
 80013ac:	43c80000 	.word	0x43c80000
 80013b0:	42c80000 	.word	0x42c80000
 80013b4:	20000378 	.word	0x20000378
 80013b8:	2000036c 	.word	0x2000036c
 80013bc:	51eb851f 	.word	0x51eb851f
 80013c0:	0800c5e8 	.word	0x0800c5e8
 80013c4:	44c80000 	.word	0x44c80000
 80013c8:	0800c5f8 	.word	0x0800c5f8
 80013cc:	45e29000 	.word	0x45e29000
 80013d0:	42a00000 	.word	0x42a00000
 80013d4:	0800c620 	.word	0x0800c620
 80013d8:	88888889 	.word	0x88888889
 80013dc:	aaaaaaab 	.word	0xaaaaaaab
 80013e0:	10624dd3 	.word	0x10624dd3
 80013e4:	0800c640 	.word	0x0800c640
 80013e8:	1b4e81b5 	.word	0x1b4e81b5
 80013ec:	0800c660 	.word	0x0800c660
 80013f0:	0800c664 	.word	0x0800c664
 80013f4:	0800c668 	.word	0x0800c668
            if (ReceivedCANFrame->dlc >= 6) {
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	791b      	ldrb	r3, [r3, #4]
 80013fc:	2b05      	cmp	r3, #5
 80013fe:	f240 80cb 	bls.w	8001598 <parseTwizyFrame+0x560>
                int maxRegenPower = ReceivedCANFrame->data[2] * 500;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	79db      	ldrb	r3, [r3, #7]
 8001406:	461a      	mov	r2, r3
 8001408:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800140c:	fb02 f303 	mul.w	r3, r2, r3
 8001410:	62bb      	str	r3, [r7, #40]	@ 0x28
                int maxDrivePower = ReceivedCANFrame->data[3] * 500;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	7a1b      	ldrb	r3, [r3, #8]
 8001416:	461a      	mov	r2, r3
 8001418:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800141c:	fb02 f303 	mul.w	r3, r2, r3
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24
                int batterySOH = ReceivedCANFrame->data[5];
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	7a9b      	ldrb	r3, [r3, #10]
 8001426:	623b      	str	r3, [r7, #32]
                if (debug_counter % (DEBUG_PRINT_INTERVAL * 3) == 0) {
 8001428:	4b60      	ldr	r3, [pc, #384]	@ (80015ac <parseTwizyFrame+0x574>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b60      	ldr	r3, [pc, #384]	@ (80015b0 <parseTwizyFrame+0x578>)
 800142e:	fba3 1302 	umull	r1, r3, r3, r2
 8001432:	095b      	lsrs	r3, r3, #5
 8001434:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001438:	fb01 f303 	mul.w	r3, r1, r3
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	f040 80aa 	bne.w	8001598 <parseTwizyFrame+0x560>
                    printf("Max Drive: %d W | Regen: %d W | SOH: %d%%\n", maxDrivePower, maxRegenPower, batterySOH);
 8001444:	6a3b      	ldr	r3, [r7, #32]
 8001446:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001448:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800144a:	485a      	ldr	r0, [pc, #360]	@ (80015b4 <parseTwizyFrame+0x57c>)
 800144c:	f009 f814 	bl	800a478 <iprintf>
            break;
 8001450:	e0a2      	b.n	8001598 <parseTwizyFrame+0x560>
            if (ReceivedCANFrame->dlc >= 6) {
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	791b      	ldrb	r3, [r3, #4]
 8001456:	2b05      	cmp	r3, #5
 8001458:	f240 80a0 	bls.w	800159c <parseTwizyFrame+0x564>
                uint16_t voltageRaw = (ReceivedCANFrame->data[4] << 8) | ReceivedCANFrame->data[5];
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	7a5b      	ldrb	r3, [r3, #9]
 8001460:	b21b      	sxth	r3, r3
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	b21a      	sxth	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	7a9b      	ldrb	r3, [r3, #10]
 800146a:	b21b      	sxth	r3, r3
 800146c:	4313      	orrs	r3, r2
 800146e:	b21b      	sxth	r3, r3
 8001470:	86fb      	strh	r3, [r7, #54]	@ 0x36
                float batteryVoltage = (voltageRaw >> 1) / 10.0f;
 8001472:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001474:	085b      	lsrs	r3, r3, #1
 8001476:	b29b      	uxth	r3, r3
 8001478:	ee07 3a90 	vmov	s15, r3
 800147c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001480:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001484:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001488:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
                float availableEnergy = ReceivedCANFrame->data[1] / 10.0f;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	799b      	ldrb	r3, [r3, #6]
 8001490:	ee07 3a90 	vmov	s15, r3
 8001494:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001498:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800149c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014a0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
                if (debug_counter % (DEBUG_PRINT_INTERVAL * 3) == 0) {
 80014a4:	4b41      	ldr	r3, [pc, #260]	@ (80015ac <parseTwizyFrame+0x574>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b41      	ldr	r3, [pc, #260]	@ (80015b0 <parseTwizyFrame+0x578>)
 80014aa:	fba3 1302 	umull	r1, r3, r3, r2
 80014ae:	095b      	lsrs	r3, r3, #5
 80014b0:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80014b4:	fb01 f303 	mul.w	r3, r1, r3
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d16e      	bne.n	800159c <parseTwizyFrame+0x564>
                    printf("Battery: %.1f V | Energy: %.1f kWh\n", batteryVoltage, availableEnergy);
 80014be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80014c0:	f7ff f81a 	bl	80004f8 <__aeabi_f2d>
 80014c4:	4604      	mov	r4, r0
 80014c6:	460d      	mov	r5, r1
 80014c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80014ca:	f7ff f815 	bl	80004f8 <__aeabi_f2d>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	e9cd 2300 	strd	r2, r3, [sp]
 80014d6:	4622      	mov	r2, r4
 80014d8:	462b      	mov	r3, r5
 80014da:	4837      	ldr	r0, [pc, #220]	@ (80015b8 <parseTwizyFrame+0x580>)
 80014dc:	f008 ffcc 	bl	800a478 <iprintf>
            break;
 80014e0:	e05c      	b.n	800159c <parseTwizyFrame+0x564>
            if (ReceivedCANFrame->dlc >= 8) {
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	791b      	ldrb	r3, [r3, #4]
 80014e6:	2b07      	cmp	r3, #7
 80014e8:	d95a      	bls.n	80015a0 <parseTwizyFrame+0x568>
                float dcCurrent = ReceivedCANFrame->data[2] / 5.0f;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	79db      	ldrb	r3, [r3, #7]
 80014ee:	ee07 3a90 	vmov	s15, r3
 80014f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014f6:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80014fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014fe:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
                int chargerTemp = ReceivedCANFrame->data[7] - 40;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	7b1b      	ldrb	r3, [r3, #12]
 8001506:	3b28      	subs	r3, #40	@ 0x28
 8001508:	64fb      	str	r3, [r7, #76]	@ 0x4c
                uint8_t protocol = ReceivedCANFrame->data[3];
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	7a1b      	ldrb	r3, [r3, #8]
 800150e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
                const char* proto_str = "UNK";
 8001512:	4b2a      	ldr	r3, [pc, #168]	@ (80015bc <parseTwizyFrame+0x584>)
 8001514:	65fb      	str	r3, [r7, #92]	@ 0x5c
                switch (protocol) {
 8001516:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800151a:	2bd1      	cmp	r3, #209	@ 0xd1
 800151c:	d00d      	beq.n	800153a <parseTwizyFrame+0x502>
 800151e:	2bd1      	cmp	r3, #209	@ 0xd1
 8001520:	dc14      	bgt.n	800154c <parseTwizyFrame+0x514>
 8001522:	2bb1      	cmp	r3, #177	@ 0xb1
 8001524:	d00c      	beq.n	8001540 <parseTwizyFrame+0x508>
 8001526:	2bb1      	cmp	r3, #177	@ 0xb1
 8001528:	dc10      	bgt.n	800154c <parseTwizyFrame+0x514>
 800152a:	2b41      	cmp	r3, #65	@ 0x41
 800152c:	d002      	beq.n	8001534 <parseTwizyFrame+0x4fc>
 800152e:	2b91      	cmp	r3, #145	@ 0x91
 8001530:	d009      	beq.n	8001546 <parseTwizyFrame+0x50e>
 8001532:	e00b      	b.n	800154c <parseTwizyFrame+0x514>
                    case 0x41: proto_str = "ON"; break;
 8001534:	4b22      	ldr	r3, [pc, #136]	@ (80015c0 <parseTwizyFrame+0x588>)
 8001536:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001538:	e008      	b.n	800154c <parseTwizyFrame+0x514>
                    case 0xD1: proto_str = "OFF"; break;
 800153a:	4b22      	ldr	r3, [pc, #136]	@ (80015c4 <parseTwizyFrame+0x58c>)
 800153c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800153e:	e005      	b.n	800154c <parseTwizyFrame+0x514>
                    case 0xB1: proto_str = "CHG"; break;
 8001540:	4b21      	ldr	r3, [pc, #132]	@ (80015c8 <parseTwizyFrame+0x590>)
 8001542:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001544:	e002      	b.n	800154c <parseTwizyFrame+0x514>
                    case 0x91: proto_str = "STB"; break;
 8001546:	4b21      	ldr	r3, [pc, #132]	@ (80015cc <parseTwizyFrame+0x594>)
 8001548:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800154a:	bf00      	nop
                if (debug_counter % (DEBUG_PRINT_INTERVAL * 4) == 0) {
 800154c:	4b17      	ldr	r3, [pc, #92]	@ (80015ac <parseTwizyFrame+0x574>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b1f      	ldr	r3, [pc, #124]	@ (80015d0 <parseTwizyFrame+0x598>)
 8001552:	fba3 1302 	umull	r1, r3, r3, r2
 8001556:	09db      	lsrs	r3, r3, #7
 8001558:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800155c:	fb01 f303 	mul.w	r3, r1, r3
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d11c      	bne.n	80015a0 <parseTwizyFrame+0x568>
                    printf("12V: %.1f A | Temp: %d°C | Protocol: %s\n", dcCurrent, chargerTemp, proto_str);
 8001566:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001568:	f7fe ffc6 	bl	80004f8 <__aeabi_f2d>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001572:	9101      	str	r1, [sp, #4]
 8001574:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001576:	9100      	str	r1, [sp, #0]
 8001578:	4816      	ldr	r0, [pc, #88]	@ (80015d4 <parseTwizyFrame+0x59c>)
 800157a:	f008 ff7d 	bl	800a478 <iprintf>
            break;
 800157e:	e00f      	b.n	80015a0 <parseTwizyFrame+0x568>
            break;
 8001580:	bf00      	nop
 8001582:	e00e      	b.n	80015a2 <parseTwizyFrame+0x56a>
            break;
 8001584:	bf00      	nop
 8001586:	e00c      	b.n	80015a2 <parseTwizyFrame+0x56a>
            break;
 8001588:	bf00      	nop
 800158a:	e00a      	b.n	80015a2 <parseTwizyFrame+0x56a>
            break;
 800158c:	bf00      	nop
 800158e:	e008      	b.n	80015a2 <parseTwizyFrame+0x56a>
            break;
 8001590:	bf00      	nop
 8001592:	e006      	b.n	80015a2 <parseTwizyFrame+0x56a>
            break;
 8001594:	bf00      	nop
 8001596:	e004      	b.n	80015a2 <parseTwizyFrame+0x56a>
            break;
 8001598:	bf00      	nop
 800159a:	e002      	b.n	80015a2 <parseTwizyFrame+0x56a>
            break;
 800159c:	bf00      	nop
 800159e:	e000      	b.n	80015a2 <parseTwizyFrame+0x56a>
            break;
 80015a0:	bf00      	nop
    }
}
 80015a2:	bf00      	nop
 80015a4:	3760      	adds	r7, #96	@ 0x60
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bdb0      	pop	{r4, r5, r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2000036c 	.word	0x2000036c
 80015b0:	1b4e81b5 	.word	0x1b4e81b5
 80015b4:	0800c684 	.word	0x0800c684
 80015b8:	0800c6b0 	.word	0x0800c6b0
 80015bc:	0800c6d4 	.word	0x0800c6d4
 80015c0:	0800c660 	.word	0x0800c660
 80015c4:	0800c664 	.word	0x0800c664
 80015c8:	0800c6d8 	.word	0x0800c6d8
 80015cc:	0800c6dc 	.word	0x0800c6dc
 80015d0:	51eb851f 	.word	0x51eb851f
 80015d4:	0800c6e0 	.word	0x0800c6e0

080015d8 <StartUARTInterrupts>:

// Start interrupt-based UART reception
static void StartUARTInterrupts(void) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
    // Enable NVIC interrupts for UART
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 80015dc:	2200      	movs	r2, #0
 80015de:	2105      	movs	r1, #5
 80015e0:	2025      	movs	r0, #37	@ 0x25
 80015e2:	f001 f87f 	bl	80026e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80015e6:	2025      	movs	r0, #37	@ 0x25
 80015e8:	f001 f896 	bl	8002718 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2105      	movs	r1, #5
 80015f0:	2024      	movs	r0, #36	@ 0x24
 80015f2:	f001 f877 	bl	80026e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015f6:	2024      	movs	r0, #36	@ 0x24
 80015f8:	f001 f88e 	bl	8002718 <HAL_NVIC_EnableIRQ>

    // Start interrupt-based reception
    HAL_UART_Receive_IT(&hlpuart1, (uint8_t*)&receivedData, sizeof(Item));
 80015fc:	2218      	movs	r2, #24
 80015fe:	4907      	ldr	r1, [pc, #28]	@ (800161c <StartUARTInterrupts+0x44>)
 8001600:	4807      	ldr	r0, [pc, #28]	@ (8001620 <StartUARTInterrupts+0x48>)
 8001602:	f003 fc67 	bl	8004ed4 <HAL_UART_Receive_IT>
    HAL_UART_Receive_IT(&huart1, (uint8_t*)&CANreceivedData, sizeof(CANFrame));
 8001606:	2210      	movs	r2, #16
 8001608:	4906      	ldr	r1, [pc, #24]	@ (8001624 <StartUARTInterrupts+0x4c>)
 800160a:	4807      	ldr	r0, [pc, #28]	@ (8001628 <StartUARTInterrupts+0x50>)
 800160c:	f003 fc62 	bl	8004ed4 <HAL_UART_Receive_IT>

    printf("UART Interrupts enabled - 64MHz System Ready\n");
 8001610:	4806      	ldr	r0, [pc, #24]	@ (800162c <StartUARTInterrupts+0x54>)
 8001612:	f008 ffa1 	bl	800a558 <puts>
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000208 	.word	0x20000208
 8001620:	20000230 	.word	0x20000230
 8001624:	20000220 	.word	0x20000220
 8001628:	200002c4 	.word	0x200002c4
 800162c:	0800c70c 	.word	0x0800c70c

08001630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */
  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001634:	f000 ff52 	bl	80024dc <HAL_Init>
  /* USER CODE BEGIN Init */
  /* USER CODE END Init */
  /* Configure the system clock */
  SystemClock_Config();
 8001638:	f000 f890 	bl	800175c <SystemClock_Config>
  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800163c:	f000 f8f6 	bl	800182c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001640:	f000 f9aa 	bl	8001998 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001644:	f000 f95c 	bl	8001900 <MX_USART1_UART_Init>
  MX_LPUART1_UART_Init();
 8001648:	f000 f90e 	bl	8001868 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Initialize parsed CAN data
  memset(&parsedCANData, 0, sizeof(Item));
 800164c:	2218      	movs	r2, #24
 800164e:	2100      	movs	r1, #0
 8001650:	4830      	ldr	r0, [pc, #192]	@ (8001714 <main+0xe4>)
 8001652:	f009 f861 	bl	800a718 <memset>
  memcpy(parsedCANData.MacAddress, stm32_mac, 6);
 8001656:	4b2f      	ldr	r3, [pc, #188]	@ (8001714 <main+0xe4>)
 8001658:	4a2f      	ldr	r2, [pc, #188]	@ (8001718 <main+0xe8>)
 800165a:	3310      	adds	r3, #16
 800165c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001660:	6018      	str	r0, [r3, #0]
 8001662:	3304      	adds	r3, #4
 8001664:	8019      	strh	r1, [r3, #0]

  // Start interrupt-based UART reception
  StartUARTInterrupts();
 8001666:	f7ff ffb7 	bl	80015d8 <StartUARTInterrupts>

  printf("STM32 64MHz + Interrupt UART System Started\n");
 800166a:	482c      	ldr	r0, [pc, #176]	@ (800171c <main+0xec>)
 800166c:	f008 ff74 	bl	800a558 <puts>
  printf("System Clock: %lu Hz\n", HAL_RCC_GetSysClockFreq());
 8001670:	f002 fb14 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 8001674:	4603      	mov	r3, r0
 8001676:	4619      	mov	r1, r3
 8001678:	4829      	ldr	r0, [pc, #164]	@ (8001720 <main+0xf0>)
 800167a:	f008 fefd 	bl	800a478 <iprintf>
  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 800167e:	f005 fbfb 	bl	8006e78 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* USER CODE END RTOS_SEMAPHORES */
  /* USER CODE BEGIN RTOS_TIMERS */
  /* USER CODE END RTOS_TIMERS */
  /* USER CODE BEGIN RTOS_QUEUES */
  UARTQueue = xQueueCreate(QUEUE_SIZE, sizeof(Item));
 8001682:	2200      	movs	r2, #0
 8001684:	2118      	movs	r1, #24
 8001686:	2014      	movs	r0, #20
 8001688:	f005 febd 	bl	8007406 <xQueueGenericCreate>
 800168c:	4603      	mov	r3, r0
 800168e:	4a25      	ldr	r2, [pc, #148]	@ (8001724 <main+0xf4>)
 8001690:	6013      	str	r3, [r2, #0]
  if (UARTQueue == NULL) {
 8001692:	4b24      	ldr	r3, [pc, #144]	@ (8001724 <main+0xf4>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <main+0x6e>
      Error_Handler(); // Handle queue creation failure
 800169a:	f000 fbca 	bl	8001e32 <Error_Handler>
  }
  UARTQueue2 = xQueueCreate(QUEUE_SIZE, sizeof(CANFrame));
 800169e:	2200      	movs	r2, #0
 80016a0:	2110      	movs	r1, #16
 80016a2:	2014      	movs	r0, #20
 80016a4:	f005 feaf 	bl	8007406 <xQueueGenericCreate>
 80016a8:	4603      	mov	r3, r0
 80016aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001728 <main+0xf8>)
 80016ac:	6013      	str	r3, [r2, #0]
  if (UARTQueue2 == NULL) {
 80016ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001728 <main+0xf8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <main+0x8a>
      Error_Handler(); // Handle queue creation failure
 80016b6:	f000 fbbc 	bl	8001e32 <Error_Handler>
  }
  /* USER CODE END RTOS_QUEUES */
  /* Create the thread(s) */
  /* creation of SenderTask */
  SenderTaskHandle = osThreadNew(StartSenderTask, NULL, &SenderTask_attributes);
 80016ba:	4a1c      	ldr	r2, [pc, #112]	@ (800172c <main+0xfc>)
 80016bc:	2100      	movs	r1, #0
 80016be:	481c      	ldr	r0, [pc, #112]	@ (8001730 <main+0x100>)
 80016c0:	f005 fc24 	bl	8006f0c <osThreadNew>
 80016c4:	4603      	mov	r3, r0
 80016c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001734 <main+0x104>)
 80016c8:	6013      	str	r3, [r2, #0]
  /* creation of TskUART */
  TskUARTHandle = osThreadNew(StartTskUART, NULL, &TskUART_attributes);
 80016ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001738 <main+0x108>)
 80016cc:	2100      	movs	r1, #0
 80016ce:	481b      	ldr	r0, [pc, #108]	@ (800173c <main+0x10c>)
 80016d0:	f005 fc1c 	bl	8006f0c <osThreadNew>
 80016d4:	4603      	mov	r3, r0
 80016d6:	4a1a      	ldr	r2, [pc, #104]	@ (8001740 <main+0x110>)
 80016d8:	6013      	str	r3, [r2, #0]
  /* creation of SenderTask2 */
  SenderTask2Handle = osThreadNew(StartSenderTask2, NULL, &SenderTask2_attributes);
 80016da:	4a1a      	ldr	r2, [pc, #104]	@ (8001744 <main+0x114>)
 80016dc:	2100      	movs	r1, #0
 80016de:	481a      	ldr	r0, [pc, #104]	@ (8001748 <main+0x118>)
 80016e0:	f005 fc14 	bl	8006f0c <osThreadNew>
 80016e4:	4603      	mov	r3, r0
 80016e6:	4a19      	ldr	r2, [pc, #100]	@ (800174c <main+0x11c>)
 80016e8:	6013      	str	r3, [r2, #0]
  /* creation of TskUART2 */
  TskUART2Handle = osThreadNew(StartTskUART2, NULL, &TskUART2_attributes);
 80016ea:	4a19      	ldr	r2, [pc, #100]	@ (8001750 <main+0x120>)
 80016ec:	2100      	movs	r1, #0
 80016ee:	4819      	ldr	r0, [pc, #100]	@ (8001754 <main+0x124>)
 80016f0:	f005 fc0c 	bl	8006f0c <osThreadNew>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4a18      	ldr	r2, [pc, #96]	@ (8001758 <main+0x128>)
 80016f8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* USER CODE END RTOS_THREADS */
  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */
  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 80016fa:	2000      	movs	r0, #0
 80016fc:	f000 fe9a 	bl	8002434 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8001700:	2001      	movs	r0, #1
 8001702:	f000 fe97 	bl	8002434 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8001706:	2002      	movs	r0, #2
 8001708:	f000 fe94 	bl	8002434 <BSP_LED_Init>
  /* Start scheduler */
  osKernelStart();
 800170c:	f005 fbd8 	bl	8006ec0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <main+0xe0>
 8001714:	20000378 	.word	0x20000378
 8001718:	0800c938 	.word	0x0800c938
 800171c:	0800c73c 	.word	0x0800c73c
 8001720:	0800c768 	.word	0x0800c768
 8001724:	20000370 	.word	0x20000370
 8001728:	20000374 	.word	0x20000374
 800172c:	0800c8a8 	.word	0x0800c8a8
 8001730:	08001be5 	.word	0x08001be5
 8001734:	20000358 	.word	0x20000358
 8001738:	0800c8cc 	.word	0x0800c8cc
 800173c:	08001d45 	.word	0x08001d45
 8001740:	2000035c 	.word	0x2000035c
 8001744:	0800c8f0 	.word	0x0800c8f0
 8001748:	08001d8d 	.word	0x08001d8d
 800174c:	20000360 	.word	0x20000360
 8001750:	0800c914 	.word	0x0800c914
 8001754:	08001dcd 	.word	0x08001dcd
 8001758:	20000364 	.word	0x20000364

0800175c <SystemClock_Config>:
/**
  * @brief System Clock Configuration - 64MHz
  * @retval None
  */
void SystemClock_Config(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b09a      	sub	sp, #104	@ 0x68
 8001760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001762:	f107 0320 	add.w	r3, r7, #32
 8001766:	2248      	movs	r2, #72	@ 0x48
 8001768:	2100      	movs	r1, #0
 800176a:	4618      	mov	r0, r3
 800176c:	f008 ffd4 	bl	800a718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001770:	1d3b      	adds	r3, r7, #4
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]
 800177c:	611a      	str	r2, [r3, #16]
 800177e:	615a      	str	r2, [r3, #20]
 8001780:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001782:	4b29      	ldr	r3, [pc, #164]	@ (8001828 <SystemClock_Config+0xcc>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800178a:	4a27      	ldr	r2, [pc, #156]	@ (8001828 <SystemClock_Config+0xcc>)
 800178c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	4b25      	ldr	r3, [pc, #148]	@ (8001828 <SystemClock_Config+0xcc>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
 800179e:	2321      	movs	r3, #33	@ 0x21
 80017a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017a6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017a8:	2301      	movs	r3, #1
 80017aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017ac:	2340      	movs	r3, #64	@ 0x40
 80017ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80017b0:	2300      	movs	r3, #0
 80017b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;  // 4MHz MSI
 80017b4:	2360      	movs	r3, #96	@ 0x60
 80017b6:	647b      	str	r3, [r7, #68]	@ 0x44

  /** Configure PLL for 64MHz */
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017b8:	2302      	movs	r3, #2
 80017ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80017bc:	2301      	movs	r3, #1
 80017be:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = 1;    // Divider: 4MHz / 1 = 4MHz
 80017c0:	2301      	movs	r3, #1
 80017c2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;   // Multiplier: 4MHz * 32 = 128MHz
 80017c4:	2320      	movs	r3, #32
 80017c6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80017c8:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 80017cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017d2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;  // Output: 128MHz / 2 = 64MHz
 80017d4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80017d8:	667b      	str	r3, [r7, #100]	@ 0x64

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80017da:	f107 0320 	add.w	r3, r7, #32
 80017de:	4618      	mov	r0, r3
 80017e0:	f001 fda8 	bl	8003334 <HAL_RCC_OscConfig>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <SystemClock_Config+0x92>
    Error_Handler();
 80017ea:	f000 fb22 	bl	8001e32 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80017ee:	236f      	movs	r3, #111	@ 0x6f
 80017f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;  // Use PLL for 64MHz
 80017f2:	2303      	movs	r3, #3
 80017f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;        // 64MHz
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;         // 64MHz
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;         // 64MHz
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;       // 32MHz for RF
 8001802:	2380      	movs	r3, #128	@ 0x80
 8001804:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;       // 64MHz
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	2103      	movs	r1, #3
 800180e:	4618      	mov	r0, r3
 8001810:	f002 f904 	bl	8003a1c <HAL_RCC_ClockConfig>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <SystemClock_Config+0xc2>
    Error_Handler();
 800181a:	f000 fb0a 	bl	8001e32 <Error_Handler>
  }
}
 800181e:	bf00      	nop
 8001820:	3768      	adds	r7, #104	@ 0x68
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	58000400 	.word	0x58000400

0800182c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b094      	sub	sp, #80	@ 0x50
 8001830:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001832:	463b      	mov	r3, r7
 8001834:	2250      	movs	r2, #80	@ 0x50
 8001836:	2100      	movs	r1, #0
 8001838:	4618      	mov	r0, r3
 800183a:	f008 ff6d 	bl	800a718 <memset>
  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800183e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001842:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001844:	2300      	movs	r3, #0
 8001846:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001848:	2300      	movs	r3, #0
 800184a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800184c:	463b      	mov	r3, r7
 800184e:	4618      	mov	r0, r3
 8001850:	f002 fd53 	bl	80042fa <HAL_RCCEx_PeriphCLKConfig>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800185a:	f000 faea 	bl	8001e32 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */
  /* USER CODE END Smps */
}
 800185e:	bf00      	nop
 8001860:	3750      	adds	r7, #80	@ 0x50
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_Init 0 */
  /* USER CODE END LPUART1_Init 0 */
  /* USER CODE BEGIN LPUART1_Init 1 */
  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800186c:	4b22      	ldr	r3, [pc, #136]	@ (80018f8 <MX_LPUART1_UART_Init+0x90>)
 800186e:	4a23      	ldr	r2, [pc, #140]	@ (80018fc <MX_LPUART1_UART_Init+0x94>)
 8001870:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001872:	4b21      	ldr	r3, [pc, #132]	@ (80018f8 <MX_LPUART1_UART_Init+0x90>)
 8001874:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001878:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800187a:	4b1f      	ldr	r3, [pc, #124]	@ (80018f8 <MX_LPUART1_UART_Init+0x90>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001880:	4b1d      	ldr	r3, [pc, #116]	@ (80018f8 <MX_LPUART1_UART_Init+0x90>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001886:	4b1c      	ldr	r3, [pc, #112]	@ (80018f8 <MX_LPUART1_UART_Init+0x90>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800188c:	4b1a      	ldr	r3, [pc, #104]	@ (80018f8 <MX_LPUART1_UART_Init+0x90>)
 800188e:	220c      	movs	r2, #12
 8001890:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001892:	4b19      	ldr	r3, [pc, #100]	@ (80018f8 <MX_LPUART1_UART_Init+0x90>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001898:	4b17      	ldr	r3, [pc, #92]	@ (80018f8 <MX_LPUART1_UART_Init+0x90>)
 800189a:	2200      	movs	r2, #0
 800189c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800189e:	4b16      	ldr	r3, [pc, #88]	@ (80018f8 <MX_LPUART1_UART_Init+0x90>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018a4:	4b14      	ldr	r3, [pc, #80]	@ (80018f8 <MX_LPUART1_UART_Init+0x90>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80018aa:	4b13      	ldr	r3, [pc, #76]	@ (80018f8 <MX_LPUART1_UART_Init+0x90>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80018b0:	4811      	ldr	r0, [pc, #68]	@ (80018f8 <MX_LPUART1_UART_Init+0x90>)
 80018b2:	f003 fa31 	bl	8004d18 <HAL_UART_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80018bc:	f000 fab9 	bl	8001e32 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018c0:	2100      	movs	r1, #0
 80018c2:	480d      	ldr	r0, [pc, #52]	@ (80018f8 <MX_LPUART1_UART_Init+0x90>)
 80018c4:	f005 f9c9 	bl	8006c5a <HAL_UARTEx_SetTxFifoThreshold>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80018ce:	f000 fab0 	bl	8001e32 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018d2:	2100      	movs	r1, #0
 80018d4:	4808      	ldr	r0, [pc, #32]	@ (80018f8 <MX_LPUART1_UART_Init+0x90>)
 80018d6:	f005 f9fe 	bl	8006cd6 <HAL_UARTEx_SetRxFifoThreshold>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80018e0:	f000 faa7 	bl	8001e32 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80018e4:	4804      	ldr	r0, [pc, #16]	@ (80018f8 <MX_LPUART1_UART_Init+0x90>)
 80018e6:	f005 f97f 	bl	8006be8 <HAL_UARTEx_DisableFifoMode>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80018f0:	f000 fa9f 	bl	8001e32 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */
  /* USER CODE END LPUART1_Init 2 */
}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000230 	.word	0x20000230
 80018fc:	40008000 	.word	0x40008000

08001900 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */
  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001904:	4b22      	ldr	r3, [pc, #136]	@ (8001990 <MX_USART1_UART_Init+0x90>)
 8001906:	4a23      	ldr	r2, [pc, #140]	@ (8001994 <MX_USART1_UART_Init+0x94>)
 8001908:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800190a:	4b21      	ldr	r3, [pc, #132]	@ (8001990 <MX_USART1_UART_Init+0x90>)
 800190c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001910:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001912:	4b1f      	ldr	r3, [pc, #124]	@ (8001990 <MX_USART1_UART_Init+0x90>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001918:	4b1d      	ldr	r3, [pc, #116]	@ (8001990 <MX_USART1_UART_Init+0x90>)
 800191a:	2200      	movs	r2, #0
 800191c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800191e:	4b1c      	ldr	r3, [pc, #112]	@ (8001990 <MX_USART1_UART_Init+0x90>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001924:	4b1a      	ldr	r3, [pc, #104]	@ (8001990 <MX_USART1_UART_Init+0x90>)
 8001926:	220c      	movs	r2, #12
 8001928:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800192a:	4b19      	ldr	r3, [pc, #100]	@ (8001990 <MX_USART1_UART_Init+0x90>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001930:	4b17      	ldr	r3, [pc, #92]	@ (8001990 <MX_USART1_UART_Init+0x90>)
 8001932:	2200      	movs	r2, #0
 8001934:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001936:	4b16      	ldr	r3, [pc, #88]	@ (8001990 <MX_USART1_UART_Init+0x90>)
 8001938:	2200      	movs	r2, #0
 800193a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800193c:	4b14      	ldr	r3, [pc, #80]	@ (8001990 <MX_USART1_UART_Init+0x90>)
 800193e:	2200      	movs	r2, #0
 8001940:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001942:	4b13      	ldr	r3, [pc, #76]	@ (8001990 <MX_USART1_UART_Init+0x90>)
 8001944:	2200      	movs	r2, #0
 8001946:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001948:	4811      	ldr	r0, [pc, #68]	@ (8001990 <MX_USART1_UART_Init+0x90>)
 800194a:	f003 f9e5 	bl	8004d18 <HAL_UART_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001954:	f000 fa6d 	bl	8001e32 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001958:	2100      	movs	r1, #0
 800195a:	480d      	ldr	r0, [pc, #52]	@ (8001990 <MX_USART1_UART_Init+0x90>)
 800195c:	f005 f97d 	bl	8006c5a <HAL_UARTEx_SetTxFifoThreshold>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001966:	f000 fa64 	bl	8001e32 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800196a:	2100      	movs	r1, #0
 800196c:	4808      	ldr	r0, [pc, #32]	@ (8001990 <MX_USART1_UART_Init+0x90>)
 800196e:	f005 f9b2 	bl	8006cd6 <HAL_UARTEx_SetRxFifoThreshold>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001978:	f000 fa5b 	bl	8001e32 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800197c:	4804      	ldr	r0, [pc, #16]	@ (8001990 <MX_USART1_UART_Init+0x90>)
 800197e:	f005 f933 	bl	8006be8 <HAL_UARTEx_DisableFifoMode>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001988:	f000 fa53 	bl	8001e32 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	200002c4 	.word	0x200002c4
 8001994:	40013800 	.word	0x40013800

08001998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ac:	2004      	movs	r0, #4
 80019ae:	f7ff fa90 	bl	8000ed2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	2001      	movs	r0, #1
 80019b4:	f7ff fa8d 	bl	8000ed2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b8:	2002      	movs	r0, #2
 80019ba:	f7ff fa8a 	bl	8000ed2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019be:	2008      	movs	r0, #8
 80019c0:	f7ff fa87 	bl	8000ed2 <LL_AHB2_GRP1_EnableClock>
  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019c4:	2310      	movs	r3, #16
 80019c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	4619      	mov	r1, r3
 80019d4:	4811      	ldr	r0, [pc, #68]	@ (8001a1c <MX_GPIO_Init+0x84>)
 80019d6:	f000 ff6b 	bl	80028b0 <HAL_GPIO_Init>
  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 80019da:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80019de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e0:	2302      	movs	r3, #2
 80019e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e8:	2300      	movs	r3, #0
 80019ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80019ec:	230a      	movs	r3, #10
 80019ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	4619      	mov	r1, r3
 80019f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019f8:	f000 ff5a 	bl	80028b0 <HAL_GPIO_Init>
  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80019fc:	2303      	movs	r3, #3
 80019fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a08:	1d3b      	adds	r3, r7, #4
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4804      	ldr	r0, [pc, #16]	@ (8001a20 <MX_GPIO_Init+0x88>)
 8001a0e:	f000 ff4f 	bl	80028b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a12:	bf00      	nop
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	48000800 	.word	0x48000800
 8001a20:	48000c00 	.word	0x48000c00

08001a24 <_write>:
/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	e009      	b.n	8001a4a <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	1c5a      	adds	r2, r3, #1
 8001a3a:	60ba      	str	r2, [r7, #8]
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fa20 	bl	8000e84 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	3301      	adds	r3, #1
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	dbf1      	blt.n	8001a36 <_write+0x12>
  }
  return len;
 8001a52:	687b      	ldr	r3, [r7, #4]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <HAL_UART_RxCpltCallback>:

// UART Reception Complete Callback - CRITICAL FOR INTERRUPT OPERATION
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]

    if (huart->Instance == LPUART1) {
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a26      	ldr	r2, [pc, #152]	@ (8001b08 <HAL_UART_RxCpltCallback+0xac>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d11b      	bne.n	8001aaa <HAL_UART_RxCpltCallback+0x4e>
        // ESP-NOW data received via LPUART1
        if (ValidateReceivedData((Item*)&receivedData)) {
 8001a72:	4826      	ldr	r0, [pc, #152]	@ (8001b0c <HAL_UART_RxCpltCallback+0xb0>)
 8001a74:	f7ff fa46 	bl	8000f04 <ValidateReceivedData>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d00f      	beq.n	8001a9e <HAL_UART_RxCpltCallback+0x42>
            if (xQueueSendFromISR(UARTQueue, (void*)&receivedData, &xHigherPriorityTaskWoken) != pdTRUE) {
 8001a7e:	4b24      	ldr	r3, [pc, #144]	@ (8001b10 <HAL_UART_RxCpltCallback+0xb4>)
 8001a80:	6818      	ldr	r0, [r3, #0]
 8001a82:	f107 020c 	add.w	r2, r7, #12
 8001a86:	2300      	movs	r3, #0
 8001a88:	4920      	ldr	r1, [pc, #128]	@ (8001b0c <HAL_UART_RxCpltCallback+0xb0>)
 8001a8a:	f005 fe1d 	bl	80076c8 <xQueueGenericSendFromISR>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d004      	beq.n	8001a9e <HAL_UART_RxCpltCallback+0x42>
                // Queue full - increment error counter
                uart_error_count++;
 8001a94:	4b1f      	ldr	r3, [pc, #124]	@ (8001b14 <HAL_UART_RxCpltCallback+0xb8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	4a1e      	ldr	r2, [pc, #120]	@ (8001b14 <HAL_UART_RxCpltCallback+0xb8>)
 8001a9c:	6013      	str	r3, [r2, #0]
            }
        }
        // Restart reception for next packet
        HAL_UART_Receive_IT(&hlpuart1, (uint8_t*)&receivedData, sizeof(Item));
 8001a9e:	2218      	movs	r2, #24
 8001aa0:	491a      	ldr	r1, [pc, #104]	@ (8001b0c <HAL_UART_RxCpltCallback+0xb0>)
 8001aa2:	481d      	ldr	r0, [pc, #116]	@ (8001b18 <HAL_UART_RxCpltCallback+0xbc>)
 8001aa4:	f003 fa16 	bl	8004ed4 <HAL_UART_Receive_IT>
 8001aa8:	e01f      	b.n	8001aea <HAL_UART_RxCpltCallback+0x8e>
    }
    else if (huart->Instance == USART1) {
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a1b      	ldr	r2, [pc, #108]	@ (8001b1c <HAL_UART_RxCpltCallback+0xc0>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d11a      	bne.n	8001aea <HAL_UART_RxCpltCallback+0x8e>
        // CAN data received via USART1
        if (ValidateReceivedCANData((CANFrame*)&CANreceivedData)) {
 8001ab4:	481a      	ldr	r0, [pc, #104]	@ (8001b20 <HAL_UART_RxCpltCallback+0xc4>)
 8001ab6:	f7ff fa42 	bl	8000f3e <ValidateReceivedCANData>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00f      	beq.n	8001ae0 <HAL_UART_RxCpltCallback+0x84>
            if (xQueueSendFromISR(UARTQueue2, (void*)&CANreceivedData, &xHigherPriorityTaskWoken) != pdTRUE) {
 8001ac0:	4b18      	ldr	r3, [pc, #96]	@ (8001b24 <HAL_UART_RxCpltCallback+0xc8>)
 8001ac2:	6818      	ldr	r0, [r3, #0]
 8001ac4:	f107 020c 	add.w	r2, r7, #12
 8001ac8:	2300      	movs	r3, #0
 8001aca:	4915      	ldr	r1, [pc, #84]	@ (8001b20 <HAL_UART_RxCpltCallback+0xc4>)
 8001acc:	f005 fdfc 	bl	80076c8 <xQueueGenericSendFromISR>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d004      	beq.n	8001ae0 <HAL_UART_RxCpltCallback+0x84>
                // Queue full - increment error counter
                can_error_count++;
 8001ad6:	4b14      	ldr	r3, [pc, #80]	@ (8001b28 <HAL_UART_RxCpltCallback+0xcc>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	3301      	adds	r3, #1
 8001adc:	4a12      	ldr	r2, [pc, #72]	@ (8001b28 <HAL_UART_RxCpltCallback+0xcc>)
 8001ade:	6013      	str	r3, [r2, #0]
            }
        }
        // Restart reception for next packet
        HAL_UART_Receive_IT(&huart1, (uint8_t*)&CANreceivedData, sizeof(CANFrame));
 8001ae0:	2210      	movs	r2, #16
 8001ae2:	490f      	ldr	r1, [pc, #60]	@ (8001b20 <HAL_UART_RxCpltCallback+0xc4>)
 8001ae4:	4811      	ldr	r0, [pc, #68]	@ (8001b2c <HAL_UART_RxCpltCallback+0xd0>)
 8001ae6:	f003 f9f5 	bl	8004ed4 <HAL_UART_Receive_IT>
    }

    // Trigger context switch if higher priority task was woken
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d007      	beq.n	8001b00 <HAL_UART_RxCpltCallback+0xa4>
 8001af0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b30 <HAL_UART_RxCpltCallback+0xd4>)
 8001af2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	f3bf 8f4f 	dsb	sy
 8001afc:	f3bf 8f6f 	isb	sy
}
 8001b00:	bf00      	nop
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40008000 	.word	0x40008000
 8001b0c:	20000208 	.word	0x20000208
 8001b10:	20000370 	.word	0x20000370
 8001b14:	20000390 	.word	0x20000390
 8001b18:	20000230 	.word	0x20000230
 8001b1c:	40013800 	.word	0x40013800
 8001b20:	20000220 	.word	0x20000220
 8001b24:	20000374 	.word	0x20000374
 8001b28:	20000394 	.word	0x20000394
 8001b2c:	200002c4 	.word	0x200002c4
 8001b30:	e000ed04 	.word	0xe000ed04

08001b34 <HAL_UART_ErrorCallback>:

// UART Error Callback - CRITICAL FOR ROBUST OPERATION
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == LPUART1) {
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a20      	ldr	r2, [pc, #128]	@ (8001bc4 <HAL_UART_ErrorCallback+0x90>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d11a      	bne.n	8001b7c <HAL_UART_ErrorCallback+0x48>
        // Clear error flags and restart reception
        __HAL_UART_CLEAR_OREFLAG(&hlpuart1);
 8001b46:	4b20      	ldr	r3, [pc, #128]	@ (8001bc8 <HAL_UART_ErrorCallback+0x94>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2208      	movs	r2, #8
 8001b4c:	621a      	str	r2, [r3, #32]
        __HAL_UART_CLEAR_NEFLAG(&hlpuart1);
 8001b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc8 <HAL_UART_ErrorCallback+0x94>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2204      	movs	r2, #4
 8001b54:	621a      	str	r2, [r3, #32]
        __HAL_UART_CLEAR_FEFLAG(&hlpuart1);
 8001b56:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc8 <HAL_UART_ErrorCallback+0x94>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	621a      	str	r2, [r3, #32]
        __HAL_UART_CLEAR_PEFLAG(&hlpuart1);
 8001b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc8 <HAL_UART_ErrorCallback+0x94>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2201      	movs	r2, #1
 8001b64:	621a      	str	r2, [r3, #32]
        uart_error_count++;
 8001b66:	4b19      	ldr	r3, [pc, #100]	@ (8001bcc <HAL_UART_ErrorCallback+0x98>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	4a17      	ldr	r2, [pc, #92]	@ (8001bcc <HAL_UART_ErrorCallback+0x98>)
 8001b6e:	6013      	str	r3, [r2, #0]
        HAL_UART_Receive_IT(&hlpuart1, (uint8_t*)&receivedData, sizeof(Item));
 8001b70:	2218      	movs	r2, #24
 8001b72:	4917      	ldr	r1, [pc, #92]	@ (8001bd0 <HAL_UART_ErrorCallback+0x9c>)
 8001b74:	4814      	ldr	r0, [pc, #80]	@ (8001bc8 <HAL_UART_ErrorCallback+0x94>)
 8001b76:	f003 f9ad 	bl	8004ed4 <HAL_UART_Receive_IT>
        __HAL_UART_CLEAR_FEFLAG(&huart1);
        __HAL_UART_CLEAR_PEFLAG(&huart1);
        can_error_count++;
        HAL_UART_Receive_IT(&huart1, (uint8_t*)&CANreceivedData, sizeof(CANFrame));
    }
}
 8001b7a:	e01e      	b.n	8001bba <HAL_UART_ErrorCallback+0x86>
    else if (huart->Instance == USART1) {
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a14      	ldr	r2, [pc, #80]	@ (8001bd4 <HAL_UART_ErrorCallback+0xa0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d119      	bne.n	8001bba <HAL_UART_ErrorCallback+0x86>
        __HAL_UART_CLEAR_OREFLAG(&huart1);
 8001b86:	4b14      	ldr	r3, [pc, #80]	@ (8001bd8 <HAL_UART_ErrorCallback+0xa4>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2208      	movs	r2, #8
 8001b8c:	621a      	str	r2, [r3, #32]
        __HAL_UART_CLEAR_NEFLAG(&huart1);
 8001b8e:	4b12      	ldr	r3, [pc, #72]	@ (8001bd8 <HAL_UART_ErrorCallback+0xa4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2204      	movs	r2, #4
 8001b94:	621a      	str	r2, [r3, #32]
        __HAL_UART_CLEAR_FEFLAG(&huart1);
 8001b96:	4b10      	ldr	r3, [pc, #64]	@ (8001bd8 <HAL_UART_ErrorCallback+0xa4>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	621a      	str	r2, [r3, #32]
        __HAL_UART_CLEAR_PEFLAG(&huart1);
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd8 <HAL_UART_ErrorCallback+0xa4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	621a      	str	r2, [r3, #32]
        can_error_count++;
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8001bdc <HAL_UART_ErrorCallback+0xa8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	3301      	adds	r3, #1
 8001bac:	4a0b      	ldr	r2, [pc, #44]	@ (8001bdc <HAL_UART_ErrorCallback+0xa8>)
 8001bae:	6013      	str	r3, [r2, #0]
        HAL_UART_Receive_IT(&huart1, (uint8_t*)&CANreceivedData, sizeof(CANFrame));
 8001bb0:	2210      	movs	r2, #16
 8001bb2:	490b      	ldr	r1, [pc, #44]	@ (8001be0 <HAL_UART_ErrorCallback+0xac>)
 8001bb4:	4808      	ldr	r0, [pc, #32]	@ (8001bd8 <HAL_UART_ErrorCallback+0xa4>)
 8001bb6:	f003 f98d 	bl	8004ed4 <HAL_UART_Receive_IT>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40008000 	.word	0x40008000
 8001bc8:	20000230 	.word	0x20000230
 8001bcc:	20000390 	.word	0x20000390
 8001bd0:	20000208 	.word	0x20000208
 8001bd4:	40013800 	.word	0x40013800
 8001bd8:	200002c4 	.word	0x200002c4
 8001bdc:	20000394 	.word	0x20000394
 8001be0:	20000220 	.word	0x20000220

08001be4 <StartSenderTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSenderTask */
void StartSenderTask(void *argument)
{
 8001be4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001be8:	b095      	sub	sp, #84	@ 0x54
 8001bea:	af04      	add	r7, sp, #16
 8001bec:	6078      	str	r0, [r7, #4]
  Item receivedItem;
  uint32_t current_time;

  for(;;)
  {
    debug_counter++;
 8001bee:	4b4b      	ldr	r3, [pc, #300]	@ (8001d1c <StartSenderTask+0x138>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	4a49      	ldr	r2, [pc, #292]	@ (8001d1c <StartSenderTask+0x138>)
 8001bf6:	6013      	str	r3, [r2, #0]

    // Check if we have received data to process from ESP-NOW
    if (xQueueReceive(UARTQueue, &receivedItem, 0) == pdTRUE) {
 8001bf8:	4b49      	ldr	r3, [pc, #292]	@ (8001d20 <StartSenderTask+0x13c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f107 010c 	add.w	r1, r7, #12
 8001c00:	2200      	movs	r2, #0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f005 fdfe 	bl	8007804 <xQueueReceive>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d123      	bne.n	8001c56 <StartSenderTask+0x72>
      BSP_LED_Toggle(LED_GREEN);
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f000 fc4a 	bl	80024a8 <BSP_LED_Toggle>

      // Reduce printf frequency for better performance
      if (debug_counter % DEBUG_PRINT_INTERVAL == 0) {
 8001c14:	4b41      	ldr	r3, [pc, #260]	@ (8001d1c <StartSenderTask+0x138>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b42      	ldr	r3, [pc, #264]	@ (8001d24 <StartSenderTask+0x140>)
 8001c1a:	fba3 1302 	umull	r1, r3, r3, r2
 8001c1e:	095b      	lsrs	r3, r3, #5
 8001c20:	2164      	movs	r1, #100	@ 0x64
 8001c22:	fb01 f303 	mul.w	r3, r1, r3
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d114      	bne.n	8001c56 <StartSenderTask+0x72>
          printf("RX ESP32 - SOC: %u, Speed: %.1f, MAC: ", receivedItem.SOC, receivedItem.speedKmh);
 8001c2c:	89bb      	ldrh	r3, [r7, #12]
 8001c2e:	461c      	mov	r4, r3
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fc60 	bl	80004f8 <__aeabi_f2d>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4621      	mov	r1, r4
 8001c3e:	483a      	ldr	r0, [pc, #232]	@ (8001d28 <StartSenderTask+0x144>)
 8001c40:	f008 fc1a 	bl	800a478 <iprintf>
          PrintMAC(receivedItem.MacAddress);
 8001c44:	f107 030c 	add.w	r3, r7, #12
 8001c48:	3310      	adds	r3, #16
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff f98e 	bl	8000f6c <PrintMAC>
          printf("\n");
 8001c50:	200a      	movs	r0, #10
 8001c52:	f008 fc23 	bl	800a49c <putchar>
      }
    }

    // Send parsed CAN data to ESP32 periodically via LPUART1
    current_time = HAL_GetTick();
 8001c56:	f000 fc75 	bl	8002544 <HAL_GetTick>
 8001c5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (current_time - last_tx_time >= UART_TX_INTERVAL) {
 8001c5c:	4b33      	ldr	r3, [pc, #204]	@ (8001d2c <StartSenderTask+0x148>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001c68:	d354      	bcc.n	8001d14 <StartSenderTask+0x130>
      itemToSend = parsedCANData;  // Copy the parsed data
 8001c6a:	4b31      	ldr	r3, [pc, #196]	@ (8001d30 <StartSenderTask+0x14c>)
 8001c6c:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001c70:	461d      	mov	r5, r3
 8001c72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c76:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c7a:	e884 0003 	stmia.w	r4, {r0, r1}

      if (HAL_UART_Transmit(&hlpuart1, (uint8_t*)&itemToSend, sizeof(Item), 100) == HAL_OK) {
 8001c7e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001c82:	2364      	movs	r3, #100	@ 0x64
 8001c84:	2218      	movs	r2, #24
 8001c86:	482b      	ldr	r0, [pc, #172]	@ (8001d34 <StartSenderTask+0x150>)
 8001c88:	f003 f896 	bl	8004db8 <HAL_UART_Transmit>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d12d      	bne.n	8001cee <StartSenderTask+0x10a>
        if (debug_counter % DEBUG_PRINT_INTERVAL == 0) {
 8001c92:	4b22      	ldr	r3, [pc, #136]	@ (8001d1c <StartSenderTask+0x138>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	4b23      	ldr	r3, [pc, #140]	@ (8001d24 <StartSenderTask+0x140>)
 8001c98:	fba3 1302 	umull	r1, r3, r3, r2
 8001c9c:	095b      	lsrs	r3, r3, #5
 8001c9e:	2164      	movs	r1, #100	@ 0x64
 8001ca0:	fb01 f303 	mul.w	r3, r1, r3
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d11d      	bne.n	8001ce6 <StartSenderTask+0x102>
            printf("TX ESP32 - SOC: %u, Speed: %.1f km/h, Display: %.1f km/h, Odometer: %.1f km\n",
                   itemToSend.SOC, itemToSend.speedKmh, itemToSend.displaySpeed, itemToSend.odometerKm);
 8001caa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
            printf("TX ESP32 - SOC: %u, Speed: %.1f km/h, Display: %.1f km/h, Odometer: %.1f km\n",
 8001cac:	461e      	mov	r6, r3
                   itemToSend.SOC, itemToSend.speedKmh, itemToSend.displaySpeed, itemToSend.odometerKm);
 8001cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
            printf("TX ESP32 - SOC: %u, Speed: %.1f km/h, Display: %.1f km/h, Odometer: %.1f km\n",
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe fc21 	bl	80004f8 <__aeabi_f2d>
 8001cb6:	4680      	mov	r8, r0
 8001cb8:	4689      	mov	r9, r1
                   itemToSend.SOC, itemToSend.speedKmh, itemToSend.displaySpeed, itemToSend.odometerKm);
 8001cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
            printf("TX ESP32 - SOC: %u, Speed: %.1f km/h, Display: %.1f km/h, Odometer: %.1f km\n",
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fc1b 	bl	80004f8 <__aeabi_f2d>
 8001cc2:	4604      	mov	r4, r0
 8001cc4:	460d      	mov	r5, r1
                   itemToSend.SOC, itemToSend.speedKmh, itemToSend.displaySpeed, itemToSend.odometerKm);
 8001cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
            printf("TX ESP32 - SOC: %u, Speed: %.1f km/h, Display: %.1f km/h, Odometer: %.1f km\n",
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe fc15 	bl	80004f8 <__aeabi_f2d>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001cd6:	e9cd 4500 	strd	r4, r5, [sp]
 8001cda:	4642      	mov	r2, r8
 8001cdc:	464b      	mov	r3, r9
 8001cde:	4631      	mov	r1, r6
 8001ce0:	4815      	ldr	r0, [pc, #84]	@ (8001d38 <StartSenderTask+0x154>)
 8001ce2:	f008 fbc9 	bl	800a478 <iprintf>
        }
        BSP_LED_Toggle(LED_RED);
 8001ce6:	2002      	movs	r0, #2
 8001ce8:	f000 fbde 	bl	80024a8 <BSP_LED_Toggle>
 8001cec:	e00f      	b.n	8001d0e <StartSenderTask+0x12a>
      } else {
        if (debug_counter % (DEBUG_PRINT_INTERVAL * 5) == 0) {
 8001cee:	4b0b      	ldr	r3, [pc, #44]	@ (8001d1c <StartSenderTask+0x138>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	4b12      	ldr	r3, [pc, #72]	@ (8001d3c <StartSenderTask+0x158>)
 8001cf4:	fba3 1302 	umull	r1, r3, r3, r2
 8001cf8:	095b      	lsrs	r3, r3, #5
 8001cfa:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001cfe:	fb01 f303 	mul.w	r3, r1, r3
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d102      	bne.n	8001d0e <StartSenderTask+0x12a>
            printf("Failed to send CAN data to ESP32\n");
 8001d08:	480d      	ldr	r0, [pc, #52]	@ (8001d40 <StartSenderTask+0x15c>)
 8001d0a:	f008 fc25 	bl	800a558 <puts>
        }
      }
      last_tx_time = current_time;
 8001d0e:	4a07      	ldr	r2, [pc, #28]	@ (8001d2c <StartSenderTask+0x148>)
 8001d10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d12:	6013      	str	r3, [r2, #0]
    }

    osDelay(20); // Reduced delay for better performance
 8001d14:	2014      	movs	r0, #20
 8001d16:	f005 f98b 	bl	8007030 <osDelay>
    debug_counter++;
 8001d1a:	e768      	b.n	8001bee <StartSenderTask+0xa>
 8001d1c:	2000036c 	.word	0x2000036c
 8001d20:	20000370 	.word	0x20000370
 8001d24:	51eb851f 	.word	0x51eb851f
 8001d28:	0800c780 	.word	0x0800c780
 8001d2c:	20000368 	.word	0x20000368
 8001d30:	20000378 	.word	0x20000378
 8001d34:	20000230 	.word	0x20000230
 8001d38:	0800c7a8 	.word	0x0800c7a8
 8001d3c:	10624dd3 	.word	0x10624dd3
 8001d40:	0800c7f8 	.word	0x0800c7f8

08001d44 <StartTskUART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTskUART */
void StartTskUART(void *argument)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  {
    // Just handle monitoring and status reporting
    // Most work is now done in interrupt callbacks

    // Print status occasionally
    if (debug_counter % (DEBUG_PRINT_INTERVAL * 50) == 0) {
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d7c <StartTskUART+0x38>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4b0b      	ldr	r3, [pc, #44]	@ (8001d80 <StartTskUART+0x3c>)
 8001d52:	fba3 1302 	umull	r1, r3, r3, r2
 8001d56:	0b1b      	lsrs	r3, r3, #12
 8001d58:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001d5c:	fb01 f303 	mul.w	r3, r1, r3
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d105      	bne.n	8001d72 <StartTskUART+0x2e>
        printf("LPUART1 Status: OK | Errors: %lu\n", uart_error_count);
 8001d66:	4b07      	ldr	r3, [pc, #28]	@ (8001d84 <StartTskUART+0x40>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4806      	ldr	r0, [pc, #24]	@ (8001d88 <StartTskUART+0x44>)
 8001d6e:	f008 fb83 	bl	800a478 <iprintf>
    }

    osDelay(500); // Much longer delay since interrupts handle reception
 8001d72:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001d76:	f005 f95b 	bl	8007030 <osDelay>
    if (debug_counter % (DEBUG_PRINT_INTERVAL * 50) == 0) {
 8001d7a:	e7e7      	b.n	8001d4c <StartTskUART+0x8>
 8001d7c:	2000036c 	.word	0x2000036c
 8001d80:	d1b71759 	.word	0xd1b71759
 8001d84:	20000390 	.word	0x20000390
 8001d88:	0800c81c 	.word	0x0800c81c

08001d8c <StartSenderTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSenderTask2 */
void StartSenderTask2(void *argument)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  CANFrame receivedCANFrame;

  for(;;)
  {
    // Check if we have received CAN data to process
    if (xQueueReceive(UARTQueue2, &receivedCANFrame, 0) == pdTRUE) {
 8001d94:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc8 <StartSenderTask2+0x3c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f107 0108 	add.w	r1, r7, #8
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f005 fd30 	bl	8007804 <xQueueReceive>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d109      	bne.n	8001dbe <StartSenderTask2+0x32>
      // Parse the CAN frame and update parsedCANData
      parseTwizyFrame(&receivedCANFrame);
 8001daa:	f107 0308 	add.w	r3, r7, #8
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff f942 	bl	8001038 <parseTwizyFrame>

      // Print CAN data with reduced frequency
      PrintCANData(&receivedCANFrame);
 8001db4:	f107 0308 	add.w	r3, r7, #8
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff f901 	bl	8000fc0 <PrintCANData>
    }
    osDelay(20); // Reduced delay for better responsiveness
 8001dbe:	2014      	movs	r0, #20
 8001dc0:	f005 f936 	bl	8007030 <osDelay>
    if (xQueueReceive(UARTQueue2, &receivedCANFrame, 0) == pdTRUE) {
 8001dc4:	e7e6      	b.n	8001d94 <StartSenderTask2+0x8>
 8001dc6:	bf00      	nop
 8001dc8:	20000374 	.word	0x20000374

08001dcc <StartTskUART2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTskUART2 */
void StartTskUART2(void *argument)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  {
    // Just handle monitoring and status reporting
    // Most work is now done in interrupt callbacks

    // Print status occasionally
    if (debug_counter % (DEBUG_PRINT_INTERVAL * 50) == 0) {
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <StartTskUART2+0x38>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e08 <StartTskUART2+0x3c>)
 8001dda:	fba3 1302 	umull	r1, r3, r3, r2
 8001dde:	0b1b      	lsrs	r3, r3, #12
 8001de0:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001de4:	fb01 f303 	mul.w	r3, r1, r3
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d105      	bne.n	8001dfa <StartTskUART2+0x2e>
        printf("USART1 Status: OK | Errors: %lu\n", can_error_count);
 8001dee:	4b07      	ldr	r3, [pc, #28]	@ (8001e0c <StartTskUART2+0x40>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4619      	mov	r1, r3
 8001df4:	4806      	ldr	r0, [pc, #24]	@ (8001e10 <StartTskUART2+0x44>)
 8001df6:	f008 fb3f 	bl	800a478 <iprintf>
    }

    osDelay(500); // Much longer delay since interrupts handle reception
 8001dfa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001dfe:	f005 f917 	bl	8007030 <osDelay>
    if (debug_counter % (DEBUG_PRINT_INTERVAL * 50) == 0) {
 8001e02:	e7e7      	b.n	8001dd4 <StartTskUART2+0x8>
 8001e04:	2000036c 	.word	0x2000036c
 8001e08:	d1b71759 	.word	0xd1b71759
 8001e0c:	20000394 	.word	0x20000394
 8001e10:	0800c840 	.word	0x0800c840

08001e14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e24:	d101      	bne.n	8001e2a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001e26:	f000 fb79 	bl	800251c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e36:	b672      	cpsid	i
}
 8001e38:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e3a:	bf00      	nop
 8001e3c:	e7fd      	b.n	8001e3a <Error_Handler+0x8>

08001e3e <LL_AHB2_GRP1_EnableClock>:
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b085      	sub	sp, #20
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001e46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001e4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001e56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e62:	68fb      	ldr	r3, [r7, #12]
}
 8001e64:	bf00      	nop
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001e78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e7c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001e88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4013      	ands	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e94:	68fb      	ldr	r3, [r7, #12]
}
 8001e96:	bf00      	nop
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b085      	sub	sp, #20
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001eaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001eb0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001eba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ebe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
}
 8001ec8:	bf00      	nop
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	210f      	movs	r1, #15
 8001edc:	f06f 0001 	mvn.w	r0, #1
 8001ee0:	f000 fc00 	bl	80026e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b09c      	sub	sp, #112	@ 0x70
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f00:	f107 030c 	add.w	r3, r7, #12
 8001f04:	2250      	movs	r2, #80	@ 0x50
 8001f06:	2100      	movs	r1, #0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f008 fc05 	bl	800a718 <memset>
  if(huart->Instance==LPUART1)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a3e      	ldr	r2, [pc, #248]	@ (800200c <HAL_UART_MspInit+0x124>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d141      	bne.n	8001f9c <HAL_UART_MspInit+0xb4>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f20:	f107 030c 	add.w	r3, r7, #12
 8001f24:	4618      	mov	r0, r3
 8001f26:	f002 f9e8 	bl	80042fa <HAL_RCCEx_PeriphCLKConfig>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f30:	f7ff ff7f 	bl	8001e32 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001f34:	2001      	movs	r0, #1
 8001f36:	f7ff ff9b 	bl	8001e70 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3a:	2001      	movs	r0, #1
 8001f3c:	f7ff ff7f 	bl	8001e3e <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f40:	2002      	movs	r0, #2
 8001f42:	f7ff ff7c 	bl	8001e3e <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f46:	2308      	movs	r3, #8
 8001f48:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f52:	2300      	movs	r3, #0
 8001f54:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001f56:	2308      	movs	r3, #8
 8001f58:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f64:	f000 fca4 	bl	80028b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f68:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f76:	2300      	movs	r3, #0
 8001f78:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001f7a:	2308      	movs	r3, #8
 8001f7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001f82:	4619      	mov	r1, r3
 8001f84:	4822      	ldr	r0, [pc, #136]	@ (8002010 <HAL_UART_MspInit+0x128>)
 8001f86:	f000 fc93 	bl	80028b0 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2105      	movs	r1, #5
 8001f8e:	2025      	movs	r0, #37	@ 0x25
 8001f90:	f000 fba8 	bl	80026e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001f94:	2025      	movs	r0, #37	@ 0x25
 8001f96:	f000 fbbf 	bl	8002718 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f9a:	e033      	b.n	8002004 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a1c      	ldr	r2, [pc, #112]	@ (8002014 <HAL_UART_MspInit+0x12c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d12e      	bne.n	8002004 <HAL_UART_MspInit+0x11c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001faa:	2300      	movs	r3, #0
 8001fac:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fae:	f107 030c 	add.w	r3, r7, #12
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f002 f9a1 	bl	80042fa <HAL_RCCEx_PeriphCLKConfig>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_UART_MspInit+0xda>
      Error_Handler();
 8001fbe:	f7ff ff38 	bl	8001e32 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fc2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001fc6:	f7ff ff6c 	bl	8001ea2 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fca:	2001      	movs	r0, #1
 8001fcc:	f7ff ff37 	bl	8001e3e <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fd0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001fd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fe2:	2307      	movs	r3, #7
 8001fe4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001fea:	4619      	mov	r1, r3
 8001fec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ff0:	f000 fc5e 	bl	80028b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2105      	movs	r1, #5
 8001ff8:	2024      	movs	r0, #36	@ 0x24
 8001ffa:	f000 fb73 	bl	80026e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ffe:	2024      	movs	r0, #36	@ 0x24
 8002000:	f000 fb8a 	bl	8002718 <HAL_NVIC_EnableIRQ>
}
 8002004:	bf00      	nop
 8002006:	3770      	adds	r7, #112	@ 0x70
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40008000 	.word	0x40008000
 8002010:	48000400 	.word	0x48000400
 8002014:	40013800 	.word	0x40013800

08002018 <LL_APB1_GRP1_EnableClock>:
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002020:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002024:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002026:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4313      	orrs	r3, r2
 800202e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002030:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002034:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4013      	ands	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800203c:	68fb      	ldr	r3, [r7, #12]
}
 800203e:	bf00      	nop
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
	...

0800204c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08e      	sub	sp, #56	@ 0x38
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8002062:	2200      	movs	r2, #0
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	201c      	movs	r0, #28
 8002068:	f000 fb3c 	bl	80026e4 <HAL_NVIC_SetPriority>
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800206c:	201c      	movs	r0, #28
 800206e:	f000 fb53 	bl	8002718 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002072:	2001      	movs	r0, #1
 8002074:	f7ff ffd0 	bl	8002018 <LL_APB1_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002078:	f107 020c 	add.w	r2, r7, #12
 800207c:	f107 0310 	add.w	r3, r7, #16
 8002080:	4611      	mov	r1, r2
 8002082:	4618      	mov	r0, r3
 8002084:	f001 feb6 	bl	8003df4 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002088:	f001 fe88 	bl	8003d9c <HAL_RCC_GetPCLK1Freq>
 800208c:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800208e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002090:	4a21      	ldr	r2, [pc, #132]	@ (8002118 <HAL_InitTick+0xcc>)
 8002092:	fba2 2303 	umull	r2, r3, r2, r3
 8002096:	0c9b      	lsrs	r3, r3, #18
 8002098:	3b01      	subs	r3, #1
 800209a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800209c:	4b1f      	ldr	r3, [pc, #124]	@ (800211c <HAL_InitTick+0xd0>)
 800209e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020a2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80020a4:	4b1d      	ldr	r3, [pc, #116]	@ (800211c <HAL_InitTick+0xd0>)
 80020a6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020aa:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80020ac:	4a1b      	ldr	r2, [pc, #108]	@ (800211c <HAL_InitTick+0xd0>)
 80020ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020b0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80020b2:	4b1a      	ldr	r3, [pc, #104]	@ (800211c <HAL_InitTick+0xd0>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b8:	4b18      	ldr	r3, [pc, #96]	@ (800211c <HAL_InitTick+0xd0>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 80020be:	4817      	ldr	r0, [pc, #92]	@ (800211c <HAL_InitTick+0xd0>)
 80020c0:	f002 fba2 	bl	8004808 <HAL_TIM_Base_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 80020ca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d11b      	bne.n	800210a <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80020d2:	4812      	ldr	r0, [pc, #72]	@ (800211c <HAL_InitTick+0xd0>)
 80020d4:	f002 fbfa 	bl	80048cc <HAL_TIM_Base_Start_IT>
 80020d8:	4603      	mov	r3, r0
 80020da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 80020de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d111      	bne.n	800210a <HAL_InitTick+0xbe>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020e6:	201c      	movs	r0, #28
 80020e8:	f000 fb16 	bl	8002718 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b0f      	cmp	r3, #15
 80020f0:	d808      	bhi.n	8002104 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80020f2:	2200      	movs	r2, #0
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	201c      	movs	r0, #28
 80020f8:	f000 faf4 	bl	80026e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020fc:	4a08      	ldr	r2, [pc, #32]	@ (8002120 <HAL_InitTick+0xd4>)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	e002      	b.n	800210a <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

 /* Return function status */
  return status;
 800210a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800210e:	4618      	mov	r0, r3
 8002110:	3738      	adds	r7, #56	@ 0x38
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	431bde83 	.word	0x431bde83
 800211c:	20000398 	.word	0x20000398
 8002120:	20000018 	.word	0x20000018

08002124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002128:	bf00      	nop
 800212a:	e7fd      	b.n	8002128 <NMI_Handler+0x4>

0800212c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002130:	bf00      	nop
 8002132:	e7fd      	b.n	8002130 <HardFault_Handler+0x4>

08002134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002138:	bf00      	nop
 800213a:	e7fd      	b.n	8002138 <MemManage_Handler+0x4>

0800213c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002140:	bf00      	nop
 8002142:	e7fd      	b.n	8002140 <BusFault_Handler+0x4>

08002144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002148:	bf00      	nop
 800214a:	e7fd      	b.n	8002148 <UsageFault_Handler+0x4>

0800214c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
	...

0800215c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002160:	4802      	ldr	r0, [pc, #8]	@ (800216c <TIM2_IRQHandler+0x10>)
 8002162:	f002 fc01 	bl	8004968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000398 	.word	0x20000398

08002170 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002174:	4802      	ldr	r0, [pc, #8]	@ (8002180 <USART1_IRQHandler+0x10>)
 8002176:	f002 fef9 	bl	8004f6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	200002c4 	.word	0x200002c4

08002184 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002188:	4802      	ldr	r0, [pc, #8]	@ (8002194 <LPUART1_IRQHandler+0x10>)
 800218a:	f002 feef 	bl	8004f6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20000230 	.word	0x20000230

08002198 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return 1;
 800219c:	2301      	movs	r3, #1
}
 800219e:	4618      	mov	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <_kill>:

int _kill(int pid, int sig)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021b2:	f008 fb61 	bl	800a878 <__errno>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2216      	movs	r2, #22
 80021ba:	601a      	str	r2, [r3, #0]
  return -1;
 80021bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <_exit>:

void _exit (int status)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff ffe7 	bl	80021a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021da:	bf00      	nop
 80021dc:	e7fd      	b.n	80021da <_exit+0x12>

080021de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b086      	sub	sp, #24
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	60f8      	str	r0, [r7, #12]
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	e00a      	b.n	8002206 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021f0:	f3af 8000 	nop.w
 80021f4:	4601      	mov	r1, r0
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	1c5a      	adds	r2, r3, #1
 80021fa:	60ba      	str	r2, [r7, #8]
 80021fc:	b2ca      	uxtb	r2, r1
 80021fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	3301      	adds	r3, #1
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	429a      	cmp	r2, r3
 800220c:	dbf0      	blt.n	80021f0 <_read+0x12>
  }

  return len;
 800220e:	687b      	ldr	r3, [r7, #4]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002220:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002224:	4618      	mov	r0, r3
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002240:	605a      	str	r2, [r3, #4]
  return 0;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <_isatty>:

int _isatty(int file)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002258:	2301      	movs	r3, #1
}
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002266:	b480      	push	{r7}
 8002268:	b085      	sub	sp, #20
 800226a:	af00      	add	r7, sp, #0
 800226c:	60f8      	str	r0, [r7, #12]
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002288:	4a14      	ldr	r2, [pc, #80]	@ (80022dc <_sbrk+0x5c>)
 800228a:	4b15      	ldr	r3, [pc, #84]	@ (80022e0 <_sbrk+0x60>)
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002294:	4b13      	ldr	r3, [pc, #76]	@ (80022e4 <_sbrk+0x64>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d102      	bne.n	80022a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800229c:	4b11      	ldr	r3, [pc, #68]	@ (80022e4 <_sbrk+0x64>)
 800229e:	4a12      	ldr	r2, [pc, #72]	@ (80022e8 <_sbrk+0x68>)
 80022a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022a2:	4b10      	ldr	r3, [pc, #64]	@ (80022e4 <_sbrk+0x64>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d207      	bcs.n	80022c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022b0:	f008 fae2 	bl	800a878 <__errno>
 80022b4:	4603      	mov	r3, r0
 80022b6:	220c      	movs	r2, #12
 80022b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022be:	e009      	b.n	80022d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022c0:	4b08      	ldr	r3, [pc, #32]	@ (80022e4 <_sbrk+0x64>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022c6:	4b07      	ldr	r3, [pc, #28]	@ (80022e4 <_sbrk+0x64>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	4a05      	ldr	r2, [pc, #20]	@ (80022e4 <_sbrk+0x64>)
 80022d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022d2:	68fb      	ldr	r3, [r7, #12]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20030000 	.word	0x20030000
 80022e0:	00000400 	.word	0x00000400
 80022e4:	200003e4 	.word	0x200003e4
 80022e8:	20001f20 	.word	0x20001f20

080022ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80022f0:	4b24      	ldr	r3, [pc, #144]	@ (8002384 <SystemInit+0x98>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f6:	4a23      	ldr	r2, [pc, #140]	@ (8002384 <SystemInit+0x98>)
 80022f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002300:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002310:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002314:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8002318:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800231a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002324:	4b18      	ldr	r3, [pc, #96]	@ (8002388 <SystemInit+0x9c>)
 8002326:	4013      	ands	r3, r2
 8002328:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800232a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800232e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002332:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002336:	f023 0305 	bic.w	r3, r3, #5
 800233a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800233e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002342:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002346:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800234a:	f023 0301 	bic.w	r3, r3, #1
 800234e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002352:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002356:	4a0d      	ldr	r2, [pc, #52]	@ (800238c <SystemInit+0xa0>)
 8002358:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800235a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800235e:	4a0b      	ldr	r2, [pc, #44]	@ (800238c <SystemInit+0xa0>)
 8002360:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002362:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800236c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002370:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002372:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002376:	2200      	movs	r2, #0
 8002378:	619a      	str	r2, [r3, #24]
}
 800237a:	bf00      	nop
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	e000ed00 	.word	0xe000ed00
 8002388:	faf6fefb 	.word	0xfaf6fefb
 800238c:	22041000 	.word	0x22041000

08002390 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002390:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002392:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002394:	3304      	adds	r3, #4

08002396 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002396:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002398:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800239a:	d3f9      	bcc.n	8002390 <CopyDataInit>
  bx lr
 800239c:	4770      	bx	lr

0800239e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800239e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80023a0:	3004      	adds	r0, #4

080023a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80023a2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80023a4:	d3fb      	bcc.n	800239e <FillZerobss>
  bx lr
 80023a6:	4770      	bx	lr

080023a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023a8:	480c      	ldr	r0, [pc, #48]	@ (80023dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80023ac:	f7ff ff9e 	bl	80022ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80023b0:	480b      	ldr	r0, [pc, #44]	@ (80023e0 <LoopForever+0x6>)
 80023b2:	490c      	ldr	r1, [pc, #48]	@ (80023e4 <LoopForever+0xa>)
 80023b4:	4a0c      	ldr	r2, [pc, #48]	@ (80023e8 <LoopForever+0xe>)
 80023b6:	2300      	movs	r3, #0
 80023b8:	f7ff ffed 	bl	8002396 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80023bc:	480b      	ldr	r0, [pc, #44]	@ (80023ec <LoopForever+0x12>)
 80023be:	490c      	ldr	r1, [pc, #48]	@ (80023f0 <LoopForever+0x16>)
 80023c0:	4a0c      	ldr	r2, [pc, #48]	@ (80023f4 <LoopForever+0x1a>)
 80023c2:	2300      	movs	r3, #0
 80023c4:	f7ff ffe7 	bl	8002396 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80023c8:	480b      	ldr	r0, [pc, #44]	@ (80023f8 <LoopForever+0x1e>)
 80023ca:	490c      	ldr	r1, [pc, #48]	@ (80023fc <LoopForever+0x22>)
 80023cc:	2300      	movs	r3, #0
 80023ce:	f7ff ffe8 	bl	80023a2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80023d2:	f008 fa57 	bl	800a884 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80023d6:	f7ff f92b 	bl	8001630 <main>

080023da <LoopForever>:

LoopForever:
  b LoopForever
 80023da:	e7fe      	b.n	80023da <LoopForever>
  ldr   r0, =_estack
 80023dc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80023e0:	20000008 	.word	0x20000008
 80023e4:	200001ec 	.word	0x200001ec
 80023e8:	0800cd94 	.word	0x0800cd94
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80023ec:	20030000 	.word	0x20030000
 80023f0:	20030000 	.word	0x20030000
 80023f4:	0800cf78 	.word	0x0800cf78
  INIT_BSS _sbss, _ebss
 80023f8:	200001ec 	.word	0x200001ec
 80023fc:	20001f20 	.word	0x20001f20

08002400 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002400:	e7fe      	b.n	8002400 <ADC1_IRQHandler>

08002402 <LL_AHB2_GRP1_EnableClock>:
{
 8002402:	b480      	push	{r7}
 8002404:	b085      	sub	sp, #20
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800240a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800240e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002410:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4313      	orrs	r3, r2
 8002418:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800241a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800241e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4013      	ands	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002426:	68fb      	ldr	r3, [r7, #12]
}
 8002428:	bf00      	nop
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800243e:	f107 030c 	add.w	r3, r7, #12
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	605a      	str	r2, [r3, #4]
 8002448:	609a      	str	r2, [r3, #8]
 800244a:	60da      	str	r2, [r3, #12]
 800244c:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800244e:	2002      	movs	r0, #2
 8002450:	f7ff ffd7 	bl	8002402 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	4a12      	ldr	r2, [pc, #72]	@ (80024a0 <BSP_LED_Init+0x6c>)
 8002458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800245c:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 800245e:	2301      	movs	r3, #1
 8002460:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002466:	2302      	movs	r3, #2
 8002468:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	4a0d      	ldr	r2, [pc, #52]	@ (80024a4 <BSP_LED_Init+0x70>)
 800246e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002472:	f107 020c 	add.w	r2, r7, #12
 8002476:	4611      	mov	r1, r2
 8002478:	4618      	mov	r0, r3
 800247a:	f000 fa19 	bl	80028b0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	4a08      	ldr	r2, [pc, #32]	@ (80024a4 <BSP_LED_Init+0x70>)
 8002482:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	4a05      	ldr	r2, [pc, #20]	@ (80024a0 <BSP_LED_Init+0x6c>)
 800248a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800248e:	2200      	movs	r2, #0
 8002490:	4619      	mov	r1, r3
 8002492:	f000 fb7d 	bl	8002b90 <HAL_GPIO_WritePin>
}
 8002496:	bf00      	nop
 8002498:	3720      	adds	r7, #32
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	0800c9e0 	.word	0x0800c9e0
 80024a4:	2000000c 	.word	0x2000000c

080024a8 <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	4a07      	ldr	r2, [pc, #28]	@ (80024d4 <BSP_LED_Toggle+0x2c>)
 80024b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	4906      	ldr	r1, [pc, #24]	@ (80024d8 <BSP_LED_Toggle+0x30>)
 80024be:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80024c2:	4619      	mov	r1, r3
 80024c4:	4610      	mov	r0, r2
 80024c6:	f000 fb7b 	bl	8002bc0 <HAL_GPIO_TogglePin>
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	2000000c 	.word	0x2000000c
 80024d8:	0800c9e0 	.word	0x0800c9e0

080024dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002518 <HAL_Init+0x3c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a0b      	ldr	r2, [pc, #44]	@ (8002518 <HAL_Init+0x3c>)
 80024ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024f0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024f2:	2003      	movs	r0, #3
 80024f4:	f000 f8eb 	bl	80026ce <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024f8:	200f      	movs	r0, #15
 80024fa:	f7ff fda7 	bl	800204c <HAL_InitTick>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d002      	beq.n	800250a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	71fb      	strb	r3, [r7, #7]
 8002508:	e001      	b.n	800250e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800250a:	f7ff fce3 	bl	8001ed4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800250e:	79fb      	ldrb	r3, [r7, #7]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	58004000 	.word	0x58004000

0800251c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002520:	4b06      	ldr	r3, [pc, #24]	@ (800253c <HAL_IncTick+0x20>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	461a      	mov	r2, r3
 8002526:	4b06      	ldr	r3, [pc, #24]	@ (8002540 <HAL_IncTick+0x24>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4413      	add	r3, r2
 800252c:	4a04      	ldr	r2, [pc, #16]	@ (8002540 <HAL_IncTick+0x24>)
 800252e:	6013      	str	r3, [r2, #0]
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	2000001c 	.word	0x2000001c
 8002540:	200003e8 	.word	0x200003e8

08002544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return uwTick;
 8002548:	4b03      	ldr	r3, [pc, #12]	@ (8002558 <HAL_GetTick+0x14>)
 800254a:	681b      	ldr	r3, [r3, #0]
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	200003e8 	.word	0x200003e8

0800255c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002560:	4b03      	ldr	r3, [pc, #12]	@ (8002570 <HAL_GetTickPrio+0x14>)
 8002562:	681b      	ldr	r3, [r3, #0]
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	20000018 	.word	0x20000018

08002574 <__NVIC_SetPriorityGrouping>:
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002584:	4b0c      	ldr	r3, [pc, #48]	@ (80025b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002590:	4013      	ands	r3, r2
 8002592:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800259c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025a6:	4a04      	ldr	r2, [pc, #16]	@ (80025b8 <__NVIC_SetPriorityGrouping+0x44>)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	60d3      	str	r3, [r2, #12]
}
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <__NVIC_GetPriorityGrouping>:
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c0:	4b04      	ldr	r3, [pc, #16]	@ (80025d4 <__NVIC_GetPriorityGrouping+0x18>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	0a1b      	lsrs	r3, r3, #8
 80025c6:	f003 0307 	and.w	r3, r3, #7
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <__NVIC_EnableIRQ>:
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	db0b      	blt.n	8002602 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	f003 021f 	and.w	r2, r3, #31
 80025f0:	4907      	ldr	r1, [pc, #28]	@ (8002610 <__NVIC_EnableIRQ+0x38>)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	095b      	lsrs	r3, r3, #5
 80025f8:	2001      	movs	r0, #1
 80025fa:	fa00 f202 	lsl.w	r2, r0, r2
 80025fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	e000e100 	.word	0xe000e100

08002614 <__NVIC_SetPriority>:
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	6039      	str	r1, [r7, #0]
 800261e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002624:	2b00      	cmp	r3, #0
 8002626:	db0a      	blt.n	800263e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	b2da      	uxtb	r2, r3
 800262c:	490c      	ldr	r1, [pc, #48]	@ (8002660 <__NVIC_SetPriority+0x4c>)
 800262e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002632:	0112      	lsls	r2, r2, #4
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	440b      	add	r3, r1
 8002638:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800263c:	e00a      	b.n	8002654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	b2da      	uxtb	r2, r3
 8002642:	4908      	ldr	r1, [pc, #32]	@ (8002664 <__NVIC_SetPriority+0x50>)
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	3b04      	subs	r3, #4
 800264c:	0112      	lsls	r2, r2, #4
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	440b      	add	r3, r1
 8002652:	761a      	strb	r2, [r3, #24]
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	e000e100 	.word	0xe000e100
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <NVIC_EncodePriority>:
{
 8002668:	b480      	push	{r7}
 800266a:	b089      	sub	sp, #36	@ 0x24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f1c3 0307 	rsb	r3, r3, #7
 8002682:	2b04      	cmp	r3, #4
 8002684:	bf28      	it	cs
 8002686:	2304      	movcs	r3, #4
 8002688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3304      	adds	r3, #4
 800268e:	2b06      	cmp	r3, #6
 8002690:	d902      	bls.n	8002698 <NVIC_EncodePriority+0x30>
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3b03      	subs	r3, #3
 8002696:	e000      	b.n	800269a <NVIC_EncodePriority+0x32>
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800269c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43da      	mvns	r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	401a      	ands	r2, r3
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ba:	43d9      	mvns	r1, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c0:	4313      	orrs	r3, r2
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3724      	adds	r7, #36	@ 0x24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff ff4c 	bl	8002574 <__NVIC_SetPriorityGrouping>
}
 80026dc:	bf00      	nop
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
 80026f0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026f2:	f7ff ff63 	bl	80025bc <__NVIC_GetPriorityGrouping>
 80026f6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	68b9      	ldr	r1, [r7, #8]
 80026fc:	6978      	ldr	r0, [r7, #20]
 80026fe:	f7ff ffb3 	bl	8002668 <NVIC_EncodePriority>
 8002702:	4602      	mov	r2, r0
 8002704:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002708:	4611      	mov	r1, r2
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff ff82 	bl	8002614 <__NVIC_SetPriority>
}
 8002710:	bf00      	nop
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff ff56 	bl	80025d8 <__NVIC_EnableIRQ>
}
 800272c:	bf00      	nop
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e04f      	b.n	80027e6 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d008      	beq.n	8002764 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2204      	movs	r2, #4
 8002756:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e040      	b.n	80027e6 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 020e 	bic.w	r2, r2, #14
 8002772:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800277e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002782:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0201 	bic.w	r2, r2, #1
 8002792:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002798:	f003 021c 	and.w	r2, r3, #28
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	2101      	movs	r1, #1
 80027a2:	fa01 f202 	lsl.w	r2, r1, r2
 80027a6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80027b0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00c      	beq.n	80027d4 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027c8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80027d2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b084      	sub	sp, #16
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d005      	beq.n	8002816 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2204      	movs	r2, #4
 800280e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
 8002814:	e047      	b.n	80028a6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 020e 	bic.w	r2, r2, #14
 8002824:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0201 	bic.w	r2, r2, #1
 8002834:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002840:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002844:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284a:	f003 021c 	and.w	r2, r3, #28
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002852:	2101      	movs	r1, #1
 8002854:	fa01 f202 	lsl.w	r2, r1, r2
 8002858:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002862:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00c      	beq.n	8002886 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002876:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800287a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002884:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	4798      	blx	r3
    }
  }
  return status;
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b087      	sub	sp, #28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028be:	e14c      	b.n	8002b5a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	2101      	movs	r1, #1
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	fa01 f303 	lsl.w	r3, r1, r3
 80028cc:	4013      	ands	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 813e 	beq.w	8002b54 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 0303 	and.w	r3, r3, #3
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d005      	beq.n	80028f0 <HAL_GPIO_Init+0x40>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d130      	bne.n	8002952 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	2203      	movs	r2, #3
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4013      	ands	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	4313      	orrs	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002926:	2201      	movs	r2, #1
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4013      	ands	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	091b      	lsrs	r3, r3, #4
 800293c:	f003 0201 	and.w	r2, r3, #1
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	2b03      	cmp	r3, #3
 800295c:	d017      	beq.n	800298e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	2203      	movs	r2, #3
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4013      	ands	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d123      	bne.n	80029e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	08da      	lsrs	r2, r3, #3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3208      	adds	r2, #8
 80029a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	220f      	movs	r2, #15
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	43db      	mvns	r3, r3
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4013      	ands	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	691a      	ldr	r2, [r3, #16]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	08da      	lsrs	r2, r3, #3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3208      	adds	r2, #8
 80029dc:	6939      	ldr	r1, [r7, #16]
 80029de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	2203      	movs	r2, #3
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4013      	ands	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 0203 	and.w	r2, r3, #3
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 8098 	beq.w	8002b54 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002a24:	4a54      	ldr	r2, [pc, #336]	@ (8002b78 <HAL_GPIO_Init+0x2c8>)
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	089b      	lsrs	r3, r3, #2
 8002a2a:	3302      	adds	r3, #2
 8002a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	220f      	movs	r2, #15
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a4e:	d019      	beq.n	8002a84 <HAL_GPIO_Init+0x1d4>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a4a      	ldr	r2, [pc, #296]	@ (8002b7c <HAL_GPIO_Init+0x2cc>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d013      	beq.n	8002a80 <HAL_GPIO_Init+0x1d0>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a49      	ldr	r2, [pc, #292]	@ (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d00d      	beq.n	8002a7c <HAL_GPIO_Init+0x1cc>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a48      	ldr	r2, [pc, #288]	@ (8002b84 <HAL_GPIO_Init+0x2d4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d007      	beq.n	8002a78 <HAL_GPIO_Init+0x1c8>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a47      	ldr	r2, [pc, #284]	@ (8002b88 <HAL_GPIO_Init+0x2d8>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d101      	bne.n	8002a74 <HAL_GPIO_Init+0x1c4>
 8002a70:	2304      	movs	r3, #4
 8002a72:	e008      	b.n	8002a86 <HAL_GPIO_Init+0x1d6>
 8002a74:	2307      	movs	r3, #7
 8002a76:	e006      	b.n	8002a86 <HAL_GPIO_Init+0x1d6>
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e004      	b.n	8002a86 <HAL_GPIO_Init+0x1d6>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e002      	b.n	8002a86 <HAL_GPIO_Init+0x1d6>
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <HAL_GPIO_Init+0x1d6>
 8002a84:	2300      	movs	r3, #0
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	f002 0203 	and.w	r2, r2, #3
 8002a8c:	0092      	lsls	r2, r2, #2
 8002a8e:	4093      	lsls	r3, r2
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a96:	4938      	ldr	r1, [pc, #224]	@ (8002b78 <HAL_GPIO_Init+0x2c8>)
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	089b      	lsrs	r3, r3, #2
 8002a9c:	3302      	adds	r3, #2
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002aa4:	4b39      	ldr	r3, [pc, #228]	@ (8002b8c <HAL_GPIO_Init+0x2dc>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ac8:	4a30      	ldr	r2, [pc, #192]	@ (8002b8c <HAL_GPIO_Init+0x2dc>)
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002ace:	4b2f      	ldr	r3, [pc, #188]	@ (8002b8c <HAL_GPIO_Init+0x2dc>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4013      	ands	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002af2:	4a26      	ldr	r2, [pc, #152]	@ (8002b8c <HAL_GPIO_Init+0x2dc>)
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002af8:	4b24      	ldr	r3, [pc, #144]	@ (8002b8c <HAL_GPIO_Init+0x2dc>)
 8002afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	43db      	mvns	r3, r3
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4013      	ands	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b1e:	4a1b      	ldr	r2, [pc, #108]	@ (8002b8c <HAL_GPIO_Init+0x2dc>)
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8002b26:	4b19      	ldr	r3, [pc, #100]	@ (8002b8c <HAL_GPIO_Init+0x2dc>)
 8002b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	43db      	mvns	r3, r3
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4013      	ands	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b4c:	4a0f      	ldr	r2, [pc, #60]	@ (8002b8c <HAL_GPIO_Init+0x2dc>)
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	3301      	adds	r3, #1
 8002b58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	fa22 f303 	lsr.w	r3, r2, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f47f aeab 	bne.w	80028c0 <HAL_GPIO_Init+0x10>
  }
}
 8002b6a:	bf00      	nop
 8002b6c:	bf00      	nop
 8002b6e:	371c      	adds	r7, #28
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	40010000 	.word	0x40010000
 8002b7c:	48000400 	.word	0x48000400
 8002b80:	48000800 	.word	0x48000800
 8002b84:	48000c00 	.word	0x48000c00
 8002b88:	48001000 	.word	0x48001000
 8002b8c:	58000800 	.word	0x58000800

08002b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	807b      	strh	r3, [r7, #2]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ba0:	787b      	ldrb	r3, [r7, #1]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ba6:	887a      	ldrh	r2, [r7, #2]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bac:	e002      	b.n	8002bb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bae:	887a      	ldrh	r2, [r7, #2]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bd2:	887a      	ldrh	r2, [r7, #2]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	041a      	lsls	r2, r3, #16
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	43d9      	mvns	r1, r3
 8002bde:	887b      	ldrh	r3, [r7, #2]
 8002be0:	400b      	ands	r3, r1
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	619a      	str	r2, [r3, #24]
}
 8002be8:	bf00      	nop
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bf8:	4b05      	ldr	r3, [pc, #20]	@ (8002c10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a04      	ldr	r2, [pc, #16]	@ (8002c10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c02:	6013      	str	r3, [r2, #0]
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	58000400 	.word	0x58000400

08002c14 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002c18:	4b04      	ldr	r3, [pc, #16]	@ (8002c2c <HAL_PWREx_GetVoltageRange+0x18>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	58000400 	.word	0x58000400

08002c30 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002c34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c42:	d101      	bne.n	8002c48 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002c44:	2301      	movs	r3, #1
 8002c46:	e000      	b.n	8002c4a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002c58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c66:	6013      	str	r3, [r2, #0]
}
 8002c68:	bf00      	nop
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002c72:	b480      	push	{r7}
 8002c74:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002c76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c84:	6013      	str	r3, [r2, #0]
}
 8002c86:	bf00      	nop
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002c94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ca2:	d101      	bne.n	8002ca8 <LL_RCC_HSE_IsReady+0x18>
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e000      	b.n	8002caa <LL_RCC_HSE_IsReady+0x1a>
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002cb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cc6:	6013      	str	r3, [r2, #0]
}
 8002cc8:	bf00      	nop
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002cd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ce0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ce4:	6013      	str	r3, [r2, #0]
}
 8002ce6:	bf00      	nop
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002cf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d02:	d101      	bne.n	8002d08 <LL_RCC_HSI_IsReady+0x18>
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <LL_RCC_HSI_IsReady+0x1a>
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002d1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	061b      	lsls	r3, r3, #24
 8002d2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	604b      	str	r3, [r1, #4]
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002d42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d4e:	f043 0301 	orr.w	r3, r3, #1
 8002d52:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8002d56:	bf00      	nop
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002d64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d70:	f023 0301 	bic.w	r3, r3, #1
 8002d74:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8002d78:	bf00      	nop
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8002d82:	b480      	push	{r7}
 8002d84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002d86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d101      	bne.n	8002d9a <LL_RCC_HSI48_IsReady+0x18>
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <LL_RCC_HSI48_IsReady+0x1a>
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8002da6:	b480      	push	{r7}
 8002da8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002daa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002db2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002dbe:	bf00      	nop
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002dcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dd8:	f023 0301 	bic.w	r3, r3, #1
 8002ddc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002de0:	bf00      	nop
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8002dea:	b480      	push	{r7}
 8002dec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002dee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002df6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dfa:	f043 0304 	orr.w	r3, r3, #4
 8002dfe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002e02:	bf00      	nop
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e1c:	f023 0304 	bic.w	r3, r3, #4
 8002e20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002e32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d101      	bne.n	8002e46 <LL_RCC_LSE_IsReady+0x18>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <LL_RCC_LSE_IsReady+0x1a>
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002e52:	b480      	push	{r7}
 8002e54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002e56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002e6a:	bf00      	nop
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002e78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e84:	f023 0301 	bic.w	r3, r3, #1
 8002e88:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002e8c:	bf00      	nop
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002e96:	b480      	push	{r7}
 8002e98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002e9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d101      	bne.n	8002eae <LL_RCC_LSI1_IsReady+0x18>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <LL_RCC_LSI1_IsReady+0x1a>
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002ebe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ec6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002eca:	f043 0304 	orr.w	r3, r3, #4
 8002ece:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002ed2:	bf00      	nop
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002ee0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ee8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002eec:	f023 0304 	bic.w	r3, r3, #4
 8002ef0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002ef4:	bf00      	nop
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002efe:	b480      	push	{r7}
 8002f00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002f02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d101      	bne.n	8002f16 <LL_RCC_LSI2_IsReady+0x18>
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <LL_RCC_LSI2_IsReady+0x1a>
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002f2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f32:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	021b      	lsls	r3, r3, #8
 8002f3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002f54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f5e:	f043 0301 	orr.w	r3, r3, #1
 8002f62:	6013      	str	r3, [r2, #0]
}
 8002f64:	bf00      	nop
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002f72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f7c:	f023 0301 	bic.w	r3, r3, #1
 8002f80:	6013      	str	r3, [r2, #0]
}
 8002f82:	bf00      	nop
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002f90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d101      	bne.n	8002fa2 <LL_RCC_MSI_IsReady+0x16>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <LL_RCC_MSI_IsReady+0x18>
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002fb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	600b      	str	r3, [r1, #0]
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002fdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fe6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2bb0      	cmp	r3, #176	@ 0xb0
 8002fec:	d901      	bls.n	8002ff2 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002fee:	23b0      	movs	r3, #176	@ 0xb0
 8002ff0:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002ff2:	687b      	ldr	r3, [r7, #4]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003008:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	021b      	lsls	r3, r3, #8
 8003016:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800301a:	4313      	orrs	r3, r2
 800301c:	604b      	str	r3, [r1, #4]
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800302a:	b480      	push	{r7}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003032:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f023 0203 	bic.w	r2, r3, #3
 800303c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4313      	orrs	r3, r2
 8003044:	608b      	str	r3, [r1, #8]
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003052:	b480      	push	{r7}
 8003054:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003056:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 030c 	and.w	r3, r3, #12
}
 8003060:	4618      	mov	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003072:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800307c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4313      	orrs	r3, r2
 8003084:	608b      	str	r3, [r1, #8]
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800309a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800309e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80030a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80030c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80030ce:	f023 020f 	bic.w	r2, r3, #15
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	091b      	lsrs	r3, r3, #4
 80030d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030da:	4313      	orrs	r3, r2
 80030dc:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80030f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4313      	orrs	r3, r2
 8003106:	608b      	str	r3, [r1, #8]
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800311c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003126:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4313      	orrs	r3, r2
 800312e:	608b      	str	r3, [r1, #8]
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003140:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800314a:	4618      	mov	r0, r3
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8003158:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800315c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003160:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003164:	4618      	mov	r0, r3
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800316e:	b480      	push	{r7}
 8003170:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003172:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003176:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003180:	4618      	mov	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800318a:	b480      	push	{r7}
 800318c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800318e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8003198:	4618      	mov	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80031a2:	b480      	push	{r7}
 80031a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80031a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80031ba:	b480      	push	{r7}
 80031bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80031be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031cc:	6013      	str	r3, [r2, #0]
}
 80031ce:	bf00      	nop
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80031dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031ea:	6013      	str	r3, [r2, #0]
}
 80031ec:	bf00      	nop
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80031f6:	b480      	push	{r7}
 80031f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80031fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003204:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003208:	d101      	bne.n	800320e <LL_RCC_PLL_IsReady+0x18>
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <LL_RCC_PLL_IsReady+0x1a>
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800321a:	b480      	push	{r7}
 800321c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800321e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	0a1b      	lsrs	r3, r3, #8
 8003226:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800322a:	4618      	mov	r0, r3
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003238:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8003242:	4618      	mov	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003250:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800325a:	4618      	mov	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003268:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	f003 0303 	and.w	r3, r3, #3
}
 8003272:	4618      	mov	r0, r3
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003280:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800328a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800328e:	d101      	bne.n	8003294 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003290:	2301      	movs	r3, #1
 8003292:	e000      	b.n	8003296 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80032a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80032ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032b4:	d101      	bne.n	80032ba <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80032c6:	b480      	push	{r7}
 80032c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80032ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80032d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032da:	d101      	bne.n	80032e0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80032dc:	2301      	movs	r3, #1
 80032de:	e000      	b.n	80032e2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80032f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032fe:	d101      	bne.n	8003304 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003314:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800331e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003322:	d101      	bne.n	8003328 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003324:	2301      	movs	r3, #1
 8003326:	e000      	b.n	800332a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003334:	b590      	push	{r4, r7, lr}
 8003336:	b08d      	sub	sp, #52	@ 0x34
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e363      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0320 	and.w	r3, r3, #32
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 808d 	beq.w	800346e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003354:	f7ff fe7d 	bl	8003052 <LL_RCC_GetSysClkSource>
 8003358:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800335a:	f7ff ff83 	bl	8003264 <LL_RCC_PLL_GetMainSource>
 800335e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003362:	2b00      	cmp	r3, #0
 8003364:	d005      	beq.n	8003372 <HAL_RCC_OscConfig+0x3e>
 8003366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003368:	2b0c      	cmp	r3, #12
 800336a:	d147      	bne.n	80033fc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800336c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800336e:	2b01      	cmp	r3, #1
 8003370:	d144      	bne.n	80033fc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e347      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8003382:	f7ff fe28 	bl	8002fd6 <LL_RCC_MSI_GetRange>
 8003386:	4603      	mov	r3, r0
 8003388:	429c      	cmp	r4, r3
 800338a:	d914      	bls.n	80033b6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003390:	4618      	mov	r0, r3
 8003392:	f000 fd61 	bl	8003e58 <RCC_SetFlashLatencyFromMSIRange>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e336      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff fe02 	bl	8002fae <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff fe26 	bl	8003000 <LL_RCC_MSI_SetCalibTrimming>
 80033b4:	e013      	b.n	80033de <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff fdf7 	bl	8002fae <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff fe1b 	bl	8003000 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 fd42 	bl	8003e58 <RCC_SetFlashLatencyFromMSIRange>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e317      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80033de:	f000 fcc9 	bl	8003d74 <HAL_RCC_GetHCLKFreq>
 80033e2:	4603      	mov	r3, r0
 80033e4:	4aa4      	ldr	r2, [pc, #656]	@ (8003678 <HAL_RCC_OscConfig+0x344>)
 80033e6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033e8:	4ba4      	ldr	r3, [pc, #656]	@ (800367c <HAL_RCC_OscConfig+0x348>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7fe fe2d 	bl	800204c <HAL_InitTick>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d039      	beq.n	800346c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e308      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d01e      	beq.n	8003442 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003404:	f7ff fda4 	bl	8002f50 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003408:	f7ff f89c 	bl	8002544 <HAL_GetTick>
 800340c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003410:	f7ff f898 	bl	8002544 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e2f5      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003422:	f7ff fdb3 	bl	8002f8c <LL_RCC_MSI_IsReady>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0f1      	beq.n	8003410 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff fdbc 	bl	8002fae <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff fde0 	bl	8003000 <LL_RCC_MSI_SetCalibTrimming>
 8003440:	e015      	b.n	800346e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003442:	f7ff fd94 	bl	8002f6e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003446:	f7ff f87d 	bl	8002544 <HAL_GetTick>
 800344a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800344c:	e008      	b.n	8003460 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800344e:	f7ff f879 	bl	8002544 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e2d6      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003460:	f7ff fd94 	bl	8002f8c <LL_RCC_MSI_IsReady>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f1      	bne.n	800344e <HAL_RCC_OscConfig+0x11a>
 800346a:	e000      	b.n	800346e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800346c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d047      	beq.n	800350a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800347a:	f7ff fdea 	bl	8003052 <LL_RCC_GetSysClkSource>
 800347e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003480:	f7ff fef0 	bl	8003264 <LL_RCC_PLL_GetMainSource>
 8003484:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	2b08      	cmp	r3, #8
 800348a:	d005      	beq.n	8003498 <HAL_RCC_OscConfig+0x164>
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	2b0c      	cmp	r3, #12
 8003490:	d108      	bne.n	80034a4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	2b03      	cmp	r3, #3
 8003496:	d105      	bne.n	80034a4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d134      	bne.n	800350a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e2b4      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034ac:	d102      	bne.n	80034b4 <HAL_RCC_OscConfig+0x180>
 80034ae:	f7ff fbd1 	bl	8002c54 <LL_RCC_HSE_Enable>
 80034b2:	e001      	b.n	80034b8 <HAL_RCC_OscConfig+0x184>
 80034b4:	f7ff fbdd 	bl	8002c72 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d012      	beq.n	80034e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c0:	f7ff f840 	bl	8002544 <HAL_GetTick>
 80034c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c8:	f7ff f83c 	bl	8002544 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b64      	cmp	r3, #100	@ 0x64
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e299      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80034da:	f7ff fbd9 	bl	8002c90 <LL_RCC_HSE_IsReady>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0f1      	beq.n	80034c8 <HAL_RCC_OscConfig+0x194>
 80034e4:	e011      	b.n	800350a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e6:	f7ff f82d 	bl	8002544 <HAL_GetTick>
 80034ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ee:	f7ff f829 	bl	8002544 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b64      	cmp	r3, #100	@ 0x64
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e286      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003500:	f7ff fbc6 	bl	8002c90 <LL_RCC_HSE_IsReady>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f1      	bne.n	80034ee <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d04c      	beq.n	80035b0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003516:	f7ff fd9c 	bl	8003052 <LL_RCC_GetSysClkSource>
 800351a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800351c:	f7ff fea2 	bl	8003264 <LL_RCC_PLL_GetMainSource>
 8003520:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	2b04      	cmp	r3, #4
 8003526:	d005      	beq.n	8003534 <HAL_RCC_OscConfig+0x200>
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	2b0c      	cmp	r3, #12
 800352c:	d10e      	bne.n	800354c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	2b02      	cmp	r3, #2
 8003532:	d10b      	bne.n	800354c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e266      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff fbe5 	bl	8002d14 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800354a:	e031      	b.n	80035b0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d019      	beq.n	8003588 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003554:	f7ff fbae 	bl	8002cb4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003558:	f7fe fff4 	bl	8002544 <HAL_GetTick>
 800355c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003560:	f7fe fff0 	bl	8002544 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e24d      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003572:	f7ff fbbd 	bl	8002cf0 <LL_RCC_HSI_IsReady>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0f1      	beq.n	8003560 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff fbc7 	bl	8002d14 <LL_RCC_HSI_SetCalibTrimming>
 8003586:	e013      	b.n	80035b0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003588:	f7ff fba3 	bl	8002cd2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358c:	f7fe ffda 	bl	8002544 <HAL_GetTick>
 8003590:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003594:	f7fe ffd6 	bl	8002544 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e233      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80035a6:	f7ff fba3 	bl	8002cf0 <LL_RCC_HSI_IsReady>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1f1      	bne.n	8003594 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d106      	bne.n	80035ca <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 80a3 	beq.w	8003710 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d076      	beq.n	80036c0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0310 	and.w	r3, r3, #16
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d046      	beq.n	800366c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80035de:	f7ff fc5a 	bl	8002e96 <LL_RCC_LSI1_IsReady>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d113      	bne.n	8003610 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80035e8:	f7ff fc33 	bl	8002e52 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035ec:	f7fe ffaa 	bl	8002544 <HAL_GetTick>
 80035f0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80035f4:	f7fe ffa6 	bl	8002544 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e203      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003606:	f7ff fc46 	bl	8002e96 <LL_RCC_LSI1_IsReady>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0f1      	beq.n	80035f4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003610:	f7ff fc53 	bl	8002eba <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003614:	f7fe ff96 	bl	8002544 <HAL_GetTick>
 8003618:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800361c:	f7fe ff92 	bl	8002544 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b03      	cmp	r3, #3
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e1ef      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800362e:	f7ff fc66 	bl	8002efe <LL_RCC_LSI2_IsReady>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0f1      	beq.n	800361c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff fc70 	bl	8002f22 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003642:	f7ff fc17 	bl	8002e74 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003646:	f7fe ff7d 	bl	8002544 <HAL_GetTick>
 800364a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800364e:	f7fe ff79 	bl	8002544 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e1d6      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003660:	f7ff fc19 	bl	8002e96 <LL_RCC_LSI1_IsReady>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f1      	bne.n	800364e <HAL_RCC_OscConfig+0x31a>
 800366a:	e051      	b.n	8003710 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800366c:	f7ff fbf1 	bl	8002e52 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003670:	f7fe ff68 	bl	8002544 <HAL_GetTick>
 8003674:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003676:	e00c      	b.n	8003692 <HAL_RCC_OscConfig+0x35e>
 8003678:	20000008 	.word	0x20000008
 800367c:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003680:	f7fe ff60 	bl	8002544 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e1bd      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003692:	f7ff fc00 	bl	8002e96 <LL_RCC_LSI1_IsReady>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0f1      	beq.n	8003680 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800369c:	f7ff fc1e 	bl	8002edc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80036a2:	f7fe ff4f 	bl	8002544 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b03      	cmp	r3, #3
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e1ac      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80036b4:	f7ff fc23 	bl	8002efe <LL_RCC_LSI2_IsReady>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f1      	bne.n	80036a2 <HAL_RCC_OscConfig+0x36e>
 80036be:	e027      	b.n	8003710 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80036c0:	f7ff fc0c 	bl	8002edc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c4:	f7fe ff3e 	bl	8002544 <HAL_GetTick>
 80036c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80036cc:	f7fe ff3a 	bl	8002544 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b03      	cmp	r3, #3
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e197      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80036de:	f7ff fc0e 	bl	8002efe <LL_RCC_LSI2_IsReady>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1f1      	bne.n	80036cc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80036e8:	f7ff fbc4 	bl	8002e74 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ec:	f7fe ff2a 	bl	8002544 <HAL_GetTick>
 80036f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80036f4:	f7fe ff26 	bl	8002544 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e183      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003706:	f7ff fbc6 	bl	8002e96 <LL_RCC_LSI1_IsReady>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1f1      	bne.n	80036f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	d05b      	beq.n	80037d4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800371c:	4ba7      	ldr	r3, [pc, #668]	@ (80039bc <HAL_RCC_OscConfig+0x688>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003724:	2b00      	cmp	r3, #0
 8003726:	d114      	bne.n	8003752 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003728:	f7ff fa64 	bl	8002bf4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800372c:	f7fe ff0a 	bl	8002544 <HAL_GetTick>
 8003730:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003734:	f7fe ff06 	bl	8002544 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e163      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003746:	4b9d      	ldr	r3, [pc, #628]	@ (80039bc <HAL_RCC_OscConfig+0x688>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d102      	bne.n	8003760 <HAL_RCC_OscConfig+0x42c>
 800375a:	f7ff fb24 	bl	8002da6 <LL_RCC_LSE_Enable>
 800375e:	e00c      	b.n	800377a <HAL_RCC_OscConfig+0x446>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	2b05      	cmp	r3, #5
 8003766:	d104      	bne.n	8003772 <HAL_RCC_OscConfig+0x43e>
 8003768:	f7ff fb3f 	bl	8002dea <LL_RCC_LSE_EnableBypass>
 800376c:	f7ff fb1b 	bl	8002da6 <LL_RCC_LSE_Enable>
 8003770:	e003      	b.n	800377a <HAL_RCC_OscConfig+0x446>
 8003772:	f7ff fb29 	bl	8002dc8 <LL_RCC_LSE_Disable>
 8003776:	f7ff fb49 	bl	8002e0c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d014      	beq.n	80037ac <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003782:	f7fe fedf 	bl	8002544 <HAL_GetTick>
 8003786:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003788:	e00a      	b.n	80037a0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378a:	f7fe fedb 	bl	8002544 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003798:	4293      	cmp	r3, r2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e136      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80037a0:	f7ff fb45 	bl	8002e2e <LL_RCC_LSE_IsReady>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0ef      	beq.n	800378a <HAL_RCC_OscConfig+0x456>
 80037aa:	e013      	b.n	80037d4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ac:	f7fe feca 	bl	8002544 <HAL_GetTick>
 80037b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80037b2:	e00a      	b.n	80037ca <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b4:	f7fe fec6 	bl	8002544 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e121      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80037ca:	f7ff fb30 	bl	8002e2e <LL_RCC_LSE_IsReady>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1ef      	bne.n	80037b4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d02c      	beq.n	800383a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d014      	beq.n	8003812 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037e8:	f7ff faa9 	bl	8002d3e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ec:	f7fe feaa 	bl	8002544 <HAL_GetTick>
 80037f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037f4:	f7fe fea6 	bl	8002544 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e103      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003806:	f7ff fabc 	bl	8002d82 <LL_RCC_HSI48_IsReady>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0f1      	beq.n	80037f4 <HAL_RCC_OscConfig+0x4c0>
 8003810:	e013      	b.n	800383a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003812:	f7ff faa5 	bl	8002d60 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003816:	f7fe fe95 	bl	8002544 <HAL_GetTick>
 800381a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800381c:	e008      	b.n	8003830 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800381e:	f7fe fe91 	bl	8002544 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d901      	bls.n	8003830 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e0ee      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003830:	f7ff faa7 	bl	8002d82 <LL_RCC_HSI48_IsReady>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f1      	bne.n	800381e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 80e4 	beq.w	8003a0c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003844:	f7ff fc05 	bl	8003052 <LL_RCC_GetSysClkSource>
 8003848:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800384a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003856:	2b02      	cmp	r3, #2
 8003858:	f040 80b4 	bne.w	80039c4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f003 0203 	and.w	r2, r3, #3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003866:	429a      	cmp	r2, r3
 8003868:	d123      	bne.n	80038b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003874:	429a      	cmp	r2, r3
 8003876:	d11c      	bne.n	80038b2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	0a1b      	lsrs	r3, r3, #8
 800387c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003884:	429a      	cmp	r2, r3
 8003886:	d114      	bne.n	80038b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003892:	429a      	cmp	r2, r3
 8003894:	d10d      	bne.n	80038b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d106      	bne.n	80038b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d05d      	beq.n	800396e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	2b0c      	cmp	r3, #12
 80038b6:	d058      	beq.n	800396a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80038b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e0a1      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80038ca:	f7ff fc85 	bl	80031d8 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038ce:	f7fe fe39 	bl	8002544 <HAL_GetTick>
 80038d2:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d6:	f7fe fe35 	bl	8002544 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e092      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1ef      	bne.n	80038d6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	4b30      	ldr	r3, [pc, #192]	@ (80039c0 <HAL_RCC_OscConfig+0x68c>)
 80038fe:	4013      	ands	r3, r2
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003908:	4311      	orrs	r1, r2
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800390e:	0212      	lsls	r2, r2, #8
 8003910:	4311      	orrs	r1, r2
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003916:	4311      	orrs	r1, r2
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800391c:	4311      	orrs	r1, r2
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003922:	430a      	orrs	r2, r1
 8003924:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003928:	4313      	orrs	r3, r2
 800392a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800392c:	f7ff fc45 	bl	80031ba <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003930:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800393a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800393e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003940:	f7fe fe00 	bl	8002544 <HAL_GetTick>
 8003944:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003948:	f7fe fdfc 	bl	8002544 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e059      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800395a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0ef      	beq.n	8003948 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003968:	e050      	b.n	8003a0c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e04f      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800396e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d147      	bne.n	8003a0c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800397c:	f7ff fc1d 	bl	80031ba <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003980:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800398a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800398e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003990:	f7fe fdd8 	bl	8002544 <HAL_GetTick>
 8003994:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003998:	f7fe fdd4 	bl	8002544 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e031      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0ef      	beq.n	8003998 <HAL_RCC_OscConfig+0x664>
 80039b8:	e028      	b.n	8003a0c <HAL_RCC_OscConfig+0x6d8>
 80039ba:	bf00      	nop
 80039bc:	58000400 	.word	0x58000400
 80039c0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	2b0c      	cmp	r3, #12
 80039c8:	d01e      	beq.n	8003a08 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ca:	f7ff fc05 	bl	80031d8 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ce:	f7fe fdb9 	bl	8002544 <HAL_GetTick>
 80039d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d6:	f7fe fdb5 	bl	8002544 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e012      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1ef      	bne.n	80039d6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80039f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039fa:	68da      	ldr	r2, [r3, #12]
 80039fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a00:	4b05      	ldr	r3, [pc, #20]	@ (8003a18 <HAL_RCC_OscConfig+0x6e4>)
 8003a02:	4013      	ands	r3, r2
 8003a04:	60cb      	str	r3, [r1, #12]
 8003a06:	e001      	b.n	8003a0c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e000      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3734      	adds	r7, #52	@ 0x34
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd90      	pop	{r4, r7, pc}
 8003a16:	bf00      	nop
 8003a18:	eefefffc 	.word	0xeefefffc

08003a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e12d      	b.n	8003c8c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a30:	4b98      	ldr	r3, [pc, #608]	@ (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d91b      	bls.n	8003a76 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3e:	4b95      	ldr	r3, [pc, #596]	@ (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f023 0207 	bic.w	r2, r3, #7
 8003a46:	4993      	ldr	r1, [pc, #588]	@ (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a4e:	f7fe fd79 	bl	8002544 <HAL_GetTick>
 8003a52:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a54:	e008      	b.n	8003a68 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003a56:	f7fe fd75 	bl	8002544 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e111      	b.n	8003c8c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a68:	4b8a      	ldr	r3, [pc, #552]	@ (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d1ef      	bne.n	8003a56 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d016      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff faef 	bl	800306a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a8c:	f7fe fd5a 	bl	8002544 <HAL_GetTick>
 8003a90:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a94:	f7fe fd56 	bl	8002544 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e0f2      	b.n	8003c8c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003aa6:	f7ff fbe9 	bl	800327c <LL_RCC_IsActiveFlag_HPRE>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f1      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0320 	and.w	r3, r3, #32
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d016      	beq.n	8003aea <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff fae6 	bl	8003092 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ac6:	f7fe fd3d 	bl	8002544 <HAL_GetTick>
 8003aca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ace:	f7fe fd39 	bl	8002544 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e0d5      	b.n	8003c8c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003ae0:	f7ff fbde 	bl	80032a0 <LL_RCC_IsActiveFlag_C2HPRE>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f1      	beq.n	8003ace <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d016      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff fadf 	bl	80030be <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b00:	f7fe fd20 	bl	8002544 <HAL_GetTick>
 8003b04:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b08:	f7fe fd1c 	bl	8002544 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e0b8      	b.n	8003c8c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003b1a:	f7ff fbd4 	bl	80032c6 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0f1      	beq.n	8003b08 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d016      	beq.n	8003b5e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff fad9 	bl	80030ec <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b3a:	f7fe fd03 	bl	8002544 <HAL_GetTick>
 8003b3e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003b40:	e008      	b.n	8003b54 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b42:	f7fe fcff 	bl	8002544 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e09b      	b.n	8003c8c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003b54:	f7ff fbca 	bl	80032ec <LL_RCC_IsActiveFlag_PPRE1>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0f1      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d017      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff facf 	bl	8003114 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b76:	f7fe fce5 	bl	8002544 <HAL_GetTick>
 8003b7a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b7e:	f7fe fce1 	bl	8002544 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e07d      	b.n	8003c8c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003b90:	f7ff fbbe 	bl	8003310 <LL_RCC_IsActiveFlag_PPRE2>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0f1      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d043      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d106      	bne.n	8003bbc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003bae:	f7ff f86f 	bl	8002c90 <LL_RCC_HSE_IsReady>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d11e      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e067      	b.n	8003c8c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b03      	cmp	r3, #3
 8003bc2:	d106      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003bc4:	f7ff fb17 	bl	80031f6 <LL_RCC_PLL_IsReady>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d113      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e05c      	b.n	8003c8c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003bda:	f7ff f9d7 	bl	8002f8c <LL_RCC_MSI_IsReady>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d108      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e051      	b.n	8003c8c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003be8:	f7ff f882 	bl	8002cf0 <LL_RCC_HSI_IsReady>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e04a      	b.n	8003c8c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7ff fa15 	bl	800302a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c00:	f7fe fca0 	bl	8002544 <HAL_GetTick>
 8003c04:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c06:	e00a      	b.n	8003c1e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c08:	f7fe fc9c 	bl	8002544 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e036      	b.n	8003c8c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1e:	f7ff fa18 	bl	8003052 <LL_RCC_GetSysClkSource>
 8003c22:	4602      	mov	r2, r0
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d1ec      	bne.n	8003c08 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c2e:	4b19      	ldr	r3, [pc, #100]	@ (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d21b      	bcs.n	8003c74 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3c:	4b15      	ldr	r3, [pc, #84]	@ (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f023 0207 	bic.w	r2, r3, #7
 8003c44:	4913      	ldr	r1, [pc, #76]	@ (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c4c:	f7fe fc7a 	bl	8002544 <HAL_GetTick>
 8003c50:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c54:	f7fe fc76 	bl	8002544 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e012      	b.n	8003c8c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c66:	4b0b      	ldr	r3, [pc, #44]	@ (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d1ef      	bne.n	8003c54 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003c74:	f000 f87e 	bl	8003d74 <HAL_RCC_GetHCLKFreq>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	4a07      	ldr	r2, [pc, #28]	@ (8003c98 <HAL_RCC_ClockConfig+0x27c>)
 8003c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003c7e:	f7fe fc6d 	bl	800255c <HAL_GetTickPrio>
 8003c82:	4603      	mov	r3, r0
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fe f9e1 	bl	800204c <HAL_InitTick>
 8003c8a:	4603      	mov	r3, r0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	58004000 	.word	0x58004000
 8003c98:	20000008 	.word	0x20000008

08003c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c9c:	b590      	push	{r4, r7, lr}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ca2:	f7ff f9d6 	bl	8003052 <LL_RCC_GetSysClkSource>
 8003ca6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10a      	bne.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003cae:	f7ff f992 	bl	8002fd6 <LL_RCC_MSI_GetRange>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	091b      	lsrs	r3, r3, #4
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	4a2b      	ldr	r2, [pc, #172]	@ (8003d68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	e04b      	b.n	8003d5c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d102      	bne.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cca:	4b28      	ldr	r3, [pc, #160]	@ (8003d6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	e045      	b.n	8003d5c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b08      	cmp	r3, #8
 8003cd4:	d10a      	bne.n	8003cec <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003cd6:	f7fe ffab 	bl	8002c30 <LL_RCC_HSE_IsEnabledDiv2>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d102      	bne.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003ce0:	4b22      	ldr	r3, [pc, #136]	@ (8003d6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	e03a      	b.n	8003d5c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003ce6:	4b22      	ldr	r3, [pc, #136]	@ (8003d70 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	e037      	b.n	8003d5c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003cec:	f7ff faba 	bl	8003264 <LL_RCC_PLL_GetMainSource>
 8003cf0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d003      	beq.n	8003d00 <HAL_RCC_GetSysClockFreq+0x64>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	d003      	beq.n	8003d06 <HAL_RCC_GetSysClockFreq+0x6a>
 8003cfe:	e00d      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003d00:	4b1a      	ldr	r3, [pc, #104]	@ (8003d6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d02:	60bb      	str	r3, [r7, #8]
        break;
 8003d04:	e015      	b.n	8003d32 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003d06:	f7fe ff93 	bl	8002c30 <LL_RCC_HSE_IsEnabledDiv2>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d102      	bne.n	8003d16 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003d10:	4b16      	ldr	r3, [pc, #88]	@ (8003d6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d12:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003d14:	e00d      	b.n	8003d32 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003d16:	4b16      	ldr	r3, [pc, #88]	@ (8003d70 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003d18:	60bb      	str	r3, [r7, #8]
        break;
 8003d1a:	e00a      	b.n	8003d32 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003d1c:	f7ff f95b 	bl	8002fd6 <LL_RCC_MSI_GetRange>
 8003d20:	4603      	mov	r3, r0
 8003d22:	091b      	lsrs	r3, r3, #4
 8003d24:	f003 030f 	and.w	r3, r3, #15
 8003d28:	4a0f      	ldr	r2, [pc, #60]	@ (8003d68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d2e:	60bb      	str	r3, [r7, #8]
        break;
 8003d30:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003d32:	f7ff fa72 	bl	800321a <LL_RCC_PLL_GetN>
 8003d36:	4602      	mov	r2, r0
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	fb03 f402 	mul.w	r4, r3, r2
 8003d3e:	f7ff fa85 	bl	800324c <LL_RCC_PLL_GetDivider>
 8003d42:	4603      	mov	r3, r0
 8003d44:	091b      	lsrs	r3, r3, #4
 8003d46:	3301      	adds	r3, #1
 8003d48:	fbb4 f4f3 	udiv	r4, r4, r3
 8003d4c:	f7ff fa72 	bl	8003234 <LL_RCC_PLL_GetR>
 8003d50:	4603      	mov	r3, r0
 8003d52:	0f5b      	lsrs	r3, r3, #29
 8003d54:	3301      	adds	r3, #1
 8003d56:	fbb4 f3f3 	udiv	r3, r4, r3
 8003d5a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd90      	pop	{r4, r7, pc}
 8003d66:	bf00      	nop
 8003d68:	0800c9a0 	.word	0x0800c9a0
 8003d6c:	00f42400 	.word	0x00f42400
 8003d70:	01e84800 	.word	0x01e84800

08003d74 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d74:	b598      	push	{r3, r4, r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003d78:	f7ff ff90 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 8003d7c:	4604      	mov	r4, r0
 8003d7e:	f7ff f9dd 	bl	800313c <LL_RCC_GetAHBPrescaler>
 8003d82:	4603      	mov	r3, r0
 8003d84:	091b      	lsrs	r3, r3, #4
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	4a03      	ldr	r2, [pc, #12]	@ (8003d98 <HAL_RCC_GetHCLKFreq+0x24>)
 8003d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d90:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	bd98      	pop	{r3, r4, r7, pc}
 8003d98:	0800c940 	.word	0x0800c940

08003d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d9c:	b598      	push	{r3, r4, r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003da0:	f7ff ffe8 	bl	8003d74 <HAL_RCC_GetHCLKFreq>
 8003da4:	4604      	mov	r4, r0
 8003da6:	f7ff f9f0 	bl	800318a <LL_RCC_GetAPB1Prescaler>
 8003daa:	4603      	mov	r3, r0
 8003dac:	0a1b      	lsrs	r3, r3, #8
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	4a04      	ldr	r2, [pc, #16]	@ (8003dc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db8:	f003 031f 	and.w	r3, r3, #31
 8003dbc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	bd98      	pop	{r3, r4, r7, pc}
 8003dc4:	0800c980 	.word	0x0800c980

08003dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dc8:	b598      	push	{r3, r4, r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003dcc:	f7ff ffd2 	bl	8003d74 <HAL_RCC_GetHCLKFreq>
 8003dd0:	4604      	mov	r4, r0
 8003dd2:	f7ff f9e6 	bl	80031a2 <LL_RCC_GetAPB2Prescaler>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	0adb      	lsrs	r3, r3, #11
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	4a04      	ldr	r2, [pc, #16]	@ (8003df0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de4:	f003 031f 	and.w	r3, r3, #31
 8003de8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	bd98      	pop	{r3, r4, r7, pc}
 8003df0:	0800c980 	.word	0x0800c980

08003df4 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	226f      	movs	r2, #111	@ 0x6f
 8003e02:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8003e04:	f7ff f925 	bl	8003052 <LL_RCC_GetSysClkSource>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8003e0e:	f7ff f995 	bl	800313c <LL_RCC_GetAHBPrescaler>
 8003e12:	4602      	mov	r2, r0
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8003e18:	f7ff f9b7 	bl	800318a <LL_RCC_GetAPB1Prescaler>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8003e22:	f7ff f9be 	bl	80031a2 <LL_RCC_GetAPB2Prescaler>
 8003e26:	4602      	mov	r2, r0
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8003e2c:	f7ff f992 	bl	8003154 <LL_C2_RCC_GetAHBPrescaler>
 8003e30:	4602      	mov	r2, r0
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8003e36:	f7ff f99a 	bl	800316e <LL_RCC_GetAHB4Prescaler>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003e40:	4b04      	ldr	r3, [pc, #16]	@ (8003e54 <HAL_RCC_GetClockConfig+0x60>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0207 	and.w	r2, r3, #7
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	601a      	str	r2, [r3, #0]
}
 8003e4c:	bf00      	nop
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	58004000 	.word	0x58004000

08003e58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003e58:	b590      	push	{r4, r7, lr}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2bb0      	cmp	r3, #176	@ 0xb0
 8003e64:	d903      	bls.n	8003e6e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003e66:	4b15      	ldr	r3, [pc, #84]	@ (8003ebc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	e007      	b.n	8003e7e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	091b      	lsrs	r3, r3, #4
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	4a11      	ldr	r2, [pc, #68]	@ (8003ebc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e7c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003e7e:	f7ff f976 	bl	800316e <LL_RCC_GetAHB4Prescaler>
 8003e82:	4603      	mov	r3, r0
 8003e84:	091b      	lsrs	r3, r3, #4
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	4a0d      	ldr	r2, [pc, #52]	@ (8003ec0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e96:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8003ec4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea0:	0c9c      	lsrs	r4, r3, #18
 8003ea2:	f7fe feb7 	bl	8002c14 <HAL_PWREx_GetVoltageRange>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4620      	mov	r0, r4
 8003eac:	f000 f80c 	bl	8003ec8 <RCC_SetFlashLatency>
 8003eb0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd90      	pop	{r4, r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	0800c9a0 	.word	0x0800c9a0
 8003ec0:	0800c940 	.word	0x0800c940
 8003ec4:	431bde83 	.word	0x431bde83

08003ec8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003ec8:	b590      	push	{r4, r7, lr}
 8003eca:	b093      	sub	sp, #76	@ 0x4c
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003ed2:	4b37      	ldr	r3, [pc, #220]	@ (8003fb0 <RCC_SetFlashLatency+0xe8>)
 8003ed4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8003ed8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003eda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003ede:	4a35      	ldr	r2, [pc, #212]	@ (8003fb4 <RCC_SetFlashLatency+0xec>)
 8003ee0:	f107 031c 	add.w	r3, r7, #28
 8003ee4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ee6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003eea:	4b33      	ldr	r3, [pc, #204]	@ (8003fb8 <RCC_SetFlashLatency+0xf0>)
 8003eec:	f107 040c 	add.w	r4, r7, #12
 8003ef0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ef2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f00:	d11a      	bne.n	8003f38 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003f02:	2300      	movs	r3, #0
 8003f04:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f06:	e013      	b.n	8003f30 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003f08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	3348      	adds	r3, #72	@ 0x48
 8003f0e:	443b      	add	r3, r7
 8003f10:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d807      	bhi.n	8003f2a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003f1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	3348      	adds	r3, #72	@ 0x48
 8003f20:	443b      	add	r3, r7
 8003f22:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003f26:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003f28:	e020      	b.n	8003f6c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003f2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f32:	2b03      	cmp	r3, #3
 8003f34:	d9e8      	bls.n	8003f08 <RCC_SetFlashLatency+0x40>
 8003f36:	e019      	b.n	8003f6c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003f38:	2300      	movs	r3, #0
 8003f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f3c:	e013      	b.n	8003f66 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003f3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	3348      	adds	r3, #72	@ 0x48
 8003f44:	443b      	add	r3, r7
 8003f46:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d807      	bhi.n	8003f60 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003f50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	3348      	adds	r3, #72	@ 0x48
 8003f56:	443b      	add	r3, r7
 8003f58:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003f5c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003f5e:	e005      	b.n	8003f6c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f62:	3301      	adds	r3, #1
 8003f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d9e8      	bls.n	8003f3e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003f6c:	4b13      	ldr	r3, [pc, #76]	@ (8003fbc <RCC_SetFlashLatency+0xf4>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f023 0207 	bic.w	r2, r3, #7
 8003f74:	4911      	ldr	r1, [pc, #68]	@ (8003fbc <RCC_SetFlashLatency+0xf4>)
 8003f76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003f7c:	f7fe fae2 	bl	8002544 <HAL_GetTick>
 8003f80:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003f82:	e008      	b.n	8003f96 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003f84:	f7fe fade 	bl	8002544 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e007      	b.n	8003fa6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003f96:	4b09      	ldr	r3, [pc, #36]	@ (8003fbc <RCC_SetFlashLatency+0xf4>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d1ef      	bne.n	8003f84 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	374c      	adds	r7, #76	@ 0x4c
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd90      	pop	{r4, r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	0800c864 	.word	0x0800c864
 8003fb4:	0800c874 	.word	0x0800c874
 8003fb8:	0800c880 	.word	0x0800c880
 8003fbc:	58004000 	.word	0x58004000

08003fc0 <LL_RCC_LSE_IsEnabled>:
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003fc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <LL_RCC_LSE_IsEnabled+0x18>
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e000      	b.n	8003fda <LL_RCC_LSE_IsEnabled+0x1a>
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <LL_RCC_LSE_IsReady>:
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003fe8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d101      	bne.n	8003ffc <LL_RCC_LSE_IsReady+0x18>
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e000      	b.n	8003ffe <LL_RCC_LSE_IsReady+0x1a>
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <LL_RCC_SetRFWKPClockSource>:
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004010:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004014:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004018:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800401c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4313      	orrs	r3, r2
 8004024:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <LL_RCC_SetSMPSClockSource>:
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800403c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004042:	f023 0203 	bic.w	r2, r3, #3
 8004046:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4313      	orrs	r3, r2
 800404e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <LL_RCC_SetSMPSPrescaler>:
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004064:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800406e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4313      	orrs	r3, r2
 8004076:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <LL_RCC_SetUSARTClockSource>:
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800408c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004094:	f023 0203 	bic.w	r2, r3, #3
 8004098:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <LL_RCC_SetLPUARTClockSource>:
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80040b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80040c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <LL_RCC_SetI2CClockSource>:
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80040e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	091b      	lsrs	r3, r3, #4
 80040f0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80040f4:	43db      	mvns	r3, r3
 80040f6:	401a      	ands	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	011b      	lsls	r3, r3, #4
 80040fc:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004100:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <LL_RCC_SetLPTIMClockSource>:
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800411e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004122:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	0c1b      	lsrs	r3, r3, #16
 800412a:	041b      	lsls	r3, r3, #16
 800412c:	43db      	mvns	r3, r3
 800412e:	401a      	ands	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	041b      	lsls	r3, r3, #16
 8004134:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <LL_RCC_SetSAIClockSource>:
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004152:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800415a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800415e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <LL_RCC_SetRNGClockSource>:
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800417e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004186:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800418a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4313      	orrs	r3, r2
 8004192:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <LL_RCC_SetCLK48ClockSource>:
{
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80041aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <LL_RCC_SetUSBClockSource>:
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b082      	sub	sp, #8
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7ff ffe3 	bl	80041a2 <LL_RCC_SetCLK48ClockSource>
}
 80041dc:	bf00      	nop
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <LL_RCC_SetADCClockSource>:
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80041ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80041f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4313      	orrs	r3, r2
 8004200:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <LL_RCC_SetRTCClockSource>:
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004218:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800421c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004220:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004224:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <LL_RCC_GetRTCClockSource>:
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004240:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004248:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800424c:	4618      	mov	r0, r3
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <LL_RCC_ForceBackupDomainReset>:
{
 8004256:	b480      	push	{r7}
 8004258:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800425a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800425e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004262:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004266:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800426a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800426e:	bf00      	nop
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800427c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004284:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004288:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800428c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004290:	bf00      	nop
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <LL_RCC_PLLSAI1_Enable>:
{
 800429a:	b480      	push	{r7}
 800429c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800429e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80042ac:	6013      	str	r3, [r2, #0]
}
 80042ae:	bf00      	nop
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <LL_RCC_PLLSAI1_Disable>:
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80042bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80042ca:	6013      	str	r3, [r2, #0]
}
 80042cc:	bf00      	nop
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <LL_RCC_PLLSAI1_IsReady>:
{
 80042d6:	b480      	push	{r7}
 80042d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80042da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042e8:	d101      	bne.n	80042ee <LL_RCC_PLLSAI1_IsReady+0x18>
 80042ea:	2301      	movs	r3, #1
 80042ec:	e000      	b.n	80042f0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b088      	sub	sp, #32
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004302:	2300      	movs	r3, #0
 8004304:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004306:	2300      	movs	r3, #0
 8004308:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004312:	2b00      	cmp	r3, #0
 8004314:	d034      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800431e:	d021      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004320:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004324:	d81b      	bhi.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004326:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800432a:	d01d      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800432c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004330:	d815      	bhi.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00b      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004336:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800433a:	d110      	bne.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800433c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004346:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800434a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800434c:	e00d      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3304      	adds	r3, #4
 8004352:	4618      	mov	r0, r3
 8004354:	f000 f947 	bl	80045e6 <RCCEx_PLLSAI1_ConfigNP>
 8004358:	4603      	mov	r3, r0
 800435a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800435c:	e005      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	77fb      	strb	r3, [r7, #31]
        break;
 8004362:	e002      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004364:	bf00      	nop
 8004366:	e000      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004368:	bf00      	nop
    }

    if (ret == HAL_OK)
 800436a:	7ffb      	ldrb	r3, [r7, #31]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d105      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff fee8 	bl	800414a <LL_RCC_SetSAIClockSource>
 800437a:	e001      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437c:	7ffb      	ldrb	r3, [r7, #31]
 800437e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004388:	2b00      	cmp	r3, #0
 800438a:	d046      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800438c:	f7ff ff56 	bl	800423c <LL_RCC_GetRTCClockSource>
 8004390:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	429a      	cmp	r2, r3
 800439a:	d03c      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800439c:	f7fe fc2a 	bl	8002bf4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d105      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7ff ff30 	bl	8004210 <LL_RCC_SetRTCClockSource>
 80043b0:	e02e      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80043b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ba:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80043bc:	f7ff ff4b 	bl	8004256 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80043c0:	f7ff ff5a 	bl	8004278 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ce:	4313      	orrs	r3, r2
 80043d0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80043d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80043dc:	f7ff fdf0 	bl	8003fc0 <LL_RCC_LSE_IsEnabled>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d114      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043e6:	f7fe f8ad 	bl	8002544 <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80043ec:	e00b      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ee:	f7fe f8a9 	bl	8002544 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d902      	bls.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	77fb      	strb	r3, [r7, #31]
              break;
 8004404:	e004      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004406:	f7ff fded 	bl	8003fe4 <LL_RCC_LSE_IsReady>
 800440a:	4603      	mov	r3, r0
 800440c:	2b01      	cmp	r3, #1
 800440e:	d1ee      	bne.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004410:	7ffb      	ldrb	r3, [r7, #31]
 8004412:	77bb      	strb	r3, [r7, #30]
 8004414:	e001      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004416:	7ffb      	ldrb	r3, [r7, #31]
 8004418:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d004      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff fe2a 	bl	8004084 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d004      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	4618      	mov	r0, r3
 8004442:	f7ff fe35 	bl	80040b0 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0310 	and.w	r3, r3, #16
 800444e:	2b00      	cmp	r3, #0
 8004450:	d004      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004456:	4618      	mov	r0, r3
 8004458:	f7ff fe5d 	bl	8004116 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0320 	and.w	r3, r3, #32
 8004464:	2b00      	cmp	r3, #0
 8004466:	d004      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446c:	4618      	mov	r0, r3
 800446e:	f7ff fe52 	bl	8004116 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	2b00      	cmp	r3, #0
 800447c:	d004      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff fe2a 	bl	80040dc <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0308 	and.w	r3, r3, #8
 8004490:	2b00      	cmp	r3, #0
 8004492:	d004      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff fe1f 	bl	80040dc <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d022      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7ff fe8d 	bl	80041ce <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044bc:	d107      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80044be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044cc:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044d6:	d10b      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3304      	adds	r3, #4
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 f8dd 	bl	800469c <RCCEx_PLLSAI1_ConfigNQ>
 80044e2:	4603      	mov	r3, r0
 80044e4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80044e6:	7ffb      	ldrb	r3, [r7, #31]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80044ec:	7ffb      	ldrb	r3, [r7, #31]
 80044ee:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d02b      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004504:	d008      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800450a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800450e:	d003      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004514:	2b00      	cmp	r3, #0
 8004516:	d105      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff fe2a 	bl	8004176 <LL_RCC_SetRNGClockSource>
 8004522:	e00a      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004528:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800452c:	60fb      	str	r3, [r7, #12]
 800452e:	2000      	movs	r0, #0
 8004530:	f7ff fe21 	bl	8004176 <LL_RCC_SetRNGClockSource>
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f7ff fe34 	bl	80041a2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800453e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8004542:	d107      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004544:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800454e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004552:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800455c:	2b00      	cmp	r3, #0
 800455e:	d022      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004564:	4618      	mov	r0, r3
 8004566:	f7ff fe3d 	bl	80041e4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800456e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004572:	d107      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800457e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004582:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004588:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800458c:	d10b      	bne.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	3304      	adds	r3, #4
 8004592:	4618      	mov	r0, r3
 8004594:	f000 f8dd 	bl	8004752 <RCCEx_PLLSAI1_ConfigNR>
 8004598:	4603      	mov	r3, r0
 800459a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800459c:	7ffb      	ldrb	r3, [r7, #31]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80045a2:	7ffb      	ldrb	r3, [r7, #31]
 80045a4:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d004      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff fd26 	bl	8004008 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d009      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7ff fd45 	bl	800405c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff fd2c 	bl	8004034 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80045dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3720      	adds	r7, #32
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b084      	sub	sp, #16
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045ee:	2300      	movs	r3, #0
 80045f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80045f2:	f7ff fe61 	bl	80042b8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80045f6:	f7fd ffa5 	bl	8002544 <HAL_GetTick>
 80045fa:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80045fc:	e009      	b.n	8004612 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045fe:	f7fd ffa1 	bl	8002544 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d902      	bls.n	8004612 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	73fb      	strb	r3, [r7, #15]
      break;
 8004610:	e004      	b.n	800461c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004612:	f7ff fe60 	bl	80042d6 <LL_RCC_PLLSAI1_IsReady>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1f0      	bne.n	80045fe <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800461c:	7bfb      	ldrb	r3, [r7, #15]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d137      	bne.n	8004692 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004622:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	021b      	lsls	r3, r3, #8
 8004632:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004636:	4313      	orrs	r3, r2
 8004638:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800463a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800464c:	4313      	orrs	r3, r2
 800464e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004650:	f7ff fe23 	bl	800429a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004654:	f7fd ff76 	bl	8002544 <HAL_GetTick>
 8004658:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800465a:	e009      	b.n	8004670 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800465c:	f7fd ff72 	bl	8002544 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d902      	bls.n	8004670 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	73fb      	strb	r3, [r7, #15]
        break;
 800466e:	e004      	b.n	800467a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004670:	f7ff fe31 	bl	80042d6 <LL_RCC_PLLSAI1_IsReady>
 8004674:	4603      	mov	r3, r0
 8004676:	2b01      	cmp	r3, #1
 8004678:	d1f0      	bne.n	800465c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800467a:	7bfb      	ldrb	r3, [r7, #15]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d108      	bne.n	8004692 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004680:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004684:	691a      	ldr	r2, [r3, #16]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800468e:	4313      	orrs	r3, r2
 8004690:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004692:	7bfb      	ldrb	r3, [r7, #15]
}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046a4:	2300      	movs	r3, #0
 80046a6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80046a8:	f7ff fe06 	bl	80042b8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80046ac:	f7fd ff4a 	bl	8002544 <HAL_GetTick>
 80046b0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80046b2:	e009      	b.n	80046c8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046b4:	f7fd ff46 	bl	8002544 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d902      	bls.n	80046c8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	73fb      	strb	r3, [r7, #15]
      break;
 80046c6:	e004      	b.n	80046d2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80046c8:	f7ff fe05 	bl	80042d6 <LL_RCC_PLLSAI1_IsReady>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1f0      	bne.n	80046b4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d137      	bne.n	8004748 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80046d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	021b      	lsls	r3, r3, #8
 80046e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80046ec:	4313      	orrs	r3, r2
 80046ee:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80046f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004702:	4313      	orrs	r3, r2
 8004704:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004706:	f7ff fdc8 	bl	800429a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800470a:	f7fd ff1b 	bl	8002544 <HAL_GetTick>
 800470e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004710:	e009      	b.n	8004726 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004712:	f7fd ff17 	bl	8002544 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d902      	bls.n	8004726 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	73fb      	strb	r3, [r7, #15]
        break;
 8004724:	e004      	b.n	8004730 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004726:	f7ff fdd6 	bl	80042d6 <LL_RCC_PLLSAI1_IsReady>
 800472a:	4603      	mov	r3, r0
 800472c:	2b01      	cmp	r3, #1
 800472e:	d1f0      	bne.n	8004712 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d108      	bne.n	8004748 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004736:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004744:	4313      	orrs	r3, r2
 8004746:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004748:	7bfb      	ldrb	r3, [r7, #15]
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b084      	sub	sp, #16
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800475a:	2300      	movs	r3, #0
 800475c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800475e:	f7ff fdab 	bl	80042b8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004762:	f7fd feef 	bl	8002544 <HAL_GetTick>
 8004766:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004768:	e009      	b.n	800477e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800476a:	f7fd feeb 	bl	8002544 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d902      	bls.n	800477e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	73fb      	strb	r3, [r7, #15]
      break;
 800477c:	e004      	b.n	8004788 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800477e:	f7ff fdaa 	bl	80042d6 <LL_RCC_PLLSAI1_IsReady>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1f0      	bne.n	800476a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004788:	7bfb      	ldrb	r3, [r7, #15]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d137      	bne.n	80047fe <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800478e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	021b      	lsls	r3, r3, #8
 800479e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80047a2:	4313      	orrs	r3, r2
 80047a4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80047a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80047b8:	4313      	orrs	r3, r2
 80047ba:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80047bc:	f7ff fd6d 	bl	800429a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047c0:	f7fd fec0 	bl	8002544 <HAL_GetTick>
 80047c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80047c6:	e009      	b.n	80047dc <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047c8:	f7fd febc 	bl	8002544 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d902      	bls.n	80047dc <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	73fb      	strb	r3, [r7, #15]
        break;
 80047da:	e004      	b.n	80047e6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80047dc:	f7ff fd7b 	bl	80042d6 <LL_RCC_PLLSAI1_IsReady>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d1f0      	bne.n	80047c8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d108      	bne.n	80047fe <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80047ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047f0:	691a      	ldr	r2, [r3, #16]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80047fa:	4313      	orrs	r3, r2
 80047fc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e049      	b.n	80048ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d106      	bne.n	8004834 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f841 	bl	80048b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3304      	adds	r3, #4
 8004844:	4619      	mov	r1, r3
 8004846:	4610      	mov	r0, r2
 8004848:	f000 f9be 	bl	8004bc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
	...

080048cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d001      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e036      	b.n	8004952 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2202      	movs	r2, #2
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0201 	orr.w	r2, r2, #1
 80048fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a17      	ldr	r2, [pc, #92]	@ (8004960 <HAL_TIM_Base_Start_IT+0x94>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d004      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x44>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800490e:	d115      	bne.n	800493c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689a      	ldr	r2, [r3, #8]
 8004916:	4b13      	ldr	r3, [pc, #76]	@ (8004964 <HAL_TIM_Base_Start_IT+0x98>)
 8004918:	4013      	ands	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b06      	cmp	r3, #6
 8004920:	d015      	beq.n	800494e <HAL_TIM_Base_Start_IT+0x82>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004928:	d011      	beq.n	800494e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f042 0201 	orr.w	r2, r2, #1
 8004938:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800493a:	e008      	b.n	800494e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0201 	orr.w	r2, r2, #1
 800494a:	601a      	str	r2, [r3, #0]
 800494c:	e000      	b.n	8004950 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800494e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	40012c00 	.word	0x40012c00
 8004964:	00010007 	.word	0x00010007

08004968 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d020      	beq.n	80049cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d01b      	beq.n	80049cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f06f 0202 	mvn.w	r2, #2
 800499c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f8e9 	bl	8004b8a <HAL_TIM_IC_CaptureCallback>
 80049b8:	e005      	b.n	80049c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f8db 	bl	8004b76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f8ec 	bl	8004b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	f003 0304 	and.w	r3, r3, #4
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d020      	beq.n	8004a18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d01b      	beq.n	8004a18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f06f 0204 	mvn.w	r2, #4
 80049e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2202      	movs	r2, #2
 80049ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f8c3 	bl	8004b8a <HAL_TIM_IC_CaptureCallback>
 8004a04:	e005      	b.n	8004a12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f8b5 	bl	8004b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f8c6 	bl	8004b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f003 0308 	and.w	r3, r3, #8
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d020      	beq.n	8004a64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f003 0308 	and.w	r3, r3, #8
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d01b      	beq.n	8004a64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f06f 0208 	mvn.w	r2, #8
 8004a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2204      	movs	r2, #4
 8004a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f89d 	bl	8004b8a <HAL_TIM_IC_CaptureCallback>
 8004a50:	e005      	b.n	8004a5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f88f 	bl	8004b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f8a0 	bl	8004b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	f003 0310 	and.w	r3, r3, #16
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d020      	beq.n	8004ab0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f003 0310 	and.w	r3, r3, #16
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d01b      	beq.n	8004ab0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f06f 0210 	mvn.w	r2, #16
 8004a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2208      	movs	r2, #8
 8004a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f877 	bl	8004b8a <HAL_TIM_IC_CaptureCallback>
 8004a9c:	e005      	b.n	8004aaa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f869 	bl	8004b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f87a 	bl	8004b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00c      	beq.n	8004ad4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d007      	beq.n	8004ad4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f06f 0201 	mvn.w	r2, #1
 8004acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7fd f9a0 	bl	8001e14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d104      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00c      	beq.n	8004b02 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d007      	beq.n	8004b02 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f8d7 	bl	8004cb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00c      	beq.n	8004b26 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d007      	beq.n	8004b26 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f8cf 	bl	8004cc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00c      	beq.n	8004b4a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d007      	beq.n	8004b4a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 f834 	bl	8004bb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	f003 0320 	and.w	r3, r3, #32
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00c      	beq.n	8004b6e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f003 0320 	and.w	r3, r3, #32
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d007      	beq.n	8004b6e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f06f 0220 	mvn.w	r2, #32
 8004b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f897 	bl	8004c9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b6e:	bf00      	nop
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
	...

08004bc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a2d      	ldr	r2, [pc, #180]	@ (8004c90 <TIM_Base_SetConfig+0xc8>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d003      	beq.n	8004be8 <TIM_Base_SetConfig+0x20>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004be6:	d108      	bne.n	8004bfa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a24      	ldr	r2, [pc, #144]	@ (8004c90 <TIM_Base_SetConfig+0xc8>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00b      	beq.n	8004c1a <TIM_Base_SetConfig+0x52>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c08:	d007      	beq.n	8004c1a <TIM_Base_SetConfig+0x52>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a21      	ldr	r2, [pc, #132]	@ (8004c94 <TIM_Base_SetConfig+0xcc>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d003      	beq.n	8004c1a <TIM_Base_SetConfig+0x52>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a20      	ldr	r2, [pc, #128]	@ (8004c98 <TIM_Base_SetConfig+0xd0>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d108      	bne.n	8004c2c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a10      	ldr	r2, [pc, #64]	@ (8004c90 <TIM_Base_SetConfig+0xc8>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d007      	beq.n	8004c62 <TIM_Base_SetConfig+0x9a>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a0f      	ldr	r2, [pc, #60]	@ (8004c94 <TIM_Base_SetConfig+0xcc>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d003      	beq.n	8004c62 <TIM_Base_SetConfig+0x9a>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a0e      	ldr	r2, [pc, #56]	@ (8004c98 <TIM_Base_SetConfig+0xd0>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d103      	bne.n	8004c6a <TIM_Base_SetConfig+0xa2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	691a      	ldr	r2, [r3, #16]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f043 0204 	orr.w	r2, r3, #4
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	601a      	str	r2, [r3, #0]
}
 8004c82:	bf00      	nop
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	40012c00 	.word	0x40012c00
 8004c94:	40014400 	.word	0x40014400
 8004c98:	40014800 	.word	0x40014800

08004c9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <LL_RCC_GetUSARTClockSource>:
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004ce0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ce4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4013      	ands	r3, r2
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <LL_RCC_GetLPUARTClockSource>:
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004d00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d04:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4013      	ands	r3, r2
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e042      	b.n	8004db0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d106      	bne.n	8004d42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f7fd f8d3 	bl	8001ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2224      	movs	r2, #36	@ 0x24
 8004d46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 0201 	bic.w	r2, r2, #1
 8004d58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d002      	beq.n	8004d68 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fe82 	bl	8005a6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 fc57 	bl	800561c <UART_SetConfig>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e01b      	b.n	8004db0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685a      	ldr	r2, [r3, #4]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0201 	orr.w	r2, r2, #1
 8004da6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 ff01 	bl	8005bb0 <UART_CheckIdleState>
 8004dae:	4603      	mov	r3, r0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08a      	sub	sp, #40	@ 0x28
 8004dbc:	af02      	add	r7, sp, #8
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	603b      	str	r3, [r7, #0]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dce:	2b20      	cmp	r3, #32
 8004dd0:	d17b      	bne.n	8004eca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <HAL_UART_Transmit+0x26>
 8004dd8:	88fb      	ldrh	r3, [r7, #6]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e074      	b.n	8004ecc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2221      	movs	r2, #33	@ 0x21
 8004dee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004df2:	f7fd fba7 	bl	8002544 <HAL_GetTick>
 8004df6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	88fa      	ldrh	r2, [r7, #6]
 8004dfc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	88fa      	ldrh	r2, [r7, #6]
 8004e04:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e10:	d108      	bne.n	8004e24 <HAL_UART_Transmit+0x6c>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d104      	bne.n	8004e24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	61bb      	str	r3, [r7, #24]
 8004e22:	e003      	b.n	8004e2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e2c:	e030      	b.n	8004e90 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	2200      	movs	r2, #0
 8004e36:	2180      	movs	r1, #128	@ 0x80
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 ff63 	bl	8005d04 <UART_WaitOnFlagUntilTimeout>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d005      	beq.n	8004e50 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2220      	movs	r2, #32
 8004e48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e03d      	b.n	8004ecc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10b      	bne.n	8004e6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e64:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	3302      	adds	r3, #2
 8004e6a:	61bb      	str	r3, [r7, #24]
 8004e6c:	e007      	b.n	8004e7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	781a      	ldrb	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	3b01      	subs	r3, #1
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1c8      	bne.n	8004e2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	2140      	movs	r1, #64	@ 0x40
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 ff2c 	bl	8005d04 <UART_WaitOnFlagUntilTimeout>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d005      	beq.n	8004ebe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e006      	b.n	8004ecc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	e000      	b.n	8004ecc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004eca:	2302      	movs	r3, #2
  }
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3720      	adds	r7, #32
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b08a      	sub	sp, #40	@ 0x28
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ee8:	2b20      	cmp	r3, #32
 8004eea:	d137      	bne.n	8004f5c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <HAL_UART_Receive_IT+0x24>
 8004ef2:	88fb      	ldrh	r3, [r7, #6]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e030      	b.n	8004f5e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a18      	ldr	r2, [pc, #96]	@ (8004f68 <HAL_UART_Receive_IT+0x94>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d01f      	beq.n	8004f4c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d018      	beq.n	8004f4c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	e853 3f00 	ldrex	r3, [r3]
 8004f26:	613b      	str	r3, [r7, #16]
   return(result);
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	461a      	mov	r2, r3
 8004f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f38:	623b      	str	r3, [r7, #32]
 8004f3a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3c:	69f9      	ldr	r1, [r7, #28]
 8004f3e:	6a3a      	ldr	r2, [r7, #32]
 8004f40:	e841 2300 	strex	r3, r2, [r1]
 8004f44:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1e6      	bne.n	8004f1a <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f4c:	88fb      	ldrh	r3, [r7, #6]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	68b9      	ldr	r1, [r7, #8]
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f000 ff44 	bl	8005de0 <UART_Start_Receive_IT>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	e000      	b.n	8004f5e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f5c:	2302      	movs	r3, #2
  }
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3728      	adds	r7, #40	@ 0x28
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	40008000 	.word	0x40008000

08004f6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b0ba      	sub	sp, #232	@ 0xe8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004f96:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004fa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d11b      	bne.n	8004fe0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fac:	f003 0320 	and.w	r3, r3, #32
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d015      	beq.n	8004fe0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fb8:	f003 0320 	and.w	r3, r3, #32
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d105      	bne.n	8004fcc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d009      	beq.n	8004fe0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 8300 	beq.w	80055d6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	4798      	blx	r3
      }
      return;
 8004fde:	e2fa      	b.n	80055d6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004fe0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 8123 	beq.w	8005230 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004fea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004fee:	4b8d      	ldr	r3, [pc, #564]	@ (8005224 <HAL_UART_IRQHandler+0x2b8>)
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d106      	bne.n	8005004 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004ff6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004ffa:	4b8b      	ldr	r3, [pc, #556]	@ (8005228 <HAL_UART_IRQHandler+0x2bc>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 8116 	beq.w	8005230 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b00      	cmp	r3, #0
 800500e:	d011      	beq.n	8005034 <HAL_UART_IRQHandler+0xc8>
 8005010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00b      	beq.n	8005034 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2201      	movs	r2, #1
 8005022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800502a:	f043 0201 	orr.w	r2, r3, #1
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d011      	beq.n	8005064 <HAL_UART_IRQHandler+0xf8>
 8005040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00b      	beq.n	8005064 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2202      	movs	r2, #2
 8005052:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800505a:	f043 0204 	orr.w	r2, r3, #4
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b00      	cmp	r3, #0
 800506e:	d011      	beq.n	8005094 <HAL_UART_IRQHandler+0x128>
 8005070:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00b      	beq.n	8005094 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2204      	movs	r2, #4
 8005082:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800508a:	f043 0202 	orr.w	r2, r3, #2
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005098:	f003 0308 	and.w	r3, r3, #8
 800509c:	2b00      	cmp	r3, #0
 800509e:	d017      	beq.n	80050d0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80050a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050a4:	f003 0320 	and.w	r3, r3, #32
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d105      	bne.n	80050b8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80050ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80050b0:	4b5c      	ldr	r3, [pc, #368]	@ (8005224 <HAL_UART_IRQHandler+0x2b8>)
 80050b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00b      	beq.n	80050d0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2208      	movs	r2, #8
 80050be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050c6:	f043 0208 	orr.w	r2, r3, #8
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80050d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d012      	beq.n	8005102 <HAL_UART_IRQHandler+0x196>
 80050dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00c      	beq.n	8005102 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80050f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050f8:	f043 0220 	orr.w	r2, r3, #32
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005108:	2b00      	cmp	r3, #0
 800510a:	f000 8266 	beq.w	80055da <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800510e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005112:	f003 0320 	and.w	r3, r3, #32
 8005116:	2b00      	cmp	r3, #0
 8005118:	d013      	beq.n	8005142 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800511a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800511e:	f003 0320 	and.w	r3, r3, #32
 8005122:	2b00      	cmp	r3, #0
 8005124:	d105      	bne.n	8005132 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800512a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d007      	beq.n	8005142 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005148:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005156:	2b40      	cmp	r3, #64	@ 0x40
 8005158:	d005      	beq.n	8005166 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800515a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800515e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005162:	2b00      	cmp	r3, #0
 8005164:	d054      	beq.n	8005210 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 ff5c 	bl	8006024 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005176:	2b40      	cmp	r3, #64	@ 0x40
 8005178:	d146      	bne.n	8005208 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3308      	adds	r3, #8
 8005180:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005184:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005188:	e853 3f00 	ldrex	r3, [r3]
 800518c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005190:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005194:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005198:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3308      	adds	r3, #8
 80051a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80051a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80051aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80051b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80051b6:	e841 2300 	strex	r3, r2, [r1]
 80051ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80051be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1d9      	bne.n	800517a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d017      	beq.n	8005200 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051d6:	4a15      	ldr	r2, [pc, #84]	@ (800522c <HAL_UART_IRQHandler+0x2c0>)
 80051d8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7fd fb06 	bl	80027f2 <HAL_DMA_Abort_IT>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d019      	beq.n	8005220 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80051fa:	4610      	mov	r0, r2
 80051fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051fe:	e00f      	b.n	8005220 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7fc fc97 	bl	8001b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005206:	e00b      	b.n	8005220 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7fc fc93 	bl	8001b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800520e:	e007      	b.n	8005220 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f7fc fc8f 	bl	8001b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800521e:	e1dc      	b.n	80055da <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005220:	bf00      	nop
    return;
 8005222:	e1da      	b.n	80055da <HAL_UART_IRQHandler+0x66e>
 8005224:	10000001 	.word	0x10000001
 8005228:	04000120 	.word	0x04000120
 800522c:	080060f1 	.word	0x080060f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005234:	2b01      	cmp	r3, #1
 8005236:	f040 8170 	bne.w	800551a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800523a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800523e:	f003 0310 	and.w	r3, r3, #16
 8005242:	2b00      	cmp	r3, #0
 8005244:	f000 8169 	beq.w	800551a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800524c:	f003 0310 	and.w	r3, r3, #16
 8005250:	2b00      	cmp	r3, #0
 8005252:	f000 8162 	beq.w	800551a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2210      	movs	r2, #16
 800525c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005268:	2b40      	cmp	r3, #64	@ 0x40
 800526a:	f040 80d8 	bne.w	800541e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800527c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 80af 	beq.w	80053e4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800528c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005290:	429a      	cmp	r2, r3
 8005292:	f080 80a7 	bcs.w	80053e4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800529c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0320 	and.w	r3, r3, #32
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f040 8087 	bne.w	80053c2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80052c0:	e853 3f00 	ldrex	r3, [r3]
 80052c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80052c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80052cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	461a      	mov	r2, r3
 80052da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80052de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80052e2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80052ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80052ee:	e841 2300 	strex	r3, r2, [r1]
 80052f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80052f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1da      	bne.n	80052b4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	3308      	adds	r3, #8
 8005304:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005306:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005308:	e853 3f00 	ldrex	r3, [r3]
 800530c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800530e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005310:	f023 0301 	bic.w	r3, r3, #1
 8005314:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3308      	adds	r3, #8
 800531e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005322:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005326:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005328:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800532a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800532e:	e841 2300 	strex	r3, r2, [r1]
 8005332:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005334:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1e1      	bne.n	80052fe <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	3308      	adds	r3, #8
 8005340:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005342:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005344:	e853 3f00 	ldrex	r3, [r3]
 8005348:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800534a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800534c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005350:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	3308      	adds	r3, #8
 800535a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800535e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005360:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005362:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005364:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005366:	e841 2300 	strex	r3, r2, [r1]
 800536a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800536c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1e3      	bne.n	800533a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2220      	movs	r2, #32
 8005376:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005386:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005388:	e853 3f00 	ldrex	r3, [r3]
 800538c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800538e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005390:	f023 0310 	bic.w	r3, r3, #16
 8005394:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	461a      	mov	r2, r3
 800539e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80053a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80053a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80053aa:	e841 2300 	strex	r3, r2, [r1]
 80053ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80053b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1e4      	bne.n	8005380 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053bc:	4618      	mov	r0, r3
 80053be:	f7fd f9b9 	bl	8002734 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2202      	movs	r2, #2
 80053c6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	b29b      	uxth	r3, r3
 80053da:	4619      	mov	r1, r3
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f911 	bl	8005604 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80053e2:	e0fc      	b.n	80055de <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80053ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053ee:	429a      	cmp	r2, r3
 80053f0:	f040 80f5 	bne.w	80055de <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0320 	and.w	r3, r3, #32
 8005402:	2b20      	cmp	r3, #32
 8005404:	f040 80eb 	bne.w	80055de <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005414:	4619      	mov	r1, r3
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f8f4 	bl	8005604 <HAL_UARTEx_RxEventCallback>
      return;
 800541c:	e0df      	b.n	80055de <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800542a:	b29b      	uxth	r3, r3
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005438:	b29b      	uxth	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 80d1 	beq.w	80055e2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005440:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 80cc 	beq.w	80055e2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005452:	e853 3f00 	ldrex	r3, [r3]
 8005456:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800545a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800545e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	461a      	mov	r2, r3
 8005468:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800546c:	647b      	str	r3, [r7, #68]	@ 0x44
 800546e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005470:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005472:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005474:	e841 2300 	strex	r3, r2, [r1]
 8005478:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800547a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1e4      	bne.n	800544a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3308      	adds	r3, #8
 8005486:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548a:	e853 3f00 	ldrex	r3, [r3]
 800548e:	623b      	str	r3, [r7, #32]
   return(result);
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005496:	f023 0301 	bic.w	r3, r3, #1
 800549a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	3308      	adds	r3, #8
 80054a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80054a8:	633a      	str	r2, [r7, #48]	@ 0x30
 80054aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054b0:	e841 2300 	strex	r3, r2, [r1]
 80054b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1e1      	bne.n	8005480 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2220      	movs	r2, #32
 80054c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	e853 3f00 	ldrex	r3, [r3]
 80054dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f023 0310 	bic.w	r3, r3, #16
 80054e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	461a      	mov	r2, r3
 80054ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80054f2:	61fb      	str	r3, [r7, #28]
 80054f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f6:	69b9      	ldr	r1, [r7, #24]
 80054f8:	69fa      	ldr	r2, [r7, #28]
 80054fa:	e841 2300 	strex	r3, r2, [r1]
 80054fe:	617b      	str	r3, [r7, #20]
   return(result);
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1e4      	bne.n	80054d0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2202      	movs	r2, #2
 800550a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800550c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005510:	4619      	mov	r1, r3
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f876 	bl	8005604 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005518:	e063      	b.n	80055e2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800551a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800551e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00e      	beq.n	8005544 <HAL_UART_IRQHandler+0x5d8>
 8005526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800552a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d008      	beq.n	8005544 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800553a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f001 fb35 	bl	8006bac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005542:	e051      	b.n	80055e8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800554c:	2b00      	cmp	r3, #0
 800554e:	d014      	beq.n	800557a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005558:	2b00      	cmp	r3, #0
 800555a:	d105      	bne.n	8005568 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800555c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005560:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d008      	beq.n	800557a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800556c:	2b00      	cmp	r3, #0
 800556e:	d03a      	beq.n	80055e6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	4798      	blx	r3
    }
    return;
 8005578:	e035      	b.n	80055e6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800557a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800557e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005582:	2b00      	cmp	r3, #0
 8005584:	d009      	beq.n	800559a <HAL_UART_IRQHandler+0x62e>
 8005586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800558a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fdbe 	bl	8006114 <UART_EndTransmit_IT>
    return;
 8005598:	e026      	b.n	80055e8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800559a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800559e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d009      	beq.n	80055ba <HAL_UART_IRQHandler+0x64e>
 80055a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055aa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f001 fb0e 	bl	8006bd4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80055b8:	e016      	b.n	80055e8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80055ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d010      	beq.n	80055e8 <HAL_UART_IRQHandler+0x67c>
 80055c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	da0c      	bge.n	80055e8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f001 faf6 	bl	8006bc0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80055d4:	e008      	b.n	80055e8 <HAL_UART_IRQHandler+0x67c>
      return;
 80055d6:	bf00      	nop
 80055d8:	e006      	b.n	80055e8 <HAL_UART_IRQHandler+0x67c>
    return;
 80055da:	bf00      	nop
 80055dc:	e004      	b.n	80055e8 <HAL_UART_IRQHandler+0x67c>
      return;
 80055de:	bf00      	nop
 80055e0:	e002      	b.n	80055e8 <HAL_UART_IRQHandler+0x67c>
      return;
 80055e2:	bf00      	nop
 80055e4:	e000      	b.n	80055e8 <HAL_UART_IRQHandler+0x67c>
    return;
 80055e6:	bf00      	nop
  }
}
 80055e8:	37e8      	adds	r7, #232	@ 0xe8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop

080055f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	460b      	mov	r3, r1
 800560e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800561c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005620:	b08c      	sub	sp, #48	@ 0x30
 8005622:	af00      	add	r7, sp, #0
 8005624:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005626:	2300      	movs	r3, #0
 8005628:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	431a      	orrs	r2, r3
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	431a      	orrs	r2, r3
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	4313      	orrs	r3, r2
 8005642:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	4baf      	ldr	r3, [pc, #700]	@ (8005908 <UART_SetConfig+0x2ec>)
 800564c:	4013      	ands	r3, r2
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	6812      	ldr	r2, [r2, #0]
 8005652:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005654:	430b      	orrs	r3, r1
 8005656:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4aa4      	ldr	r2, [pc, #656]	@ (800590c <UART_SetConfig+0x2f0>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d004      	beq.n	8005688 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005684:	4313      	orrs	r3, r2
 8005686:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005692:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	6812      	ldr	r2, [r2, #0]
 800569a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800569c:	430b      	orrs	r3, r1
 800569e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a6:	f023 010f 	bic.w	r1, r3, #15
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a95      	ldr	r2, [pc, #596]	@ (8005910 <UART_SetConfig+0x2f4>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d125      	bne.n	800570c <UART_SetConfig+0xf0>
 80056c0:	2003      	movs	r0, #3
 80056c2:	f7ff fb09 	bl	8004cd8 <LL_RCC_GetUSARTClockSource>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b03      	cmp	r3, #3
 80056ca:	d81b      	bhi.n	8005704 <UART_SetConfig+0xe8>
 80056cc:	a201      	add	r2, pc, #4	@ (adr r2, 80056d4 <UART_SetConfig+0xb8>)
 80056ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d2:	bf00      	nop
 80056d4:	080056e5 	.word	0x080056e5
 80056d8:	080056f5 	.word	0x080056f5
 80056dc:	080056ed 	.word	0x080056ed
 80056e0:	080056fd 	.word	0x080056fd
 80056e4:	2301      	movs	r3, #1
 80056e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ea:	e042      	b.n	8005772 <UART_SetConfig+0x156>
 80056ec:	2302      	movs	r3, #2
 80056ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056f2:	e03e      	b.n	8005772 <UART_SetConfig+0x156>
 80056f4:	2304      	movs	r3, #4
 80056f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056fa:	e03a      	b.n	8005772 <UART_SetConfig+0x156>
 80056fc:	2308      	movs	r3, #8
 80056fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005702:	e036      	b.n	8005772 <UART_SetConfig+0x156>
 8005704:	2310      	movs	r3, #16
 8005706:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800570a:	e032      	b.n	8005772 <UART_SetConfig+0x156>
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a7e      	ldr	r2, [pc, #504]	@ (800590c <UART_SetConfig+0x2f0>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d12a      	bne.n	800576c <UART_SetConfig+0x150>
 8005716:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800571a:	f7ff faed 	bl	8004cf8 <LL_RCC_GetLPUARTClockSource>
 800571e:	4603      	mov	r3, r0
 8005720:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005724:	d01a      	beq.n	800575c <UART_SetConfig+0x140>
 8005726:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800572a:	d81b      	bhi.n	8005764 <UART_SetConfig+0x148>
 800572c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005730:	d00c      	beq.n	800574c <UART_SetConfig+0x130>
 8005732:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005736:	d815      	bhi.n	8005764 <UART_SetConfig+0x148>
 8005738:	2b00      	cmp	r3, #0
 800573a:	d003      	beq.n	8005744 <UART_SetConfig+0x128>
 800573c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005740:	d008      	beq.n	8005754 <UART_SetConfig+0x138>
 8005742:	e00f      	b.n	8005764 <UART_SetConfig+0x148>
 8005744:	2300      	movs	r3, #0
 8005746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800574a:	e012      	b.n	8005772 <UART_SetConfig+0x156>
 800574c:	2302      	movs	r3, #2
 800574e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005752:	e00e      	b.n	8005772 <UART_SetConfig+0x156>
 8005754:	2304      	movs	r3, #4
 8005756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800575a:	e00a      	b.n	8005772 <UART_SetConfig+0x156>
 800575c:	2308      	movs	r3, #8
 800575e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005762:	e006      	b.n	8005772 <UART_SetConfig+0x156>
 8005764:	2310      	movs	r3, #16
 8005766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800576a:	e002      	b.n	8005772 <UART_SetConfig+0x156>
 800576c:	2310      	movs	r3, #16
 800576e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a65      	ldr	r2, [pc, #404]	@ (800590c <UART_SetConfig+0x2f0>)
 8005778:	4293      	cmp	r3, r2
 800577a:	f040 8097 	bne.w	80058ac <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800577e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005782:	2b08      	cmp	r3, #8
 8005784:	d823      	bhi.n	80057ce <UART_SetConfig+0x1b2>
 8005786:	a201      	add	r2, pc, #4	@ (adr r2, 800578c <UART_SetConfig+0x170>)
 8005788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578c:	080057b1 	.word	0x080057b1
 8005790:	080057cf 	.word	0x080057cf
 8005794:	080057b9 	.word	0x080057b9
 8005798:	080057cf 	.word	0x080057cf
 800579c:	080057bf 	.word	0x080057bf
 80057a0:	080057cf 	.word	0x080057cf
 80057a4:	080057cf 	.word	0x080057cf
 80057a8:	080057cf 	.word	0x080057cf
 80057ac:	080057c7 	.word	0x080057c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057b0:	f7fe faf4 	bl	8003d9c <HAL_RCC_GetPCLK1Freq>
 80057b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057b6:	e010      	b.n	80057da <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057b8:	4b56      	ldr	r3, [pc, #344]	@ (8005914 <UART_SetConfig+0x2f8>)
 80057ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057bc:	e00d      	b.n	80057da <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057be:	f7fe fa6d 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 80057c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057c4:	e009      	b.n	80057da <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057cc:	e005      	b.n	80057da <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80057ce:	2300      	movs	r3, #0
 80057d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80057d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 812b 	beq.w	8005a38 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e6:	4a4c      	ldr	r2, [pc, #304]	@ (8005918 <UART_SetConfig+0x2fc>)
 80057e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057ec:	461a      	mov	r2, r3
 80057ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80057f4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	685a      	ldr	r2, [r3, #4]
 80057fa:	4613      	mov	r3, r2
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	4413      	add	r3, r2
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	429a      	cmp	r2, r3
 8005804:	d305      	bcc.n	8005812 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	429a      	cmp	r2, r3
 8005810:	d903      	bls.n	800581a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005818:	e10e      	b.n	8005a38 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800581a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581c:	2200      	movs	r2, #0
 800581e:	60bb      	str	r3, [r7, #8]
 8005820:	60fa      	str	r2, [r7, #12]
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005826:	4a3c      	ldr	r2, [pc, #240]	@ (8005918 <UART_SetConfig+0x2fc>)
 8005828:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800582c:	b29b      	uxth	r3, r3
 800582e:	2200      	movs	r2, #0
 8005830:	603b      	str	r3, [r7, #0]
 8005832:	607a      	str	r2, [r7, #4]
 8005834:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005838:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800583c:	f7fb f98c 	bl	8000b58 <__aeabi_uldivmod>
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	4610      	mov	r0, r2
 8005846:	4619      	mov	r1, r3
 8005848:	f04f 0200 	mov.w	r2, #0
 800584c:	f04f 0300 	mov.w	r3, #0
 8005850:	020b      	lsls	r3, r1, #8
 8005852:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005856:	0202      	lsls	r2, r0, #8
 8005858:	6979      	ldr	r1, [r7, #20]
 800585a:	6849      	ldr	r1, [r1, #4]
 800585c:	0849      	lsrs	r1, r1, #1
 800585e:	2000      	movs	r0, #0
 8005860:	460c      	mov	r4, r1
 8005862:	4605      	mov	r5, r0
 8005864:	eb12 0804 	adds.w	r8, r2, r4
 8005868:	eb43 0905 	adc.w	r9, r3, r5
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	469a      	mov	sl, r3
 8005874:	4693      	mov	fp, r2
 8005876:	4652      	mov	r2, sl
 8005878:	465b      	mov	r3, fp
 800587a:	4640      	mov	r0, r8
 800587c:	4649      	mov	r1, r9
 800587e:	f7fb f96b 	bl	8000b58 <__aeabi_uldivmod>
 8005882:	4602      	mov	r2, r0
 8005884:	460b      	mov	r3, r1
 8005886:	4613      	mov	r3, r2
 8005888:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005890:	d308      	bcc.n	80058a4 <UART_SetConfig+0x288>
 8005892:	6a3b      	ldr	r3, [r7, #32]
 8005894:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005898:	d204      	bcs.n	80058a4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6a3a      	ldr	r2, [r7, #32]
 80058a0:	60da      	str	r2, [r3, #12]
 80058a2:	e0c9      	b.n	8005a38 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80058aa:	e0c5      	b.n	8005a38 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058b4:	d16d      	bne.n	8005992 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80058b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80058ba:	3b01      	subs	r3, #1
 80058bc:	2b07      	cmp	r3, #7
 80058be:	d82d      	bhi.n	800591c <UART_SetConfig+0x300>
 80058c0:	a201      	add	r2, pc, #4	@ (adr r2, 80058c8 <UART_SetConfig+0x2ac>)
 80058c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c6:	bf00      	nop
 80058c8:	080058e9 	.word	0x080058e9
 80058cc:	080058f1 	.word	0x080058f1
 80058d0:	0800591d 	.word	0x0800591d
 80058d4:	080058f7 	.word	0x080058f7
 80058d8:	0800591d 	.word	0x0800591d
 80058dc:	0800591d 	.word	0x0800591d
 80058e0:	0800591d 	.word	0x0800591d
 80058e4:	080058ff 	.word	0x080058ff
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058e8:	f7fe fa6e 	bl	8003dc8 <HAL_RCC_GetPCLK2Freq>
 80058ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058ee:	e01b      	b.n	8005928 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058f0:	4b08      	ldr	r3, [pc, #32]	@ (8005914 <UART_SetConfig+0x2f8>)
 80058f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058f4:	e018      	b.n	8005928 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058f6:	f7fe f9d1 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 80058fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058fc:	e014      	b.n	8005928 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005902:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005904:	e010      	b.n	8005928 <UART_SetConfig+0x30c>
 8005906:	bf00      	nop
 8005908:	cfff69f3 	.word	0xcfff69f3
 800590c:	40008000 	.word	0x40008000
 8005910:	40013800 	.word	0x40013800
 8005914:	00f42400 	.word	0x00f42400
 8005918:	0800c9e8 	.word	0x0800c9e8
      default:
        pclk = 0U;
 800591c:	2300      	movs	r3, #0
 800591e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005926:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 8084 	beq.w	8005a38 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005934:	4a4b      	ldr	r2, [pc, #300]	@ (8005a64 <UART_SetConfig+0x448>)
 8005936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800593a:	461a      	mov	r2, r3
 800593c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005942:	005a      	lsls	r2, r3, #1
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	085b      	lsrs	r3, r3, #1
 800594a:	441a      	add	r2, r3
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	fbb2 f3f3 	udiv	r3, r2, r3
 8005954:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	2b0f      	cmp	r3, #15
 800595a:	d916      	bls.n	800598a <UART_SetConfig+0x36e>
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005962:	d212      	bcs.n	800598a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	b29b      	uxth	r3, r3
 8005968:	f023 030f 	bic.w	r3, r3, #15
 800596c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	085b      	lsrs	r3, r3, #1
 8005972:	b29b      	uxth	r3, r3
 8005974:	f003 0307 	and.w	r3, r3, #7
 8005978:	b29a      	uxth	r2, r3
 800597a:	8bfb      	ldrh	r3, [r7, #30]
 800597c:	4313      	orrs	r3, r2
 800597e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	8bfa      	ldrh	r2, [r7, #30]
 8005986:	60da      	str	r2, [r3, #12]
 8005988:	e056      	b.n	8005a38 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005990:	e052      	b.n	8005a38 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005992:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005996:	3b01      	subs	r3, #1
 8005998:	2b07      	cmp	r3, #7
 800599a:	d822      	bhi.n	80059e2 <UART_SetConfig+0x3c6>
 800599c:	a201      	add	r2, pc, #4	@ (adr r2, 80059a4 <UART_SetConfig+0x388>)
 800599e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a2:	bf00      	nop
 80059a4:	080059c5 	.word	0x080059c5
 80059a8:	080059cd 	.word	0x080059cd
 80059ac:	080059e3 	.word	0x080059e3
 80059b0:	080059d3 	.word	0x080059d3
 80059b4:	080059e3 	.word	0x080059e3
 80059b8:	080059e3 	.word	0x080059e3
 80059bc:	080059e3 	.word	0x080059e3
 80059c0:	080059db 	.word	0x080059db
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059c4:	f7fe fa00 	bl	8003dc8 <HAL_RCC_GetPCLK2Freq>
 80059c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059ca:	e010      	b.n	80059ee <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059cc:	4b26      	ldr	r3, [pc, #152]	@ (8005a68 <UART_SetConfig+0x44c>)
 80059ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80059d0:	e00d      	b.n	80059ee <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059d2:	f7fe f963 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 80059d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059d8:	e009      	b.n	80059ee <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80059e0:	e005      	b.n	80059ee <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80059e2:	2300      	movs	r3, #0
 80059e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80059ec:	bf00      	nop
    }

    if (pclk != 0U)
 80059ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d021      	beq.n	8005a38 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f8:	4a1a      	ldr	r2, [pc, #104]	@ (8005a64 <UART_SetConfig+0x448>)
 80059fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059fe:	461a      	mov	r2, r3
 8005a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a02:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	085b      	lsrs	r3, r3, #1
 8005a0c:	441a      	add	r2, r3
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a16:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	2b0f      	cmp	r3, #15
 8005a1c:	d909      	bls.n	8005a32 <UART_SetConfig+0x416>
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a24:	d205      	bcs.n	8005a32 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	60da      	str	r2, [r3, #12]
 8005a30:	e002      	b.n	8005a38 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	2200      	movs	r2, #0
 8005a52:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005a54:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3730      	adds	r7, #48	@ 0x30
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a62:	bf00      	nop
 8005a64:	0800c9e8 	.word	0x0800c9e8
 8005a68:	00f42400 	.word	0x00f42400

08005a6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a78:	f003 0308 	and.w	r3, r3, #8
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00a      	beq.n	8005a96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00a      	beq.n	8005ab8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005abc:	f003 0302 	and.w	r3, r3, #2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00a      	beq.n	8005ada <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ade:	f003 0304 	and.w	r3, r3, #4
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00a      	beq.n	8005afc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b00:	f003 0310 	and.w	r3, r3, #16
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00a      	beq.n	8005b1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b22:	f003 0320 	and.w	r3, r3, #32
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00a      	beq.n	8005b40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d01a      	beq.n	8005b82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b6a:	d10a      	bne.n	8005b82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00a      	beq.n	8005ba4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	605a      	str	r2, [r3, #4]
  }
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b098      	sub	sp, #96	@ 0x60
 8005bb4:	af02      	add	r7, sp, #8
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bc0:	f7fc fcc0 	bl	8002544 <HAL_GetTick>
 8005bc4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0308 	and.w	r3, r3, #8
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	d12f      	bne.n	8005c34 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bd4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f88e 	bl	8005d04 <UART_WaitOnFlagUntilTimeout>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d022      	beq.n	8005c34 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf6:	e853 3f00 	ldrex	r3, [r3]
 8005bfa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c02:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	461a      	mov	r2, r3
 8005c0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c0e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c14:	e841 2300 	strex	r3, r2, [r1]
 8005c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1e6      	bne.n	8005bee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2220      	movs	r2, #32
 8005c24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e063      	b.n	8005cfc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0304 	and.w	r3, r3, #4
 8005c3e:	2b04      	cmp	r3, #4
 8005c40:	d149      	bne.n	8005cd6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c42:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 f857 	bl	8005d04 <UART_WaitOnFlagUntilTimeout>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d03c      	beq.n	8005cd6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c64:	e853 3f00 	ldrex	r3, [r3]
 8005c68:	623b      	str	r3, [r7, #32]
   return(result);
 8005c6a:	6a3b      	ldr	r3, [r7, #32]
 8005c6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	461a      	mov	r2, r3
 8005c78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c82:	e841 2300 	strex	r3, r2, [r1]
 8005c86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1e6      	bne.n	8005c5c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	3308      	adds	r3, #8
 8005c94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	e853 3f00 	ldrex	r3, [r3]
 8005c9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f023 0301 	bic.w	r3, r3, #1
 8005ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3308      	adds	r3, #8
 8005cac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cae:	61fa      	str	r2, [r7, #28]
 8005cb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb2:	69b9      	ldr	r1, [r7, #24]
 8005cb4:	69fa      	ldr	r2, [r7, #28]
 8005cb6:	e841 2300 	strex	r3, r2, [r1]
 8005cba:	617b      	str	r3, [r7, #20]
   return(result);
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1e5      	bne.n	8005c8e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e012      	b.n	8005cfc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3758      	adds	r7, #88	@ 0x58
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	603b      	str	r3, [r7, #0]
 8005d10:	4613      	mov	r3, r2
 8005d12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d14:	e04f      	b.n	8005db6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d1c:	d04b      	beq.n	8005db6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d1e:	f7fc fc11 	bl	8002544 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d302      	bcc.n	8005d34 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e04e      	b.n	8005dd6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0304 	and.w	r3, r3, #4
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d037      	beq.n	8005db6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2b80      	cmp	r3, #128	@ 0x80
 8005d4a:	d034      	beq.n	8005db6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2b40      	cmp	r3, #64	@ 0x40
 8005d50:	d031      	beq.n	8005db6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	69db      	ldr	r3, [r3, #28]
 8005d58:	f003 0308 	and.w	r3, r3, #8
 8005d5c:	2b08      	cmp	r3, #8
 8005d5e:	d110      	bne.n	8005d82 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2208      	movs	r2, #8
 8005d66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f000 f95b 	bl	8006024 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2208      	movs	r2, #8
 8005d72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e029      	b.n	8005dd6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	69db      	ldr	r3, [r3, #28]
 8005d88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d90:	d111      	bne.n	8005db6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f000 f941 	bl	8006024 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2220      	movs	r2, #32
 8005da6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e00f      	b.n	8005dd6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	69da      	ldr	r2, [r3, #28]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	bf0c      	ite	eq
 8005dc6:	2301      	moveq	r3, #1
 8005dc8:	2300      	movne	r3, #0
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	461a      	mov	r2, r3
 8005dce:	79fb      	ldrb	r3, [r7, #7]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d0a0      	beq.n	8005d16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
	...

08005de0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b0a3      	sub	sp, #140	@ 0x8c
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	4613      	mov	r3, r2
 8005dec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	88fa      	ldrh	r2, [r7, #6]
 8005df8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	88fa      	ldrh	r2, [r7, #6]
 8005e00:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e12:	d10e      	bne.n	8005e32 <UART_Start_Receive_IT+0x52>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d105      	bne.n	8005e28 <UART_Start_Receive_IT+0x48>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005e22:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005e26:	e02d      	b.n	8005e84 <UART_Start_Receive_IT+0xa4>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	22ff      	movs	r2, #255	@ 0xff
 8005e2c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005e30:	e028      	b.n	8005e84 <UART_Start_Receive_IT+0xa4>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10d      	bne.n	8005e56 <UART_Start_Receive_IT+0x76>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d104      	bne.n	8005e4c <UART_Start_Receive_IT+0x6c>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	22ff      	movs	r2, #255	@ 0xff
 8005e46:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005e4a:	e01b      	b.n	8005e84 <UART_Start_Receive_IT+0xa4>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	227f      	movs	r2, #127	@ 0x7f
 8005e50:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005e54:	e016      	b.n	8005e84 <UART_Start_Receive_IT+0xa4>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e5e:	d10d      	bne.n	8005e7c <UART_Start_Receive_IT+0x9c>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d104      	bne.n	8005e72 <UART_Start_Receive_IT+0x92>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	227f      	movs	r2, #127	@ 0x7f
 8005e6c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005e70:	e008      	b.n	8005e84 <UART_Start_Receive_IT+0xa4>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	223f      	movs	r2, #63	@ 0x3f
 8005e76:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005e7a:	e003      	b.n	8005e84 <UART_Start_Receive_IT+0xa4>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2222      	movs	r2, #34	@ 0x22
 8005e90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3308      	adds	r3, #8
 8005e9a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e9e:	e853 3f00 	ldrex	r3, [r3]
 8005ea2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005ea4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ea6:	f043 0301 	orr.w	r3, r3, #1
 8005eaa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3308      	adds	r3, #8
 8005eb4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005eb8:	673a      	str	r2, [r7, #112]	@ 0x70
 8005eba:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8005ebe:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8005ec0:	e841 2300 	strex	r3, r2, [r1]
 8005ec4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8005ec6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1e3      	bne.n	8005e94 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ed0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ed4:	d14f      	bne.n	8005f76 <UART_Start_Receive_IT+0x196>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005edc:	88fa      	ldrh	r2, [r7, #6]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d349      	bcc.n	8005f76 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eea:	d107      	bne.n	8005efc <UART_Start_Receive_IT+0x11c>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d103      	bne.n	8005efc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	4a47      	ldr	r2, [pc, #284]	@ (8006014 <UART_Start_Receive_IT+0x234>)
 8005ef8:	675a      	str	r2, [r3, #116]	@ 0x74
 8005efa:	e002      	b.n	8005f02 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4a46      	ldr	r2, [pc, #280]	@ (8006018 <UART_Start_Receive_IT+0x238>)
 8005f00:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d01a      	beq.n	8005f40 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f12:	e853 3f00 	ldrex	r3, [r3]
 8005f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005f18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	461a      	mov	r2, r3
 8005f28:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005f2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f2e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f30:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005f32:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005f34:	e841 2300 	strex	r3, r2, [r1]
 8005f38:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005f3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1e4      	bne.n	8005f0a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	3308      	adds	r3, #8
 8005f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f4a:	e853 3f00 	ldrex	r3, [r3]
 8005f4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f56:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3308      	adds	r3, #8
 8005f5e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005f60:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005f62:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f64:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005f66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f68:	e841 2300 	strex	r3, r2, [r1]
 8005f6c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005f6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1e5      	bne.n	8005f40 <UART_Start_Receive_IT+0x160>
 8005f74:	e046      	b.n	8006004 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f7e:	d107      	bne.n	8005f90 <UART_Start_Receive_IT+0x1b0>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d103      	bne.n	8005f90 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	4a24      	ldr	r2, [pc, #144]	@ (800601c <UART_Start_Receive_IT+0x23c>)
 8005f8c:	675a      	str	r2, [r3, #116]	@ 0x74
 8005f8e:	e002      	b.n	8005f96 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4a23      	ldr	r2, [pc, #140]	@ (8006020 <UART_Start_Receive_IT+0x240>)
 8005f94:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d019      	beq.n	8005fd2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa6:	e853 3f00 	ldrex	r3, [r3]
 8005faa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fae:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005fb2:	677b      	str	r3, [r7, #116]	@ 0x74
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	461a      	mov	r2, r3
 8005fba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fbe:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005fc2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005fc4:	e841 2300 	strex	r3, r2, [r1]
 8005fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1e6      	bne.n	8005f9e <UART_Start_Receive_IT+0x1be>
 8005fd0:	e018      	b.n	8006004 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	e853 3f00 	ldrex	r3, [r3]
 8005fde:	613b      	str	r3, [r7, #16]
   return(result);
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f043 0320 	orr.w	r3, r3, #32
 8005fe6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	461a      	mov	r2, r3
 8005fee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ff0:	623b      	str	r3, [r7, #32]
 8005ff2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff4:	69f9      	ldr	r1, [r7, #28]
 8005ff6:	6a3a      	ldr	r2, [r7, #32]
 8005ff8:	e841 2300 	strex	r3, r2, [r1]
 8005ffc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1e6      	bne.n	8005fd2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	378c      	adds	r7, #140	@ 0x8c
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	08006841 	.word	0x08006841
 8006018:	080064dd 	.word	0x080064dd
 800601c:	08006325 	.word	0x08006325
 8006020:	0800616d 	.word	0x0800616d

08006024 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006024:	b480      	push	{r7}
 8006026:	b095      	sub	sp, #84	@ 0x54
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006034:	e853 3f00 	ldrex	r3, [r3]
 8006038:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800603a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006040:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	461a      	mov	r2, r3
 8006048:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800604a:	643b      	str	r3, [r7, #64]	@ 0x40
 800604c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006050:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006052:	e841 2300 	strex	r3, r2, [r1]
 8006056:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1e6      	bne.n	800602c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3308      	adds	r3, #8
 8006064:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	e853 3f00 	ldrex	r3, [r3]
 800606c:	61fb      	str	r3, [r7, #28]
   return(result);
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006074:	f023 0301 	bic.w	r3, r3, #1
 8006078:	64bb      	str	r3, [r7, #72]	@ 0x48
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	3308      	adds	r3, #8
 8006080:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006082:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006084:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006086:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006088:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800608a:	e841 2300 	strex	r3, r2, [r1]
 800608e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1e3      	bne.n	800605e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800609a:	2b01      	cmp	r3, #1
 800609c:	d118      	bne.n	80060d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	e853 3f00 	ldrex	r3, [r3]
 80060aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	f023 0310 	bic.w	r3, r3, #16
 80060b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	461a      	mov	r2, r3
 80060ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060bc:	61bb      	str	r3, [r7, #24]
 80060be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c0:	6979      	ldr	r1, [r7, #20]
 80060c2:	69ba      	ldr	r2, [r7, #24]
 80060c4:	e841 2300 	strex	r3, r2, [r1]
 80060c8:	613b      	str	r3, [r7, #16]
   return(result);
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1e6      	bne.n	800609e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2220      	movs	r2, #32
 80060d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80060e4:	bf00      	nop
 80060e6:	3754      	adds	r7, #84	@ 0x54
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f7fb fd14 	bl	8001b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800610c:	bf00      	nop
 800610e:	3710      	adds	r7, #16
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b088      	sub	sp, #32
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	e853 3f00 	ldrex	r3, [r3]
 8006128:	60bb      	str	r3, [r7, #8]
   return(result);
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006130:	61fb      	str	r3, [r7, #28]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	461a      	mov	r2, r3
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	61bb      	str	r3, [r7, #24]
 800613c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613e:	6979      	ldr	r1, [r7, #20]
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	e841 2300 	strex	r3, r2, [r1]
 8006146:	613b      	str	r3, [r7, #16]
   return(result);
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1e6      	bne.n	800611c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2220      	movs	r2, #32
 8006152:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7ff fa47 	bl	80055f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006162:	bf00      	nop
 8006164:	3720      	adds	r7, #32
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
	...

0800616c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b09c      	sub	sp, #112	@ 0x70
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800617a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006184:	2b22      	cmp	r3, #34	@ 0x22
 8006186:	f040 80be 	bne.w	8006306 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006190:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006194:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006198:	b2d9      	uxtb	r1, r3
 800619a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800619e:	b2da      	uxtb	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061a4:	400a      	ands	r2, r1
 80061a6:	b2d2      	uxtb	r2, r2
 80061a8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ae:	1c5a      	adds	r2, r3, #1
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	3b01      	subs	r3, #1
 80061be:	b29a      	uxth	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f040 80a1 	bne.w	8006316 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061dc:	e853 3f00 	ldrex	r3, [r3]
 80061e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80061e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	461a      	mov	r2, r3
 80061f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80061f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80061f4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80061f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80061fa:	e841 2300 	strex	r3, r2, [r1]
 80061fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006200:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1e6      	bne.n	80061d4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	3308      	adds	r3, #8
 800620c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006210:	e853 3f00 	ldrex	r3, [r3]
 8006214:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006218:	f023 0301 	bic.w	r3, r3, #1
 800621c:	667b      	str	r3, [r7, #100]	@ 0x64
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	3308      	adds	r3, #8
 8006224:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006226:	647a      	str	r2, [r7, #68]	@ 0x44
 8006228:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800622c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800622e:	e841 2300 	strex	r3, r2, [r1]
 8006232:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006234:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1e5      	bne.n	8006206 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2220      	movs	r2, #32
 800623e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a33      	ldr	r2, [pc, #204]	@ (8006320 <UART_RxISR_8BIT+0x1b4>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d01f      	beq.n	8006298 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d018      	beq.n	8006298 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626e:	e853 3f00 	ldrex	r3, [r3]
 8006272:	623b      	str	r3, [r7, #32]
   return(result);
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800627a:	663b      	str	r3, [r7, #96]	@ 0x60
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	461a      	mov	r2, r3
 8006282:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006284:	633b      	str	r3, [r7, #48]	@ 0x30
 8006286:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006288:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800628a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800628c:	e841 2300 	strex	r3, r2, [r1]
 8006290:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1e6      	bne.n	8006266 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800629c:	2b01      	cmp	r3, #1
 800629e:	d12e      	bne.n	80062fe <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	e853 3f00 	ldrex	r3, [r3]
 80062b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f023 0310 	bic.w	r3, r3, #16
 80062ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	461a      	mov	r2, r3
 80062c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80062c4:	61fb      	str	r3, [r7, #28]
 80062c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c8:	69b9      	ldr	r1, [r7, #24]
 80062ca:	69fa      	ldr	r2, [r7, #28]
 80062cc:	e841 2300 	strex	r3, r2, [r1]
 80062d0:	617b      	str	r3, [r7, #20]
   return(result);
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1e6      	bne.n	80062a6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	f003 0310 	and.w	r3, r3, #16
 80062e2:	2b10      	cmp	r3, #16
 80062e4:	d103      	bne.n	80062ee <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2210      	movs	r2, #16
 80062ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80062f4:	4619      	mov	r1, r3
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7ff f984 	bl	8005604 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80062fc:	e00b      	b.n	8006316 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7fb fbac 	bl	8001a5c <HAL_UART_RxCpltCallback>
}
 8006304:	e007      	b.n	8006316 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	699a      	ldr	r2, [r3, #24]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f042 0208 	orr.w	r2, r2, #8
 8006314:	619a      	str	r2, [r3, #24]
}
 8006316:	bf00      	nop
 8006318:	3770      	adds	r7, #112	@ 0x70
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	40008000 	.word	0x40008000

08006324 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b09c      	sub	sp, #112	@ 0x70
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006332:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800633c:	2b22      	cmp	r3, #34	@ 0x22
 800633e:	f040 80be 	bne.w	80064be <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006348:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006350:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006352:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006356:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800635a:	4013      	ands	r3, r2
 800635c:	b29a      	uxth	r2, r3
 800635e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006360:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006366:	1c9a      	adds	r2, r3, #2
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006372:	b29b      	uxth	r3, r3
 8006374:	3b01      	subs	r3, #1
 8006376:	b29a      	uxth	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006384:	b29b      	uxth	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	f040 80a1 	bne.w	80064ce <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006392:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006394:	e853 3f00 	ldrex	r3, [r3]
 8006398:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800639a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800639c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	461a      	mov	r2, r3
 80063a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80063ac:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80063b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80063b2:	e841 2300 	strex	r3, r2, [r1]
 80063b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80063b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1e6      	bne.n	800638c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	3308      	adds	r3, #8
 80063c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063c8:	e853 3f00 	ldrex	r3, [r3]
 80063cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80063ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d0:	f023 0301 	bic.w	r3, r3, #1
 80063d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	3308      	adds	r3, #8
 80063dc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80063de:	643a      	str	r2, [r7, #64]	@ 0x40
 80063e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80063e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063e6:	e841 2300 	strex	r3, r2, [r1]
 80063ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1e5      	bne.n	80063be <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2220      	movs	r2, #32
 80063f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a33      	ldr	r2, [pc, #204]	@ (80064d8 <UART_RxISR_16BIT+0x1b4>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d01f      	beq.n	8006450 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d018      	beq.n	8006450 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	e853 3f00 	ldrex	r3, [r3]
 800642a:	61fb      	str	r3, [r7, #28]
   return(result);
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006432:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	461a      	mov	r2, r3
 800643a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800643c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800643e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006440:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006442:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006444:	e841 2300 	strex	r3, r2, [r1]
 8006448:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800644a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1e6      	bne.n	800641e <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006454:	2b01      	cmp	r3, #1
 8006456:	d12e      	bne.n	80064b6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	e853 3f00 	ldrex	r3, [r3]
 800646a:	60bb      	str	r3, [r7, #8]
   return(result);
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	f023 0310 	bic.w	r3, r3, #16
 8006472:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	461a      	mov	r2, r3
 800647a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800647c:	61bb      	str	r3, [r7, #24]
 800647e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006480:	6979      	ldr	r1, [r7, #20]
 8006482:	69ba      	ldr	r2, [r7, #24]
 8006484:	e841 2300 	strex	r3, r2, [r1]
 8006488:	613b      	str	r3, [r7, #16]
   return(result);
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1e6      	bne.n	800645e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	69db      	ldr	r3, [r3, #28]
 8006496:	f003 0310 	and.w	r3, r3, #16
 800649a:	2b10      	cmp	r3, #16
 800649c:	d103      	bne.n	80064a6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2210      	movs	r2, #16
 80064a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80064ac:	4619      	mov	r1, r3
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7ff f8a8 	bl	8005604 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80064b4:	e00b      	b.n	80064ce <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f7fb fad0 	bl	8001a5c <HAL_UART_RxCpltCallback>
}
 80064bc:	e007      	b.n	80064ce <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	699a      	ldr	r2, [r3, #24]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f042 0208 	orr.w	r2, r2, #8
 80064cc:	619a      	str	r2, [r3, #24]
}
 80064ce:	bf00      	nop
 80064d0:	3770      	adds	r7, #112	@ 0x70
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	40008000 	.word	0x40008000

080064dc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b0ac      	sub	sp, #176	@ 0xb0
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80064ea:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	69db      	ldr	r3, [r3, #28]
 80064f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006512:	2b22      	cmp	r3, #34	@ 0x22
 8006514:	f040 8183 	bne.w	800681e <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800651e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006522:	e126      	b.n	8006772 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800652a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800652e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8006532:	b2d9      	uxtb	r1, r3
 8006534:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8006538:	b2da      	uxtb	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800653e:	400a      	ands	r2, r1
 8006540:	b2d2      	uxtb	r2, r2
 8006542:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006548:	1c5a      	adds	r2, r3, #1
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006554:	b29b      	uxth	r3, r3
 8006556:	3b01      	subs	r3, #1
 8006558:	b29a      	uxth	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	69db      	ldr	r3, [r3, #28]
 8006566:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800656a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800656e:	f003 0307 	and.w	r3, r3, #7
 8006572:	2b00      	cmp	r3, #0
 8006574:	d053      	beq.n	800661e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006576:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	2b00      	cmp	r3, #0
 8006580:	d011      	beq.n	80065a6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006582:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00b      	beq.n	80065a6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2201      	movs	r2, #1
 8006594:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800659c:	f043 0201 	orr.w	r2, r3, #1
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d011      	beq.n	80065d6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80065b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00b      	beq.n	80065d6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2202      	movs	r2, #2
 80065c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065cc:	f043 0204 	orr.w	r2, r3, #4
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065da:	f003 0304 	and.w	r3, r3, #4
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d011      	beq.n	8006606 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80065e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00b      	beq.n	8006606 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2204      	movs	r2, #4
 80065f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065fc:	f043 0202 	orr.w	r2, r3, #2
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800660c:	2b00      	cmp	r3, #0
 800660e:	d006      	beq.n	800661e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7fb fa8f 	bl	8001b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006624:	b29b      	uxth	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	f040 80a3 	bne.w	8006772 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006632:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006634:	e853 3f00 	ldrex	r3, [r3]
 8006638:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800663a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800663c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006640:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	461a      	mov	r2, r3
 800664a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800664e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006650:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006652:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006654:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006656:	e841 2300 	strex	r3, r2, [r1]
 800665a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800665c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1e4      	bne.n	800662c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3308      	adds	r3, #8
 8006668:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800666c:	e853 3f00 	ldrex	r3, [r3]
 8006670:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8006672:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006674:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006678:	f023 0301 	bic.w	r3, r3, #1
 800667c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	3308      	adds	r3, #8
 8006686:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800668a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800668c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006690:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006692:	e841 2300 	strex	r3, r2, [r1]
 8006696:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006698:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1e1      	bne.n	8006662 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2220      	movs	r2, #32
 80066a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a60      	ldr	r2, [pc, #384]	@ (8006838 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d021      	beq.n	8006700 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d01a      	beq.n	8006700 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066d2:	e853 3f00 	ldrex	r3, [r3]
 80066d6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80066d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80066de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	461a      	mov	r2, r3
 80066e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80066ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80066ee:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80066f2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80066f4:	e841 2300 	strex	r3, r2, [r1]
 80066f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80066fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1e4      	bne.n	80066ca <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006704:	2b01      	cmp	r3, #1
 8006706:	d130      	bne.n	800676a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006716:	e853 3f00 	ldrex	r3, [r3]
 800671a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800671c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671e:	f023 0310 	bic.w	r3, r3, #16
 8006722:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	461a      	mov	r2, r3
 800672c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006730:	643b      	str	r3, [r7, #64]	@ 0x40
 8006732:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006734:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006736:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006738:	e841 2300 	strex	r3, r2, [r1]
 800673c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800673e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1e4      	bne.n	800670e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	69db      	ldr	r3, [r3, #28]
 800674a:	f003 0310 	and.w	r3, r3, #16
 800674e:	2b10      	cmp	r3, #16
 8006750:	d103      	bne.n	800675a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2210      	movs	r2, #16
 8006758:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006760:	4619      	mov	r1, r3
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f7fe ff4e 	bl	8005604 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006768:	e00e      	b.n	8006788 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f7fb f976 	bl	8001a5c <HAL_UART_RxCpltCallback>
        break;
 8006770:	e00a      	b.n	8006788 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006772:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8006776:	2b00      	cmp	r3, #0
 8006778:	d006      	beq.n	8006788 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800677a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800677e:	f003 0320 	and.w	r3, r3, #32
 8006782:	2b00      	cmp	r3, #0
 8006784:	f47f aece 	bne.w	8006524 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800678e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006792:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006796:	2b00      	cmp	r3, #0
 8006798:	d049      	beq.n	800682e <UART_RxISR_8BIT_FIFOEN+0x352>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80067a0:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d242      	bcs.n	800682e <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	3308      	adds	r3, #8
 80067ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	e853 3f00 	ldrex	r3, [r3]
 80067b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	3308      	adds	r3, #8
 80067c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80067cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067d4:	e841 2300 	strex	r3, r2, [r1]
 80067d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80067da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1e3      	bne.n	80067a8 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a16      	ldr	r2, [pc, #88]	@ (800683c <UART_RxISR_8BIT_FIFOEN+0x360>)
 80067e4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	e853 3f00 	ldrex	r3, [r3]
 80067f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	f043 0320 	orr.w	r3, r3, #32
 80067fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	461a      	mov	r2, r3
 8006804:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006808:	61bb      	str	r3, [r7, #24]
 800680a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680c:	6979      	ldr	r1, [r7, #20]
 800680e:	69ba      	ldr	r2, [r7, #24]
 8006810:	e841 2300 	strex	r3, r2, [r1]
 8006814:	613b      	str	r3, [r7, #16]
   return(result);
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1e4      	bne.n	80067e6 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800681c:	e007      	b.n	800682e <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	699a      	ldr	r2, [r3, #24]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f042 0208 	orr.w	r2, r2, #8
 800682c:	619a      	str	r2, [r3, #24]
}
 800682e:	bf00      	nop
 8006830:	37b0      	adds	r7, #176	@ 0xb0
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	40008000 	.word	0x40008000
 800683c:	0800616d 	.word	0x0800616d

08006840 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b0ae      	sub	sp, #184	@ 0xb8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800684e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	69db      	ldr	r3, [r3, #28]
 8006858:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006876:	2b22      	cmp	r3, #34	@ 0x22
 8006878:	f040 8187 	bne.w	8006b8a <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006882:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006886:	e12a      	b.n	8006ade <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800688e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006896:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800689a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800689e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80068a2:	4013      	ands	r3, r2
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80068aa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068b0:	1c9a      	adds	r2, r3, #2
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80068bc:	b29b      	uxth	r3, r3
 80068be:	3b01      	subs	r3, #1
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80068d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80068d6:	f003 0307 	and.w	r3, r3, #7
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d053      	beq.n	8006986 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80068de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d011      	beq.n	800690e <UART_RxISR_16BIT_FIFOEN+0xce>
 80068ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80068ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00b      	beq.n	800690e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2201      	movs	r2, #1
 80068fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006904:	f043 0201 	orr.w	r2, r3, #1
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800690e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b00      	cmp	r3, #0
 8006918:	d011      	beq.n	800693e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800691a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00b      	beq.n	800693e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2202      	movs	r2, #2
 800692c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006934:	f043 0204 	orr.w	r2, r3, #4
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800693e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006942:	f003 0304 	and.w	r3, r3, #4
 8006946:	2b00      	cmp	r3, #0
 8006948:	d011      	beq.n	800696e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800694a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00b      	beq.n	800696e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2204      	movs	r2, #4
 800695c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006964:	f043 0202 	orr.w	r2, r3, #2
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006974:	2b00      	cmp	r3, #0
 8006976:	d006      	beq.n	8006986 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7fb f8db 	bl	8001b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800698c:	b29b      	uxth	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	f040 80a5 	bne.w	8006ade <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800699c:	e853 3f00 	ldrex	r3, [r3]
 80069a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80069a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80069a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	461a      	mov	r2, r3
 80069b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80069b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80069ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80069be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80069c2:	e841 2300 	strex	r3, r2, [r1]
 80069c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80069c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1e2      	bne.n	8006994 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	3308      	adds	r3, #8
 80069d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80069d8:	e853 3f00 	ldrex	r3, [r3]
 80069dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80069de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069e4:	f023 0301 	bic.w	r3, r3, #1
 80069e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	3308      	adds	r3, #8
 80069f2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80069f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80069f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80069fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80069fe:	e841 2300 	strex	r3, r2, [r1]
 8006a02:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006a04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1e1      	bne.n	80069ce <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a60      	ldr	r2, [pc, #384]	@ (8006ba4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d021      	beq.n	8006a6c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d01a      	beq.n	8006a6c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a3e:	e853 3f00 	ldrex	r3, [r3]
 8006a42:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006a4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	461a      	mov	r2, r3
 8006a54:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006a58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a5a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a5e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a60:	e841 2300 	strex	r3, r2, [r1]
 8006a64:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1e4      	bne.n	8006a36 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d130      	bne.n	8006ad6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a82:	e853 3f00 	ldrex	r3, [r3]
 8006a86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a8a:	f023 0310 	bic.w	r3, r3, #16
 8006a8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	461a      	mov	r2, r3
 8006a98:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006a9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a9e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006aa2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006aa4:	e841 2300 	strex	r3, r2, [r1]
 8006aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006aaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1e4      	bne.n	8006a7a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	f003 0310 	and.w	r3, r3, #16
 8006aba:	2b10      	cmp	r3, #16
 8006abc:	d103      	bne.n	8006ac6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2210      	movs	r2, #16
 8006ac4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006acc:	4619      	mov	r1, r3
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f7fe fd98 	bl	8005604 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006ad4:	e00e      	b.n	8006af4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f7fa ffc0 	bl	8001a5c <HAL_UART_RxCpltCallback>
        break;
 8006adc:	e00a      	b.n	8006af4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006ade:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d006      	beq.n	8006af4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8006ae6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006aea:	f003 0320 	and.w	r3, r3, #32
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f47f aeca 	bne.w	8006888 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006afa:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006afe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d049      	beq.n	8006b9a <UART_RxISR_16BIT_FIFOEN+0x35a>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006b0c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d242      	bcs.n	8006b9a <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	3308      	adds	r3, #8
 8006b1a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1e:	e853 3f00 	ldrex	r3, [r3]
 8006b22:	623b      	str	r3, [r7, #32]
   return(result);
 8006b24:	6a3b      	ldr	r3, [r7, #32]
 8006b26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	3308      	adds	r3, #8
 8006b34:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8006b38:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b40:	e841 2300 	strex	r3, r2, [r1]
 8006b44:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1e3      	bne.n	8006b14 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a16      	ldr	r2, [pc, #88]	@ (8006ba8 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8006b50:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	e853 3f00 	ldrex	r3, [r3]
 8006b5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f043 0320 	orr.w	r3, r3, #32
 8006b66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b74:	61fb      	str	r3, [r7, #28]
 8006b76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b78:	69b9      	ldr	r1, [r7, #24]
 8006b7a:	69fa      	ldr	r2, [r7, #28]
 8006b7c:	e841 2300 	strex	r3, r2, [r1]
 8006b80:	617b      	str	r3, [r7, #20]
   return(result);
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1e4      	bne.n	8006b52 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b88:	e007      	b.n	8006b9a <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	699a      	ldr	r2, [r3, #24]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f042 0208 	orr.w	r2, r2, #8
 8006b98:	619a      	str	r2, [r3, #24]
}
 8006b9a:	bf00      	nop
 8006b9c:	37b8      	adds	r7, #184	@ 0xb8
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	40008000 	.word	0x40008000
 8006ba8:	08006325 	.word	0x08006325

08006bac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d101      	bne.n	8006bfe <HAL_UARTEx_DisableFifoMode+0x16>
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	e027      	b.n	8006c4e <HAL_UARTEx_DisableFifoMode+0x66>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2224      	movs	r2, #36	@ 0x24
 8006c0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f022 0201 	bic.w	r2, r2, #1
 8006c24:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006c2c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2220      	movs	r2, #32
 8006c40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3714      	adds	r7, #20
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr

08006c5a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b084      	sub	sp, #16
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
 8006c62:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d101      	bne.n	8006c72 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c6e:	2302      	movs	r3, #2
 8006c70:	e02d      	b.n	8006cce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2224      	movs	r2, #36	@ 0x24
 8006c7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f022 0201 	bic.w	r2, r2, #1
 8006c98:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	430a      	orrs	r2, r1
 8006cac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f850 	bl	8006d54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2220      	movs	r2, #32
 8006cc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b084      	sub	sp, #16
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d101      	bne.n	8006cee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006cea:	2302      	movs	r3, #2
 8006cec:	e02d      	b.n	8006d4a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2224      	movs	r2, #36	@ 0x24
 8006cfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f022 0201 	bic.w	r2, r2, #1
 8006d14:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	683a      	ldr	r2, [r7, #0]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f812 	bl	8006d54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
	...

08006d54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d108      	bne.n	8006d76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d74:	e031      	b.n	8006dda <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d76:	2308      	movs	r3, #8
 8006d78:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d7a:	2308      	movs	r3, #8
 8006d7c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	0e5b      	lsrs	r3, r3, #25
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	f003 0307 	and.w	r3, r3, #7
 8006d8c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	0f5b      	lsrs	r3, r3, #29
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	f003 0307 	and.w	r3, r3, #7
 8006d9c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d9e:	7bbb      	ldrb	r3, [r7, #14]
 8006da0:	7b3a      	ldrb	r2, [r7, #12]
 8006da2:	4911      	ldr	r1, [pc, #68]	@ (8006de8 <UARTEx_SetNbDataToProcess+0x94>)
 8006da4:	5c8a      	ldrb	r2, [r1, r2]
 8006da6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006daa:	7b3a      	ldrb	r2, [r7, #12]
 8006dac:	490f      	ldr	r1, [pc, #60]	@ (8006dec <UARTEx_SetNbDataToProcess+0x98>)
 8006dae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006db0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
 8006dbe:	7b7a      	ldrb	r2, [r7, #13]
 8006dc0:	4909      	ldr	r1, [pc, #36]	@ (8006de8 <UARTEx_SetNbDataToProcess+0x94>)
 8006dc2:	5c8a      	ldrb	r2, [r1, r2]
 8006dc4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006dc8:	7b7a      	ldrb	r2, [r7, #13]
 8006dca:	4908      	ldr	r1, [pc, #32]	@ (8006dec <UARTEx_SetNbDataToProcess+0x98>)
 8006dcc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006dce:	fb93 f3f2 	sdiv	r3, r3, r2
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006dda:	bf00      	nop
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	0800ca00 	.word	0x0800ca00
 8006dec:	0800ca08 	.word	0x0800ca08

08006df0 <__NVIC_SetPriority>:
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	4603      	mov	r3, r0
 8006df8:	6039      	str	r1, [r7, #0]
 8006dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	db0a      	blt.n	8006e1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	b2da      	uxtb	r2, r3
 8006e08:	490c      	ldr	r1, [pc, #48]	@ (8006e3c <__NVIC_SetPriority+0x4c>)
 8006e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e0e:	0112      	lsls	r2, r2, #4
 8006e10:	b2d2      	uxtb	r2, r2
 8006e12:	440b      	add	r3, r1
 8006e14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006e18:	e00a      	b.n	8006e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	4908      	ldr	r1, [pc, #32]	@ (8006e40 <__NVIC_SetPriority+0x50>)
 8006e20:	79fb      	ldrb	r3, [r7, #7]
 8006e22:	f003 030f 	and.w	r3, r3, #15
 8006e26:	3b04      	subs	r3, #4
 8006e28:	0112      	lsls	r2, r2, #4
 8006e2a:	b2d2      	uxtb	r2, r2
 8006e2c:	440b      	add	r3, r1
 8006e2e:	761a      	strb	r2, [r3, #24]
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr
 8006e3c:	e000e100 	.word	0xe000e100
 8006e40:	e000ed00 	.word	0xe000ed00

08006e44 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006e44:	b580      	push	{r7, lr}
 8006e46:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006e48:	4b05      	ldr	r3, [pc, #20]	@ (8006e60 <SysTick_Handler+0x1c>)
 8006e4a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006e4c:	f001 fd82 	bl	8008954 <xTaskGetSchedulerState>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d001      	beq.n	8006e5a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006e56:	f002 fb77 	bl	8009548 <xPortSysTickHandler>
  }
}
 8006e5a:	bf00      	nop
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	e000e010 	.word	0xe000e010

08006e64 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006e64:	b580      	push	{r7, lr}
 8006e66:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006e68:	2100      	movs	r1, #0
 8006e6a:	f06f 0004 	mvn.w	r0, #4
 8006e6e:	f7ff ffbf 	bl	8006df0 <__NVIC_SetPriority>
#endif
}
 8006e72:	bf00      	nop
 8006e74:	bd80      	pop	{r7, pc}
	...

08006e78 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e7e:	f3ef 8305 	mrs	r3, IPSR
 8006e82:	603b      	str	r3, [r7, #0]
  return(result);
 8006e84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d003      	beq.n	8006e92 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006e8a:	f06f 0305 	mvn.w	r3, #5
 8006e8e:	607b      	str	r3, [r7, #4]
 8006e90:	e00c      	b.n	8006eac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006e92:	4b0a      	ldr	r3, [pc, #40]	@ (8006ebc <osKernelInitialize+0x44>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d105      	bne.n	8006ea6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006e9a:	4b08      	ldr	r3, [pc, #32]	@ (8006ebc <osKernelInitialize+0x44>)
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	607b      	str	r3, [r7, #4]
 8006ea4:	e002      	b.n	8006eac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006ea6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006eaa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006eac:	687b      	ldr	r3, [r7, #4]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	370c      	adds	r7, #12
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	200003ec 	.word	0x200003ec

08006ec0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ec6:	f3ef 8305 	mrs	r3, IPSR
 8006eca:	603b      	str	r3, [r7, #0]
  return(result);
 8006ecc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d003      	beq.n	8006eda <osKernelStart+0x1a>
    stat = osErrorISR;
 8006ed2:	f06f 0305 	mvn.w	r3, #5
 8006ed6:	607b      	str	r3, [r7, #4]
 8006ed8:	e010      	b.n	8006efc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006eda:	4b0b      	ldr	r3, [pc, #44]	@ (8006f08 <osKernelStart+0x48>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d109      	bne.n	8006ef6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006ee2:	f7ff ffbf 	bl	8006e64 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006ee6:	4b08      	ldr	r3, [pc, #32]	@ (8006f08 <osKernelStart+0x48>)
 8006ee8:	2202      	movs	r2, #2
 8006eea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006eec:	f001 f8ce 	bl	800808c <vTaskStartScheduler>
      stat = osOK;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	607b      	str	r3, [r7, #4]
 8006ef4:	e002      	b.n	8006efc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006ef6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006efa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006efc:	687b      	ldr	r3, [r7, #4]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3708      	adds	r7, #8
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	200003ec 	.word	0x200003ec

08006f0c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b08e      	sub	sp, #56	@ 0x38
 8006f10:	af04      	add	r7, sp, #16
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f1c:	f3ef 8305 	mrs	r3, IPSR
 8006f20:	617b      	str	r3, [r7, #20]
  return(result);
 8006f22:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d17e      	bne.n	8007026 <osThreadNew+0x11a>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d07b      	beq.n	8007026 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006f2e:	2380      	movs	r3, #128	@ 0x80
 8006f30:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006f32:	2318      	movs	r3, #24
 8006f34:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006f36:	2300      	movs	r3, #0
 8006f38:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006f3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006f3e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d045      	beq.n	8006fd2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d002      	beq.n	8006f54 <osThreadNew+0x48>
        name = attr->name;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d008      	beq.n	8006f7a <osThreadNew+0x6e>
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	2b38      	cmp	r3, #56	@ 0x38
 8006f6c:	d805      	bhi.n	8006f7a <osThreadNew+0x6e>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d001      	beq.n	8006f7e <osThreadNew+0x72>
        return (NULL);
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	e054      	b.n	8007028 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	695b      	ldr	r3, [r3, #20]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d003      	beq.n	8006f8e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	089b      	lsrs	r3, r3, #2
 8006f8c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00e      	beq.n	8006fb4 <osThreadNew+0xa8>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	2ba7      	cmp	r3, #167	@ 0xa7
 8006f9c:	d90a      	bls.n	8006fb4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d006      	beq.n	8006fb4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d002      	beq.n	8006fb4 <osThreadNew+0xa8>
        mem = 1;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	61bb      	str	r3, [r7, #24]
 8006fb2:	e010      	b.n	8006fd6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10c      	bne.n	8006fd6 <osThreadNew+0xca>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d108      	bne.n	8006fd6 <osThreadNew+0xca>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d104      	bne.n	8006fd6 <osThreadNew+0xca>
          mem = 0;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	61bb      	str	r3, [r7, #24]
 8006fd0:	e001      	b.n	8006fd6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d110      	bne.n	8006ffe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006fe4:	9202      	str	r2, [sp, #8]
 8006fe6:	9301      	str	r3, [sp, #4]
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	6a3a      	ldr	r2, [r7, #32]
 8006ff0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f000 fe56 	bl	8007ca4 <xTaskCreateStatic>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	613b      	str	r3, [r7, #16]
 8006ffc:	e013      	b.n	8007026 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d110      	bne.n	8007026 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007004:	6a3b      	ldr	r3, [r7, #32]
 8007006:	b29a      	uxth	r2, r3
 8007008:	f107 0310 	add.w	r3, r7, #16
 800700c:	9301      	str	r3, [sp, #4]
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	f000 fea4 	bl	8007d64 <xTaskCreate>
 800701c:	4603      	mov	r3, r0
 800701e:	2b01      	cmp	r3, #1
 8007020:	d001      	beq.n	8007026 <osThreadNew+0x11a>
            hTask = NULL;
 8007022:	2300      	movs	r3, #0
 8007024:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007026:	693b      	ldr	r3, [r7, #16]
}
 8007028:	4618      	mov	r0, r3
 800702a:	3728      	adds	r7, #40	@ 0x28
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007038:	f3ef 8305 	mrs	r3, IPSR
 800703c:	60bb      	str	r3, [r7, #8]
  return(result);
 800703e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007040:	2b00      	cmp	r3, #0
 8007042:	d003      	beq.n	800704c <osDelay+0x1c>
    stat = osErrorISR;
 8007044:	f06f 0305 	mvn.w	r3, #5
 8007048:	60fb      	str	r3, [r7, #12]
 800704a:	e007      	b.n	800705c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800704c:	2300      	movs	r3, #0
 800704e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d002      	beq.n	800705c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 ffe2 	bl	8008020 <vTaskDelay>
    }
  }

  return (stat);
 800705c:	68fb      	ldr	r3, [r7, #12]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
	...

08007068 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	4a07      	ldr	r2, [pc, #28]	@ (8007094 <vApplicationGetIdleTaskMemory+0x2c>)
 8007078:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	4a06      	ldr	r2, [pc, #24]	@ (8007098 <vApplicationGetIdleTaskMemory+0x30>)
 800707e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2280      	movs	r2, #128	@ 0x80
 8007084:	601a      	str	r2, [r3, #0]
}
 8007086:	bf00      	nop
 8007088:	3714      	adds	r7, #20
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	200003f0 	.word	0x200003f0
 8007098:	20000498 	.word	0x20000498

0800709c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	4a07      	ldr	r2, [pc, #28]	@ (80070c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80070ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	4a06      	ldr	r2, [pc, #24]	@ (80070cc <vApplicationGetTimerTaskMemory+0x30>)
 80070b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80070ba:	601a      	str	r2, [r3, #0]
}
 80070bc:	bf00      	nop
 80070be:	3714      	adds	r7, #20
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr
 80070c8:	20000698 	.word	0x20000698
 80070cc:	20000740 	.word	0x20000740

080070d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f103 0208 	add.w	r2, r3, #8
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80070e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f103 0208 	add.w	r2, r3, #8
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f103 0208 	add.w	r2, r3, #8
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007104:	bf00      	nop
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800711e:	bf00      	nop
 8007120:	370c      	adds	r7, #12
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800712a:	b480      	push	{r7}
 800712c:	b085      	sub	sp, #20
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
 8007132:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	689a      	ldr	r2, [r3, #8]
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	683a      	ldr	r2, [r7, #0]
 800714e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	683a      	ldr	r2, [r7, #0]
 8007154:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	1c5a      	adds	r2, r3, #1
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	601a      	str	r2, [r3, #0]
}
 8007166:	bf00      	nop
 8007168:	3714      	adds	r7, #20
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007172:	b480      	push	{r7}
 8007174:	b085      	sub	sp, #20
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
 800717a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007188:	d103      	bne.n	8007192 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	60fb      	str	r3, [r7, #12]
 8007190:	e00c      	b.n	80071ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	3308      	adds	r3, #8
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	e002      	b.n	80071a0 <vListInsert+0x2e>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	60fb      	str	r3, [r7, #12]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d2f6      	bcs.n	800719a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	685a      	ldr	r2, [r3, #4]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	683a      	ldr	r2, [r7, #0]
 80071ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	683a      	ldr	r2, [r7, #0]
 80071c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	1c5a      	adds	r2, r3, #1
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	601a      	str	r2, [r3, #0]
}
 80071d8:	bf00      	nop
 80071da:	3714      	adds	r7, #20
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	6892      	ldr	r2, [r2, #8]
 80071fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	6852      	ldr	r2, [r2, #4]
 8007204:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	429a      	cmp	r2, r3
 800720e:	d103      	bne.n	8007218 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	689a      	ldr	r2, [r3, #8]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	1e5a      	subs	r2, r3, #1
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
}
 800722c:	4618      	mov	r0, r3
 800722e:	3714      	adds	r7, #20
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10b      	bne.n	8007264 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800724c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800725e:	bf00      	nop
 8007260:	bf00      	nop
 8007262:	e7fd      	b.n	8007260 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007264:	f002 f8e0 	bl	8009428 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007270:	68f9      	ldr	r1, [r7, #12]
 8007272:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007274:	fb01 f303 	mul.w	r3, r1, r3
 8007278:	441a      	add	r2, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007294:	3b01      	subs	r3, #1
 8007296:	68f9      	ldr	r1, [r7, #12]
 8007298:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800729a:	fb01 f303 	mul.w	r3, r1, r3
 800729e:	441a      	add	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	22ff      	movs	r2, #255	@ 0xff
 80072a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	22ff      	movs	r2, #255	@ 0xff
 80072b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d114      	bne.n	80072e4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d01a      	beq.n	80072f8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	3310      	adds	r3, #16
 80072c6:	4618      	mov	r0, r3
 80072c8:	f001 f97e 	bl	80085c8 <xTaskRemoveFromEventList>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d012      	beq.n	80072f8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80072d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007308 <xQueueGenericReset+0xd0>)
 80072d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072d8:	601a      	str	r2, [r3, #0]
 80072da:	f3bf 8f4f 	dsb	sy
 80072de:	f3bf 8f6f 	isb	sy
 80072e2:	e009      	b.n	80072f8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	3310      	adds	r3, #16
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7ff fef1 	bl	80070d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	3324      	adds	r3, #36	@ 0x24
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7ff feec 	bl	80070d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80072f8:	f002 f8c8 	bl	800948c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80072fc:	2301      	movs	r3, #1
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	e000ed04 	.word	0xe000ed04

0800730c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800730c:	b580      	push	{r7, lr}
 800730e:	b08e      	sub	sp, #56	@ 0x38
 8007310:	af02      	add	r7, sp, #8
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
 8007318:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10b      	bne.n	8007338 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007332:	bf00      	nop
 8007334:	bf00      	nop
 8007336:	e7fd      	b.n	8007334 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10b      	bne.n	8007356 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800733e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007350:	bf00      	nop
 8007352:	bf00      	nop
 8007354:	e7fd      	b.n	8007352 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d002      	beq.n	8007362 <xQueueGenericCreateStatic+0x56>
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d001      	beq.n	8007366 <xQueueGenericCreateStatic+0x5a>
 8007362:	2301      	movs	r3, #1
 8007364:	e000      	b.n	8007368 <xQueueGenericCreateStatic+0x5c>
 8007366:	2300      	movs	r3, #0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10b      	bne.n	8007384 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800736c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007370:	f383 8811 	msr	BASEPRI, r3
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	623b      	str	r3, [r7, #32]
}
 800737e:	bf00      	nop
 8007380:	bf00      	nop
 8007382:	e7fd      	b.n	8007380 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d102      	bne.n	8007390 <xQueueGenericCreateStatic+0x84>
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d101      	bne.n	8007394 <xQueueGenericCreateStatic+0x88>
 8007390:	2301      	movs	r3, #1
 8007392:	e000      	b.n	8007396 <xQueueGenericCreateStatic+0x8a>
 8007394:	2300      	movs	r3, #0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10b      	bne.n	80073b2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800739a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800739e:	f383 8811 	msr	BASEPRI, r3
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	f3bf 8f4f 	dsb	sy
 80073aa:	61fb      	str	r3, [r7, #28]
}
 80073ac:	bf00      	nop
 80073ae:	bf00      	nop
 80073b0:	e7fd      	b.n	80073ae <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80073b2:	2350      	movs	r3, #80	@ 0x50
 80073b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2b50      	cmp	r3, #80	@ 0x50
 80073ba:	d00b      	beq.n	80073d4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80073bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c0:	f383 8811 	msr	BASEPRI, r3
 80073c4:	f3bf 8f6f 	isb	sy
 80073c8:	f3bf 8f4f 	dsb	sy
 80073cc:	61bb      	str	r3, [r7, #24]
}
 80073ce:	bf00      	nop
 80073d0:	bf00      	nop
 80073d2:	e7fd      	b.n	80073d0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80073d4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80073da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00d      	beq.n	80073fc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80073e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073e8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80073ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	4613      	mov	r3, r2
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	68b9      	ldr	r1, [r7, #8]
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f000 f840 	bl	800747c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80073fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80073fe:	4618      	mov	r0, r3
 8007400:	3730      	adds	r7, #48	@ 0x30
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007406:	b580      	push	{r7, lr}
 8007408:	b08a      	sub	sp, #40	@ 0x28
 800740a:	af02      	add	r7, sp, #8
 800740c:	60f8      	str	r0, [r7, #12]
 800740e:	60b9      	str	r1, [r7, #8]
 8007410:	4613      	mov	r3, r2
 8007412:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10b      	bne.n	8007432 <xQueueGenericCreate+0x2c>
	__asm volatile
 800741a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800741e:	f383 8811 	msr	BASEPRI, r3
 8007422:	f3bf 8f6f 	isb	sy
 8007426:	f3bf 8f4f 	dsb	sy
 800742a:	613b      	str	r3, [r7, #16]
}
 800742c:	bf00      	nop
 800742e:	bf00      	nop
 8007430:	e7fd      	b.n	800742e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	fb02 f303 	mul.w	r3, r2, r3
 800743a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	3350      	adds	r3, #80	@ 0x50
 8007440:	4618      	mov	r0, r3
 8007442:	f002 f913 	bl	800966c <pvPortMalloc>
 8007446:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d011      	beq.n	8007472 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	3350      	adds	r3, #80	@ 0x50
 8007456:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	2200      	movs	r2, #0
 800745c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007460:	79fa      	ldrb	r2, [r7, #7]
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	4613      	mov	r3, r2
 8007468:	697a      	ldr	r2, [r7, #20]
 800746a:	68b9      	ldr	r1, [r7, #8]
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f000 f805 	bl	800747c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007472:	69bb      	ldr	r3, [r7, #24]
	}
 8007474:	4618      	mov	r0, r3
 8007476:	3720      	adds	r7, #32
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
 8007488:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d103      	bne.n	8007498 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	69ba      	ldr	r2, [r7, #24]
 8007494:	601a      	str	r2, [r3, #0]
 8007496:	e002      	b.n	800749e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80074aa:	2101      	movs	r1, #1
 80074ac:	69b8      	ldr	r0, [r7, #24]
 80074ae:	f7ff fec3 	bl	8007238 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	78fa      	ldrb	r2, [r7, #3]
 80074b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80074ba:	bf00      	nop
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
	...

080074c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b08e      	sub	sp, #56	@ 0x38
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
 80074d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80074d2:	2300      	movs	r3, #0
 80074d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80074da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10b      	bne.n	80074f8 <xQueueGenericSend+0x34>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80074f2:	bf00      	nop
 80074f4:	bf00      	nop
 80074f6:	e7fd      	b.n	80074f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d103      	bne.n	8007506 <xQueueGenericSend+0x42>
 80074fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007502:	2b00      	cmp	r3, #0
 8007504:	d101      	bne.n	800750a <xQueueGenericSend+0x46>
 8007506:	2301      	movs	r3, #1
 8007508:	e000      	b.n	800750c <xQueueGenericSend+0x48>
 800750a:	2300      	movs	r3, #0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d10b      	bne.n	8007528 <xQueueGenericSend+0x64>
	__asm volatile
 8007510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007514:	f383 8811 	msr	BASEPRI, r3
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007522:	bf00      	nop
 8007524:	bf00      	nop
 8007526:	e7fd      	b.n	8007524 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	2b02      	cmp	r3, #2
 800752c:	d103      	bne.n	8007536 <xQueueGenericSend+0x72>
 800752e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007532:	2b01      	cmp	r3, #1
 8007534:	d101      	bne.n	800753a <xQueueGenericSend+0x76>
 8007536:	2301      	movs	r3, #1
 8007538:	e000      	b.n	800753c <xQueueGenericSend+0x78>
 800753a:	2300      	movs	r3, #0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10b      	bne.n	8007558 <xQueueGenericSend+0x94>
	__asm volatile
 8007540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007544:	f383 8811 	msr	BASEPRI, r3
 8007548:	f3bf 8f6f 	isb	sy
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	623b      	str	r3, [r7, #32]
}
 8007552:	bf00      	nop
 8007554:	bf00      	nop
 8007556:	e7fd      	b.n	8007554 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007558:	f001 f9fc 	bl	8008954 <xTaskGetSchedulerState>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d102      	bne.n	8007568 <xQueueGenericSend+0xa4>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d101      	bne.n	800756c <xQueueGenericSend+0xa8>
 8007568:	2301      	movs	r3, #1
 800756a:	e000      	b.n	800756e <xQueueGenericSend+0xaa>
 800756c:	2300      	movs	r3, #0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10b      	bne.n	800758a <xQueueGenericSend+0xc6>
	__asm volatile
 8007572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007576:	f383 8811 	msr	BASEPRI, r3
 800757a:	f3bf 8f6f 	isb	sy
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	61fb      	str	r3, [r7, #28]
}
 8007584:	bf00      	nop
 8007586:	bf00      	nop
 8007588:	e7fd      	b.n	8007586 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800758a:	f001 ff4d 	bl	8009428 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800758e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007590:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007596:	429a      	cmp	r2, r3
 8007598:	d302      	bcc.n	80075a0 <xQueueGenericSend+0xdc>
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	2b02      	cmp	r3, #2
 800759e:	d129      	bne.n	80075f4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075a0:	683a      	ldr	r2, [r7, #0]
 80075a2:	68b9      	ldr	r1, [r7, #8]
 80075a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80075a6:	f000 fa0f 	bl	80079c8 <prvCopyDataToQueue>
 80075aa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d010      	beq.n	80075d6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b6:	3324      	adds	r3, #36	@ 0x24
 80075b8:	4618      	mov	r0, r3
 80075ba:	f001 f805 	bl	80085c8 <xTaskRemoveFromEventList>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d013      	beq.n	80075ec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80075c4:	4b3f      	ldr	r3, [pc, #252]	@ (80076c4 <xQueueGenericSend+0x200>)
 80075c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075ca:	601a      	str	r2, [r3, #0]
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	f3bf 8f6f 	isb	sy
 80075d4:	e00a      	b.n	80075ec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80075d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d007      	beq.n	80075ec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80075dc:	4b39      	ldr	r3, [pc, #228]	@ (80076c4 <xQueueGenericSend+0x200>)
 80075de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	f3bf 8f4f 	dsb	sy
 80075e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80075ec:	f001 ff4e 	bl	800948c <vPortExitCritical>
				return pdPASS;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e063      	b.n	80076bc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d103      	bne.n	8007602 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80075fa:	f001 ff47 	bl	800948c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80075fe:	2300      	movs	r3, #0
 8007600:	e05c      	b.n	80076bc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007604:	2b00      	cmp	r3, #0
 8007606:	d106      	bne.n	8007616 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007608:	f107 0314 	add.w	r3, r7, #20
 800760c:	4618      	mov	r0, r3
 800760e:	f001 f83f 	bl	8008690 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007612:	2301      	movs	r3, #1
 8007614:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007616:	f001 ff39 	bl	800948c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800761a:	f000 fda7 	bl	800816c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800761e:	f001 ff03 	bl	8009428 <vPortEnterCritical>
 8007622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007624:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007628:	b25b      	sxtb	r3, r3
 800762a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800762e:	d103      	bne.n	8007638 <xQueueGenericSend+0x174>
 8007630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007632:	2200      	movs	r2, #0
 8007634:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800763a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800763e:	b25b      	sxtb	r3, r3
 8007640:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007644:	d103      	bne.n	800764e <xQueueGenericSend+0x18a>
 8007646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007648:	2200      	movs	r2, #0
 800764a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800764e:	f001 ff1d 	bl	800948c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007652:	1d3a      	adds	r2, r7, #4
 8007654:	f107 0314 	add.w	r3, r7, #20
 8007658:	4611      	mov	r1, r2
 800765a:	4618      	mov	r0, r3
 800765c:	f001 f82e 	bl	80086bc <xTaskCheckForTimeOut>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d124      	bne.n	80076b0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007666:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007668:	f000 faa6 	bl	8007bb8 <prvIsQueueFull>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d018      	beq.n	80076a4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007674:	3310      	adds	r3, #16
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	4611      	mov	r1, r2
 800767a:	4618      	mov	r0, r3
 800767c:	f000 ff52 	bl	8008524 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007680:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007682:	f000 fa31 	bl	8007ae8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007686:	f000 fd7f 	bl	8008188 <xTaskResumeAll>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	f47f af7c 	bne.w	800758a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007692:	4b0c      	ldr	r3, [pc, #48]	@ (80076c4 <xQueueGenericSend+0x200>)
 8007694:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007698:	601a      	str	r2, [r3, #0]
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	f3bf 8f6f 	isb	sy
 80076a2:	e772      	b.n	800758a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80076a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80076a6:	f000 fa1f 	bl	8007ae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076aa:	f000 fd6d 	bl	8008188 <xTaskResumeAll>
 80076ae:	e76c      	b.n	800758a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80076b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80076b2:	f000 fa19 	bl	8007ae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076b6:	f000 fd67 	bl	8008188 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80076ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3738      	adds	r7, #56	@ 0x38
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	e000ed04 	.word	0xe000ed04

080076c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b090      	sub	sp, #64	@ 0x40
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
 80076d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80076da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d10b      	bne.n	80076f8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80076e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e4:	f383 8811 	msr	BASEPRI, r3
 80076e8:	f3bf 8f6f 	isb	sy
 80076ec:	f3bf 8f4f 	dsb	sy
 80076f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80076f2:	bf00      	nop
 80076f4:	bf00      	nop
 80076f6:	e7fd      	b.n	80076f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d103      	bne.n	8007706 <xQueueGenericSendFromISR+0x3e>
 80076fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007702:	2b00      	cmp	r3, #0
 8007704:	d101      	bne.n	800770a <xQueueGenericSendFromISR+0x42>
 8007706:	2301      	movs	r3, #1
 8007708:	e000      	b.n	800770c <xQueueGenericSendFromISR+0x44>
 800770a:	2300      	movs	r3, #0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d10b      	bne.n	8007728 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007714:	f383 8811 	msr	BASEPRI, r3
 8007718:	f3bf 8f6f 	isb	sy
 800771c:	f3bf 8f4f 	dsb	sy
 8007720:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007722:	bf00      	nop
 8007724:	bf00      	nop
 8007726:	e7fd      	b.n	8007724 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	2b02      	cmp	r3, #2
 800772c:	d103      	bne.n	8007736 <xQueueGenericSendFromISR+0x6e>
 800772e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007730:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007732:	2b01      	cmp	r3, #1
 8007734:	d101      	bne.n	800773a <xQueueGenericSendFromISR+0x72>
 8007736:	2301      	movs	r3, #1
 8007738:	e000      	b.n	800773c <xQueueGenericSendFromISR+0x74>
 800773a:	2300      	movs	r3, #0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10b      	bne.n	8007758 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	623b      	str	r3, [r7, #32]
}
 8007752:	bf00      	nop
 8007754:	bf00      	nop
 8007756:	e7fd      	b.n	8007754 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007758:	f001 ff46 	bl	80095e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800775c:	f3ef 8211 	mrs	r2, BASEPRI
 8007760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	61fa      	str	r2, [r7, #28]
 8007772:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007774:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007776:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800777a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800777c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800777e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007780:	429a      	cmp	r2, r3
 8007782:	d302      	bcc.n	800778a <xQueueGenericSendFromISR+0xc2>
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	2b02      	cmp	r3, #2
 8007788:	d12f      	bne.n	80077ea <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800778a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800778c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007790:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007798:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800779a:	683a      	ldr	r2, [r7, #0]
 800779c:	68b9      	ldr	r1, [r7, #8]
 800779e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80077a0:	f000 f912 	bl	80079c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80077a4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80077a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077ac:	d112      	bne.n	80077d4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d016      	beq.n	80077e4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b8:	3324      	adds	r3, #36	@ 0x24
 80077ba:	4618      	mov	r0, r3
 80077bc:	f000 ff04 	bl	80085c8 <xTaskRemoveFromEventList>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00e      	beq.n	80077e4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00b      	beq.n	80077e4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	601a      	str	r2, [r3, #0]
 80077d2:	e007      	b.n	80077e4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80077d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80077d8:	3301      	adds	r3, #1
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	b25a      	sxtb	r2, r3
 80077de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80077e4:	2301      	movs	r3, #1
 80077e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80077e8:	e001      	b.n	80077ee <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80077ea:	2300      	movs	r3, #0
 80077ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077f0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80077f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3740      	adds	r7, #64	@ 0x40
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b08c      	sub	sp, #48	@ 0x30
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007810:	2300      	movs	r3, #0
 8007812:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800781a:	2b00      	cmp	r3, #0
 800781c:	d10b      	bne.n	8007836 <xQueueReceive+0x32>
	__asm volatile
 800781e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	623b      	str	r3, [r7, #32]
}
 8007830:	bf00      	nop
 8007832:	bf00      	nop
 8007834:	e7fd      	b.n	8007832 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d103      	bne.n	8007844 <xQueueReceive+0x40>
 800783c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800783e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007840:	2b00      	cmp	r3, #0
 8007842:	d101      	bne.n	8007848 <xQueueReceive+0x44>
 8007844:	2301      	movs	r3, #1
 8007846:	e000      	b.n	800784a <xQueueReceive+0x46>
 8007848:	2300      	movs	r3, #0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10b      	bne.n	8007866 <xQueueReceive+0x62>
	__asm volatile
 800784e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007852:	f383 8811 	msr	BASEPRI, r3
 8007856:	f3bf 8f6f 	isb	sy
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	61fb      	str	r3, [r7, #28]
}
 8007860:	bf00      	nop
 8007862:	bf00      	nop
 8007864:	e7fd      	b.n	8007862 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007866:	f001 f875 	bl	8008954 <xTaskGetSchedulerState>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d102      	bne.n	8007876 <xQueueReceive+0x72>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d101      	bne.n	800787a <xQueueReceive+0x76>
 8007876:	2301      	movs	r3, #1
 8007878:	e000      	b.n	800787c <xQueueReceive+0x78>
 800787a:	2300      	movs	r3, #0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d10b      	bne.n	8007898 <xQueueReceive+0x94>
	__asm volatile
 8007880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007884:	f383 8811 	msr	BASEPRI, r3
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	61bb      	str	r3, [r7, #24]
}
 8007892:	bf00      	nop
 8007894:	bf00      	nop
 8007896:	e7fd      	b.n	8007894 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007898:	f001 fdc6 	bl	8009428 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800789c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800789e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078a0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d01f      	beq.n	80078e8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80078a8:	68b9      	ldr	r1, [r7, #8]
 80078aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078ac:	f000 f8f6 	bl	8007a9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80078b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b2:	1e5a      	subs	r2, r3, #1
 80078b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00f      	beq.n	80078e0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c2:	3310      	adds	r3, #16
 80078c4:	4618      	mov	r0, r3
 80078c6:	f000 fe7f 	bl	80085c8 <xTaskRemoveFromEventList>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d007      	beq.n	80078e0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80078d0:	4b3c      	ldr	r3, [pc, #240]	@ (80079c4 <xQueueReceive+0x1c0>)
 80078d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078d6:	601a      	str	r2, [r3, #0]
 80078d8:	f3bf 8f4f 	dsb	sy
 80078dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80078e0:	f001 fdd4 	bl	800948c <vPortExitCritical>
				return pdPASS;
 80078e4:	2301      	movs	r3, #1
 80078e6:	e069      	b.n	80079bc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d103      	bne.n	80078f6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078ee:	f001 fdcd 	bl	800948c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80078f2:	2300      	movs	r3, #0
 80078f4:	e062      	b.n	80079bc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d106      	bne.n	800790a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078fc:	f107 0310 	add.w	r3, r7, #16
 8007900:	4618      	mov	r0, r3
 8007902:	f000 fec5 	bl	8008690 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007906:	2301      	movs	r3, #1
 8007908:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800790a:	f001 fdbf 	bl	800948c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800790e:	f000 fc2d 	bl	800816c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007912:	f001 fd89 	bl	8009428 <vPortEnterCritical>
 8007916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007918:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800791c:	b25b      	sxtb	r3, r3
 800791e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007922:	d103      	bne.n	800792c <xQueueReceive+0x128>
 8007924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007926:	2200      	movs	r2, #0
 8007928:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800792c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800792e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007932:	b25b      	sxtb	r3, r3
 8007934:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007938:	d103      	bne.n	8007942 <xQueueReceive+0x13e>
 800793a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800793c:	2200      	movs	r2, #0
 800793e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007942:	f001 fda3 	bl	800948c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007946:	1d3a      	adds	r2, r7, #4
 8007948:	f107 0310 	add.w	r3, r7, #16
 800794c:	4611      	mov	r1, r2
 800794e:	4618      	mov	r0, r3
 8007950:	f000 feb4 	bl	80086bc <xTaskCheckForTimeOut>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d123      	bne.n	80079a2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800795a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800795c:	f000 f916 	bl	8007b8c <prvIsQueueEmpty>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d017      	beq.n	8007996 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007968:	3324      	adds	r3, #36	@ 0x24
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	4611      	mov	r1, r2
 800796e:	4618      	mov	r0, r3
 8007970:	f000 fdd8 	bl	8008524 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007974:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007976:	f000 f8b7 	bl	8007ae8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800797a:	f000 fc05 	bl	8008188 <xTaskResumeAll>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d189      	bne.n	8007898 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007984:	4b0f      	ldr	r3, [pc, #60]	@ (80079c4 <xQueueReceive+0x1c0>)
 8007986:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800798a:	601a      	str	r2, [r3, #0]
 800798c:	f3bf 8f4f 	dsb	sy
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	e780      	b.n	8007898 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007996:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007998:	f000 f8a6 	bl	8007ae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800799c:	f000 fbf4 	bl	8008188 <xTaskResumeAll>
 80079a0:	e77a      	b.n	8007898 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80079a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079a4:	f000 f8a0 	bl	8007ae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079a8:	f000 fbee 	bl	8008188 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079ae:	f000 f8ed 	bl	8007b8c <prvIsQueueEmpty>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f43f af6f 	beq.w	8007898 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80079ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3730      	adds	r7, #48	@ 0x30
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	e000ed04 	.word	0xe000ed04

080079c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80079d4:	2300      	movs	r3, #0
 80079d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d10d      	bne.n	8007a02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d14d      	bne.n	8007a8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f000 ffcc 	bl	8008990 <xTaskPriorityDisinherit>
 80079f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2200      	movs	r2, #0
 80079fe:	609a      	str	r2, [r3, #8]
 8007a00:	e043      	b.n	8007a8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d119      	bne.n	8007a3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6858      	ldr	r0, [r3, #4]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a10:	461a      	mov	r2, r3
 8007a12:	68b9      	ldr	r1, [r7, #8]
 8007a14:	f002 ff5d 	bl	800a8d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a20:	441a      	add	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	685a      	ldr	r2, [r3, #4]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d32b      	bcc.n	8007a8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	605a      	str	r2, [r3, #4]
 8007a3a:	e026      	b.n	8007a8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	68d8      	ldr	r0, [r3, #12]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a44:	461a      	mov	r2, r3
 8007a46:	68b9      	ldr	r1, [r7, #8]
 8007a48:	f002 ff43 	bl	800a8d2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	68da      	ldr	r2, [r3, #12]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a54:	425b      	negs	r3, r3
 8007a56:	441a      	add	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	68da      	ldr	r2, [r3, #12]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d207      	bcs.n	8007a78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	689a      	ldr	r2, [r3, #8]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a70:	425b      	negs	r3, r3
 8007a72:	441a      	add	r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d105      	bne.n	8007a8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d002      	beq.n	8007a8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	3b01      	subs	r3, #1
 8007a88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	1c5a      	adds	r2, r3, #1
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007a92:	697b      	ldr	r3, [r7, #20]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3718      	adds	r7, #24
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d018      	beq.n	8007ae0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	68da      	ldr	r2, [r3, #12]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab6:	441a      	add	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	68da      	ldr	r2, [r3, #12]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d303      	bcc.n	8007ad0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	68d9      	ldr	r1, [r3, #12]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ad8:	461a      	mov	r2, r3
 8007ada:	6838      	ldr	r0, [r7, #0]
 8007adc:	f002 fef9 	bl	800a8d2 <memcpy>
	}
}
 8007ae0:	bf00      	nop
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007af0:	f001 fc9a 	bl	8009428 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007afa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007afc:	e011      	b.n	8007b22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d012      	beq.n	8007b2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	3324      	adds	r3, #36	@ 0x24
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 fd5c 	bl	80085c8 <xTaskRemoveFromEventList>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d001      	beq.n	8007b1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007b16:	f000 fe35 	bl	8008784 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007b1a:	7bfb      	ldrb	r3, [r7, #15]
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	dce9      	bgt.n	8007afe <prvUnlockQueue+0x16>
 8007b2a:	e000      	b.n	8007b2e <prvUnlockQueue+0x46>
					break;
 8007b2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	22ff      	movs	r2, #255	@ 0xff
 8007b32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007b36:	f001 fca9 	bl	800948c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007b3a:	f001 fc75 	bl	8009428 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b46:	e011      	b.n	8007b6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d012      	beq.n	8007b76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	3310      	adds	r3, #16
 8007b54:	4618      	mov	r0, r3
 8007b56:	f000 fd37 	bl	80085c8 <xTaskRemoveFromEventList>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d001      	beq.n	8007b64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007b60:	f000 fe10 	bl	8008784 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007b64:	7bbb      	ldrb	r3, [r7, #14]
 8007b66:	3b01      	subs	r3, #1
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	dce9      	bgt.n	8007b48 <prvUnlockQueue+0x60>
 8007b74:	e000      	b.n	8007b78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007b76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	22ff      	movs	r2, #255	@ 0xff
 8007b7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007b80:	f001 fc84 	bl	800948c <vPortExitCritical>
}
 8007b84:	bf00      	nop
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b94:	f001 fc48 	bl	8009428 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d102      	bne.n	8007ba6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	60fb      	str	r3, [r7, #12]
 8007ba4:	e001      	b.n	8007baa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007baa:	f001 fc6f 	bl	800948c <vPortExitCritical>

	return xReturn;
 8007bae:	68fb      	ldr	r3, [r7, #12]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007bc0:	f001 fc32 	bl	8009428 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d102      	bne.n	8007bd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	60fb      	str	r3, [r7, #12]
 8007bd4:	e001      	b.n	8007bda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007bda:	f001 fc57 	bl	800948c <vPortExitCritical>

	return xReturn;
 8007bde:	68fb      	ldr	r3, [r7, #12]
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007be8:	b480      	push	{r7}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	60fb      	str	r3, [r7, #12]
 8007bf6:	e014      	b.n	8007c22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007bf8:	4a0f      	ldr	r2, [pc, #60]	@ (8007c38 <vQueueAddToRegistry+0x50>)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d10b      	bne.n	8007c1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007c04:	490c      	ldr	r1, [pc, #48]	@ (8007c38 <vQueueAddToRegistry+0x50>)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	683a      	ldr	r2, [r7, #0]
 8007c0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8007c38 <vQueueAddToRegistry+0x50>)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	00db      	lsls	r3, r3, #3
 8007c14:	4413      	add	r3, r2
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007c1a:	e006      	b.n	8007c2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	60fb      	str	r3, [r7, #12]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2b07      	cmp	r3, #7
 8007c26:	d9e7      	bls.n	8007bf8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007c28:	bf00      	nop
 8007c2a:	bf00      	nop
 8007c2c:	3714      	adds	r7, #20
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	20000b40 	.word	0x20000b40

08007c3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b086      	sub	sp, #24
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007c4c:	f001 fbec 	bl	8009428 <vPortEnterCritical>
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c56:	b25b      	sxtb	r3, r3
 8007c58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c5c:	d103      	bne.n	8007c66 <vQueueWaitForMessageRestricted+0x2a>
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c6c:	b25b      	sxtb	r3, r3
 8007c6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c72:	d103      	bne.n	8007c7c <vQueueWaitForMessageRestricted+0x40>
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c7c:	f001 fc06 	bl	800948c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d106      	bne.n	8007c96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	3324      	adds	r3, #36	@ 0x24
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	68b9      	ldr	r1, [r7, #8]
 8007c90:	4618      	mov	r0, r3
 8007c92:	f000 fc6d 	bl	8008570 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007c96:	6978      	ldr	r0, [r7, #20]
 8007c98:	f7ff ff26 	bl	8007ae8 <prvUnlockQueue>
	}
 8007c9c:	bf00      	nop
 8007c9e:	3718      	adds	r7, #24
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b08e      	sub	sp, #56	@ 0x38
 8007ca8:	af04      	add	r7, sp, #16
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
 8007cb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10b      	bne.n	8007cd0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	623b      	str	r3, [r7, #32]
}
 8007cca:	bf00      	nop
 8007ccc:	bf00      	nop
 8007cce:	e7fd      	b.n	8007ccc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d10b      	bne.n	8007cee <xTaskCreateStatic+0x4a>
	__asm volatile
 8007cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cda:	f383 8811 	msr	BASEPRI, r3
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	f3bf 8f4f 	dsb	sy
 8007ce6:	61fb      	str	r3, [r7, #28]
}
 8007ce8:	bf00      	nop
 8007cea:	bf00      	nop
 8007cec:	e7fd      	b.n	8007cea <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007cee:	23a8      	movs	r3, #168	@ 0xa8
 8007cf0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	2ba8      	cmp	r3, #168	@ 0xa8
 8007cf6:	d00b      	beq.n	8007d10 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cfc:	f383 8811 	msr	BASEPRI, r3
 8007d00:	f3bf 8f6f 	isb	sy
 8007d04:	f3bf 8f4f 	dsb	sy
 8007d08:	61bb      	str	r3, [r7, #24]
}
 8007d0a:	bf00      	nop
 8007d0c:	bf00      	nop
 8007d0e:	e7fd      	b.n	8007d0c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007d10:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d01e      	beq.n	8007d56 <xTaskCreateStatic+0xb2>
 8007d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d01b      	beq.n	8007d56 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d20:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d26:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d2a:	2202      	movs	r2, #2
 8007d2c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007d30:	2300      	movs	r3, #0
 8007d32:	9303      	str	r3, [sp, #12]
 8007d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d36:	9302      	str	r3, [sp, #8]
 8007d38:	f107 0314 	add.w	r3, r7, #20
 8007d3c:	9301      	str	r3, [sp, #4]
 8007d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d40:	9300      	str	r3, [sp, #0]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	68b9      	ldr	r1, [r7, #8]
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f000 f851 	bl	8007df0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007d50:	f000 f8f6 	bl	8007f40 <prvAddNewTaskToReadyList>
 8007d54:	e001      	b.n	8007d5a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007d56:	2300      	movs	r3, #0
 8007d58:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007d5a:	697b      	ldr	r3, [r7, #20]
	}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3728      	adds	r7, #40	@ 0x28
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b08c      	sub	sp, #48	@ 0x30
 8007d68:	af04      	add	r7, sp, #16
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	603b      	str	r3, [r7, #0]
 8007d70:	4613      	mov	r3, r2
 8007d72:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d74:	88fb      	ldrh	r3, [r7, #6]
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f001 fc77 	bl	800966c <pvPortMalloc>
 8007d7e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00e      	beq.n	8007da4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007d86:	20a8      	movs	r0, #168	@ 0xa8
 8007d88:	f001 fc70 	bl	800966c <pvPortMalloc>
 8007d8c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d003      	beq.n	8007d9c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	697a      	ldr	r2, [r7, #20]
 8007d98:	631a      	str	r2, [r3, #48]	@ 0x30
 8007d9a:	e005      	b.n	8007da8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007d9c:	6978      	ldr	r0, [r7, #20]
 8007d9e:	f001 fd33 	bl	8009808 <vPortFree>
 8007da2:	e001      	b.n	8007da8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007da4:	2300      	movs	r3, #0
 8007da6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d017      	beq.n	8007dde <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007db6:	88fa      	ldrh	r2, [r7, #6]
 8007db8:	2300      	movs	r3, #0
 8007dba:	9303      	str	r3, [sp, #12]
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	9302      	str	r3, [sp, #8]
 8007dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dc2:	9301      	str	r3, [sp, #4]
 8007dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	68b9      	ldr	r1, [r7, #8]
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f000 f80f 	bl	8007df0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007dd2:	69f8      	ldr	r0, [r7, #28]
 8007dd4:	f000 f8b4 	bl	8007f40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	61bb      	str	r3, [r7, #24]
 8007ddc:	e002      	b.n	8007de4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007dde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007de2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007de4:	69bb      	ldr	r3, [r7, #24]
	}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3720      	adds	r7, #32
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
	...

08007df0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b088      	sub	sp, #32
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
 8007dfc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e00:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	461a      	mov	r2, r3
 8007e08:	21a5      	movs	r1, #165	@ 0xa5
 8007e0a:	f002 fc85 	bl	800a718 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	4413      	add	r3, r2
 8007e1e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	f023 0307 	bic.w	r3, r3, #7
 8007e26:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	f003 0307 	and.w	r3, r3, #7
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00b      	beq.n	8007e4a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e36:	f383 8811 	msr	BASEPRI, r3
 8007e3a:	f3bf 8f6f 	isb	sy
 8007e3e:	f3bf 8f4f 	dsb	sy
 8007e42:	617b      	str	r3, [r7, #20]
}
 8007e44:	bf00      	nop
 8007e46:	bf00      	nop
 8007e48:	e7fd      	b.n	8007e46 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d01f      	beq.n	8007e90 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e50:	2300      	movs	r3, #0
 8007e52:	61fb      	str	r3, [r7, #28]
 8007e54:	e012      	b.n	8007e7c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007e56:	68ba      	ldr	r2, [r7, #8]
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	7819      	ldrb	r1, [r3, #0]
 8007e5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	4413      	add	r3, r2
 8007e64:	3334      	adds	r3, #52	@ 0x34
 8007e66:	460a      	mov	r2, r1
 8007e68:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007e6a:	68ba      	ldr	r2, [r7, #8]
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	4413      	add	r3, r2
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d006      	beq.n	8007e84 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	61fb      	str	r3, [r7, #28]
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	2b0f      	cmp	r3, #15
 8007e80:	d9e9      	bls.n	8007e56 <prvInitialiseNewTask+0x66>
 8007e82:	e000      	b.n	8007e86 <prvInitialiseNewTask+0x96>
			{
				break;
 8007e84:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e8e:	e003      	b.n	8007e98 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e9a:	2b37      	cmp	r3, #55	@ 0x37
 8007e9c:	d901      	bls.n	8007ea2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007e9e:	2337      	movs	r3, #55	@ 0x37
 8007ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007eac:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb6:	3304      	adds	r3, #4
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7ff f929 	bl	8007110 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec0:	3318      	adds	r3, #24
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7ff f924 	bl	8007110 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ecc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007edc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef0:	3354      	adds	r3, #84	@ 0x54
 8007ef2:	224c      	movs	r2, #76	@ 0x4c
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f002 fc0e 	bl	800a718 <memset>
 8007efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007efe:	4a0d      	ldr	r2, [pc, #52]	@ (8007f34 <prvInitialiseNewTask+0x144>)
 8007f00:	659a      	str	r2, [r3, #88]	@ 0x58
 8007f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f04:	4a0c      	ldr	r2, [pc, #48]	@ (8007f38 <prvInitialiseNewTask+0x148>)
 8007f06:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f0a:	4a0c      	ldr	r2, [pc, #48]	@ (8007f3c <prvInitialiseNewTask+0x14c>)
 8007f0c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007f0e:	683a      	ldr	r2, [r7, #0]
 8007f10:	68f9      	ldr	r1, [r7, #12]
 8007f12:	69b8      	ldr	r0, [r7, #24]
 8007f14:	f001 f95a 	bl	80091cc <pxPortInitialiseStack>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d002      	beq.n	8007f2a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f2a:	bf00      	nop
 8007f2c:	3720      	adds	r7, #32
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	20001dd4 	.word	0x20001dd4
 8007f38:	20001e3c 	.word	0x20001e3c
 8007f3c:	20001ea4 	.word	0x20001ea4

08007f40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007f48:	f001 fa6e 	bl	8009428 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007f4c:	4b2d      	ldr	r3, [pc, #180]	@ (8008004 <prvAddNewTaskToReadyList+0xc4>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	3301      	adds	r3, #1
 8007f52:	4a2c      	ldr	r2, [pc, #176]	@ (8008004 <prvAddNewTaskToReadyList+0xc4>)
 8007f54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007f56:	4b2c      	ldr	r3, [pc, #176]	@ (8008008 <prvAddNewTaskToReadyList+0xc8>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d109      	bne.n	8007f72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007f5e:	4a2a      	ldr	r2, [pc, #168]	@ (8008008 <prvAddNewTaskToReadyList+0xc8>)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f64:	4b27      	ldr	r3, [pc, #156]	@ (8008004 <prvAddNewTaskToReadyList+0xc4>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d110      	bne.n	8007f8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007f6c:	f000 fc2e 	bl	80087cc <prvInitialiseTaskLists>
 8007f70:	e00d      	b.n	8007f8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007f72:	4b26      	ldr	r3, [pc, #152]	@ (800800c <prvAddNewTaskToReadyList+0xcc>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d109      	bne.n	8007f8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f7a:	4b23      	ldr	r3, [pc, #140]	@ (8008008 <prvAddNewTaskToReadyList+0xc8>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d802      	bhi.n	8007f8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007f88:	4a1f      	ldr	r2, [pc, #124]	@ (8008008 <prvAddNewTaskToReadyList+0xc8>)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007f8e:	4b20      	ldr	r3, [pc, #128]	@ (8008010 <prvAddNewTaskToReadyList+0xd0>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	3301      	adds	r3, #1
 8007f94:	4a1e      	ldr	r2, [pc, #120]	@ (8008010 <prvAddNewTaskToReadyList+0xd0>)
 8007f96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007f98:	4b1d      	ldr	r3, [pc, #116]	@ (8008010 <prvAddNewTaskToReadyList+0xd0>)
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8008014 <prvAddNewTaskToReadyList+0xd4>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d903      	bls.n	8007fb4 <prvAddNewTaskToReadyList+0x74>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fb0:	4a18      	ldr	r2, [pc, #96]	@ (8008014 <prvAddNewTaskToReadyList+0xd4>)
 8007fb2:	6013      	str	r3, [r2, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fb8:	4613      	mov	r3, r2
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	4413      	add	r3, r2
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	4a15      	ldr	r2, [pc, #84]	@ (8008018 <prvAddNewTaskToReadyList+0xd8>)
 8007fc2:	441a      	add	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	3304      	adds	r3, #4
 8007fc8:	4619      	mov	r1, r3
 8007fca:	4610      	mov	r0, r2
 8007fcc:	f7ff f8ad 	bl	800712a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007fd0:	f001 fa5c 	bl	800948c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800800c <prvAddNewTaskToReadyList+0xcc>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00e      	beq.n	8007ffa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8008008 <prvAddNewTaskToReadyList+0xc8>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d207      	bcs.n	8007ffa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007fea:	4b0c      	ldr	r3, [pc, #48]	@ (800801c <prvAddNewTaskToReadyList+0xdc>)
 8007fec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ff0:	601a      	str	r2, [r3, #0]
 8007ff2:	f3bf 8f4f 	dsb	sy
 8007ff6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ffa:	bf00      	nop
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	20001054 	.word	0x20001054
 8008008:	20000b80 	.word	0x20000b80
 800800c:	20001060 	.word	0x20001060
 8008010:	20001070 	.word	0x20001070
 8008014:	2000105c 	.word	0x2000105c
 8008018:	20000b84 	.word	0x20000b84
 800801c:	e000ed04 	.word	0xe000ed04

08008020 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008028:	2300      	movs	r3, #0
 800802a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d018      	beq.n	8008064 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008032:	4b14      	ldr	r3, [pc, #80]	@ (8008084 <vTaskDelay+0x64>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d00b      	beq.n	8008052 <vTaskDelay+0x32>
	__asm volatile
 800803a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800803e:	f383 8811 	msr	BASEPRI, r3
 8008042:	f3bf 8f6f 	isb	sy
 8008046:	f3bf 8f4f 	dsb	sy
 800804a:	60bb      	str	r3, [r7, #8]
}
 800804c:	bf00      	nop
 800804e:	bf00      	nop
 8008050:	e7fd      	b.n	800804e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008052:	f000 f88b 	bl	800816c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008056:	2100      	movs	r1, #0
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 fd09 	bl	8008a70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800805e:	f000 f893 	bl	8008188 <xTaskResumeAll>
 8008062:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d107      	bne.n	800807a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800806a:	4b07      	ldr	r3, [pc, #28]	@ (8008088 <vTaskDelay+0x68>)
 800806c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008070:	601a      	str	r2, [r3, #0]
 8008072:	f3bf 8f4f 	dsb	sy
 8008076:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800807a:	bf00      	nop
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	2000107c 	.word	0x2000107c
 8008088:	e000ed04 	.word	0xe000ed04

0800808c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b08a      	sub	sp, #40	@ 0x28
 8008090:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008092:	2300      	movs	r3, #0
 8008094:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008096:	2300      	movs	r3, #0
 8008098:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800809a:	463a      	mov	r2, r7
 800809c:	1d39      	adds	r1, r7, #4
 800809e:	f107 0308 	add.w	r3, r7, #8
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fe ffe0 	bl	8007068 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80080a8:	6839      	ldr	r1, [r7, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	9202      	str	r2, [sp, #8]
 80080b0:	9301      	str	r3, [sp, #4]
 80080b2:	2300      	movs	r3, #0
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	2300      	movs	r3, #0
 80080b8:	460a      	mov	r2, r1
 80080ba:	4924      	ldr	r1, [pc, #144]	@ (800814c <vTaskStartScheduler+0xc0>)
 80080bc:	4824      	ldr	r0, [pc, #144]	@ (8008150 <vTaskStartScheduler+0xc4>)
 80080be:	f7ff fdf1 	bl	8007ca4 <xTaskCreateStatic>
 80080c2:	4603      	mov	r3, r0
 80080c4:	4a23      	ldr	r2, [pc, #140]	@ (8008154 <vTaskStartScheduler+0xc8>)
 80080c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80080c8:	4b22      	ldr	r3, [pc, #136]	@ (8008154 <vTaskStartScheduler+0xc8>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d002      	beq.n	80080d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80080d0:	2301      	movs	r3, #1
 80080d2:	617b      	str	r3, [r7, #20]
 80080d4:	e001      	b.n	80080da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80080d6:	2300      	movs	r3, #0
 80080d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d102      	bne.n	80080e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80080e0:	f000 fd1a 	bl	8008b18 <xTimerCreateTimerTask>
 80080e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d11b      	bne.n	8008124 <vTaskStartScheduler+0x98>
	__asm volatile
 80080ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f0:	f383 8811 	msr	BASEPRI, r3
 80080f4:	f3bf 8f6f 	isb	sy
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	613b      	str	r3, [r7, #16]
}
 80080fe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008100:	4b15      	ldr	r3, [pc, #84]	@ (8008158 <vTaskStartScheduler+0xcc>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	3354      	adds	r3, #84	@ 0x54
 8008106:	4a15      	ldr	r2, [pc, #84]	@ (800815c <vTaskStartScheduler+0xd0>)
 8008108:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800810a:	4b15      	ldr	r3, [pc, #84]	@ (8008160 <vTaskStartScheduler+0xd4>)
 800810c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008110:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008112:	4b14      	ldr	r3, [pc, #80]	@ (8008164 <vTaskStartScheduler+0xd8>)
 8008114:	2201      	movs	r2, #1
 8008116:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008118:	4b13      	ldr	r3, [pc, #76]	@ (8008168 <vTaskStartScheduler+0xdc>)
 800811a:	2200      	movs	r2, #0
 800811c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800811e:	f001 f8df 	bl	80092e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008122:	e00f      	b.n	8008144 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800812a:	d10b      	bne.n	8008144 <vTaskStartScheduler+0xb8>
	__asm volatile
 800812c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	60fb      	str	r3, [r7, #12]
}
 800813e:	bf00      	nop
 8008140:	bf00      	nop
 8008142:	e7fd      	b.n	8008140 <vTaskStartScheduler+0xb4>
}
 8008144:	bf00      	nop
 8008146:	3718      	adds	r7, #24
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	0800c890 	.word	0x0800c890
 8008150:	0800879d 	.word	0x0800879d
 8008154:	20001078 	.word	0x20001078
 8008158:	20000b80 	.word	0x20000b80
 800815c:	20000030 	.word	0x20000030
 8008160:	20001074 	.word	0x20001074
 8008164:	20001060 	.word	0x20001060
 8008168:	20001058 	.word	0x20001058

0800816c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800816c:	b480      	push	{r7}
 800816e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008170:	4b04      	ldr	r3, [pc, #16]	@ (8008184 <vTaskSuspendAll+0x18>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	3301      	adds	r3, #1
 8008176:	4a03      	ldr	r2, [pc, #12]	@ (8008184 <vTaskSuspendAll+0x18>)
 8008178:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800817a:	bf00      	nop
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr
 8008184:	2000107c 	.word	0x2000107c

08008188 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800818e:	2300      	movs	r3, #0
 8008190:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008192:	2300      	movs	r3, #0
 8008194:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008196:	4b42      	ldr	r3, [pc, #264]	@ (80082a0 <xTaskResumeAll+0x118>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d10b      	bne.n	80081b6 <xTaskResumeAll+0x2e>
	__asm volatile
 800819e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a2:	f383 8811 	msr	BASEPRI, r3
 80081a6:	f3bf 8f6f 	isb	sy
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	603b      	str	r3, [r7, #0]
}
 80081b0:	bf00      	nop
 80081b2:	bf00      	nop
 80081b4:	e7fd      	b.n	80081b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80081b6:	f001 f937 	bl	8009428 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80081ba:	4b39      	ldr	r3, [pc, #228]	@ (80082a0 <xTaskResumeAll+0x118>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	3b01      	subs	r3, #1
 80081c0:	4a37      	ldr	r2, [pc, #220]	@ (80082a0 <xTaskResumeAll+0x118>)
 80081c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081c4:	4b36      	ldr	r3, [pc, #216]	@ (80082a0 <xTaskResumeAll+0x118>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d162      	bne.n	8008292 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80081cc:	4b35      	ldr	r3, [pc, #212]	@ (80082a4 <xTaskResumeAll+0x11c>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d05e      	beq.n	8008292 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081d4:	e02f      	b.n	8008236 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081d6:	4b34      	ldr	r3, [pc, #208]	@ (80082a8 <xTaskResumeAll+0x120>)
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	3318      	adds	r3, #24
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7fe fffe 	bl	80071e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	3304      	adds	r3, #4
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7fe fff9 	bl	80071e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081f6:	4b2d      	ldr	r3, [pc, #180]	@ (80082ac <xTaskResumeAll+0x124>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d903      	bls.n	8008206 <xTaskResumeAll+0x7e>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008202:	4a2a      	ldr	r2, [pc, #168]	@ (80082ac <xTaskResumeAll+0x124>)
 8008204:	6013      	str	r3, [r2, #0]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800820a:	4613      	mov	r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	4413      	add	r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4a27      	ldr	r2, [pc, #156]	@ (80082b0 <xTaskResumeAll+0x128>)
 8008214:	441a      	add	r2, r3
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	3304      	adds	r3, #4
 800821a:	4619      	mov	r1, r3
 800821c:	4610      	mov	r0, r2
 800821e:	f7fe ff84 	bl	800712a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008226:	4b23      	ldr	r3, [pc, #140]	@ (80082b4 <xTaskResumeAll+0x12c>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800822c:	429a      	cmp	r2, r3
 800822e:	d302      	bcc.n	8008236 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008230:	4b21      	ldr	r3, [pc, #132]	@ (80082b8 <xTaskResumeAll+0x130>)
 8008232:	2201      	movs	r2, #1
 8008234:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008236:	4b1c      	ldr	r3, [pc, #112]	@ (80082a8 <xTaskResumeAll+0x120>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1cb      	bne.n	80081d6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d001      	beq.n	8008248 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008244:	f000 fb66 	bl	8008914 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008248:	4b1c      	ldr	r3, [pc, #112]	@ (80082bc <xTaskResumeAll+0x134>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d010      	beq.n	8008276 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008254:	f000 f846 	bl	80082e4 <xTaskIncrementTick>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d002      	beq.n	8008264 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800825e:	4b16      	ldr	r3, [pc, #88]	@ (80082b8 <xTaskResumeAll+0x130>)
 8008260:	2201      	movs	r2, #1
 8008262:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	3b01      	subs	r3, #1
 8008268:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1f1      	bne.n	8008254 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008270:	4b12      	ldr	r3, [pc, #72]	@ (80082bc <xTaskResumeAll+0x134>)
 8008272:	2200      	movs	r2, #0
 8008274:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008276:	4b10      	ldr	r3, [pc, #64]	@ (80082b8 <xTaskResumeAll+0x130>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d009      	beq.n	8008292 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800827e:	2301      	movs	r3, #1
 8008280:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008282:	4b0f      	ldr	r3, [pc, #60]	@ (80082c0 <xTaskResumeAll+0x138>)
 8008284:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008288:	601a      	str	r2, [r3, #0]
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008292:	f001 f8fb 	bl	800948c <vPortExitCritical>

	return xAlreadyYielded;
 8008296:	68bb      	ldr	r3, [r7, #8]
}
 8008298:	4618      	mov	r0, r3
 800829a:	3710      	adds	r7, #16
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	2000107c 	.word	0x2000107c
 80082a4:	20001054 	.word	0x20001054
 80082a8:	20001014 	.word	0x20001014
 80082ac:	2000105c 	.word	0x2000105c
 80082b0:	20000b84 	.word	0x20000b84
 80082b4:	20000b80 	.word	0x20000b80
 80082b8:	20001068 	.word	0x20001068
 80082bc:	20001064 	.word	0x20001064
 80082c0:	e000ed04 	.word	0xe000ed04

080082c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80082ca:	4b05      	ldr	r3, [pc, #20]	@ (80082e0 <xTaskGetTickCount+0x1c>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80082d0:	687b      	ldr	r3, [r7, #4]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	20001058 	.word	0x20001058

080082e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b086      	sub	sp, #24
 80082e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80082ea:	2300      	movs	r3, #0
 80082ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082ee:	4b4f      	ldr	r3, [pc, #316]	@ (800842c <xTaskIncrementTick+0x148>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f040 8090 	bne.w	8008418 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80082f8:	4b4d      	ldr	r3, [pc, #308]	@ (8008430 <xTaskIncrementTick+0x14c>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	3301      	adds	r3, #1
 80082fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008300:	4a4b      	ldr	r2, [pc, #300]	@ (8008430 <xTaskIncrementTick+0x14c>)
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d121      	bne.n	8008350 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800830c:	4b49      	ldr	r3, [pc, #292]	@ (8008434 <xTaskIncrementTick+0x150>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00b      	beq.n	800832e <xTaskIncrementTick+0x4a>
	__asm volatile
 8008316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800831a:	f383 8811 	msr	BASEPRI, r3
 800831e:	f3bf 8f6f 	isb	sy
 8008322:	f3bf 8f4f 	dsb	sy
 8008326:	603b      	str	r3, [r7, #0]
}
 8008328:	bf00      	nop
 800832a:	bf00      	nop
 800832c:	e7fd      	b.n	800832a <xTaskIncrementTick+0x46>
 800832e:	4b41      	ldr	r3, [pc, #260]	@ (8008434 <xTaskIncrementTick+0x150>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	60fb      	str	r3, [r7, #12]
 8008334:	4b40      	ldr	r3, [pc, #256]	@ (8008438 <xTaskIncrementTick+0x154>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a3e      	ldr	r2, [pc, #248]	@ (8008434 <xTaskIncrementTick+0x150>)
 800833a:	6013      	str	r3, [r2, #0]
 800833c:	4a3e      	ldr	r2, [pc, #248]	@ (8008438 <xTaskIncrementTick+0x154>)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6013      	str	r3, [r2, #0]
 8008342:	4b3e      	ldr	r3, [pc, #248]	@ (800843c <xTaskIncrementTick+0x158>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	3301      	adds	r3, #1
 8008348:	4a3c      	ldr	r2, [pc, #240]	@ (800843c <xTaskIncrementTick+0x158>)
 800834a:	6013      	str	r3, [r2, #0]
 800834c:	f000 fae2 	bl	8008914 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008350:	4b3b      	ldr	r3, [pc, #236]	@ (8008440 <xTaskIncrementTick+0x15c>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	693a      	ldr	r2, [r7, #16]
 8008356:	429a      	cmp	r2, r3
 8008358:	d349      	bcc.n	80083ee <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800835a:	4b36      	ldr	r3, [pc, #216]	@ (8008434 <xTaskIncrementTick+0x150>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d104      	bne.n	800836e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008364:	4b36      	ldr	r3, [pc, #216]	@ (8008440 <xTaskIncrementTick+0x15c>)
 8008366:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800836a:	601a      	str	r2, [r3, #0]
					break;
 800836c:	e03f      	b.n	80083ee <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800836e:	4b31      	ldr	r3, [pc, #196]	@ (8008434 <xTaskIncrementTick+0x150>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800837e:	693a      	ldr	r2, [r7, #16]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	429a      	cmp	r2, r3
 8008384:	d203      	bcs.n	800838e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008386:	4a2e      	ldr	r2, [pc, #184]	@ (8008440 <xTaskIncrementTick+0x15c>)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800838c:	e02f      	b.n	80083ee <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	3304      	adds	r3, #4
 8008392:	4618      	mov	r0, r3
 8008394:	f7fe ff26 	bl	80071e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800839c:	2b00      	cmp	r3, #0
 800839e:	d004      	beq.n	80083aa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	3318      	adds	r3, #24
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7fe ff1d 	bl	80071e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083ae:	4b25      	ldr	r3, [pc, #148]	@ (8008444 <xTaskIncrementTick+0x160>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d903      	bls.n	80083be <xTaskIncrementTick+0xda>
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ba:	4a22      	ldr	r2, [pc, #136]	@ (8008444 <xTaskIncrementTick+0x160>)
 80083bc:	6013      	str	r3, [r2, #0]
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083c2:	4613      	mov	r3, r2
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	4413      	add	r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	4a1f      	ldr	r2, [pc, #124]	@ (8008448 <xTaskIncrementTick+0x164>)
 80083cc:	441a      	add	r2, r3
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	3304      	adds	r3, #4
 80083d2:	4619      	mov	r1, r3
 80083d4:	4610      	mov	r0, r2
 80083d6:	f7fe fea8 	bl	800712a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083de:	4b1b      	ldr	r3, [pc, #108]	@ (800844c <xTaskIncrementTick+0x168>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d3b8      	bcc.n	800835a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80083e8:	2301      	movs	r3, #1
 80083ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083ec:	e7b5      	b.n	800835a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80083ee:	4b17      	ldr	r3, [pc, #92]	@ (800844c <xTaskIncrementTick+0x168>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083f4:	4914      	ldr	r1, [pc, #80]	@ (8008448 <xTaskIncrementTick+0x164>)
 80083f6:	4613      	mov	r3, r2
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	4413      	add	r3, r2
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	440b      	add	r3, r1
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d901      	bls.n	800840a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008406:	2301      	movs	r3, #1
 8008408:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800840a:	4b11      	ldr	r3, [pc, #68]	@ (8008450 <xTaskIncrementTick+0x16c>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d007      	beq.n	8008422 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008412:	2301      	movs	r3, #1
 8008414:	617b      	str	r3, [r7, #20]
 8008416:	e004      	b.n	8008422 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008418:	4b0e      	ldr	r3, [pc, #56]	@ (8008454 <xTaskIncrementTick+0x170>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	3301      	adds	r3, #1
 800841e:	4a0d      	ldr	r2, [pc, #52]	@ (8008454 <xTaskIncrementTick+0x170>)
 8008420:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008422:	697b      	ldr	r3, [r7, #20]
}
 8008424:	4618      	mov	r0, r3
 8008426:	3718      	adds	r7, #24
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	2000107c 	.word	0x2000107c
 8008430:	20001058 	.word	0x20001058
 8008434:	2000100c 	.word	0x2000100c
 8008438:	20001010 	.word	0x20001010
 800843c:	2000106c 	.word	0x2000106c
 8008440:	20001074 	.word	0x20001074
 8008444:	2000105c 	.word	0x2000105c
 8008448:	20000b84 	.word	0x20000b84
 800844c:	20000b80 	.word	0x20000b80
 8008450:	20001068 	.word	0x20001068
 8008454:	20001064 	.word	0x20001064

08008458 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008458:	b480      	push	{r7}
 800845a:	b085      	sub	sp, #20
 800845c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800845e:	4b2b      	ldr	r3, [pc, #172]	@ (800850c <vTaskSwitchContext+0xb4>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d003      	beq.n	800846e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008466:	4b2a      	ldr	r3, [pc, #168]	@ (8008510 <vTaskSwitchContext+0xb8>)
 8008468:	2201      	movs	r2, #1
 800846a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800846c:	e047      	b.n	80084fe <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800846e:	4b28      	ldr	r3, [pc, #160]	@ (8008510 <vTaskSwitchContext+0xb8>)
 8008470:	2200      	movs	r2, #0
 8008472:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008474:	4b27      	ldr	r3, [pc, #156]	@ (8008514 <vTaskSwitchContext+0xbc>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	60fb      	str	r3, [r7, #12]
 800847a:	e011      	b.n	80084a0 <vTaskSwitchContext+0x48>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d10b      	bne.n	800849a <vTaskSwitchContext+0x42>
	__asm volatile
 8008482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008486:	f383 8811 	msr	BASEPRI, r3
 800848a:	f3bf 8f6f 	isb	sy
 800848e:	f3bf 8f4f 	dsb	sy
 8008492:	607b      	str	r3, [r7, #4]
}
 8008494:	bf00      	nop
 8008496:	bf00      	nop
 8008498:	e7fd      	b.n	8008496 <vTaskSwitchContext+0x3e>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	3b01      	subs	r3, #1
 800849e:	60fb      	str	r3, [r7, #12]
 80084a0:	491d      	ldr	r1, [pc, #116]	@ (8008518 <vTaskSwitchContext+0xc0>)
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	4613      	mov	r3, r2
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	4413      	add	r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	440b      	add	r3, r1
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d0e3      	beq.n	800847c <vTaskSwitchContext+0x24>
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	4613      	mov	r3, r2
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	4413      	add	r3, r2
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	4a16      	ldr	r2, [pc, #88]	@ (8008518 <vTaskSwitchContext+0xc0>)
 80084c0:	4413      	add	r3, r2
 80084c2:	60bb      	str	r3, [r7, #8]
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	685a      	ldr	r2, [r3, #4]
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	605a      	str	r2, [r3, #4]
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	685a      	ldr	r2, [r3, #4]
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	3308      	adds	r3, #8
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d104      	bne.n	80084e4 <vTaskSwitchContext+0x8c>
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	685a      	ldr	r2, [r3, #4]
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	605a      	str	r2, [r3, #4]
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	4a0c      	ldr	r2, [pc, #48]	@ (800851c <vTaskSwitchContext+0xc4>)
 80084ec:	6013      	str	r3, [r2, #0]
 80084ee:	4a09      	ldr	r2, [pc, #36]	@ (8008514 <vTaskSwitchContext+0xbc>)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80084f4:	4b09      	ldr	r3, [pc, #36]	@ (800851c <vTaskSwitchContext+0xc4>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	3354      	adds	r3, #84	@ 0x54
 80084fa:	4a09      	ldr	r2, [pc, #36]	@ (8008520 <vTaskSwitchContext+0xc8>)
 80084fc:	6013      	str	r3, [r2, #0]
}
 80084fe:	bf00      	nop
 8008500:	3714      	adds	r7, #20
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop
 800850c:	2000107c 	.word	0x2000107c
 8008510:	20001068 	.word	0x20001068
 8008514:	2000105c 	.word	0x2000105c
 8008518:	20000b84 	.word	0x20000b84
 800851c:	20000b80 	.word	0x20000b80
 8008520:	20000030 	.word	0x20000030

08008524 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10b      	bne.n	800854c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008538:	f383 8811 	msr	BASEPRI, r3
 800853c:	f3bf 8f6f 	isb	sy
 8008540:	f3bf 8f4f 	dsb	sy
 8008544:	60fb      	str	r3, [r7, #12]
}
 8008546:	bf00      	nop
 8008548:	bf00      	nop
 800854a:	e7fd      	b.n	8008548 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800854c:	4b07      	ldr	r3, [pc, #28]	@ (800856c <vTaskPlaceOnEventList+0x48>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	3318      	adds	r3, #24
 8008552:	4619      	mov	r1, r3
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f7fe fe0c 	bl	8007172 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800855a:	2101      	movs	r1, #1
 800855c:	6838      	ldr	r0, [r7, #0]
 800855e:	f000 fa87 	bl	8008a70 <prvAddCurrentTaskToDelayedList>
}
 8008562:	bf00      	nop
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	20000b80 	.word	0x20000b80

08008570 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d10b      	bne.n	800859a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008586:	f383 8811 	msr	BASEPRI, r3
 800858a:	f3bf 8f6f 	isb	sy
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	617b      	str	r3, [r7, #20]
}
 8008594:	bf00      	nop
 8008596:	bf00      	nop
 8008598:	e7fd      	b.n	8008596 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800859a:	4b0a      	ldr	r3, [pc, #40]	@ (80085c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	3318      	adds	r3, #24
 80085a0:	4619      	mov	r1, r3
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f7fe fdc1 	bl	800712a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d002      	beq.n	80085b4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80085ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80085b2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80085b4:	6879      	ldr	r1, [r7, #4]
 80085b6:	68b8      	ldr	r0, [r7, #8]
 80085b8:	f000 fa5a 	bl	8008a70 <prvAddCurrentTaskToDelayedList>
	}
 80085bc:	bf00      	nop
 80085be:	3718      	adds	r7, #24
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	20000b80 	.word	0x20000b80

080085c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10b      	bne.n	80085f6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	60fb      	str	r3, [r7, #12]
}
 80085f0:	bf00      	nop
 80085f2:	bf00      	nop
 80085f4:	e7fd      	b.n	80085f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	3318      	adds	r3, #24
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7fe fdf2 	bl	80071e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008600:	4b1d      	ldr	r3, [pc, #116]	@ (8008678 <xTaskRemoveFromEventList+0xb0>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d11d      	bne.n	8008644 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	3304      	adds	r3, #4
 800860c:	4618      	mov	r0, r3
 800860e:	f7fe fde9 	bl	80071e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008616:	4b19      	ldr	r3, [pc, #100]	@ (800867c <xTaskRemoveFromEventList+0xb4>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	429a      	cmp	r2, r3
 800861c:	d903      	bls.n	8008626 <xTaskRemoveFromEventList+0x5e>
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008622:	4a16      	ldr	r2, [pc, #88]	@ (800867c <xTaskRemoveFromEventList+0xb4>)
 8008624:	6013      	str	r3, [r2, #0]
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800862a:	4613      	mov	r3, r2
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	4413      	add	r3, r2
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	4a13      	ldr	r2, [pc, #76]	@ (8008680 <xTaskRemoveFromEventList+0xb8>)
 8008634:	441a      	add	r2, r3
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	3304      	adds	r3, #4
 800863a:	4619      	mov	r1, r3
 800863c:	4610      	mov	r0, r2
 800863e:	f7fe fd74 	bl	800712a <vListInsertEnd>
 8008642:	e005      	b.n	8008650 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	3318      	adds	r3, #24
 8008648:	4619      	mov	r1, r3
 800864a:	480e      	ldr	r0, [pc, #56]	@ (8008684 <xTaskRemoveFromEventList+0xbc>)
 800864c:	f7fe fd6d 	bl	800712a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008654:	4b0c      	ldr	r3, [pc, #48]	@ (8008688 <xTaskRemoveFromEventList+0xc0>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800865a:	429a      	cmp	r2, r3
 800865c:	d905      	bls.n	800866a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800865e:	2301      	movs	r3, #1
 8008660:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008662:	4b0a      	ldr	r3, [pc, #40]	@ (800868c <xTaskRemoveFromEventList+0xc4>)
 8008664:	2201      	movs	r2, #1
 8008666:	601a      	str	r2, [r3, #0]
 8008668:	e001      	b.n	800866e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800866a:	2300      	movs	r3, #0
 800866c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800866e:	697b      	ldr	r3, [r7, #20]
}
 8008670:	4618      	mov	r0, r3
 8008672:	3718      	adds	r7, #24
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	2000107c 	.word	0x2000107c
 800867c:	2000105c 	.word	0x2000105c
 8008680:	20000b84 	.word	0x20000b84
 8008684:	20001014 	.word	0x20001014
 8008688:	20000b80 	.word	0x20000b80
 800868c:	20001068 	.word	0x20001068

08008690 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008698:	4b06      	ldr	r3, [pc, #24]	@ (80086b4 <vTaskInternalSetTimeOutState+0x24>)
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80086a0:	4b05      	ldr	r3, [pc, #20]	@ (80086b8 <vTaskInternalSetTimeOutState+0x28>)
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	605a      	str	r2, [r3, #4]
}
 80086a8:	bf00      	nop
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr
 80086b4:	2000106c 	.word	0x2000106c
 80086b8:	20001058 	.word	0x20001058

080086bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b088      	sub	sp, #32
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d10b      	bne.n	80086e4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80086cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d0:	f383 8811 	msr	BASEPRI, r3
 80086d4:	f3bf 8f6f 	isb	sy
 80086d8:	f3bf 8f4f 	dsb	sy
 80086dc:	613b      	str	r3, [r7, #16]
}
 80086de:	bf00      	nop
 80086e0:	bf00      	nop
 80086e2:	e7fd      	b.n	80086e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d10b      	bne.n	8008702 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80086ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	60fb      	str	r3, [r7, #12]
}
 80086fc:	bf00      	nop
 80086fe:	bf00      	nop
 8008700:	e7fd      	b.n	80086fe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008702:	f000 fe91 	bl	8009428 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008706:	4b1d      	ldr	r3, [pc, #116]	@ (800877c <xTaskCheckForTimeOut+0xc0>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	69ba      	ldr	r2, [r7, #24]
 8008712:	1ad3      	subs	r3, r2, r3
 8008714:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800871e:	d102      	bne.n	8008726 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008720:	2300      	movs	r3, #0
 8008722:	61fb      	str	r3, [r7, #28]
 8008724:	e023      	b.n	800876e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	4b15      	ldr	r3, [pc, #84]	@ (8008780 <xTaskCheckForTimeOut+0xc4>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	429a      	cmp	r2, r3
 8008730:	d007      	beq.n	8008742 <xTaskCheckForTimeOut+0x86>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	69ba      	ldr	r2, [r7, #24]
 8008738:	429a      	cmp	r2, r3
 800873a:	d302      	bcc.n	8008742 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800873c:	2301      	movs	r3, #1
 800873e:	61fb      	str	r3, [r7, #28]
 8008740:	e015      	b.n	800876e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	697a      	ldr	r2, [r7, #20]
 8008748:	429a      	cmp	r2, r3
 800874a:	d20b      	bcs.n	8008764 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	1ad2      	subs	r2, r2, r3
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f7ff ff99 	bl	8008690 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800875e:	2300      	movs	r3, #0
 8008760:	61fb      	str	r3, [r7, #28]
 8008762:	e004      	b.n	800876e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	2200      	movs	r2, #0
 8008768:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800876a:	2301      	movs	r3, #1
 800876c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800876e:	f000 fe8d 	bl	800948c <vPortExitCritical>

	return xReturn;
 8008772:	69fb      	ldr	r3, [r7, #28]
}
 8008774:	4618      	mov	r0, r3
 8008776:	3720      	adds	r7, #32
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}
 800877c:	20001058 	.word	0x20001058
 8008780:	2000106c 	.word	0x2000106c

08008784 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008784:	b480      	push	{r7}
 8008786:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008788:	4b03      	ldr	r3, [pc, #12]	@ (8008798 <vTaskMissedYield+0x14>)
 800878a:	2201      	movs	r2, #1
 800878c:	601a      	str	r2, [r3, #0]
}
 800878e:	bf00      	nop
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	20001068 	.word	0x20001068

0800879c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80087a4:	f000 f852 	bl	800884c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80087a8:	4b06      	ldr	r3, [pc, #24]	@ (80087c4 <prvIdleTask+0x28>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d9f9      	bls.n	80087a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80087b0:	4b05      	ldr	r3, [pc, #20]	@ (80087c8 <prvIdleTask+0x2c>)
 80087b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087b6:	601a      	str	r2, [r3, #0]
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80087c0:	e7f0      	b.n	80087a4 <prvIdleTask+0x8>
 80087c2:	bf00      	nop
 80087c4:	20000b84 	.word	0x20000b84
 80087c8:	e000ed04 	.word	0xe000ed04

080087cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087d2:	2300      	movs	r3, #0
 80087d4:	607b      	str	r3, [r7, #4]
 80087d6:	e00c      	b.n	80087f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	4613      	mov	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4413      	add	r3, r2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	4a12      	ldr	r2, [pc, #72]	@ (800882c <prvInitialiseTaskLists+0x60>)
 80087e4:	4413      	add	r3, r2
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7fe fc72 	bl	80070d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	3301      	adds	r3, #1
 80087f0:	607b      	str	r3, [r7, #4]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2b37      	cmp	r3, #55	@ 0x37
 80087f6:	d9ef      	bls.n	80087d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80087f8:	480d      	ldr	r0, [pc, #52]	@ (8008830 <prvInitialiseTaskLists+0x64>)
 80087fa:	f7fe fc69 	bl	80070d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80087fe:	480d      	ldr	r0, [pc, #52]	@ (8008834 <prvInitialiseTaskLists+0x68>)
 8008800:	f7fe fc66 	bl	80070d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008804:	480c      	ldr	r0, [pc, #48]	@ (8008838 <prvInitialiseTaskLists+0x6c>)
 8008806:	f7fe fc63 	bl	80070d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800880a:	480c      	ldr	r0, [pc, #48]	@ (800883c <prvInitialiseTaskLists+0x70>)
 800880c:	f7fe fc60 	bl	80070d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008810:	480b      	ldr	r0, [pc, #44]	@ (8008840 <prvInitialiseTaskLists+0x74>)
 8008812:	f7fe fc5d 	bl	80070d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008816:	4b0b      	ldr	r3, [pc, #44]	@ (8008844 <prvInitialiseTaskLists+0x78>)
 8008818:	4a05      	ldr	r2, [pc, #20]	@ (8008830 <prvInitialiseTaskLists+0x64>)
 800881a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800881c:	4b0a      	ldr	r3, [pc, #40]	@ (8008848 <prvInitialiseTaskLists+0x7c>)
 800881e:	4a05      	ldr	r2, [pc, #20]	@ (8008834 <prvInitialiseTaskLists+0x68>)
 8008820:	601a      	str	r2, [r3, #0]
}
 8008822:	bf00      	nop
 8008824:	3708      	adds	r7, #8
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	20000b84 	.word	0x20000b84
 8008830:	20000fe4 	.word	0x20000fe4
 8008834:	20000ff8 	.word	0x20000ff8
 8008838:	20001014 	.word	0x20001014
 800883c:	20001028 	.word	0x20001028
 8008840:	20001040 	.word	0x20001040
 8008844:	2000100c 	.word	0x2000100c
 8008848:	20001010 	.word	0x20001010

0800884c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008852:	e019      	b.n	8008888 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008854:	f000 fde8 	bl	8009428 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008858:	4b10      	ldr	r3, [pc, #64]	@ (800889c <prvCheckTasksWaitingTermination+0x50>)
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	3304      	adds	r3, #4
 8008864:	4618      	mov	r0, r3
 8008866:	f7fe fcbd 	bl	80071e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800886a:	4b0d      	ldr	r3, [pc, #52]	@ (80088a0 <prvCheckTasksWaitingTermination+0x54>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	3b01      	subs	r3, #1
 8008870:	4a0b      	ldr	r2, [pc, #44]	@ (80088a0 <prvCheckTasksWaitingTermination+0x54>)
 8008872:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008874:	4b0b      	ldr	r3, [pc, #44]	@ (80088a4 <prvCheckTasksWaitingTermination+0x58>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	3b01      	subs	r3, #1
 800887a:	4a0a      	ldr	r2, [pc, #40]	@ (80088a4 <prvCheckTasksWaitingTermination+0x58>)
 800887c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800887e:	f000 fe05 	bl	800948c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 f810 	bl	80088a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008888:	4b06      	ldr	r3, [pc, #24]	@ (80088a4 <prvCheckTasksWaitingTermination+0x58>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d1e1      	bne.n	8008854 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008890:	bf00      	nop
 8008892:	bf00      	nop
 8008894:	3708      	adds	r7, #8
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	20001028 	.word	0x20001028
 80088a0:	20001054 	.word	0x20001054
 80088a4:	2000103c 	.word	0x2000103c

080088a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	3354      	adds	r3, #84	@ 0x54
 80088b4:	4618      	mov	r0, r3
 80088b6:	f001 ff4b 	bl	800a750 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d108      	bne.n	80088d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088c8:	4618      	mov	r0, r3
 80088ca:	f000 ff9d 	bl	8009808 <vPortFree>
				vPortFree( pxTCB );
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 ff9a 	bl	8009808 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80088d4:	e019      	b.n	800890a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d103      	bne.n	80088e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 ff91 	bl	8009808 <vPortFree>
	}
 80088e6:	e010      	b.n	800890a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d00b      	beq.n	800890a <prvDeleteTCB+0x62>
	__asm volatile
 80088f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f6:	f383 8811 	msr	BASEPRI, r3
 80088fa:	f3bf 8f6f 	isb	sy
 80088fe:	f3bf 8f4f 	dsb	sy
 8008902:	60fb      	str	r3, [r7, #12]
}
 8008904:	bf00      	nop
 8008906:	bf00      	nop
 8008908:	e7fd      	b.n	8008906 <prvDeleteTCB+0x5e>
	}
 800890a:	bf00      	nop
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
	...

08008914 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800891a:	4b0c      	ldr	r3, [pc, #48]	@ (800894c <prvResetNextTaskUnblockTime+0x38>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d104      	bne.n	800892e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008924:	4b0a      	ldr	r3, [pc, #40]	@ (8008950 <prvResetNextTaskUnblockTime+0x3c>)
 8008926:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800892a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800892c:	e008      	b.n	8008940 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800892e:	4b07      	ldr	r3, [pc, #28]	@ (800894c <prvResetNextTaskUnblockTime+0x38>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	4a04      	ldr	r2, [pc, #16]	@ (8008950 <prvResetNextTaskUnblockTime+0x3c>)
 800893e:	6013      	str	r3, [r2, #0]
}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr
 800894c:	2000100c 	.word	0x2000100c
 8008950:	20001074 	.word	0x20001074

08008954 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800895a:	4b0b      	ldr	r3, [pc, #44]	@ (8008988 <xTaskGetSchedulerState+0x34>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d102      	bne.n	8008968 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008962:	2301      	movs	r3, #1
 8008964:	607b      	str	r3, [r7, #4]
 8008966:	e008      	b.n	800897a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008968:	4b08      	ldr	r3, [pc, #32]	@ (800898c <xTaskGetSchedulerState+0x38>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d102      	bne.n	8008976 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008970:	2302      	movs	r3, #2
 8008972:	607b      	str	r3, [r7, #4]
 8008974:	e001      	b.n	800897a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008976:	2300      	movs	r3, #0
 8008978:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800897a:	687b      	ldr	r3, [r7, #4]
	}
 800897c:	4618      	mov	r0, r3
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	20001060 	.word	0x20001060
 800898c:	2000107c 	.word	0x2000107c

08008990 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800899c:	2300      	movs	r3, #0
 800899e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d058      	beq.n	8008a58 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80089a6:	4b2f      	ldr	r3, [pc, #188]	@ (8008a64 <xTaskPriorityDisinherit+0xd4>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	693a      	ldr	r2, [r7, #16]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d00b      	beq.n	80089c8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80089b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b4:	f383 8811 	msr	BASEPRI, r3
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	60fb      	str	r3, [r7, #12]
}
 80089c2:	bf00      	nop
 80089c4:	bf00      	nop
 80089c6:	e7fd      	b.n	80089c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d10b      	bne.n	80089e8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80089d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d4:	f383 8811 	msr	BASEPRI, r3
 80089d8:	f3bf 8f6f 	isb	sy
 80089dc:	f3bf 8f4f 	dsb	sy
 80089e0:	60bb      	str	r3, [r7, #8]
}
 80089e2:	bf00      	nop
 80089e4:	bf00      	nop
 80089e6:	e7fd      	b.n	80089e4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089ec:	1e5a      	subs	r2, r3, #1
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d02c      	beq.n	8008a58 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d128      	bne.n	8008a58 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	3304      	adds	r3, #4
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fe fbea 	bl	80071e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a1c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a28:	4b0f      	ldr	r3, [pc, #60]	@ (8008a68 <xTaskPriorityDisinherit+0xd8>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d903      	bls.n	8008a38 <xTaskPriorityDisinherit+0xa8>
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a34:	4a0c      	ldr	r2, [pc, #48]	@ (8008a68 <xTaskPriorityDisinherit+0xd8>)
 8008a36:	6013      	str	r3, [r2, #0]
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	4413      	add	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4a09      	ldr	r2, [pc, #36]	@ (8008a6c <xTaskPriorityDisinherit+0xdc>)
 8008a46:	441a      	add	r2, r3
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	3304      	adds	r3, #4
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	4610      	mov	r0, r2
 8008a50:	f7fe fb6b 	bl	800712a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008a54:	2301      	movs	r3, #1
 8008a56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a58:	697b      	ldr	r3, [r7, #20]
	}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3718      	adds	r7, #24
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	20000b80 	.word	0x20000b80
 8008a68:	2000105c 	.word	0x2000105c
 8008a6c:	20000b84 	.word	0x20000b84

08008a70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a7a:	4b21      	ldr	r3, [pc, #132]	@ (8008b00 <prvAddCurrentTaskToDelayedList+0x90>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a80:	4b20      	ldr	r3, [pc, #128]	@ (8008b04 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	3304      	adds	r3, #4
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7fe fbac 	bl	80071e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a92:	d10a      	bne.n	8008aaa <prvAddCurrentTaskToDelayedList+0x3a>
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d007      	beq.n	8008aaa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8008b04 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	3304      	adds	r3, #4
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	4819      	ldr	r0, [pc, #100]	@ (8008b08 <prvAddCurrentTaskToDelayedList+0x98>)
 8008aa4:	f7fe fb41 	bl	800712a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008aa8:	e026      	b.n	8008af8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008aaa:	68fa      	ldr	r2, [r7, #12]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4413      	add	r3, r2
 8008ab0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ab2:	4b14      	ldr	r3, [pc, #80]	@ (8008b04 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	68ba      	ldr	r2, [r7, #8]
 8008ab8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008aba:	68ba      	ldr	r2, [r7, #8]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d209      	bcs.n	8008ad6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ac2:	4b12      	ldr	r3, [pc, #72]	@ (8008b0c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8008b04 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	3304      	adds	r3, #4
 8008acc:	4619      	mov	r1, r3
 8008ace:	4610      	mov	r0, r2
 8008ad0:	f7fe fb4f 	bl	8007172 <vListInsert>
}
 8008ad4:	e010      	b.n	8008af8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8008b10 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	4b0a      	ldr	r3, [pc, #40]	@ (8008b04 <prvAddCurrentTaskToDelayedList+0x94>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	3304      	adds	r3, #4
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	4610      	mov	r0, r2
 8008ae4:	f7fe fb45 	bl	8007172 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8008b14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d202      	bcs.n	8008af8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008af2:	4a08      	ldr	r2, [pc, #32]	@ (8008b14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	6013      	str	r3, [r2, #0]
}
 8008af8:	bf00      	nop
 8008afa:	3710      	adds	r7, #16
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	20001058 	.word	0x20001058
 8008b04:	20000b80 	.word	0x20000b80
 8008b08:	20001040 	.word	0x20001040
 8008b0c:	20001010 	.word	0x20001010
 8008b10:	2000100c 	.word	0x2000100c
 8008b14:	20001074 	.word	0x20001074

08008b18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b08a      	sub	sp, #40	@ 0x28
 8008b1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008b22:	f000 fb13 	bl	800914c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008b26:	4b1d      	ldr	r3, [pc, #116]	@ (8008b9c <xTimerCreateTimerTask+0x84>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d021      	beq.n	8008b72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008b32:	2300      	movs	r3, #0
 8008b34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008b36:	1d3a      	adds	r2, r7, #4
 8008b38:	f107 0108 	add.w	r1, r7, #8
 8008b3c:	f107 030c 	add.w	r3, r7, #12
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7fe faab 	bl	800709c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008b46:	6879      	ldr	r1, [r7, #4]
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	9202      	str	r2, [sp, #8]
 8008b4e:	9301      	str	r3, [sp, #4]
 8008b50:	2302      	movs	r3, #2
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	2300      	movs	r3, #0
 8008b56:	460a      	mov	r2, r1
 8008b58:	4911      	ldr	r1, [pc, #68]	@ (8008ba0 <xTimerCreateTimerTask+0x88>)
 8008b5a:	4812      	ldr	r0, [pc, #72]	@ (8008ba4 <xTimerCreateTimerTask+0x8c>)
 8008b5c:	f7ff f8a2 	bl	8007ca4 <xTaskCreateStatic>
 8008b60:	4603      	mov	r3, r0
 8008b62:	4a11      	ldr	r2, [pc, #68]	@ (8008ba8 <xTimerCreateTimerTask+0x90>)
 8008b64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008b66:	4b10      	ldr	r3, [pc, #64]	@ (8008ba8 <xTimerCreateTimerTask+0x90>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d001      	beq.n	8008b72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10b      	bne.n	8008b90 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	613b      	str	r3, [r7, #16]
}
 8008b8a:	bf00      	nop
 8008b8c:	bf00      	nop
 8008b8e:	e7fd      	b.n	8008b8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008b90:	697b      	ldr	r3, [r7, #20]
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3718      	adds	r7, #24
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	200010b0 	.word	0x200010b0
 8008ba0:	0800c898 	.word	0x0800c898
 8008ba4:	08008ce5 	.word	0x08008ce5
 8008ba8:	200010b4 	.word	0x200010b4

08008bac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b08a      	sub	sp, #40	@ 0x28
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
 8008bb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d10b      	bne.n	8008bdc <xTimerGenericCommand+0x30>
	__asm volatile
 8008bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc8:	f383 8811 	msr	BASEPRI, r3
 8008bcc:	f3bf 8f6f 	isb	sy
 8008bd0:	f3bf 8f4f 	dsb	sy
 8008bd4:	623b      	str	r3, [r7, #32]
}
 8008bd6:	bf00      	nop
 8008bd8:	bf00      	nop
 8008bda:	e7fd      	b.n	8008bd8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008bdc:	4b19      	ldr	r3, [pc, #100]	@ (8008c44 <xTimerGenericCommand+0x98>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d02a      	beq.n	8008c3a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2b05      	cmp	r3, #5
 8008bf4:	dc18      	bgt.n	8008c28 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008bf6:	f7ff fead 	bl	8008954 <xTaskGetSchedulerState>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d109      	bne.n	8008c14 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008c00:	4b10      	ldr	r3, [pc, #64]	@ (8008c44 <xTimerGenericCommand+0x98>)
 8008c02:	6818      	ldr	r0, [r3, #0]
 8008c04:	f107 0110 	add.w	r1, r7, #16
 8008c08:	2300      	movs	r3, #0
 8008c0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c0c:	f7fe fc5a 	bl	80074c4 <xQueueGenericSend>
 8008c10:	6278      	str	r0, [r7, #36]	@ 0x24
 8008c12:	e012      	b.n	8008c3a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008c14:	4b0b      	ldr	r3, [pc, #44]	@ (8008c44 <xTimerGenericCommand+0x98>)
 8008c16:	6818      	ldr	r0, [r3, #0]
 8008c18:	f107 0110 	add.w	r1, r7, #16
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f7fe fc50 	bl	80074c4 <xQueueGenericSend>
 8008c24:	6278      	str	r0, [r7, #36]	@ 0x24
 8008c26:	e008      	b.n	8008c3a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008c28:	4b06      	ldr	r3, [pc, #24]	@ (8008c44 <xTimerGenericCommand+0x98>)
 8008c2a:	6818      	ldr	r0, [r3, #0]
 8008c2c:	f107 0110 	add.w	r1, r7, #16
 8008c30:	2300      	movs	r3, #0
 8008c32:	683a      	ldr	r2, [r7, #0]
 8008c34:	f7fe fd48 	bl	80076c8 <xQueueGenericSendFromISR>
 8008c38:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3728      	adds	r7, #40	@ 0x28
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	200010b0 	.word	0x200010b0

08008c48 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b088      	sub	sp, #32
 8008c4c:	af02      	add	r7, sp, #8
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c52:	4b23      	ldr	r3, [pc, #140]	@ (8008ce0 <prvProcessExpiredTimer+0x98>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	3304      	adds	r3, #4
 8008c60:	4618      	mov	r0, r3
 8008c62:	f7fe fabf 	bl	80071e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c6c:	f003 0304 	and.w	r3, r3, #4
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d023      	beq.n	8008cbc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	699a      	ldr	r2, [r3, #24]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	18d1      	adds	r1, r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	683a      	ldr	r2, [r7, #0]
 8008c80:	6978      	ldr	r0, [r7, #20]
 8008c82:	f000 f8d5 	bl	8008e30 <prvInsertTimerInActiveList>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d020      	beq.n	8008cce <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	9300      	str	r3, [sp, #0]
 8008c90:	2300      	movs	r3, #0
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	2100      	movs	r1, #0
 8008c96:	6978      	ldr	r0, [r7, #20]
 8008c98:	f7ff ff88 	bl	8008bac <xTimerGenericCommand>
 8008c9c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d114      	bne.n	8008cce <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca8:	f383 8811 	msr	BASEPRI, r3
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	f3bf 8f4f 	dsb	sy
 8008cb4:	60fb      	str	r3, [r7, #12]
}
 8008cb6:	bf00      	nop
 8008cb8:	bf00      	nop
 8008cba:	e7fd      	b.n	8008cb8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008cc2:	f023 0301 	bic.w	r3, r3, #1
 8008cc6:	b2da      	uxtb	r2, r3
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	6978      	ldr	r0, [r7, #20]
 8008cd4:	4798      	blx	r3
}
 8008cd6:	bf00      	nop
 8008cd8:	3718      	adds	r7, #24
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	200010a8 	.word	0x200010a8

08008ce4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008cec:	f107 0308 	add.w	r3, r7, #8
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f000 f859 	bl	8008da8 <prvGetNextExpireTime>
 8008cf6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	68f8      	ldr	r0, [r7, #12]
 8008cfe:	f000 f805 	bl	8008d0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008d02:	f000 f8d7 	bl	8008eb4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d06:	bf00      	nop
 8008d08:	e7f0      	b.n	8008cec <prvTimerTask+0x8>
	...

08008d0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008d16:	f7ff fa29 	bl	800816c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d1a:	f107 0308 	add.w	r3, r7, #8
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 f866 	bl	8008df0 <prvSampleTimeNow>
 8008d24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d130      	bne.n	8008d8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10a      	bne.n	8008d48 <prvProcessTimerOrBlockTask+0x3c>
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d806      	bhi.n	8008d48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008d3a:	f7ff fa25 	bl	8008188 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008d3e:	68f9      	ldr	r1, [r7, #12]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f7ff ff81 	bl	8008c48 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008d46:	e024      	b.n	8008d92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d008      	beq.n	8008d60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008d4e:	4b13      	ldr	r3, [pc, #76]	@ (8008d9c <prvProcessTimerOrBlockTask+0x90>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d101      	bne.n	8008d5c <prvProcessTimerOrBlockTask+0x50>
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e000      	b.n	8008d5e <prvProcessTimerOrBlockTask+0x52>
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008d60:	4b0f      	ldr	r3, [pc, #60]	@ (8008da0 <prvProcessTimerOrBlockTask+0x94>)
 8008d62:	6818      	ldr	r0, [r3, #0]
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	1ad3      	subs	r3, r2, r3
 8008d6a:	683a      	ldr	r2, [r7, #0]
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	f7fe ff65 	bl	8007c3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008d72:	f7ff fa09 	bl	8008188 <xTaskResumeAll>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d10a      	bne.n	8008d92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008d7c:	4b09      	ldr	r3, [pc, #36]	@ (8008da4 <prvProcessTimerOrBlockTask+0x98>)
 8008d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d82:	601a      	str	r2, [r3, #0]
 8008d84:	f3bf 8f4f 	dsb	sy
 8008d88:	f3bf 8f6f 	isb	sy
}
 8008d8c:	e001      	b.n	8008d92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008d8e:	f7ff f9fb 	bl	8008188 <xTaskResumeAll>
}
 8008d92:	bf00      	nop
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	200010ac 	.word	0x200010ac
 8008da0:	200010b0 	.word	0x200010b0
 8008da4:	e000ed04 	.word	0xe000ed04

08008da8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008db0:	4b0e      	ldr	r3, [pc, #56]	@ (8008dec <prvGetNextExpireTime+0x44>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d101      	bne.n	8008dbe <prvGetNextExpireTime+0x16>
 8008dba:	2201      	movs	r2, #1
 8008dbc:	e000      	b.n	8008dc0 <prvGetNextExpireTime+0x18>
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d105      	bne.n	8008dd8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008dcc:	4b07      	ldr	r3, [pc, #28]	@ (8008dec <prvGetNextExpireTime+0x44>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	60fb      	str	r3, [r7, #12]
 8008dd6:	e001      	b.n	8008ddc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3714      	adds	r7, #20
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	200010a8 	.word	0x200010a8

08008df0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008df8:	f7ff fa64 	bl	80082c4 <xTaskGetTickCount>
 8008dfc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8008e2c <prvSampleTimeNow+0x3c>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68fa      	ldr	r2, [r7, #12]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d205      	bcs.n	8008e14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008e08:	f000 f93a 	bl	8009080 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	601a      	str	r2, [r3, #0]
 8008e12:	e002      	b.n	8008e1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008e1a:	4a04      	ldr	r2, [pc, #16]	@ (8008e2c <prvSampleTimeNow+0x3c>)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008e20:	68fb      	ldr	r3, [r7, #12]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3710      	adds	r7, #16
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	200010b8 	.word	0x200010b8

08008e30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b086      	sub	sp, #24
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	607a      	str	r2, [r7, #4]
 8008e3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	68ba      	ldr	r2, [r7, #8]
 8008e46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	68fa      	ldr	r2, [r7, #12]
 8008e4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d812      	bhi.n	8008e7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	1ad2      	subs	r2, r2, r3
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	699b      	ldr	r3, [r3, #24]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d302      	bcc.n	8008e6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008e64:	2301      	movs	r3, #1
 8008e66:	617b      	str	r3, [r7, #20]
 8008e68:	e01b      	b.n	8008ea2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008e6a:	4b10      	ldr	r3, [pc, #64]	@ (8008eac <prvInsertTimerInActiveList+0x7c>)
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	3304      	adds	r3, #4
 8008e72:	4619      	mov	r1, r3
 8008e74:	4610      	mov	r0, r2
 8008e76:	f7fe f97c 	bl	8007172 <vListInsert>
 8008e7a:	e012      	b.n	8008ea2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d206      	bcs.n	8008e92 <prvInsertTimerInActiveList+0x62>
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d302      	bcc.n	8008e92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	617b      	str	r3, [r7, #20]
 8008e90:	e007      	b.n	8008ea2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e92:	4b07      	ldr	r3, [pc, #28]	@ (8008eb0 <prvInsertTimerInActiveList+0x80>)
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	3304      	adds	r3, #4
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	4610      	mov	r0, r2
 8008e9e:	f7fe f968 	bl	8007172 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008ea2:	697b      	ldr	r3, [r7, #20]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3718      	adds	r7, #24
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	200010ac 	.word	0x200010ac
 8008eb0:	200010a8 	.word	0x200010a8

08008eb4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b08e      	sub	sp, #56	@ 0x38
 8008eb8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008eba:	e0ce      	b.n	800905a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	da19      	bge.n	8008ef6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008ec2:	1d3b      	adds	r3, r7, #4
 8008ec4:	3304      	adds	r3, #4
 8008ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10b      	bne.n	8008ee6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed2:	f383 8811 	msr	BASEPRI, r3
 8008ed6:	f3bf 8f6f 	isb	sy
 8008eda:	f3bf 8f4f 	dsb	sy
 8008ede:	61fb      	str	r3, [r7, #28]
}
 8008ee0:	bf00      	nop
 8008ee2:	bf00      	nop
 8008ee4:	e7fd      	b.n	8008ee2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008eec:	6850      	ldr	r0, [r2, #4]
 8008eee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ef0:	6892      	ldr	r2, [r2, #8]
 8008ef2:	4611      	mov	r1, r2
 8008ef4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	f2c0 80ae 	blt.w	800905a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f04:	695b      	ldr	r3, [r3, #20]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d004      	beq.n	8008f14 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f0c:	3304      	adds	r3, #4
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7fe f968 	bl	80071e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f14:	463b      	mov	r3, r7
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7ff ff6a 	bl	8008df0 <prvSampleTimeNow>
 8008f1c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2b09      	cmp	r3, #9
 8008f22:	f200 8097 	bhi.w	8009054 <prvProcessReceivedCommands+0x1a0>
 8008f26:	a201      	add	r2, pc, #4	@ (adr r2, 8008f2c <prvProcessReceivedCommands+0x78>)
 8008f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f2c:	08008f55 	.word	0x08008f55
 8008f30:	08008f55 	.word	0x08008f55
 8008f34:	08008f55 	.word	0x08008f55
 8008f38:	08008fcb 	.word	0x08008fcb
 8008f3c:	08008fdf 	.word	0x08008fdf
 8008f40:	0800902b 	.word	0x0800902b
 8008f44:	08008f55 	.word	0x08008f55
 8008f48:	08008f55 	.word	0x08008f55
 8008f4c:	08008fcb 	.word	0x08008fcb
 8008f50:	08008fdf 	.word	0x08008fdf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f5a:	f043 0301 	orr.w	r3, r3, #1
 8008f5e:	b2da      	uxtb	r2, r3
 8008f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008f66:	68ba      	ldr	r2, [r7, #8]
 8008f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f6a:	699b      	ldr	r3, [r3, #24]
 8008f6c:	18d1      	adds	r1, r2, r3
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f74:	f7ff ff5c 	bl	8008e30 <prvInsertTimerInActiveList>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d06c      	beq.n	8009058 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f80:	6a1b      	ldr	r3, [r3, #32]
 8008f82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f84:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f8c:	f003 0304 	and.w	r3, r3, #4
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d061      	beq.n	8009058 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008f94:	68ba      	ldr	r2, [r7, #8]
 8008f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f98:	699b      	ldr	r3, [r3, #24]
 8008f9a:	441a      	add	r2, r3
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	9300      	str	r3, [sp, #0]
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fa6:	f7ff fe01 	bl	8008bac <xTimerGenericCommand>
 8008faa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008fac:	6a3b      	ldr	r3, [r7, #32]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d152      	bne.n	8009058 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fb6:	f383 8811 	msr	BASEPRI, r3
 8008fba:	f3bf 8f6f 	isb	sy
 8008fbe:	f3bf 8f4f 	dsb	sy
 8008fc2:	61bb      	str	r3, [r7, #24]
}
 8008fc4:	bf00      	nop
 8008fc6:	bf00      	nop
 8008fc8:	e7fd      	b.n	8008fc6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008fd0:	f023 0301 	bic.w	r3, r3, #1
 8008fd4:	b2da      	uxtb	r2, r3
 8008fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fd8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008fdc:	e03d      	b.n	800905a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008fe4:	f043 0301 	orr.w	r3, r3, #1
 8008fe8:	b2da      	uxtb	r2, r3
 8008fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008ff0:	68ba      	ldr	r2, [r7, #8]
 8008ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ff4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ff8:	699b      	ldr	r3, [r3, #24]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d10b      	bne.n	8009016 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009002:	f383 8811 	msr	BASEPRI, r3
 8009006:	f3bf 8f6f 	isb	sy
 800900a:	f3bf 8f4f 	dsb	sy
 800900e:	617b      	str	r3, [r7, #20]
}
 8009010:	bf00      	nop
 8009012:	bf00      	nop
 8009014:	e7fd      	b.n	8009012 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009018:	699a      	ldr	r2, [r3, #24]
 800901a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800901c:	18d1      	adds	r1, r2, r3
 800901e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009022:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009024:	f7ff ff04 	bl	8008e30 <prvInsertTimerInActiveList>
					break;
 8009028:	e017      	b.n	800905a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800902a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800902c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009030:	f003 0302 	and.w	r3, r3, #2
 8009034:	2b00      	cmp	r3, #0
 8009036:	d103      	bne.n	8009040 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009038:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800903a:	f000 fbe5 	bl	8009808 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800903e:	e00c      	b.n	800905a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009042:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009046:	f023 0301 	bic.w	r3, r3, #1
 800904a:	b2da      	uxtb	r2, r3
 800904c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800904e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009052:	e002      	b.n	800905a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009054:	bf00      	nop
 8009056:	e000      	b.n	800905a <prvProcessReceivedCommands+0x1a6>
					break;
 8009058:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800905a:	4b08      	ldr	r3, [pc, #32]	@ (800907c <prvProcessReceivedCommands+0x1c8>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	1d39      	adds	r1, r7, #4
 8009060:	2200      	movs	r2, #0
 8009062:	4618      	mov	r0, r3
 8009064:	f7fe fbce 	bl	8007804 <xQueueReceive>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	f47f af26 	bne.w	8008ebc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009070:	bf00      	nop
 8009072:	bf00      	nop
 8009074:	3730      	adds	r7, #48	@ 0x30
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	200010b0 	.word	0x200010b0

08009080 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b088      	sub	sp, #32
 8009084:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009086:	e049      	b.n	800911c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009088:	4b2e      	ldr	r3, [pc, #184]	@ (8009144 <prvSwitchTimerLists+0xc4>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009092:	4b2c      	ldr	r3, [pc, #176]	@ (8009144 <prvSwitchTimerLists+0xc4>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	3304      	adds	r3, #4
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7fe f89f 	bl	80071e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	6a1b      	ldr	r3, [r3, #32]
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090b4:	f003 0304 	and.w	r3, r3, #4
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d02f      	beq.n	800911c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	699b      	ldr	r3, [r3, #24]
 80090c0:	693a      	ldr	r2, [r7, #16]
 80090c2:	4413      	add	r3, r2
 80090c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80090c6:	68ba      	ldr	r2, [r7, #8]
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d90e      	bls.n	80090ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	68ba      	ldr	r2, [r7, #8]
 80090d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090da:	4b1a      	ldr	r3, [pc, #104]	@ (8009144 <prvSwitchTimerLists+0xc4>)
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	3304      	adds	r3, #4
 80090e2:	4619      	mov	r1, r3
 80090e4:	4610      	mov	r0, r2
 80090e6:	f7fe f844 	bl	8007172 <vListInsert>
 80090ea:	e017      	b.n	800911c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090ec:	2300      	movs	r3, #0
 80090ee:	9300      	str	r3, [sp, #0]
 80090f0:	2300      	movs	r3, #0
 80090f2:	693a      	ldr	r2, [r7, #16]
 80090f4:	2100      	movs	r1, #0
 80090f6:	68f8      	ldr	r0, [r7, #12]
 80090f8:	f7ff fd58 	bl	8008bac <xTimerGenericCommand>
 80090fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d10b      	bne.n	800911c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009108:	f383 8811 	msr	BASEPRI, r3
 800910c:	f3bf 8f6f 	isb	sy
 8009110:	f3bf 8f4f 	dsb	sy
 8009114:	603b      	str	r3, [r7, #0]
}
 8009116:	bf00      	nop
 8009118:	bf00      	nop
 800911a:	e7fd      	b.n	8009118 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800911c:	4b09      	ldr	r3, [pc, #36]	@ (8009144 <prvSwitchTimerLists+0xc4>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1b0      	bne.n	8009088 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009126:	4b07      	ldr	r3, [pc, #28]	@ (8009144 <prvSwitchTimerLists+0xc4>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800912c:	4b06      	ldr	r3, [pc, #24]	@ (8009148 <prvSwitchTimerLists+0xc8>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a04      	ldr	r2, [pc, #16]	@ (8009144 <prvSwitchTimerLists+0xc4>)
 8009132:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009134:	4a04      	ldr	r2, [pc, #16]	@ (8009148 <prvSwitchTimerLists+0xc8>)
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	6013      	str	r3, [r2, #0]
}
 800913a:	bf00      	nop
 800913c:	3718      	adds	r7, #24
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	200010a8 	.word	0x200010a8
 8009148:	200010ac 	.word	0x200010ac

0800914c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009152:	f000 f969 	bl	8009428 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009156:	4b15      	ldr	r3, [pc, #84]	@ (80091ac <prvCheckForValidListAndQueue+0x60>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d120      	bne.n	80091a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800915e:	4814      	ldr	r0, [pc, #80]	@ (80091b0 <prvCheckForValidListAndQueue+0x64>)
 8009160:	f7fd ffb6 	bl	80070d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009164:	4813      	ldr	r0, [pc, #76]	@ (80091b4 <prvCheckForValidListAndQueue+0x68>)
 8009166:	f7fd ffb3 	bl	80070d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800916a:	4b13      	ldr	r3, [pc, #76]	@ (80091b8 <prvCheckForValidListAndQueue+0x6c>)
 800916c:	4a10      	ldr	r2, [pc, #64]	@ (80091b0 <prvCheckForValidListAndQueue+0x64>)
 800916e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009170:	4b12      	ldr	r3, [pc, #72]	@ (80091bc <prvCheckForValidListAndQueue+0x70>)
 8009172:	4a10      	ldr	r2, [pc, #64]	@ (80091b4 <prvCheckForValidListAndQueue+0x68>)
 8009174:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009176:	2300      	movs	r3, #0
 8009178:	9300      	str	r3, [sp, #0]
 800917a:	4b11      	ldr	r3, [pc, #68]	@ (80091c0 <prvCheckForValidListAndQueue+0x74>)
 800917c:	4a11      	ldr	r2, [pc, #68]	@ (80091c4 <prvCheckForValidListAndQueue+0x78>)
 800917e:	2110      	movs	r1, #16
 8009180:	200a      	movs	r0, #10
 8009182:	f7fe f8c3 	bl	800730c <xQueueGenericCreateStatic>
 8009186:	4603      	mov	r3, r0
 8009188:	4a08      	ldr	r2, [pc, #32]	@ (80091ac <prvCheckForValidListAndQueue+0x60>)
 800918a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800918c:	4b07      	ldr	r3, [pc, #28]	@ (80091ac <prvCheckForValidListAndQueue+0x60>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d005      	beq.n	80091a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009194:	4b05      	ldr	r3, [pc, #20]	@ (80091ac <prvCheckForValidListAndQueue+0x60>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	490b      	ldr	r1, [pc, #44]	@ (80091c8 <prvCheckForValidListAndQueue+0x7c>)
 800919a:	4618      	mov	r0, r3
 800919c:	f7fe fd24 	bl	8007be8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80091a0:	f000 f974 	bl	800948c <vPortExitCritical>
}
 80091a4:	bf00      	nop
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	200010b0 	.word	0x200010b0
 80091b0:	20001080 	.word	0x20001080
 80091b4:	20001094 	.word	0x20001094
 80091b8:	200010a8 	.word	0x200010a8
 80091bc:	200010ac 	.word	0x200010ac
 80091c0:	2000115c 	.word	0x2000115c
 80091c4:	200010bc 	.word	0x200010bc
 80091c8:	0800c8a0 	.word	0x0800c8a0

080091cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80091cc:	b480      	push	{r7}
 80091ce:	b085      	sub	sp, #20
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	3b04      	subs	r3, #4
 80091dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80091e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	3b04      	subs	r3, #4
 80091ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	f023 0201 	bic.w	r2, r3, #1
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	3b04      	subs	r3, #4
 80091fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80091fc:	4a0c      	ldr	r2, [pc, #48]	@ (8009230 <pxPortInitialiseStack+0x64>)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	3b14      	subs	r3, #20
 8009206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	3b04      	subs	r3, #4
 8009212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f06f 0202 	mvn.w	r2, #2
 800921a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	3b20      	subs	r3, #32
 8009220:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009222:	68fb      	ldr	r3, [r7, #12]
}
 8009224:	4618      	mov	r0, r3
 8009226:	3714      	adds	r7, #20
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr
 8009230:	08009235 	.word	0x08009235

08009234 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800923a:	2300      	movs	r3, #0
 800923c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800923e:	4b13      	ldr	r3, [pc, #76]	@ (800928c <prvTaskExitError+0x58>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009246:	d00b      	beq.n	8009260 <prvTaskExitError+0x2c>
	__asm volatile
 8009248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800924c:	f383 8811 	msr	BASEPRI, r3
 8009250:	f3bf 8f6f 	isb	sy
 8009254:	f3bf 8f4f 	dsb	sy
 8009258:	60fb      	str	r3, [r7, #12]
}
 800925a:	bf00      	nop
 800925c:	bf00      	nop
 800925e:	e7fd      	b.n	800925c <prvTaskExitError+0x28>
	__asm volatile
 8009260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	60bb      	str	r3, [r7, #8]
}
 8009272:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009274:	bf00      	nop
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d0fc      	beq.n	8009276 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800927c:	bf00      	nop
 800927e:	bf00      	nop
 8009280:	3714      	adds	r7, #20
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	20000020 	.word	0x20000020

08009290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009290:	4b07      	ldr	r3, [pc, #28]	@ (80092b0 <pxCurrentTCBConst2>)
 8009292:	6819      	ldr	r1, [r3, #0]
 8009294:	6808      	ldr	r0, [r1, #0]
 8009296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800929a:	f380 8809 	msr	PSP, r0
 800929e:	f3bf 8f6f 	isb	sy
 80092a2:	f04f 0000 	mov.w	r0, #0
 80092a6:	f380 8811 	msr	BASEPRI, r0
 80092aa:	4770      	bx	lr
 80092ac:	f3af 8000 	nop.w

080092b0 <pxCurrentTCBConst2>:
 80092b0:	20000b80 	.word	0x20000b80
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80092b4:	bf00      	nop
 80092b6:	bf00      	nop

080092b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80092b8:	4808      	ldr	r0, [pc, #32]	@ (80092dc <prvPortStartFirstTask+0x24>)
 80092ba:	6800      	ldr	r0, [r0, #0]
 80092bc:	6800      	ldr	r0, [r0, #0]
 80092be:	f380 8808 	msr	MSP, r0
 80092c2:	f04f 0000 	mov.w	r0, #0
 80092c6:	f380 8814 	msr	CONTROL, r0
 80092ca:	b662      	cpsie	i
 80092cc:	b661      	cpsie	f
 80092ce:	f3bf 8f4f 	dsb	sy
 80092d2:	f3bf 8f6f 	isb	sy
 80092d6:	df00      	svc	0
 80092d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80092da:	bf00      	nop
 80092dc:	e000ed08 	.word	0xe000ed08

080092e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b086      	sub	sp, #24
 80092e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80092e6:	4b47      	ldr	r3, [pc, #284]	@ (8009404 <xPortStartScheduler+0x124>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a47      	ldr	r2, [pc, #284]	@ (8009408 <xPortStartScheduler+0x128>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d10b      	bne.n	8009308 <xPortStartScheduler+0x28>
	__asm volatile
 80092f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f4:	f383 8811 	msr	BASEPRI, r3
 80092f8:	f3bf 8f6f 	isb	sy
 80092fc:	f3bf 8f4f 	dsb	sy
 8009300:	60fb      	str	r3, [r7, #12]
}
 8009302:	bf00      	nop
 8009304:	bf00      	nop
 8009306:	e7fd      	b.n	8009304 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009308:	4b3e      	ldr	r3, [pc, #248]	@ (8009404 <xPortStartScheduler+0x124>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a3f      	ldr	r2, [pc, #252]	@ (800940c <xPortStartScheduler+0x12c>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d10b      	bne.n	800932a <xPortStartScheduler+0x4a>
	__asm volatile
 8009312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009316:	f383 8811 	msr	BASEPRI, r3
 800931a:	f3bf 8f6f 	isb	sy
 800931e:	f3bf 8f4f 	dsb	sy
 8009322:	613b      	str	r3, [r7, #16]
}
 8009324:	bf00      	nop
 8009326:	bf00      	nop
 8009328:	e7fd      	b.n	8009326 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800932a:	4b39      	ldr	r3, [pc, #228]	@ (8009410 <xPortStartScheduler+0x130>)
 800932c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	b2db      	uxtb	r3, r3
 8009334:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	22ff      	movs	r2, #255	@ 0xff
 800933a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	b2db      	uxtb	r3, r3
 8009342:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009344:	78fb      	ldrb	r3, [r7, #3]
 8009346:	b2db      	uxtb	r3, r3
 8009348:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800934c:	b2da      	uxtb	r2, r3
 800934e:	4b31      	ldr	r3, [pc, #196]	@ (8009414 <xPortStartScheduler+0x134>)
 8009350:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009352:	4b31      	ldr	r3, [pc, #196]	@ (8009418 <xPortStartScheduler+0x138>)
 8009354:	2207      	movs	r2, #7
 8009356:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009358:	e009      	b.n	800936e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800935a:	4b2f      	ldr	r3, [pc, #188]	@ (8009418 <xPortStartScheduler+0x138>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	3b01      	subs	r3, #1
 8009360:	4a2d      	ldr	r2, [pc, #180]	@ (8009418 <xPortStartScheduler+0x138>)
 8009362:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009364:	78fb      	ldrb	r3, [r7, #3]
 8009366:	b2db      	uxtb	r3, r3
 8009368:	005b      	lsls	r3, r3, #1
 800936a:	b2db      	uxtb	r3, r3
 800936c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800936e:	78fb      	ldrb	r3, [r7, #3]
 8009370:	b2db      	uxtb	r3, r3
 8009372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009376:	2b80      	cmp	r3, #128	@ 0x80
 8009378:	d0ef      	beq.n	800935a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800937a:	4b27      	ldr	r3, [pc, #156]	@ (8009418 <xPortStartScheduler+0x138>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f1c3 0307 	rsb	r3, r3, #7
 8009382:	2b04      	cmp	r3, #4
 8009384:	d00b      	beq.n	800939e <xPortStartScheduler+0xbe>
	__asm volatile
 8009386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800938a:	f383 8811 	msr	BASEPRI, r3
 800938e:	f3bf 8f6f 	isb	sy
 8009392:	f3bf 8f4f 	dsb	sy
 8009396:	60bb      	str	r3, [r7, #8]
}
 8009398:	bf00      	nop
 800939a:	bf00      	nop
 800939c:	e7fd      	b.n	800939a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800939e:	4b1e      	ldr	r3, [pc, #120]	@ (8009418 <xPortStartScheduler+0x138>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	021b      	lsls	r3, r3, #8
 80093a4:	4a1c      	ldr	r2, [pc, #112]	@ (8009418 <xPortStartScheduler+0x138>)
 80093a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80093a8:	4b1b      	ldr	r3, [pc, #108]	@ (8009418 <xPortStartScheduler+0x138>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80093b0:	4a19      	ldr	r2, [pc, #100]	@ (8009418 <xPortStartScheduler+0x138>)
 80093b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	b2da      	uxtb	r2, r3
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80093bc:	4b17      	ldr	r3, [pc, #92]	@ (800941c <xPortStartScheduler+0x13c>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a16      	ldr	r2, [pc, #88]	@ (800941c <xPortStartScheduler+0x13c>)
 80093c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80093c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80093c8:	4b14      	ldr	r3, [pc, #80]	@ (800941c <xPortStartScheduler+0x13c>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a13      	ldr	r2, [pc, #76]	@ (800941c <xPortStartScheduler+0x13c>)
 80093ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80093d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80093d4:	f000 f8da 	bl	800958c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80093d8:	4b11      	ldr	r3, [pc, #68]	@ (8009420 <xPortStartScheduler+0x140>)
 80093da:	2200      	movs	r2, #0
 80093dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80093de:	f000 f8f9 	bl	80095d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80093e2:	4b10      	ldr	r3, [pc, #64]	@ (8009424 <xPortStartScheduler+0x144>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a0f      	ldr	r2, [pc, #60]	@ (8009424 <xPortStartScheduler+0x144>)
 80093e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80093ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80093ee:	f7ff ff63 	bl	80092b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80093f2:	f7ff f831 	bl	8008458 <vTaskSwitchContext>
	prvTaskExitError();
 80093f6:	f7ff ff1d 	bl	8009234 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3718      	adds	r7, #24
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}
 8009404:	e000ed00 	.word	0xe000ed00
 8009408:	410fc271 	.word	0x410fc271
 800940c:	410fc270 	.word	0x410fc270
 8009410:	e000e400 	.word	0xe000e400
 8009414:	200011ac 	.word	0x200011ac
 8009418:	200011b0 	.word	0x200011b0
 800941c:	e000ed20 	.word	0xe000ed20
 8009420:	20000020 	.word	0x20000020
 8009424:	e000ef34 	.word	0xe000ef34

08009428 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
	__asm volatile
 800942e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	607b      	str	r3, [r7, #4]
}
 8009440:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009442:	4b10      	ldr	r3, [pc, #64]	@ (8009484 <vPortEnterCritical+0x5c>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	3301      	adds	r3, #1
 8009448:	4a0e      	ldr	r2, [pc, #56]	@ (8009484 <vPortEnterCritical+0x5c>)
 800944a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800944c:	4b0d      	ldr	r3, [pc, #52]	@ (8009484 <vPortEnterCritical+0x5c>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2b01      	cmp	r3, #1
 8009452:	d110      	bne.n	8009476 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009454:	4b0c      	ldr	r3, [pc, #48]	@ (8009488 <vPortEnterCritical+0x60>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	b2db      	uxtb	r3, r3
 800945a:	2b00      	cmp	r3, #0
 800945c:	d00b      	beq.n	8009476 <vPortEnterCritical+0x4e>
	__asm volatile
 800945e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009462:	f383 8811 	msr	BASEPRI, r3
 8009466:	f3bf 8f6f 	isb	sy
 800946a:	f3bf 8f4f 	dsb	sy
 800946e:	603b      	str	r3, [r7, #0]
}
 8009470:	bf00      	nop
 8009472:	bf00      	nop
 8009474:	e7fd      	b.n	8009472 <vPortEnterCritical+0x4a>
	}
}
 8009476:	bf00      	nop
 8009478:	370c      	adds	r7, #12
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr
 8009482:	bf00      	nop
 8009484:	20000020 	.word	0x20000020
 8009488:	e000ed04 	.word	0xe000ed04

0800948c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009492:	4b12      	ldr	r3, [pc, #72]	@ (80094dc <vPortExitCritical+0x50>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d10b      	bne.n	80094b2 <vPortExitCritical+0x26>
	__asm volatile
 800949a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800949e:	f383 8811 	msr	BASEPRI, r3
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	607b      	str	r3, [r7, #4]
}
 80094ac:	bf00      	nop
 80094ae:	bf00      	nop
 80094b0:	e7fd      	b.n	80094ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80094b2:	4b0a      	ldr	r3, [pc, #40]	@ (80094dc <vPortExitCritical+0x50>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	3b01      	subs	r3, #1
 80094b8:	4a08      	ldr	r2, [pc, #32]	@ (80094dc <vPortExitCritical+0x50>)
 80094ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80094bc:	4b07      	ldr	r3, [pc, #28]	@ (80094dc <vPortExitCritical+0x50>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d105      	bne.n	80094d0 <vPortExitCritical+0x44>
 80094c4:	2300      	movs	r3, #0
 80094c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	f383 8811 	msr	BASEPRI, r3
}
 80094ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80094d0:	bf00      	nop
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr
 80094dc:	20000020 	.word	0x20000020

080094e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80094e0:	f3ef 8009 	mrs	r0, PSP
 80094e4:	f3bf 8f6f 	isb	sy
 80094e8:	4b15      	ldr	r3, [pc, #84]	@ (8009540 <pxCurrentTCBConst>)
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	f01e 0f10 	tst.w	lr, #16
 80094f0:	bf08      	it	eq
 80094f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80094f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094fa:	6010      	str	r0, [r2, #0]
 80094fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009500:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009504:	f380 8811 	msr	BASEPRI, r0
 8009508:	f3bf 8f4f 	dsb	sy
 800950c:	f3bf 8f6f 	isb	sy
 8009510:	f7fe ffa2 	bl	8008458 <vTaskSwitchContext>
 8009514:	f04f 0000 	mov.w	r0, #0
 8009518:	f380 8811 	msr	BASEPRI, r0
 800951c:	bc09      	pop	{r0, r3}
 800951e:	6819      	ldr	r1, [r3, #0]
 8009520:	6808      	ldr	r0, [r1, #0]
 8009522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009526:	f01e 0f10 	tst.w	lr, #16
 800952a:	bf08      	it	eq
 800952c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009530:	f380 8809 	msr	PSP, r0
 8009534:	f3bf 8f6f 	isb	sy
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	f3af 8000 	nop.w

08009540 <pxCurrentTCBConst>:
 8009540:	20000b80 	.word	0x20000b80
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009544:	bf00      	nop
 8009546:	bf00      	nop

08009548 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
	__asm volatile
 800954e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009552:	f383 8811 	msr	BASEPRI, r3
 8009556:	f3bf 8f6f 	isb	sy
 800955a:	f3bf 8f4f 	dsb	sy
 800955e:	607b      	str	r3, [r7, #4]
}
 8009560:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009562:	f7fe febf 	bl	80082e4 <xTaskIncrementTick>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d003      	beq.n	8009574 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800956c:	4b06      	ldr	r3, [pc, #24]	@ (8009588 <xPortSysTickHandler+0x40>)
 800956e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009572:	601a      	str	r2, [r3, #0]
 8009574:	2300      	movs	r3, #0
 8009576:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	f383 8811 	msr	BASEPRI, r3
}
 800957e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009580:	bf00      	nop
 8009582:	3708      	adds	r7, #8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	e000ed04 	.word	0xe000ed04

0800958c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800958c:	b480      	push	{r7}
 800958e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009590:	4b0b      	ldr	r3, [pc, #44]	@ (80095c0 <vPortSetupTimerInterrupt+0x34>)
 8009592:	2200      	movs	r2, #0
 8009594:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009596:	4b0b      	ldr	r3, [pc, #44]	@ (80095c4 <vPortSetupTimerInterrupt+0x38>)
 8009598:	2200      	movs	r2, #0
 800959a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800959c:	4b0a      	ldr	r3, [pc, #40]	@ (80095c8 <vPortSetupTimerInterrupt+0x3c>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a0a      	ldr	r2, [pc, #40]	@ (80095cc <vPortSetupTimerInterrupt+0x40>)
 80095a2:	fba2 2303 	umull	r2, r3, r2, r3
 80095a6:	099b      	lsrs	r3, r3, #6
 80095a8:	4a09      	ldr	r2, [pc, #36]	@ (80095d0 <vPortSetupTimerInterrupt+0x44>)
 80095aa:	3b01      	subs	r3, #1
 80095ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80095ae:	4b04      	ldr	r3, [pc, #16]	@ (80095c0 <vPortSetupTimerInterrupt+0x34>)
 80095b0:	2207      	movs	r2, #7
 80095b2:	601a      	str	r2, [r3, #0]
}
 80095b4:	bf00      	nop
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop
 80095c0:	e000e010 	.word	0xe000e010
 80095c4:	e000e018 	.word	0xe000e018
 80095c8:	20000008 	.word	0x20000008
 80095cc:	10624dd3 	.word	0x10624dd3
 80095d0:	e000e014 	.word	0xe000e014

080095d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80095d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80095e4 <vPortEnableVFP+0x10>
 80095d8:	6801      	ldr	r1, [r0, #0]
 80095da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80095de:	6001      	str	r1, [r0, #0]
 80095e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80095e2:	bf00      	nop
 80095e4:	e000ed88 	.word	0xe000ed88

080095e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80095e8:	b480      	push	{r7}
 80095ea:	b085      	sub	sp, #20
 80095ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80095ee:	f3ef 8305 	mrs	r3, IPSR
 80095f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2b0f      	cmp	r3, #15
 80095f8:	d915      	bls.n	8009626 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80095fa:	4a18      	ldr	r2, [pc, #96]	@ (800965c <vPortValidateInterruptPriority+0x74>)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	4413      	add	r3, r2
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009604:	4b16      	ldr	r3, [pc, #88]	@ (8009660 <vPortValidateInterruptPriority+0x78>)
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	7afa      	ldrb	r2, [r7, #11]
 800960a:	429a      	cmp	r2, r3
 800960c:	d20b      	bcs.n	8009626 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800960e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009612:	f383 8811 	msr	BASEPRI, r3
 8009616:	f3bf 8f6f 	isb	sy
 800961a:	f3bf 8f4f 	dsb	sy
 800961e:	607b      	str	r3, [r7, #4]
}
 8009620:	bf00      	nop
 8009622:	bf00      	nop
 8009624:	e7fd      	b.n	8009622 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009626:	4b0f      	ldr	r3, [pc, #60]	@ (8009664 <vPortValidateInterruptPriority+0x7c>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800962e:	4b0e      	ldr	r3, [pc, #56]	@ (8009668 <vPortValidateInterruptPriority+0x80>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	429a      	cmp	r2, r3
 8009634:	d90b      	bls.n	800964e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800963a:	f383 8811 	msr	BASEPRI, r3
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	f3bf 8f4f 	dsb	sy
 8009646:	603b      	str	r3, [r7, #0]
}
 8009648:	bf00      	nop
 800964a:	bf00      	nop
 800964c:	e7fd      	b.n	800964a <vPortValidateInterruptPriority+0x62>
	}
 800964e:	bf00      	nop
 8009650:	3714      	adds	r7, #20
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr
 800965a:	bf00      	nop
 800965c:	e000e3f0 	.word	0xe000e3f0
 8009660:	200011ac 	.word	0x200011ac
 8009664:	e000ed0c 	.word	0xe000ed0c
 8009668:	200011b0 	.word	0x200011b0

0800966c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b08a      	sub	sp, #40	@ 0x28
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009674:	2300      	movs	r3, #0
 8009676:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009678:	f7fe fd78 	bl	800816c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800967c:	4b5c      	ldr	r3, [pc, #368]	@ (80097f0 <pvPortMalloc+0x184>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d101      	bne.n	8009688 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009684:	f000 f924 	bl	80098d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009688:	4b5a      	ldr	r3, [pc, #360]	@ (80097f4 <pvPortMalloc+0x188>)
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4013      	ands	r3, r2
 8009690:	2b00      	cmp	r3, #0
 8009692:	f040 8095 	bne.w	80097c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d01e      	beq.n	80096da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800969c:	2208      	movs	r2, #8
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4413      	add	r3, r2
 80096a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f003 0307 	and.w	r3, r3, #7
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d015      	beq.n	80096da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f023 0307 	bic.w	r3, r3, #7
 80096b4:	3308      	adds	r3, #8
 80096b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f003 0307 	and.w	r3, r3, #7
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00b      	beq.n	80096da <pvPortMalloc+0x6e>
	__asm volatile
 80096c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096c6:	f383 8811 	msr	BASEPRI, r3
 80096ca:	f3bf 8f6f 	isb	sy
 80096ce:	f3bf 8f4f 	dsb	sy
 80096d2:	617b      	str	r3, [r7, #20]
}
 80096d4:	bf00      	nop
 80096d6:	bf00      	nop
 80096d8:	e7fd      	b.n	80096d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d06f      	beq.n	80097c0 <pvPortMalloc+0x154>
 80096e0:	4b45      	ldr	r3, [pc, #276]	@ (80097f8 <pvPortMalloc+0x18c>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d86a      	bhi.n	80097c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80096ea:	4b44      	ldr	r3, [pc, #272]	@ (80097fc <pvPortMalloc+0x190>)
 80096ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80096ee:	4b43      	ldr	r3, [pc, #268]	@ (80097fc <pvPortMalloc+0x190>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096f4:	e004      	b.n	8009700 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80096f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80096fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	429a      	cmp	r2, r3
 8009708:	d903      	bls.n	8009712 <pvPortMalloc+0xa6>
 800970a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d1f1      	bne.n	80096f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009712:	4b37      	ldr	r3, [pc, #220]	@ (80097f0 <pvPortMalloc+0x184>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009718:	429a      	cmp	r2, r3
 800971a:	d051      	beq.n	80097c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800971c:	6a3b      	ldr	r3, [r7, #32]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2208      	movs	r2, #8
 8009722:	4413      	add	r3, r2
 8009724:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	6a3b      	ldr	r3, [r7, #32]
 800972c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800972e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009730:	685a      	ldr	r2, [r3, #4]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	1ad2      	subs	r2, r2, r3
 8009736:	2308      	movs	r3, #8
 8009738:	005b      	lsls	r3, r3, #1
 800973a:	429a      	cmp	r2, r3
 800973c:	d920      	bls.n	8009780 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800973e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4413      	add	r3, r2
 8009744:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	f003 0307 	and.w	r3, r3, #7
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00b      	beq.n	8009768 <pvPortMalloc+0xfc>
	__asm volatile
 8009750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009754:	f383 8811 	msr	BASEPRI, r3
 8009758:	f3bf 8f6f 	isb	sy
 800975c:	f3bf 8f4f 	dsb	sy
 8009760:	613b      	str	r3, [r7, #16]
}
 8009762:	bf00      	nop
 8009764:	bf00      	nop
 8009766:	e7fd      	b.n	8009764 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800976a:	685a      	ldr	r2, [r3, #4]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	1ad2      	subs	r2, r2, r3
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800977a:	69b8      	ldr	r0, [r7, #24]
 800977c:	f000 f90a 	bl	8009994 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009780:	4b1d      	ldr	r3, [pc, #116]	@ (80097f8 <pvPortMalloc+0x18c>)
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	1ad3      	subs	r3, r2, r3
 800978a:	4a1b      	ldr	r2, [pc, #108]	@ (80097f8 <pvPortMalloc+0x18c>)
 800978c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800978e:	4b1a      	ldr	r3, [pc, #104]	@ (80097f8 <pvPortMalloc+0x18c>)
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	4b1b      	ldr	r3, [pc, #108]	@ (8009800 <pvPortMalloc+0x194>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	429a      	cmp	r2, r3
 8009798:	d203      	bcs.n	80097a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800979a:	4b17      	ldr	r3, [pc, #92]	@ (80097f8 <pvPortMalloc+0x18c>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a18      	ldr	r2, [pc, #96]	@ (8009800 <pvPortMalloc+0x194>)
 80097a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80097a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a4:	685a      	ldr	r2, [r3, #4]
 80097a6:	4b13      	ldr	r3, [pc, #76]	@ (80097f4 <pvPortMalloc+0x188>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	431a      	orrs	r2, r3
 80097ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80097b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b2:	2200      	movs	r2, #0
 80097b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80097b6:	4b13      	ldr	r3, [pc, #76]	@ (8009804 <pvPortMalloc+0x198>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	3301      	adds	r3, #1
 80097bc:	4a11      	ldr	r2, [pc, #68]	@ (8009804 <pvPortMalloc+0x198>)
 80097be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80097c0:	f7fe fce2 	bl	8008188 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	f003 0307 	and.w	r3, r3, #7
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00b      	beq.n	80097e6 <pvPortMalloc+0x17a>
	__asm volatile
 80097ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d2:	f383 8811 	msr	BASEPRI, r3
 80097d6:	f3bf 8f6f 	isb	sy
 80097da:	f3bf 8f4f 	dsb	sy
 80097de:	60fb      	str	r3, [r7, #12]
}
 80097e0:	bf00      	nop
 80097e2:	bf00      	nop
 80097e4:	e7fd      	b.n	80097e2 <pvPortMalloc+0x176>
	return pvReturn;
 80097e6:	69fb      	ldr	r3, [r7, #28]
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3728      	adds	r7, #40	@ 0x28
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	20001dbc 	.word	0x20001dbc
 80097f4:	20001dd0 	.word	0x20001dd0
 80097f8:	20001dc0 	.word	0x20001dc0
 80097fc:	20001db4 	.word	0x20001db4
 8009800:	20001dc4 	.word	0x20001dc4
 8009804:	20001dc8 	.word	0x20001dc8

08009808 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b086      	sub	sp, #24
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d04f      	beq.n	80098ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800981a:	2308      	movs	r3, #8
 800981c:	425b      	negs	r3, r3
 800981e:	697a      	ldr	r2, [r7, #20]
 8009820:	4413      	add	r3, r2
 8009822:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	685a      	ldr	r2, [r3, #4]
 800982c:	4b25      	ldr	r3, [pc, #148]	@ (80098c4 <vPortFree+0xbc>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4013      	ands	r3, r2
 8009832:	2b00      	cmp	r3, #0
 8009834:	d10b      	bne.n	800984e <vPortFree+0x46>
	__asm volatile
 8009836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800983a:	f383 8811 	msr	BASEPRI, r3
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	f3bf 8f4f 	dsb	sy
 8009846:	60fb      	str	r3, [r7, #12]
}
 8009848:	bf00      	nop
 800984a:	bf00      	nop
 800984c:	e7fd      	b.n	800984a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d00b      	beq.n	800986e <vPortFree+0x66>
	__asm volatile
 8009856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800985a:	f383 8811 	msr	BASEPRI, r3
 800985e:	f3bf 8f6f 	isb	sy
 8009862:	f3bf 8f4f 	dsb	sy
 8009866:	60bb      	str	r3, [r7, #8]
}
 8009868:	bf00      	nop
 800986a:	bf00      	nop
 800986c:	e7fd      	b.n	800986a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	685a      	ldr	r2, [r3, #4]
 8009872:	4b14      	ldr	r3, [pc, #80]	@ (80098c4 <vPortFree+0xbc>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4013      	ands	r3, r2
 8009878:	2b00      	cmp	r3, #0
 800987a:	d01e      	beq.n	80098ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d11a      	bne.n	80098ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	685a      	ldr	r2, [r3, #4]
 8009888:	4b0e      	ldr	r3, [pc, #56]	@ (80098c4 <vPortFree+0xbc>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	43db      	mvns	r3, r3
 800988e:	401a      	ands	r2, r3
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009894:	f7fe fc6a 	bl	800816c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	685a      	ldr	r2, [r3, #4]
 800989c:	4b0a      	ldr	r3, [pc, #40]	@ (80098c8 <vPortFree+0xc0>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4413      	add	r3, r2
 80098a2:	4a09      	ldr	r2, [pc, #36]	@ (80098c8 <vPortFree+0xc0>)
 80098a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80098a6:	6938      	ldr	r0, [r7, #16]
 80098a8:	f000 f874 	bl	8009994 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80098ac:	4b07      	ldr	r3, [pc, #28]	@ (80098cc <vPortFree+0xc4>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	3301      	adds	r3, #1
 80098b2:	4a06      	ldr	r2, [pc, #24]	@ (80098cc <vPortFree+0xc4>)
 80098b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80098b6:	f7fe fc67 	bl	8008188 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80098ba:	bf00      	nop
 80098bc:	3718      	adds	r7, #24
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	20001dd0 	.word	0x20001dd0
 80098c8:	20001dc0 	.word	0x20001dc0
 80098cc:	20001dcc 	.word	0x20001dcc

080098d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80098d0:	b480      	push	{r7}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80098d6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80098da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80098dc:	4b27      	ldr	r3, [pc, #156]	@ (800997c <prvHeapInit+0xac>)
 80098de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f003 0307 	and.w	r3, r3, #7
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00c      	beq.n	8009904 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	3307      	adds	r3, #7
 80098ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f023 0307 	bic.w	r3, r3, #7
 80098f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80098f8:	68ba      	ldr	r2, [r7, #8]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	1ad3      	subs	r3, r2, r3
 80098fe:	4a1f      	ldr	r2, [pc, #124]	@ (800997c <prvHeapInit+0xac>)
 8009900:	4413      	add	r3, r2
 8009902:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009908:	4a1d      	ldr	r2, [pc, #116]	@ (8009980 <prvHeapInit+0xb0>)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800990e:	4b1c      	ldr	r3, [pc, #112]	@ (8009980 <prvHeapInit+0xb0>)
 8009910:	2200      	movs	r2, #0
 8009912:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	68ba      	ldr	r2, [r7, #8]
 8009918:	4413      	add	r3, r2
 800991a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800991c:	2208      	movs	r2, #8
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	1a9b      	subs	r3, r3, r2
 8009922:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f023 0307 	bic.w	r3, r3, #7
 800992a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	4a15      	ldr	r2, [pc, #84]	@ (8009984 <prvHeapInit+0xb4>)
 8009930:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009932:	4b14      	ldr	r3, [pc, #80]	@ (8009984 <prvHeapInit+0xb4>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2200      	movs	r2, #0
 8009938:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800993a:	4b12      	ldr	r3, [pc, #72]	@ (8009984 <prvHeapInit+0xb4>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2200      	movs	r2, #0
 8009940:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	68fa      	ldr	r2, [r7, #12]
 800994a:	1ad2      	subs	r2, r2, r3
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009950:	4b0c      	ldr	r3, [pc, #48]	@ (8009984 <prvHeapInit+0xb4>)
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	4a0a      	ldr	r2, [pc, #40]	@ (8009988 <prvHeapInit+0xb8>)
 800995e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	4a09      	ldr	r2, [pc, #36]	@ (800998c <prvHeapInit+0xbc>)
 8009966:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009968:	4b09      	ldr	r3, [pc, #36]	@ (8009990 <prvHeapInit+0xc0>)
 800996a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800996e:	601a      	str	r2, [r3, #0]
}
 8009970:	bf00      	nop
 8009972:	3714      	adds	r7, #20
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr
 800997c:	200011b4 	.word	0x200011b4
 8009980:	20001db4 	.word	0x20001db4
 8009984:	20001dbc 	.word	0x20001dbc
 8009988:	20001dc4 	.word	0x20001dc4
 800998c:	20001dc0 	.word	0x20001dc0
 8009990:	20001dd0 	.word	0x20001dd0

08009994 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009994:	b480      	push	{r7}
 8009996:	b085      	sub	sp, #20
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800999c:	4b28      	ldr	r3, [pc, #160]	@ (8009a40 <prvInsertBlockIntoFreeList+0xac>)
 800999e:	60fb      	str	r3, [r7, #12]
 80099a0:	e002      	b.n	80099a8 <prvInsertBlockIntoFreeList+0x14>
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	60fb      	str	r3, [r7, #12]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d8f7      	bhi.n	80099a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	68ba      	ldr	r2, [r7, #8]
 80099bc:	4413      	add	r3, r2
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d108      	bne.n	80099d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	685a      	ldr	r2, [r3, #4]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	441a      	add	r2, r3
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	68ba      	ldr	r2, [r7, #8]
 80099e0:	441a      	add	r2, r3
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d118      	bne.n	8009a1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	4b15      	ldr	r3, [pc, #84]	@ (8009a44 <prvInsertBlockIntoFreeList+0xb0>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d00d      	beq.n	8009a12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	685a      	ldr	r2, [r3, #4]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	441a      	add	r2, r3
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	601a      	str	r2, [r3, #0]
 8009a10:	e008      	b.n	8009a24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009a12:	4b0c      	ldr	r3, [pc, #48]	@ (8009a44 <prvInsertBlockIntoFreeList+0xb0>)
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	601a      	str	r2, [r3, #0]
 8009a1a:	e003      	b.n	8009a24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009a24:	68fa      	ldr	r2, [r7, #12]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d002      	beq.n	8009a32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a32:	bf00      	nop
 8009a34:	3714      	adds	r7, #20
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	20001db4 	.word	0x20001db4
 8009a44:	20001dbc 	.word	0x20001dbc

08009a48 <__cvt>:
 8009a48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a4c:	ec57 6b10 	vmov	r6, r7, d0
 8009a50:	2f00      	cmp	r7, #0
 8009a52:	460c      	mov	r4, r1
 8009a54:	4619      	mov	r1, r3
 8009a56:	463b      	mov	r3, r7
 8009a58:	bfbb      	ittet	lt
 8009a5a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009a5e:	461f      	movlt	r7, r3
 8009a60:	2300      	movge	r3, #0
 8009a62:	232d      	movlt	r3, #45	@ 0x2d
 8009a64:	700b      	strb	r3, [r1, #0]
 8009a66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a68:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009a6c:	4691      	mov	r9, r2
 8009a6e:	f023 0820 	bic.w	r8, r3, #32
 8009a72:	bfbc      	itt	lt
 8009a74:	4632      	movlt	r2, r6
 8009a76:	4616      	movlt	r6, r2
 8009a78:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009a7c:	d005      	beq.n	8009a8a <__cvt+0x42>
 8009a7e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009a82:	d100      	bne.n	8009a86 <__cvt+0x3e>
 8009a84:	3401      	adds	r4, #1
 8009a86:	2102      	movs	r1, #2
 8009a88:	e000      	b.n	8009a8c <__cvt+0x44>
 8009a8a:	2103      	movs	r1, #3
 8009a8c:	ab03      	add	r3, sp, #12
 8009a8e:	9301      	str	r3, [sp, #4]
 8009a90:	ab02      	add	r3, sp, #8
 8009a92:	9300      	str	r3, [sp, #0]
 8009a94:	ec47 6b10 	vmov	d0, r6, r7
 8009a98:	4653      	mov	r3, sl
 8009a9a:	4622      	mov	r2, r4
 8009a9c:	f000 ffb0 	bl	800aa00 <_dtoa_r>
 8009aa0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009aa4:	4605      	mov	r5, r0
 8009aa6:	d119      	bne.n	8009adc <__cvt+0x94>
 8009aa8:	f019 0f01 	tst.w	r9, #1
 8009aac:	d00e      	beq.n	8009acc <__cvt+0x84>
 8009aae:	eb00 0904 	add.w	r9, r0, r4
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	4630      	mov	r0, r6
 8009ab8:	4639      	mov	r1, r7
 8009aba:	f7f6 ffdd 	bl	8000a78 <__aeabi_dcmpeq>
 8009abe:	b108      	cbz	r0, 8009ac4 <__cvt+0x7c>
 8009ac0:	f8cd 900c 	str.w	r9, [sp, #12]
 8009ac4:	2230      	movs	r2, #48	@ 0x30
 8009ac6:	9b03      	ldr	r3, [sp, #12]
 8009ac8:	454b      	cmp	r3, r9
 8009aca:	d31e      	bcc.n	8009b0a <__cvt+0xc2>
 8009acc:	9b03      	ldr	r3, [sp, #12]
 8009ace:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ad0:	1b5b      	subs	r3, r3, r5
 8009ad2:	4628      	mov	r0, r5
 8009ad4:	6013      	str	r3, [r2, #0]
 8009ad6:	b004      	add	sp, #16
 8009ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009adc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009ae0:	eb00 0904 	add.w	r9, r0, r4
 8009ae4:	d1e5      	bne.n	8009ab2 <__cvt+0x6a>
 8009ae6:	7803      	ldrb	r3, [r0, #0]
 8009ae8:	2b30      	cmp	r3, #48	@ 0x30
 8009aea:	d10a      	bne.n	8009b02 <__cvt+0xba>
 8009aec:	2200      	movs	r2, #0
 8009aee:	2300      	movs	r3, #0
 8009af0:	4630      	mov	r0, r6
 8009af2:	4639      	mov	r1, r7
 8009af4:	f7f6 ffc0 	bl	8000a78 <__aeabi_dcmpeq>
 8009af8:	b918      	cbnz	r0, 8009b02 <__cvt+0xba>
 8009afa:	f1c4 0401 	rsb	r4, r4, #1
 8009afe:	f8ca 4000 	str.w	r4, [sl]
 8009b02:	f8da 3000 	ldr.w	r3, [sl]
 8009b06:	4499      	add	r9, r3
 8009b08:	e7d3      	b.n	8009ab2 <__cvt+0x6a>
 8009b0a:	1c59      	adds	r1, r3, #1
 8009b0c:	9103      	str	r1, [sp, #12]
 8009b0e:	701a      	strb	r2, [r3, #0]
 8009b10:	e7d9      	b.n	8009ac6 <__cvt+0x7e>

08009b12 <__exponent>:
 8009b12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b14:	2900      	cmp	r1, #0
 8009b16:	bfba      	itte	lt
 8009b18:	4249      	neglt	r1, r1
 8009b1a:	232d      	movlt	r3, #45	@ 0x2d
 8009b1c:	232b      	movge	r3, #43	@ 0x2b
 8009b1e:	2909      	cmp	r1, #9
 8009b20:	7002      	strb	r2, [r0, #0]
 8009b22:	7043      	strb	r3, [r0, #1]
 8009b24:	dd29      	ble.n	8009b7a <__exponent+0x68>
 8009b26:	f10d 0307 	add.w	r3, sp, #7
 8009b2a:	461d      	mov	r5, r3
 8009b2c:	270a      	movs	r7, #10
 8009b2e:	461a      	mov	r2, r3
 8009b30:	fbb1 f6f7 	udiv	r6, r1, r7
 8009b34:	fb07 1416 	mls	r4, r7, r6, r1
 8009b38:	3430      	adds	r4, #48	@ 0x30
 8009b3a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009b3e:	460c      	mov	r4, r1
 8009b40:	2c63      	cmp	r4, #99	@ 0x63
 8009b42:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009b46:	4631      	mov	r1, r6
 8009b48:	dcf1      	bgt.n	8009b2e <__exponent+0x1c>
 8009b4a:	3130      	adds	r1, #48	@ 0x30
 8009b4c:	1e94      	subs	r4, r2, #2
 8009b4e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009b52:	1c41      	adds	r1, r0, #1
 8009b54:	4623      	mov	r3, r4
 8009b56:	42ab      	cmp	r3, r5
 8009b58:	d30a      	bcc.n	8009b70 <__exponent+0x5e>
 8009b5a:	f10d 0309 	add.w	r3, sp, #9
 8009b5e:	1a9b      	subs	r3, r3, r2
 8009b60:	42ac      	cmp	r4, r5
 8009b62:	bf88      	it	hi
 8009b64:	2300      	movhi	r3, #0
 8009b66:	3302      	adds	r3, #2
 8009b68:	4403      	add	r3, r0
 8009b6a:	1a18      	subs	r0, r3, r0
 8009b6c:	b003      	add	sp, #12
 8009b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b70:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009b74:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009b78:	e7ed      	b.n	8009b56 <__exponent+0x44>
 8009b7a:	2330      	movs	r3, #48	@ 0x30
 8009b7c:	3130      	adds	r1, #48	@ 0x30
 8009b7e:	7083      	strb	r3, [r0, #2]
 8009b80:	70c1      	strb	r1, [r0, #3]
 8009b82:	1d03      	adds	r3, r0, #4
 8009b84:	e7f1      	b.n	8009b6a <__exponent+0x58>
	...

08009b88 <_printf_float>:
 8009b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b8c:	b08d      	sub	sp, #52	@ 0x34
 8009b8e:	460c      	mov	r4, r1
 8009b90:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009b94:	4616      	mov	r6, r2
 8009b96:	461f      	mov	r7, r3
 8009b98:	4605      	mov	r5, r0
 8009b9a:	f000 fdc5 	bl	800a728 <_localeconv_r>
 8009b9e:	6803      	ldr	r3, [r0, #0]
 8009ba0:	9304      	str	r3, [sp, #16]
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7f6 fb3c 	bl	8000220 <strlen>
 8009ba8:	2300      	movs	r3, #0
 8009baa:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bac:	f8d8 3000 	ldr.w	r3, [r8]
 8009bb0:	9005      	str	r0, [sp, #20]
 8009bb2:	3307      	adds	r3, #7
 8009bb4:	f023 0307 	bic.w	r3, r3, #7
 8009bb8:	f103 0208 	add.w	r2, r3, #8
 8009bbc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009bc0:	f8d4 b000 	ldr.w	fp, [r4]
 8009bc4:	f8c8 2000 	str.w	r2, [r8]
 8009bc8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009bcc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009bd0:	9307      	str	r3, [sp, #28]
 8009bd2:	f8cd 8018 	str.w	r8, [sp, #24]
 8009bd6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009bda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bde:	4b9c      	ldr	r3, [pc, #624]	@ (8009e50 <_printf_float+0x2c8>)
 8009be0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009be4:	f7f6 ff7a 	bl	8000adc <__aeabi_dcmpun>
 8009be8:	bb70      	cbnz	r0, 8009c48 <_printf_float+0xc0>
 8009bea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bee:	4b98      	ldr	r3, [pc, #608]	@ (8009e50 <_printf_float+0x2c8>)
 8009bf0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009bf4:	f7f6 ff54 	bl	8000aa0 <__aeabi_dcmple>
 8009bf8:	bb30      	cbnz	r0, 8009c48 <_printf_float+0xc0>
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	4640      	mov	r0, r8
 8009c00:	4649      	mov	r1, r9
 8009c02:	f7f6 ff43 	bl	8000a8c <__aeabi_dcmplt>
 8009c06:	b110      	cbz	r0, 8009c0e <_printf_float+0x86>
 8009c08:	232d      	movs	r3, #45	@ 0x2d
 8009c0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c0e:	4a91      	ldr	r2, [pc, #580]	@ (8009e54 <_printf_float+0x2cc>)
 8009c10:	4b91      	ldr	r3, [pc, #580]	@ (8009e58 <_printf_float+0x2d0>)
 8009c12:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009c16:	bf8c      	ite	hi
 8009c18:	4690      	movhi	r8, r2
 8009c1a:	4698      	movls	r8, r3
 8009c1c:	2303      	movs	r3, #3
 8009c1e:	6123      	str	r3, [r4, #16]
 8009c20:	f02b 0304 	bic.w	r3, fp, #4
 8009c24:	6023      	str	r3, [r4, #0]
 8009c26:	f04f 0900 	mov.w	r9, #0
 8009c2a:	9700      	str	r7, [sp, #0]
 8009c2c:	4633      	mov	r3, r6
 8009c2e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009c30:	4621      	mov	r1, r4
 8009c32:	4628      	mov	r0, r5
 8009c34:	f000 f9d2 	bl	8009fdc <_printf_common>
 8009c38:	3001      	adds	r0, #1
 8009c3a:	f040 808d 	bne.w	8009d58 <_printf_float+0x1d0>
 8009c3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c42:	b00d      	add	sp, #52	@ 0x34
 8009c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c48:	4642      	mov	r2, r8
 8009c4a:	464b      	mov	r3, r9
 8009c4c:	4640      	mov	r0, r8
 8009c4e:	4649      	mov	r1, r9
 8009c50:	f7f6 ff44 	bl	8000adc <__aeabi_dcmpun>
 8009c54:	b140      	cbz	r0, 8009c68 <_printf_float+0xe0>
 8009c56:	464b      	mov	r3, r9
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	bfbc      	itt	lt
 8009c5c:	232d      	movlt	r3, #45	@ 0x2d
 8009c5e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009c62:	4a7e      	ldr	r2, [pc, #504]	@ (8009e5c <_printf_float+0x2d4>)
 8009c64:	4b7e      	ldr	r3, [pc, #504]	@ (8009e60 <_printf_float+0x2d8>)
 8009c66:	e7d4      	b.n	8009c12 <_printf_float+0x8a>
 8009c68:	6863      	ldr	r3, [r4, #4]
 8009c6a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009c6e:	9206      	str	r2, [sp, #24]
 8009c70:	1c5a      	adds	r2, r3, #1
 8009c72:	d13b      	bne.n	8009cec <_printf_float+0x164>
 8009c74:	2306      	movs	r3, #6
 8009c76:	6063      	str	r3, [r4, #4]
 8009c78:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	6022      	str	r2, [r4, #0]
 8009c80:	9303      	str	r3, [sp, #12]
 8009c82:	ab0a      	add	r3, sp, #40	@ 0x28
 8009c84:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009c88:	ab09      	add	r3, sp, #36	@ 0x24
 8009c8a:	9300      	str	r3, [sp, #0]
 8009c8c:	6861      	ldr	r1, [r4, #4]
 8009c8e:	ec49 8b10 	vmov	d0, r8, r9
 8009c92:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009c96:	4628      	mov	r0, r5
 8009c98:	f7ff fed6 	bl	8009a48 <__cvt>
 8009c9c:	9b06      	ldr	r3, [sp, #24]
 8009c9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ca0:	2b47      	cmp	r3, #71	@ 0x47
 8009ca2:	4680      	mov	r8, r0
 8009ca4:	d129      	bne.n	8009cfa <_printf_float+0x172>
 8009ca6:	1cc8      	adds	r0, r1, #3
 8009ca8:	db02      	blt.n	8009cb0 <_printf_float+0x128>
 8009caa:	6863      	ldr	r3, [r4, #4]
 8009cac:	4299      	cmp	r1, r3
 8009cae:	dd41      	ble.n	8009d34 <_printf_float+0x1ac>
 8009cb0:	f1aa 0a02 	sub.w	sl, sl, #2
 8009cb4:	fa5f fa8a 	uxtb.w	sl, sl
 8009cb8:	3901      	subs	r1, #1
 8009cba:	4652      	mov	r2, sl
 8009cbc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009cc0:	9109      	str	r1, [sp, #36]	@ 0x24
 8009cc2:	f7ff ff26 	bl	8009b12 <__exponent>
 8009cc6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009cc8:	1813      	adds	r3, r2, r0
 8009cca:	2a01      	cmp	r2, #1
 8009ccc:	4681      	mov	r9, r0
 8009cce:	6123      	str	r3, [r4, #16]
 8009cd0:	dc02      	bgt.n	8009cd8 <_printf_float+0x150>
 8009cd2:	6822      	ldr	r2, [r4, #0]
 8009cd4:	07d2      	lsls	r2, r2, #31
 8009cd6:	d501      	bpl.n	8009cdc <_printf_float+0x154>
 8009cd8:	3301      	adds	r3, #1
 8009cda:	6123      	str	r3, [r4, #16]
 8009cdc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d0a2      	beq.n	8009c2a <_printf_float+0xa2>
 8009ce4:	232d      	movs	r3, #45	@ 0x2d
 8009ce6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cea:	e79e      	b.n	8009c2a <_printf_float+0xa2>
 8009cec:	9a06      	ldr	r2, [sp, #24]
 8009cee:	2a47      	cmp	r2, #71	@ 0x47
 8009cf0:	d1c2      	bne.n	8009c78 <_printf_float+0xf0>
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d1c0      	bne.n	8009c78 <_printf_float+0xf0>
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e7bd      	b.n	8009c76 <_printf_float+0xee>
 8009cfa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009cfe:	d9db      	bls.n	8009cb8 <_printf_float+0x130>
 8009d00:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009d04:	d118      	bne.n	8009d38 <_printf_float+0x1b0>
 8009d06:	2900      	cmp	r1, #0
 8009d08:	6863      	ldr	r3, [r4, #4]
 8009d0a:	dd0b      	ble.n	8009d24 <_printf_float+0x19c>
 8009d0c:	6121      	str	r1, [r4, #16]
 8009d0e:	b913      	cbnz	r3, 8009d16 <_printf_float+0x18e>
 8009d10:	6822      	ldr	r2, [r4, #0]
 8009d12:	07d0      	lsls	r0, r2, #31
 8009d14:	d502      	bpl.n	8009d1c <_printf_float+0x194>
 8009d16:	3301      	adds	r3, #1
 8009d18:	440b      	add	r3, r1
 8009d1a:	6123      	str	r3, [r4, #16]
 8009d1c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009d1e:	f04f 0900 	mov.w	r9, #0
 8009d22:	e7db      	b.n	8009cdc <_printf_float+0x154>
 8009d24:	b913      	cbnz	r3, 8009d2c <_printf_float+0x1a4>
 8009d26:	6822      	ldr	r2, [r4, #0]
 8009d28:	07d2      	lsls	r2, r2, #31
 8009d2a:	d501      	bpl.n	8009d30 <_printf_float+0x1a8>
 8009d2c:	3302      	adds	r3, #2
 8009d2e:	e7f4      	b.n	8009d1a <_printf_float+0x192>
 8009d30:	2301      	movs	r3, #1
 8009d32:	e7f2      	b.n	8009d1a <_printf_float+0x192>
 8009d34:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009d38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d3a:	4299      	cmp	r1, r3
 8009d3c:	db05      	blt.n	8009d4a <_printf_float+0x1c2>
 8009d3e:	6823      	ldr	r3, [r4, #0]
 8009d40:	6121      	str	r1, [r4, #16]
 8009d42:	07d8      	lsls	r0, r3, #31
 8009d44:	d5ea      	bpl.n	8009d1c <_printf_float+0x194>
 8009d46:	1c4b      	adds	r3, r1, #1
 8009d48:	e7e7      	b.n	8009d1a <_printf_float+0x192>
 8009d4a:	2900      	cmp	r1, #0
 8009d4c:	bfd4      	ite	le
 8009d4e:	f1c1 0202 	rsble	r2, r1, #2
 8009d52:	2201      	movgt	r2, #1
 8009d54:	4413      	add	r3, r2
 8009d56:	e7e0      	b.n	8009d1a <_printf_float+0x192>
 8009d58:	6823      	ldr	r3, [r4, #0]
 8009d5a:	055a      	lsls	r2, r3, #21
 8009d5c:	d407      	bmi.n	8009d6e <_printf_float+0x1e6>
 8009d5e:	6923      	ldr	r3, [r4, #16]
 8009d60:	4642      	mov	r2, r8
 8009d62:	4631      	mov	r1, r6
 8009d64:	4628      	mov	r0, r5
 8009d66:	47b8      	blx	r7
 8009d68:	3001      	adds	r0, #1
 8009d6a:	d12b      	bne.n	8009dc4 <_printf_float+0x23c>
 8009d6c:	e767      	b.n	8009c3e <_printf_float+0xb6>
 8009d6e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009d72:	f240 80dd 	bls.w	8009f30 <_printf_float+0x3a8>
 8009d76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	f7f6 fe7b 	bl	8000a78 <__aeabi_dcmpeq>
 8009d82:	2800      	cmp	r0, #0
 8009d84:	d033      	beq.n	8009dee <_printf_float+0x266>
 8009d86:	4a37      	ldr	r2, [pc, #220]	@ (8009e64 <_printf_float+0x2dc>)
 8009d88:	2301      	movs	r3, #1
 8009d8a:	4631      	mov	r1, r6
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	47b8      	blx	r7
 8009d90:	3001      	adds	r0, #1
 8009d92:	f43f af54 	beq.w	8009c3e <_printf_float+0xb6>
 8009d96:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009d9a:	4543      	cmp	r3, r8
 8009d9c:	db02      	blt.n	8009da4 <_printf_float+0x21c>
 8009d9e:	6823      	ldr	r3, [r4, #0]
 8009da0:	07d8      	lsls	r0, r3, #31
 8009da2:	d50f      	bpl.n	8009dc4 <_printf_float+0x23c>
 8009da4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009da8:	4631      	mov	r1, r6
 8009daa:	4628      	mov	r0, r5
 8009dac:	47b8      	blx	r7
 8009dae:	3001      	adds	r0, #1
 8009db0:	f43f af45 	beq.w	8009c3e <_printf_float+0xb6>
 8009db4:	f04f 0900 	mov.w	r9, #0
 8009db8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009dbc:	f104 0a1a 	add.w	sl, r4, #26
 8009dc0:	45c8      	cmp	r8, r9
 8009dc2:	dc09      	bgt.n	8009dd8 <_printf_float+0x250>
 8009dc4:	6823      	ldr	r3, [r4, #0]
 8009dc6:	079b      	lsls	r3, r3, #30
 8009dc8:	f100 8103 	bmi.w	8009fd2 <_printf_float+0x44a>
 8009dcc:	68e0      	ldr	r0, [r4, #12]
 8009dce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009dd0:	4298      	cmp	r0, r3
 8009dd2:	bfb8      	it	lt
 8009dd4:	4618      	movlt	r0, r3
 8009dd6:	e734      	b.n	8009c42 <_printf_float+0xba>
 8009dd8:	2301      	movs	r3, #1
 8009dda:	4652      	mov	r2, sl
 8009ddc:	4631      	mov	r1, r6
 8009dde:	4628      	mov	r0, r5
 8009de0:	47b8      	blx	r7
 8009de2:	3001      	adds	r0, #1
 8009de4:	f43f af2b 	beq.w	8009c3e <_printf_float+0xb6>
 8009de8:	f109 0901 	add.w	r9, r9, #1
 8009dec:	e7e8      	b.n	8009dc0 <_printf_float+0x238>
 8009dee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	dc39      	bgt.n	8009e68 <_printf_float+0x2e0>
 8009df4:	4a1b      	ldr	r2, [pc, #108]	@ (8009e64 <_printf_float+0x2dc>)
 8009df6:	2301      	movs	r3, #1
 8009df8:	4631      	mov	r1, r6
 8009dfa:	4628      	mov	r0, r5
 8009dfc:	47b8      	blx	r7
 8009dfe:	3001      	adds	r0, #1
 8009e00:	f43f af1d 	beq.w	8009c3e <_printf_float+0xb6>
 8009e04:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009e08:	ea59 0303 	orrs.w	r3, r9, r3
 8009e0c:	d102      	bne.n	8009e14 <_printf_float+0x28c>
 8009e0e:	6823      	ldr	r3, [r4, #0]
 8009e10:	07d9      	lsls	r1, r3, #31
 8009e12:	d5d7      	bpl.n	8009dc4 <_printf_float+0x23c>
 8009e14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e18:	4631      	mov	r1, r6
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	47b8      	blx	r7
 8009e1e:	3001      	adds	r0, #1
 8009e20:	f43f af0d 	beq.w	8009c3e <_printf_float+0xb6>
 8009e24:	f04f 0a00 	mov.w	sl, #0
 8009e28:	f104 0b1a 	add.w	fp, r4, #26
 8009e2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e2e:	425b      	negs	r3, r3
 8009e30:	4553      	cmp	r3, sl
 8009e32:	dc01      	bgt.n	8009e38 <_printf_float+0x2b0>
 8009e34:	464b      	mov	r3, r9
 8009e36:	e793      	b.n	8009d60 <_printf_float+0x1d8>
 8009e38:	2301      	movs	r3, #1
 8009e3a:	465a      	mov	r2, fp
 8009e3c:	4631      	mov	r1, r6
 8009e3e:	4628      	mov	r0, r5
 8009e40:	47b8      	blx	r7
 8009e42:	3001      	adds	r0, #1
 8009e44:	f43f aefb 	beq.w	8009c3e <_printf_float+0xb6>
 8009e48:	f10a 0a01 	add.w	sl, sl, #1
 8009e4c:	e7ee      	b.n	8009e2c <_printf_float+0x2a4>
 8009e4e:	bf00      	nop
 8009e50:	7fefffff 	.word	0x7fefffff
 8009e54:	0800ca14 	.word	0x0800ca14
 8009e58:	0800ca10 	.word	0x0800ca10
 8009e5c:	0800ca1c 	.word	0x0800ca1c
 8009e60:	0800ca18 	.word	0x0800ca18
 8009e64:	0800ca20 	.word	0x0800ca20
 8009e68:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009e6a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009e6e:	4553      	cmp	r3, sl
 8009e70:	bfa8      	it	ge
 8009e72:	4653      	movge	r3, sl
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	4699      	mov	r9, r3
 8009e78:	dc36      	bgt.n	8009ee8 <_printf_float+0x360>
 8009e7a:	f04f 0b00 	mov.w	fp, #0
 8009e7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e82:	f104 021a 	add.w	r2, r4, #26
 8009e86:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009e88:	9306      	str	r3, [sp, #24]
 8009e8a:	eba3 0309 	sub.w	r3, r3, r9
 8009e8e:	455b      	cmp	r3, fp
 8009e90:	dc31      	bgt.n	8009ef6 <_printf_float+0x36e>
 8009e92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e94:	459a      	cmp	sl, r3
 8009e96:	dc3a      	bgt.n	8009f0e <_printf_float+0x386>
 8009e98:	6823      	ldr	r3, [r4, #0]
 8009e9a:	07da      	lsls	r2, r3, #31
 8009e9c:	d437      	bmi.n	8009f0e <_printf_float+0x386>
 8009e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ea0:	ebaa 0903 	sub.w	r9, sl, r3
 8009ea4:	9b06      	ldr	r3, [sp, #24]
 8009ea6:	ebaa 0303 	sub.w	r3, sl, r3
 8009eaa:	4599      	cmp	r9, r3
 8009eac:	bfa8      	it	ge
 8009eae:	4699      	movge	r9, r3
 8009eb0:	f1b9 0f00 	cmp.w	r9, #0
 8009eb4:	dc33      	bgt.n	8009f1e <_printf_float+0x396>
 8009eb6:	f04f 0800 	mov.w	r8, #0
 8009eba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ebe:	f104 0b1a 	add.w	fp, r4, #26
 8009ec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ec4:	ebaa 0303 	sub.w	r3, sl, r3
 8009ec8:	eba3 0309 	sub.w	r3, r3, r9
 8009ecc:	4543      	cmp	r3, r8
 8009ece:	f77f af79 	ble.w	8009dc4 <_printf_float+0x23c>
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	465a      	mov	r2, fp
 8009ed6:	4631      	mov	r1, r6
 8009ed8:	4628      	mov	r0, r5
 8009eda:	47b8      	blx	r7
 8009edc:	3001      	adds	r0, #1
 8009ede:	f43f aeae 	beq.w	8009c3e <_printf_float+0xb6>
 8009ee2:	f108 0801 	add.w	r8, r8, #1
 8009ee6:	e7ec      	b.n	8009ec2 <_printf_float+0x33a>
 8009ee8:	4642      	mov	r2, r8
 8009eea:	4631      	mov	r1, r6
 8009eec:	4628      	mov	r0, r5
 8009eee:	47b8      	blx	r7
 8009ef0:	3001      	adds	r0, #1
 8009ef2:	d1c2      	bne.n	8009e7a <_printf_float+0x2f2>
 8009ef4:	e6a3      	b.n	8009c3e <_printf_float+0xb6>
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	4631      	mov	r1, r6
 8009efa:	4628      	mov	r0, r5
 8009efc:	9206      	str	r2, [sp, #24]
 8009efe:	47b8      	blx	r7
 8009f00:	3001      	adds	r0, #1
 8009f02:	f43f ae9c 	beq.w	8009c3e <_printf_float+0xb6>
 8009f06:	9a06      	ldr	r2, [sp, #24]
 8009f08:	f10b 0b01 	add.w	fp, fp, #1
 8009f0c:	e7bb      	b.n	8009e86 <_printf_float+0x2fe>
 8009f0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f12:	4631      	mov	r1, r6
 8009f14:	4628      	mov	r0, r5
 8009f16:	47b8      	blx	r7
 8009f18:	3001      	adds	r0, #1
 8009f1a:	d1c0      	bne.n	8009e9e <_printf_float+0x316>
 8009f1c:	e68f      	b.n	8009c3e <_printf_float+0xb6>
 8009f1e:	9a06      	ldr	r2, [sp, #24]
 8009f20:	464b      	mov	r3, r9
 8009f22:	4442      	add	r2, r8
 8009f24:	4631      	mov	r1, r6
 8009f26:	4628      	mov	r0, r5
 8009f28:	47b8      	blx	r7
 8009f2a:	3001      	adds	r0, #1
 8009f2c:	d1c3      	bne.n	8009eb6 <_printf_float+0x32e>
 8009f2e:	e686      	b.n	8009c3e <_printf_float+0xb6>
 8009f30:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009f34:	f1ba 0f01 	cmp.w	sl, #1
 8009f38:	dc01      	bgt.n	8009f3e <_printf_float+0x3b6>
 8009f3a:	07db      	lsls	r3, r3, #31
 8009f3c:	d536      	bpl.n	8009fac <_printf_float+0x424>
 8009f3e:	2301      	movs	r3, #1
 8009f40:	4642      	mov	r2, r8
 8009f42:	4631      	mov	r1, r6
 8009f44:	4628      	mov	r0, r5
 8009f46:	47b8      	blx	r7
 8009f48:	3001      	adds	r0, #1
 8009f4a:	f43f ae78 	beq.w	8009c3e <_printf_float+0xb6>
 8009f4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f52:	4631      	mov	r1, r6
 8009f54:	4628      	mov	r0, r5
 8009f56:	47b8      	blx	r7
 8009f58:	3001      	adds	r0, #1
 8009f5a:	f43f ae70 	beq.w	8009c3e <_printf_float+0xb6>
 8009f5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009f62:	2200      	movs	r2, #0
 8009f64:	2300      	movs	r3, #0
 8009f66:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009f6a:	f7f6 fd85 	bl	8000a78 <__aeabi_dcmpeq>
 8009f6e:	b9c0      	cbnz	r0, 8009fa2 <_printf_float+0x41a>
 8009f70:	4653      	mov	r3, sl
 8009f72:	f108 0201 	add.w	r2, r8, #1
 8009f76:	4631      	mov	r1, r6
 8009f78:	4628      	mov	r0, r5
 8009f7a:	47b8      	blx	r7
 8009f7c:	3001      	adds	r0, #1
 8009f7e:	d10c      	bne.n	8009f9a <_printf_float+0x412>
 8009f80:	e65d      	b.n	8009c3e <_printf_float+0xb6>
 8009f82:	2301      	movs	r3, #1
 8009f84:	465a      	mov	r2, fp
 8009f86:	4631      	mov	r1, r6
 8009f88:	4628      	mov	r0, r5
 8009f8a:	47b8      	blx	r7
 8009f8c:	3001      	adds	r0, #1
 8009f8e:	f43f ae56 	beq.w	8009c3e <_printf_float+0xb6>
 8009f92:	f108 0801 	add.w	r8, r8, #1
 8009f96:	45d0      	cmp	r8, sl
 8009f98:	dbf3      	blt.n	8009f82 <_printf_float+0x3fa>
 8009f9a:	464b      	mov	r3, r9
 8009f9c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009fa0:	e6df      	b.n	8009d62 <_printf_float+0x1da>
 8009fa2:	f04f 0800 	mov.w	r8, #0
 8009fa6:	f104 0b1a 	add.w	fp, r4, #26
 8009faa:	e7f4      	b.n	8009f96 <_printf_float+0x40e>
 8009fac:	2301      	movs	r3, #1
 8009fae:	4642      	mov	r2, r8
 8009fb0:	e7e1      	b.n	8009f76 <_printf_float+0x3ee>
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	464a      	mov	r2, r9
 8009fb6:	4631      	mov	r1, r6
 8009fb8:	4628      	mov	r0, r5
 8009fba:	47b8      	blx	r7
 8009fbc:	3001      	adds	r0, #1
 8009fbe:	f43f ae3e 	beq.w	8009c3e <_printf_float+0xb6>
 8009fc2:	f108 0801 	add.w	r8, r8, #1
 8009fc6:	68e3      	ldr	r3, [r4, #12]
 8009fc8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009fca:	1a5b      	subs	r3, r3, r1
 8009fcc:	4543      	cmp	r3, r8
 8009fce:	dcf0      	bgt.n	8009fb2 <_printf_float+0x42a>
 8009fd0:	e6fc      	b.n	8009dcc <_printf_float+0x244>
 8009fd2:	f04f 0800 	mov.w	r8, #0
 8009fd6:	f104 0919 	add.w	r9, r4, #25
 8009fda:	e7f4      	b.n	8009fc6 <_printf_float+0x43e>

08009fdc <_printf_common>:
 8009fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fe0:	4616      	mov	r6, r2
 8009fe2:	4698      	mov	r8, r3
 8009fe4:	688a      	ldr	r2, [r1, #8]
 8009fe6:	690b      	ldr	r3, [r1, #16]
 8009fe8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009fec:	4293      	cmp	r3, r2
 8009fee:	bfb8      	it	lt
 8009ff0:	4613      	movlt	r3, r2
 8009ff2:	6033      	str	r3, [r6, #0]
 8009ff4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009ff8:	4607      	mov	r7, r0
 8009ffa:	460c      	mov	r4, r1
 8009ffc:	b10a      	cbz	r2, 800a002 <_printf_common+0x26>
 8009ffe:	3301      	adds	r3, #1
 800a000:	6033      	str	r3, [r6, #0]
 800a002:	6823      	ldr	r3, [r4, #0]
 800a004:	0699      	lsls	r1, r3, #26
 800a006:	bf42      	ittt	mi
 800a008:	6833      	ldrmi	r3, [r6, #0]
 800a00a:	3302      	addmi	r3, #2
 800a00c:	6033      	strmi	r3, [r6, #0]
 800a00e:	6825      	ldr	r5, [r4, #0]
 800a010:	f015 0506 	ands.w	r5, r5, #6
 800a014:	d106      	bne.n	800a024 <_printf_common+0x48>
 800a016:	f104 0a19 	add.w	sl, r4, #25
 800a01a:	68e3      	ldr	r3, [r4, #12]
 800a01c:	6832      	ldr	r2, [r6, #0]
 800a01e:	1a9b      	subs	r3, r3, r2
 800a020:	42ab      	cmp	r3, r5
 800a022:	dc26      	bgt.n	800a072 <_printf_common+0x96>
 800a024:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a028:	6822      	ldr	r2, [r4, #0]
 800a02a:	3b00      	subs	r3, #0
 800a02c:	bf18      	it	ne
 800a02e:	2301      	movne	r3, #1
 800a030:	0692      	lsls	r2, r2, #26
 800a032:	d42b      	bmi.n	800a08c <_printf_common+0xb0>
 800a034:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a038:	4641      	mov	r1, r8
 800a03a:	4638      	mov	r0, r7
 800a03c:	47c8      	blx	r9
 800a03e:	3001      	adds	r0, #1
 800a040:	d01e      	beq.n	800a080 <_printf_common+0xa4>
 800a042:	6823      	ldr	r3, [r4, #0]
 800a044:	6922      	ldr	r2, [r4, #16]
 800a046:	f003 0306 	and.w	r3, r3, #6
 800a04a:	2b04      	cmp	r3, #4
 800a04c:	bf02      	ittt	eq
 800a04e:	68e5      	ldreq	r5, [r4, #12]
 800a050:	6833      	ldreq	r3, [r6, #0]
 800a052:	1aed      	subeq	r5, r5, r3
 800a054:	68a3      	ldr	r3, [r4, #8]
 800a056:	bf0c      	ite	eq
 800a058:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a05c:	2500      	movne	r5, #0
 800a05e:	4293      	cmp	r3, r2
 800a060:	bfc4      	itt	gt
 800a062:	1a9b      	subgt	r3, r3, r2
 800a064:	18ed      	addgt	r5, r5, r3
 800a066:	2600      	movs	r6, #0
 800a068:	341a      	adds	r4, #26
 800a06a:	42b5      	cmp	r5, r6
 800a06c:	d11a      	bne.n	800a0a4 <_printf_common+0xc8>
 800a06e:	2000      	movs	r0, #0
 800a070:	e008      	b.n	800a084 <_printf_common+0xa8>
 800a072:	2301      	movs	r3, #1
 800a074:	4652      	mov	r2, sl
 800a076:	4641      	mov	r1, r8
 800a078:	4638      	mov	r0, r7
 800a07a:	47c8      	blx	r9
 800a07c:	3001      	adds	r0, #1
 800a07e:	d103      	bne.n	800a088 <_printf_common+0xac>
 800a080:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a088:	3501      	adds	r5, #1
 800a08a:	e7c6      	b.n	800a01a <_printf_common+0x3e>
 800a08c:	18e1      	adds	r1, r4, r3
 800a08e:	1c5a      	adds	r2, r3, #1
 800a090:	2030      	movs	r0, #48	@ 0x30
 800a092:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a096:	4422      	add	r2, r4
 800a098:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a09c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a0a0:	3302      	adds	r3, #2
 800a0a2:	e7c7      	b.n	800a034 <_printf_common+0x58>
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	4622      	mov	r2, r4
 800a0a8:	4641      	mov	r1, r8
 800a0aa:	4638      	mov	r0, r7
 800a0ac:	47c8      	blx	r9
 800a0ae:	3001      	adds	r0, #1
 800a0b0:	d0e6      	beq.n	800a080 <_printf_common+0xa4>
 800a0b2:	3601      	adds	r6, #1
 800a0b4:	e7d9      	b.n	800a06a <_printf_common+0x8e>
	...

0800a0b8 <_printf_i>:
 800a0b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0bc:	7e0f      	ldrb	r7, [r1, #24]
 800a0be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a0c0:	2f78      	cmp	r7, #120	@ 0x78
 800a0c2:	4691      	mov	r9, r2
 800a0c4:	4680      	mov	r8, r0
 800a0c6:	460c      	mov	r4, r1
 800a0c8:	469a      	mov	sl, r3
 800a0ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a0ce:	d807      	bhi.n	800a0e0 <_printf_i+0x28>
 800a0d0:	2f62      	cmp	r7, #98	@ 0x62
 800a0d2:	d80a      	bhi.n	800a0ea <_printf_i+0x32>
 800a0d4:	2f00      	cmp	r7, #0
 800a0d6:	f000 80d1 	beq.w	800a27c <_printf_i+0x1c4>
 800a0da:	2f58      	cmp	r7, #88	@ 0x58
 800a0dc:	f000 80b8 	beq.w	800a250 <_printf_i+0x198>
 800a0e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a0e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a0e8:	e03a      	b.n	800a160 <_printf_i+0xa8>
 800a0ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a0ee:	2b15      	cmp	r3, #21
 800a0f0:	d8f6      	bhi.n	800a0e0 <_printf_i+0x28>
 800a0f2:	a101      	add	r1, pc, #4	@ (adr r1, 800a0f8 <_printf_i+0x40>)
 800a0f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a0f8:	0800a151 	.word	0x0800a151
 800a0fc:	0800a165 	.word	0x0800a165
 800a100:	0800a0e1 	.word	0x0800a0e1
 800a104:	0800a0e1 	.word	0x0800a0e1
 800a108:	0800a0e1 	.word	0x0800a0e1
 800a10c:	0800a0e1 	.word	0x0800a0e1
 800a110:	0800a165 	.word	0x0800a165
 800a114:	0800a0e1 	.word	0x0800a0e1
 800a118:	0800a0e1 	.word	0x0800a0e1
 800a11c:	0800a0e1 	.word	0x0800a0e1
 800a120:	0800a0e1 	.word	0x0800a0e1
 800a124:	0800a263 	.word	0x0800a263
 800a128:	0800a18f 	.word	0x0800a18f
 800a12c:	0800a21d 	.word	0x0800a21d
 800a130:	0800a0e1 	.word	0x0800a0e1
 800a134:	0800a0e1 	.word	0x0800a0e1
 800a138:	0800a285 	.word	0x0800a285
 800a13c:	0800a0e1 	.word	0x0800a0e1
 800a140:	0800a18f 	.word	0x0800a18f
 800a144:	0800a0e1 	.word	0x0800a0e1
 800a148:	0800a0e1 	.word	0x0800a0e1
 800a14c:	0800a225 	.word	0x0800a225
 800a150:	6833      	ldr	r3, [r6, #0]
 800a152:	1d1a      	adds	r2, r3, #4
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	6032      	str	r2, [r6, #0]
 800a158:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a15c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a160:	2301      	movs	r3, #1
 800a162:	e09c      	b.n	800a29e <_printf_i+0x1e6>
 800a164:	6833      	ldr	r3, [r6, #0]
 800a166:	6820      	ldr	r0, [r4, #0]
 800a168:	1d19      	adds	r1, r3, #4
 800a16a:	6031      	str	r1, [r6, #0]
 800a16c:	0606      	lsls	r6, r0, #24
 800a16e:	d501      	bpl.n	800a174 <_printf_i+0xbc>
 800a170:	681d      	ldr	r5, [r3, #0]
 800a172:	e003      	b.n	800a17c <_printf_i+0xc4>
 800a174:	0645      	lsls	r5, r0, #25
 800a176:	d5fb      	bpl.n	800a170 <_printf_i+0xb8>
 800a178:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a17c:	2d00      	cmp	r5, #0
 800a17e:	da03      	bge.n	800a188 <_printf_i+0xd0>
 800a180:	232d      	movs	r3, #45	@ 0x2d
 800a182:	426d      	negs	r5, r5
 800a184:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a188:	4858      	ldr	r0, [pc, #352]	@ (800a2ec <_printf_i+0x234>)
 800a18a:	230a      	movs	r3, #10
 800a18c:	e011      	b.n	800a1b2 <_printf_i+0xfa>
 800a18e:	6821      	ldr	r1, [r4, #0]
 800a190:	6833      	ldr	r3, [r6, #0]
 800a192:	0608      	lsls	r0, r1, #24
 800a194:	f853 5b04 	ldr.w	r5, [r3], #4
 800a198:	d402      	bmi.n	800a1a0 <_printf_i+0xe8>
 800a19a:	0649      	lsls	r1, r1, #25
 800a19c:	bf48      	it	mi
 800a19e:	b2ad      	uxthmi	r5, r5
 800a1a0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a1a2:	4852      	ldr	r0, [pc, #328]	@ (800a2ec <_printf_i+0x234>)
 800a1a4:	6033      	str	r3, [r6, #0]
 800a1a6:	bf14      	ite	ne
 800a1a8:	230a      	movne	r3, #10
 800a1aa:	2308      	moveq	r3, #8
 800a1ac:	2100      	movs	r1, #0
 800a1ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a1b2:	6866      	ldr	r6, [r4, #4]
 800a1b4:	60a6      	str	r6, [r4, #8]
 800a1b6:	2e00      	cmp	r6, #0
 800a1b8:	db05      	blt.n	800a1c6 <_printf_i+0x10e>
 800a1ba:	6821      	ldr	r1, [r4, #0]
 800a1bc:	432e      	orrs	r6, r5
 800a1be:	f021 0104 	bic.w	r1, r1, #4
 800a1c2:	6021      	str	r1, [r4, #0]
 800a1c4:	d04b      	beq.n	800a25e <_printf_i+0x1a6>
 800a1c6:	4616      	mov	r6, r2
 800a1c8:	fbb5 f1f3 	udiv	r1, r5, r3
 800a1cc:	fb03 5711 	mls	r7, r3, r1, r5
 800a1d0:	5dc7      	ldrb	r7, [r0, r7]
 800a1d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a1d6:	462f      	mov	r7, r5
 800a1d8:	42bb      	cmp	r3, r7
 800a1da:	460d      	mov	r5, r1
 800a1dc:	d9f4      	bls.n	800a1c8 <_printf_i+0x110>
 800a1de:	2b08      	cmp	r3, #8
 800a1e0:	d10b      	bne.n	800a1fa <_printf_i+0x142>
 800a1e2:	6823      	ldr	r3, [r4, #0]
 800a1e4:	07df      	lsls	r7, r3, #31
 800a1e6:	d508      	bpl.n	800a1fa <_printf_i+0x142>
 800a1e8:	6923      	ldr	r3, [r4, #16]
 800a1ea:	6861      	ldr	r1, [r4, #4]
 800a1ec:	4299      	cmp	r1, r3
 800a1ee:	bfde      	ittt	le
 800a1f0:	2330      	movle	r3, #48	@ 0x30
 800a1f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a1f6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a1fa:	1b92      	subs	r2, r2, r6
 800a1fc:	6122      	str	r2, [r4, #16]
 800a1fe:	f8cd a000 	str.w	sl, [sp]
 800a202:	464b      	mov	r3, r9
 800a204:	aa03      	add	r2, sp, #12
 800a206:	4621      	mov	r1, r4
 800a208:	4640      	mov	r0, r8
 800a20a:	f7ff fee7 	bl	8009fdc <_printf_common>
 800a20e:	3001      	adds	r0, #1
 800a210:	d14a      	bne.n	800a2a8 <_printf_i+0x1f0>
 800a212:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a216:	b004      	add	sp, #16
 800a218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a21c:	6823      	ldr	r3, [r4, #0]
 800a21e:	f043 0320 	orr.w	r3, r3, #32
 800a222:	6023      	str	r3, [r4, #0]
 800a224:	4832      	ldr	r0, [pc, #200]	@ (800a2f0 <_printf_i+0x238>)
 800a226:	2778      	movs	r7, #120	@ 0x78
 800a228:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a22c:	6823      	ldr	r3, [r4, #0]
 800a22e:	6831      	ldr	r1, [r6, #0]
 800a230:	061f      	lsls	r7, r3, #24
 800a232:	f851 5b04 	ldr.w	r5, [r1], #4
 800a236:	d402      	bmi.n	800a23e <_printf_i+0x186>
 800a238:	065f      	lsls	r7, r3, #25
 800a23a:	bf48      	it	mi
 800a23c:	b2ad      	uxthmi	r5, r5
 800a23e:	6031      	str	r1, [r6, #0]
 800a240:	07d9      	lsls	r1, r3, #31
 800a242:	bf44      	itt	mi
 800a244:	f043 0320 	orrmi.w	r3, r3, #32
 800a248:	6023      	strmi	r3, [r4, #0]
 800a24a:	b11d      	cbz	r5, 800a254 <_printf_i+0x19c>
 800a24c:	2310      	movs	r3, #16
 800a24e:	e7ad      	b.n	800a1ac <_printf_i+0xf4>
 800a250:	4826      	ldr	r0, [pc, #152]	@ (800a2ec <_printf_i+0x234>)
 800a252:	e7e9      	b.n	800a228 <_printf_i+0x170>
 800a254:	6823      	ldr	r3, [r4, #0]
 800a256:	f023 0320 	bic.w	r3, r3, #32
 800a25a:	6023      	str	r3, [r4, #0]
 800a25c:	e7f6      	b.n	800a24c <_printf_i+0x194>
 800a25e:	4616      	mov	r6, r2
 800a260:	e7bd      	b.n	800a1de <_printf_i+0x126>
 800a262:	6833      	ldr	r3, [r6, #0]
 800a264:	6825      	ldr	r5, [r4, #0]
 800a266:	6961      	ldr	r1, [r4, #20]
 800a268:	1d18      	adds	r0, r3, #4
 800a26a:	6030      	str	r0, [r6, #0]
 800a26c:	062e      	lsls	r6, r5, #24
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	d501      	bpl.n	800a276 <_printf_i+0x1be>
 800a272:	6019      	str	r1, [r3, #0]
 800a274:	e002      	b.n	800a27c <_printf_i+0x1c4>
 800a276:	0668      	lsls	r0, r5, #25
 800a278:	d5fb      	bpl.n	800a272 <_printf_i+0x1ba>
 800a27a:	8019      	strh	r1, [r3, #0]
 800a27c:	2300      	movs	r3, #0
 800a27e:	6123      	str	r3, [r4, #16]
 800a280:	4616      	mov	r6, r2
 800a282:	e7bc      	b.n	800a1fe <_printf_i+0x146>
 800a284:	6833      	ldr	r3, [r6, #0]
 800a286:	1d1a      	adds	r2, r3, #4
 800a288:	6032      	str	r2, [r6, #0]
 800a28a:	681e      	ldr	r6, [r3, #0]
 800a28c:	6862      	ldr	r2, [r4, #4]
 800a28e:	2100      	movs	r1, #0
 800a290:	4630      	mov	r0, r6
 800a292:	f7f5 ff75 	bl	8000180 <memchr>
 800a296:	b108      	cbz	r0, 800a29c <_printf_i+0x1e4>
 800a298:	1b80      	subs	r0, r0, r6
 800a29a:	6060      	str	r0, [r4, #4]
 800a29c:	6863      	ldr	r3, [r4, #4]
 800a29e:	6123      	str	r3, [r4, #16]
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2a6:	e7aa      	b.n	800a1fe <_printf_i+0x146>
 800a2a8:	6923      	ldr	r3, [r4, #16]
 800a2aa:	4632      	mov	r2, r6
 800a2ac:	4649      	mov	r1, r9
 800a2ae:	4640      	mov	r0, r8
 800a2b0:	47d0      	blx	sl
 800a2b2:	3001      	adds	r0, #1
 800a2b4:	d0ad      	beq.n	800a212 <_printf_i+0x15a>
 800a2b6:	6823      	ldr	r3, [r4, #0]
 800a2b8:	079b      	lsls	r3, r3, #30
 800a2ba:	d413      	bmi.n	800a2e4 <_printf_i+0x22c>
 800a2bc:	68e0      	ldr	r0, [r4, #12]
 800a2be:	9b03      	ldr	r3, [sp, #12]
 800a2c0:	4298      	cmp	r0, r3
 800a2c2:	bfb8      	it	lt
 800a2c4:	4618      	movlt	r0, r3
 800a2c6:	e7a6      	b.n	800a216 <_printf_i+0x15e>
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	4632      	mov	r2, r6
 800a2cc:	4649      	mov	r1, r9
 800a2ce:	4640      	mov	r0, r8
 800a2d0:	47d0      	blx	sl
 800a2d2:	3001      	adds	r0, #1
 800a2d4:	d09d      	beq.n	800a212 <_printf_i+0x15a>
 800a2d6:	3501      	adds	r5, #1
 800a2d8:	68e3      	ldr	r3, [r4, #12]
 800a2da:	9903      	ldr	r1, [sp, #12]
 800a2dc:	1a5b      	subs	r3, r3, r1
 800a2de:	42ab      	cmp	r3, r5
 800a2e0:	dcf2      	bgt.n	800a2c8 <_printf_i+0x210>
 800a2e2:	e7eb      	b.n	800a2bc <_printf_i+0x204>
 800a2e4:	2500      	movs	r5, #0
 800a2e6:	f104 0619 	add.w	r6, r4, #25
 800a2ea:	e7f5      	b.n	800a2d8 <_printf_i+0x220>
 800a2ec:	0800ca22 	.word	0x0800ca22
 800a2f0:	0800ca33 	.word	0x0800ca33

0800a2f4 <std>:
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	b510      	push	{r4, lr}
 800a2f8:	4604      	mov	r4, r0
 800a2fa:	e9c0 3300 	strd	r3, r3, [r0]
 800a2fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a302:	6083      	str	r3, [r0, #8]
 800a304:	8181      	strh	r1, [r0, #12]
 800a306:	6643      	str	r3, [r0, #100]	@ 0x64
 800a308:	81c2      	strh	r2, [r0, #14]
 800a30a:	6183      	str	r3, [r0, #24]
 800a30c:	4619      	mov	r1, r3
 800a30e:	2208      	movs	r2, #8
 800a310:	305c      	adds	r0, #92	@ 0x5c
 800a312:	f000 fa01 	bl	800a718 <memset>
 800a316:	4b0d      	ldr	r3, [pc, #52]	@ (800a34c <std+0x58>)
 800a318:	6263      	str	r3, [r4, #36]	@ 0x24
 800a31a:	4b0d      	ldr	r3, [pc, #52]	@ (800a350 <std+0x5c>)
 800a31c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a31e:	4b0d      	ldr	r3, [pc, #52]	@ (800a354 <std+0x60>)
 800a320:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a322:	4b0d      	ldr	r3, [pc, #52]	@ (800a358 <std+0x64>)
 800a324:	6323      	str	r3, [r4, #48]	@ 0x30
 800a326:	4b0d      	ldr	r3, [pc, #52]	@ (800a35c <std+0x68>)
 800a328:	6224      	str	r4, [r4, #32]
 800a32a:	429c      	cmp	r4, r3
 800a32c:	d006      	beq.n	800a33c <std+0x48>
 800a32e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a332:	4294      	cmp	r4, r2
 800a334:	d002      	beq.n	800a33c <std+0x48>
 800a336:	33d0      	adds	r3, #208	@ 0xd0
 800a338:	429c      	cmp	r4, r3
 800a33a:	d105      	bne.n	800a348 <std+0x54>
 800a33c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a344:	f000 bac2 	b.w	800a8cc <__retarget_lock_init_recursive>
 800a348:	bd10      	pop	{r4, pc}
 800a34a:	bf00      	nop
 800a34c:	0800a569 	.word	0x0800a569
 800a350:	0800a58b 	.word	0x0800a58b
 800a354:	0800a5c3 	.word	0x0800a5c3
 800a358:	0800a5e7 	.word	0x0800a5e7
 800a35c:	20001dd4 	.word	0x20001dd4

0800a360 <stdio_exit_handler>:
 800a360:	4a02      	ldr	r2, [pc, #8]	@ (800a36c <stdio_exit_handler+0xc>)
 800a362:	4903      	ldr	r1, [pc, #12]	@ (800a370 <stdio_exit_handler+0x10>)
 800a364:	4803      	ldr	r0, [pc, #12]	@ (800a374 <stdio_exit_handler+0x14>)
 800a366:	f000 b869 	b.w	800a43c <_fwalk_sglue>
 800a36a:	bf00      	nop
 800a36c:	20000024 	.word	0x20000024
 800a370:	0800c221 	.word	0x0800c221
 800a374:	20000034 	.word	0x20000034

0800a378 <cleanup_stdio>:
 800a378:	6841      	ldr	r1, [r0, #4]
 800a37a:	4b0c      	ldr	r3, [pc, #48]	@ (800a3ac <cleanup_stdio+0x34>)
 800a37c:	4299      	cmp	r1, r3
 800a37e:	b510      	push	{r4, lr}
 800a380:	4604      	mov	r4, r0
 800a382:	d001      	beq.n	800a388 <cleanup_stdio+0x10>
 800a384:	f001 ff4c 	bl	800c220 <_fflush_r>
 800a388:	68a1      	ldr	r1, [r4, #8]
 800a38a:	4b09      	ldr	r3, [pc, #36]	@ (800a3b0 <cleanup_stdio+0x38>)
 800a38c:	4299      	cmp	r1, r3
 800a38e:	d002      	beq.n	800a396 <cleanup_stdio+0x1e>
 800a390:	4620      	mov	r0, r4
 800a392:	f001 ff45 	bl	800c220 <_fflush_r>
 800a396:	68e1      	ldr	r1, [r4, #12]
 800a398:	4b06      	ldr	r3, [pc, #24]	@ (800a3b4 <cleanup_stdio+0x3c>)
 800a39a:	4299      	cmp	r1, r3
 800a39c:	d004      	beq.n	800a3a8 <cleanup_stdio+0x30>
 800a39e:	4620      	mov	r0, r4
 800a3a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3a4:	f001 bf3c 	b.w	800c220 <_fflush_r>
 800a3a8:	bd10      	pop	{r4, pc}
 800a3aa:	bf00      	nop
 800a3ac:	20001dd4 	.word	0x20001dd4
 800a3b0:	20001e3c 	.word	0x20001e3c
 800a3b4:	20001ea4 	.word	0x20001ea4

0800a3b8 <global_stdio_init.part.0>:
 800a3b8:	b510      	push	{r4, lr}
 800a3ba:	4b0b      	ldr	r3, [pc, #44]	@ (800a3e8 <global_stdio_init.part.0+0x30>)
 800a3bc:	4c0b      	ldr	r4, [pc, #44]	@ (800a3ec <global_stdio_init.part.0+0x34>)
 800a3be:	4a0c      	ldr	r2, [pc, #48]	@ (800a3f0 <global_stdio_init.part.0+0x38>)
 800a3c0:	601a      	str	r2, [r3, #0]
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	2104      	movs	r1, #4
 800a3c8:	f7ff ff94 	bl	800a2f4 <std>
 800a3cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	2109      	movs	r1, #9
 800a3d4:	f7ff ff8e 	bl	800a2f4 <std>
 800a3d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a3dc:	2202      	movs	r2, #2
 800a3de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3e2:	2112      	movs	r1, #18
 800a3e4:	f7ff bf86 	b.w	800a2f4 <std>
 800a3e8:	20001f0c 	.word	0x20001f0c
 800a3ec:	20001dd4 	.word	0x20001dd4
 800a3f0:	0800a361 	.word	0x0800a361

0800a3f4 <__sfp_lock_acquire>:
 800a3f4:	4801      	ldr	r0, [pc, #4]	@ (800a3fc <__sfp_lock_acquire+0x8>)
 800a3f6:	f000 ba6a 	b.w	800a8ce <__retarget_lock_acquire_recursive>
 800a3fa:	bf00      	nop
 800a3fc:	20001f15 	.word	0x20001f15

0800a400 <__sfp_lock_release>:
 800a400:	4801      	ldr	r0, [pc, #4]	@ (800a408 <__sfp_lock_release+0x8>)
 800a402:	f000 ba65 	b.w	800a8d0 <__retarget_lock_release_recursive>
 800a406:	bf00      	nop
 800a408:	20001f15 	.word	0x20001f15

0800a40c <__sinit>:
 800a40c:	b510      	push	{r4, lr}
 800a40e:	4604      	mov	r4, r0
 800a410:	f7ff fff0 	bl	800a3f4 <__sfp_lock_acquire>
 800a414:	6a23      	ldr	r3, [r4, #32]
 800a416:	b11b      	cbz	r3, 800a420 <__sinit+0x14>
 800a418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a41c:	f7ff bff0 	b.w	800a400 <__sfp_lock_release>
 800a420:	4b04      	ldr	r3, [pc, #16]	@ (800a434 <__sinit+0x28>)
 800a422:	6223      	str	r3, [r4, #32]
 800a424:	4b04      	ldr	r3, [pc, #16]	@ (800a438 <__sinit+0x2c>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d1f5      	bne.n	800a418 <__sinit+0xc>
 800a42c:	f7ff ffc4 	bl	800a3b8 <global_stdio_init.part.0>
 800a430:	e7f2      	b.n	800a418 <__sinit+0xc>
 800a432:	bf00      	nop
 800a434:	0800a379 	.word	0x0800a379
 800a438:	20001f0c 	.word	0x20001f0c

0800a43c <_fwalk_sglue>:
 800a43c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a440:	4607      	mov	r7, r0
 800a442:	4688      	mov	r8, r1
 800a444:	4614      	mov	r4, r2
 800a446:	2600      	movs	r6, #0
 800a448:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a44c:	f1b9 0901 	subs.w	r9, r9, #1
 800a450:	d505      	bpl.n	800a45e <_fwalk_sglue+0x22>
 800a452:	6824      	ldr	r4, [r4, #0]
 800a454:	2c00      	cmp	r4, #0
 800a456:	d1f7      	bne.n	800a448 <_fwalk_sglue+0xc>
 800a458:	4630      	mov	r0, r6
 800a45a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a45e:	89ab      	ldrh	r3, [r5, #12]
 800a460:	2b01      	cmp	r3, #1
 800a462:	d907      	bls.n	800a474 <_fwalk_sglue+0x38>
 800a464:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a468:	3301      	adds	r3, #1
 800a46a:	d003      	beq.n	800a474 <_fwalk_sglue+0x38>
 800a46c:	4629      	mov	r1, r5
 800a46e:	4638      	mov	r0, r7
 800a470:	47c0      	blx	r8
 800a472:	4306      	orrs	r6, r0
 800a474:	3568      	adds	r5, #104	@ 0x68
 800a476:	e7e9      	b.n	800a44c <_fwalk_sglue+0x10>

0800a478 <iprintf>:
 800a478:	b40f      	push	{r0, r1, r2, r3}
 800a47a:	b507      	push	{r0, r1, r2, lr}
 800a47c:	4906      	ldr	r1, [pc, #24]	@ (800a498 <iprintf+0x20>)
 800a47e:	ab04      	add	r3, sp, #16
 800a480:	6808      	ldr	r0, [r1, #0]
 800a482:	f853 2b04 	ldr.w	r2, [r3], #4
 800a486:	6881      	ldr	r1, [r0, #8]
 800a488:	9301      	str	r3, [sp, #4]
 800a48a:	f001 fd2d 	bl	800bee8 <_vfiprintf_r>
 800a48e:	b003      	add	sp, #12
 800a490:	f85d eb04 	ldr.w	lr, [sp], #4
 800a494:	b004      	add	sp, #16
 800a496:	4770      	bx	lr
 800a498:	20000030 	.word	0x20000030

0800a49c <putchar>:
 800a49c:	4b02      	ldr	r3, [pc, #8]	@ (800a4a8 <putchar+0xc>)
 800a49e:	4601      	mov	r1, r0
 800a4a0:	6818      	ldr	r0, [r3, #0]
 800a4a2:	6882      	ldr	r2, [r0, #8]
 800a4a4:	f001 bf46 	b.w	800c334 <_putc_r>
 800a4a8:	20000030 	.word	0x20000030

0800a4ac <_puts_r>:
 800a4ac:	6a03      	ldr	r3, [r0, #32]
 800a4ae:	b570      	push	{r4, r5, r6, lr}
 800a4b0:	6884      	ldr	r4, [r0, #8]
 800a4b2:	4605      	mov	r5, r0
 800a4b4:	460e      	mov	r6, r1
 800a4b6:	b90b      	cbnz	r3, 800a4bc <_puts_r+0x10>
 800a4b8:	f7ff ffa8 	bl	800a40c <__sinit>
 800a4bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a4be:	07db      	lsls	r3, r3, #31
 800a4c0:	d405      	bmi.n	800a4ce <_puts_r+0x22>
 800a4c2:	89a3      	ldrh	r3, [r4, #12]
 800a4c4:	0598      	lsls	r0, r3, #22
 800a4c6:	d402      	bmi.n	800a4ce <_puts_r+0x22>
 800a4c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4ca:	f000 fa00 	bl	800a8ce <__retarget_lock_acquire_recursive>
 800a4ce:	89a3      	ldrh	r3, [r4, #12]
 800a4d0:	0719      	lsls	r1, r3, #28
 800a4d2:	d502      	bpl.n	800a4da <_puts_r+0x2e>
 800a4d4:	6923      	ldr	r3, [r4, #16]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d135      	bne.n	800a546 <_puts_r+0x9a>
 800a4da:	4621      	mov	r1, r4
 800a4dc:	4628      	mov	r0, r5
 800a4de:	f000 f8c5 	bl	800a66c <__swsetup_r>
 800a4e2:	b380      	cbz	r0, 800a546 <_puts_r+0x9a>
 800a4e4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a4e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a4ea:	07da      	lsls	r2, r3, #31
 800a4ec:	d405      	bmi.n	800a4fa <_puts_r+0x4e>
 800a4ee:	89a3      	ldrh	r3, [r4, #12]
 800a4f0:	059b      	lsls	r3, r3, #22
 800a4f2:	d402      	bmi.n	800a4fa <_puts_r+0x4e>
 800a4f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4f6:	f000 f9eb 	bl	800a8d0 <__retarget_lock_release_recursive>
 800a4fa:	4628      	mov	r0, r5
 800a4fc:	bd70      	pop	{r4, r5, r6, pc}
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	da04      	bge.n	800a50c <_puts_r+0x60>
 800a502:	69a2      	ldr	r2, [r4, #24]
 800a504:	429a      	cmp	r2, r3
 800a506:	dc17      	bgt.n	800a538 <_puts_r+0x8c>
 800a508:	290a      	cmp	r1, #10
 800a50a:	d015      	beq.n	800a538 <_puts_r+0x8c>
 800a50c:	6823      	ldr	r3, [r4, #0]
 800a50e:	1c5a      	adds	r2, r3, #1
 800a510:	6022      	str	r2, [r4, #0]
 800a512:	7019      	strb	r1, [r3, #0]
 800a514:	68a3      	ldr	r3, [r4, #8]
 800a516:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a51a:	3b01      	subs	r3, #1
 800a51c:	60a3      	str	r3, [r4, #8]
 800a51e:	2900      	cmp	r1, #0
 800a520:	d1ed      	bne.n	800a4fe <_puts_r+0x52>
 800a522:	2b00      	cmp	r3, #0
 800a524:	da11      	bge.n	800a54a <_puts_r+0x9e>
 800a526:	4622      	mov	r2, r4
 800a528:	210a      	movs	r1, #10
 800a52a:	4628      	mov	r0, r5
 800a52c:	f000 f85f 	bl	800a5ee <__swbuf_r>
 800a530:	3001      	adds	r0, #1
 800a532:	d0d7      	beq.n	800a4e4 <_puts_r+0x38>
 800a534:	250a      	movs	r5, #10
 800a536:	e7d7      	b.n	800a4e8 <_puts_r+0x3c>
 800a538:	4622      	mov	r2, r4
 800a53a:	4628      	mov	r0, r5
 800a53c:	f000 f857 	bl	800a5ee <__swbuf_r>
 800a540:	3001      	adds	r0, #1
 800a542:	d1e7      	bne.n	800a514 <_puts_r+0x68>
 800a544:	e7ce      	b.n	800a4e4 <_puts_r+0x38>
 800a546:	3e01      	subs	r6, #1
 800a548:	e7e4      	b.n	800a514 <_puts_r+0x68>
 800a54a:	6823      	ldr	r3, [r4, #0]
 800a54c:	1c5a      	adds	r2, r3, #1
 800a54e:	6022      	str	r2, [r4, #0]
 800a550:	220a      	movs	r2, #10
 800a552:	701a      	strb	r2, [r3, #0]
 800a554:	e7ee      	b.n	800a534 <_puts_r+0x88>
	...

0800a558 <puts>:
 800a558:	4b02      	ldr	r3, [pc, #8]	@ (800a564 <puts+0xc>)
 800a55a:	4601      	mov	r1, r0
 800a55c:	6818      	ldr	r0, [r3, #0]
 800a55e:	f7ff bfa5 	b.w	800a4ac <_puts_r>
 800a562:	bf00      	nop
 800a564:	20000030 	.word	0x20000030

0800a568 <__sread>:
 800a568:	b510      	push	{r4, lr}
 800a56a:	460c      	mov	r4, r1
 800a56c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a570:	f000 f95e 	bl	800a830 <_read_r>
 800a574:	2800      	cmp	r0, #0
 800a576:	bfab      	itete	ge
 800a578:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a57a:	89a3      	ldrhlt	r3, [r4, #12]
 800a57c:	181b      	addge	r3, r3, r0
 800a57e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a582:	bfac      	ite	ge
 800a584:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a586:	81a3      	strhlt	r3, [r4, #12]
 800a588:	bd10      	pop	{r4, pc}

0800a58a <__swrite>:
 800a58a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a58e:	461f      	mov	r7, r3
 800a590:	898b      	ldrh	r3, [r1, #12]
 800a592:	05db      	lsls	r3, r3, #23
 800a594:	4605      	mov	r5, r0
 800a596:	460c      	mov	r4, r1
 800a598:	4616      	mov	r6, r2
 800a59a:	d505      	bpl.n	800a5a8 <__swrite+0x1e>
 800a59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5a0:	2302      	movs	r3, #2
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f000 f932 	bl	800a80c <_lseek_r>
 800a5a8:	89a3      	ldrh	r3, [r4, #12]
 800a5aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a5b2:	81a3      	strh	r3, [r4, #12]
 800a5b4:	4632      	mov	r2, r6
 800a5b6:	463b      	mov	r3, r7
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5be:	f000 b949 	b.w	800a854 <_write_r>

0800a5c2 <__sseek>:
 800a5c2:	b510      	push	{r4, lr}
 800a5c4:	460c      	mov	r4, r1
 800a5c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ca:	f000 f91f 	bl	800a80c <_lseek_r>
 800a5ce:	1c43      	adds	r3, r0, #1
 800a5d0:	89a3      	ldrh	r3, [r4, #12]
 800a5d2:	bf15      	itete	ne
 800a5d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a5d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a5da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a5de:	81a3      	strheq	r3, [r4, #12]
 800a5e0:	bf18      	it	ne
 800a5e2:	81a3      	strhne	r3, [r4, #12]
 800a5e4:	bd10      	pop	{r4, pc}

0800a5e6 <__sclose>:
 800a5e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ea:	f000 b8a1 	b.w	800a730 <_close_r>

0800a5ee <__swbuf_r>:
 800a5ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5f0:	460e      	mov	r6, r1
 800a5f2:	4614      	mov	r4, r2
 800a5f4:	4605      	mov	r5, r0
 800a5f6:	b118      	cbz	r0, 800a600 <__swbuf_r+0x12>
 800a5f8:	6a03      	ldr	r3, [r0, #32]
 800a5fa:	b90b      	cbnz	r3, 800a600 <__swbuf_r+0x12>
 800a5fc:	f7ff ff06 	bl	800a40c <__sinit>
 800a600:	69a3      	ldr	r3, [r4, #24]
 800a602:	60a3      	str	r3, [r4, #8]
 800a604:	89a3      	ldrh	r3, [r4, #12]
 800a606:	071a      	lsls	r2, r3, #28
 800a608:	d501      	bpl.n	800a60e <__swbuf_r+0x20>
 800a60a:	6923      	ldr	r3, [r4, #16]
 800a60c:	b943      	cbnz	r3, 800a620 <__swbuf_r+0x32>
 800a60e:	4621      	mov	r1, r4
 800a610:	4628      	mov	r0, r5
 800a612:	f000 f82b 	bl	800a66c <__swsetup_r>
 800a616:	b118      	cbz	r0, 800a620 <__swbuf_r+0x32>
 800a618:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a61c:	4638      	mov	r0, r7
 800a61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a620:	6823      	ldr	r3, [r4, #0]
 800a622:	6922      	ldr	r2, [r4, #16]
 800a624:	1a98      	subs	r0, r3, r2
 800a626:	6963      	ldr	r3, [r4, #20]
 800a628:	b2f6      	uxtb	r6, r6
 800a62a:	4283      	cmp	r3, r0
 800a62c:	4637      	mov	r7, r6
 800a62e:	dc05      	bgt.n	800a63c <__swbuf_r+0x4e>
 800a630:	4621      	mov	r1, r4
 800a632:	4628      	mov	r0, r5
 800a634:	f001 fdf4 	bl	800c220 <_fflush_r>
 800a638:	2800      	cmp	r0, #0
 800a63a:	d1ed      	bne.n	800a618 <__swbuf_r+0x2a>
 800a63c:	68a3      	ldr	r3, [r4, #8]
 800a63e:	3b01      	subs	r3, #1
 800a640:	60a3      	str	r3, [r4, #8]
 800a642:	6823      	ldr	r3, [r4, #0]
 800a644:	1c5a      	adds	r2, r3, #1
 800a646:	6022      	str	r2, [r4, #0]
 800a648:	701e      	strb	r6, [r3, #0]
 800a64a:	6962      	ldr	r2, [r4, #20]
 800a64c:	1c43      	adds	r3, r0, #1
 800a64e:	429a      	cmp	r2, r3
 800a650:	d004      	beq.n	800a65c <__swbuf_r+0x6e>
 800a652:	89a3      	ldrh	r3, [r4, #12]
 800a654:	07db      	lsls	r3, r3, #31
 800a656:	d5e1      	bpl.n	800a61c <__swbuf_r+0x2e>
 800a658:	2e0a      	cmp	r6, #10
 800a65a:	d1df      	bne.n	800a61c <__swbuf_r+0x2e>
 800a65c:	4621      	mov	r1, r4
 800a65e:	4628      	mov	r0, r5
 800a660:	f001 fdde 	bl	800c220 <_fflush_r>
 800a664:	2800      	cmp	r0, #0
 800a666:	d0d9      	beq.n	800a61c <__swbuf_r+0x2e>
 800a668:	e7d6      	b.n	800a618 <__swbuf_r+0x2a>
	...

0800a66c <__swsetup_r>:
 800a66c:	b538      	push	{r3, r4, r5, lr}
 800a66e:	4b29      	ldr	r3, [pc, #164]	@ (800a714 <__swsetup_r+0xa8>)
 800a670:	4605      	mov	r5, r0
 800a672:	6818      	ldr	r0, [r3, #0]
 800a674:	460c      	mov	r4, r1
 800a676:	b118      	cbz	r0, 800a680 <__swsetup_r+0x14>
 800a678:	6a03      	ldr	r3, [r0, #32]
 800a67a:	b90b      	cbnz	r3, 800a680 <__swsetup_r+0x14>
 800a67c:	f7ff fec6 	bl	800a40c <__sinit>
 800a680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a684:	0719      	lsls	r1, r3, #28
 800a686:	d422      	bmi.n	800a6ce <__swsetup_r+0x62>
 800a688:	06da      	lsls	r2, r3, #27
 800a68a:	d407      	bmi.n	800a69c <__swsetup_r+0x30>
 800a68c:	2209      	movs	r2, #9
 800a68e:	602a      	str	r2, [r5, #0]
 800a690:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a694:	81a3      	strh	r3, [r4, #12]
 800a696:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a69a:	e033      	b.n	800a704 <__swsetup_r+0x98>
 800a69c:	0758      	lsls	r0, r3, #29
 800a69e:	d512      	bpl.n	800a6c6 <__swsetup_r+0x5a>
 800a6a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a6a2:	b141      	cbz	r1, 800a6b6 <__swsetup_r+0x4a>
 800a6a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a6a8:	4299      	cmp	r1, r3
 800a6aa:	d002      	beq.n	800a6b2 <__swsetup_r+0x46>
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	f000 ff77 	bl	800b5a0 <_free_r>
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	6363      	str	r3, [r4, #52]	@ 0x34
 800a6b6:	89a3      	ldrh	r3, [r4, #12]
 800a6b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a6bc:	81a3      	strh	r3, [r4, #12]
 800a6be:	2300      	movs	r3, #0
 800a6c0:	6063      	str	r3, [r4, #4]
 800a6c2:	6923      	ldr	r3, [r4, #16]
 800a6c4:	6023      	str	r3, [r4, #0]
 800a6c6:	89a3      	ldrh	r3, [r4, #12]
 800a6c8:	f043 0308 	orr.w	r3, r3, #8
 800a6cc:	81a3      	strh	r3, [r4, #12]
 800a6ce:	6923      	ldr	r3, [r4, #16]
 800a6d0:	b94b      	cbnz	r3, 800a6e6 <__swsetup_r+0x7a>
 800a6d2:	89a3      	ldrh	r3, [r4, #12]
 800a6d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a6d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6dc:	d003      	beq.n	800a6e6 <__swsetup_r+0x7a>
 800a6de:	4621      	mov	r1, r4
 800a6e0:	4628      	mov	r0, r5
 800a6e2:	f001 fdeb 	bl	800c2bc <__smakebuf_r>
 800a6e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6ea:	f013 0201 	ands.w	r2, r3, #1
 800a6ee:	d00a      	beq.n	800a706 <__swsetup_r+0x9a>
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	60a2      	str	r2, [r4, #8]
 800a6f4:	6962      	ldr	r2, [r4, #20]
 800a6f6:	4252      	negs	r2, r2
 800a6f8:	61a2      	str	r2, [r4, #24]
 800a6fa:	6922      	ldr	r2, [r4, #16]
 800a6fc:	b942      	cbnz	r2, 800a710 <__swsetup_r+0xa4>
 800a6fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a702:	d1c5      	bne.n	800a690 <__swsetup_r+0x24>
 800a704:	bd38      	pop	{r3, r4, r5, pc}
 800a706:	0799      	lsls	r1, r3, #30
 800a708:	bf58      	it	pl
 800a70a:	6962      	ldrpl	r2, [r4, #20]
 800a70c:	60a2      	str	r2, [r4, #8]
 800a70e:	e7f4      	b.n	800a6fa <__swsetup_r+0x8e>
 800a710:	2000      	movs	r0, #0
 800a712:	e7f7      	b.n	800a704 <__swsetup_r+0x98>
 800a714:	20000030 	.word	0x20000030

0800a718 <memset>:
 800a718:	4402      	add	r2, r0
 800a71a:	4603      	mov	r3, r0
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d100      	bne.n	800a722 <memset+0xa>
 800a720:	4770      	bx	lr
 800a722:	f803 1b01 	strb.w	r1, [r3], #1
 800a726:	e7f9      	b.n	800a71c <memset+0x4>

0800a728 <_localeconv_r>:
 800a728:	4800      	ldr	r0, [pc, #0]	@ (800a72c <_localeconv_r+0x4>)
 800a72a:	4770      	bx	lr
 800a72c:	20000170 	.word	0x20000170

0800a730 <_close_r>:
 800a730:	b538      	push	{r3, r4, r5, lr}
 800a732:	4d06      	ldr	r5, [pc, #24]	@ (800a74c <_close_r+0x1c>)
 800a734:	2300      	movs	r3, #0
 800a736:	4604      	mov	r4, r0
 800a738:	4608      	mov	r0, r1
 800a73a:	602b      	str	r3, [r5, #0]
 800a73c:	f7f7 fd6c 	bl	8002218 <_close>
 800a740:	1c43      	adds	r3, r0, #1
 800a742:	d102      	bne.n	800a74a <_close_r+0x1a>
 800a744:	682b      	ldr	r3, [r5, #0]
 800a746:	b103      	cbz	r3, 800a74a <_close_r+0x1a>
 800a748:	6023      	str	r3, [r4, #0]
 800a74a:	bd38      	pop	{r3, r4, r5, pc}
 800a74c:	20001f10 	.word	0x20001f10

0800a750 <_reclaim_reent>:
 800a750:	4b2d      	ldr	r3, [pc, #180]	@ (800a808 <_reclaim_reent+0xb8>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4283      	cmp	r3, r0
 800a756:	b570      	push	{r4, r5, r6, lr}
 800a758:	4604      	mov	r4, r0
 800a75a:	d053      	beq.n	800a804 <_reclaim_reent+0xb4>
 800a75c:	69c3      	ldr	r3, [r0, #28]
 800a75e:	b31b      	cbz	r3, 800a7a8 <_reclaim_reent+0x58>
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	b163      	cbz	r3, 800a77e <_reclaim_reent+0x2e>
 800a764:	2500      	movs	r5, #0
 800a766:	69e3      	ldr	r3, [r4, #28]
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	5959      	ldr	r1, [r3, r5]
 800a76c:	b9b1      	cbnz	r1, 800a79c <_reclaim_reent+0x4c>
 800a76e:	3504      	adds	r5, #4
 800a770:	2d80      	cmp	r5, #128	@ 0x80
 800a772:	d1f8      	bne.n	800a766 <_reclaim_reent+0x16>
 800a774:	69e3      	ldr	r3, [r4, #28]
 800a776:	4620      	mov	r0, r4
 800a778:	68d9      	ldr	r1, [r3, #12]
 800a77a:	f000 ff11 	bl	800b5a0 <_free_r>
 800a77e:	69e3      	ldr	r3, [r4, #28]
 800a780:	6819      	ldr	r1, [r3, #0]
 800a782:	b111      	cbz	r1, 800a78a <_reclaim_reent+0x3a>
 800a784:	4620      	mov	r0, r4
 800a786:	f000 ff0b 	bl	800b5a0 <_free_r>
 800a78a:	69e3      	ldr	r3, [r4, #28]
 800a78c:	689d      	ldr	r5, [r3, #8]
 800a78e:	b15d      	cbz	r5, 800a7a8 <_reclaim_reent+0x58>
 800a790:	4629      	mov	r1, r5
 800a792:	4620      	mov	r0, r4
 800a794:	682d      	ldr	r5, [r5, #0]
 800a796:	f000 ff03 	bl	800b5a0 <_free_r>
 800a79a:	e7f8      	b.n	800a78e <_reclaim_reent+0x3e>
 800a79c:	680e      	ldr	r6, [r1, #0]
 800a79e:	4620      	mov	r0, r4
 800a7a0:	f000 fefe 	bl	800b5a0 <_free_r>
 800a7a4:	4631      	mov	r1, r6
 800a7a6:	e7e1      	b.n	800a76c <_reclaim_reent+0x1c>
 800a7a8:	6961      	ldr	r1, [r4, #20]
 800a7aa:	b111      	cbz	r1, 800a7b2 <_reclaim_reent+0x62>
 800a7ac:	4620      	mov	r0, r4
 800a7ae:	f000 fef7 	bl	800b5a0 <_free_r>
 800a7b2:	69e1      	ldr	r1, [r4, #28]
 800a7b4:	b111      	cbz	r1, 800a7bc <_reclaim_reent+0x6c>
 800a7b6:	4620      	mov	r0, r4
 800a7b8:	f000 fef2 	bl	800b5a0 <_free_r>
 800a7bc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a7be:	b111      	cbz	r1, 800a7c6 <_reclaim_reent+0x76>
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	f000 feed 	bl	800b5a0 <_free_r>
 800a7c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a7c8:	b111      	cbz	r1, 800a7d0 <_reclaim_reent+0x80>
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	f000 fee8 	bl	800b5a0 <_free_r>
 800a7d0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a7d2:	b111      	cbz	r1, 800a7da <_reclaim_reent+0x8a>
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	f000 fee3 	bl	800b5a0 <_free_r>
 800a7da:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a7dc:	b111      	cbz	r1, 800a7e4 <_reclaim_reent+0x94>
 800a7de:	4620      	mov	r0, r4
 800a7e0:	f000 fede 	bl	800b5a0 <_free_r>
 800a7e4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a7e6:	b111      	cbz	r1, 800a7ee <_reclaim_reent+0x9e>
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	f000 fed9 	bl	800b5a0 <_free_r>
 800a7ee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a7f0:	b111      	cbz	r1, 800a7f8 <_reclaim_reent+0xa8>
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	f000 fed4 	bl	800b5a0 <_free_r>
 800a7f8:	6a23      	ldr	r3, [r4, #32]
 800a7fa:	b11b      	cbz	r3, 800a804 <_reclaim_reent+0xb4>
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a802:	4718      	bx	r3
 800a804:	bd70      	pop	{r4, r5, r6, pc}
 800a806:	bf00      	nop
 800a808:	20000030 	.word	0x20000030

0800a80c <_lseek_r>:
 800a80c:	b538      	push	{r3, r4, r5, lr}
 800a80e:	4d07      	ldr	r5, [pc, #28]	@ (800a82c <_lseek_r+0x20>)
 800a810:	4604      	mov	r4, r0
 800a812:	4608      	mov	r0, r1
 800a814:	4611      	mov	r1, r2
 800a816:	2200      	movs	r2, #0
 800a818:	602a      	str	r2, [r5, #0]
 800a81a:	461a      	mov	r2, r3
 800a81c:	f7f7 fd23 	bl	8002266 <_lseek>
 800a820:	1c43      	adds	r3, r0, #1
 800a822:	d102      	bne.n	800a82a <_lseek_r+0x1e>
 800a824:	682b      	ldr	r3, [r5, #0]
 800a826:	b103      	cbz	r3, 800a82a <_lseek_r+0x1e>
 800a828:	6023      	str	r3, [r4, #0]
 800a82a:	bd38      	pop	{r3, r4, r5, pc}
 800a82c:	20001f10 	.word	0x20001f10

0800a830 <_read_r>:
 800a830:	b538      	push	{r3, r4, r5, lr}
 800a832:	4d07      	ldr	r5, [pc, #28]	@ (800a850 <_read_r+0x20>)
 800a834:	4604      	mov	r4, r0
 800a836:	4608      	mov	r0, r1
 800a838:	4611      	mov	r1, r2
 800a83a:	2200      	movs	r2, #0
 800a83c:	602a      	str	r2, [r5, #0]
 800a83e:	461a      	mov	r2, r3
 800a840:	f7f7 fccd 	bl	80021de <_read>
 800a844:	1c43      	adds	r3, r0, #1
 800a846:	d102      	bne.n	800a84e <_read_r+0x1e>
 800a848:	682b      	ldr	r3, [r5, #0]
 800a84a:	b103      	cbz	r3, 800a84e <_read_r+0x1e>
 800a84c:	6023      	str	r3, [r4, #0]
 800a84e:	bd38      	pop	{r3, r4, r5, pc}
 800a850:	20001f10 	.word	0x20001f10

0800a854 <_write_r>:
 800a854:	b538      	push	{r3, r4, r5, lr}
 800a856:	4d07      	ldr	r5, [pc, #28]	@ (800a874 <_write_r+0x20>)
 800a858:	4604      	mov	r4, r0
 800a85a:	4608      	mov	r0, r1
 800a85c:	4611      	mov	r1, r2
 800a85e:	2200      	movs	r2, #0
 800a860:	602a      	str	r2, [r5, #0]
 800a862:	461a      	mov	r2, r3
 800a864:	f7f7 f8de 	bl	8001a24 <_write>
 800a868:	1c43      	adds	r3, r0, #1
 800a86a:	d102      	bne.n	800a872 <_write_r+0x1e>
 800a86c:	682b      	ldr	r3, [r5, #0]
 800a86e:	b103      	cbz	r3, 800a872 <_write_r+0x1e>
 800a870:	6023      	str	r3, [r4, #0]
 800a872:	bd38      	pop	{r3, r4, r5, pc}
 800a874:	20001f10 	.word	0x20001f10

0800a878 <__errno>:
 800a878:	4b01      	ldr	r3, [pc, #4]	@ (800a880 <__errno+0x8>)
 800a87a:	6818      	ldr	r0, [r3, #0]
 800a87c:	4770      	bx	lr
 800a87e:	bf00      	nop
 800a880:	20000030 	.word	0x20000030

0800a884 <__libc_init_array>:
 800a884:	b570      	push	{r4, r5, r6, lr}
 800a886:	4d0d      	ldr	r5, [pc, #52]	@ (800a8bc <__libc_init_array+0x38>)
 800a888:	4c0d      	ldr	r4, [pc, #52]	@ (800a8c0 <__libc_init_array+0x3c>)
 800a88a:	1b64      	subs	r4, r4, r5
 800a88c:	10a4      	asrs	r4, r4, #2
 800a88e:	2600      	movs	r6, #0
 800a890:	42a6      	cmp	r6, r4
 800a892:	d109      	bne.n	800a8a8 <__libc_init_array+0x24>
 800a894:	4d0b      	ldr	r5, [pc, #44]	@ (800a8c4 <__libc_init_array+0x40>)
 800a896:	4c0c      	ldr	r4, [pc, #48]	@ (800a8c8 <__libc_init_array+0x44>)
 800a898:	f001 fe62 	bl	800c560 <_init>
 800a89c:	1b64      	subs	r4, r4, r5
 800a89e:	10a4      	asrs	r4, r4, #2
 800a8a0:	2600      	movs	r6, #0
 800a8a2:	42a6      	cmp	r6, r4
 800a8a4:	d105      	bne.n	800a8b2 <__libc_init_array+0x2e>
 800a8a6:	bd70      	pop	{r4, r5, r6, pc}
 800a8a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8ac:	4798      	blx	r3
 800a8ae:	3601      	adds	r6, #1
 800a8b0:	e7ee      	b.n	800a890 <__libc_init_array+0xc>
 800a8b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8b6:	4798      	blx	r3
 800a8b8:	3601      	adds	r6, #1
 800a8ba:	e7f2      	b.n	800a8a2 <__libc_init_array+0x1e>
 800a8bc:	0800cd8c 	.word	0x0800cd8c
 800a8c0:	0800cd8c 	.word	0x0800cd8c
 800a8c4:	0800cd8c 	.word	0x0800cd8c
 800a8c8:	0800cd90 	.word	0x0800cd90

0800a8cc <__retarget_lock_init_recursive>:
 800a8cc:	4770      	bx	lr

0800a8ce <__retarget_lock_acquire_recursive>:
 800a8ce:	4770      	bx	lr

0800a8d0 <__retarget_lock_release_recursive>:
 800a8d0:	4770      	bx	lr

0800a8d2 <memcpy>:
 800a8d2:	440a      	add	r2, r1
 800a8d4:	4291      	cmp	r1, r2
 800a8d6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a8da:	d100      	bne.n	800a8de <memcpy+0xc>
 800a8dc:	4770      	bx	lr
 800a8de:	b510      	push	{r4, lr}
 800a8e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8e8:	4291      	cmp	r1, r2
 800a8ea:	d1f9      	bne.n	800a8e0 <memcpy+0xe>
 800a8ec:	bd10      	pop	{r4, pc}

0800a8ee <quorem>:
 800a8ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f2:	6903      	ldr	r3, [r0, #16]
 800a8f4:	690c      	ldr	r4, [r1, #16]
 800a8f6:	42a3      	cmp	r3, r4
 800a8f8:	4607      	mov	r7, r0
 800a8fa:	db7e      	blt.n	800a9fa <quorem+0x10c>
 800a8fc:	3c01      	subs	r4, #1
 800a8fe:	f101 0814 	add.w	r8, r1, #20
 800a902:	00a3      	lsls	r3, r4, #2
 800a904:	f100 0514 	add.w	r5, r0, #20
 800a908:	9300      	str	r3, [sp, #0]
 800a90a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a90e:	9301      	str	r3, [sp, #4]
 800a910:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a914:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a918:	3301      	adds	r3, #1
 800a91a:	429a      	cmp	r2, r3
 800a91c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a920:	fbb2 f6f3 	udiv	r6, r2, r3
 800a924:	d32e      	bcc.n	800a984 <quorem+0x96>
 800a926:	f04f 0a00 	mov.w	sl, #0
 800a92a:	46c4      	mov	ip, r8
 800a92c:	46ae      	mov	lr, r5
 800a92e:	46d3      	mov	fp, sl
 800a930:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a934:	b298      	uxth	r0, r3
 800a936:	fb06 a000 	mla	r0, r6, r0, sl
 800a93a:	0c02      	lsrs	r2, r0, #16
 800a93c:	0c1b      	lsrs	r3, r3, #16
 800a93e:	fb06 2303 	mla	r3, r6, r3, r2
 800a942:	f8de 2000 	ldr.w	r2, [lr]
 800a946:	b280      	uxth	r0, r0
 800a948:	b292      	uxth	r2, r2
 800a94a:	1a12      	subs	r2, r2, r0
 800a94c:	445a      	add	r2, fp
 800a94e:	f8de 0000 	ldr.w	r0, [lr]
 800a952:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a956:	b29b      	uxth	r3, r3
 800a958:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a95c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a960:	b292      	uxth	r2, r2
 800a962:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a966:	45e1      	cmp	r9, ip
 800a968:	f84e 2b04 	str.w	r2, [lr], #4
 800a96c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a970:	d2de      	bcs.n	800a930 <quorem+0x42>
 800a972:	9b00      	ldr	r3, [sp, #0]
 800a974:	58eb      	ldr	r3, [r5, r3]
 800a976:	b92b      	cbnz	r3, 800a984 <quorem+0x96>
 800a978:	9b01      	ldr	r3, [sp, #4]
 800a97a:	3b04      	subs	r3, #4
 800a97c:	429d      	cmp	r5, r3
 800a97e:	461a      	mov	r2, r3
 800a980:	d32f      	bcc.n	800a9e2 <quorem+0xf4>
 800a982:	613c      	str	r4, [r7, #16]
 800a984:	4638      	mov	r0, r7
 800a986:	f001 f97d 	bl	800bc84 <__mcmp>
 800a98a:	2800      	cmp	r0, #0
 800a98c:	db25      	blt.n	800a9da <quorem+0xec>
 800a98e:	4629      	mov	r1, r5
 800a990:	2000      	movs	r0, #0
 800a992:	f858 2b04 	ldr.w	r2, [r8], #4
 800a996:	f8d1 c000 	ldr.w	ip, [r1]
 800a99a:	fa1f fe82 	uxth.w	lr, r2
 800a99e:	fa1f f38c 	uxth.w	r3, ip
 800a9a2:	eba3 030e 	sub.w	r3, r3, lr
 800a9a6:	4403      	add	r3, r0
 800a9a8:	0c12      	lsrs	r2, r2, #16
 800a9aa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a9ae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9b8:	45c1      	cmp	r9, r8
 800a9ba:	f841 3b04 	str.w	r3, [r1], #4
 800a9be:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a9c2:	d2e6      	bcs.n	800a992 <quorem+0xa4>
 800a9c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a9cc:	b922      	cbnz	r2, 800a9d8 <quorem+0xea>
 800a9ce:	3b04      	subs	r3, #4
 800a9d0:	429d      	cmp	r5, r3
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	d30b      	bcc.n	800a9ee <quorem+0x100>
 800a9d6:	613c      	str	r4, [r7, #16]
 800a9d8:	3601      	adds	r6, #1
 800a9da:	4630      	mov	r0, r6
 800a9dc:	b003      	add	sp, #12
 800a9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e2:	6812      	ldr	r2, [r2, #0]
 800a9e4:	3b04      	subs	r3, #4
 800a9e6:	2a00      	cmp	r2, #0
 800a9e8:	d1cb      	bne.n	800a982 <quorem+0x94>
 800a9ea:	3c01      	subs	r4, #1
 800a9ec:	e7c6      	b.n	800a97c <quorem+0x8e>
 800a9ee:	6812      	ldr	r2, [r2, #0]
 800a9f0:	3b04      	subs	r3, #4
 800a9f2:	2a00      	cmp	r2, #0
 800a9f4:	d1ef      	bne.n	800a9d6 <quorem+0xe8>
 800a9f6:	3c01      	subs	r4, #1
 800a9f8:	e7ea      	b.n	800a9d0 <quorem+0xe2>
 800a9fa:	2000      	movs	r0, #0
 800a9fc:	e7ee      	b.n	800a9dc <quorem+0xee>
	...

0800aa00 <_dtoa_r>:
 800aa00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa04:	69c7      	ldr	r7, [r0, #28]
 800aa06:	b097      	sub	sp, #92	@ 0x5c
 800aa08:	ed8d 0b04 	vstr	d0, [sp, #16]
 800aa0c:	ec55 4b10 	vmov	r4, r5, d0
 800aa10:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800aa12:	9107      	str	r1, [sp, #28]
 800aa14:	4681      	mov	r9, r0
 800aa16:	920c      	str	r2, [sp, #48]	@ 0x30
 800aa18:	9311      	str	r3, [sp, #68]	@ 0x44
 800aa1a:	b97f      	cbnz	r7, 800aa3c <_dtoa_r+0x3c>
 800aa1c:	2010      	movs	r0, #16
 800aa1e:	f000 fe09 	bl	800b634 <malloc>
 800aa22:	4602      	mov	r2, r0
 800aa24:	f8c9 001c 	str.w	r0, [r9, #28]
 800aa28:	b920      	cbnz	r0, 800aa34 <_dtoa_r+0x34>
 800aa2a:	4ba9      	ldr	r3, [pc, #676]	@ (800acd0 <_dtoa_r+0x2d0>)
 800aa2c:	21ef      	movs	r1, #239	@ 0xef
 800aa2e:	48a9      	ldr	r0, [pc, #676]	@ (800acd4 <_dtoa_r+0x2d4>)
 800aa30:	f001 fce6 	bl	800c400 <__assert_func>
 800aa34:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800aa38:	6007      	str	r7, [r0, #0]
 800aa3a:	60c7      	str	r7, [r0, #12]
 800aa3c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800aa40:	6819      	ldr	r1, [r3, #0]
 800aa42:	b159      	cbz	r1, 800aa5c <_dtoa_r+0x5c>
 800aa44:	685a      	ldr	r2, [r3, #4]
 800aa46:	604a      	str	r2, [r1, #4]
 800aa48:	2301      	movs	r3, #1
 800aa4a:	4093      	lsls	r3, r2
 800aa4c:	608b      	str	r3, [r1, #8]
 800aa4e:	4648      	mov	r0, r9
 800aa50:	f000 fee6 	bl	800b820 <_Bfree>
 800aa54:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	601a      	str	r2, [r3, #0]
 800aa5c:	1e2b      	subs	r3, r5, #0
 800aa5e:	bfb9      	ittee	lt
 800aa60:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800aa64:	9305      	strlt	r3, [sp, #20]
 800aa66:	2300      	movge	r3, #0
 800aa68:	6033      	strge	r3, [r6, #0]
 800aa6a:	9f05      	ldr	r7, [sp, #20]
 800aa6c:	4b9a      	ldr	r3, [pc, #616]	@ (800acd8 <_dtoa_r+0x2d8>)
 800aa6e:	bfbc      	itt	lt
 800aa70:	2201      	movlt	r2, #1
 800aa72:	6032      	strlt	r2, [r6, #0]
 800aa74:	43bb      	bics	r3, r7
 800aa76:	d112      	bne.n	800aa9e <_dtoa_r+0x9e>
 800aa78:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800aa7a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800aa7e:	6013      	str	r3, [r2, #0]
 800aa80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aa84:	4323      	orrs	r3, r4
 800aa86:	f000 855a 	beq.w	800b53e <_dtoa_r+0xb3e>
 800aa8a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aa8c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800acec <_dtoa_r+0x2ec>
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	f000 855c 	beq.w	800b54e <_dtoa_r+0xb4e>
 800aa96:	f10a 0303 	add.w	r3, sl, #3
 800aa9a:	f000 bd56 	b.w	800b54a <_dtoa_r+0xb4a>
 800aa9e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	ec51 0b17 	vmov	r0, r1, d7
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800aaae:	f7f5 ffe3 	bl	8000a78 <__aeabi_dcmpeq>
 800aab2:	4680      	mov	r8, r0
 800aab4:	b158      	cbz	r0, 800aace <_dtoa_r+0xce>
 800aab6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800aab8:	2301      	movs	r3, #1
 800aaba:	6013      	str	r3, [r2, #0]
 800aabc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aabe:	b113      	cbz	r3, 800aac6 <_dtoa_r+0xc6>
 800aac0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800aac2:	4b86      	ldr	r3, [pc, #536]	@ (800acdc <_dtoa_r+0x2dc>)
 800aac4:	6013      	str	r3, [r2, #0]
 800aac6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800acf0 <_dtoa_r+0x2f0>
 800aaca:	f000 bd40 	b.w	800b54e <_dtoa_r+0xb4e>
 800aace:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800aad2:	aa14      	add	r2, sp, #80	@ 0x50
 800aad4:	a915      	add	r1, sp, #84	@ 0x54
 800aad6:	4648      	mov	r0, r9
 800aad8:	f001 f984 	bl	800bde4 <__d2b>
 800aadc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800aae0:	9002      	str	r0, [sp, #8]
 800aae2:	2e00      	cmp	r6, #0
 800aae4:	d078      	beq.n	800abd8 <_dtoa_r+0x1d8>
 800aae6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aae8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800aaec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aaf0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800aaf4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800aaf8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800aafc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ab00:	4619      	mov	r1, r3
 800ab02:	2200      	movs	r2, #0
 800ab04:	4b76      	ldr	r3, [pc, #472]	@ (800ace0 <_dtoa_r+0x2e0>)
 800ab06:	f7f5 fb97 	bl	8000238 <__aeabi_dsub>
 800ab0a:	a36b      	add	r3, pc, #428	@ (adr r3, 800acb8 <_dtoa_r+0x2b8>)
 800ab0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab10:	f7f5 fd4a 	bl	80005a8 <__aeabi_dmul>
 800ab14:	a36a      	add	r3, pc, #424	@ (adr r3, 800acc0 <_dtoa_r+0x2c0>)
 800ab16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab1a:	f7f5 fb8f 	bl	800023c <__adddf3>
 800ab1e:	4604      	mov	r4, r0
 800ab20:	4630      	mov	r0, r6
 800ab22:	460d      	mov	r5, r1
 800ab24:	f7f5 fcd6 	bl	80004d4 <__aeabi_i2d>
 800ab28:	a367      	add	r3, pc, #412	@ (adr r3, 800acc8 <_dtoa_r+0x2c8>)
 800ab2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2e:	f7f5 fd3b 	bl	80005a8 <__aeabi_dmul>
 800ab32:	4602      	mov	r2, r0
 800ab34:	460b      	mov	r3, r1
 800ab36:	4620      	mov	r0, r4
 800ab38:	4629      	mov	r1, r5
 800ab3a:	f7f5 fb7f 	bl	800023c <__adddf3>
 800ab3e:	4604      	mov	r4, r0
 800ab40:	460d      	mov	r5, r1
 800ab42:	f7f5 ffe1 	bl	8000b08 <__aeabi_d2iz>
 800ab46:	2200      	movs	r2, #0
 800ab48:	4607      	mov	r7, r0
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	4629      	mov	r1, r5
 800ab50:	f7f5 ff9c 	bl	8000a8c <__aeabi_dcmplt>
 800ab54:	b140      	cbz	r0, 800ab68 <_dtoa_r+0x168>
 800ab56:	4638      	mov	r0, r7
 800ab58:	f7f5 fcbc 	bl	80004d4 <__aeabi_i2d>
 800ab5c:	4622      	mov	r2, r4
 800ab5e:	462b      	mov	r3, r5
 800ab60:	f7f5 ff8a 	bl	8000a78 <__aeabi_dcmpeq>
 800ab64:	b900      	cbnz	r0, 800ab68 <_dtoa_r+0x168>
 800ab66:	3f01      	subs	r7, #1
 800ab68:	2f16      	cmp	r7, #22
 800ab6a:	d852      	bhi.n	800ac12 <_dtoa_r+0x212>
 800ab6c:	4b5d      	ldr	r3, [pc, #372]	@ (800ace4 <_dtoa_r+0x2e4>)
 800ab6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ab72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ab7a:	f7f5 ff87 	bl	8000a8c <__aeabi_dcmplt>
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	d049      	beq.n	800ac16 <_dtoa_r+0x216>
 800ab82:	3f01      	subs	r7, #1
 800ab84:	2300      	movs	r3, #0
 800ab86:	9310      	str	r3, [sp, #64]	@ 0x40
 800ab88:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ab8a:	1b9b      	subs	r3, r3, r6
 800ab8c:	1e5a      	subs	r2, r3, #1
 800ab8e:	bf45      	ittet	mi
 800ab90:	f1c3 0301 	rsbmi	r3, r3, #1
 800ab94:	9300      	strmi	r3, [sp, #0]
 800ab96:	2300      	movpl	r3, #0
 800ab98:	2300      	movmi	r3, #0
 800ab9a:	9206      	str	r2, [sp, #24]
 800ab9c:	bf54      	ite	pl
 800ab9e:	9300      	strpl	r3, [sp, #0]
 800aba0:	9306      	strmi	r3, [sp, #24]
 800aba2:	2f00      	cmp	r7, #0
 800aba4:	db39      	blt.n	800ac1a <_dtoa_r+0x21a>
 800aba6:	9b06      	ldr	r3, [sp, #24]
 800aba8:	970d      	str	r7, [sp, #52]	@ 0x34
 800abaa:	443b      	add	r3, r7
 800abac:	9306      	str	r3, [sp, #24]
 800abae:	2300      	movs	r3, #0
 800abb0:	9308      	str	r3, [sp, #32]
 800abb2:	9b07      	ldr	r3, [sp, #28]
 800abb4:	2b09      	cmp	r3, #9
 800abb6:	d863      	bhi.n	800ac80 <_dtoa_r+0x280>
 800abb8:	2b05      	cmp	r3, #5
 800abba:	bfc4      	itt	gt
 800abbc:	3b04      	subgt	r3, #4
 800abbe:	9307      	strgt	r3, [sp, #28]
 800abc0:	9b07      	ldr	r3, [sp, #28]
 800abc2:	f1a3 0302 	sub.w	r3, r3, #2
 800abc6:	bfcc      	ite	gt
 800abc8:	2400      	movgt	r4, #0
 800abca:	2401      	movle	r4, #1
 800abcc:	2b03      	cmp	r3, #3
 800abce:	d863      	bhi.n	800ac98 <_dtoa_r+0x298>
 800abd0:	e8df f003 	tbb	[pc, r3]
 800abd4:	2b375452 	.word	0x2b375452
 800abd8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800abdc:	441e      	add	r6, r3
 800abde:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800abe2:	2b20      	cmp	r3, #32
 800abe4:	bfc1      	itttt	gt
 800abe6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800abea:	409f      	lslgt	r7, r3
 800abec:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800abf0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800abf4:	bfd6      	itet	le
 800abf6:	f1c3 0320 	rsble	r3, r3, #32
 800abfa:	ea47 0003 	orrgt.w	r0, r7, r3
 800abfe:	fa04 f003 	lslle.w	r0, r4, r3
 800ac02:	f7f5 fc57 	bl	80004b4 <__aeabi_ui2d>
 800ac06:	2201      	movs	r2, #1
 800ac08:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ac0c:	3e01      	subs	r6, #1
 800ac0e:	9212      	str	r2, [sp, #72]	@ 0x48
 800ac10:	e776      	b.n	800ab00 <_dtoa_r+0x100>
 800ac12:	2301      	movs	r3, #1
 800ac14:	e7b7      	b.n	800ab86 <_dtoa_r+0x186>
 800ac16:	9010      	str	r0, [sp, #64]	@ 0x40
 800ac18:	e7b6      	b.n	800ab88 <_dtoa_r+0x188>
 800ac1a:	9b00      	ldr	r3, [sp, #0]
 800ac1c:	1bdb      	subs	r3, r3, r7
 800ac1e:	9300      	str	r3, [sp, #0]
 800ac20:	427b      	negs	r3, r7
 800ac22:	9308      	str	r3, [sp, #32]
 800ac24:	2300      	movs	r3, #0
 800ac26:	930d      	str	r3, [sp, #52]	@ 0x34
 800ac28:	e7c3      	b.n	800abb2 <_dtoa_r+0x1b2>
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac30:	eb07 0b03 	add.w	fp, r7, r3
 800ac34:	f10b 0301 	add.w	r3, fp, #1
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	9303      	str	r3, [sp, #12]
 800ac3c:	bfb8      	it	lt
 800ac3e:	2301      	movlt	r3, #1
 800ac40:	e006      	b.n	800ac50 <_dtoa_r+0x250>
 800ac42:	2301      	movs	r3, #1
 800ac44:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	dd28      	ble.n	800ac9e <_dtoa_r+0x29e>
 800ac4c:	469b      	mov	fp, r3
 800ac4e:	9303      	str	r3, [sp, #12]
 800ac50:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ac54:	2100      	movs	r1, #0
 800ac56:	2204      	movs	r2, #4
 800ac58:	f102 0514 	add.w	r5, r2, #20
 800ac5c:	429d      	cmp	r5, r3
 800ac5e:	d926      	bls.n	800acae <_dtoa_r+0x2ae>
 800ac60:	6041      	str	r1, [r0, #4]
 800ac62:	4648      	mov	r0, r9
 800ac64:	f000 fd9c 	bl	800b7a0 <_Balloc>
 800ac68:	4682      	mov	sl, r0
 800ac6a:	2800      	cmp	r0, #0
 800ac6c:	d142      	bne.n	800acf4 <_dtoa_r+0x2f4>
 800ac6e:	4b1e      	ldr	r3, [pc, #120]	@ (800ace8 <_dtoa_r+0x2e8>)
 800ac70:	4602      	mov	r2, r0
 800ac72:	f240 11af 	movw	r1, #431	@ 0x1af
 800ac76:	e6da      	b.n	800aa2e <_dtoa_r+0x2e>
 800ac78:	2300      	movs	r3, #0
 800ac7a:	e7e3      	b.n	800ac44 <_dtoa_r+0x244>
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	e7d5      	b.n	800ac2c <_dtoa_r+0x22c>
 800ac80:	2401      	movs	r4, #1
 800ac82:	2300      	movs	r3, #0
 800ac84:	9307      	str	r3, [sp, #28]
 800ac86:	9409      	str	r4, [sp, #36]	@ 0x24
 800ac88:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f8cd b00c 	str.w	fp, [sp, #12]
 800ac92:	2312      	movs	r3, #18
 800ac94:	920c      	str	r2, [sp, #48]	@ 0x30
 800ac96:	e7db      	b.n	800ac50 <_dtoa_r+0x250>
 800ac98:	2301      	movs	r3, #1
 800ac9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac9c:	e7f4      	b.n	800ac88 <_dtoa_r+0x288>
 800ac9e:	f04f 0b01 	mov.w	fp, #1
 800aca2:	f8cd b00c 	str.w	fp, [sp, #12]
 800aca6:	465b      	mov	r3, fp
 800aca8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800acac:	e7d0      	b.n	800ac50 <_dtoa_r+0x250>
 800acae:	3101      	adds	r1, #1
 800acb0:	0052      	lsls	r2, r2, #1
 800acb2:	e7d1      	b.n	800ac58 <_dtoa_r+0x258>
 800acb4:	f3af 8000 	nop.w
 800acb8:	636f4361 	.word	0x636f4361
 800acbc:	3fd287a7 	.word	0x3fd287a7
 800acc0:	8b60c8b3 	.word	0x8b60c8b3
 800acc4:	3fc68a28 	.word	0x3fc68a28
 800acc8:	509f79fb 	.word	0x509f79fb
 800accc:	3fd34413 	.word	0x3fd34413
 800acd0:	0800ca51 	.word	0x0800ca51
 800acd4:	0800ca68 	.word	0x0800ca68
 800acd8:	7ff00000 	.word	0x7ff00000
 800acdc:	0800ca21 	.word	0x0800ca21
 800ace0:	3ff80000 	.word	0x3ff80000
 800ace4:	0800cbb8 	.word	0x0800cbb8
 800ace8:	0800cac0 	.word	0x0800cac0
 800acec:	0800ca4d 	.word	0x0800ca4d
 800acf0:	0800ca20 	.word	0x0800ca20
 800acf4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800acf8:	6018      	str	r0, [r3, #0]
 800acfa:	9b03      	ldr	r3, [sp, #12]
 800acfc:	2b0e      	cmp	r3, #14
 800acfe:	f200 80a1 	bhi.w	800ae44 <_dtoa_r+0x444>
 800ad02:	2c00      	cmp	r4, #0
 800ad04:	f000 809e 	beq.w	800ae44 <_dtoa_r+0x444>
 800ad08:	2f00      	cmp	r7, #0
 800ad0a:	dd33      	ble.n	800ad74 <_dtoa_r+0x374>
 800ad0c:	4b9c      	ldr	r3, [pc, #624]	@ (800af80 <_dtoa_r+0x580>)
 800ad0e:	f007 020f 	and.w	r2, r7, #15
 800ad12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad16:	ed93 7b00 	vldr	d7, [r3]
 800ad1a:	05f8      	lsls	r0, r7, #23
 800ad1c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ad20:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ad24:	d516      	bpl.n	800ad54 <_dtoa_r+0x354>
 800ad26:	4b97      	ldr	r3, [pc, #604]	@ (800af84 <_dtoa_r+0x584>)
 800ad28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ad2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad30:	f7f5 fd64 	bl	80007fc <__aeabi_ddiv>
 800ad34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad38:	f004 040f 	and.w	r4, r4, #15
 800ad3c:	2603      	movs	r6, #3
 800ad3e:	4d91      	ldr	r5, [pc, #580]	@ (800af84 <_dtoa_r+0x584>)
 800ad40:	b954      	cbnz	r4, 800ad58 <_dtoa_r+0x358>
 800ad42:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ad46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad4a:	f7f5 fd57 	bl	80007fc <__aeabi_ddiv>
 800ad4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad52:	e028      	b.n	800ada6 <_dtoa_r+0x3a6>
 800ad54:	2602      	movs	r6, #2
 800ad56:	e7f2      	b.n	800ad3e <_dtoa_r+0x33e>
 800ad58:	07e1      	lsls	r1, r4, #31
 800ad5a:	d508      	bpl.n	800ad6e <_dtoa_r+0x36e>
 800ad5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ad60:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ad64:	f7f5 fc20 	bl	80005a8 <__aeabi_dmul>
 800ad68:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ad6c:	3601      	adds	r6, #1
 800ad6e:	1064      	asrs	r4, r4, #1
 800ad70:	3508      	adds	r5, #8
 800ad72:	e7e5      	b.n	800ad40 <_dtoa_r+0x340>
 800ad74:	f000 80af 	beq.w	800aed6 <_dtoa_r+0x4d6>
 800ad78:	427c      	negs	r4, r7
 800ad7a:	4b81      	ldr	r3, [pc, #516]	@ (800af80 <_dtoa_r+0x580>)
 800ad7c:	4d81      	ldr	r5, [pc, #516]	@ (800af84 <_dtoa_r+0x584>)
 800ad7e:	f004 020f 	and.w	r2, r4, #15
 800ad82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ad8e:	f7f5 fc0b 	bl	80005a8 <__aeabi_dmul>
 800ad92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad96:	1124      	asrs	r4, r4, #4
 800ad98:	2300      	movs	r3, #0
 800ad9a:	2602      	movs	r6, #2
 800ad9c:	2c00      	cmp	r4, #0
 800ad9e:	f040 808f 	bne.w	800aec0 <_dtoa_r+0x4c0>
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d1d3      	bne.n	800ad4e <_dtoa_r+0x34e>
 800ada6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ada8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800adac:	2b00      	cmp	r3, #0
 800adae:	f000 8094 	beq.w	800aeda <_dtoa_r+0x4da>
 800adb2:	4b75      	ldr	r3, [pc, #468]	@ (800af88 <_dtoa_r+0x588>)
 800adb4:	2200      	movs	r2, #0
 800adb6:	4620      	mov	r0, r4
 800adb8:	4629      	mov	r1, r5
 800adba:	f7f5 fe67 	bl	8000a8c <__aeabi_dcmplt>
 800adbe:	2800      	cmp	r0, #0
 800adc0:	f000 808b 	beq.w	800aeda <_dtoa_r+0x4da>
 800adc4:	9b03      	ldr	r3, [sp, #12]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	f000 8087 	beq.w	800aeda <_dtoa_r+0x4da>
 800adcc:	f1bb 0f00 	cmp.w	fp, #0
 800add0:	dd34      	ble.n	800ae3c <_dtoa_r+0x43c>
 800add2:	4620      	mov	r0, r4
 800add4:	4b6d      	ldr	r3, [pc, #436]	@ (800af8c <_dtoa_r+0x58c>)
 800add6:	2200      	movs	r2, #0
 800add8:	4629      	mov	r1, r5
 800adda:	f7f5 fbe5 	bl	80005a8 <__aeabi_dmul>
 800adde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ade2:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800ade6:	3601      	adds	r6, #1
 800ade8:	465c      	mov	r4, fp
 800adea:	4630      	mov	r0, r6
 800adec:	f7f5 fb72 	bl	80004d4 <__aeabi_i2d>
 800adf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adf4:	f7f5 fbd8 	bl	80005a8 <__aeabi_dmul>
 800adf8:	4b65      	ldr	r3, [pc, #404]	@ (800af90 <_dtoa_r+0x590>)
 800adfa:	2200      	movs	r2, #0
 800adfc:	f7f5 fa1e 	bl	800023c <__adddf3>
 800ae00:	4605      	mov	r5, r0
 800ae02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ae06:	2c00      	cmp	r4, #0
 800ae08:	d16a      	bne.n	800aee0 <_dtoa_r+0x4e0>
 800ae0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae0e:	4b61      	ldr	r3, [pc, #388]	@ (800af94 <_dtoa_r+0x594>)
 800ae10:	2200      	movs	r2, #0
 800ae12:	f7f5 fa11 	bl	8000238 <__aeabi_dsub>
 800ae16:	4602      	mov	r2, r0
 800ae18:	460b      	mov	r3, r1
 800ae1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ae1e:	462a      	mov	r2, r5
 800ae20:	4633      	mov	r3, r6
 800ae22:	f7f5 fe51 	bl	8000ac8 <__aeabi_dcmpgt>
 800ae26:	2800      	cmp	r0, #0
 800ae28:	f040 8298 	bne.w	800b35c <_dtoa_r+0x95c>
 800ae2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae30:	462a      	mov	r2, r5
 800ae32:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ae36:	f7f5 fe29 	bl	8000a8c <__aeabi_dcmplt>
 800ae3a:	bb38      	cbnz	r0, 800ae8c <_dtoa_r+0x48c>
 800ae3c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800ae40:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ae44:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	f2c0 8157 	blt.w	800b0fa <_dtoa_r+0x6fa>
 800ae4c:	2f0e      	cmp	r7, #14
 800ae4e:	f300 8154 	bgt.w	800b0fa <_dtoa_r+0x6fa>
 800ae52:	4b4b      	ldr	r3, [pc, #300]	@ (800af80 <_dtoa_r+0x580>)
 800ae54:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ae58:	ed93 7b00 	vldr	d7, [r3]
 800ae5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	ed8d 7b00 	vstr	d7, [sp]
 800ae64:	f280 80e5 	bge.w	800b032 <_dtoa_r+0x632>
 800ae68:	9b03      	ldr	r3, [sp, #12]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	f300 80e1 	bgt.w	800b032 <_dtoa_r+0x632>
 800ae70:	d10c      	bne.n	800ae8c <_dtoa_r+0x48c>
 800ae72:	4b48      	ldr	r3, [pc, #288]	@ (800af94 <_dtoa_r+0x594>)
 800ae74:	2200      	movs	r2, #0
 800ae76:	ec51 0b17 	vmov	r0, r1, d7
 800ae7a:	f7f5 fb95 	bl	80005a8 <__aeabi_dmul>
 800ae7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae82:	f7f5 fe17 	bl	8000ab4 <__aeabi_dcmpge>
 800ae86:	2800      	cmp	r0, #0
 800ae88:	f000 8266 	beq.w	800b358 <_dtoa_r+0x958>
 800ae8c:	2400      	movs	r4, #0
 800ae8e:	4625      	mov	r5, r4
 800ae90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ae92:	4656      	mov	r6, sl
 800ae94:	ea6f 0803 	mvn.w	r8, r3
 800ae98:	2700      	movs	r7, #0
 800ae9a:	4621      	mov	r1, r4
 800ae9c:	4648      	mov	r0, r9
 800ae9e:	f000 fcbf 	bl	800b820 <_Bfree>
 800aea2:	2d00      	cmp	r5, #0
 800aea4:	f000 80bd 	beq.w	800b022 <_dtoa_r+0x622>
 800aea8:	b12f      	cbz	r7, 800aeb6 <_dtoa_r+0x4b6>
 800aeaa:	42af      	cmp	r7, r5
 800aeac:	d003      	beq.n	800aeb6 <_dtoa_r+0x4b6>
 800aeae:	4639      	mov	r1, r7
 800aeb0:	4648      	mov	r0, r9
 800aeb2:	f000 fcb5 	bl	800b820 <_Bfree>
 800aeb6:	4629      	mov	r1, r5
 800aeb8:	4648      	mov	r0, r9
 800aeba:	f000 fcb1 	bl	800b820 <_Bfree>
 800aebe:	e0b0      	b.n	800b022 <_dtoa_r+0x622>
 800aec0:	07e2      	lsls	r2, r4, #31
 800aec2:	d505      	bpl.n	800aed0 <_dtoa_r+0x4d0>
 800aec4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aec8:	f7f5 fb6e 	bl	80005a8 <__aeabi_dmul>
 800aecc:	3601      	adds	r6, #1
 800aece:	2301      	movs	r3, #1
 800aed0:	1064      	asrs	r4, r4, #1
 800aed2:	3508      	adds	r5, #8
 800aed4:	e762      	b.n	800ad9c <_dtoa_r+0x39c>
 800aed6:	2602      	movs	r6, #2
 800aed8:	e765      	b.n	800ada6 <_dtoa_r+0x3a6>
 800aeda:	9c03      	ldr	r4, [sp, #12]
 800aedc:	46b8      	mov	r8, r7
 800aede:	e784      	b.n	800adea <_dtoa_r+0x3ea>
 800aee0:	4b27      	ldr	r3, [pc, #156]	@ (800af80 <_dtoa_r+0x580>)
 800aee2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aee4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aee8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aeec:	4454      	add	r4, sl
 800aeee:	2900      	cmp	r1, #0
 800aef0:	d054      	beq.n	800af9c <_dtoa_r+0x59c>
 800aef2:	4929      	ldr	r1, [pc, #164]	@ (800af98 <_dtoa_r+0x598>)
 800aef4:	2000      	movs	r0, #0
 800aef6:	f7f5 fc81 	bl	80007fc <__aeabi_ddiv>
 800aefa:	4633      	mov	r3, r6
 800aefc:	462a      	mov	r2, r5
 800aefe:	f7f5 f99b 	bl	8000238 <__aeabi_dsub>
 800af02:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800af06:	4656      	mov	r6, sl
 800af08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af0c:	f7f5 fdfc 	bl	8000b08 <__aeabi_d2iz>
 800af10:	4605      	mov	r5, r0
 800af12:	f7f5 fadf 	bl	80004d4 <__aeabi_i2d>
 800af16:	4602      	mov	r2, r0
 800af18:	460b      	mov	r3, r1
 800af1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af1e:	f7f5 f98b 	bl	8000238 <__aeabi_dsub>
 800af22:	3530      	adds	r5, #48	@ 0x30
 800af24:	4602      	mov	r2, r0
 800af26:	460b      	mov	r3, r1
 800af28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800af2c:	f806 5b01 	strb.w	r5, [r6], #1
 800af30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800af34:	f7f5 fdaa 	bl	8000a8c <__aeabi_dcmplt>
 800af38:	2800      	cmp	r0, #0
 800af3a:	d172      	bne.n	800b022 <_dtoa_r+0x622>
 800af3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af40:	4911      	ldr	r1, [pc, #68]	@ (800af88 <_dtoa_r+0x588>)
 800af42:	2000      	movs	r0, #0
 800af44:	f7f5 f978 	bl	8000238 <__aeabi_dsub>
 800af48:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800af4c:	f7f5 fd9e 	bl	8000a8c <__aeabi_dcmplt>
 800af50:	2800      	cmp	r0, #0
 800af52:	f040 80b4 	bne.w	800b0be <_dtoa_r+0x6be>
 800af56:	42a6      	cmp	r6, r4
 800af58:	f43f af70 	beq.w	800ae3c <_dtoa_r+0x43c>
 800af5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800af60:	4b0a      	ldr	r3, [pc, #40]	@ (800af8c <_dtoa_r+0x58c>)
 800af62:	2200      	movs	r2, #0
 800af64:	f7f5 fb20 	bl	80005a8 <__aeabi_dmul>
 800af68:	4b08      	ldr	r3, [pc, #32]	@ (800af8c <_dtoa_r+0x58c>)
 800af6a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800af6e:	2200      	movs	r2, #0
 800af70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af74:	f7f5 fb18 	bl	80005a8 <__aeabi_dmul>
 800af78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af7c:	e7c4      	b.n	800af08 <_dtoa_r+0x508>
 800af7e:	bf00      	nop
 800af80:	0800cbb8 	.word	0x0800cbb8
 800af84:	0800cb90 	.word	0x0800cb90
 800af88:	3ff00000 	.word	0x3ff00000
 800af8c:	40240000 	.word	0x40240000
 800af90:	401c0000 	.word	0x401c0000
 800af94:	40140000 	.word	0x40140000
 800af98:	3fe00000 	.word	0x3fe00000
 800af9c:	4631      	mov	r1, r6
 800af9e:	4628      	mov	r0, r5
 800afa0:	f7f5 fb02 	bl	80005a8 <__aeabi_dmul>
 800afa4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800afa8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800afaa:	4656      	mov	r6, sl
 800afac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afb0:	f7f5 fdaa 	bl	8000b08 <__aeabi_d2iz>
 800afb4:	4605      	mov	r5, r0
 800afb6:	f7f5 fa8d 	bl	80004d4 <__aeabi_i2d>
 800afba:	4602      	mov	r2, r0
 800afbc:	460b      	mov	r3, r1
 800afbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afc2:	f7f5 f939 	bl	8000238 <__aeabi_dsub>
 800afc6:	3530      	adds	r5, #48	@ 0x30
 800afc8:	f806 5b01 	strb.w	r5, [r6], #1
 800afcc:	4602      	mov	r2, r0
 800afce:	460b      	mov	r3, r1
 800afd0:	42a6      	cmp	r6, r4
 800afd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800afd6:	f04f 0200 	mov.w	r2, #0
 800afda:	d124      	bne.n	800b026 <_dtoa_r+0x626>
 800afdc:	4baf      	ldr	r3, [pc, #700]	@ (800b29c <_dtoa_r+0x89c>)
 800afde:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800afe2:	f7f5 f92b 	bl	800023c <__adddf3>
 800afe6:	4602      	mov	r2, r0
 800afe8:	460b      	mov	r3, r1
 800afea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afee:	f7f5 fd6b 	bl	8000ac8 <__aeabi_dcmpgt>
 800aff2:	2800      	cmp	r0, #0
 800aff4:	d163      	bne.n	800b0be <_dtoa_r+0x6be>
 800aff6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800affa:	49a8      	ldr	r1, [pc, #672]	@ (800b29c <_dtoa_r+0x89c>)
 800affc:	2000      	movs	r0, #0
 800affe:	f7f5 f91b 	bl	8000238 <__aeabi_dsub>
 800b002:	4602      	mov	r2, r0
 800b004:	460b      	mov	r3, r1
 800b006:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b00a:	f7f5 fd3f 	bl	8000a8c <__aeabi_dcmplt>
 800b00e:	2800      	cmp	r0, #0
 800b010:	f43f af14 	beq.w	800ae3c <_dtoa_r+0x43c>
 800b014:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b016:	1e73      	subs	r3, r6, #1
 800b018:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b01a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b01e:	2b30      	cmp	r3, #48	@ 0x30
 800b020:	d0f8      	beq.n	800b014 <_dtoa_r+0x614>
 800b022:	4647      	mov	r7, r8
 800b024:	e03b      	b.n	800b09e <_dtoa_r+0x69e>
 800b026:	4b9e      	ldr	r3, [pc, #632]	@ (800b2a0 <_dtoa_r+0x8a0>)
 800b028:	f7f5 fabe 	bl	80005a8 <__aeabi_dmul>
 800b02c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b030:	e7bc      	b.n	800afac <_dtoa_r+0x5ac>
 800b032:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b036:	4656      	mov	r6, sl
 800b038:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b03c:	4620      	mov	r0, r4
 800b03e:	4629      	mov	r1, r5
 800b040:	f7f5 fbdc 	bl	80007fc <__aeabi_ddiv>
 800b044:	f7f5 fd60 	bl	8000b08 <__aeabi_d2iz>
 800b048:	4680      	mov	r8, r0
 800b04a:	f7f5 fa43 	bl	80004d4 <__aeabi_i2d>
 800b04e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b052:	f7f5 faa9 	bl	80005a8 <__aeabi_dmul>
 800b056:	4602      	mov	r2, r0
 800b058:	460b      	mov	r3, r1
 800b05a:	4620      	mov	r0, r4
 800b05c:	4629      	mov	r1, r5
 800b05e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b062:	f7f5 f8e9 	bl	8000238 <__aeabi_dsub>
 800b066:	f806 4b01 	strb.w	r4, [r6], #1
 800b06a:	9d03      	ldr	r5, [sp, #12]
 800b06c:	eba6 040a 	sub.w	r4, r6, sl
 800b070:	42a5      	cmp	r5, r4
 800b072:	4602      	mov	r2, r0
 800b074:	460b      	mov	r3, r1
 800b076:	d133      	bne.n	800b0e0 <_dtoa_r+0x6e0>
 800b078:	f7f5 f8e0 	bl	800023c <__adddf3>
 800b07c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b080:	4604      	mov	r4, r0
 800b082:	460d      	mov	r5, r1
 800b084:	f7f5 fd20 	bl	8000ac8 <__aeabi_dcmpgt>
 800b088:	b9c0      	cbnz	r0, 800b0bc <_dtoa_r+0x6bc>
 800b08a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b08e:	4620      	mov	r0, r4
 800b090:	4629      	mov	r1, r5
 800b092:	f7f5 fcf1 	bl	8000a78 <__aeabi_dcmpeq>
 800b096:	b110      	cbz	r0, 800b09e <_dtoa_r+0x69e>
 800b098:	f018 0f01 	tst.w	r8, #1
 800b09c:	d10e      	bne.n	800b0bc <_dtoa_r+0x6bc>
 800b09e:	9902      	ldr	r1, [sp, #8]
 800b0a0:	4648      	mov	r0, r9
 800b0a2:	f000 fbbd 	bl	800b820 <_Bfree>
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	7033      	strb	r3, [r6, #0]
 800b0aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b0ac:	3701      	adds	r7, #1
 800b0ae:	601f      	str	r7, [r3, #0]
 800b0b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	f000 824b 	beq.w	800b54e <_dtoa_r+0xb4e>
 800b0b8:	601e      	str	r6, [r3, #0]
 800b0ba:	e248      	b.n	800b54e <_dtoa_r+0xb4e>
 800b0bc:	46b8      	mov	r8, r7
 800b0be:	4633      	mov	r3, r6
 800b0c0:	461e      	mov	r6, r3
 800b0c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0c6:	2a39      	cmp	r2, #57	@ 0x39
 800b0c8:	d106      	bne.n	800b0d8 <_dtoa_r+0x6d8>
 800b0ca:	459a      	cmp	sl, r3
 800b0cc:	d1f8      	bne.n	800b0c0 <_dtoa_r+0x6c0>
 800b0ce:	2230      	movs	r2, #48	@ 0x30
 800b0d0:	f108 0801 	add.w	r8, r8, #1
 800b0d4:	f88a 2000 	strb.w	r2, [sl]
 800b0d8:	781a      	ldrb	r2, [r3, #0]
 800b0da:	3201      	adds	r2, #1
 800b0dc:	701a      	strb	r2, [r3, #0]
 800b0de:	e7a0      	b.n	800b022 <_dtoa_r+0x622>
 800b0e0:	4b6f      	ldr	r3, [pc, #444]	@ (800b2a0 <_dtoa_r+0x8a0>)
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	f7f5 fa60 	bl	80005a8 <__aeabi_dmul>
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	4604      	mov	r4, r0
 800b0ee:	460d      	mov	r5, r1
 800b0f0:	f7f5 fcc2 	bl	8000a78 <__aeabi_dcmpeq>
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	d09f      	beq.n	800b038 <_dtoa_r+0x638>
 800b0f8:	e7d1      	b.n	800b09e <_dtoa_r+0x69e>
 800b0fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0fc:	2a00      	cmp	r2, #0
 800b0fe:	f000 80ea 	beq.w	800b2d6 <_dtoa_r+0x8d6>
 800b102:	9a07      	ldr	r2, [sp, #28]
 800b104:	2a01      	cmp	r2, #1
 800b106:	f300 80cd 	bgt.w	800b2a4 <_dtoa_r+0x8a4>
 800b10a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b10c:	2a00      	cmp	r2, #0
 800b10e:	f000 80c1 	beq.w	800b294 <_dtoa_r+0x894>
 800b112:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b116:	9c08      	ldr	r4, [sp, #32]
 800b118:	9e00      	ldr	r6, [sp, #0]
 800b11a:	9a00      	ldr	r2, [sp, #0]
 800b11c:	441a      	add	r2, r3
 800b11e:	9200      	str	r2, [sp, #0]
 800b120:	9a06      	ldr	r2, [sp, #24]
 800b122:	2101      	movs	r1, #1
 800b124:	441a      	add	r2, r3
 800b126:	4648      	mov	r0, r9
 800b128:	9206      	str	r2, [sp, #24]
 800b12a:	f000 fc2d 	bl	800b988 <__i2b>
 800b12e:	4605      	mov	r5, r0
 800b130:	b166      	cbz	r6, 800b14c <_dtoa_r+0x74c>
 800b132:	9b06      	ldr	r3, [sp, #24]
 800b134:	2b00      	cmp	r3, #0
 800b136:	dd09      	ble.n	800b14c <_dtoa_r+0x74c>
 800b138:	42b3      	cmp	r3, r6
 800b13a:	9a00      	ldr	r2, [sp, #0]
 800b13c:	bfa8      	it	ge
 800b13e:	4633      	movge	r3, r6
 800b140:	1ad2      	subs	r2, r2, r3
 800b142:	9200      	str	r2, [sp, #0]
 800b144:	9a06      	ldr	r2, [sp, #24]
 800b146:	1af6      	subs	r6, r6, r3
 800b148:	1ad3      	subs	r3, r2, r3
 800b14a:	9306      	str	r3, [sp, #24]
 800b14c:	9b08      	ldr	r3, [sp, #32]
 800b14e:	b30b      	cbz	r3, 800b194 <_dtoa_r+0x794>
 800b150:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b152:	2b00      	cmp	r3, #0
 800b154:	f000 80c6 	beq.w	800b2e4 <_dtoa_r+0x8e4>
 800b158:	2c00      	cmp	r4, #0
 800b15a:	f000 80c0 	beq.w	800b2de <_dtoa_r+0x8de>
 800b15e:	4629      	mov	r1, r5
 800b160:	4622      	mov	r2, r4
 800b162:	4648      	mov	r0, r9
 800b164:	f000 fcc8 	bl	800baf8 <__pow5mult>
 800b168:	9a02      	ldr	r2, [sp, #8]
 800b16a:	4601      	mov	r1, r0
 800b16c:	4605      	mov	r5, r0
 800b16e:	4648      	mov	r0, r9
 800b170:	f000 fc20 	bl	800b9b4 <__multiply>
 800b174:	9902      	ldr	r1, [sp, #8]
 800b176:	4680      	mov	r8, r0
 800b178:	4648      	mov	r0, r9
 800b17a:	f000 fb51 	bl	800b820 <_Bfree>
 800b17e:	9b08      	ldr	r3, [sp, #32]
 800b180:	1b1b      	subs	r3, r3, r4
 800b182:	9308      	str	r3, [sp, #32]
 800b184:	f000 80b1 	beq.w	800b2ea <_dtoa_r+0x8ea>
 800b188:	9a08      	ldr	r2, [sp, #32]
 800b18a:	4641      	mov	r1, r8
 800b18c:	4648      	mov	r0, r9
 800b18e:	f000 fcb3 	bl	800baf8 <__pow5mult>
 800b192:	9002      	str	r0, [sp, #8]
 800b194:	2101      	movs	r1, #1
 800b196:	4648      	mov	r0, r9
 800b198:	f000 fbf6 	bl	800b988 <__i2b>
 800b19c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b19e:	4604      	mov	r4, r0
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	f000 81d8 	beq.w	800b556 <_dtoa_r+0xb56>
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	4601      	mov	r1, r0
 800b1aa:	4648      	mov	r0, r9
 800b1ac:	f000 fca4 	bl	800baf8 <__pow5mult>
 800b1b0:	9b07      	ldr	r3, [sp, #28]
 800b1b2:	2b01      	cmp	r3, #1
 800b1b4:	4604      	mov	r4, r0
 800b1b6:	f300 809f 	bgt.w	800b2f8 <_dtoa_r+0x8f8>
 800b1ba:	9b04      	ldr	r3, [sp, #16]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	f040 8097 	bne.w	800b2f0 <_dtoa_r+0x8f0>
 800b1c2:	9b05      	ldr	r3, [sp, #20]
 800b1c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	f040 8093 	bne.w	800b2f4 <_dtoa_r+0x8f4>
 800b1ce:	9b05      	ldr	r3, [sp, #20]
 800b1d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b1d4:	0d1b      	lsrs	r3, r3, #20
 800b1d6:	051b      	lsls	r3, r3, #20
 800b1d8:	b133      	cbz	r3, 800b1e8 <_dtoa_r+0x7e8>
 800b1da:	9b00      	ldr	r3, [sp, #0]
 800b1dc:	3301      	adds	r3, #1
 800b1de:	9300      	str	r3, [sp, #0]
 800b1e0:	9b06      	ldr	r3, [sp, #24]
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	9306      	str	r3, [sp, #24]
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	9308      	str	r3, [sp, #32]
 800b1ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	f000 81b8 	beq.w	800b562 <_dtoa_r+0xb62>
 800b1f2:	6923      	ldr	r3, [r4, #16]
 800b1f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b1f8:	6918      	ldr	r0, [r3, #16]
 800b1fa:	f000 fb79 	bl	800b8f0 <__hi0bits>
 800b1fe:	f1c0 0020 	rsb	r0, r0, #32
 800b202:	9b06      	ldr	r3, [sp, #24]
 800b204:	4418      	add	r0, r3
 800b206:	f010 001f 	ands.w	r0, r0, #31
 800b20a:	f000 8082 	beq.w	800b312 <_dtoa_r+0x912>
 800b20e:	f1c0 0320 	rsb	r3, r0, #32
 800b212:	2b04      	cmp	r3, #4
 800b214:	dd73      	ble.n	800b2fe <_dtoa_r+0x8fe>
 800b216:	9b00      	ldr	r3, [sp, #0]
 800b218:	f1c0 001c 	rsb	r0, r0, #28
 800b21c:	4403      	add	r3, r0
 800b21e:	9300      	str	r3, [sp, #0]
 800b220:	9b06      	ldr	r3, [sp, #24]
 800b222:	4403      	add	r3, r0
 800b224:	4406      	add	r6, r0
 800b226:	9306      	str	r3, [sp, #24]
 800b228:	9b00      	ldr	r3, [sp, #0]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	dd05      	ble.n	800b23a <_dtoa_r+0x83a>
 800b22e:	9902      	ldr	r1, [sp, #8]
 800b230:	461a      	mov	r2, r3
 800b232:	4648      	mov	r0, r9
 800b234:	f000 fcba 	bl	800bbac <__lshift>
 800b238:	9002      	str	r0, [sp, #8]
 800b23a:	9b06      	ldr	r3, [sp, #24]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	dd05      	ble.n	800b24c <_dtoa_r+0x84c>
 800b240:	4621      	mov	r1, r4
 800b242:	461a      	mov	r2, r3
 800b244:	4648      	mov	r0, r9
 800b246:	f000 fcb1 	bl	800bbac <__lshift>
 800b24a:	4604      	mov	r4, r0
 800b24c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d061      	beq.n	800b316 <_dtoa_r+0x916>
 800b252:	9802      	ldr	r0, [sp, #8]
 800b254:	4621      	mov	r1, r4
 800b256:	f000 fd15 	bl	800bc84 <__mcmp>
 800b25a:	2800      	cmp	r0, #0
 800b25c:	da5b      	bge.n	800b316 <_dtoa_r+0x916>
 800b25e:	2300      	movs	r3, #0
 800b260:	9902      	ldr	r1, [sp, #8]
 800b262:	220a      	movs	r2, #10
 800b264:	4648      	mov	r0, r9
 800b266:	f000 fafd 	bl	800b864 <__multadd>
 800b26a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b26c:	9002      	str	r0, [sp, #8]
 800b26e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800b272:	2b00      	cmp	r3, #0
 800b274:	f000 8177 	beq.w	800b566 <_dtoa_r+0xb66>
 800b278:	4629      	mov	r1, r5
 800b27a:	2300      	movs	r3, #0
 800b27c:	220a      	movs	r2, #10
 800b27e:	4648      	mov	r0, r9
 800b280:	f000 faf0 	bl	800b864 <__multadd>
 800b284:	f1bb 0f00 	cmp.w	fp, #0
 800b288:	4605      	mov	r5, r0
 800b28a:	dc6f      	bgt.n	800b36c <_dtoa_r+0x96c>
 800b28c:	9b07      	ldr	r3, [sp, #28]
 800b28e:	2b02      	cmp	r3, #2
 800b290:	dc49      	bgt.n	800b326 <_dtoa_r+0x926>
 800b292:	e06b      	b.n	800b36c <_dtoa_r+0x96c>
 800b294:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b296:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b29a:	e73c      	b.n	800b116 <_dtoa_r+0x716>
 800b29c:	3fe00000 	.word	0x3fe00000
 800b2a0:	40240000 	.word	0x40240000
 800b2a4:	9b03      	ldr	r3, [sp, #12]
 800b2a6:	1e5c      	subs	r4, r3, #1
 800b2a8:	9b08      	ldr	r3, [sp, #32]
 800b2aa:	42a3      	cmp	r3, r4
 800b2ac:	db09      	blt.n	800b2c2 <_dtoa_r+0x8c2>
 800b2ae:	1b1c      	subs	r4, r3, r4
 800b2b0:	9b03      	ldr	r3, [sp, #12]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	f6bf af30 	bge.w	800b118 <_dtoa_r+0x718>
 800b2b8:	9b00      	ldr	r3, [sp, #0]
 800b2ba:	9a03      	ldr	r2, [sp, #12]
 800b2bc:	1a9e      	subs	r6, r3, r2
 800b2be:	2300      	movs	r3, #0
 800b2c0:	e72b      	b.n	800b11a <_dtoa_r+0x71a>
 800b2c2:	9b08      	ldr	r3, [sp, #32]
 800b2c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b2c6:	9408      	str	r4, [sp, #32]
 800b2c8:	1ae3      	subs	r3, r4, r3
 800b2ca:	441a      	add	r2, r3
 800b2cc:	9e00      	ldr	r6, [sp, #0]
 800b2ce:	9b03      	ldr	r3, [sp, #12]
 800b2d0:	920d      	str	r2, [sp, #52]	@ 0x34
 800b2d2:	2400      	movs	r4, #0
 800b2d4:	e721      	b.n	800b11a <_dtoa_r+0x71a>
 800b2d6:	9c08      	ldr	r4, [sp, #32]
 800b2d8:	9e00      	ldr	r6, [sp, #0]
 800b2da:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b2dc:	e728      	b.n	800b130 <_dtoa_r+0x730>
 800b2de:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b2e2:	e751      	b.n	800b188 <_dtoa_r+0x788>
 800b2e4:	9a08      	ldr	r2, [sp, #32]
 800b2e6:	9902      	ldr	r1, [sp, #8]
 800b2e8:	e750      	b.n	800b18c <_dtoa_r+0x78c>
 800b2ea:	f8cd 8008 	str.w	r8, [sp, #8]
 800b2ee:	e751      	b.n	800b194 <_dtoa_r+0x794>
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	e779      	b.n	800b1e8 <_dtoa_r+0x7e8>
 800b2f4:	9b04      	ldr	r3, [sp, #16]
 800b2f6:	e777      	b.n	800b1e8 <_dtoa_r+0x7e8>
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	9308      	str	r3, [sp, #32]
 800b2fc:	e779      	b.n	800b1f2 <_dtoa_r+0x7f2>
 800b2fe:	d093      	beq.n	800b228 <_dtoa_r+0x828>
 800b300:	9a00      	ldr	r2, [sp, #0]
 800b302:	331c      	adds	r3, #28
 800b304:	441a      	add	r2, r3
 800b306:	9200      	str	r2, [sp, #0]
 800b308:	9a06      	ldr	r2, [sp, #24]
 800b30a:	441a      	add	r2, r3
 800b30c:	441e      	add	r6, r3
 800b30e:	9206      	str	r2, [sp, #24]
 800b310:	e78a      	b.n	800b228 <_dtoa_r+0x828>
 800b312:	4603      	mov	r3, r0
 800b314:	e7f4      	b.n	800b300 <_dtoa_r+0x900>
 800b316:	9b03      	ldr	r3, [sp, #12]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	46b8      	mov	r8, r7
 800b31c:	dc20      	bgt.n	800b360 <_dtoa_r+0x960>
 800b31e:	469b      	mov	fp, r3
 800b320:	9b07      	ldr	r3, [sp, #28]
 800b322:	2b02      	cmp	r3, #2
 800b324:	dd1e      	ble.n	800b364 <_dtoa_r+0x964>
 800b326:	f1bb 0f00 	cmp.w	fp, #0
 800b32a:	f47f adb1 	bne.w	800ae90 <_dtoa_r+0x490>
 800b32e:	4621      	mov	r1, r4
 800b330:	465b      	mov	r3, fp
 800b332:	2205      	movs	r2, #5
 800b334:	4648      	mov	r0, r9
 800b336:	f000 fa95 	bl	800b864 <__multadd>
 800b33a:	4601      	mov	r1, r0
 800b33c:	4604      	mov	r4, r0
 800b33e:	9802      	ldr	r0, [sp, #8]
 800b340:	f000 fca0 	bl	800bc84 <__mcmp>
 800b344:	2800      	cmp	r0, #0
 800b346:	f77f ada3 	ble.w	800ae90 <_dtoa_r+0x490>
 800b34a:	4656      	mov	r6, sl
 800b34c:	2331      	movs	r3, #49	@ 0x31
 800b34e:	f806 3b01 	strb.w	r3, [r6], #1
 800b352:	f108 0801 	add.w	r8, r8, #1
 800b356:	e59f      	b.n	800ae98 <_dtoa_r+0x498>
 800b358:	9c03      	ldr	r4, [sp, #12]
 800b35a:	46b8      	mov	r8, r7
 800b35c:	4625      	mov	r5, r4
 800b35e:	e7f4      	b.n	800b34a <_dtoa_r+0x94a>
 800b360:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b364:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b366:	2b00      	cmp	r3, #0
 800b368:	f000 8101 	beq.w	800b56e <_dtoa_r+0xb6e>
 800b36c:	2e00      	cmp	r6, #0
 800b36e:	dd05      	ble.n	800b37c <_dtoa_r+0x97c>
 800b370:	4629      	mov	r1, r5
 800b372:	4632      	mov	r2, r6
 800b374:	4648      	mov	r0, r9
 800b376:	f000 fc19 	bl	800bbac <__lshift>
 800b37a:	4605      	mov	r5, r0
 800b37c:	9b08      	ldr	r3, [sp, #32]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d05c      	beq.n	800b43c <_dtoa_r+0xa3c>
 800b382:	6869      	ldr	r1, [r5, #4]
 800b384:	4648      	mov	r0, r9
 800b386:	f000 fa0b 	bl	800b7a0 <_Balloc>
 800b38a:	4606      	mov	r6, r0
 800b38c:	b928      	cbnz	r0, 800b39a <_dtoa_r+0x99a>
 800b38e:	4b82      	ldr	r3, [pc, #520]	@ (800b598 <_dtoa_r+0xb98>)
 800b390:	4602      	mov	r2, r0
 800b392:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b396:	f7ff bb4a 	b.w	800aa2e <_dtoa_r+0x2e>
 800b39a:	692a      	ldr	r2, [r5, #16]
 800b39c:	3202      	adds	r2, #2
 800b39e:	0092      	lsls	r2, r2, #2
 800b3a0:	f105 010c 	add.w	r1, r5, #12
 800b3a4:	300c      	adds	r0, #12
 800b3a6:	f7ff fa94 	bl	800a8d2 <memcpy>
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	4631      	mov	r1, r6
 800b3ae:	4648      	mov	r0, r9
 800b3b0:	f000 fbfc 	bl	800bbac <__lshift>
 800b3b4:	f10a 0301 	add.w	r3, sl, #1
 800b3b8:	9300      	str	r3, [sp, #0]
 800b3ba:	eb0a 030b 	add.w	r3, sl, fp
 800b3be:	9308      	str	r3, [sp, #32]
 800b3c0:	9b04      	ldr	r3, [sp, #16]
 800b3c2:	f003 0301 	and.w	r3, r3, #1
 800b3c6:	462f      	mov	r7, r5
 800b3c8:	9306      	str	r3, [sp, #24]
 800b3ca:	4605      	mov	r5, r0
 800b3cc:	9b00      	ldr	r3, [sp, #0]
 800b3ce:	9802      	ldr	r0, [sp, #8]
 800b3d0:	4621      	mov	r1, r4
 800b3d2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800b3d6:	f7ff fa8a 	bl	800a8ee <quorem>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	3330      	adds	r3, #48	@ 0x30
 800b3de:	9003      	str	r0, [sp, #12]
 800b3e0:	4639      	mov	r1, r7
 800b3e2:	9802      	ldr	r0, [sp, #8]
 800b3e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3e6:	f000 fc4d 	bl	800bc84 <__mcmp>
 800b3ea:	462a      	mov	r2, r5
 800b3ec:	9004      	str	r0, [sp, #16]
 800b3ee:	4621      	mov	r1, r4
 800b3f0:	4648      	mov	r0, r9
 800b3f2:	f000 fc63 	bl	800bcbc <__mdiff>
 800b3f6:	68c2      	ldr	r2, [r0, #12]
 800b3f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3fa:	4606      	mov	r6, r0
 800b3fc:	bb02      	cbnz	r2, 800b440 <_dtoa_r+0xa40>
 800b3fe:	4601      	mov	r1, r0
 800b400:	9802      	ldr	r0, [sp, #8]
 800b402:	f000 fc3f 	bl	800bc84 <__mcmp>
 800b406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b408:	4602      	mov	r2, r0
 800b40a:	4631      	mov	r1, r6
 800b40c:	4648      	mov	r0, r9
 800b40e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b410:	9309      	str	r3, [sp, #36]	@ 0x24
 800b412:	f000 fa05 	bl	800b820 <_Bfree>
 800b416:	9b07      	ldr	r3, [sp, #28]
 800b418:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b41a:	9e00      	ldr	r6, [sp, #0]
 800b41c:	ea42 0103 	orr.w	r1, r2, r3
 800b420:	9b06      	ldr	r3, [sp, #24]
 800b422:	4319      	orrs	r1, r3
 800b424:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b426:	d10d      	bne.n	800b444 <_dtoa_r+0xa44>
 800b428:	2b39      	cmp	r3, #57	@ 0x39
 800b42a:	d027      	beq.n	800b47c <_dtoa_r+0xa7c>
 800b42c:	9a04      	ldr	r2, [sp, #16]
 800b42e:	2a00      	cmp	r2, #0
 800b430:	dd01      	ble.n	800b436 <_dtoa_r+0xa36>
 800b432:	9b03      	ldr	r3, [sp, #12]
 800b434:	3331      	adds	r3, #49	@ 0x31
 800b436:	f88b 3000 	strb.w	r3, [fp]
 800b43a:	e52e      	b.n	800ae9a <_dtoa_r+0x49a>
 800b43c:	4628      	mov	r0, r5
 800b43e:	e7b9      	b.n	800b3b4 <_dtoa_r+0x9b4>
 800b440:	2201      	movs	r2, #1
 800b442:	e7e2      	b.n	800b40a <_dtoa_r+0xa0a>
 800b444:	9904      	ldr	r1, [sp, #16]
 800b446:	2900      	cmp	r1, #0
 800b448:	db04      	blt.n	800b454 <_dtoa_r+0xa54>
 800b44a:	9807      	ldr	r0, [sp, #28]
 800b44c:	4301      	orrs	r1, r0
 800b44e:	9806      	ldr	r0, [sp, #24]
 800b450:	4301      	orrs	r1, r0
 800b452:	d120      	bne.n	800b496 <_dtoa_r+0xa96>
 800b454:	2a00      	cmp	r2, #0
 800b456:	ddee      	ble.n	800b436 <_dtoa_r+0xa36>
 800b458:	9902      	ldr	r1, [sp, #8]
 800b45a:	9300      	str	r3, [sp, #0]
 800b45c:	2201      	movs	r2, #1
 800b45e:	4648      	mov	r0, r9
 800b460:	f000 fba4 	bl	800bbac <__lshift>
 800b464:	4621      	mov	r1, r4
 800b466:	9002      	str	r0, [sp, #8]
 800b468:	f000 fc0c 	bl	800bc84 <__mcmp>
 800b46c:	2800      	cmp	r0, #0
 800b46e:	9b00      	ldr	r3, [sp, #0]
 800b470:	dc02      	bgt.n	800b478 <_dtoa_r+0xa78>
 800b472:	d1e0      	bne.n	800b436 <_dtoa_r+0xa36>
 800b474:	07da      	lsls	r2, r3, #31
 800b476:	d5de      	bpl.n	800b436 <_dtoa_r+0xa36>
 800b478:	2b39      	cmp	r3, #57	@ 0x39
 800b47a:	d1da      	bne.n	800b432 <_dtoa_r+0xa32>
 800b47c:	2339      	movs	r3, #57	@ 0x39
 800b47e:	f88b 3000 	strb.w	r3, [fp]
 800b482:	4633      	mov	r3, r6
 800b484:	461e      	mov	r6, r3
 800b486:	3b01      	subs	r3, #1
 800b488:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b48c:	2a39      	cmp	r2, #57	@ 0x39
 800b48e:	d04e      	beq.n	800b52e <_dtoa_r+0xb2e>
 800b490:	3201      	adds	r2, #1
 800b492:	701a      	strb	r2, [r3, #0]
 800b494:	e501      	b.n	800ae9a <_dtoa_r+0x49a>
 800b496:	2a00      	cmp	r2, #0
 800b498:	dd03      	ble.n	800b4a2 <_dtoa_r+0xaa2>
 800b49a:	2b39      	cmp	r3, #57	@ 0x39
 800b49c:	d0ee      	beq.n	800b47c <_dtoa_r+0xa7c>
 800b49e:	3301      	adds	r3, #1
 800b4a0:	e7c9      	b.n	800b436 <_dtoa_r+0xa36>
 800b4a2:	9a00      	ldr	r2, [sp, #0]
 800b4a4:	9908      	ldr	r1, [sp, #32]
 800b4a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b4aa:	428a      	cmp	r2, r1
 800b4ac:	d028      	beq.n	800b500 <_dtoa_r+0xb00>
 800b4ae:	9902      	ldr	r1, [sp, #8]
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	220a      	movs	r2, #10
 800b4b4:	4648      	mov	r0, r9
 800b4b6:	f000 f9d5 	bl	800b864 <__multadd>
 800b4ba:	42af      	cmp	r7, r5
 800b4bc:	9002      	str	r0, [sp, #8]
 800b4be:	f04f 0300 	mov.w	r3, #0
 800b4c2:	f04f 020a 	mov.w	r2, #10
 800b4c6:	4639      	mov	r1, r7
 800b4c8:	4648      	mov	r0, r9
 800b4ca:	d107      	bne.n	800b4dc <_dtoa_r+0xadc>
 800b4cc:	f000 f9ca 	bl	800b864 <__multadd>
 800b4d0:	4607      	mov	r7, r0
 800b4d2:	4605      	mov	r5, r0
 800b4d4:	9b00      	ldr	r3, [sp, #0]
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	9300      	str	r3, [sp, #0]
 800b4da:	e777      	b.n	800b3cc <_dtoa_r+0x9cc>
 800b4dc:	f000 f9c2 	bl	800b864 <__multadd>
 800b4e0:	4629      	mov	r1, r5
 800b4e2:	4607      	mov	r7, r0
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	220a      	movs	r2, #10
 800b4e8:	4648      	mov	r0, r9
 800b4ea:	f000 f9bb 	bl	800b864 <__multadd>
 800b4ee:	4605      	mov	r5, r0
 800b4f0:	e7f0      	b.n	800b4d4 <_dtoa_r+0xad4>
 800b4f2:	f1bb 0f00 	cmp.w	fp, #0
 800b4f6:	bfcc      	ite	gt
 800b4f8:	465e      	movgt	r6, fp
 800b4fa:	2601      	movle	r6, #1
 800b4fc:	4456      	add	r6, sl
 800b4fe:	2700      	movs	r7, #0
 800b500:	9902      	ldr	r1, [sp, #8]
 800b502:	9300      	str	r3, [sp, #0]
 800b504:	2201      	movs	r2, #1
 800b506:	4648      	mov	r0, r9
 800b508:	f000 fb50 	bl	800bbac <__lshift>
 800b50c:	4621      	mov	r1, r4
 800b50e:	9002      	str	r0, [sp, #8]
 800b510:	f000 fbb8 	bl	800bc84 <__mcmp>
 800b514:	2800      	cmp	r0, #0
 800b516:	dcb4      	bgt.n	800b482 <_dtoa_r+0xa82>
 800b518:	d102      	bne.n	800b520 <_dtoa_r+0xb20>
 800b51a:	9b00      	ldr	r3, [sp, #0]
 800b51c:	07db      	lsls	r3, r3, #31
 800b51e:	d4b0      	bmi.n	800b482 <_dtoa_r+0xa82>
 800b520:	4633      	mov	r3, r6
 800b522:	461e      	mov	r6, r3
 800b524:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b528:	2a30      	cmp	r2, #48	@ 0x30
 800b52a:	d0fa      	beq.n	800b522 <_dtoa_r+0xb22>
 800b52c:	e4b5      	b.n	800ae9a <_dtoa_r+0x49a>
 800b52e:	459a      	cmp	sl, r3
 800b530:	d1a8      	bne.n	800b484 <_dtoa_r+0xa84>
 800b532:	2331      	movs	r3, #49	@ 0x31
 800b534:	f108 0801 	add.w	r8, r8, #1
 800b538:	f88a 3000 	strb.w	r3, [sl]
 800b53c:	e4ad      	b.n	800ae9a <_dtoa_r+0x49a>
 800b53e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b540:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b59c <_dtoa_r+0xb9c>
 800b544:	b11b      	cbz	r3, 800b54e <_dtoa_r+0xb4e>
 800b546:	f10a 0308 	add.w	r3, sl, #8
 800b54a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b54c:	6013      	str	r3, [r2, #0]
 800b54e:	4650      	mov	r0, sl
 800b550:	b017      	add	sp, #92	@ 0x5c
 800b552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b556:	9b07      	ldr	r3, [sp, #28]
 800b558:	2b01      	cmp	r3, #1
 800b55a:	f77f ae2e 	ble.w	800b1ba <_dtoa_r+0x7ba>
 800b55e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b560:	9308      	str	r3, [sp, #32]
 800b562:	2001      	movs	r0, #1
 800b564:	e64d      	b.n	800b202 <_dtoa_r+0x802>
 800b566:	f1bb 0f00 	cmp.w	fp, #0
 800b56a:	f77f aed9 	ble.w	800b320 <_dtoa_r+0x920>
 800b56e:	4656      	mov	r6, sl
 800b570:	9802      	ldr	r0, [sp, #8]
 800b572:	4621      	mov	r1, r4
 800b574:	f7ff f9bb 	bl	800a8ee <quorem>
 800b578:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b57c:	f806 3b01 	strb.w	r3, [r6], #1
 800b580:	eba6 020a 	sub.w	r2, r6, sl
 800b584:	4593      	cmp	fp, r2
 800b586:	ddb4      	ble.n	800b4f2 <_dtoa_r+0xaf2>
 800b588:	9902      	ldr	r1, [sp, #8]
 800b58a:	2300      	movs	r3, #0
 800b58c:	220a      	movs	r2, #10
 800b58e:	4648      	mov	r0, r9
 800b590:	f000 f968 	bl	800b864 <__multadd>
 800b594:	9002      	str	r0, [sp, #8]
 800b596:	e7eb      	b.n	800b570 <_dtoa_r+0xb70>
 800b598:	0800cac0 	.word	0x0800cac0
 800b59c:	0800ca44 	.word	0x0800ca44

0800b5a0 <_free_r>:
 800b5a0:	b538      	push	{r3, r4, r5, lr}
 800b5a2:	4605      	mov	r5, r0
 800b5a4:	2900      	cmp	r1, #0
 800b5a6:	d041      	beq.n	800b62c <_free_r+0x8c>
 800b5a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5ac:	1f0c      	subs	r4, r1, #4
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	bfb8      	it	lt
 800b5b2:	18e4      	addlt	r4, r4, r3
 800b5b4:	f000 f8e8 	bl	800b788 <__malloc_lock>
 800b5b8:	4a1d      	ldr	r2, [pc, #116]	@ (800b630 <_free_r+0x90>)
 800b5ba:	6813      	ldr	r3, [r2, #0]
 800b5bc:	b933      	cbnz	r3, 800b5cc <_free_r+0x2c>
 800b5be:	6063      	str	r3, [r4, #4]
 800b5c0:	6014      	str	r4, [r2, #0]
 800b5c2:	4628      	mov	r0, r5
 800b5c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5c8:	f000 b8e4 	b.w	800b794 <__malloc_unlock>
 800b5cc:	42a3      	cmp	r3, r4
 800b5ce:	d908      	bls.n	800b5e2 <_free_r+0x42>
 800b5d0:	6820      	ldr	r0, [r4, #0]
 800b5d2:	1821      	adds	r1, r4, r0
 800b5d4:	428b      	cmp	r3, r1
 800b5d6:	bf01      	itttt	eq
 800b5d8:	6819      	ldreq	r1, [r3, #0]
 800b5da:	685b      	ldreq	r3, [r3, #4]
 800b5dc:	1809      	addeq	r1, r1, r0
 800b5de:	6021      	streq	r1, [r4, #0]
 800b5e0:	e7ed      	b.n	800b5be <_free_r+0x1e>
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	b10b      	cbz	r3, 800b5ec <_free_r+0x4c>
 800b5e8:	42a3      	cmp	r3, r4
 800b5ea:	d9fa      	bls.n	800b5e2 <_free_r+0x42>
 800b5ec:	6811      	ldr	r1, [r2, #0]
 800b5ee:	1850      	adds	r0, r2, r1
 800b5f0:	42a0      	cmp	r0, r4
 800b5f2:	d10b      	bne.n	800b60c <_free_r+0x6c>
 800b5f4:	6820      	ldr	r0, [r4, #0]
 800b5f6:	4401      	add	r1, r0
 800b5f8:	1850      	adds	r0, r2, r1
 800b5fa:	4283      	cmp	r3, r0
 800b5fc:	6011      	str	r1, [r2, #0]
 800b5fe:	d1e0      	bne.n	800b5c2 <_free_r+0x22>
 800b600:	6818      	ldr	r0, [r3, #0]
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	6053      	str	r3, [r2, #4]
 800b606:	4408      	add	r0, r1
 800b608:	6010      	str	r0, [r2, #0]
 800b60a:	e7da      	b.n	800b5c2 <_free_r+0x22>
 800b60c:	d902      	bls.n	800b614 <_free_r+0x74>
 800b60e:	230c      	movs	r3, #12
 800b610:	602b      	str	r3, [r5, #0]
 800b612:	e7d6      	b.n	800b5c2 <_free_r+0x22>
 800b614:	6820      	ldr	r0, [r4, #0]
 800b616:	1821      	adds	r1, r4, r0
 800b618:	428b      	cmp	r3, r1
 800b61a:	bf04      	itt	eq
 800b61c:	6819      	ldreq	r1, [r3, #0]
 800b61e:	685b      	ldreq	r3, [r3, #4]
 800b620:	6063      	str	r3, [r4, #4]
 800b622:	bf04      	itt	eq
 800b624:	1809      	addeq	r1, r1, r0
 800b626:	6021      	streq	r1, [r4, #0]
 800b628:	6054      	str	r4, [r2, #4]
 800b62a:	e7ca      	b.n	800b5c2 <_free_r+0x22>
 800b62c:	bd38      	pop	{r3, r4, r5, pc}
 800b62e:	bf00      	nop
 800b630:	20001f1c 	.word	0x20001f1c

0800b634 <malloc>:
 800b634:	4b02      	ldr	r3, [pc, #8]	@ (800b640 <malloc+0xc>)
 800b636:	4601      	mov	r1, r0
 800b638:	6818      	ldr	r0, [r3, #0]
 800b63a:	f000 b825 	b.w	800b688 <_malloc_r>
 800b63e:	bf00      	nop
 800b640:	20000030 	.word	0x20000030

0800b644 <sbrk_aligned>:
 800b644:	b570      	push	{r4, r5, r6, lr}
 800b646:	4e0f      	ldr	r6, [pc, #60]	@ (800b684 <sbrk_aligned+0x40>)
 800b648:	460c      	mov	r4, r1
 800b64a:	6831      	ldr	r1, [r6, #0]
 800b64c:	4605      	mov	r5, r0
 800b64e:	b911      	cbnz	r1, 800b656 <sbrk_aligned+0x12>
 800b650:	f000 fec6 	bl	800c3e0 <_sbrk_r>
 800b654:	6030      	str	r0, [r6, #0]
 800b656:	4621      	mov	r1, r4
 800b658:	4628      	mov	r0, r5
 800b65a:	f000 fec1 	bl	800c3e0 <_sbrk_r>
 800b65e:	1c43      	adds	r3, r0, #1
 800b660:	d103      	bne.n	800b66a <sbrk_aligned+0x26>
 800b662:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b666:	4620      	mov	r0, r4
 800b668:	bd70      	pop	{r4, r5, r6, pc}
 800b66a:	1cc4      	adds	r4, r0, #3
 800b66c:	f024 0403 	bic.w	r4, r4, #3
 800b670:	42a0      	cmp	r0, r4
 800b672:	d0f8      	beq.n	800b666 <sbrk_aligned+0x22>
 800b674:	1a21      	subs	r1, r4, r0
 800b676:	4628      	mov	r0, r5
 800b678:	f000 feb2 	bl	800c3e0 <_sbrk_r>
 800b67c:	3001      	adds	r0, #1
 800b67e:	d1f2      	bne.n	800b666 <sbrk_aligned+0x22>
 800b680:	e7ef      	b.n	800b662 <sbrk_aligned+0x1e>
 800b682:	bf00      	nop
 800b684:	20001f18 	.word	0x20001f18

0800b688 <_malloc_r>:
 800b688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b68c:	1ccd      	adds	r5, r1, #3
 800b68e:	f025 0503 	bic.w	r5, r5, #3
 800b692:	3508      	adds	r5, #8
 800b694:	2d0c      	cmp	r5, #12
 800b696:	bf38      	it	cc
 800b698:	250c      	movcc	r5, #12
 800b69a:	2d00      	cmp	r5, #0
 800b69c:	4606      	mov	r6, r0
 800b69e:	db01      	blt.n	800b6a4 <_malloc_r+0x1c>
 800b6a0:	42a9      	cmp	r1, r5
 800b6a2:	d904      	bls.n	800b6ae <_malloc_r+0x26>
 800b6a4:	230c      	movs	r3, #12
 800b6a6:	6033      	str	r3, [r6, #0]
 800b6a8:	2000      	movs	r0, #0
 800b6aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b784 <_malloc_r+0xfc>
 800b6b2:	f000 f869 	bl	800b788 <__malloc_lock>
 800b6b6:	f8d8 3000 	ldr.w	r3, [r8]
 800b6ba:	461c      	mov	r4, r3
 800b6bc:	bb44      	cbnz	r4, 800b710 <_malloc_r+0x88>
 800b6be:	4629      	mov	r1, r5
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	f7ff ffbf 	bl	800b644 <sbrk_aligned>
 800b6c6:	1c43      	adds	r3, r0, #1
 800b6c8:	4604      	mov	r4, r0
 800b6ca:	d158      	bne.n	800b77e <_malloc_r+0xf6>
 800b6cc:	f8d8 4000 	ldr.w	r4, [r8]
 800b6d0:	4627      	mov	r7, r4
 800b6d2:	2f00      	cmp	r7, #0
 800b6d4:	d143      	bne.n	800b75e <_malloc_r+0xd6>
 800b6d6:	2c00      	cmp	r4, #0
 800b6d8:	d04b      	beq.n	800b772 <_malloc_r+0xea>
 800b6da:	6823      	ldr	r3, [r4, #0]
 800b6dc:	4639      	mov	r1, r7
 800b6de:	4630      	mov	r0, r6
 800b6e0:	eb04 0903 	add.w	r9, r4, r3
 800b6e4:	f000 fe7c 	bl	800c3e0 <_sbrk_r>
 800b6e8:	4581      	cmp	r9, r0
 800b6ea:	d142      	bne.n	800b772 <_malloc_r+0xea>
 800b6ec:	6821      	ldr	r1, [r4, #0]
 800b6ee:	1a6d      	subs	r5, r5, r1
 800b6f0:	4629      	mov	r1, r5
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	f7ff ffa6 	bl	800b644 <sbrk_aligned>
 800b6f8:	3001      	adds	r0, #1
 800b6fa:	d03a      	beq.n	800b772 <_malloc_r+0xea>
 800b6fc:	6823      	ldr	r3, [r4, #0]
 800b6fe:	442b      	add	r3, r5
 800b700:	6023      	str	r3, [r4, #0]
 800b702:	f8d8 3000 	ldr.w	r3, [r8]
 800b706:	685a      	ldr	r2, [r3, #4]
 800b708:	bb62      	cbnz	r2, 800b764 <_malloc_r+0xdc>
 800b70a:	f8c8 7000 	str.w	r7, [r8]
 800b70e:	e00f      	b.n	800b730 <_malloc_r+0xa8>
 800b710:	6822      	ldr	r2, [r4, #0]
 800b712:	1b52      	subs	r2, r2, r5
 800b714:	d420      	bmi.n	800b758 <_malloc_r+0xd0>
 800b716:	2a0b      	cmp	r2, #11
 800b718:	d917      	bls.n	800b74a <_malloc_r+0xc2>
 800b71a:	1961      	adds	r1, r4, r5
 800b71c:	42a3      	cmp	r3, r4
 800b71e:	6025      	str	r5, [r4, #0]
 800b720:	bf18      	it	ne
 800b722:	6059      	strne	r1, [r3, #4]
 800b724:	6863      	ldr	r3, [r4, #4]
 800b726:	bf08      	it	eq
 800b728:	f8c8 1000 	streq.w	r1, [r8]
 800b72c:	5162      	str	r2, [r4, r5]
 800b72e:	604b      	str	r3, [r1, #4]
 800b730:	4630      	mov	r0, r6
 800b732:	f000 f82f 	bl	800b794 <__malloc_unlock>
 800b736:	f104 000b 	add.w	r0, r4, #11
 800b73a:	1d23      	adds	r3, r4, #4
 800b73c:	f020 0007 	bic.w	r0, r0, #7
 800b740:	1ac2      	subs	r2, r0, r3
 800b742:	bf1c      	itt	ne
 800b744:	1a1b      	subne	r3, r3, r0
 800b746:	50a3      	strne	r3, [r4, r2]
 800b748:	e7af      	b.n	800b6aa <_malloc_r+0x22>
 800b74a:	6862      	ldr	r2, [r4, #4]
 800b74c:	42a3      	cmp	r3, r4
 800b74e:	bf0c      	ite	eq
 800b750:	f8c8 2000 	streq.w	r2, [r8]
 800b754:	605a      	strne	r2, [r3, #4]
 800b756:	e7eb      	b.n	800b730 <_malloc_r+0xa8>
 800b758:	4623      	mov	r3, r4
 800b75a:	6864      	ldr	r4, [r4, #4]
 800b75c:	e7ae      	b.n	800b6bc <_malloc_r+0x34>
 800b75e:	463c      	mov	r4, r7
 800b760:	687f      	ldr	r7, [r7, #4]
 800b762:	e7b6      	b.n	800b6d2 <_malloc_r+0x4a>
 800b764:	461a      	mov	r2, r3
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	42a3      	cmp	r3, r4
 800b76a:	d1fb      	bne.n	800b764 <_malloc_r+0xdc>
 800b76c:	2300      	movs	r3, #0
 800b76e:	6053      	str	r3, [r2, #4]
 800b770:	e7de      	b.n	800b730 <_malloc_r+0xa8>
 800b772:	230c      	movs	r3, #12
 800b774:	6033      	str	r3, [r6, #0]
 800b776:	4630      	mov	r0, r6
 800b778:	f000 f80c 	bl	800b794 <__malloc_unlock>
 800b77c:	e794      	b.n	800b6a8 <_malloc_r+0x20>
 800b77e:	6005      	str	r5, [r0, #0]
 800b780:	e7d6      	b.n	800b730 <_malloc_r+0xa8>
 800b782:	bf00      	nop
 800b784:	20001f1c 	.word	0x20001f1c

0800b788 <__malloc_lock>:
 800b788:	4801      	ldr	r0, [pc, #4]	@ (800b790 <__malloc_lock+0x8>)
 800b78a:	f7ff b8a0 	b.w	800a8ce <__retarget_lock_acquire_recursive>
 800b78e:	bf00      	nop
 800b790:	20001f14 	.word	0x20001f14

0800b794 <__malloc_unlock>:
 800b794:	4801      	ldr	r0, [pc, #4]	@ (800b79c <__malloc_unlock+0x8>)
 800b796:	f7ff b89b 	b.w	800a8d0 <__retarget_lock_release_recursive>
 800b79a:	bf00      	nop
 800b79c:	20001f14 	.word	0x20001f14

0800b7a0 <_Balloc>:
 800b7a0:	b570      	push	{r4, r5, r6, lr}
 800b7a2:	69c6      	ldr	r6, [r0, #28]
 800b7a4:	4604      	mov	r4, r0
 800b7a6:	460d      	mov	r5, r1
 800b7a8:	b976      	cbnz	r6, 800b7c8 <_Balloc+0x28>
 800b7aa:	2010      	movs	r0, #16
 800b7ac:	f7ff ff42 	bl	800b634 <malloc>
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	61e0      	str	r0, [r4, #28]
 800b7b4:	b920      	cbnz	r0, 800b7c0 <_Balloc+0x20>
 800b7b6:	4b18      	ldr	r3, [pc, #96]	@ (800b818 <_Balloc+0x78>)
 800b7b8:	4818      	ldr	r0, [pc, #96]	@ (800b81c <_Balloc+0x7c>)
 800b7ba:	216b      	movs	r1, #107	@ 0x6b
 800b7bc:	f000 fe20 	bl	800c400 <__assert_func>
 800b7c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7c4:	6006      	str	r6, [r0, #0]
 800b7c6:	60c6      	str	r6, [r0, #12]
 800b7c8:	69e6      	ldr	r6, [r4, #28]
 800b7ca:	68f3      	ldr	r3, [r6, #12]
 800b7cc:	b183      	cbz	r3, 800b7f0 <_Balloc+0x50>
 800b7ce:	69e3      	ldr	r3, [r4, #28]
 800b7d0:	68db      	ldr	r3, [r3, #12]
 800b7d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b7d6:	b9b8      	cbnz	r0, 800b808 <_Balloc+0x68>
 800b7d8:	2101      	movs	r1, #1
 800b7da:	fa01 f605 	lsl.w	r6, r1, r5
 800b7de:	1d72      	adds	r2, r6, #5
 800b7e0:	0092      	lsls	r2, r2, #2
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	f000 fe2a 	bl	800c43c <_calloc_r>
 800b7e8:	b160      	cbz	r0, 800b804 <_Balloc+0x64>
 800b7ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b7ee:	e00e      	b.n	800b80e <_Balloc+0x6e>
 800b7f0:	2221      	movs	r2, #33	@ 0x21
 800b7f2:	2104      	movs	r1, #4
 800b7f4:	4620      	mov	r0, r4
 800b7f6:	f000 fe21 	bl	800c43c <_calloc_r>
 800b7fa:	69e3      	ldr	r3, [r4, #28]
 800b7fc:	60f0      	str	r0, [r6, #12]
 800b7fe:	68db      	ldr	r3, [r3, #12]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d1e4      	bne.n	800b7ce <_Balloc+0x2e>
 800b804:	2000      	movs	r0, #0
 800b806:	bd70      	pop	{r4, r5, r6, pc}
 800b808:	6802      	ldr	r2, [r0, #0]
 800b80a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b80e:	2300      	movs	r3, #0
 800b810:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b814:	e7f7      	b.n	800b806 <_Balloc+0x66>
 800b816:	bf00      	nop
 800b818:	0800ca51 	.word	0x0800ca51
 800b81c:	0800cad1 	.word	0x0800cad1

0800b820 <_Bfree>:
 800b820:	b570      	push	{r4, r5, r6, lr}
 800b822:	69c6      	ldr	r6, [r0, #28]
 800b824:	4605      	mov	r5, r0
 800b826:	460c      	mov	r4, r1
 800b828:	b976      	cbnz	r6, 800b848 <_Bfree+0x28>
 800b82a:	2010      	movs	r0, #16
 800b82c:	f7ff ff02 	bl	800b634 <malloc>
 800b830:	4602      	mov	r2, r0
 800b832:	61e8      	str	r0, [r5, #28]
 800b834:	b920      	cbnz	r0, 800b840 <_Bfree+0x20>
 800b836:	4b09      	ldr	r3, [pc, #36]	@ (800b85c <_Bfree+0x3c>)
 800b838:	4809      	ldr	r0, [pc, #36]	@ (800b860 <_Bfree+0x40>)
 800b83a:	218f      	movs	r1, #143	@ 0x8f
 800b83c:	f000 fde0 	bl	800c400 <__assert_func>
 800b840:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b844:	6006      	str	r6, [r0, #0]
 800b846:	60c6      	str	r6, [r0, #12]
 800b848:	b13c      	cbz	r4, 800b85a <_Bfree+0x3a>
 800b84a:	69eb      	ldr	r3, [r5, #28]
 800b84c:	6862      	ldr	r2, [r4, #4]
 800b84e:	68db      	ldr	r3, [r3, #12]
 800b850:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b854:	6021      	str	r1, [r4, #0]
 800b856:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b85a:	bd70      	pop	{r4, r5, r6, pc}
 800b85c:	0800ca51 	.word	0x0800ca51
 800b860:	0800cad1 	.word	0x0800cad1

0800b864 <__multadd>:
 800b864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b868:	690d      	ldr	r5, [r1, #16]
 800b86a:	4607      	mov	r7, r0
 800b86c:	460c      	mov	r4, r1
 800b86e:	461e      	mov	r6, r3
 800b870:	f101 0c14 	add.w	ip, r1, #20
 800b874:	2000      	movs	r0, #0
 800b876:	f8dc 3000 	ldr.w	r3, [ip]
 800b87a:	b299      	uxth	r1, r3
 800b87c:	fb02 6101 	mla	r1, r2, r1, r6
 800b880:	0c1e      	lsrs	r6, r3, #16
 800b882:	0c0b      	lsrs	r3, r1, #16
 800b884:	fb02 3306 	mla	r3, r2, r6, r3
 800b888:	b289      	uxth	r1, r1
 800b88a:	3001      	adds	r0, #1
 800b88c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b890:	4285      	cmp	r5, r0
 800b892:	f84c 1b04 	str.w	r1, [ip], #4
 800b896:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b89a:	dcec      	bgt.n	800b876 <__multadd+0x12>
 800b89c:	b30e      	cbz	r6, 800b8e2 <__multadd+0x7e>
 800b89e:	68a3      	ldr	r3, [r4, #8]
 800b8a0:	42ab      	cmp	r3, r5
 800b8a2:	dc19      	bgt.n	800b8d8 <__multadd+0x74>
 800b8a4:	6861      	ldr	r1, [r4, #4]
 800b8a6:	4638      	mov	r0, r7
 800b8a8:	3101      	adds	r1, #1
 800b8aa:	f7ff ff79 	bl	800b7a0 <_Balloc>
 800b8ae:	4680      	mov	r8, r0
 800b8b0:	b928      	cbnz	r0, 800b8be <__multadd+0x5a>
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	4b0c      	ldr	r3, [pc, #48]	@ (800b8e8 <__multadd+0x84>)
 800b8b6:	480d      	ldr	r0, [pc, #52]	@ (800b8ec <__multadd+0x88>)
 800b8b8:	21ba      	movs	r1, #186	@ 0xba
 800b8ba:	f000 fda1 	bl	800c400 <__assert_func>
 800b8be:	6922      	ldr	r2, [r4, #16]
 800b8c0:	3202      	adds	r2, #2
 800b8c2:	f104 010c 	add.w	r1, r4, #12
 800b8c6:	0092      	lsls	r2, r2, #2
 800b8c8:	300c      	adds	r0, #12
 800b8ca:	f7ff f802 	bl	800a8d2 <memcpy>
 800b8ce:	4621      	mov	r1, r4
 800b8d0:	4638      	mov	r0, r7
 800b8d2:	f7ff ffa5 	bl	800b820 <_Bfree>
 800b8d6:	4644      	mov	r4, r8
 800b8d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b8dc:	3501      	adds	r5, #1
 800b8de:	615e      	str	r6, [r3, #20]
 800b8e0:	6125      	str	r5, [r4, #16]
 800b8e2:	4620      	mov	r0, r4
 800b8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8e8:	0800cac0 	.word	0x0800cac0
 800b8ec:	0800cad1 	.word	0x0800cad1

0800b8f0 <__hi0bits>:
 800b8f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	bf36      	itet	cc
 800b8f8:	0403      	lslcc	r3, r0, #16
 800b8fa:	2000      	movcs	r0, #0
 800b8fc:	2010      	movcc	r0, #16
 800b8fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b902:	bf3c      	itt	cc
 800b904:	021b      	lslcc	r3, r3, #8
 800b906:	3008      	addcc	r0, #8
 800b908:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b90c:	bf3c      	itt	cc
 800b90e:	011b      	lslcc	r3, r3, #4
 800b910:	3004      	addcc	r0, #4
 800b912:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b916:	bf3c      	itt	cc
 800b918:	009b      	lslcc	r3, r3, #2
 800b91a:	3002      	addcc	r0, #2
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	db05      	blt.n	800b92c <__hi0bits+0x3c>
 800b920:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b924:	f100 0001 	add.w	r0, r0, #1
 800b928:	bf08      	it	eq
 800b92a:	2020      	moveq	r0, #32
 800b92c:	4770      	bx	lr

0800b92e <__lo0bits>:
 800b92e:	6803      	ldr	r3, [r0, #0]
 800b930:	4602      	mov	r2, r0
 800b932:	f013 0007 	ands.w	r0, r3, #7
 800b936:	d00b      	beq.n	800b950 <__lo0bits+0x22>
 800b938:	07d9      	lsls	r1, r3, #31
 800b93a:	d421      	bmi.n	800b980 <__lo0bits+0x52>
 800b93c:	0798      	lsls	r0, r3, #30
 800b93e:	bf49      	itett	mi
 800b940:	085b      	lsrmi	r3, r3, #1
 800b942:	089b      	lsrpl	r3, r3, #2
 800b944:	2001      	movmi	r0, #1
 800b946:	6013      	strmi	r3, [r2, #0]
 800b948:	bf5c      	itt	pl
 800b94a:	6013      	strpl	r3, [r2, #0]
 800b94c:	2002      	movpl	r0, #2
 800b94e:	4770      	bx	lr
 800b950:	b299      	uxth	r1, r3
 800b952:	b909      	cbnz	r1, 800b958 <__lo0bits+0x2a>
 800b954:	0c1b      	lsrs	r3, r3, #16
 800b956:	2010      	movs	r0, #16
 800b958:	b2d9      	uxtb	r1, r3
 800b95a:	b909      	cbnz	r1, 800b960 <__lo0bits+0x32>
 800b95c:	3008      	adds	r0, #8
 800b95e:	0a1b      	lsrs	r3, r3, #8
 800b960:	0719      	lsls	r1, r3, #28
 800b962:	bf04      	itt	eq
 800b964:	091b      	lsreq	r3, r3, #4
 800b966:	3004      	addeq	r0, #4
 800b968:	0799      	lsls	r1, r3, #30
 800b96a:	bf04      	itt	eq
 800b96c:	089b      	lsreq	r3, r3, #2
 800b96e:	3002      	addeq	r0, #2
 800b970:	07d9      	lsls	r1, r3, #31
 800b972:	d403      	bmi.n	800b97c <__lo0bits+0x4e>
 800b974:	085b      	lsrs	r3, r3, #1
 800b976:	f100 0001 	add.w	r0, r0, #1
 800b97a:	d003      	beq.n	800b984 <__lo0bits+0x56>
 800b97c:	6013      	str	r3, [r2, #0]
 800b97e:	4770      	bx	lr
 800b980:	2000      	movs	r0, #0
 800b982:	4770      	bx	lr
 800b984:	2020      	movs	r0, #32
 800b986:	4770      	bx	lr

0800b988 <__i2b>:
 800b988:	b510      	push	{r4, lr}
 800b98a:	460c      	mov	r4, r1
 800b98c:	2101      	movs	r1, #1
 800b98e:	f7ff ff07 	bl	800b7a0 <_Balloc>
 800b992:	4602      	mov	r2, r0
 800b994:	b928      	cbnz	r0, 800b9a2 <__i2b+0x1a>
 800b996:	4b05      	ldr	r3, [pc, #20]	@ (800b9ac <__i2b+0x24>)
 800b998:	4805      	ldr	r0, [pc, #20]	@ (800b9b0 <__i2b+0x28>)
 800b99a:	f240 1145 	movw	r1, #325	@ 0x145
 800b99e:	f000 fd2f 	bl	800c400 <__assert_func>
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	6144      	str	r4, [r0, #20]
 800b9a6:	6103      	str	r3, [r0, #16]
 800b9a8:	bd10      	pop	{r4, pc}
 800b9aa:	bf00      	nop
 800b9ac:	0800cac0 	.word	0x0800cac0
 800b9b0:	0800cad1 	.word	0x0800cad1

0800b9b4 <__multiply>:
 800b9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9b8:	4617      	mov	r7, r2
 800b9ba:	690a      	ldr	r2, [r1, #16]
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	bfa8      	it	ge
 800b9c2:	463b      	movge	r3, r7
 800b9c4:	4689      	mov	r9, r1
 800b9c6:	bfa4      	itt	ge
 800b9c8:	460f      	movge	r7, r1
 800b9ca:	4699      	movge	r9, r3
 800b9cc:	693d      	ldr	r5, [r7, #16]
 800b9ce:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	6879      	ldr	r1, [r7, #4]
 800b9d6:	eb05 060a 	add.w	r6, r5, sl
 800b9da:	42b3      	cmp	r3, r6
 800b9dc:	b085      	sub	sp, #20
 800b9de:	bfb8      	it	lt
 800b9e0:	3101      	addlt	r1, #1
 800b9e2:	f7ff fedd 	bl	800b7a0 <_Balloc>
 800b9e6:	b930      	cbnz	r0, 800b9f6 <__multiply+0x42>
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	4b41      	ldr	r3, [pc, #260]	@ (800baf0 <__multiply+0x13c>)
 800b9ec:	4841      	ldr	r0, [pc, #260]	@ (800baf4 <__multiply+0x140>)
 800b9ee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b9f2:	f000 fd05 	bl	800c400 <__assert_func>
 800b9f6:	f100 0414 	add.w	r4, r0, #20
 800b9fa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b9fe:	4623      	mov	r3, r4
 800ba00:	2200      	movs	r2, #0
 800ba02:	4573      	cmp	r3, lr
 800ba04:	d320      	bcc.n	800ba48 <__multiply+0x94>
 800ba06:	f107 0814 	add.w	r8, r7, #20
 800ba0a:	f109 0114 	add.w	r1, r9, #20
 800ba0e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ba12:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ba16:	9302      	str	r3, [sp, #8]
 800ba18:	1beb      	subs	r3, r5, r7
 800ba1a:	3b15      	subs	r3, #21
 800ba1c:	f023 0303 	bic.w	r3, r3, #3
 800ba20:	3304      	adds	r3, #4
 800ba22:	3715      	adds	r7, #21
 800ba24:	42bd      	cmp	r5, r7
 800ba26:	bf38      	it	cc
 800ba28:	2304      	movcc	r3, #4
 800ba2a:	9301      	str	r3, [sp, #4]
 800ba2c:	9b02      	ldr	r3, [sp, #8]
 800ba2e:	9103      	str	r1, [sp, #12]
 800ba30:	428b      	cmp	r3, r1
 800ba32:	d80c      	bhi.n	800ba4e <__multiply+0x9a>
 800ba34:	2e00      	cmp	r6, #0
 800ba36:	dd03      	ble.n	800ba40 <__multiply+0x8c>
 800ba38:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d055      	beq.n	800baec <__multiply+0x138>
 800ba40:	6106      	str	r6, [r0, #16]
 800ba42:	b005      	add	sp, #20
 800ba44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba48:	f843 2b04 	str.w	r2, [r3], #4
 800ba4c:	e7d9      	b.n	800ba02 <__multiply+0x4e>
 800ba4e:	f8b1 a000 	ldrh.w	sl, [r1]
 800ba52:	f1ba 0f00 	cmp.w	sl, #0
 800ba56:	d01f      	beq.n	800ba98 <__multiply+0xe4>
 800ba58:	46c4      	mov	ip, r8
 800ba5a:	46a1      	mov	r9, r4
 800ba5c:	2700      	movs	r7, #0
 800ba5e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ba62:	f8d9 3000 	ldr.w	r3, [r9]
 800ba66:	fa1f fb82 	uxth.w	fp, r2
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	fb0a 330b 	mla	r3, sl, fp, r3
 800ba70:	443b      	add	r3, r7
 800ba72:	f8d9 7000 	ldr.w	r7, [r9]
 800ba76:	0c12      	lsrs	r2, r2, #16
 800ba78:	0c3f      	lsrs	r7, r7, #16
 800ba7a:	fb0a 7202 	mla	r2, sl, r2, r7
 800ba7e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba88:	4565      	cmp	r5, ip
 800ba8a:	f849 3b04 	str.w	r3, [r9], #4
 800ba8e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ba92:	d8e4      	bhi.n	800ba5e <__multiply+0xaa>
 800ba94:	9b01      	ldr	r3, [sp, #4]
 800ba96:	50e7      	str	r7, [r4, r3]
 800ba98:	9b03      	ldr	r3, [sp, #12]
 800ba9a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ba9e:	3104      	adds	r1, #4
 800baa0:	f1b9 0f00 	cmp.w	r9, #0
 800baa4:	d020      	beq.n	800bae8 <__multiply+0x134>
 800baa6:	6823      	ldr	r3, [r4, #0]
 800baa8:	4647      	mov	r7, r8
 800baaa:	46a4      	mov	ip, r4
 800baac:	f04f 0a00 	mov.w	sl, #0
 800bab0:	f8b7 b000 	ldrh.w	fp, [r7]
 800bab4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800bab8:	fb09 220b 	mla	r2, r9, fp, r2
 800babc:	4452      	add	r2, sl
 800babe:	b29b      	uxth	r3, r3
 800bac0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bac4:	f84c 3b04 	str.w	r3, [ip], #4
 800bac8:	f857 3b04 	ldr.w	r3, [r7], #4
 800bacc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bad0:	f8bc 3000 	ldrh.w	r3, [ip]
 800bad4:	fb09 330a 	mla	r3, r9, sl, r3
 800bad8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800badc:	42bd      	cmp	r5, r7
 800bade:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bae2:	d8e5      	bhi.n	800bab0 <__multiply+0xfc>
 800bae4:	9a01      	ldr	r2, [sp, #4]
 800bae6:	50a3      	str	r3, [r4, r2]
 800bae8:	3404      	adds	r4, #4
 800baea:	e79f      	b.n	800ba2c <__multiply+0x78>
 800baec:	3e01      	subs	r6, #1
 800baee:	e7a1      	b.n	800ba34 <__multiply+0x80>
 800baf0:	0800cac0 	.word	0x0800cac0
 800baf4:	0800cad1 	.word	0x0800cad1

0800baf8 <__pow5mult>:
 800baf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bafc:	4615      	mov	r5, r2
 800bafe:	f012 0203 	ands.w	r2, r2, #3
 800bb02:	4607      	mov	r7, r0
 800bb04:	460e      	mov	r6, r1
 800bb06:	d007      	beq.n	800bb18 <__pow5mult+0x20>
 800bb08:	4c25      	ldr	r4, [pc, #148]	@ (800bba0 <__pow5mult+0xa8>)
 800bb0a:	3a01      	subs	r2, #1
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb12:	f7ff fea7 	bl	800b864 <__multadd>
 800bb16:	4606      	mov	r6, r0
 800bb18:	10ad      	asrs	r5, r5, #2
 800bb1a:	d03d      	beq.n	800bb98 <__pow5mult+0xa0>
 800bb1c:	69fc      	ldr	r4, [r7, #28]
 800bb1e:	b97c      	cbnz	r4, 800bb40 <__pow5mult+0x48>
 800bb20:	2010      	movs	r0, #16
 800bb22:	f7ff fd87 	bl	800b634 <malloc>
 800bb26:	4602      	mov	r2, r0
 800bb28:	61f8      	str	r0, [r7, #28]
 800bb2a:	b928      	cbnz	r0, 800bb38 <__pow5mult+0x40>
 800bb2c:	4b1d      	ldr	r3, [pc, #116]	@ (800bba4 <__pow5mult+0xac>)
 800bb2e:	481e      	ldr	r0, [pc, #120]	@ (800bba8 <__pow5mult+0xb0>)
 800bb30:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bb34:	f000 fc64 	bl	800c400 <__assert_func>
 800bb38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb3c:	6004      	str	r4, [r0, #0]
 800bb3e:	60c4      	str	r4, [r0, #12]
 800bb40:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bb44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb48:	b94c      	cbnz	r4, 800bb5e <__pow5mult+0x66>
 800bb4a:	f240 2171 	movw	r1, #625	@ 0x271
 800bb4e:	4638      	mov	r0, r7
 800bb50:	f7ff ff1a 	bl	800b988 <__i2b>
 800bb54:	2300      	movs	r3, #0
 800bb56:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb5a:	4604      	mov	r4, r0
 800bb5c:	6003      	str	r3, [r0, #0]
 800bb5e:	f04f 0900 	mov.w	r9, #0
 800bb62:	07eb      	lsls	r3, r5, #31
 800bb64:	d50a      	bpl.n	800bb7c <__pow5mult+0x84>
 800bb66:	4631      	mov	r1, r6
 800bb68:	4622      	mov	r2, r4
 800bb6a:	4638      	mov	r0, r7
 800bb6c:	f7ff ff22 	bl	800b9b4 <__multiply>
 800bb70:	4631      	mov	r1, r6
 800bb72:	4680      	mov	r8, r0
 800bb74:	4638      	mov	r0, r7
 800bb76:	f7ff fe53 	bl	800b820 <_Bfree>
 800bb7a:	4646      	mov	r6, r8
 800bb7c:	106d      	asrs	r5, r5, #1
 800bb7e:	d00b      	beq.n	800bb98 <__pow5mult+0xa0>
 800bb80:	6820      	ldr	r0, [r4, #0]
 800bb82:	b938      	cbnz	r0, 800bb94 <__pow5mult+0x9c>
 800bb84:	4622      	mov	r2, r4
 800bb86:	4621      	mov	r1, r4
 800bb88:	4638      	mov	r0, r7
 800bb8a:	f7ff ff13 	bl	800b9b4 <__multiply>
 800bb8e:	6020      	str	r0, [r4, #0]
 800bb90:	f8c0 9000 	str.w	r9, [r0]
 800bb94:	4604      	mov	r4, r0
 800bb96:	e7e4      	b.n	800bb62 <__pow5mult+0x6a>
 800bb98:	4630      	mov	r0, r6
 800bb9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb9e:	bf00      	nop
 800bba0:	0800cb84 	.word	0x0800cb84
 800bba4:	0800ca51 	.word	0x0800ca51
 800bba8:	0800cad1 	.word	0x0800cad1

0800bbac <__lshift>:
 800bbac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbb0:	460c      	mov	r4, r1
 800bbb2:	6849      	ldr	r1, [r1, #4]
 800bbb4:	6923      	ldr	r3, [r4, #16]
 800bbb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bbba:	68a3      	ldr	r3, [r4, #8]
 800bbbc:	4607      	mov	r7, r0
 800bbbe:	4691      	mov	r9, r2
 800bbc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bbc4:	f108 0601 	add.w	r6, r8, #1
 800bbc8:	42b3      	cmp	r3, r6
 800bbca:	db0b      	blt.n	800bbe4 <__lshift+0x38>
 800bbcc:	4638      	mov	r0, r7
 800bbce:	f7ff fde7 	bl	800b7a0 <_Balloc>
 800bbd2:	4605      	mov	r5, r0
 800bbd4:	b948      	cbnz	r0, 800bbea <__lshift+0x3e>
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	4b28      	ldr	r3, [pc, #160]	@ (800bc7c <__lshift+0xd0>)
 800bbda:	4829      	ldr	r0, [pc, #164]	@ (800bc80 <__lshift+0xd4>)
 800bbdc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bbe0:	f000 fc0e 	bl	800c400 <__assert_func>
 800bbe4:	3101      	adds	r1, #1
 800bbe6:	005b      	lsls	r3, r3, #1
 800bbe8:	e7ee      	b.n	800bbc8 <__lshift+0x1c>
 800bbea:	2300      	movs	r3, #0
 800bbec:	f100 0114 	add.w	r1, r0, #20
 800bbf0:	f100 0210 	add.w	r2, r0, #16
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	4553      	cmp	r3, sl
 800bbf8:	db33      	blt.n	800bc62 <__lshift+0xb6>
 800bbfa:	6920      	ldr	r0, [r4, #16]
 800bbfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc00:	f104 0314 	add.w	r3, r4, #20
 800bc04:	f019 091f 	ands.w	r9, r9, #31
 800bc08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bc10:	d02b      	beq.n	800bc6a <__lshift+0xbe>
 800bc12:	f1c9 0e20 	rsb	lr, r9, #32
 800bc16:	468a      	mov	sl, r1
 800bc18:	2200      	movs	r2, #0
 800bc1a:	6818      	ldr	r0, [r3, #0]
 800bc1c:	fa00 f009 	lsl.w	r0, r0, r9
 800bc20:	4310      	orrs	r0, r2
 800bc22:	f84a 0b04 	str.w	r0, [sl], #4
 800bc26:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc2a:	459c      	cmp	ip, r3
 800bc2c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bc30:	d8f3      	bhi.n	800bc1a <__lshift+0x6e>
 800bc32:	ebac 0304 	sub.w	r3, ip, r4
 800bc36:	3b15      	subs	r3, #21
 800bc38:	f023 0303 	bic.w	r3, r3, #3
 800bc3c:	3304      	adds	r3, #4
 800bc3e:	f104 0015 	add.w	r0, r4, #21
 800bc42:	4560      	cmp	r0, ip
 800bc44:	bf88      	it	hi
 800bc46:	2304      	movhi	r3, #4
 800bc48:	50ca      	str	r2, [r1, r3]
 800bc4a:	b10a      	cbz	r2, 800bc50 <__lshift+0xa4>
 800bc4c:	f108 0602 	add.w	r6, r8, #2
 800bc50:	3e01      	subs	r6, #1
 800bc52:	4638      	mov	r0, r7
 800bc54:	612e      	str	r6, [r5, #16]
 800bc56:	4621      	mov	r1, r4
 800bc58:	f7ff fde2 	bl	800b820 <_Bfree>
 800bc5c:	4628      	mov	r0, r5
 800bc5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc62:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc66:	3301      	adds	r3, #1
 800bc68:	e7c5      	b.n	800bbf6 <__lshift+0x4a>
 800bc6a:	3904      	subs	r1, #4
 800bc6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc70:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc74:	459c      	cmp	ip, r3
 800bc76:	d8f9      	bhi.n	800bc6c <__lshift+0xc0>
 800bc78:	e7ea      	b.n	800bc50 <__lshift+0xa4>
 800bc7a:	bf00      	nop
 800bc7c:	0800cac0 	.word	0x0800cac0
 800bc80:	0800cad1 	.word	0x0800cad1

0800bc84 <__mcmp>:
 800bc84:	690a      	ldr	r2, [r1, #16]
 800bc86:	4603      	mov	r3, r0
 800bc88:	6900      	ldr	r0, [r0, #16]
 800bc8a:	1a80      	subs	r0, r0, r2
 800bc8c:	b530      	push	{r4, r5, lr}
 800bc8e:	d10e      	bne.n	800bcae <__mcmp+0x2a>
 800bc90:	3314      	adds	r3, #20
 800bc92:	3114      	adds	r1, #20
 800bc94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bc98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bc9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bca0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bca4:	4295      	cmp	r5, r2
 800bca6:	d003      	beq.n	800bcb0 <__mcmp+0x2c>
 800bca8:	d205      	bcs.n	800bcb6 <__mcmp+0x32>
 800bcaa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bcae:	bd30      	pop	{r4, r5, pc}
 800bcb0:	42a3      	cmp	r3, r4
 800bcb2:	d3f3      	bcc.n	800bc9c <__mcmp+0x18>
 800bcb4:	e7fb      	b.n	800bcae <__mcmp+0x2a>
 800bcb6:	2001      	movs	r0, #1
 800bcb8:	e7f9      	b.n	800bcae <__mcmp+0x2a>
	...

0800bcbc <__mdiff>:
 800bcbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc0:	4689      	mov	r9, r1
 800bcc2:	4606      	mov	r6, r0
 800bcc4:	4611      	mov	r1, r2
 800bcc6:	4648      	mov	r0, r9
 800bcc8:	4614      	mov	r4, r2
 800bcca:	f7ff ffdb 	bl	800bc84 <__mcmp>
 800bcce:	1e05      	subs	r5, r0, #0
 800bcd0:	d112      	bne.n	800bcf8 <__mdiff+0x3c>
 800bcd2:	4629      	mov	r1, r5
 800bcd4:	4630      	mov	r0, r6
 800bcd6:	f7ff fd63 	bl	800b7a0 <_Balloc>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	b928      	cbnz	r0, 800bcea <__mdiff+0x2e>
 800bcde:	4b3f      	ldr	r3, [pc, #252]	@ (800bddc <__mdiff+0x120>)
 800bce0:	f240 2137 	movw	r1, #567	@ 0x237
 800bce4:	483e      	ldr	r0, [pc, #248]	@ (800bde0 <__mdiff+0x124>)
 800bce6:	f000 fb8b 	bl	800c400 <__assert_func>
 800bcea:	2301      	movs	r3, #1
 800bcec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bcf0:	4610      	mov	r0, r2
 800bcf2:	b003      	add	sp, #12
 800bcf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcf8:	bfbc      	itt	lt
 800bcfa:	464b      	movlt	r3, r9
 800bcfc:	46a1      	movlt	r9, r4
 800bcfe:	4630      	mov	r0, r6
 800bd00:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bd04:	bfba      	itte	lt
 800bd06:	461c      	movlt	r4, r3
 800bd08:	2501      	movlt	r5, #1
 800bd0a:	2500      	movge	r5, #0
 800bd0c:	f7ff fd48 	bl	800b7a0 <_Balloc>
 800bd10:	4602      	mov	r2, r0
 800bd12:	b918      	cbnz	r0, 800bd1c <__mdiff+0x60>
 800bd14:	4b31      	ldr	r3, [pc, #196]	@ (800bddc <__mdiff+0x120>)
 800bd16:	f240 2145 	movw	r1, #581	@ 0x245
 800bd1a:	e7e3      	b.n	800bce4 <__mdiff+0x28>
 800bd1c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bd20:	6926      	ldr	r6, [r4, #16]
 800bd22:	60c5      	str	r5, [r0, #12]
 800bd24:	f109 0310 	add.w	r3, r9, #16
 800bd28:	f109 0514 	add.w	r5, r9, #20
 800bd2c:	f104 0e14 	add.w	lr, r4, #20
 800bd30:	f100 0b14 	add.w	fp, r0, #20
 800bd34:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bd38:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bd3c:	9301      	str	r3, [sp, #4]
 800bd3e:	46d9      	mov	r9, fp
 800bd40:	f04f 0c00 	mov.w	ip, #0
 800bd44:	9b01      	ldr	r3, [sp, #4]
 800bd46:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bd4a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bd4e:	9301      	str	r3, [sp, #4]
 800bd50:	fa1f f38a 	uxth.w	r3, sl
 800bd54:	4619      	mov	r1, r3
 800bd56:	b283      	uxth	r3, r0
 800bd58:	1acb      	subs	r3, r1, r3
 800bd5a:	0c00      	lsrs	r0, r0, #16
 800bd5c:	4463      	add	r3, ip
 800bd5e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bd62:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bd66:	b29b      	uxth	r3, r3
 800bd68:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bd6c:	4576      	cmp	r6, lr
 800bd6e:	f849 3b04 	str.w	r3, [r9], #4
 800bd72:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bd76:	d8e5      	bhi.n	800bd44 <__mdiff+0x88>
 800bd78:	1b33      	subs	r3, r6, r4
 800bd7a:	3b15      	subs	r3, #21
 800bd7c:	f023 0303 	bic.w	r3, r3, #3
 800bd80:	3415      	adds	r4, #21
 800bd82:	3304      	adds	r3, #4
 800bd84:	42a6      	cmp	r6, r4
 800bd86:	bf38      	it	cc
 800bd88:	2304      	movcc	r3, #4
 800bd8a:	441d      	add	r5, r3
 800bd8c:	445b      	add	r3, fp
 800bd8e:	461e      	mov	r6, r3
 800bd90:	462c      	mov	r4, r5
 800bd92:	4544      	cmp	r4, r8
 800bd94:	d30e      	bcc.n	800bdb4 <__mdiff+0xf8>
 800bd96:	f108 0103 	add.w	r1, r8, #3
 800bd9a:	1b49      	subs	r1, r1, r5
 800bd9c:	f021 0103 	bic.w	r1, r1, #3
 800bda0:	3d03      	subs	r5, #3
 800bda2:	45a8      	cmp	r8, r5
 800bda4:	bf38      	it	cc
 800bda6:	2100      	movcc	r1, #0
 800bda8:	440b      	add	r3, r1
 800bdaa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bdae:	b191      	cbz	r1, 800bdd6 <__mdiff+0x11a>
 800bdb0:	6117      	str	r7, [r2, #16]
 800bdb2:	e79d      	b.n	800bcf0 <__mdiff+0x34>
 800bdb4:	f854 1b04 	ldr.w	r1, [r4], #4
 800bdb8:	46e6      	mov	lr, ip
 800bdba:	0c08      	lsrs	r0, r1, #16
 800bdbc:	fa1c fc81 	uxtah	ip, ip, r1
 800bdc0:	4471      	add	r1, lr
 800bdc2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bdc6:	b289      	uxth	r1, r1
 800bdc8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bdcc:	f846 1b04 	str.w	r1, [r6], #4
 800bdd0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bdd4:	e7dd      	b.n	800bd92 <__mdiff+0xd6>
 800bdd6:	3f01      	subs	r7, #1
 800bdd8:	e7e7      	b.n	800bdaa <__mdiff+0xee>
 800bdda:	bf00      	nop
 800bddc:	0800cac0 	.word	0x0800cac0
 800bde0:	0800cad1 	.word	0x0800cad1

0800bde4 <__d2b>:
 800bde4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bde8:	460f      	mov	r7, r1
 800bdea:	2101      	movs	r1, #1
 800bdec:	ec59 8b10 	vmov	r8, r9, d0
 800bdf0:	4616      	mov	r6, r2
 800bdf2:	f7ff fcd5 	bl	800b7a0 <_Balloc>
 800bdf6:	4604      	mov	r4, r0
 800bdf8:	b930      	cbnz	r0, 800be08 <__d2b+0x24>
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	4b23      	ldr	r3, [pc, #140]	@ (800be8c <__d2b+0xa8>)
 800bdfe:	4824      	ldr	r0, [pc, #144]	@ (800be90 <__d2b+0xac>)
 800be00:	f240 310f 	movw	r1, #783	@ 0x30f
 800be04:	f000 fafc 	bl	800c400 <__assert_func>
 800be08:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800be0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be10:	b10d      	cbz	r5, 800be16 <__d2b+0x32>
 800be12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800be16:	9301      	str	r3, [sp, #4]
 800be18:	f1b8 0300 	subs.w	r3, r8, #0
 800be1c:	d023      	beq.n	800be66 <__d2b+0x82>
 800be1e:	4668      	mov	r0, sp
 800be20:	9300      	str	r3, [sp, #0]
 800be22:	f7ff fd84 	bl	800b92e <__lo0bits>
 800be26:	e9dd 1200 	ldrd	r1, r2, [sp]
 800be2a:	b1d0      	cbz	r0, 800be62 <__d2b+0x7e>
 800be2c:	f1c0 0320 	rsb	r3, r0, #32
 800be30:	fa02 f303 	lsl.w	r3, r2, r3
 800be34:	430b      	orrs	r3, r1
 800be36:	40c2      	lsrs	r2, r0
 800be38:	6163      	str	r3, [r4, #20]
 800be3a:	9201      	str	r2, [sp, #4]
 800be3c:	9b01      	ldr	r3, [sp, #4]
 800be3e:	61a3      	str	r3, [r4, #24]
 800be40:	2b00      	cmp	r3, #0
 800be42:	bf0c      	ite	eq
 800be44:	2201      	moveq	r2, #1
 800be46:	2202      	movne	r2, #2
 800be48:	6122      	str	r2, [r4, #16]
 800be4a:	b1a5      	cbz	r5, 800be76 <__d2b+0x92>
 800be4c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800be50:	4405      	add	r5, r0
 800be52:	603d      	str	r5, [r7, #0]
 800be54:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800be58:	6030      	str	r0, [r6, #0]
 800be5a:	4620      	mov	r0, r4
 800be5c:	b003      	add	sp, #12
 800be5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be62:	6161      	str	r1, [r4, #20]
 800be64:	e7ea      	b.n	800be3c <__d2b+0x58>
 800be66:	a801      	add	r0, sp, #4
 800be68:	f7ff fd61 	bl	800b92e <__lo0bits>
 800be6c:	9b01      	ldr	r3, [sp, #4]
 800be6e:	6163      	str	r3, [r4, #20]
 800be70:	3020      	adds	r0, #32
 800be72:	2201      	movs	r2, #1
 800be74:	e7e8      	b.n	800be48 <__d2b+0x64>
 800be76:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800be7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800be7e:	6038      	str	r0, [r7, #0]
 800be80:	6918      	ldr	r0, [r3, #16]
 800be82:	f7ff fd35 	bl	800b8f0 <__hi0bits>
 800be86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800be8a:	e7e5      	b.n	800be58 <__d2b+0x74>
 800be8c:	0800cac0 	.word	0x0800cac0
 800be90:	0800cad1 	.word	0x0800cad1

0800be94 <__sfputc_r>:
 800be94:	6893      	ldr	r3, [r2, #8]
 800be96:	3b01      	subs	r3, #1
 800be98:	2b00      	cmp	r3, #0
 800be9a:	b410      	push	{r4}
 800be9c:	6093      	str	r3, [r2, #8]
 800be9e:	da08      	bge.n	800beb2 <__sfputc_r+0x1e>
 800bea0:	6994      	ldr	r4, [r2, #24]
 800bea2:	42a3      	cmp	r3, r4
 800bea4:	db01      	blt.n	800beaa <__sfputc_r+0x16>
 800bea6:	290a      	cmp	r1, #10
 800bea8:	d103      	bne.n	800beb2 <__sfputc_r+0x1e>
 800beaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800beae:	f7fe bb9e 	b.w	800a5ee <__swbuf_r>
 800beb2:	6813      	ldr	r3, [r2, #0]
 800beb4:	1c58      	adds	r0, r3, #1
 800beb6:	6010      	str	r0, [r2, #0]
 800beb8:	7019      	strb	r1, [r3, #0]
 800beba:	4608      	mov	r0, r1
 800bebc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bec0:	4770      	bx	lr

0800bec2 <__sfputs_r>:
 800bec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bec4:	4606      	mov	r6, r0
 800bec6:	460f      	mov	r7, r1
 800bec8:	4614      	mov	r4, r2
 800beca:	18d5      	adds	r5, r2, r3
 800becc:	42ac      	cmp	r4, r5
 800bece:	d101      	bne.n	800bed4 <__sfputs_r+0x12>
 800bed0:	2000      	movs	r0, #0
 800bed2:	e007      	b.n	800bee4 <__sfputs_r+0x22>
 800bed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bed8:	463a      	mov	r2, r7
 800beda:	4630      	mov	r0, r6
 800bedc:	f7ff ffda 	bl	800be94 <__sfputc_r>
 800bee0:	1c43      	adds	r3, r0, #1
 800bee2:	d1f3      	bne.n	800becc <__sfputs_r+0xa>
 800bee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bee8 <_vfiprintf_r>:
 800bee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beec:	460d      	mov	r5, r1
 800beee:	b09d      	sub	sp, #116	@ 0x74
 800bef0:	4614      	mov	r4, r2
 800bef2:	4698      	mov	r8, r3
 800bef4:	4606      	mov	r6, r0
 800bef6:	b118      	cbz	r0, 800bf00 <_vfiprintf_r+0x18>
 800bef8:	6a03      	ldr	r3, [r0, #32]
 800befa:	b90b      	cbnz	r3, 800bf00 <_vfiprintf_r+0x18>
 800befc:	f7fe fa86 	bl	800a40c <__sinit>
 800bf00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf02:	07d9      	lsls	r1, r3, #31
 800bf04:	d405      	bmi.n	800bf12 <_vfiprintf_r+0x2a>
 800bf06:	89ab      	ldrh	r3, [r5, #12]
 800bf08:	059a      	lsls	r2, r3, #22
 800bf0a:	d402      	bmi.n	800bf12 <_vfiprintf_r+0x2a>
 800bf0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf0e:	f7fe fcde 	bl	800a8ce <__retarget_lock_acquire_recursive>
 800bf12:	89ab      	ldrh	r3, [r5, #12]
 800bf14:	071b      	lsls	r3, r3, #28
 800bf16:	d501      	bpl.n	800bf1c <_vfiprintf_r+0x34>
 800bf18:	692b      	ldr	r3, [r5, #16]
 800bf1a:	b99b      	cbnz	r3, 800bf44 <_vfiprintf_r+0x5c>
 800bf1c:	4629      	mov	r1, r5
 800bf1e:	4630      	mov	r0, r6
 800bf20:	f7fe fba4 	bl	800a66c <__swsetup_r>
 800bf24:	b170      	cbz	r0, 800bf44 <_vfiprintf_r+0x5c>
 800bf26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf28:	07dc      	lsls	r4, r3, #31
 800bf2a:	d504      	bpl.n	800bf36 <_vfiprintf_r+0x4e>
 800bf2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf30:	b01d      	add	sp, #116	@ 0x74
 800bf32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf36:	89ab      	ldrh	r3, [r5, #12]
 800bf38:	0598      	lsls	r0, r3, #22
 800bf3a:	d4f7      	bmi.n	800bf2c <_vfiprintf_r+0x44>
 800bf3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf3e:	f7fe fcc7 	bl	800a8d0 <__retarget_lock_release_recursive>
 800bf42:	e7f3      	b.n	800bf2c <_vfiprintf_r+0x44>
 800bf44:	2300      	movs	r3, #0
 800bf46:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf48:	2320      	movs	r3, #32
 800bf4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bf4e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf52:	2330      	movs	r3, #48	@ 0x30
 800bf54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c104 <_vfiprintf_r+0x21c>
 800bf58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bf5c:	f04f 0901 	mov.w	r9, #1
 800bf60:	4623      	mov	r3, r4
 800bf62:	469a      	mov	sl, r3
 800bf64:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf68:	b10a      	cbz	r2, 800bf6e <_vfiprintf_r+0x86>
 800bf6a:	2a25      	cmp	r2, #37	@ 0x25
 800bf6c:	d1f9      	bne.n	800bf62 <_vfiprintf_r+0x7a>
 800bf6e:	ebba 0b04 	subs.w	fp, sl, r4
 800bf72:	d00b      	beq.n	800bf8c <_vfiprintf_r+0xa4>
 800bf74:	465b      	mov	r3, fp
 800bf76:	4622      	mov	r2, r4
 800bf78:	4629      	mov	r1, r5
 800bf7a:	4630      	mov	r0, r6
 800bf7c:	f7ff ffa1 	bl	800bec2 <__sfputs_r>
 800bf80:	3001      	adds	r0, #1
 800bf82:	f000 80a7 	beq.w	800c0d4 <_vfiprintf_r+0x1ec>
 800bf86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf88:	445a      	add	r2, fp
 800bf8a:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf8c:	f89a 3000 	ldrb.w	r3, [sl]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	f000 809f 	beq.w	800c0d4 <_vfiprintf_r+0x1ec>
 800bf96:	2300      	movs	r3, #0
 800bf98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bf9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfa0:	f10a 0a01 	add.w	sl, sl, #1
 800bfa4:	9304      	str	r3, [sp, #16]
 800bfa6:	9307      	str	r3, [sp, #28]
 800bfa8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bfac:	931a      	str	r3, [sp, #104]	@ 0x68
 800bfae:	4654      	mov	r4, sl
 800bfb0:	2205      	movs	r2, #5
 800bfb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfb6:	4853      	ldr	r0, [pc, #332]	@ (800c104 <_vfiprintf_r+0x21c>)
 800bfb8:	f7f4 f8e2 	bl	8000180 <memchr>
 800bfbc:	9a04      	ldr	r2, [sp, #16]
 800bfbe:	b9d8      	cbnz	r0, 800bff8 <_vfiprintf_r+0x110>
 800bfc0:	06d1      	lsls	r1, r2, #27
 800bfc2:	bf44      	itt	mi
 800bfc4:	2320      	movmi	r3, #32
 800bfc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bfca:	0713      	lsls	r3, r2, #28
 800bfcc:	bf44      	itt	mi
 800bfce:	232b      	movmi	r3, #43	@ 0x2b
 800bfd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bfd4:	f89a 3000 	ldrb.w	r3, [sl]
 800bfd8:	2b2a      	cmp	r3, #42	@ 0x2a
 800bfda:	d015      	beq.n	800c008 <_vfiprintf_r+0x120>
 800bfdc:	9a07      	ldr	r2, [sp, #28]
 800bfde:	4654      	mov	r4, sl
 800bfe0:	2000      	movs	r0, #0
 800bfe2:	f04f 0c0a 	mov.w	ip, #10
 800bfe6:	4621      	mov	r1, r4
 800bfe8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfec:	3b30      	subs	r3, #48	@ 0x30
 800bfee:	2b09      	cmp	r3, #9
 800bff0:	d94b      	bls.n	800c08a <_vfiprintf_r+0x1a2>
 800bff2:	b1b0      	cbz	r0, 800c022 <_vfiprintf_r+0x13a>
 800bff4:	9207      	str	r2, [sp, #28]
 800bff6:	e014      	b.n	800c022 <_vfiprintf_r+0x13a>
 800bff8:	eba0 0308 	sub.w	r3, r0, r8
 800bffc:	fa09 f303 	lsl.w	r3, r9, r3
 800c000:	4313      	orrs	r3, r2
 800c002:	9304      	str	r3, [sp, #16]
 800c004:	46a2      	mov	sl, r4
 800c006:	e7d2      	b.n	800bfae <_vfiprintf_r+0xc6>
 800c008:	9b03      	ldr	r3, [sp, #12]
 800c00a:	1d19      	adds	r1, r3, #4
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	9103      	str	r1, [sp, #12]
 800c010:	2b00      	cmp	r3, #0
 800c012:	bfbb      	ittet	lt
 800c014:	425b      	neglt	r3, r3
 800c016:	f042 0202 	orrlt.w	r2, r2, #2
 800c01a:	9307      	strge	r3, [sp, #28]
 800c01c:	9307      	strlt	r3, [sp, #28]
 800c01e:	bfb8      	it	lt
 800c020:	9204      	strlt	r2, [sp, #16]
 800c022:	7823      	ldrb	r3, [r4, #0]
 800c024:	2b2e      	cmp	r3, #46	@ 0x2e
 800c026:	d10a      	bne.n	800c03e <_vfiprintf_r+0x156>
 800c028:	7863      	ldrb	r3, [r4, #1]
 800c02a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c02c:	d132      	bne.n	800c094 <_vfiprintf_r+0x1ac>
 800c02e:	9b03      	ldr	r3, [sp, #12]
 800c030:	1d1a      	adds	r2, r3, #4
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	9203      	str	r2, [sp, #12]
 800c036:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c03a:	3402      	adds	r4, #2
 800c03c:	9305      	str	r3, [sp, #20]
 800c03e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c114 <_vfiprintf_r+0x22c>
 800c042:	7821      	ldrb	r1, [r4, #0]
 800c044:	2203      	movs	r2, #3
 800c046:	4650      	mov	r0, sl
 800c048:	f7f4 f89a 	bl	8000180 <memchr>
 800c04c:	b138      	cbz	r0, 800c05e <_vfiprintf_r+0x176>
 800c04e:	9b04      	ldr	r3, [sp, #16]
 800c050:	eba0 000a 	sub.w	r0, r0, sl
 800c054:	2240      	movs	r2, #64	@ 0x40
 800c056:	4082      	lsls	r2, r0
 800c058:	4313      	orrs	r3, r2
 800c05a:	3401      	adds	r4, #1
 800c05c:	9304      	str	r3, [sp, #16]
 800c05e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c062:	4829      	ldr	r0, [pc, #164]	@ (800c108 <_vfiprintf_r+0x220>)
 800c064:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c068:	2206      	movs	r2, #6
 800c06a:	f7f4 f889 	bl	8000180 <memchr>
 800c06e:	2800      	cmp	r0, #0
 800c070:	d03f      	beq.n	800c0f2 <_vfiprintf_r+0x20a>
 800c072:	4b26      	ldr	r3, [pc, #152]	@ (800c10c <_vfiprintf_r+0x224>)
 800c074:	bb1b      	cbnz	r3, 800c0be <_vfiprintf_r+0x1d6>
 800c076:	9b03      	ldr	r3, [sp, #12]
 800c078:	3307      	adds	r3, #7
 800c07a:	f023 0307 	bic.w	r3, r3, #7
 800c07e:	3308      	adds	r3, #8
 800c080:	9303      	str	r3, [sp, #12]
 800c082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c084:	443b      	add	r3, r7
 800c086:	9309      	str	r3, [sp, #36]	@ 0x24
 800c088:	e76a      	b.n	800bf60 <_vfiprintf_r+0x78>
 800c08a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c08e:	460c      	mov	r4, r1
 800c090:	2001      	movs	r0, #1
 800c092:	e7a8      	b.n	800bfe6 <_vfiprintf_r+0xfe>
 800c094:	2300      	movs	r3, #0
 800c096:	3401      	adds	r4, #1
 800c098:	9305      	str	r3, [sp, #20]
 800c09a:	4619      	mov	r1, r3
 800c09c:	f04f 0c0a 	mov.w	ip, #10
 800c0a0:	4620      	mov	r0, r4
 800c0a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0a6:	3a30      	subs	r2, #48	@ 0x30
 800c0a8:	2a09      	cmp	r2, #9
 800c0aa:	d903      	bls.n	800c0b4 <_vfiprintf_r+0x1cc>
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d0c6      	beq.n	800c03e <_vfiprintf_r+0x156>
 800c0b0:	9105      	str	r1, [sp, #20]
 800c0b2:	e7c4      	b.n	800c03e <_vfiprintf_r+0x156>
 800c0b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c0b8:	4604      	mov	r4, r0
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	e7f0      	b.n	800c0a0 <_vfiprintf_r+0x1b8>
 800c0be:	ab03      	add	r3, sp, #12
 800c0c0:	9300      	str	r3, [sp, #0]
 800c0c2:	462a      	mov	r2, r5
 800c0c4:	4b12      	ldr	r3, [pc, #72]	@ (800c110 <_vfiprintf_r+0x228>)
 800c0c6:	a904      	add	r1, sp, #16
 800c0c8:	4630      	mov	r0, r6
 800c0ca:	f7fd fd5d 	bl	8009b88 <_printf_float>
 800c0ce:	4607      	mov	r7, r0
 800c0d0:	1c78      	adds	r0, r7, #1
 800c0d2:	d1d6      	bne.n	800c082 <_vfiprintf_r+0x19a>
 800c0d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c0d6:	07d9      	lsls	r1, r3, #31
 800c0d8:	d405      	bmi.n	800c0e6 <_vfiprintf_r+0x1fe>
 800c0da:	89ab      	ldrh	r3, [r5, #12]
 800c0dc:	059a      	lsls	r2, r3, #22
 800c0de:	d402      	bmi.n	800c0e6 <_vfiprintf_r+0x1fe>
 800c0e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c0e2:	f7fe fbf5 	bl	800a8d0 <__retarget_lock_release_recursive>
 800c0e6:	89ab      	ldrh	r3, [r5, #12]
 800c0e8:	065b      	lsls	r3, r3, #25
 800c0ea:	f53f af1f 	bmi.w	800bf2c <_vfiprintf_r+0x44>
 800c0ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c0f0:	e71e      	b.n	800bf30 <_vfiprintf_r+0x48>
 800c0f2:	ab03      	add	r3, sp, #12
 800c0f4:	9300      	str	r3, [sp, #0]
 800c0f6:	462a      	mov	r2, r5
 800c0f8:	4b05      	ldr	r3, [pc, #20]	@ (800c110 <_vfiprintf_r+0x228>)
 800c0fa:	a904      	add	r1, sp, #16
 800c0fc:	4630      	mov	r0, r6
 800c0fe:	f7fd ffdb 	bl	800a0b8 <_printf_i>
 800c102:	e7e4      	b.n	800c0ce <_vfiprintf_r+0x1e6>
 800c104:	0800cb2a 	.word	0x0800cb2a
 800c108:	0800cb34 	.word	0x0800cb34
 800c10c:	08009b89 	.word	0x08009b89
 800c110:	0800bec3 	.word	0x0800bec3
 800c114:	0800cb30 	.word	0x0800cb30

0800c118 <__sflush_r>:
 800c118:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c120:	0716      	lsls	r6, r2, #28
 800c122:	4605      	mov	r5, r0
 800c124:	460c      	mov	r4, r1
 800c126:	d454      	bmi.n	800c1d2 <__sflush_r+0xba>
 800c128:	684b      	ldr	r3, [r1, #4]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	dc02      	bgt.n	800c134 <__sflush_r+0x1c>
 800c12e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c130:	2b00      	cmp	r3, #0
 800c132:	dd48      	ble.n	800c1c6 <__sflush_r+0xae>
 800c134:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c136:	2e00      	cmp	r6, #0
 800c138:	d045      	beq.n	800c1c6 <__sflush_r+0xae>
 800c13a:	2300      	movs	r3, #0
 800c13c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c140:	682f      	ldr	r7, [r5, #0]
 800c142:	6a21      	ldr	r1, [r4, #32]
 800c144:	602b      	str	r3, [r5, #0]
 800c146:	d030      	beq.n	800c1aa <__sflush_r+0x92>
 800c148:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c14a:	89a3      	ldrh	r3, [r4, #12]
 800c14c:	0759      	lsls	r1, r3, #29
 800c14e:	d505      	bpl.n	800c15c <__sflush_r+0x44>
 800c150:	6863      	ldr	r3, [r4, #4]
 800c152:	1ad2      	subs	r2, r2, r3
 800c154:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c156:	b10b      	cbz	r3, 800c15c <__sflush_r+0x44>
 800c158:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c15a:	1ad2      	subs	r2, r2, r3
 800c15c:	2300      	movs	r3, #0
 800c15e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c160:	6a21      	ldr	r1, [r4, #32]
 800c162:	4628      	mov	r0, r5
 800c164:	47b0      	blx	r6
 800c166:	1c43      	adds	r3, r0, #1
 800c168:	89a3      	ldrh	r3, [r4, #12]
 800c16a:	d106      	bne.n	800c17a <__sflush_r+0x62>
 800c16c:	6829      	ldr	r1, [r5, #0]
 800c16e:	291d      	cmp	r1, #29
 800c170:	d82b      	bhi.n	800c1ca <__sflush_r+0xb2>
 800c172:	4a2a      	ldr	r2, [pc, #168]	@ (800c21c <__sflush_r+0x104>)
 800c174:	40ca      	lsrs	r2, r1
 800c176:	07d6      	lsls	r6, r2, #31
 800c178:	d527      	bpl.n	800c1ca <__sflush_r+0xb2>
 800c17a:	2200      	movs	r2, #0
 800c17c:	6062      	str	r2, [r4, #4]
 800c17e:	04d9      	lsls	r1, r3, #19
 800c180:	6922      	ldr	r2, [r4, #16]
 800c182:	6022      	str	r2, [r4, #0]
 800c184:	d504      	bpl.n	800c190 <__sflush_r+0x78>
 800c186:	1c42      	adds	r2, r0, #1
 800c188:	d101      	bne.n	800c18e <__sflush_r+0x76>
 800c18a:	682b      	ldr	r3, [r5, #0]
 800c18c:	b903      	cbnz	r3, 800c190 <__sflush_r+0x78>
 800c18e:	6560      	str	r0, [r4, #84]	@ 0x54
 800c190:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c192:	602f      	str	r7, [r5, #0]
 800c194:	b1b9      	cbz	r1, 800c1c6 <__sflush_r+0xae>
 800c196:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c19a:	4299      	cmp	r1, r3
 800c19c:	d002      	beq.n	800c1a4 <__sflush_r+0x8c>
 800c19e:	4628      	mov	r0, r5
 800c1a0:	f7ff f9fe 	bl	800b5a0 <_free_r>
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	6363      	str	r3, [r4, #52]	@ 0x34
 800c1a8:	e00d      	b.n	800c1c6 <__sflush_r+0xae>
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	4628      	mov	r0, r5
 800c1ae:	47b0      	blx	r6
 800c1b0:	4602      	mov	r2, r0
 800c1b2:	1c50      	adds	r0, r2, #1
 800c1b4:	d1c9      	bne.n	800c14a <__sflush_r+0x32>
 800c1b6:	682b      	ldr	r3, [r5, #0]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d0c6      	beq.n	800c14a <__sflush_r+0x32>
 800c1bc:	2b1d      	cmp	r3, #29
 800c1be:	d001      	beq.n	800c1c4 <__sflush_r+0xac>
 800c1c0:	2b16      	cmp	r3, #22
 800c1c2:	d11e      	bne.n	800c202 <__sflush_r+0xea>
 800c1c4:	602f      	str	r7, [r5, #0]
 800c1c6:	2000      	movs	r0, #0
 800c1c8:	e022      	b.n	800c210 <__sflush_r+0xf8>
 800c1ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1ce:	b21b      	sxth	r3, r3
 800c1d0:	e01b      	b.n	800c20a <__sflush_r+0xf2>
 800c1d2:	690f      	ldr	r7, [r1, #16]
 800c1d4:	2f00      	cmp	r7, #0
 800c1d6:	d0f6      	beq.n	800c1c6 <__sflush_r+0xae>
 800c1d8:	0793      	lsls	r3, r2, #30
 800c1da:	680e      	ldr	r6, [r1, #0]
 800c1dc:	bf08      	it	eq
 800c1de:	694b      	ldreq	r3, [r1, #20]
 800c1e0:	600f      	str	r7, [r1, #0]
 800c1e2:	bf18      	it	ne
 800c1e4:	2300      	movne	r3, #0
 800c1e6:	eba6 0807 	sub.w	r8, r6, r7
 800c1ea:	608b      	str	r3, [r1, #8]
 800c1ec:	f1b8 0f00 	cmp.w	r8, #0
 800c1f0:	dde9      	ble.n	800c1c6 <__sflush_r+0xae>
 800c1f2:	6a21      	ldr	r1, [r4, #32]
 800c1f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c1f6:	4643      	mov	r3, r8
 800c1f8:	463a      	mov	r2, r7
 800c1fa:	4628      	mov	r0, r5
 800c1fc:	47b0      	blx	r6
 800c1fe:	2800      	cmp	r0, #0
 800c200:	dc08      	bgt.n	800c214 <__sflush_r+0xfc>
 800c202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c206:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c20a:	81a3      	strh	r3, [r4, #12]
 800c20c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c214:	4407      	add	r7, r0
 800c216:	eba8 0800 	sub.w	r8, r8, r0
 800c21a:	e7e7      	b.n	800c1ec <__sflush_r+0xd4>
 800c21c:	20400001 	.word	0x20400001

0800c220 <_fflush_r>:
 800c220:	b538      	push	{r3, r4, r5, lr}
 800c222:	690b      	ldr	r3, [r1, #16]
 800c224:	4605      	mov	r5, r0
 800c226:	460c      	mov	r4, r1
 800c228:	b913      	cbnz	r3, 800c230 <_fflush_r+0x10>
 800c22a:	2500      	movs	r5, #0
 800c22c:	4628      	mov	r0, r5
 800c22e:	bd38      	pop	{r3, r4, r5, pc}
 800c230:	b118      	cbz	r0, 800c23a <_fflush_r+0x1a>
 800c232:	6a03      	ldr	r3, [r0, #32]
 800c234:	b90b      	cbnz	r3, 800c23a <_fflush_r+0x1a>
 800c236:	f7fe f8e9 	bl	800a40c <__sinit>
 800c23a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d0f3      	beq.n	800c22a <_fflush_r+0xa>
 800c242:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c244:	07d0      	lsls	r0, r2, #31
 800c246:	d404      	bmi.n	800c252 <_fflush_r+0x32>
 800c248:	0599      	lsls	r1, r3, #22
 800c24a:	d402      	bmi.n	800c252 <_fflush_r+0x32>
 800c24c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c24e:	f7fe fb3e 	bl	800a8ce <__retarget_lock_acquire_recursive>
 800c252:	4628      	mov	r0, r5
 800c254:	4621      	mov	r1, r4
 800c256:	f7ff ff5f 	bl	800c118 <__sflush_r>
 800c25a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c25c:	07da      	lsls	r2, r3, #31
 800c25e:	4605      	mov	r5, r0
 800c260:	d4e4      	bmi.n	800c22c <_fflush_r+0xc>
 800c262:	89a3      	ldrh	r3, [r4, #12]
 800c264:	059b      	lsls	r3, r3, #22
 800c266:	d4e1      	bmi.n	800c22c <_fflush_r+0xc>
 800c268:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c26a:	f7fe fb31 	bl	800a8d0 <__retarget_lock_release_recursive>
 800c26e:	e7dd      	b.n	800c22c <_fflush_r+0xc>

0800c270 <__swhatbuf_r>:
 800c270:	b570      	push	{r4, r5, r6, lr}
 800c272:	460c      	mov	r4, r1
 800c274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c278:	2900      	cmp	r1, #0
 800c27a:	b096      	sub	sp, #88	@ 0x58
 800c27c:	4615      	mov	r5, r2
 800c27e:	461e      	mov	r6, r3
 800c280:	da0d      	bge.n	800c29e <__swhatbuf_r+0x2e>
 800c282:	89a3      	ldrh	r3, [r4, #12]
 800c284:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c288:	f04f 0100 	mov.w	r1, #0
 800c28c:	bf14      	ite	ne
 800c28e:	2340      	movne	r3, #64	@ 0x40
 800c290:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c294:	2000      	movs	r0, #0
 800c296:	6031      	str	r1, [r6, #0]
 800c298:	602b      	str	r3, [r5, #0]
 800c29a:	b016      	add	sp, #88	@ 0x58
 800c29c:	bd70      	pop	{r4, r5, r6, pc}
 800c29e:	466a      	mov	r2, sp
 800c2a0:	f000 f87c 	bl	800c39c <_fstat_r>
 800c2a4:	2800      	cmp	r0, #0
 800c2a6:	dbec      	blt.n	800c282 <__swhatbuf_r+0x12>
 800c2a8:	9901      	ldr	r1, [sp, #4]
 800c2aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c2ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c2b2:	4259      	negs	r1, r3
 800c2b4:	4159      	adcs	r1, r3
 800c2b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c2ba:	e7eb      	b.n	800c294 <__swhatbuf_r+0x24>

0800c2bc <__smakebuf_r>:
 800c2bc:	898b      	ldrh	r3, [r1, #12]
 800c2be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2c0:	079d      	lsls	r5, r3, #30
 800c2c2:	4606      	mov	r6, r0
 800c2c4:	460c      	mov	r4, r1
 800c2c6:	d507      	bpl.n	800c2d8 <__smakebuf_r+0x1c>
 800c2c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c2cc:	6023      	str	r3, [r4, #0]
 800c2ce:	6123      	str	r3, [r4, #16]
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	6163      	str	r3, [r4, #20]
 800c2d4:	b003      	add	sp, #12
 800c2d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2d8:	ab01      	add	r3, sp, #4
 800c2da:	466a      	mov	r2, sp
 800c2dc:	f7ff ffc8 	bl	800c270 <__swhatbuf_r>
 800c2e0:	9f00      	ldr	r7, [sp, #0]
 800c2e2:	4605      	mov	r5, r0
 800c2e4:	4639      	mov	r1, r7
 800c2e6:	4630      	mov	r0, r6
 800c2e8:	f7ff f9ce 	bl	800b688 <_malloc_r>
 800c2ec:	b948      	cbnz	r0, 800c302 <__smakebuf_r+0x46>
 800c2ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2f2:	059a      	lsls	r2, r3, #22
 800c2f4:	d4ee      	bmi.n	800c2d4 <__smakebuf_r+0x18>
 800c2f6:	f023 0303 	bic.w	r3, r3, #3
 800c2fa:	f043 0302 	orr.w	r3, r3, #2
 800c2fe:	81a3      	strh	r3, [r4, #12]
 800c300:	e7e2      	b.n	800c2c8 <__smakebuf_r+0xc>
 800c302:	89a3      	ldrh	r3, [r4, #12]
 800c304:	6020      	str	r0, [r4, #0]
 800c306:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c30a:	81a3      	strh	r3, [r4, #12]
 800c30c:	9b01      	ldr	r3, [sp, #4]
 800c30e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c312:	b15b      	cbz	r3, 800c32c <__smakebuf_r+0x70>
 800c314:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c318:	4630      	mov	r0, r6
 800c31a:	f000 f851 	bl	800c3c0 <_isatty_r>
 800c31e:	b128      	cbz	r0, 800c32c <__smakebuf_r+0x70>
 800c320:	89a3      	ldrh	r3, [r4, #12]
 800c322:	f023 0303 	bic.w	r3, r3, #3
 800c326:	f043 0301 	orr.w	r3, r3, #1
 800c32a:	81a3      	strh	r3, [r4, #12]
 800c32c:	89a3      	ldrh	r3, [r4, #12]
 800c32e:	431d      	orrs	r5, r3
 800c330:	81a5      	strh	r5, [r4, #12]
 800c332:	e7cf      	b.n	800c2d4 <__smakebuf_r+0x18>

0800c334 <_putc_r>:
 800c334:	b570      	push	{r4, r5, r6, lr}
 800c336:	460d      	mov	r5, r1
 800c338:	4614      	mov	r4, r2
 800c33a:	4606      	mov	r6, r0
 800c33c:	b118      	cbz	r0, 800c346 <_putc_r+0x12>
 800c33e:	6a03      	ldr	r3, [r0, #32]
 800c340:	b90b      	cbnz	r3, 800c346 <_putc_r+0x12>
 800c342:	f7fe f863 	bl	800a40c <__sinit>
 800c346:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c348:	07d8      	lsls	r0, r3, #31
 800c34a:	d405      	bmi.n	800c358 <_putc_r+0x24>
 800c34c:	89a3      	ldrh	r3, [r4, #12]
 800c34e:	0599      	lsls	r1, r3, #22
 800c350:	d402      	bmi.n	800c358 <_putc_r+0x24>
 800c352:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c354:	f7fe fabb 	bl	800a8ce <__retarget_lock_acquire_recursive>
 800c358:	68a3      	ldr	r3, [r4, #8]
 800c35a:	3b01      	subs	r3, #1
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	60a3      	str	r3, [r4, #8]
 800c360:	da05      	bge.n	800c36e <_putc_r+0x3a>
 800c362:	69a2      	ldr	r2, [r4, #24]
 800c364:	4293      	cmp	r3, r2
 800c366:	db12      	blt.n	800c38e <_putc_r+0x5a>
 800c368:	b2eb      	uxtb	r3, r5
 800c36a:	2b0a      	cmp	r3, #10
 800c36c:	d00f      	beq.n	800c38e <_putc_r+0x5a>
 800c36e:	6823      	ldr	r3, [r4, #0]
 800c370:	1c5a      	adds	r2, r3, #1
 800c372:	6022      	str	r2, [r4, #0]
 800c374:	701d      	strb	r5, [r3, #0]
 800c376:	b2ed      	uxtb	r5, r5
 800c378:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c37a:	07da      	lsls	r2, r3, #31
 800c37c:	d405      	bmi.n	800c38a <_putc_r+0x56>
 800c37e:	89a3      	ldrh	r3, [r4, #12]
 800c380:	059b      	lsls	r3, r3, #22
 800c382:	d402      	bmi.n	800c38a <_putc_r+0x56>
 800c384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c386:	f7fe faa3 	bl	800a8d0 <__retarget_lock_release_recursive>
 800c38a:	4628      	mov	r0, r5
 800c38c:	bd70      	pop	{r4, r5, r6, pc}
 800c38e:	4629      	mov	r1, r5
 800c390:	4622      	mov	r2, r4
 800c392:	4630      	mov	r0, r6
 800c394:	f7fe f92b 	bl	800a5ee <__swbuf_r>
 800c398:	4605      	mov	r5, r0
 800c39a:	e7ed      	b.n	800c378 <_putc_r+0x44>

0800c39c <_fstat_r>:
 800c39c:	b538      	push	{r3, r4, r5, lr}
 800c39e:	4d07      	ldr	r5, [pc, #28]	@ (800c3bc <_fstat_r+0x20>)
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	4604      	mov	r4, r0
 800c3a4:	4608      	mov	r0, r1
 800c3a6:	4611      	mov	r1, r2
 800c3a8:	602b      	str	r3, [r5, #0]
 800c3aa:	f7f5 ff41 	bl	8002230 <_fstat>
 800c3ae:	1c43      	adds	r3, r0, #1
 800c3b0:	d102      	bne.n	800c3b8 <_fstat_r+0x1c>
 800c3b2:	682b      	ldr	r3, [r5, #0]
 800c3b4:	b103      	cbz	r3, 800c3b8 <_fstat_r+0x1c>
 800c3b6:	6023      	str	r3, [r4, #0]
 800c3b8:	bd38      	pop	{r3, r4, r5, pc}
 800c3ba:	bf00      	nop
 800c3bc:	20001f10 	.word	0x20001f10

0800c3c0 <_isatty_r>:
 800c3c0:	b538      	push	{r3, r4, r5, lr}
 800c3c2:	4d06      	ldr	r5, [pc, #24]	@ (800c3dc <_isatty_r+0x1c>)
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	4604      	mov	r4, r0
 800c3c8:	4608      	mov	r0, r1
 800c3ca:	602b      	str	r3, [r5, #0]
 800c3cc:	f7f5 ff40 	bl	8002250 <_isatty>
 800c3d0:	1c43      	adds	r3, r0, #1
 800c3d2:	d102      	bne.n	800c3da <_isatty_r+0x1a>
 800c3d4:	682b      	ldr	r3, [r5, #0]
 800c3d6:	b103      	cbz	r3, 800c3da <_isatty_r+0x1a>
 800c3d8:	6023      	str	r3, [r4, #0]
 800c3da:	bd38      	pop	{r3, r4, r5, pc}
 800c3dc:	20001f10 	.word	0x20001f10

0800c3e0 <_sbrk_r>:
 800c3e0:	b538      	push	{r3, r4, r5, lr}
 800c3e2:	4d06      	ldr	r5, [pc, #24]	@ (800c3fc <_sbrk_r+0x1c>)
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	4604      	mov	r4, r0
 800c3e8:	4608      	mov	r0, r1
 800c3ea:	602b      	str	r3, [r5, #0]
 800c3ec:	f7f5 ff48 	bl	8002280 <_sbrk>
 800c3f0:	1c43      	adds	r3, r0, #1
 800c3f2:	d102      	bne.n	800c3fa <_sbrk_r+0x1a>
 800c3f4:	682b      	ldr	r3, [r5, #0]
 800c3f6:	b103      	cbz	r3, 800c3fa <_sbrk_r+0x1a>
 800c3f8:	6023      	str	r3, [r4, #0]
 800c3fa:	bd38      	pop	{r3, r4, r5, pc}
 800c3fc:	20001f10 	.word	0x20001f10

0800c400 <__assert_func>:
 800c400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c402:	4614      	mov	r4, r2
 800c404:	461a      	mov	r2, r3
 800c406:	4b09      	ldr	r3, [pc, #36]	@ (800c42c <__assert_func+0x2c>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4605      	mov	r5, r0
 800c40c:	68d8      	ldr	r0, [r3, #12]
 800c40e:	b14c      	cbz	r4, 800c424 <__assert_func+0x24>
 800c410:	4b07      	ldr	r3, [pc, #28]	@ (800c430 <__assert_func+0x30>)
 800c412:	9100      	str	r1, [sp, #0]
 800c414:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c418:	4906      	ldr	r1, [pc, #24]	@ (800c434 <__assert_func+0x34>)
 800c41a:	462b      	mov	r3, r5
 800c41c:	f000 f842 	bl	800c4a4 <fiprintf>
 800c420:	f000 f852 	bl	800c4c8 <abort>
 800c424:	4b04      	ldr	r3, [pc, #16]	@ (800c438 <__assert_func+0x38>)
 800c426:	461c      	mov	r4, r3
 800c428:	e7f3      	b.n	800c412 <__assert_func+0x12>
 800c42a:	bf00      	nop
 800c42c:	20000030 	.word	0x20000030
 800c430:	0800cb45 	.word	0x0800cb45
 800c434:	0800cb52 	.word	0x0800cb52
 800c438:	0800cb80 	.word	0x0800cb80

0800c43c <_calloc_r>:
 800c43c:	b570      	push	{r4, r5, r6, lr}
 800c43e:	fba1 5402 	umull	r5, r4, r1, r2
 800c442:	b934      	cbnz	r4, 800c452 <_calloc_r+0x16>
 800c444:	4629      	mov	r1, r5
 800c446:	f7ff f91f 	bl	800b688 <_malloc_r>
 800c44a:	4606      	mov	r6, r0
 800c44c:	b928      	cbnz	r0, 800c45a <_calloc_r+0x1e>
 800c44e:	4630      	mov	r0, r6
 800c450:	bd70      	pop	{r4, r5, r6, pc}
 800c452:	220c      	movs	r2, #12
 800c454:	6002      	str	r2, [r0, #0]
 800c456:	2600      	movs	r6, #0
 800c458:	e7f9      	b.n	800c44e <_calloc_r+0x12>
 800c45a:	462a      	mov	r2, r5
 800c45c:	4621      	mov	r1, r4
 800c45e:	f7fe f95b 	bl	800a718 <memset>
 800c462:	e7f4      	b.n	800c44e <_calloc_r+0x12>

0800c464 <__ascii_mbtowc>:
 800c464:	b082      	sub	sp, #8
 800c466:	b901      	cbnz	r1, 800c46a <__ascii_mbtowc+0x6>
 800c468:	a901      	add	r1, sp, #4
 800c46a:	b142      	cbz	r2, 800c47e <__ascii_mbtowc+0x1a>
 800c46c:	b14b      	cbz	r3, 800c482 <__ascii_mbtowc+0x1e>
 800c46e:	7813      	ldrb	r3, [r2, #0]
 800c470:	600b      	str	r3, [r1, #0]
 800c472:	7812      	ldrb	r2, [r2, #0]
 800c474:	1e10      	subs	r0, r2, #0
 800c476:	bf18      	it	ne
 800c478:	2001      	movne	r0, #1
 800c47a:	b002      	add	sp, #8
 800c47c:	4770      	bx	lr
 800c47e:	4610      	mov	r0, r2
 800c480:	e7fb      	b.n	800c47a <__ascii_mbtowc+0x16>
 800c482:	f06f 0001 	mvn.w	r0, #1
 800c486:	e7f8      	b.n	800c47a <__ascii_mbtowc+0x16>

0800c488 <__ascii_wctomb>:
 800c488:	4603      	mov	r3, r0
 800c48a:	4608      	mov	r0, r1
 800c48c:	b141      	cbz	r1, 800c4a0 <__ascii_wctomb+0x18>
 800c48e:	2aff      	cmp	r2, #255	@ 0xff
 800c490:	d904      	bls.n	800c49c <__ascii_wctomb+0x14>
 800c492:	228a      	movs	r2, #138	@ 0x8a
 800c494:	601a      	str	r2, [r3, #0]
 800c496:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c49a:	4770      	bx	lr
 800c49c:	700a      	strb	r2, [r1, #0]
 800c49e:	2001      	movs	r0, #1
 800c4a0:	4770      	bx	lr
	...

0800c4a4 <fiprintf>:
 800c4a4:	b40e      	push	{r1, r2, r3}
 800c4a6:	b503      	push	{r0, r1, lr}
 800c4a8:	4601      	mov	r1, r0
 800c4aa:	ab03      	add	r3, sp, #12
 800c4ac:	4805      	ldr	r0, [pc, #20]	@ (800c4c4 <fiprintf+0x20>)
 800c4ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4b2:	6800      	ldr	r0, [r0, #0]
 800c4b4:	9301      	str	r3, [sp, #4]
 800c4b6:	f7ff fd17 	bl	800bee8 <_vfiprintf_r>
 800c4ba:	b002      	add	sp, #8
 800c4bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4c0:	b003      	add	sp, #12
 800c4c2:	4770      	bx	lr
 800c4c4:	20000030 	.word	0x20000030

0800c4c8 <abort>:
 800c4c8:	b508      	push	{r3, lr}
 800c4ca:	2006      	movs	r0, #6
 800c4cc:	f000 f82c 	bl	800c528 <raise>
 800c4d0:	2001      	movs	r0, #1
 800c4d2:	f7f5 fe79 	bl	80021c8 <_exit>

0800c4d6 <_raise_r>:
 800c4d6:	291f      	cmp	r1, #31
 800c4d8:	b538      	push	{r3, r4, r5, lr}
 800c4da:	4605      	mov	r5, r0
 800c4dc:	460c      	mov	r4, r1
 800c4de:	d904      	bls.n	800c4ea <_raise_r+0x14>
 800c4e0:	2316      	movs	r3, #22
 800c4e2:	6003      	str	r3, [r0, #0]
 800c4e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c4e8:	bd38      	pop	{r3, r4, r5, pc}
 800c4ea:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c4ec:	b112      	cbz	r2, 800c4f4 <_raise_r+0x1e>
 800c4ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c4f2:	b94b      	cbnz	r3, 800c508 <_raise_r+0x32>
 800c4f4:	4628      	mov	r0, r5
 800c4f6:	f000 f831 	bl	800c55c <_getpid_r>
 800c4fa:	4622      	mov	r2, r4
 800c4fc:	4601      	mov	r1, r0
 800c4fe:	4628      	mov	r0, r5
 800c500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c504:	f000 b818 	b.w	800c538 <_kill_r>
 800c508:	2b01      	cmp	r3, #1
 800c50a:	d00a      	beq.n	800c522 <_raise_r+0x4c>
 800c50c:	1c59      	adds	r1, r3, #1
 800c50e:	d103      	bne.n	800c518 <_raise_r+0x42>
 800c510:	2316      	movs	r3, #22
 800c512:	6003      	str	r3, [r0, #0]
 800c514:	2001      	movs	r0, #1
 800c516:	e7e7      	b.n	800c4e8 <_raise_r+0x12>
 800c518:	2100      	movs	r1, #0
 800c51a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c51e:	4620      	mov	r0, r4
 800c520:	4798      	blx	r3
 800c522:	2000      	movs	r0, #0
 800c524:	e7e0      	b.n	800c4e8 <_raise_r+0x12>
	...

0800c528 <raise>:
 800c528:	4b02      	ldr	r3, [pc, #8]	@ (800c534 <raise+0xc>)
 800c52a:	4601      	mov	r1, r0
 800c52c:	6818      	ldr	r0, [r3, #0]
 800c52e:	f7ff bfd2 	b.w	800c4d6 <_raise_r>
 800c532:	bf00      	nop
 800c534:	20000030 	.word	0x20000030

0800c538 <_kill_r>:
 800c538:	b538      	push	{r3, r4, r5, lr}
 800c53a:	4d07      	ldr	r5, [pc, #28]	@ (800c558 <_kill_r+0x20>)
 800c53c:	2300      	movs	r3, #0
 800c53e:	4604      	mov	r4, r0
 800c540:	4608      	mov	r0, r1
 800c542:	4611      	mov	r1, r2
 800c544:	602b      	str	r3, [r5, #0]
 800c546:	f7f5 fe2f 	bl	80021a8 <_kill>
 800c54a:	1c43      	adds	r3, r0, #1
 800c54c:	d102      	bne.n	800c554 <_kill_r+0x1c>
 800c54e:	682b      	ldr	r3, [r5, #0]
 800c550:	b103      	cbz	r3, 800c554 <_kill_r+0x1c>
 800c552:	6023      	str	r3, [r4, #0]
 800c554:	bd38      	pop	{r3, r4, r5, pc}
 800c556:	bf00      	nop
 800c558:	20001f10 	.word	0x20001f10

0800c55c <_getpid_r>:
 800c55c:	f7f5 be1c 	b.w	8002198 <_getpid>

0800c560 <_init>:
 800c560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c562:	bf00      	nop
 800c564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c566:	bc08      	pop	{r3}
 800c568:	469e      	mov	lr, r3
 800c56a:	4770      	bx	lr

0800c56c <_fini>:
 800c56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c56e:	bf00      	nop
 800c570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c572:	bc08      	pop	{r3}
 800c574:	469e      	mov	lr, r3
 800c576:	4770      	bx	lr
