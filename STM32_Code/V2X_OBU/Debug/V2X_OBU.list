
V2X_OBU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005210  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08005350  08005350  00006350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080054d8  080054d8  000064d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080054e0  080054e0  000064e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080054e4  080054e4  000064e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  20000008  080054e8  00007008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000284  20000080  08005560  00007080  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000304  08005560  00007304  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00007080  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001204d  00000000  00000000  000070b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002659  00000000  00000000  000190fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014c8  00000000  00000000  0001b758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000fd0  00000000  00000000  0001cc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00022bef  00000000  00000000  0001dbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001123b  00000000  00000000  000407df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000daf5f  00000000  00000000  00051a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0012c979  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005e6c  00000000  00000000  0012c9bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  00132828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000080 	.word	0x20000080
 800015c:	00000000 	.word	0x00000000
 8000160:	08005338 	.word	0x08005338

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000084 	.word	0x20000084
 800017c:	08005338 	.word	0x08005338

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000554:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000558:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800055c:	f003 0301 	and.w	r3, r3, #1
 8000560:	2b00      	cmp	r3, #0
 8000562:	d013      	beq.n	800058c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000564:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000568:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800056c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000570:	2b00      	cmp	r3, #0
 8000572:	d00b      	beq.n	800058c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000574:	e000      	b.n	8000578 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000576:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000578:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d0f9      	beq.n	8000576 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000582:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	b2d2      	uxtb	r2, r2
 800058a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800058c:	687b      	ldr	r3, [r7, #4]
}
 800058e:	4618      	mov	r0, r3
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800059a:	b480      	push	{r7}
 800059c:	b085      	sub	sp, #20
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4313      	orrs	r3, r2
 80005b0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4013      	ands	r3, r2
 80005bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005be:	68fb      	ldr	r3, [r7, #12]
}
 80005c0:	bf00      	nop
 80005c2:	3714      	adds	r7, #20
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f000 fc4b 	bl	8000e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f83f 	bl	8000658 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005da:	f000 f895 	bl	8000708 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 f8eb 	bl	80007b8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005e2:	f000 f8af 	bl	8000744 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  /* Send or receive something to the ESP32*/
  printf("STM32 will start receiving data via SPI...");
 80005e6:	4818      	ldr	r0, [pc, #96]	@ (8000648 <main+0x7c>)
 80005e8:	f004 f83a 	bl	8004660 <iprintf>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 fb71 	bl	8000cd4 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80005f2:	2001      	movs	r0, #1
 80005f4:	f000 fb6e 	bl	8000cd4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80005f8:	2002      	movs	r0, #2
 80005fa:	f000 fb6b 	bl	8000cd4 <BSP_LED_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80005fe:	4b13      	ldr	r3, [pc, #76]	@ (800064c <main+0x80>)
 8000600:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000604:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000606:	4b11      	ldr	r3, [pc, #68]	@ (800064c <main+0x80>)
 8000608:	2200      	movs	r2, #0
 800060a:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800060c:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <main+0x80>)
 800060e:	2200      	movs	r2, #0
 8000610:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000612:	4b0e      	ldr	r3, [pc, #56]	@ (800064c <main+0x80>)
 8000614:	2200      	movs	r2, #0
 8000616:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000618:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <main+0x80>)
 800061a:	2200      	movs	r2, #0
 800061c:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800061e:	490b      	ldr	r1, [pc, #44]	@ (800064c <main+0x80>)
 8000620:	2000      	movs	r0, #0
 8000622:	f000 fb91 	bl	8000d48 <BSP_COM_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <main+0x64>
  {
    Error_Handler();
 800062c:	f000 f96e 	bl	800090c <Error_Handler>
//			last_received_time = HAL_GetTick();  // Reset timeout
//		}
//	}
//	HAL_Delay(1);  // Reduce CPU usage
//  }
	HAL_Delay(1);
 8000630:	2001      	movs	r0, #1
 8000632:	f000 fca1 	bl	8000f78 <HAL_Delay>
//	HAL_StatusTypeDef status = HAL_SPI_Receive(&hspi1, (uint8_t *)&receivedData, sizeof(Item), HAL_MAX_DELAY);
	HAL_StatusTypeDef status = HAL_SPI_Receive_IT(&hspi1, (uint8_t *)&receivedData, sizeof(Item));
 8000636:	220a      	movs	r2, #10
 8000638:	4905      	ldr	r1, [pc, #20]	@ (8000650 <main+0x84>)
 800063a:	4806      	ldr	r0, [pc, #24]	@ (8000654 <main+0x88>)
 800063c:	f002 fd9c 	bl	8003178 <HAL_SPI_Receive_IT>
 8000640:	4603      	mov	r3, r0
 8000642:	71fb      	strb	r3, [r7, #7]
  {
 8000644:	bf00      	nop
 8000646:	e7f3      	b.n	8000630 <main+0x64>
 8000648:	08005350 	.word	0x08005350
 800064c:	2000009c 	.word	0x2000009c
 8000650:	20000110 	.word	0x20000110
 8000654:	200000ac 	.word	0x200000ac

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b09a      	sub	sp, #104	@ 0x68
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	2248      	movs	r2, #72	@ 0x48
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f004 f84f 	bl	800470a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]
 800067a:	615a      	str	r2, [r3, #20]
 800067c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067e:	4b21      	ldr	r3, [pc, #132]	@ (8000704 <SystemClock_Config+0xac>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000686:	4a1f      	ldr	r2, [pc, #124]	@ (8000704 <SystemClock_Config+0xac>)
 8000688:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800068c:	6013      	str	r3, [r2, #0]
 800068e:	4b1d      	ldr	r3, [pc, #116]	@ (8000704 <SystemClock_Config+0xac>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800069a:	2322      	movs	r3, #34	@ 0x22
 800069c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	2340      	movs	r3, #64	@ 0x40
 80006aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006ac:	2300      	movs	r3, #0
 80006ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80006b0:	23a0      	movs	r3, #160	@ 0xa0
 80006b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 fa7f 	bl	8001bc0 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006c8:	f000 f920 	bl	800090c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80006cc:	236f      	movs	r3, #111	@ 0x6f
 80006ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2101      	movs	r1, #1
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 fddb 	bl	80022a8 <HAL_RCC_ClockConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006f8:	f000 f908 	bl	800090c <Error_Handler>
  }
}
 80006fc:	bf00      	nop
 80006fe:	3768      	adds	r7, #104	@ 0x68
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	58000400 	.word	0x58000400

08000708 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	@ 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800070e:	463b      	mov	r3, r7
 8000710:	2250      	movs	r2, #80	@ 0x50
 8000712:	2100      	movs	r1, #0
 8000714:	4618      	mov	r0, r3
 8000716:	f003 fff8 	bl	800470a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800071a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800071e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000720:	2300      	movs	r3, #0
 8000722:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000724:	2300      	movs	r3, #0
 8000726:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000728:	463b      	mov	r3, r7
 800072a:	4618      	mov	r0, r3
 800072c:	f002 f9f9 	bl	8002b22 <HAL_RCCEx_PeriphCLKConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000736:	f000 f8e9 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800073a:	bf00      	nop
 800073c:	3750      	adds	r7, #80	@ 0x50
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000748:	4b19      	ldr	r3, [pc, #100]	@ (80007b0 <MX_SPI1_Init+0x6c>)
 800074a:	4a1a      	ldr	r2, [pc, #104]	@ (80007b4 <MX_SPI1_Init+0x70>)
 800074c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800074e:	4b18      	ldr	r3, [pc, #96]	@ (80007b0 <MX_SPI1_Init+0x6c>)
 8000750:	2200      	movs	r2, #0
 8000752:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000754:	4b16      	ldr	r3, [pc, #88]	@ (80007b0 <MX_SPI1_Init+0x6c>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800075a:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <MX_SPI1_Init+0x6c>)
 800075c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000760:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000762:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <MX_SPI1_Init+0x6c>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000768:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <MX_SPI1_Init+0x6c>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800076e:	4b10      	ldr	r3, [pc, #64]	@ (80007b0 <MX_SPI1_Init+0x6c>)
 8000770:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000774:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000776:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <MX_SPI1_Init+0x6c>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800077c:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <MX_SPI1_Init+0x6c>)
 800077e:	2200      	movs	r2, #0
 8000780:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	@ (80007b0 <MX_SPI1_Init+0x6c>)
 8000784:	2200      	movs	r2, #0
 8000786:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000788:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_SPI1_Init+0x6c>)
 800078a:	2207      	movs	r2, #7
 800078c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800078e:	4b08      	ldr	r3, [pc, #32]	@ (80007b0 <MX_SPI1_Init+0x6c>)
 8000790:	2200      	movs	r2, #0
 8000792:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000794:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <MX_SPI1_Init+0x6c>)
 8000796:	2200      	movs	r2, #0
 8000798:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <MX_SPI1_Init+0x6c>)
 800079c:	f002 fc48 	bl	8003030 <HAL_SPI_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 80007a6:	f000 f8b1 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000ac 	.word	0x200000ac
 80007b4:	40013000 	.word	0x40013000

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007cc:	2004      	movs	r0, #4
 80007ce:	f7ff fee4 	bl	800059a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2001      	movs	r0, #1
 80007d4:	f7ff fee1 	bl	800059a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d8:	2008      	movs	r0, #8
 80007da:	f7ff fede 	bl	800059a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2002      	movs	r0, #2
 80007e0:	f7ff fedb 	bl	800059a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007e4:	2310      	movs	r3, #16
 80007e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	4619      	mov	r1, r3
 80007f4:	4816      	ldr	r0, [pc, #88]	@ (8000850 <MX_GPIO_Init+0x98>)
 80007f6:	f000 fcc7 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 80007fa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80007fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800080c:	230a      	movs	r3, #10
 800080e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	4619      	mov	r1, r3
 8000814:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000818:	f000 fcb6 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 800081c:	2303      	movs	r3, #3
 800081e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	4619      	mov	r1, r3
 800082c:	4809      	ldr	r0, [pc, #36]	@ (8000854 <MX_GPIO_Init+0x9c>)
 800082e:	f000 fcab 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000832:	2310      	movs	r3, #16
 8000834:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	4619      	mov	r1, r3
 8000842:	4805      	ldr	r0, [pc, #20]	@ (8000858 <MX_GPIO_Init+0xa0>)
 8000844:	f000 fca0 	bl	8001188 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000848:	bf00      	nop
 800084a:	3718      	adds	r7, #24
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	48000800 	.word	0x48000800
 8000854:	48000c00 	.word	0x48000c00
 8000858:	48000400 	.word	0x48000400

0800085c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	e009      	b.n	8000882 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	1c5a      	adds	r2, r3, #1
 8000872:	60ba      	str	r2, [r7, #8]
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fe68 	bl	800054c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	3301      	adds	r3, #1
 8000880:	617b      	str	r3, [r7, #20]
 8000882:	697a      	ldr	r2, [r7, #20]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	429a      	cmp	r2, r3
 8000888:	dbf1      	blt.n	800086e <_write+0x12>
  }
  return len;
 800088a:	687b      	ldr	r3, [r7, #4]
}
 800088c:	4618      	mov	r0, r3
 800088e:	3718      	adds	r7, #24
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000896:	b087      	sub	sp, #28
 8000898:	af04      	add	r7, sp, #16
 800089a:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI1) {
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a16      	ldr	r2, [pc, #88]	@ (80008fc <HAL_SPI_RxCpltCallback+0x68>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d126      	bne.n	80008f4 <HAL_SPI_RxCpltCallback+0x60>
        printf("SPI OK - Received: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
            receivedData.value,
 80008a6:	4b16      	ldr	r3, [pc, #88]	@ (8000900 <HAL_SPI_RxCpltCallback+0x6c>)
 80008a8:	6819      	ldr	r1, [r3, #0]
            receivedData.MacAddress[0], receivedData.MacAddress[1],
 80008aa:	4b15      	ldr	r3, [pc, #84]	@ (8000900 <HAL_SPI_RxCpltCallback+0x6c>)
 80008ac:	791b      	ldrb	r3, [r3, #4]
 80008ae:	b2db      	uxtb	r3, r3
        printf("SPI OK - Received: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 80008b0:	461d      	mov	r5, r3
            receivedData.MacAddress[0], receivedData.MacAddress[1],
 80008b2:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <HAL_SPI_RxCpltCallback+0x6c>)
 80008b4:	795b      	ldrb	r3, [r3, #5]
 80008b6:	b2db      	uxtb	r3, r3
        printf("SPI OK - Received: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 80008b8:	461e      	mov	r6, r3
            receivedData.MacAddress[2], receivedData.MacAddress[3],
 80008ba:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <HAL_SPI_RxCpltCallback+0x6c>)
 80008bc:	799b      	ldrb	r3, [r3, #6]
 80008be:	b2db      	uxtb	r3, r3
        printf("SPI OK - Received: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 80008c0:	461a      	mov	r2, r3
            receivedData.MacAddress[2], receivedData.MacAddress[3],
 80008c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <HAL_SPI_RxCpltCallback+0x6c>)
 80008c4:	79db      	ldrb	r3, [r3, #7]
 80008c6:	b2db      	uxtb	r3, r3
        printf("SPI OK - Received: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 80008c8:	4618      	mov	r0, r3
            receivedData.MacAddress[4], receivedData.MacAddress[5]);
 80008ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000900 <HAL_SPI_RxCpltCallback+0x6c>)
 80008cc:	7a1b      	ldrb	r3, [r3, #8]
 80008ce:	b2db      	uxtb	r3, r3
        printf("SPI OK - Received: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 80008d0:	461c      	mov	r4, r3
            receivedData.MacAddress[4], receivedData.MacAddress[5]);
 80008d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000900 <HAL_SPI_RxCpltCallback+0x6c>)
 80008d4:	7a5b      	ldrb	r3, [r3, #9]
 80008d6:	b2db      	uxtb	r3, r3
        printf("SPI OK - Received: %u, MAC: %02X:%02X:%02X:%02X:%02X:%02X\n",
 80008d8:	9303      	str	r3, [sp, #12]
 80008da:	9402      	str	r4, [sp, #8]
 80008dc:	9001      	str	r0, [sp, #4]
 80008de:	9200      	str	r2, [sp, #0]
 80008e0:	4633      	mov	r3, r6
 80008e2:	462a      	mov	r2, r5
 80008e4:	4807      	ldr	r0, [pc, #28]	@ (8000904 <HAL_SPI_RxCpltCallback+0x70>)
 80008e6:	f003 febb 	bl	8004660 <iprintf>

        // Restart reception immediately
        HAL_SPI_Receive_IT(&hspi1, (uint8_t *)&receivedData, sizeof(Item));
 80008ea:	220a      	movs	r2, #10
 80008ec:	4904      	ldr	r1, [pc, #16]	@ (8000900 <HAL_SPI_RxCpltCallback+0x6c>)
 80008ee:	4806      	ldr	r0, [pc, #24]	@ (8000908 <HAL_SPI_RxCpltCallback+0x74>)
 80008f0:	f002 fc42 	bl	8003178 <HAL_SPI_Receive_IT>
    }
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008fc:	40013000 	.word	0x40013000
 8000900:	20000110 	.word	0x20000110
 8000904:	0800537c 	.word	0x0800537c
 8000908:	200000ac 	.word	0x200000ac

0800090c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000910:	b672      	cpsid	i
}
 8000912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <Error_Handler+0x8>

08000918 <LL_AHB2_GRP1_EnableClock>:
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000920:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000924:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000926:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4313      	orrs	r3, r2
 800092e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000930:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000934:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4013      	ands	r3, r2
 800093a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800093c:	68fb      	ldr	r3, [r7, #12]
}
 800093e:	bf00      	nop
 8000940:	3714      	adds	r7, #20
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800094a:	b480      	push	{r7}
 800094c:	b085      	sub	sp, #20
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000952:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000956:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000958:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4313      	orrs	r3, r2
 8000960:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000962:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000966:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4013      	ands	r3, r2
 800096c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800096e:	68fb      	ldr	r3, [r7, #12]
}
 8000970:	bf00      	nop
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
	...

0800098c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a0f      	ldr	r2, [pc, #60]	@ (80009e8 <HAL_SPI_MspInit+0x5c>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d117      	bne.n	80009de <HAL_SPI_MspInit+0x52>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009ae:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80009b2:	f7ff ffca 	bl	800094a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	2001      	movs	r0, #1
 80009b8:	f7ff ffae 	bl	8000918 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80009bc:	23c2      	movs	r3, #194	@ 0xc2
 80009be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009cc:	2305      	movs	r3, #5
 80009ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	4619      	mov	r1, r3
 80009d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009da:	f000 fbd5 	bl	8001188 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80009de:	bf00      	nop
 80009e0:	3720      	adds	r7, #32
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40013000 	.word	0x40013000

080009ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <NMI_Handler+0x4>

080009f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <HardFault_Handler+0x4>

080009fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <MemManage_Handler+0x4>

08000a04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <BusFault_Handler+0x4>

08000a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <UsageFault_Handler+0x4>

08000a14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a42:	f000 fa6d 	bl	8000f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b086      	sub	sp, #24
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	60f8      	str	r0, [r7, #12]
 8000a52:	60b9      	str	r1, [r7, #8]
 8000a54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
 8000a5a:	e00a      	b.n	8000a72 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a5c:	f3af 8000 	nop.w
 8000a60:	4601      	mov	r1, r0
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	1c5a      	adds	r2, r3, #1
 8000a66:	60ba      	str	r2, [r7, #8]
 8000a68:	b2ca      	uxtb	r2, r1
 8000a6a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	697a      	ldr	r2, [r7, #20]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	dbf0      	blt.n	8000a5c <_read+0x12>
  }

  return len;
 8000a7a:	687b      	ldr	r3, [r7, #4]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3718      	adds	r7, #24
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000aac:	605a      	str	r2, [r3, #4]
  return 0;
 8000aae:	2300      	movs	r3, #0
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <_isatty>:

int _isatty(int file)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ac4:	2301      	movs	r3, #1
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b085      	sub	sp, #20
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	60f8      	str	r0, [r7, #12]
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ade:	2300      	movs	r3, #0
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af4:	4a14      	ldr	r2, [pc, #80]	@ (8000b48 <_sbrk+0x5c>)
 8000af6:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <_sbrk+0x60>)
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b00:	4b13      	ldr	r3, [pc, #76]	@ (8000b50 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d102      	bne.n	8000b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b08:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <_sbrk+0x64>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	@ (8000b54 <_sbrk+0x68>)
 8000b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0e:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <_sbrk+0x64>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d207      	bcs.n	8000b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b1c:	f003 fe44 	bl	80047a8 <__errno>
 8000b20:	4603      	mov	r3, r0
 8000b22:	220c      	movs	r2, #12
 8000b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b2a:	e009      	b.n	8000b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <_sbrk+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b32:	4b07      	ldr	r3, [pc, #28]	@ (8000b50 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	4a05      	ldr	r2, [pc, #20]	@ (8000b50 <_sbrk+0x64>)
 8000b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20030000 	.word	0x20030000
 8000b4c:	00000400 	.word	0x00000400
 8000b50:	2000011c 	.word	0x2000011c
 8000b54:	20000308 	.word	0x20000308

08000b58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000b5c:	4b24      	ldr	r3, [pc, #144]	@ (8000bf0 <SystemInit+0x98>)
 8000b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b62:	4a23      	ldr	r2, [pc, #140]	@ (8000bf0 <SystemInit+0x98>)
 8000b64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000b7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b80:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000b84:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000b86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b90:	4b18      	ldr	r3, [pc, #96]	@ (8000bf4 <SystemInit+0x9c>)
 8000b92:	4013      	ands	r3, r2
 8000b94:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000b96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000ba2:	f023 0305 	bic.w	r3, r3, #5
 8000ba6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000baa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000bb2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000bb6:	f023 0301 	bic.w	r3, r3, #1
 8000bba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000bbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bc2:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf8 <SystemInit+0xa0>)
 8000bc4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000bc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bca:	4a0b      	ldr	r2, [pc, #44]	@ (8000bf8 <SystemInit+0xa0>)
 8000bcc:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000bd8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bdc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000bde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000be2:	2200      	movs	r2, #0
 8000be4:	619a      	str	r2, [r3, #24]
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00
 8000bf4:	faf6fefb 	.word	0xfaf6fefb
 8000bf8:	22041000 	.word	0x22041000

08000bfc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000bfc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bfe:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c00:	3304      	adds	r3, #4

08000c02 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c02:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c04:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000c06:	d3f9      	bcc.n	8000bfc <CopyDataInit>
  bx lr
 8000c08:	4770      	bx	lr

08000c0a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000c0a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000c0c:	3004      	adds	r0, #4

08000c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000c0e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000c10:	d3fb      	bcc.n	8000c0a <FillZerobss>
  bx lr
 8000c12:	4770      	bx	lr

08000c14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c14:	480c      	ldr	r0, [pc, #48]	@ (8000c48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c16:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c18:	f7ff ff9e 	bl	8000b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000c1c:	480b      	ldr	r0, [pc, #44]	@ (8000c4c <LoopForever+0x6>)
 8000c1e:	490c      	ldr	r1, [pc, #48]	@ (8000c50 <LoopForever+0xa>)
 8000c20:	4a0c      	ldr	r2, [pc, #48]	@ (8000c54 <LoopForever+0xe>)
 8000c22:	2300      	movs	r3, #0
 8000c24:	f7ff ffed 	bl	8000c02 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000c28:	480b      	ldr	r0, [pc, #44]	@ (8000c58 <LoopForever+0x12>)
 8000c2a:	490c      	ldr	r1, [pc, #48]	@ (8000c5c <LoopForever+0x16>)
 8000c2c:	4a0c      	ldr	r2, [pc, #48]	@ (8000c60 <LoopForever+0x1a>)
 8000c2e:	2300      	movs	r3, #0
 8000c30:	f7ff ffe7 	bl	8000c02 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000c34:	480b      	ldr	r0, [pc, #44]	@ (8000c64 <LoopForever+0x1e>)
 8000c36:	490c      	ldr	r1, [pc, #48]	@ (8000c68 <LoopForever+0x22>)
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f7ff ffe8 	bl	8000c0e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c3e:	f003 fdb9 	bl	80047b4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c42:	f7ff fcc3 	bl	80005cc <main>

08000c46 <LoopForever>:

LoopForever:
  b LoopForever
 8000c46:	e7fe      	b.n	8000c46 <LoopForever>
  ldr   r0, =_estack
 8000c48:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	20000080 	.word	0x20000080
 8000c54:	080054e8 	.word	0x080054e8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000c58:	20030000 	.word	0x20030000
 8000c5c:	20030000 	.word	0x20030000
 8000c60:	08005560 	.word	0x08005560
  INIT_BSS _sbss, _ebss
 8000c64:	20000080 	.word	0x20000080
 8000c68:	20000304 	.word	0x20000304

08000c6c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c6c:	e7fe      	b.n	8000c6c <ADC1_IRQHandler>

08000c6e <LL_AHB2_GRP1_EnableClock>:
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b085      	sub	sp, #20
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c92:	68fb      	ldr	r3, [r7, #12]
}
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <LL_APB2_GRP1_EnableClock>:
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ca8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000cae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000cb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cbc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
}
 8000cc6:	bf00      	nop
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b088      	sub	sp, #32
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8000cde:	f107 030c 	add.w	r3, r7, #12
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000cee:	2002      	movs	r0, #2
 8000cf0:	f7ff ffbd 	bl	8000c6e <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	4a12      	ldr	r2, [pc, #72]	@ (8000d40 <BSP_LED_Init+0x6c>)
 8000cf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cfc:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d06:	2302      	movs	r3, #2
 8000d08:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d44 <BSP_LED_Init+0x70>)
 8000d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d12:	f107 020c 	add.w	r2, r7, #12
 8000d16:	4611      	mov	r1, r2
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 fa35 	bl	8001188 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	4a08      	ldr	r2, [pc, #32]	@ (8000d44 <BSP_LED_Init+0x70>)
 8000d22:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	4a05      	ldr	r2, [pc, #20]	@ (8000d40 <BSP_LED_Init+0x6c>)
 8000d2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	4619      	mov	r1, r3
 8000d32:	f000 fb99 	bl	8001468 <HAL_GPIO_WritePin>
}
 8000d36:	bf00      	nop
 8000d38:	3720      	adds	r7, #32
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	08005484 	.word	0x08005484
 8000d44:	2000000c 	.word	0x2000000c

08000d48 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d903      	bls.n	8000d66 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000d5e:	f06f 0301 	mvn.w	r3, #1
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	e018      	b.n	8000d98 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	2294      	movs	r2, #148	@ 0x94
 8000d6a:	fb02 f303 	mul.w	r3, r2, r3
 8000d6e:	4a0d      	ldr	r2, [pc, #52]	@ (8000da4 <BSP_COM_Init+0x5c>)
 8000d70:	4413      	add	r3, r2
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f84a 	bl	8000e0c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	2294      	movs	r2, #148	@ 0x94
 8000d7c:	fb02 f303 	mul.w	r3, r2, r3
 8000d80:	4a08      	ldr	r2, [pc, #32]	@ (8000da4 <BSP_COM_Init+0x5c>)
 8000d82:	4413      	add	r3, r2
 8000d84:	6839      	ldr	r1, [r7, #0]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 f80e 	bl	8000da8 <MX_LPUART1_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d002      	beq.n	8000d98 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8000d92:	f06f 0303 	mvn.w	r3, #3
 8000d96:	e000      	b.n	8000d9a <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8000d98:	68fb      	ldr	r3, [r7, #12]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000120 	.word	0x20000120

08000da8 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000db2:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <MX_LPUART1_Init+0x60>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	220c      	movs	r2, #12
 8000dc6:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	895b      	ldrh	r3, [r3, #10]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	891b      	ldrh	r3, [r3, #8]
 8000dde:	461a      	mov	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	899b      	ldrh	r3, [r3, #12]
 8000de8:	461a      	mov	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000df4:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f002 fece 	bl	8003b98 <HAL_UART_Init>
 8000dfc:	4603      	mov	r3, r0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000018 	.word	0x20000018

08000e0c <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000e14:	2002      	movs	r0, #2
 8000e16:	f7ff ff2a 	bl	8000c6e <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 8000e1a:	2002      	movs	r0, #2
 8000e1c:	f7ff ff27 	bl	8000c6e <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000e20:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000e24:	f7ff ff3c 	bl	8000ca0 <LL_APB2_GRP1_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000e28:	2340      	movs	r3, #64	@ 0x40
 8000e2a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000e30:	2302      	movs	r3, #2
 8000e32:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000e38:	2307      	movs	r3, #7
 8000e3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000e3c:	f107 030c 	add.w	r3, r7, #12
 8000e40:	4619      	mov	r1, r3
 8000e42:	4809      	ldr	r0, [pc, #36]	@ (8000e68 <COM1_MspInit+0x5c>)
 8000e44:	f000 f9a0 	bl	8001188 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000e48:	2380      	movs	r3, #128	@ 0x80
 8000e4a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000e50:	2307      	movs	r3, #7
 8000e52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4803      	ldr	r0, [pc, #12]	@ (8000e68 <COM1_MspInit+0x5c>)
 8000e5c:	f000 f994 	bl	8001188 <HAL_GPIO_Init>
}
 8000e60:	bf00      	nop
 8000e62:	3720      	adds	r7, #32
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	48000400 	.word	0x48000400

08000e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <HAL_Init+0x3c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea8 <HAL_Init+0x3c>)
 8000e7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e80:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e82:	2003      	movs	r0, #3
 8000e84:	f000 f94e 	bl	8001124 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f000 f80f 	bl	8000eac <HAL_InitTick>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d002      	beq.n	8000e9a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	71fb      	strb	r3, [r7, #7]
 8000e98:	e001      	b.n	8000e9e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e9a:	f7ff fd6f 	bl	800097c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	58004000 	.word	0x58004000

08000eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000eb8:	4b17      	ldr	r3, [pc, #92]	@ (8000f18 <HAL_InitTick+0x6c>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d024      	beq.n	8000f0a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ec0:	f001 fb9e 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	4b14      	ldr	r3, [pc, #80]	@ (8000f18 <HAL_InitTick+0x6c>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ed0:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 f948 	bl	800116e <HAL_SYSTICK_Config>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d10f      	bne.n	8000f04 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b0f      	cmp	r3, #15
 8000ee8:	d809      	bhi.n	8000efe <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eea:	2200      	movs	r2, #0
 8000eec:	6879      	ldr	r1, [r7, #4]
 8000eee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ef2:	f000 f922 	bl	800113a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ef6:	4a09      	ldr	r2, [pc, #36]	@ (8000f1c <HAL_InitTick+0x70>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	e007      	b.n	8000f0e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	73fb      	strb	r3, [r7, #15]
 8000f02:	e004      	b.n	8000f0e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	73fb      	strb	r3, [r7, #15]
 8000f08:	e001      	b.n	8000f0e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000020 	.word	0x20000020
 8000f1c:	2000001c 	.word	0x2000001c

08000f20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f24:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <HAL_IncTick+0x20>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <HAL_IncTick+0x24>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a04      	ldr	r2, [pc, #16]	@ (8000f44 <HAL_IncTick+0x24>)
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000020 	.word	0x20000020
 8000f44:	200001b4 	.word	0x200001b4

08000f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	@ (8000f5c <HAL_GetTick+0x14>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	200001b4 	.word	0x200001b4

08000f60 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000f64:	4b03      	ldr	r3, [pc, #12]	@ (8000f74 <HAL_GetTickPrio+0x14>)
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	2000001c 	.word	0x2000001c

08000f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f80:	f7ff ffe2 	bl	8000f48 <HAL_GetTick>
 8000f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f90:	d005      	beq.n	8000f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f92:	4b0a      	ldr	r3, [pc, #40]	@ (8000fbc <HAL_Delay+0x44>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f9e:	bf00      	nop
 8000fa0:	f7ff ffd2 	bl	8000f48 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d8f7      	bhi.n	8000fa0 <HAL_Delay+0x28>
  {
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000020 	.word	0x20000020

08000fc0 <__NVIC_SetPriorityGrouping>:
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff2:	4a04      	ldr	r2, [pc, #16]	@ (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	60d3      	str	r3, [r2, #12]
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_GetPriorityGrouping>:
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800100c:	4b04      	ldr	r3, [pc, #16]	@ (8001020 <__NVIC_GetPriorityGrouping+0x18>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	f003 0307 	and.w	r3, r3, #7
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_SetPriority>:
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	2b00      	cmp	r3, #0
 8001036:	db0a      	blt.n	800104e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	b2da      	uxtb	r2, r3
 800103c:	490c      	ldr	r1, [pc, #48]	@ (8001070 <__NVIC_SetPriority+0x4c>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	0112      	lsls	r2, r2, #4
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	440b      	add	r3, r1
 8001048:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800104c:	e00a      	b.n	8001064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4908      	ldr	r1, [pc, #32]	@ (8001074 <__NVIC_SetPriority+0x50>)
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	f003 030f 	and.w	r3, r3, #15
 800105a:	3b04      	subs	r3, #4
 800105c:	0112      	lsls	r2, r2, #4
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	440b      	add	r3, r1
 8001062:	761a      	strb	r2, [r3, #24]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000e100 	.word	0xe000e100
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <NVIC_EncodePriority>:
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	@ 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f1c3 0307 	rsb	r3, r3, #7
 8001092:	2b04      	cmp	r3, #4
 8001094:	bf28      	it	cs
 8001096:	2304      	movcs	r3, #4
 8001098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3304      	adds	r3, #4
 800109e:	2b06      	cmp	r3, #6
 80010a0:	d902      	bls.n	80010a8 <NVIC_EncodePriority+0x30>
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3b03      	subs	r3, #3
 80010a6:	e000      	b.n	80010aa <NVIC_EncodePriority+0x32>
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43da      	mvns	r2, r3
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	401a      	ands	r2, r3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ca:	43d9      	mvns	r1, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	4313      	orrs	r3, r2
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3724      	adds	r7, #36	@ 0x24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <SysTick_Config>:
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010f0:	d301      	bcc.n	80010f6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80010f2:	2301      	movs	r3, #1
 80010f4:	e00f      	b.n	8001116 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001120 <SysTick_Config+0x40>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010fe:	210f      	movs	r1, #15
 8001100:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001104:	f7ff ff8e 	bl	8001024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001108:	4b05      	ldr	r3, [pc, #20]	@ (8001120 <SysTick_Config+0x40>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800110e:	4b04      	ldr	r3, [pc, #16]	@ (8001120 <SysTick_Config+0x40>)
 8001110:	2207      	movs	r2, #7
 8001112:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	e000e010 	.word	0xe000e010

08001124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff47 	bl	8000fc0 <__NVIC_SetPriorityGrouping>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001148:	f7ff ff5e 	bl	8001008 <__NVIC_GetPriorityGrouping>
 800114c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	68b9      	ldr	r1, [r7, #8]
 8001152:	6978      	ldr	r0, [r7, #20]
 8001154:	f7ff ff90 	bl	8001078 <NVIC_EncodePriority>
 8001158:	4602      	mov	r2, r0
 800115a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115e:	4611      	mov	r1, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff5f 	bl	8001024 <__NVIC_SetPriority>
}
 8001166:	bf00      	nop
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ffb2 	bl	80010e0 <SysTick_Config>
 800117c:	4603      	mov	r3, r0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001188:	b480      	push	{r7}
 800118a:	b087      	sub	sp, #28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001196:	e14c      	b.n	8001432 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	2101      	movs	r1, #1
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	fa01 f303 	lsl.w	r3, r1, r3
 80011a4:	4013      	ands	r3, r2
 80011a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 813e 	beq.w	800142c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d005      	beq.n	80011c8 <HAL_GPIO_Init+0x40>
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d130      	bne.n	800122a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	2203      	movs	r2, #3
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	68da      	ldr	r2, [r3, #12]
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011fe:	2201      	movs	r2, #1
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4013      	ands	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	091b      	lsrs	r3, r3, #4
 8001214:	f003 0201 	and.w	r2, r3, #1
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	2b03      	cmp	r3, #3
 8001234:	d017      	beq.n	8001266 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	2203      	movs	r2, #3
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	689a      	ldr	r2, [r3, #8]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d123      	bne.n	80012ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	08da      	lsrs	r2, r3, #3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3208      	adds	r2, #8
 800127a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800127e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	220f      	movs	r2, #15
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4013      	ands	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	691a      	ldr	r2, [r3, #16]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	08da      	lsrs	r2, r3, #3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3208      	adds	r2, #8
 80012b4:	6939      	ldr	r1, [r7, #16]
 80012b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	2203      	movs	r2, #3
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 0203 	and.w	r2, r3, #3
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 8098 	beq.w	800142c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80012fc:	4a54      	ldr	r2, [pc, #336]	@ (8001450 <HAL_GPIO_Init+0x2c8>)
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	089b      	lsrs	r3, r3, #2
 8001302:	3302      	adds	r3, #2
 8001304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001308:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	220f      	movs	r2, #15
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	4013      	ands	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001326:	d019      	beq.n	800135c <HAL_GPIO_Init+0x1d4>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a4a      	ldr	r2, [pc, #296]	@ (8001454 <HAL_GPIO_Init+0x2cc>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d013      	beq.n	8001358 <HAL_GPIO_Init+0x1d0>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a49      	ldr	r2, [pc, #292]	@ (8001458 <HAL_GPIO_Init+0x2d0>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d00d      	beq.n	8001354 <HAL_GPIO_Init+0x1cc>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a48      	ldr	r2, [pc, #288]	@ (800145c <HAL_GPIO_Init+0x2d4>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d007      	beq.n	8001350 <HAL_GPIO_Init+0x1c8>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a47      	ldr	r2, [pc, #284]	@ (8001460 <HAL_GPIO_Init+0x2d8>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d101      	bne.n	800134c <HAL_GPIO_Init+0x1c4>
 8001348:	2304      	movs	r3, #4
 800134a:	e008      	b.n	800135e <HAL_GPIO_Init+0x1d6>
 800134c:	2307      	movs	r3, #7
 800134e:	e006      	b.n	800135e <HAL_GPIO_Init+0x1d6>
 8001350:	2303      	movs	r3, #3
 8001352:	e004      	b.n	800135e <HAL_GPIO_Init+0x1d6>
 8001354:	2302      	movs	r3, #2
 8001356:	e002      	b.n	800135e <HAL_GPIO_Init+0x1d6>
 8001358:	2301      	movs	r3, #1
 800135a:	e000      	b.n	800135e <HAL_GPIO_Init+0x1d6>
 800135c:	2300      	movs	r3, #0
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	f002 0203 	and.w	r2, r2, #3
 8001364:	0092      	lsls	r2, r2, #2
 8001366:	4093      	lsls	r3, r2
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800136e:	4938      	ldr	r1, [pc, #224]	@ (8001450 <HAL_GPIO_Init+0x2c8>)
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	089b      	lsrs	r3, r3, #2
 8001374:	3302      	adds	r3, #2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800137c:	4b39      	ldr	r3, [pc, #228]	@ (8001464 <HAL_GPIO_Init+0x2dc>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	43db      	mvns	r3, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013a0:	4a30      	ldr	r2, [pc, #192]	@ (8001464 <HAL_GPIO_Init+0x2dc>)
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80013a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001464 <HAL_GPIO_Init+0x2dc>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013ca:	4a26      	ldr	r2, [pc, #152]	@ (8001464 <HAL_GPIO_Init+0x2dc>)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013d0:	4b24      	ldr	r3, [pc, #144]	@ (8001464 <HAL_GPIO_Init+0x2dc>)
 80013d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	43db      	mvns	r3, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001464 <HAL_GPIO_Init+0x2dc>)
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80013fe:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <HAL_GPIO_Init+0x2dc>)
 8001400:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	43db      	mvns	r3, r3
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001424:	4a0f      	ldr	r2, [pc, #60]	@ (8001464 <HAL_GPIO_Init+0x2dc>)
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	3301      	adds	r3, #1
 8001430:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	fa22 f303 	lsr.w	r3, r2, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	f47f aeab 	bne.w	8001198 <HAL_GPIO_Init+0x10>
  }
}
 8001442:	bf00      	nop
 8001444:	bf00      	nop
 8001446:	371c      	adds	r7, #28
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	40010000 	.word	0x40010000
 8001454:	48000400 	.word	0x48000400
 8001458:	48000800 	.word	0x48000800
 800145c:	48000c00 	.word	0x48000c00
 8001460:	48001000 	.word	0x48001000
 8001464:	58000800 	.word	0x58000800

08001468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	807b      	strh	r3, [r7, #2]
 8001474:	4613      	mov	r3, r2
 8001476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001478:	787b      	ldrb	r3, [r7, #1]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800147e:	887a      	ldrh	r2, [r7, #2]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001484:	e002      	b.n	800148c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001486:	887a      	ldrh	r2, [r7, #2]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800149c:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a04      	ldr	r2, [pc, #16]	@ (80014b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80014a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014a6:	6013      	str	r3, [r2, #0]
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	58000400 	.word	0x58000400

080014b8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80014bc:	4b04      	ldr	r3, [pc, #16]	@ (80014d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	58000400 	.word	0x58000400

080014d4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80014d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80014e6:	d101      	bne.n	80014ec <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80014e8:	2301      	movs	r3, #1
 80014ea:	e000      	b.n	80014ee <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80014fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001506:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800150a:	6013      	str	r3, [r2, #0]
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800151a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001524:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001528:	6013      	str	r3, [r2, #0]
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001542:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001546:	d101      	bne.n	800154c <LL_RCC_HSE_IsReady+0x18>
 8001548:	2301      	movs	r3, #1
 800154a:	e000      	b.n	800154e <LL_RCC_HSE_IsReady+0x1a>
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800155c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001566:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800156a:	6013      	str	r3, [r2, #0]
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800157a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001584:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001588:	6013      	str	r3, [r2, #0]
}
 800158a:	bf00      	nop
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001598:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015a6:	d101      	bne.n	80015ac <LL_RCC_HSI_IsReady+0x18>
 80015a8:	2301      	movs	r3, #1
 80015aa:	e000      	b.n	80015ae <LL_RCC_HSI_IsReady+0x1a>
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80015c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	061b      	lsls	r3, r3, #24
 80015ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015d2:	4313      	orrs	r3, r2
 80015d4:	604b      	str	r3, [r1, #4]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80015e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001608:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800160c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001610:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001614:	f023 0301 	bic.w	r3, r3, #1
 8001618:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800162a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800162e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b02      	cmp	r3, #2
 8001638:	d101      	bne.n	800163e <LL_RCC_HSI48_IsReady+0x18>
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <LL_RCC_HSI48_IsReady+0x1a>
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800164e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001656:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001670:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001678:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800167c:	f023 0301 	bic.w	r3, r3, #1
 8001680:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001692:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800169a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800169e:	f043 0304 	orr.w	r3, r3, #4
 80016a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80016b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016c0:	f023 0304 	bic.w	r3, r3, #4
 80016c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80016d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d101      	bne.n	80016ea <LL_RCC_LSE_IsReady+0x18>
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <LL_RCC_LSE_IsReady+0x1a>
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80016fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001702:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800171c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001720:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001724:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001728:	f023 0301 	bic.w	r3, r3, #1
 800172c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800173e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001742:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b02      	cmp	r3, #2
 800174c:	d101      	bne.n	8001752 <LL_RCC_LSI1_IsReady+0x18>
 800174e:	2301      	movs	r3, #1
 8001750:	e000      	b.n	8001754 <LL_RCC_LSI1_IsReady+0x1a>
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001762:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001766:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800176a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800176e:	f043 0304 	orr.w	r3, r3, #4
 8001772:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001784:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001788:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800178c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001790:	f023 0304 	bic.w	r3, r3, #4
 8001794:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80017a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d101      	bne.n	80017ba <LL_RCC_LSI2_IsReady+0x18>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <LL_RCC_LSI2_IsReady+0x1a>
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80017ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017d6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	021b      	lsls	r3, r3, #8
 80017de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80017e2:	4313      	orrs	r3, r2
 80017e4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80017f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6013      	str	r3, [r2, #0]
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001816:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001820:	f023 0301 	bic.w	r3, r3, #1
 8001824:	6013      	str	r3, [r2, #0]
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001834:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b02      	cmp	r3, #2
 8001840:	d101      	bne.n	8001846 <LL_RCC_MSI_IsReady+0x16>
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <LL_RCC_MSI_IsReady+0x18>
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800185a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001864:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4313      	orrs	r3, r2
 800186c:	600b      	str	r3, [r1, #0]
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001880:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800188a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2bb0      	cmp	r3, #176	@ 0xb0
 8001890:	d901      	bls.n	8001896 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001892:	23b0      	movs	r3, #176	@ 0xb0
 8001894:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001896:	687b      	ldr	r3, [r7, #4]
}
 8001898:	4618      	mov	r0, r3
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80018ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	021b      	lsls	r3, r3, #8
 80018ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018be:	4313      	orrs	r3, r2
 80018c0:	604b      	str	r3, [r1, #4]
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80018d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f023 0203 	bic.w	r2, r3, #3
 80018e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	608b      	str	r3, [r1, #8]
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80018fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 030c 	and.w	r3, r3, #12
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001916:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001920:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4313      	orrs	r3, r2
 8001928:	608b      	str	r3, [r1, #8]
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800193e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001942:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001946:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800194a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4313      	orrs	r3, r2
 8001952:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800196a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800196e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001972:	f023 020f 	bic.w	r2, r3, #15
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800197e:	4313      	orrs	r3, r2
 8001980:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001998:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	608b      	str	r3, [r1, #8]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80019c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80019ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	608b      	str	r3, [r1, #8]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80019e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80019fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a00:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001a04:	011b      	lsls	r3, r3, #4
 8001a06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001a18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001a30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001a48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a56:	6013      	str	r3, [r2, #0]
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001a66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a74:	6013      	str	r3, [r2, #0]
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001a84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001a92:	d101      	bne.n	8001a98 <LL_RCC_PLL_IsReady+0x18>
 8001a94:	2301      	movs	r3, #1
 8001a96:	e000      	b.n	8001a9a <LL_RCC_PLL_IsReady+0x1a>
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001aa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	0a1b      	lsrs	r3, r3, #8
 8001ab0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001ac2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001ada:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001af2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	f003 0303 	and.w	r3, r3, #3
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001b0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b18:	d101      	bne.n	8001b1e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001b2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b32:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001b3e:	d101      	bne.n	8001b44 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001b40:	2301      	movs	r3, #1
 8001b42:	e000      	b.n	8001b46 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001b54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b58:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001b5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b64:	d101      	bne.n	8001b6a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001b7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001b88:	d101      	bne.n	8001b8e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e000      	b.n	8001b90 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001b9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ba8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001bac:	d101      	bne.n	8001bb2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b08d      	sub	sp, #52	@ 0x34
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e363      	b.n	800229a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0320 	and.w	r3, r3, #32
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 808d 	beq.w	8001cfa <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001be0:	f7ff fe89 	bl	80018f6 <LL_RCC_GetSysClkSource>
 8001be4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001be6:	f7ff ff82 	bl	8001aee <LL_RCC_PLL_GetMainSource>
 8001bea:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d005      	beq.n	8001bfe <HAL_RCC_OscConfig+0x3e>
 8001bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bf4:	2b0c      	cmp	r3, #12
 8001bf6:	d147      	bne.n	8001c88 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d144      	bne.n	8001c88 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e347      	b.n	800229a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8001c0e:	f7ff fe34 	bl	800187a <LL_RCC_MSI_GetRange>
 8001c12:	4603      	mov	r3, r0
 8001c14:	429c      	cmp	r4, r3
 8001c16:	d914      	bls.n	8001c42 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f000 fd2f 	bl	8002680 <RCC_SetFlashLatencyFromMSIRange>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e336      	b.n	800229a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fe0e 	bl	8001852 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fe32 	bl	80018a4 <LL_RCC_MSI_SetCalibTrimming>
 8001c40:	e013      	b.n	8001c6a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fe03 	bl	8001852 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fe27 	bl	80018a4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 fd10 	bl	8002680 <RCC_SetFlashLatencyFromMSIRange>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e317      	b.n	800229a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001c6a:	f000 fcc9 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	4aa4      	ldr	r2, [pc, #656]	@ (8001f04 <HAL_RCC_OscConfig+0x344>)
 8001c72:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c74:	4ba4      	ldr	r3, [pc, #656]	@ (8001f08 <HAL_RCC_OscConfig+0x348>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff f917 	bl	8000eac <HAL_InitTick>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d039      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e308      	b.n	800229a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d01e      	beq.n	8001cce <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c90:	f7ff fdb0 	bl	80017f4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c94:	f7ff f958 	bl	8000f48 <HAL_GetTick>
 8001c98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c9c:	f7ff f954 	bl	8000f48 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e2f5      	b.n	800229a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001cae:	f7ff fdbf 	bl	8001830 <LL_RCC_MSI_IsReady>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0f1      	beq.n	8001c9c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fdc8 	bl	8001852 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fdec 	bl	80018a4 <LL_RCC_MSI_SetCalibTrimming>
 8001ccc:	e015      	b.n	8001cfa <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cce:	f7ff fda0 	bl	8001812 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cd2:	f7ff f939 	bl	8000f48 <HAL_GetTick>
 8001cd6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cda:	f7ff f935 	bl	8000f48 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e2d6      	b.n	800229a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001cec:	f7ff fda0 	bl	8001830 <LL_RCC_MSI_IsReady>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f1      	bne.n	8001cda <HAL_RCC_OscConfig+0x11a>
 8001cf6:	e000      	b.n	8001cfa <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001cf8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d047      	beq.n	8001d96 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d06:	f7ff fdf6 	bl	80018f6 <LL_RCC_GetSysClkSource>
 8001d0a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d0c:	f7ff feef 	bl	8001aee <LL_RCC_PLL_GetMainSource>
 8001d10:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001d12:	6a3b      	ldr	r3, [r7, #32]
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d005      	beq.n	8001d24 <HAL_RCC_OscConfig+0x164>
 8001d18:	6a3b      	ldr	r3, [r7, #32]
 8001d1a:	2b0c      	cmp	r3, #12
 8001d1c:	d108      	bne.n	8001d30 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	d105      	bne.n	8001d30 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d134      	bne.n	8001d96 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e2b4      	b.n	800229a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d38:	d102      	bne.n	8001d40 <HAL_RCC_OscConfig+0x180>
 8001d3a:	f7ff fbdd 	bl	80014f8 <LL_RCC_HSE_Enable>
 8001d3e:	e001      	b.n	8001d44 <HAL_RCC_OscConfig+0x184>
 8001d40:	f7ff fbe9 	bl	8001516 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d012      	beq.n	8001d72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4c:	f7ff f8fc 	bl	8000f48 <HAL_GetTick>
 8001d50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d54:	f7ff f8f8 	bl	8000f48 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b64      	cmp	r3, #100	@ 0x64
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e299      	b.n	800229a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001d66:	f7ff fbe5 	bl	8001534 <LL_RCC_HSE_IsReady>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0f1      	beq.n	8001d54 <HAL_RCC_OscConfig+0x194>
 8001d70:	e011      	b.n	8001d96 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d72:	f7ff f8e9 	bl	8000f48 <HAL_GetTick>
 8001d76:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d7a:	f7ff f8e5 	bl	8000f48 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b64      	cmp	r3, #100	@ 0x64
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e286      	b.n	800229a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001d8c:	f7ff fbd2 	bl	8001534 <LL_RCC_HSE_IsReady>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f1      	bne.n	8001d7a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d04c      	beq.n	8001e3c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001da2:	f7ff fda8 	bl	80018f6 <LL_RCC_GetSysClkSource>
 8001da6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001da8:	f7ff fea1 	bl	8001aee <LL_RCC_PLL_GetMainSource>
 8001dac:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d005      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x200>
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	2b0c      	cmp	r3, #12
 8001db8:	d10e      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d10b      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e266      	b.n	800229a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff fbf1 	bl	80015b8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001dd6:	e031      	b.n	8001e3c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d019      	beq.n	8001e14 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001de0:	f7ff fbba 	bl	8001558 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7ff f8b0 	bl	8000f48 <HAL_GetTick>
 8001de8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dec:	f7ff f8ac 	bl	8000f48 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e24d      	b.n	800229a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001dfe:	f7ff fbc9 	bl	8001594 <LL_RCC_HSI_IsReady>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f1      	beq.n	8001dec <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fbd3 	bl	80015b8 <LL_RCC_HSI_SetCalibTrimming>
 8001e12:	e013      	b.n	8001e3c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e14:	f7ff fbaf 	bl	8001576 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e18:	f7ff f896 	bl	8000f48 <HAL_GetTick>
 8001e1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e20:	f7ff f892 	bl	8000f48 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e233      	b.n	800229a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001e32:	f7ff fbaf 	bl	8001594 <LL_RCC_HSI_IsReady>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1f1      	bne.n	8001e20 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d106      	bne.n	8001e56 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 80a3 	beq.w	8001f9c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d076      	beq.n	8001f4c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0310 	and.w	r3, r3, #16
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d046      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001e6a:	f7ff fc66 	bl	800173a <LL_RCC_LSI1_IsReady>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d113      	bne.n	8001e9c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001e74:	f7ff fc3f 	bl	80016f6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e78:	f7ff f866 	bl	8000f48 <HAL_GetTick>
 8001e7c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001e80:	f7ff f862 	bl	8000f48 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e203      	b.n	800229a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001e92:	f7ff fc52 	bl	800173a <LL_RCC_LSI1_IsReady>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0f1      	beq.n	8001e80 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001e9c:	f7ff fc5f 	bl	800175e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea0:	f7ff f852 	bl	8000f48 <HAL_GetTick>
 8001ea4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001ea8:	f7ff f84e 	bl	8000f48 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e1ef      	b.n	800229a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001eba:	f7ff fc72 	bl	80017a2 <LL_RCC_LSI2_IsReady>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0f1      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fc7c 	bl	80017c6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001ece:	f7ff fc23 	bl	8001718 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed2:	f7ff f839 	bl	8000f48 <HAL_GetTick>
 8001ed6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001eda:	f7ff f835 	bl	8000f48 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e1d6      	b.n	800229a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001eec:	f7ff fc25 	bl	800173a <LL_RCC_LSI1_IsReady>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f1      	bne.n	8001eda <HAL_RCC_OscConfig+0x31a>
 8001ef6:	e051      	b.n	8001f9c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001ef8:	f7ff fbfd 	bl	80016f6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efc:	f7ff f824 	bl	8000f48 <HAL_GetTick>
 8001f00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001f02:	e00c      	b.n	8001f1e <HAL_RCC_OscConfig+0x35e>
 8001f04:	20000008 	.word	0x20000008
 8001f08:	2000001c 	.word	0x2000001c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f0c:	f7ff f81c 	bl	8000f48 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e1bd      	b.n	800229a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001f1e:	f7ff fc0c 	bl	800173a <LL_RCC_LSI1_IsReady>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0f1      	beq.n	8001f0c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001f28:	f7ff fc2a 	bl	8001780 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001f2e:	f7ff f80b 	bl	8000f48 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e1ac      	b.n	800229a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001f40:	f7ff fc2f 	bl	80017a2 <LL_RCC_LSI2_IsReady>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f1      	bne.n	8001f2e <HAL_RCC_OscConfig+0x36e>
 8001f4a:	e027      	b.n	8001f9c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001f4c:	f7ff fc18 	bl	8001780 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f50:	f7fe fffa 	bl	8000f48 <HAL_GetTick>
 8001f54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001f58:	f7fe fff6 	bl	8000f48 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e197      	b.n	800229a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001f6a:	f7ff fc1a 	bl	80017a2 <LL_RCC_LSI2_IsReady>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1f1      	bne.n	8001f58 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001f74:	f7ff fbd0 	bl	8001718 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f78:	f7fe ffe6 	bl	8000f48 <HAL_GetTick>
 8001f7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f80:	f7fe ffe2 	bl	8000f48 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e183      	b.n	800229a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001f92:	f7ff fbd2 	bl	800173a <LL_RCC_LSI1_IsReady>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f1      	bne.n	8001f80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d05b      	beq.n	8002060 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fa8:	4ba7      	ldr	r3, [pc, #668]	@ (8002248 <HAL_RCC_OscConfig+0x688>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d114      	bne.n	8001fde <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001fb4:	f7ff fa70 	bl	8001498 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb8:	f7fe ffc6 	bl	8000f48 <HAL_GetTick>
 8001fbc:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc0:	f7fe ffc2 	bl	8000f48 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e163      	b.n	800229a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fd2:	4b9d      	ldr	r3, [pc, #628]	@ (8002248 <HAL_RCC_OscConfig+0x688>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d102      	bne.n	8001fec <HAL_RCC_OscConfig+0x42c>
 8001fe6:	f7ff fb30 	bl	800164a <LL_RCC_LSE_Enable>
 8001fea:	e00c      	b.n	8002006 <HAL_RCC_OscConfig+0x446>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b05      	cmp	r3, #5
 8001ff2:	d104      	bne.n	8001ffe <HAL_RCC_OscConfig+0x43e>
 8001ff4:	f7ff fb4b 	bl	800168e <LL_RCC_LSE_EnableBypass>
 8001ff8:	f7ff fb27 	bl	800164a <LL_RCC_LSE_Enable>
 8001ffc:	e003      	b.n	8002006 <HAL_RCC_OscConfig+0x446>
 8001ffe:	f7ff fb35 	bl	800166c <LL_RCC_LSE_Disable>
 8002002:	f7ff fb55 	bl	80016b0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d014      	beq.n	8002038 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200e:	f7fe ff9b 	bl	8000f48 <HAL_GetTick>
 8002012:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002014:	e00a      	b.n	800202c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002016:	f7fe ff97 	bl	8000f48 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002024:	4293      	cmp	r3, r2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e136      	b.n	800229a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800202c:	f7ff fb51 	bl	80016d2 <LL_RCC_LSE_IsReady>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0ef      	beq.n	8002016 <HAL_RCC_OscConfig+0x456>
 8002036:	e013      	b.n	8002060 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002038:	f7fe ff86 	bl	8000f48 <HAL_GetTick>
 800203c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800203e:	e00a      	b.n	8002056 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002040:	f7fe ff82 	bl	8000f48 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e121      	b.n	800229a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002056:	f7ff fb3c 	bl	80016d2 <LL_RCC_LSE_IsReady>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1ef      	bne.n	8002040 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002068:	2b00      	cmp	r3, #0
 800206a:	d02c      	beq.n	80020c6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002070:	2b00      	cmp	r3, #0
 8002072:	d014      	beq.n	800209e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002074:	f7ff fab5 	bl	80015e2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002078:	f7fe ff66 	bl	8000f48 <HAL_GetTick>
 800207c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002080:	f7fe ff62 	bl	8000f48 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e103      	b.n	800229a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002092:	f7ff fac8 	bl	8001626 <LL_RCC_HSI48_IsReady>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f1      	beq.n	8002080 <HAL_RCC_OscConfig+0x4c0>
 800209c:	e013      	b.n	80020c6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800209e:	f7ff fab1 	bl	8001604 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a2:	f7fe ff51 	bl	8000f48 <HAL_GetTick>
 80020a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020aa:	f7fe ff4d 	bl	8000f48 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e0ee      	b.n	800229a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80020bc:	f7ff fab3 	bl	8001626 <LL_RCC_HSI48_IsReady>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f1      	bne.n	80020aa <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 80e4 	beq.w	8002298 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020d0:	f7ff fc11 	bl	80018f6 <LL_RCC_GetSysClkSource>
 80020d4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80020d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	f040 80b4 	bne.w	8002250 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 0203 	and.w	r2, r3, #3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d123      	bne.n	800213e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002100:	429a      	cmp	r2, r3
 8002102:	d11c      	bne.n	800213e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	0a1b      	lsrs	r3, r3, #8
 8002108:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002110:	429a      	cmp	r2, r3
 8002112:	d114      	bne.n	800213e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800211e:	429a      	cmp	r2, r3
 8002120:	d10d      	bne.n	800213e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800212c:	429a      	cmp	r2, r3
 800212e:	d106      	bne.n	800213e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800213a:	429a      	cmp	r2, r3
 800213c:	d05d      	beq.n	80021fa <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	2b0c      	cmp	r3, #12
 8002142:	d058      	beq.n	80021f6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002144:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e0a1      	b.n	800229a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002156:	f7ff fc84 	bl	8001a62 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800215a:	f7fe fef5 	bl	8000f48 <HAL_GetTick>
 800215e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002162:	f7fe fef1 	bl	8000f48 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e092      	b.n	800229a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002174:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1ef      	bne.n	8002162 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002182:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	4b30      	ldr	r3, [pc, #192]	@ (800224c <HAL_RCC_OscConfig+0x68c>)
 800218a:	4013      	ands	r3, r2
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002194:	4311      	orrs	r1, r2
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800219a:	0212      	lsls	r2, r2, #8
 800219c:	4311      	orrs	r1, r2
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80021a2:	4311      	orrs	r1, r2
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80021a8:	4311      	orrs	r1, r2
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80021ae:	430a      	orrs	r2, r1
 80021b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021b4:	4313      	orrs	r3, r2
 80021b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021b8:	f7ff fc44 	bl	8001a44 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021cc:	f7fe febc 	bl	8000f48 <HAL_GetTick>
 80021d0:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d4:	f7fe feb8 	bl	8000f48 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e059      	b.n	800229a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0ef      	beq.n	80021d4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021f4:	e050      	b.n	8002298 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e04f      	b.n	800229a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d147      	bne.n	8002298 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002208:	f7ff fc1c 	bl	8001a44 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800220c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002216:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800221a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800221c:	f7fe fe94 	bl	8000f48 <HAL_GetTick>
 8002220:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002224:	f7fe fe90 	bl	8000f48 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e031      	b.n	800229a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002236:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0ef      	beq.n	8002224 <HAL_RCC_OscConfig+0x664>
 8002244:	e028      	b.n	8002298 <HAL_RCC_OscConfig+0x6d8>
 8002246:	bf00      	nop
 8002248:	58000400 	.word	0x58000400
 800224c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	2b0c      	cmp	r3, #12
 8002254:	d01e      	beq.n	8002294 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002256:	f7ff fc04 	bl	8001a62 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225a:	f7fe fe75 	bl	8000f48 <HAL_GetTick>
 800225e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002262:	f7fe fe71 	bl	8000f48 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e012      	b.n	800229a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002274:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1ef      	bne.n	8002262 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002282:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800228c:	4b05      	ldr	r3, [pc, #20]	@ (80022a4 <HAL_RCC_OscConfig+0x6e4>)
 800228e:	4013      	ands	r3, r2
 8002290:	60cb      	str	r3, [r1, #12]
 8002292:	e001      	b.n	8002298 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3734      	adds	r7, #52	@ 0x34
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd90      	pop	{r4, r7, pc}
 80022a2:	bf00      	nop
 80022a4:	eefefffc 	.word	0xeefefffc

080022a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e12d      	b.n	8002518 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022bc:	4b98      	ldr	r3, [pc, #608]	@ (8002520 <HAL_RCC_ClockConfig+0x278>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d91b      	bls.n	8002302 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ca:	4b95      	ldr	r3, [pc, #596]	@ (8002520 <HAL_RCC_ClockConfig+0x278>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f023 0207 	bic.w	r2, r3, #7
 80022d2:	4993      	ldr	r1, [pc, #588]	@ (8002520 <HAL_RCC_ClockConfig+0x278>)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022da:	f7fe fe35 	bl	8000f48 <HAL_GetTick>
 80022de:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80022e2:	f7fe fe31 	bl	8000f48 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e111      	b.n	8002518 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f4:	4b8a      	ldr	r3, [pc, #552]	@ (8002520 <HAL_RCC_ClockConfig+0x278>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d1ef      	bne.n	80022e2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d016      	beq.n	800233c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff fafb 	bl	800190e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002318:	f7fe fe16 	bl	8000f48 <HAL_GetTick>
 800231c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800231e:	e008      	b.n	8002332 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002320:	f7fe fe12 	bl	8000f48 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e0f2      	b.n	8002518 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002332:	f7ff fbe8 	bl	8001b06 <LL_RCC_IsActiveFlag_HPRE>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f1      	beq.n	8002320 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0320 	and.w	r3, r3, #32
 8002344:	2b00      	cmp	r3, #0
 8002346:	d016      	beq.n	8002376 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff faf2 	bl	8001936 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002352:	f7fe fdf9 	bl	8000f48 <HAL_GetTick>
 8002356:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002358:	e008      	b.n	800236c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800235a:	f7fe fdf5 	bl	8000f48 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e0d5      	b.n	8002518 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800236c:	f7ff fbdd 	bl	8001b2a <LL_RCC_IsActiveFlag_C2HPRE>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f1      	beq.n	800235a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800237e:	2b00      	cmp	r3, #0
 8002380:	d016      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff faeb 	bl	8001962 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800238c:	f7fe fddc 	bl	8000f48 <HAL_GetTick>
 8002390:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002394:	f7fe fdd8 	bl	8000f48 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e0b8      	b.n	8002518 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80023a6:	f7ff fbd3 	bl	8001b50 <LL_RCC_IsActiveFlag_SHDHPRE>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f1      	beq.n	8002394 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d016      	beq.n	80023ea <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fae5 	bl	8001990 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023c6:	f7fe fdbf 	bl	8000f48 <HAL_GetTick>
 80023ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023ce:	f7fe fdbb 	bl	8000f48 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e09b      	b.n	8002518 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80023e0:	f7ff fbc9 	bl	8001b76 <LL_RCC_IsActiveFlag_PPRE1>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0f1      	beq.n	80023ce <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d017      	beq.n	8002426 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff fadb 	bl	80019b8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002402:	f7fe fda1 	bl	8000f48 <HAL_GetTick>
 8002406:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002408:	e008      	b.n	800241c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800240a:	f7fe fd9d 	bl	8000f48 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d901      	bls.n	800241c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e07d      	b.n	8002518 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800241c:	f7ff fbbd 	bl	8001b9a <LL_RCC_IsActiveFlag_PPRE2>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0f1      	beq.n	800240a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d043      	beq.n	80024ba <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d106      	bne.n	8002448 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800243a:	f7ff f87b 	bl	8001534 <LL_RCC_HSE_IsReady>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d11e      	bne.n	8002482 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e067      	b.n	8002518 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b03      	cmp	r3, #3
 800244e:	d106      	bne.n	800245e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002450:	f7ff fb16 	bl	8001a80 <LL_RCC_PLL_IsReady>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d113      	bne.n	8002482 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e05c      	b.n	8002518 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002466:	f7ff f9e3 	bl	8001830 <LL_RCC_MSI_IsReady>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d108      	bne.n	8002482 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e051      	b.n	8002518 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002474:	f7ff f88e 	bl	8001594 <LL_RCC_HSI_IsReady>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e04a      	b.n	8002518 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fa21 	bl	80018ce <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800248c:	f7fe fd5c 	bl	8000f48 <HAL_GetTick>
 8002490:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002492:	e00a      	b.n	80024aa <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002494:	f7fe fd58 	bl	8000f48 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e036      	b.n	8002518 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024aa:	f7ff fa24 	bl	80018f6 <LL_RCC_GetSysClkSource>
 80024ae:	4602      	mov	r2, r0
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d1ec      	bne.n	8002494 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024ba:	4b19      	ldr	r3, [pc, #100]	@ (8002520 <HAL_RCC_ClockConfig+0x278>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d21b      	bcs.n	8002500 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c8:	4b15      	ldr	r3, [pc, #84]	@ (8002520 <HAL_RCC_ClockConfig+0x278>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f023 0207 	bic.w	r2, r3, #7
 80024d0:	4913      	ldr	r1, [pc, #76]	@ (8002520 <HAL_RCC_ClockConfig+0x278>)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d8:	f7fe fd36 	bl	8000f48 <HAL_GetTick>
 80024dc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80024e0:	f7fe fd32 	bl	8000f48 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e012      	b.n	8002518 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002520 <HAL_RCC_ClockConfig+0x278>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d1ef      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002500:	f000 f87e 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 8002504:	4603      	mov	r3, r0
 8002506:	4a07      	ldr	r2, [pc, #28]	@ (8002524 <HAL_RCC_ClockConfig+0x27c>)
 8002508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800250a:	f7fe fd29 	bl	8000f60 <HAL_GetTickPrio>
 800250e:	4603      	mov	r3, r0
 8002510:	4618      	mov	r0, r3
 8002512:	f7fe fccb 	bl	8000eac <HAL_InitTick>
 8002516:	4603      	mov	r3, r0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	58004000 	.word	0x58004000
 8002524:	20000008 	.word	0x20000008

08002528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002528:	b590      	push	{r4, r7, lr}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800252e:	f7ff f9e2 	bl	80018f6 <LL_RCC_GetSysClkSource>
 8002532:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10a      	bne.n	8002550 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800253a:	f7ff f99e 	bl	800187a <LL_RCC_MSI_GetRange>
 800253e:	4603      	mov	r3, r0
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	4a2b      	ldr	r2, [pc, #172]	@ (80025f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	e04b      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b04      	cmp	r3, #4
 8002554:	d102      	bne.n	800255c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002556:	4b28      	ldr	r3, [pc, #160]	@ (80025f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	e045      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b08      	cmp	r3, #8
 8002560:	d10a      	bne.n	8002578 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002562:	f7fe ffb7 	bl	80014d4 <LL_RCC_HSE_IsEnabledDiv2>
 8002566:	4603      	mov	r3, r0
 8002568:	2b01      	cmp	r3, #1
 800256a:	d102      	bne.n	8002572 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800256c:	4b22      	ldr	r3, [pc, #136]	@ (80025f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	e03a      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002572:	4b22      	ldr	r3, [pc, #136]	@ (80025fc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	e037      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002578:	f7ff fab9 	bl	8001aee <LL_RCC_PLL_GetMainSource>
 800257c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d003      	beq.n	800258c <HAL_RCC_GetSysClockFreq+0x64>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	2b03      	cmp	r3, #3
 8002588:	d003      	beq.n	8002592 <HAL_RCC_GetSysClockFreq+0x6a>
 800258a:	e00d      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800258c:	4b1a      	ldr	r3, [pc, #104]	@ (80025f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800258e:	60bb      	str	r3, [r7, #8]
        break;
 8002590:	e015      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002592:	f7fe ff9f 	bl	80014d4 <LL_RCC_HSE_IsEnabledDiv2>
 8002596:	4603      	mov	r3, r0
 8002598:	2b01      	cmp	r3, #1
 800259a:	d102      	bne.n	80025a2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800259c:	4b16      	ldr	r3, [pc, #88]	@ (80025f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800259e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80025a0:	e00d      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80025a2:	4b16      	ldr	r3, [pc, #88]	@ (80025fc <HAL_RCC_GetSysClockFreq+0xd4>)
 80025a4:	60bb      	str	r3, [r7, #8]
        break;
 80025a6:	e00a      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80025a8:	f7ff f967 	bl	800187a <LL_RCC_MSI_GetRange>
 80025ac:	4603      	mov	r3, r0
 80025ae:	091b      	lsrs	r3, r3, #4
 80025b0:	f003 030f 	and.w	r3, r3, #15
 80025b4:	4a0f      	ldr	r2, [pc, #60]	@ (80025f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80025b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ba:	60bb      	str	r3, [r7, #8]
        break;
 80025bc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80025be:	f7ff fa71 	bl	8001aa4 <LL_RCC_PLL_GetN>
 80025c2:	4602      	mov	r2, r0
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	fb03 f402 	mul.w	r4, r3, r2
 80025ca:	f7ff fa84 	bl	8001ad6 <LL_RCC_PLL_GetDivider>
 80025ce:	4603      	mov	r3, r0
 80025d0:	091b      	lsrs	r3, r3, #4
 80025d2:	3301      	adds	r3, #1
 80025d4:	fbb4 f4f3 	udiv	r4, r4, r3
 80025d8:	f7ff fa71 	bl	8001abe <LL_RCC_PLL_GetR>
 80025dc:	4603      	mov	r3, r0
 80025de:	0f5b      	lsrs	r3, r3, #29
 80025e0:	3301      	adds	r3, #1
 80025e2:	fbb4 f3f3 	udiv	r3, r4, r3
 80025e6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80025e8:	68fb      	ldr	r3, [r7, #12]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd90      	pop	{r4, r7, pc}
 80025f2:	bf00      	nop
 80025f4:	08005444 	.word	0x08005444
 80025f8:	00f42400 	.word	0x00f42400
 80025fc:	01e84800 	.word	0x01e84800

08002600 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002600:	b598      	push	{r3, r4, r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002604:	f7ff ff90 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 8002608:	4604      	mov	r4, r0
 800260a:	f7ff f9e9 	bl	80019e0 <LL_RCC_GetAHBPrescaler>
 800260e:	4603      	mov	r3, r0
 8002610:	091b      	lsrs	r3, r3, #4
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	4a03      	ldr	r2, [pc, #12]	@ (8002624 <HAL_RCC_GetHCLKFreq+0x24>)
 8002618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002620:	4618      	mov	r0, r3
 8002622:	bd98      	pop	{r3, r4, r7, pc}
 8002624:	080053e4 	.word	0x080053e4

08002628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002628:	b598      	push	{r3, r4, r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800262c:	f7ff ffe8 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 8002630:	4604      	mov	r4, r0
 8002632:	f7ff f9ef 	bl	8001a14 <LL_RCC_GetAPB1Prescaler>
 8002636:	4603      	mov	r3, r0
 8002638:	0a1b      	lsrs	r3, r3, #8
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	4a04      	ldr	r2, [pc, #16]	@ (8002650 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002644:	f003 031f 	and.w	r3, r3, #31
 8002648:	fa24 f303 	lsr.w	r3, r4, r3
}
 800264c:	4618      	mov	r0, r3
 800264e:	bd98      	pop	{r3, r4, r7, pc}
 8002650:	08005424 	.word	0x08005424

08002654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002654:	b598      	push	{r3, r4, r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002658:	f7ff ffd2 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 800265c:	4604      	mov	r4, r0
 800265e:	f7ff f9e5 	bl	8001a2c <LL_RCC_GetAPB2Prescaler>
 8002662:	4603      	mov	r3, r0
 8002664:	0adb      	lsrs	r3, r3, #11
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	4a04      	ldr	r2, [pc, #16]	@ (800267c <HAL_RCC_GetPCLK2Freq+0x28>)
 800266c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002670:	f003 031f 	and.w	r3, r3, #31
 8002674:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002678:	4618      	mov	r0, r3
 800267a:	bd98      	pop	{r3, r4, r7, pc}
 800267c:	08005424 	.word	0x08005424

08002680 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002680:	b590      	push	{r4, r7, lr}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2bb0      	cmp	r3, #176	@ 0xb0
 800268c:	d903      	bls.n	8002696 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800268e:	4b15      	ldr	r3, [pc, #84]	@ (80026e4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	e007      	b.n	80026a6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	4a11      	ldr	r2, [pc, #68]	@ (80026e4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80026a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80026a6:	f7ff f9a7 	bl	80019f8 <LL_RCC_GetAHB4Prescaler>
 80026aa:	4603      	mov	r3, r0
 80026ac:	091b      	lsrs	r3, r3, #4
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	4a0d      	ldr	r2, [pc, #52]	@ (80026e8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80026b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80026be:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	4a0a      	ldr	r2, [pc, #40]	@ (80026ec <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80026c4:	fba2 2303 	umull	r2, r3, r2, r3
 80026c8:	0c9c      	lsrs	r4, r3, #18
 80026ca:	f7fe fef5 	bl	80014b8 <HAL_PWREx_GetVoltageRange>
 80026ce:	4603      	mov	r3, r0
 80026d0:	4619      	mov	r1, r3
 80026d2:	4620      	mov	r0, r4
 80026d4:	f000 f80c 	bl	80026f0 <RCC_SetFlashLatency>
 80026d8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd90      	pop	{r4, r7, pc}
 80026e2:	bf00      	nop
 80026e4:	08005444 	.word	0x08005444
 80026e8:	080053e4 	.word	0x080053e4
 80026ec:	431bde83 	.word	0x431bde83

080026f0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80026f0:	b590      	push	{r4, r7, lr}
 80026f2:	b093      	sub	sp, #76	@ 0x4c
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80026fa:	4b37      	ldr	r3, [pc, #220]	@ (80027d8 <RCC_SetFlashLatency+0xe8>)
 80026fc:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002700:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002702:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002706:	4a35      	ldr	r2, [pc, #212]	@ (80027dc <RCC_SetFlashLatency+0xec>)
 8002708:	f107 031c 	add.w	r3, r7, #28
 800270c:	ca07      	ldmia	r2, {r0, r1, r2}
 800270e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002712:	4b33      	ldr	r3, [pc, #204]	@ (80027e0 <RCC_SetFlashLatency+0xf0>)
 8002714:	f107 040c 	add.w	r4, r7, #12
 8002718:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800271a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800271e:	2300      	movs	r3, #0
 8002720:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002728:	d11a      	bne.n	8002760 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800272a:	2300      	movs	r3, #0
 800272c:	643b      	str	r3, [r7, #64]	@ 0x40
 800272e:	e013      	b.n	8002758 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002730:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	3348      	adds	r3, #72	@ 0x48
 8002736:	443b      	add	r3, r7
 8002738:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	429a      	cmp	r2, r3
 8002740:	d807      	bhi.n	8002752 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002742:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	3348      	adds	r3, #72	@ 0x48
 8002748:	443b      	add	r3, r7
 800274a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800274e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002750:	e020      	b.n	8002794 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002754:	3301      	adds	r3, #1
 8002756:	643b      	str	r3, [r7, #64]	@ 0x40
 8002758:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800275a:	2b03      	cmp	r3, #3
 800275c:	d9e8      	bls.n	8002730 <RCC_SetFlashLatency+0x40>
 800275e:	e019      	b.n	8002794 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002760:	2300      	movs	r3, #0
 8002762:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002764:	e013      	b.n	800278e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	3348      	adds	r3, #72	@ 0x48
 800276c:	443b      	add	r3, r7
 800276e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	429a      	cmp	r2, r3
 8002776:	d807      	bhi.n	8002788 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	3348      	adds	r3, #72	@ 0x48
 800277e:	443b      	add	r3, r7
 8002780:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002784:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002786:	e005      	b.n	8002794 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800278a:	3301      	adds	r3, #1
 800278c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800278e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002790:	2b02      	cmp	r3, #2
 8002792:	d9e8      	bls.n	8002766 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002794:	4b13      	ldr	r3, [pc, #76]	@ (80027e4 <RCC_SetFlashLatency+0xf4>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f023 0207 	bic.w	r2, r3, #7
 800279c:	4911      	ldr	r1, [pc, #68]	@ (80027e4 <RCC_SetFlashLatency+0xf4>)
 800279e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027a0:	4313      	orrs	r3, r2
 80027a2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80027a4:	f7fe fbd0 	bl	8000f48 <HAL_GetTick>
 80027a8:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80027aa:	e008      	b.n	80027be <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027ac:	f7fe fbcc 	bl	8000f48 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e007      	b.n	80027ce <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80027be:	4b09      	ldr	r3, [pc, #36]	@ (80027e4 <RCC_SetFlashLatency+0xf4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d1ef      	bne.n	80027ac <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	374c      	adds	r7, #76	@ 0x4c
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd90      	pop	{r4, r7, pc}
 80027d6:	bf00      	nop
 80027d8:	080053b8 	.word	0x080053b8
 80027dc:	080053c8 	.word	0x080053c8
 80027e0:	080053d4 	.word	0x080053d4
 80027e4:	58004000 	.word	0x58004000

080027e8 <LL_RCC_LSE_IsEnabled>:
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80027ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <LL_RCC_LSE_IsEnabled+0x18>
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <LL_RCC_LSE_IsEnabled+0x1a>
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <LL_RCC_LSE_IsReady>:
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002810:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b02      	cmp	r3, #2
 800281e:	d101      	bne.n	8002824 <LL_RCC_LSE_IsReady+0x18>
 8002820:	2301      	movs	r3, #1
 8002822:	e000      	b.n	8002826 <LL_RCC_LSE_IsReady+0x1a>
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <LL_RCC_SetRFWKPClockSource>:
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002838:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800283c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002840:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002844:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <LL_RCC_SetSMPSClockSource>:
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002864:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286a:	f023 0203 	bic.w	r2, r3, #3
 800286e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4313      	orrs	r3, r2
 8002876:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <LL_RCC_SetSMPSPrescaler>:
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800288c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002892:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002896:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4313      	orrs	r3, r2
 800289e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <LL_RCC_SetUSARTClockSource>:
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80028b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028bc:	f023 0203 	bic.w	r2, r3, #3
 80028c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <LL_RCC_SetLPUARTClockSource>:
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80028e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80028ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_RCC_SetI2CClockSource>:
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800290c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002910:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	091b      	lsrs	r3, r3, #4
 8002918:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800291c:	43db      	mvns	r3, r3
 800291e:	401a      	ands	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002928:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800292c:	4313      	orrs	r3, r2
 800292e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <LL_RCC_SetLPTIMClockSource>:
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002946:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800294a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	0c1b      	lsrs	r3, r3, #16
 8002952:	041b      	lsls	r3, r3, #16
 8002954:	43db      	mvns	r3, r3
 8002956:	401a      	ands	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	041b      	lsls	r3, r3, #16
 800295c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <LL_RCC_SetSAIClockSource>:
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800297a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002982:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002986:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4313      	orrs	r3, r2
 800298e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <LL_RCC_SetRNGClockSource>:
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80029a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ae:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80029b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <LL_RCC_SetCLK48ClockSource>:
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80029d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <LL_RCC_SetUSBClockSource>:
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7ff ffe3 	bl	80029ca <LL_RCC_SetCLK48ClockSource>
}
 8002a04:	bf00      	nop
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <LL_RCC_SetADCClockSource>:
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002a14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a1c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002a20:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <LL_RCC_SetRTCClockSource>:
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002a40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <LL_RCC_GetRTCClockSource>:
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002a68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <LL_RCC_ForceBackupDomainReset>:
{
 8002a7e:	b480      	push	{r7}
 8002a80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002a82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002a96:	bf00      	nop
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002aa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ab0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ab4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002ab8:	bf00      	nop
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <LL_RCC_PLLSAI1_Enable>:
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002ac6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ad0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ad4:	6013      	str	r3, [r2, #0]
}
 8002ad6:	bf00      	nop
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <LL_RCC_PLLSAI1_Disable>:
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002ae4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002aee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002af2:	6013      	str	r3, [r2, #0]
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <LL_RCC_PLLSAI1_IsReady>:
{
 8002afe:	b480      	push	{r7}
 8002b00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002b02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b10:	d101      	bne.n	8002b16 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b088      	sub	sp, #32
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002b2e:	2300      	movs	r3, #0
 8002b30:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d034      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b42:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002b46:	d021      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002b48:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002b4c:	d81b      	bhi.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b4e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002b52:	d01d      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002b54:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002b58:	d815      	bhi.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00b      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002b5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b62:	d110      	bne.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002b64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b72:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002b74:	e00d      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3304      	adds	r3, #4
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 f947 	bl	8002e0e <RCCEx_PLLSAI1_ConfigNP>
 8002b80:	4603      	mov	r3, r0
 8002b82:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002b84:	e005      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	77fb      	strb	r3, [r7, #31]
        break;
 8002b8a:	e002      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002b8c:	bf00      	nop
 8002b8e:	e000      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002b90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b92:	7ffb      	ldrb	r3, [r7, #31]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d105      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff fee8 	bl	8002972 <LL_RCC_SetSAIClockSource>
 8002ba2:	e001      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ba4:	7ffb      	ldrb	r3, [r7, #31]
 8002ba6:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d046      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002bb4:	f7ff ff56 	bl	8002a64 <LL_RCC_GetRTCClockSource>
 8002bb8:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d03c      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002bc4:	f7fe fc68 	bl	8001498 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d105      	bne.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff ff30 	bl	8002a38 <LL_RCC_SetRTCClockSource>
 8002bd8:	e02e      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002bda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002be4:	f7ff ff4b 	bl	8002a7e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002be8:	f7ff ff5a 	bl	8002aa0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002bfa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002c04:	f7ff fdf0 	bl	80027e8 <LL_RCC_LSE_IsEnabled>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d114      	bne.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c0e:	f7fe f99b 	bl	8000f48 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002c14:	e00b      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c16:	f7fe f997 	bl	8000f48 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d902      	bls.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	77fb      	strb	r3, [r7, #31]
              break;
 8002c2c:	e004      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002c2e:	f7ff fded 	bl	800280c <LL_RCC_LSE_IsReady>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d1ee      	bne.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002c38:	7ffb      	ldrb	r3, [r7, #31]
 8002c3a:	77bb      	strb	r3, [r7, #30]
 8002c3c:	e001      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c3e:	7ffb      	ldrb	r3, [r7, #31]
 8002c40:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d004      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fe2a 	bl	80028ac <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d004      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff fe35 	bl	80028d8 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0310 	and.w	r3, r3, #16
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d004      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff fe5d 	bl	800293e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d004      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff fe52 	bl	800293e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d004      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff fe2a 	bl	8002904 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d004      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff fe1f 	bl	8002904 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d022      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff fe8d 	bl	80029f6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ce0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ce4:	d107      	bne.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002ce6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cf0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cf4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cfa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002cfe:	d10b      	bne.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3304      	adds	r3, #4
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 f8dd 	bl	8002ec4 <RCCEx_PLLSAI1_ConfigNQ>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002d0e:	7ffb      	ldrb	r3, [r7, #31]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002d14:	7ffb      	ldrb	r3, [r7, #31]
 8002d16:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d02b      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d2c:	d008      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d36:	d003      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d105      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff fe2a 	bl	800299e <LL_RCC_SetRNGClockSource>
 8002d4a:	e00a      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	2000      	movs	r0, #0
 8002d58:	f7ff fe21 	bl	800299e <LL_RCC_SetRNGClockSource>
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f7ff fe34 	bl	80029ca <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d66:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8002d6a:	d107      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002d6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d022      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fe3d 	bl	8002a0c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d9a:	d107      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002d9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002da6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002daa:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002db4:	d10b      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3304      	adds	r3, #4
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 f8dd 	bl	8002f7a <RCCEx_PLLSAI1_ConfigNR>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002dc4:	7ffb      	ldrb	r3, [r7, #31]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8002dca:	7ffb      	ldrb	r3, [r7, #31]
 8002dcc:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d004      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff fd26 	bl	8002830 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d009      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff fd45 	bl	8002884 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff fd2c 	bl	800285c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8002e04:	7fbb      	ldrb	r3, [r7, #30]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3720      	adds	r7, #32
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b084      	sub	sp, #16
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002e1a:	f7ff fe61 	bl	8002ae0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002e1e:	f7fe f893 	bl	8000f48 <HAL_GetTick>
 8002e22:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002e24:	e009      	b.n	8002e3a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e26:	f7fe f88f 	bl	8000f48 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d902      	bls.n	8002e3a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	73fb      	strb	r3, [r7, #15]
      break;
 8002e38:	e004      	b.n	8002e44 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002e3a:	f7ff fe60 	bl	8002afe <LL_RCC_PLLSAI1_IsReady>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1f0      	bne.n	8002e26 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d137      	bne.n	8002eba <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002e4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	021b      	lsls	r3, r3, #8
 8002e5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002e62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e74:	4313      	orrs	r3, r2
 8002e76:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002e78:	f7ff fe23 	bl	8002ac2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e7c:	f7fe f864 	bl	8000f48 <HAL_GetTick>
 8002e80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002e82:	e009      	b.n	8002e98 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e84:	f7fe f860 	bl	8000f48 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d902      	bls.n	8002e98 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	73fb      	strb	r3, [r7, #15]
        break;
 8002e96:	e004      	b.n	8002ea2 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002e98:	f7ff fe31 	bl	8002afe <LL_RCC_PLLSAI1_IsReady>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d1f0      	bne.n	8002e84 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d108      	bne.n	8002eba <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002ea8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eac:	691a      	ldr	r2, [r3, #16]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002ed0:	f7ff fe06 	bl	8002ae0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002ed4:	f7fe f838 	bl	8000f48 <HAL_GetTick>
 8002ed8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002eda:	e009      	b.n	8002ef0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002edc:	f7fe f834 	bl	8000f48 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d902      	bls.n	8002ef0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	73fb      	strb	r3, [r7, #15]
      break;
 8002eee:	e004      	b.n	8002efa <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002ef0:	f7ff fe05 	bl	8002afe <LL_RCC_PLLSAI1_IsReady>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d137      	bne.n	8002f70 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002f00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	021b      	lsls	r3, r3, #8
 8002f10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f14:	4313      	orrs	r3, r2
 8002f16:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002f18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002f2e:	f7ff fdc8 	bl	8002ac2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f32:	f7fe f809 	bl	8000f48 <HAL_GetTick>
 8002f36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002f38:	e009      	b.n	8002f4e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f3a:	f7fe f805 	bl	8000f48 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d902      	bls.n	8002f4e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	73fb      	strb	r3, [r7, #15]
        break;
 8002f4c:	e004      	b.n	8002f58 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002f4e:	f7ff fdd6 	bl	8002afe <LL_RCC_PLLSAI1_IsReady>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d1f0      	bne.n	8002f3a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d108      	bne.n	8002f70 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002f5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b084      	sub	sp, #16
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002f86:	f7ff fdab 	bl	8002ae0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002f8a:	f7fd ffdd 	bl	8000f48 <HAL_GetTick>
 8002f8e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002f90:	e009      	b.n	8002fa6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f92:	f7fd ffd9 	bl	8000f48 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d902      	bls.n	8002fa6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa4:	e004      	b.n	8002fb0 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002fa6:	f7ff fdaa 	bl	8002afe <LL_RCC_PLLSAI1_IsReady>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1f0      	bne.n	8002f92 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d137      	bne.n	8003026 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002fb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	021b      	lsls	r3, r3, #8
 8002fc6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8002fce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002fe4:	f7ff fd6d 	bl	8002ac2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fe8:	f7fd ffae 	bl	8000f48 <HAL_GetTick>
 8002fec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002fee:	e009      	b.n	8003004 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ff0:	f7fd ffaa 	bl	8000f48 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d902      	bls.n	8003004 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	73fb      	strb	r3, [r7, #15]
        break;
 8003002:	e004      	b.n	800300e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003004:	f7ff fd7b 	bl	8002afe <LL_RCC_PLLSAI1_IsReady>
 8003008:	4603      	mov	r3, r0
 800300a:	2b01      	cmp	r3, #1
 800300c:	d1f0      	bne.n	8002ff0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d108      	bne.n	8003026 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003014:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003018:	691a      	ldr	r2, [r3, #16]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003022:	4313      	orrs	r3, r2
 8003024:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003026:	7bfb      	ldrb	r3, [r7, #15]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e095      	b.n	800316e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003046:	2b00      	cmp	r3, #0
 8003048:	d108      	bne.n	800305c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003052:	d009      	beq.n	8003068 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	61da      	str	r2, [r3, #28]
 800305a:	e005      	b.n	8003068 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d106      	bne.n	8003088 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7fd fc82 	bl	800098c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2202      	movs	r2, #2
 800308c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800309e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030a8:	d902      	bls.n	80030b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030aa:	2300      	movs	r3, #0
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	e002      	b.n	80030b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80030be:	d007      	beq.n	80030d0 <HAL_SPI_Init+0xa0>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030c8:	d002      	beq.n	80030d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003112:	ea42 0103 	orr.w	r1, r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	0c1b      	lsrs	r3, r3, #16
 800312c:	f003 0204 	and.w	r2, r3, #4
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003134:	f003 0310 	and.w	r3, r3, #16
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800314c:	ea42 0103 	orr.w	r1, r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	4613      	mov	r3, r2
 8003184:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b01      	cmp	r3, #1
 8003190:	d001      	beq.n	8003196 <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 8003192:	2302      	movs	r3, #2
 8003194:	e092      	b.n	80032bc <HAL_SPI_Receive_IT+0x144>
  }

  if ((pData == NULL) || (Size == 0U))
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d002      	beq.n	80031a2 <HAL_SPI_Receive_IT+0x2a>
 800319c:	88fb      	ldrh	r3, [r7, #6]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e08a      	b.n	80032bc <HAL_SPI_Receive_IT+0x144>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d110      	bne.n	80031d0 <HAL_SPI_Receive_IT+0x58>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031b6:	d10b      	bne.n	80031d0 <HAL_SPI_Receive_IT+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2204      	movs	r2, #4
 80031bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80031c0:	88fb      	ldrh	r3, [r7, #6]
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	68b9      	ldr	r1, [r7, #8]
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 f880 	bl	80032cc <HAL_SPI_TransmitReceive_IT>
 80031cc:	4603      	mov	r3, r0
 80031ce:	e075      	b.n	80032bc <HAL_SPI_Receive_IT+0x144>
  }


  /* Process Locked */
  __HAL_LOCK(hspi);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d101      	bne.n	80031de <HAL_SPI_Receive_IT+0x66>
 80031da:	2302      	movs	r3, #2
 80031dc:	e06e      	b.n	80032bc <HAL_SPI_Receive_IT+0x144>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2204      	movs	r2, #4
 80031ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	88fa      	ldrh	r2, [r7, #6]
 80031fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	88fa      	ldrh	r2, [r7, #6]
 8003206:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800322a:	d90b      	bls.n	8003244 <HAL_SPI_Receive_IT+0xcc>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800323a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4a21      	ldr	r2, [pc, #132]	@ (80032c4 <HAL_SPI_Receive_IT+0x14c>)
 8003240:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003242:	e00a      	b.n	800325a <HAL_SPI_Receive_IT+0xe2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003252:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4a1c      	ldr	r2, [pc, #112]	@ (80032c8 <HAL_SPI_Receive_IT+0x150>)
 8003258:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003262:	d10f      	bne.n	8003284 <HAL_SPI_Receive_IT+0x10c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003272:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003282:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800328e:	2b40      	cmp	r3, #64	@ 0x40
 8003290:	d007      	beq.n	80032a2 <HAL_SPI_Receive_IT+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032a0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80032b8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	080036af 	.word	0x080036af
 80032c8:	0800365f 	.word	0x0800365f

080032cc <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
 80032d8:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032e0:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032e8:	7dfb      	ldrb	r3, [r7, #23]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d00c      	beq.n	8003308 <HAL_SPI_TransmitReceive_IT+0x3c>
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032f4:	d106      	bne.n	8003304 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d102      	bne.n	8003304 <HAL_SPI_TransmitReceive_IT+0x38>
 80032fe:	7dfb      	ldrb	r3, [r7, #23]
 8003300:	2b04      	cmp	r3, #4
 8003302:	d001      	beq.n	8003308 <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003304:	2302      	movs	r3, #2
 8003306:	e07d      	b.n	8003404 <HAL_SPI_TransmitReceive_IT+0x138>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d005      	beq.n	800331a <HAL_SPI_TransmitReceive_IT+0x4e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <HAL_SPI_TransmitReceive_IT+0x4e>
 8003314:	887b      	ldrh	r3, [r7, #2]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e072      	b.n	8003404 <HAL_SPI_TransmitReceive_IT+0x138>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003324:	2b01      	cmp	r3, #1
 8003326:	d101      	bne.n	800332c <HAL_SPI_TransmitReceive_IT+0x60>
 8003328:	2302      	movs	r3, #2
 800332a:	e06b      	b.n	8003404 <HAL_SPI_TransmitReceive_IT+0x138>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b04      	cmp	r3, #4
 800333e:	d003      	beq.n	8003348 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2205      	movs	r2, #5
 8003344:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	887a      	ldrh	r2, [r7, #2]
 8003358:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	887a      	ldrh	r2, [r7, #2]
 800335e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	887a      	ldrh	r2, [r7, #2]
 800336a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	887a      	ldrh	r2, [r7, #2]
 8003372:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800337e:	d906      	bls.n	800338e <HAL_SPI_TransmitReceive_IT+0xc2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4a23      	ldr	r2, [pc, #140]	@ (8003410 <HAL_SPI_TransmitReceive_IT+0x144>)
 8003384:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4a22      	ldr	r2, [pc, #136]	@ (8003414 <HAL_SPI_TransmitReceive_IT+0x148>)
 800338a:	651a      	str	r2, [r3, #80]	@ 0x50
 800338c:	e005      	b.n	800339a <HAL_SPI_TransmitReceive_IT+0xce>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4a21      	ldr	r2, [pc, #132]	@ (8003418 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8003392:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4a21      	ldr	r2, [pc, #132]	@ (800341c <HAL_SPI_TransmitReceive_IT+0x150>)
 8003398:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80033a2:	d802      	bhi.n	80033aa <HAL_SPI_TransmitReceive_IT+0xde>
 80033a4:	887b      	ldrh	r3, [r7, #2]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d908      	bls.n	80033bc <HAL_SPI_TransmitReceive_IT+0xf0>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80033b8:	605a      	str	r2, [r3, #4]
 80033ba:	e007      	b.n	80033cc <HAL_SPI_TransmitReceive_IT+0x100>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80033ca:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d6:	2b40      	cmp	r3, #64	@ 0x40
 80033d8:	d007      	beq.n	80033ea <HAL_SPI_TransmitReceive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033e8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8003400:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	371c      	adds	r7, #28
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	08003599 	.word	0x08003599
 8003414:	080035ff 	.word	0x080035ff
 8003418:	08003449 	.word	0x08003449
 800341c:	08003507 	.word	0x08003507

08003420 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003456:	b29b      	uxth	r3, r3
 8003458:	2b01      	cmp	r3, #1
 800345a:	d923      	bls.n	80034a4 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003466:	b292      	uxth	r2, r2
 8003468:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346e:	1c9a      	adds	r2, r3, #2
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800347a:	b29b      	uxth	r3, r3
 800347c:	3b02      	subs	r3, #2
 800347e:	b29a      	uxth	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800348c:	b29b      	uxth	r3, r3
 800348e:	2b01      	cmp	r3, #1
 8003490:	d11f      	bne.n	80034d2 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80034a0:	605a      	str	r2, [r3, #4]
 80034a2:	e016      	b.n	80034d2 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f103 020c 	add.w	r2, r3, #12
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b0:	7812      	ldrb	r2, [r2, #0]
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10f      	bne.n	80034fe <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80034ec:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d102      	bne.n	80034fe <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 fabb 	bl	8003a74 <SPI_CloseRxTx_ISR>
    }
  }
}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003512:	b29b      	uxth	r3, r3
 8003514:	2b01      	cmp	r3, #1
 8003516:	d912      	bls.n	800353e <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800351c:	881a      	ldrh	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003528:	1c9a      	adds	r2, r3, #2
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003532:	b29b      	uxth	r3, r3
 8003534:	3b02      	subs	r3, #2
 8003536:	b29a      	uxth	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800353c:	e012      	b.n	8003564 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	330c      	adds	r3, #12
 8003548:	7812      	ldrb	r2, [r2, #0]
 800354a:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800355a:	b29b      	uxth	r3, r3
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003568:	b29b      	uxth	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d110      	bne.n	8003590 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800357c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003584:	b29b      	uxth	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d102      	bne.n	8003590 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 fa72 	bl	8003a74 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003590:	bf00      	nop
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035aa:	b292      	uxth	r2, r2
 80035ac:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b2:	1c9a      	adds	r2, r3, #2
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10f      	bne.n	80035f6 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035e4:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d102      	bne.n	80035f6 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 fa3f 	bl	8003a74 <SPI_CloseRxTx_ISR>
    }
  }
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b082      	sub	sp, #8
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800360a:	881a      	ldrh	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003616:	1c9a      	adds	r2, r3, #2
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003620:	b29b      	uxth	r3, r3
 8003622:	3b01      	subs	r3, #1
 8003624:	b29a      	uxth	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800362e:	b29b      	uxth	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d110      	bne.n	8003656 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003642:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800364a:	b29b      	uxth	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d102      	bne.n	8003656 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 fa0f 	bl	8003a74 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b082      	sub	sp, #8
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f103 020c 	add.w	r2, r3, #12
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003672:	7812      	ldrb	r2, [r2, #0]
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367c:	1c5a      	adds	r2, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003688:	b29b      	uxth	r3, r3
 800368a:	3b01      	subs	r3, #1
 800368c:	b29a      	uxth	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d102      	bne.n	80036a6 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 fa29 	bl	8003af8 <SPI_CloseRx_ISR>
  }
}
 80036a6:	bf00      	nop
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b082      	sub	sp, #8
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c0:	b292      	uxth	r2, r2
 80036c2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c8:	1c9a      	adds	r2, r3, #2
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b29a      	uxth	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d102      	bne.n	80036f2 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 fa03 	bl	8003af8 <SPI_CloseRx_ISR>
  }
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b088      	sub	sp, #32
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	603b      	str	r3, [r7, #0]
 8003708:	4613      	mov	r3, r2
 800370a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800370c:	f7fd fc1c 	bl	8000f48 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003714:	1a9b      	subs	r3, r3, r2
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	4413      	add	r3, r2
 800371a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800371c:	f7fd fc14 	bl	8000f48 <HAL_GetTick>
 8003720:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003722:	4b39      	ldr	r3, [pc, #228]	@ (8003808 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	015b      	lsls	r3, r3, #5
 8003728:	0d1b      	lsrs	r3, r3, #20
 800372a:	69fa      	ldr	r2, [r7, #28]
 800372c:	fb02 f303 	mul.w	r3, r2, r3
 8003730:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003732:	e054      	b.n	80037de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800373a:	d050      	beq.n	80037de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800373c:	f7fd fc04 	bl	8000f48 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	69fa      	ldr	r2, [r7, #28]
 8003748:	429a      	cmp	r2, r3
 800374a:	d902      	bls.n	8003752 <SPI_WaitFlagStateUntilTimeout+0x56>
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d13d      	bne.n	80037ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003760:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800376a:	d111      	bne.n	8003790 <SPI_WaitFlagStateUntilTimeout+0x94>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003774:	d004      	beq.n	8003780 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800377e:	d107      	bne.n	8003790 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800378e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003794:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003798:	d10f      	bne.n	80037ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e017      	b.n	80037fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	3b01      	subs	r3, #1
 80037dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4013      	ands	r3, r2
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	bf0c      	ite	eq
 80037ee:	2301      	moveq	r3, #1
 80037f0:	2300      	movne	r3, #0
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	461a      	mov	r2, r3
 80037f6:	79fb      	ldrb	r3, [r7, #7]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d19b      	bne.n	8003734 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3720      	adds	r7, #32
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	20000008 	.word	0x20000008

0800380c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08a      	sub	sp, #40	@ 0x28
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
 8003818:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800381a:	2300      	movs	r3, #0
 800381c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800381e:	f7fd fb93 	bl	8000f48 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003826:	1a9b      	subs	r3, r3, r2
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	4413      	add	r3, r2
 800382c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800382e:	f7fd fb8b 	bl	8000f48 <HAL_GetTick>
 8003832:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	330c      	adds	r3, #12
 800383a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800383c:	4b3d      	ldr	r3, [pc, #244]	@ (8003934 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	00da      	lsls	r2, r3, #3
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	0d1b      	lsrs	r3, r3, #20
 800384c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800384e:	fb02 f303 	mul.w	r3, r2, r3
 8003852:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003854:	e060      	b.n	8003918 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800385c:	d107      	bne.n	800386e <SPI_WaitFifoStateUntilTimeout+0x62>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d104      	bne.n	800386e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	b2db      	uxtb	r3, r3
 800386a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800386c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003874:	d050      	beq.n	8003918 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003876:	f7fd fb67 	bl	8000f48 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003882:	429a      	cmp	r2, r3
 8003884:	d902      	bls.n	800388c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003888:	2b00      	cmp	r3, #0
 800388a:	d13d      	bne.n	8003908 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800389a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038a4:	d111      	bne.n	80038ca <SPI_WaitFifoStateUntilTimeout+0xbe>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038ae:	d004      	beq.n	80038ba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038b8:	d107      	bne.n	80038ca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038d2:	d10f      	bne.n	80038f4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e010      	b.n	800392a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	3b01      	subs	r3, #1
 8003916:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	4013      	ands	r3, r2
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	429a      	cmp	r2, r3
 8003926:	d196      	bne.n	8003856 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3728      	adds	r7, #40	@ 0x28
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	20000008 	.word	0x20000008

08003938 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af02      	add	r7, sp, #8
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800394c:	d111      	bne.n	8003972 <SPI_EndRxTransaction+0x3a>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003956:	d004      	beq.n	8003962 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003960:	d107      	bne.n	8003972 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003970:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	2200      	movs	r2, #0
 800397a:	2180      	movs	r1, #128	@ 0x80
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f7ff febd 	bl	80036fc <SPI_WaitFlagStateUntilTimeout>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d007      	beq.n	8003998 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800398c:	f043 0220 	orr.w	r2, r3, #32
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e023      	b.n	80039e0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039a0:	d11d      	bne.n	80039de <SPI_EndRxTransaction+0xa6>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039aa:	d004      	beq.n	80039b6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039b4:	d113      	bne.n	80039de <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2200      	movs	r2, #0
 80039be:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f7ff ff22 	bl	800380c <SPI_WaitFifoStateUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d007      	beq.n	80039de <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d2:	f043 0220 	orr.w	r2, r3, #32
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e000      	b.n	80039e0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af02      	add	r7, sp, #8
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f7ff ff03 	bl	800380c <SPI_WaitFifoStateUntilTimeout>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d007      	beq.n	8003a1c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a10:	f043 0220 	orr.w	r2, r3, #32
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e027      	b.n	8003a6c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2200      	movs	r2, #0
 8003a24:	2180      	movs	r1, #128	@ 0x80
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f7ff fe68 	bl	80036fc <SPI_WaitFlagStateUntilTimeout>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d007      	beq.n	8003a42 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a36:	f043 0220 	orr.w	r2, r3, #32
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e014      	b.n	8003a6c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f7ff fedc 	bl	800380c <SPI_WaitFifoStateUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d007      	beq.n	8003a6a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a5e:	f043 0220 	orr.w	r2, r3, #32
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e000      	b.n	8003a6c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a7c:	f7fd fa64 	bl	8000f48 <HAL_GetTick>
 8003a80:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0220 	bic.w	r2, r2, #32
 8003a90:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	2164      	movs	r1, #100	@ 0x64
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7ff ffa6 	bl	80039e8 <SPI_EndRxTxTransaction>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d005      	beq.n	8003aae <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aa6:	f043 0220 	orr.w	r2, r3, #32
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d115      	bne.n	8003ae2 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d107      	bne.n	8003ad2 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7fc fee2 	bl	8000894 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003ad0:	e00e      	b.n	8003af0 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7ff fca0 	bl	8003420 <HAL_SPI_TxRxCpltCallback>
}
 8003ae0:	e006      	b.n	8003af0 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7ff fca2 	bl	8003434 <HAL_SPI_ErrorCallback>
}
 8003af0:	bf00      	nop
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003b0e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003b10:	f7fd fa1a 	bl	8000f48 <HAL_GetTick>
 8003b14:	4603      	mov	r3, r0
 8003b16:	461a      	mov	r2, r3
 8003b18:	2164      	movs	r1, #100	@ 0x64
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7ff ff0c 	bl	8003938 <SPI_EndRxTransaction>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d005      	beq.n	8003b32 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b2a:	f043 0220 	orr.w	r2, r3, #32
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d103      	bne.n	8003b4a <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7fc fea6 	bl	8000894 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003b48:	e002      	b.n	8003b50 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7ff fc72 	bl	8003434 <HAL_SPI_ErrorCallback>
}
 8003b50:	bf00      	nop
 8003b52:	3708      	adds	r7, #8
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <LL_RCC_GetUSARTClockSource>:
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003b60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b64:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4013      	ands	r3, r2
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <LL_RCC_GetLPUARTClockSource>:
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003b80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b84:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4013      	ands	r3, r2
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e042      	b.n	8003c30 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d106      	bne.n	8003bc2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f83b 	bl	8003c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2224      	movs	r2, #36	@ 0x24
 8003bc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0201 	bic.w	r2, r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d002      	beq.n	8003be8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 fa5a 	bl	800409c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f82f 	bl	8003c4c <UART_SetConfig>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e01b      	b.n	8003c30 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0201 	orr.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 fad9 	bl	80041e0 <UART_CheckIdleState>
 8003c2e:	4603      	mov	r3, r0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c50:	b08c      	sub	sp, #48	@ 0x30
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	431a      	orrs	r2, r3
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	4baf      	ldr	r3, [pc, #700]	@ (8003f38 <UART_SetConfig+0x2ec>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	6812      	ldr	r2, [r2, #0]
 8003c82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c84:	430b      	orrs	r3, r1
 8003c86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4aa4      	ldr	r2, [pc, #656]	@ (8003f3c <UART_SetConfig+0x2f0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d004      	beq.n	8003cb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003cc2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	6812      	ldr	r2, [r2, #0]
 8003cca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd6:	f023 010f 	bic.w	r1, r3, #15
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a95      	ldr	r2, [pc, #596]	@ (8003f40 <UART_SetConfig+0x2f4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d125      	bne.n	8003d3c <UART_SetConfig+0xf0>
 8003cf0:	2003      	movs	r0, #3
 8003cf2:	f7ff ff31 	bl	8003b58 <LL_RCC_GetUSARTClockSource>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b03      	cmp	r3, #3
 8003cfa:	d81b      	bhi.n	8003d34 <UART_SetConfig+0xe8>
 8003cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8003d04 <UART_SetConfig+0xb8>)
 8003cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d02:	bf00      	nop
 8003d04:	08003d15 	.word	0x08003d15
 8003d08:	08003d25 	.word	0x08003d25
 8003d0c:	08003d1d 	.word	0x08003d1d
 8003d10:	08003d2d 	.word	0x08003d2d
 8003d14:	2301      	movs	r3, #1
 8003d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d1a:	e042      	b.n	8003da2 <UART_SetConfig+0x156>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d22:	e03e      	b.n	8003da2 <UART_SetConfig+0x156>
 8003d24:	2304      	movs	r3, #4
 8003d26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d2a:	e03a      	b.n	8003da2 <UART_SetConfig+0x156>
 8003d2c:	2308      	movs	r3, #8
 8003d2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d32:	e036      	b.n	8003da2 <UART_SetConfig+0x156>
 8003d34:	2310      	movs	r3, #16
 8003d36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d3a:	e032      	b.n	8003da2 <UART_SetConfig+0x156>
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a7e      	ldr	r2, [pc, #504]	@ (8003f3c <UART_SetConfig+0x2f0>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d12a      	bne.n	8003d9c <UART_SetConfig+0x150>
 8003d46:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8003d4a:	f7ff ff15 	bl	8003b78 <LL_RCC_GetLPUARTClockSource>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d54:	d01a      	beq.n	8003d8c <UART_SetConfig+0x140>
 8003d56:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d5a:	d81b      	bhi.n	8003d94 <UART_SetConfig+0x148>
 8003d5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d60:	d00c      	beq.n	8003d7c <UART_SetConfig+0x130>
 8003d62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d66:	d815      	bhi.n	8003d94 <UART_SetConfig+0x148>
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <UART_SetConfig+0x128>
 8003d6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d70:	d008      	beq.n	8003d84 <UART_SetConfig+0x138>
 8003d72:	e00f      	b.n	8003d94 <UART_SetConfig+0x148>
 8003d74:	2300      	movs	r3, #0
 8003d76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d7a:	e012      	b.n	8003da2 <UART_SetConfig+0x156>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d82:	e00e      	b.n	8003da2 <UART_SetConfig+0x156>
 8003d84:	2304      	movs	r3, #4
 8003d86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d8a:	e00a      	b.n	8003da2 <UART_SetConfig+0x156>
 8003d8c:	2308      	movs	r3, #8
 8003d8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d92:	e006      	b.n	8003da2 <UART_SetConfig+0x156>
 8003d94:	2310      	movs	r3, #16
 8003d96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d9a:	e002      	b.n	8003da2 <UART_SetConfig+0x156>
 8003d9c:	2310      	movs	r3, #16
 8003d9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a65      	ldr	r2, [pc, #404]	@ (8003f3c <UART_SetConfig+0x2f0>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	f040 8097 	bne.w	8003edc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003dae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	d823      	bhi.n	8003dfe <UART_SetConfig+0x1b2>
 8003db6:	a201      	add	r2, pc, #4	@ (adr r2, 8003dbc <UART_SetConfig+0x170>)
 8003db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbc:	08003de1 	.word	0x08003de1
 8003dc0:	08003dff 	.word	0x08003dff
 8003dc4:	08003de9 	.word	0x08003de9
 8003dc8:	08003dff 	.word	0x08003dff
 8003dcc:	08003def 	.word	0x08003def
 8003dd0:	08003dff 	.word	0x08003dff
 8003dd4:	08003dff 	.word	0x08003dff
 8003dd8:	08003dff 	.word	0x08003dff
 8003ddc:	08003df7 	.word	0x08003df7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003de0:	f7fe fc22 	bl	8002628 <HAL_RCC_GetPCLK1Freq>
 8003de4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003de6:	e010      	b.n	8003e0a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003de8:	4b56      	ldr	r3, [pc, #344]	@ (8003f44 <UART_SetConfig+0x2f8>)
 8003dea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003dec:	e00d      	b.n	8003e0a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dee:	f7fe fb9b 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 8003df2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003df4:	e009      	b.n	8003e0a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003df6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dfa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003dfc:	e005      	b.n	8003e0a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003e08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 812b 	beq.w	8004068 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e16:	4a4c      	ldr	r2, [pc, #304]	@ (8003f48 <UART_SetConfig+0x2fc>)
 8003e18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e20:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e24:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	4413      	add	r3, r2
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d305      	bcc.n	8003e42 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d903      	bls.n	8003e4a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003e48:	e10e      	b.n	8004068 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	60bb      	str	r3, [r7, #8]
 8003e50:	60fa      	str	r2, [r7, #12]
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e56:	4a3c      	ldr	r2, [pc, #240]	@ (8003f48 <UART_SetConfig+0x2fc>)
 8003e58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2200      	movs	r2, #0
 8003e60:	603b      	str	r3, [r7, #0]
 8003e62:	607a      	str	r2, [r7, #4]
 8003e64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e6c:	f7fc f9d8 	bl	8000220 <__aeabi_uldivmod>
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	4610      	mov	r0, r2
 8003e76:	4619      	mov	r1, r3
 8003e78:	f04f 0200 	mov.w	r2, #0
 8003e7c:	f04f 0300 	mov.w	r3, #0
 8003e80:	020b      	lsls	r3, r1, #8
 8003e82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003e86:	0202      	lsls	r2, r0, #8
 8003e88:	6979      	ldr	r1, [r7, #20]
 8003e8a:	6849      	ldr	r1, [r1, #4]
 8003e8c:	0849      	lsrs	r1, r1, #1
 8003e8e:	2000      	movs	r0, #0
 8003e90:	460c      	mov	r4, r1
 8003e92:	4605      	mov	r5, r0
 8003e94:	eb12 0804 	adds.w	r8, r2, r4
 8003e98:	eb43 0905 	adc.w	r9, r3, r5
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	469a      	mov	sl, r3
 8003ea4:	4693      	mov	fp, r2
 8003ea6:	4652      	mov	r2, sl
 8003ea8:	465b      	mov	r3, fp
 8003eaa:	4640      	mov	r0, r8
 8003eac:	4649      	mov	r1, r9
 8003eae:	f7fc f9b7 	bl	8000220 <__aeabi_uldivmod>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ec0:	d308      	bcc.n	8003ed4 <UART_SetConfig+0x288>
 8003ec2:	6a3b      	ldr	r3, [r7, #32]
 8003ec4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ec8:	d204      	bcs.n	8003ed4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6a3a      	ldr	r2, [r7, #32]
 8003ed0:	60da      	str	r2, [r3, #12]
 8003ed2:	e0c9      	b.n	8004068 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003eda:	e0c5      	b.n	8004068 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ee4:	d16d      	bne.n	8003fc2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003ee6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003eea:	3b01      	subs	r3, #1
 8003eec:	2b07      	cmp	r3, #7
 8003eee:	d82d      	bhi.n	8003f4c <UART_SetConfig+0x300>
 8003ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ef8 <UART_SetConfig+0x2ac>)
 8003ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef6:	bf00      	nop
 8003ef8:	08003f19 	.word	0x08003f19
 8003efc:	08003f21 	.word	0x08003f21
 8003f00:	08003f4d 	.word	0x08003f4d
 8003f04:	08003f27 	.word	0x08003f27
 8003f08:	08003f4d 	.word	0x08003f4d
 8003f0c:	08003f4d 	.word	0x08003f4d
 8003f10:	08003f4d 	.word	0x08003f4d
 8003f14:	08003f2f 	.word	0x08003f2f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f18:	f7fe fb9c 	bl	8002654 <HAL_RCC_GetPCLK2Freq>
 8003f1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f1e:	e01b      	b.n	8003f58 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f20:	4b08      	ldr	r3, [pc, #32]	@ (8003f44 <UART_SetConfig+0x2f8>)
 8003f22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f24:	e018      	b.n	8003f58 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f26:	f7fe faff 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 8003f2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f2c:	e014      	b.n	8003f58 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f34:	e010      	b.n	8003f58 <UART_SetConfig+0x30c>
 8003f36:	bf00      	nop
 8003f38:	cfff69f3 	.word	0xcfff69f3
 8003f3c:	40008000 	.word	0x40008000
 8003f40:	40013800 	.word	0x40013800
 8003f44:	00f42400 	.word	0x00f42400
 8003f48:	0800548c 	.word	0x0800548c
      default:
        pclk = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003f56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 8084 	beq.w	8004068 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f64:	4a4b      	ldr	r2, [pc, #300]	@ (8004094 <UART_SetConfig+0x448>)
 8003f66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f72:	005a      	lsls	r2, r3, #1
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	085b      	lsrs	r3, r3, #1
 8003f7a:	441a      	add	r2, r3
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f84:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	2b0f      	cmp	r3, #15
 8003f8a:	d916      	bls.n	8003fba <UART_SetConfig+0x36e>
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f92:	d212      	bcs.n	8003fba <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	f023 030f 	bic.w	r3, r3, #15
 8003f9c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	085b      	lsrs	r3, r3, #1
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	8bfb      	ldrh	r3, [r7, #30]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	8bfa      	ldrh	r2, [r7, #30]
 8003fb6:	60da      	str	r2, [r3, #12]
 8003fb8:	e056      	b.n	8004068 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003fc0:	e052      	b.n	8004068 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fc2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	2b07      	cmp	r3, #7
 8003fca:	d822      	bhi.n	8004012 <UART_SetConfig+0x3c6>
 8003fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8003fd4 <UART_SetConfig+0x388>)
 8003fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd2:	bf00      	nop
 8003fd4:	08003ff5 	.word	0x08003ff5
 8003fd8:	08003ffd 	.word	0x08003ffd
 8003fdc:	08004013 	.word	0x08004013
 8003fe0:	08004003 	.word	0x08004003
 8003fe4:	08004013 	.word	0x08004013
 8003fe8:	08004013 	.word	0x08004013
 8003fec:	08004013 	.word	0x08004013
 8003ff0:	0800400b 	.word	0x0800400b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ff4:	f7fe fb2e 	bl	8002654 <HAL_RCC_GetPCLK2Freq>
 8003ff8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ffa:	e010      	b.n	800401e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ffc:	4b26      	ldr	r3, [pc, #152]	@ (8004098 <UART_SetConfig+0x44c>)
 8003ffe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004000:	e00d      	b.n	800401e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004002:	f7fe fa91 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 8004006:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004008:	e009      	b.n	800401e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800400a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800400e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004010:	e005      	b.n	800401e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004012:	2300      	movs	r3, #0
 8004014:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800401c:	bf00      	nop
    }

    if (pclk != 0U)
 800401e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004020:	2b00      	cmp	r3, #0
 8004022:	d021      	beq.n	8004068 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004028:	4a1a      	ldr	r2, [pc, #104]	@ (8004094 <UART_SetConfig+0x448>)
 800402a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800402e:	461a      	mov	r2, r3
 8004030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004032:	fbb3 f2f2 	udiv	r2, r3, r2
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	085b      	lsrs	r3, r3, #1
 800403c:	441a      	add	r2, r3
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	fbb2 f3f3 	udiv	r3, r2, r3
 8004046:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	2b0f      	cmp	r3, #15
 800404c:	d909      	bls.n	8004062 <UART_SetConfig+0x416>
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004054:	d205      	bcs.n	8004062 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	b29a      	uxth	r2, r3
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	60da      	str	r2, [r3, #12]
 8004060:	e002      	b.n	8004068 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	2201      	movs	r2, #1
 800406c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	2201      	movs	r2, #1
 8004074:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	2200      	movs	r2, #0
 800407c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2200      	movs	r2, #0
 8004082:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004084:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004088:	4618      	mov	r0, r3
 800408a:	3730      	adds	r7, #48	@ 0x30
 800408c:	46bd      	mov	sp, r7
 800408e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004092:	bf00      	nop
 8004094:	0800548c 	.word	0x0800548c
 8004098:	00f42400 	.word	0x00f42400

0800409c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004130:	f003 0310 	and.w	r3, r3, #16
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004152:	f003 0320 	and.w	r3, r3, #32
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004178:	2b00      	cmp	r3, #0
 800417a:	d01a      	beq.n	80041b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004196:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800419a:	d10a      	bne.n	80041b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	605a      	str	r2, [r3, #4]
  }
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b098      	sub	sp, #96	@ 0x60
 80041e4:	af02      	add	r7, sp, #8
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041f0:	f7fc feaa 	bl	8000f48 <HAL_GetTick>
 80041f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b08      	cmp	r3, #8
 8004202:	d12f      	bne.n	8004264 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004204:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800420c:	2200      	movs	r2, #0
 800420e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f88e 	bl	8004334 <UART_WaitOnFlagUntilTimeout>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d022      	beq.n	8004264 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004226:	e853 3f00 	ldrex	r3, [r3]
 800422a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800422c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800422e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004232:	653b      	str	r3, [r7, #80]	@ 0x50
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	461a      	mov	r2, r3
 800423a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800423c:	647b      	str	r3, [r7, #68]	@ 0x44
 800423e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004240:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004242:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004244:	e841 2300 	strex	r3, r2, [r1]
 8004248:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800424a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1e6      	bne.n	800421e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2220      	movs	r2, #32
 8004254:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e063      	b.n	800432c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0304 	and.w	r3, r3, #4
 800426e:	2b04      	cmp	r3, #4
 8004270:	d149      	bne.n	8004306 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004272:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800427a:	2200      	movs	r2, #0
 800427c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f857 	bl	8004334 <UART_WaitOnFlagUntilTimeout>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d03c      	beq.n	8004306 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004294:	e853 3f00 	ldrex	r3, [r3]
 8004298:	623b      	str	r3, [r7, #32]
   return(result);
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	461a      	mov	r2, r3
 80042a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80042ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042b2:	e841 2300 	strex	r3, r2, [r1]
 80042b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1e6      	bne.n	800428c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	3308      	adds	r3, #8
 80042c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	e853 3f00 	ldrex	r3, [r3]
 80042cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f023 0301 	bic.w	r3, r3, #1
 80042d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	3308      	adds	r3, #8
 80042dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042de:	61fa      	str	r2, [r7, #28]
 80042e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e2:	69b9      	ldr	r1, [r7, #24]
 80042e4:	69fa      	ldr	r2, [r7, #28]
 80042e6:	e841 2300 	strex	r3, r2, [r1]
 80042ea:	617b      	str	r3, [r7, #20]
   return(result);
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1e5      	bne.n	80042be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e012      	b.n	800432c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2220      	movs	r2, #32
 800430a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2220      	movs	r2, #32
 8004312:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3758      	adds	r7, #88	@ 0x58
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	603b      	str	r3, [r7, #0]
 8004340:	4613      	mov	r3, r2
 8004342:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004344:	e04f      	b.n	80043e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800434c:	d04b      	beq.n	80043e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800434e:	f7fc fdfb 	bl	8000f48 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	429a      	cmp	r2, r3
 800435c:	d302      	bcc.n	8004364 <UART_WaitOnFlagUntilTimeout+0x30>
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e04e      	b.n	8004406 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	2b00      	cmp	r3, #0
 8004374:	d037      	beq.n	80043e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2b80      	cmp	r3, #128	@ 0x80
 800437a:	d034      	beq.n	80043e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2b40      	cmp	r3, #64	@ 0x40
 8004380:	d031      	beq.n	80043e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	f003 0308 	and.w	r3, r3, #8
 800438c:	2b08      	cmp	r3, #8
 800438e:	d110      	bne.n	80043b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2208      	movs	r2, #8
 8004396:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 f838 	bl	800440e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2208      	movs	r2, #8
 80043a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e029      	b.n	8004406 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043c0:	d111      	bne.n	80043e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 f81e 	bl	800440e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e00f      	b.n	8004406 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	69da      	ldr	r2, [r3, #28]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	4013      	ands	r3, r2
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	bf0c      	ite	eq
 80043f6:	2301      	moveq	r3, #1
 80043f8:	2300      	movne	r3, #0
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	461a      	mov	r2, r3
 80043fe:	79fb      	ldrb	r3, [r7, #7]
 8004400:	429a      	cmp	r2, r3
 8004402:	d0a0      	beq.n	8004346 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800440e:	b480      	push	{r7}
 8004410:	b095      	sub	sp, #84	@ 0x54
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800441e:	e853 3f00 	ldrex	r3, [r3]
 8004422:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004426:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800442a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	461a      	mov	r2, r3
 8004432:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004434:	643b      	str	r3, [r7, #64]	@ 0x40
 8004436:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004438:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800443a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800443c:	e841 2300 	strex	r3, r2, [r1]
 8004440:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1e6      	bne.n	8004416 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	3308      	adds	r3, #8
 800444e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	e853 3f00 	ldrex	r3, [r3]
 8004456:	61fb      	str	r3, [r7, #28]
   return(result);
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800445e:	f023 0301 	bic.w	r3, r3, #1
 8004462:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	3308      	adds	r3, #8
 800446a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800446c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800446e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004470:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004472:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004474:	e841 2300 	strex	r3, r2, [r1]
 8004478:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800447a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1e3      	bne.n	8004448 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004484:	2b01      	cmp	r3, #1
 8004486:	d118      	bne.n	80044ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	e853 3f00 	ldrex	r3, [r3]
 8004494:	60bb      	str	r3, [r7, #8]
   return(result);
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	f023 0310 	bic.w	r3, r3, #16
 800449c:	647b      	str	r3, [r7, #68]	@ 0x44
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044a6:	61bb      	str	r3, [r7, #24]
 80044a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044aa:	6979      	ldr	r1, [r7, #20]
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	e841 2300 	strex	r3, r2, [r1]
 80044b2:	613b      	str	r3, [r7, #16]
   return(result);
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1e6      	bne.n	8004488 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2220      	movs	r2, #32
 80044be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80044ce:	bf00      	nop
 80044d0:	3754      	adds	r7, #84	@ 0x54
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
	...

080044dc <std>:
 80044dc:	2300      	movs	r3, #0
 80044de:	b510      	push	{r4, lr}
 80044e0:	4604      	mov	r4, r0
 80044e2:	e9c0 3300 	strd	r3, r3, [r0]
 80044e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044ea:	6083      	str	r3, [r0, #8]
 80044ec:	8181      	strh	r1, [r0, #12]
 80044ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80044f0:	81c2      	strh	r2, [r0, #14]
 80044f2:	6183      	str	r3, [r0, #24]
 80044f4:	4619      	mov	r1, r3
 80044f6:	2208      	movs	r2, #8
 80044f8:	305c      	adds	r0, #92	@ 0x5c
 80044fa:	f000 f906 	bl	800470a <memset>
 80044fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004534 <std+0x58>)
 8004500:	6263      	str	r3, [r4, #36]	@ 0x24
 8004502:	4b0d      	ldr	r3, [pc, #52]	@ (8004538 <std+0x5c>)
 8004504:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004506:	4b0d      	ldr	r3, [pc, #52]	@ (800453c <std+0x60>)
 8004508:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800450a:	4b0d      	ldr	r3, [pc, #52]	@ (8004540 <std+0x64>)
 800450c:	6323      	str	r3, [r4, #48]	@ 0x30
 800450e:	4b0d      	ldr	r3, [pc, #52]	@ (8004544 <std+0x68>)
 8004510:	6224      	str	r4, [r4, #32]
 8004512:	429c      	cmp	r4, r3
 8004514:	d006      	beq.n	8004524 <std+0x48>
 8004516:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800451a:	4294      	cmp	r4, r2
 800451c:	d002      	beq.n	8004524 <std+0x48>
 800451e:	33d0      	adds	r3, #208	@ 0xd0
 8004520:	429c      	cmp	r4, r3
 8004522:	d105      	bne.n	8004530 <std+0x54>
 8004524:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800452c:	f000 b966 	b.w	80047fc <__retarget_lock_init_recursive>
 8004530:	bd10      	pop	{r4, pc}
 8004532:	bf00      	nop
 8004534:	08004685 	.word	0x08004685
 8004538:	080046a7 	.word	0x080046a7
 800453c:	080046df 	.word	0x080046df
 8004540:	08004703 	.word	0x08004703
 8004544:	200001b8 	.word	0x200001b8

08004548 <stdio_exit_handler>:
 8004548:	4a02      	ldr	r2, [pc, #8]	@ (8004554 <stdio_exit_handler+0xc>)
 800454a:	4903      	ldr	r1, [pc, #12]	@ (8004558 <stdio_exit_handler+0x10>)
 800454c:	4803      	ldr	r0, [pc, #12]	@ (800455c <stdio_exit_handler+0x14>)
 800454e:	f000 b869 	b.w	8004624 <_fwalk_sglue>
 8004552:	bf00      	nop
 8004554:	20000024 	.word	0x20000024
 8004558:	08005099 	.word	0x08005099
 800455c:	20000034 	.word	0x20000034

08004560 <cleanup_stdio>:
 8004560:	6841      	ldr	r1, [r0, #4]
 8004562:	4b0c      	ldr	r3, [pc, #48]	@ (8004594 <cleanup_stdio+0x34>)
 8004564:	4299      	cmp	r1, r3
 8004566:	b510      	push	{r4, lr}
 8004568:	4604      	mov	r4, r0
 800456a:	d001      	beq.n	8004570 <cleanup_stdio+0x10>
 800456c:	f000 fd94 	bl	8005098 <_fflush_r>
 8004570:	68a1      	ldr	r1, [r4, #8]
 8004572:	4b09      	ldr	r3, [pc, #36]	@ (8004598 <cleanup_stdio+0x38>)
 8004574:	4299      	cmp	r1, r3
 8004576:	d002      	beq.n	800457e <cleanup_stdio+0x1e>
 8004578:	4620      	mov	r0, r4
 800457a:	f000 fd8d 	bl	8005098 <_fflush_r>
 800457e:	68e1      	ldr	r1, [r4, #12]
 8004580:	4b06      	ldr	r3, [pc, #24]	@ (800459c <cleanup_stdio+0x3c>)
 8004582:	4299      	cmp	r1, r3
 8004584:	d004      	beq.n	8004590 <cleanup_stdio+0x30>
 8004586:	4620      	mov	r0, r4
 8004588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800458c:	f000 bd84 	b.w	8005098 <_fflush_r>
 8004590:	bd10      	pop	{r4, pc}
 8004592:	bf00      	nop
 8004594:	200001b8 	.word	0x200001b8
 8004598:	20000220 	.word	0x20000220
 800459c:	20000288 	.word	0x20000288

080045a0 <global_stdio_init.part.0>:
 80045a0:	b510      	push	{r4, lr}
 80045a2:	4b0b      	ldr	r3, [pc, #44]	@ (80045d0 <global_stdio_init.part.0+0x30>)
 80045a4:	4c0b      	ldr	r4, [pc, #44]	@ (80045d4 <global_stdio_init.part.0+0x34>)
 80045a6:	4a0c      	ldr	r2, [pc, #48]	@ (80045d8 <global_stdio_init.part.0+0x38>)
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	4620      	mov	r0, r4
 80045ac:	2200      	movs	r2, #0
 80045ae:	2104      	movs	r1, #4
 80045b0:	f7ff ff94 	bl	80044dc <std>
 80045b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80045b8:	2201      	movs	r2, #1
 80045ba:	2109      	movs	r1, #9
 80045bc:	f7ff ff8e 	bl	80044dc <std>
 80045c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80045c4:	2202      	movs	r2, #2
 80045c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045ca:	2112      	movs	r1, #18
 80045cc:	f7ff bf86 	b.w	80044dc <std>
 80045d0:	200002f0 	.word	0x200002f0
 80045d4:	200001b8 	.word	0x200001b8
 80045d8:	08004549 	.word	0x08004549

080045dc <__sfp_lock_acquire>:
 80045dc:	4801      	ldr	r0, [pc, #4]	@ (80045e4 <__sfp_lock_acquire+0x8>)
 80045de:	f000 b90e 	b.w	80047fe <__retarget_lock_acquire_recursive>
 80045e2:	bf00      	nop
 80045e4:	200002f9 	.word	0x200002f9

080045e8 <__sfp_lock_release>:
 80045e8:	4801      	ldr	r0, [pc, #4]	@ (80045f0 <__sfp_lock_release+0x8>)
 80045ea:	f000 b909 	b.w	8004800 <__retarget_lock_release_recursive>
 80045ee:	bf00      	nop
 80045f0:	200002f9 	.word	0x200002f9

080045f4 <__sinit>:
 80045f4:	b510      	push	{r4, lr}
 80045f6:	4604      	mov	r4, r0
 80045f8:	f7ff fff0 	bl	80045dc <__sfp_lock_acquire>
 80045fc:	6a23      	ldr	r3, [r4, #32]
 80045fe:	b11b      	cbz	r3, 8004608 <__sinit+0x14>
 8004600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004604:	f7ff bff0 	b.w	80045e8 <__sfp_lock_release>
 8004608:	4b04      	ldr	r3, [pc, #16]	@ (800461c <__sinit+0x28>)
 800460a:	6223      	str	r3, [r4, #32]
 800460c:	4b04      	ldr	r3, [pc, #16]	@ (8004620 <__sinit+0x2c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f5      	bne.n	8004600 <__sinit+0xc>
 8004614:	f7ff ffc4 	bl	80045a0 <global_stdio_init.part.0>
 8004618:	e7f2      	b.n	8004600 <__sinit+0xc>
 800461a:	bf00      	nop
 800461c:	08004561 	.word	0x08004561
 8004620:	200002f0 	.word	0x200002f0

08004624 <_fwalk_sglue>:
 8004624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004628:	4607      	mov	r7, r0
 800462a:	4688      	mov	r8, r1
 800462c:	4614      	mov	r4, r2
 800462e:	2600      	movs	r6, #0
 8004630:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004634:	f1b9 0901 	subs.w	r9, r9, #1
 8004638:	d505      	bpl.n	8004646 <_fwalk_sglue+0x22>
 800463a:	6824      	ldr	r4, [r4, #0]
 800463c:	2c00      	cmp	r4, #0
 800463e:	d1f7      	bne.n	8004630 <_fwalk_sglue+0xc>
 8004640:	4630      	mov	r0, r6
 8004642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004646:	89ab      	ldrh	r3, [r5, #12]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d907      	bls.n	800465c <_fwalk_sglue+0x38>
 800464c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004650:	3301      	adds	r3, #1
 8004652:	d003      	beq.n	800465c <_fwalk_sglue+0x38>
 8004654:	4629      	mov	r1, r5
 8004656:	4638      	mov	r0, r7
 8004658:	47c0      	blx	r8
 800465a:	4306      	orrs	r6, r0
 800465c:	3568      	adds	r5, #104	@ 0x68
 800465e:	e7e9      	b.n	8004634 <_fwalk_sglue+0x10>

08004660 <iprintf>:
 8004660:	b40f      	push	{r0, r1, r2, r3}
 8004662:	b507      	push	{r0, r1, r2, lr}
 8004664:	4906      	ldr	r1, [pc, #24]	@ (8004680 <iprintf+0x20>)
 8004666:	ab04      	add	r3, sp, #16
 8004668:	6808      	ldr	r0, [r1, #0]
 800466a:	f853 2b04 	ldr.w	r2, [r3], #4
 800466e:	6881      	ldr	r1, [r0, #8]
 8004670:	9301      	str	r3, [sp, #4]
 8004672:	f000 f9e9 	bl	8004a48 <_vfiprintf_r>
 8004676:	b003      	add	sp, #12
 8004678:	f85d eb04 	ldr.w	lr, [sp], #4
 800467c:	b004      	add	sp, #16
 800467e:	4770      	bx	lr
 8004680:	20000030 	.word	0x20000030

08004684 <__sread>:
 8004684:	b510      	push	{r4, lr}
 8004686:	460c      	mov	r4, r1
 8004688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800468c:	f000 f868 	bl	8004760 <_read_r>
 8004690:	2800      	cmp	r0, #0
 8004692:	bfab      	itete	ge
 8004694:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004696:	89a3      	ldrhlt	r3, [r4, #12]
 8004698:	181b      	addge	r3, r3, r0
 800469a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800469e:	bfac      	ite	ge
 80046a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80046a2:	81a3      	strhlt	r3, [r4, #12]
 80046a4:	bd10      	pop	{r4, pc}

080046a6 <__swrite>:
 80046a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046aa:	461f      	mov	r7, r3
 80046ac:	898b      	ldrh	r3, [r1, #12]
 80046ae:	05db      	lsls	r3, r3, #23
 80046b0:	4605      	mov	r5, r0
 80046b2:	460c      	mov	r4, r1
 80046b4:	4616      	mov	r6, r2
 80046b6:	d505      	bpl.n	80046c4 <__swrite+0x1e>
 80046b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046bc:	2302      	movs	r3, #2
 80046be:	2200      	movs	r2, #0
 80046c0:	f000 f83c 	bl	800473c <_lseek_r>
 80046c4:	89a3      	ldrh	r3, [r4, #12]
 80046c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046ce:	81a3      	strh	r3, [r4, #12]
 80046d0:	4632      	mov	r2, r6
 80046d2:	463b      	mov	r3, r7
 80046d4:	4628      	mov	r0, r5
 80046d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046da:	f000 b853 	b.w	8004784 <_write_r>

080046de <__sseek>:
 80046de:	b510      	push	{r4, lr}
 80046e0:	460c      	mov	r4, r1
 80046e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046e6:	f000 f829 	bl	800473c <_lseek_r>
 80046ea:	1c43      	adds	r3, r0, #1
 80046ec:	89a3      	ldrh	r3, [r4, #12]
 80046ee:	bf15      	itete	ne
 80046f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80046f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80046f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80046fa:	81a3      	strheq	r3, [r4, #12]
 80046fc:	bf18      	it	ne
 80046fe:	81a3      	strhne	r3, [r4, #12]
 8004700:	bd10      	pop	{r4, pc}

08004702 <__sclose>:
 8004702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004706:	f000 b809 	b.w	800471c <_close_r>

0800470a <memset>:
 800470a:	4402      	add	r2, r0
 800470c:	4603      	mov	r3, r0
 800470e:	4293      	cmp	r3, r2
 8004710:	d100      	bne.n	8004714 <memset+0xa>
 8004712:	4770      	bx	lr
 8004714:	f803 1b01 	strb.w	r1, [r3], #1
 8004718:	e7f9      	b.n	800470e <memset+0x4>
	...

0800471c <_close_r>:
 800471c:	b538      	push	{r3, r4, r5, lr}
 800471e:	4d06      	ldr	r5, [pc, #24]	@ (8004738 <_close_r+0x1c>)
 8004720:	2300      	movs	r3, #0
 8004722:	4604      	mov	r4, r0
 8004724:	4608      	mov	r0, r1
 8004726:	602b      	str	r3, [r5, #0]
 8004728:	f7fc f9ac 	bl	8000a84 <_close>
 800472c:	1c43      	adds	r3, r0, #1
 800472e:	d102      	bne.n	8004736 <_close_r+0x1a>
 8004730:	682b      	ldr	r3, [r5, #0]
 8004732:	b103      	cbz	r3, 8004736 <_close_r+0x1a>
 8004734:	6023      	str	r3, [r4, #0]
 8004736:	bd38      	pop	{r3, r4, r5, pc}
 8004738:	200002f4 	.word	0x200002f4

0800473c <_lseek_r>:
 800473c:	b538      	push	{r3, r4, r5, lr}
 800473e:	4d07      	ldr	r5, [pc, #28]	@ (800475c <_lseek_r+0x20>)
 8004740:	4604      	mov	r4, r0
 8004742:	4608      	mov	r0, r1
 8004744:	4611      	mov	r1, r2
 8004746:	2200      	movs	r2, #0
 8004748:	602a      	str	r2, [r5, #0]
 800474a:	461a      	mov	r2, r3
 800474c:	f7fc f9c1 	bl	8000ad2 <_lseek>
 8004750:	1c43      	adds	r3, r0, #1
 8004752:	d102      	bne.n	800475a <_lseek_r+0x1e>
 8004754:	682b      	ldr	r3, [r5, #0]
 8004756:	b103      	cbz	r3, 800475a <_lseek_r+0x1e>
 8004758:	6023      	str	r3, [r4, #0]
 800475a:	bd38      	pop	{r3, r4, r5, pc}
 800475c:	200002f4 	.word	0x200002f4

08004760 <_read_r>:
 8004760:	b538      	push	{r3, r4, r5, lr}
 8004762:	4d07      	ldr	r5, [pc, #28]	@ (8004780 <_read_r+0x20>)
 8004764:	4604      	mov	r4, r0
 8004766:	4608      	mov	r0, r1
 8004768:	4611      	mov	r1, r2
 800476a:	2200      	movs	r2, #0
 800476c:	602a      	str	r2, [r5, #0]
 800476e:	461a      	mov	r2, r3
 8004770:	f7fc f96b 	bl	8000a4a <_read>
 8004774:	1c43      	adds	r3, r0, #1
 8004776:	d102      	bne.n	800477e <_read_r+0x1e>
 8004778:	682b      	ldr	r3, [r5, #0]
 800477a:	b103      	cbz	r3, 800477e <_read_r+0x1e>
 800477c:	6023      	str	r3, [r4, #0]
 800477e:	bd38      	pop	{r3, r4, r5, pc}
 8004780:	200002f4 	.word	0x200002f4

08004784 <_write_r>:
 8004784:	b538      	push	{r3, r4, r5, lr}
 8004786:	4d07      	ldr	r5, [pc, #28]	@ (80047a4 <_write_r+0x20>)
 8004788:	4604      	mov	r4, r0
 800478a:	4608      	mov	r0, r1
 800478c:	4611      	mov	r1, r2
 800478e:	2200      	movs	r2, #0
 8004790:	602a      	str	r2, [r5, #0]
 8004792:	461a      	mov	r2, r3
 8004794:	f7fc f862 	bl	800085c <_write>
 8004798:	1c43      	adds	r3, r0, #1
 800479a:	d102      	bne.n	80047a2 <_write_r+0x1e>
 800479c:	682b      	ldr	r3, [r5, #0]
 800479e:	b103      	cbz	r3, 80047a2 <_write_r+0x1e>
 80047a0:	6023      	str	r3, [r4, #0]
 80047a2:	bd38      	pop	{r3, r4, r5, pc}
 80047a4:	200002f4 	.word	0x200002f4

080047a8 <__errno>:
 80047a8:	4b01      	ldr	r3, [pc, #4]	@ (80047b0 <__errno+0x8>)
 80047aa:	6818      	ldr	r0, [r3, #0]
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	20000030 	.word	0x20000030

080047b4 <__libc_init_array>:
 80047b4:	b570      	push	{r4, r5, r6, lr}
 80047b6:	4d0d      	ldr	r5, [pc, #52]	@ (80047ec <__libc_init_array+0x38>)
 80047b8:	4c0d      	ldr	r4, [pc, #52]	@ (80047f0 <__libc_init_array+0x3c>)
 80047ba:	1b64      	subs	r4, r4, r5
 80047bc:	10a4      	asrs	r4, r4, #2
 80047be:	2600      	movs	r6, #0
 80047c0:	42a6      	cmp	r6, r4
 80047c2:	d109      	bne.n	80047d8 <__libc_init_array+0x24>
 80047c4:	4d0b      	ldr	r5, [pc, #44]	@ (80047f4 <__libc_init_array+0x40>)
 80047c6:	4c0c      	ldr	r4, [pc, #48]	@ (80047f8 <__libc_init_array+0x44>)
 80047c8:	f000 fdb6 	bl	8005338 <_init>
 80047cc:	1b64      	subs	r4, r4, r5
 80047ce:	10a4      	asrs	r4, r4, #2
 80047d0:	2600      	movs	r6, #0
 80047d2:	42a6      	cmp	r6, r4
 80047d4:	d105      	bne.n	80047e2 <__libc_init_array+0x2e>
 80047d6:	bd70      	pop	{r4, r5, r6, pc}
 80047d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047dc:	4798      	blx	r3
 80047de:	3601      	adds	r6, #1
 80047e0:	e7ee      	b.n	80047c0 <__libc_init_array+0xc>
 80047e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e6:	4798      	blx	r3
 80047e8:	3601      	adds	r6, #1
 80047ea:	e7f2      	b.n	80047d2 <__libc_init_array+0x1e>
 80047ec:	080054e0 	.word	0x080054e0
 80047f0:	080054e0 	.word	0x080054e0
 80047f4:	080054e0 	.word	0x080054e0
 80047f8:	080054e4 	.word	0x080054e4

080047fc <__retarget_lock_init_recursive>:
 80047fc:	4770      	bx	lr

080047fe <__retarget_lock_acquire_recursive>:
 80047fe:	4770      	bx	lr

08004800 <__retarget_lock_release_recursive>:
 8004800:	4770      	bx	lr
	...

08004804 <_free_r>:
 8004804:	b538      	push	{r3, r4, r5, lr}
 8004806:	4605      	mov	r5, r0
 8004808:	2900      	cmp	r1, #0
 800480a:	d041      	beq.n	8004890 <_free_r+0x8c>
 800480c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004810:	1f0c      	subs	r4, r1, #4
 8004812:	2b00      	cmp	r3, #0
 8004814:	bfb8      	it	lt
 8004816:	18e4      	addlt	r4, r4, r3
 8004818:	f000 f8e0 	bl	80049dc <__malloc_lock>
 800481c:	4a1d      	ldr	r2, [pc, #116]	@ (8004894 <_free_r+0x90>)
 800481e:	6813      	ldr	r3, [r2, #0]
 8004820:	b933      	cbnz	r3, 8004830 <_free_r+0x2c>
 8004822:	6063      	str	r3, [r4, #4]
 8004824:	6014      	str	r4, [r2, #0]
 8004826:	4628      	mov	r0, r5
 8004828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800482c:	f000 b8dc 	b.w	80049e8 <__malloc_unlock>
 8004830:	42a3      	cmp	r3, r4
 8004832:	d908      	bls.n	8004846 <_free_r+0x42>
 8004834:	6820      	ldr	r0, [r4, #0]
 8004836:	1821      	adds	r1, r4, r0
 8004838:	428b      	cmp	r3, r1
 800483a:	bf01      	itttt	eq
 800483c:	6819      	ldreq	r1, [r3, #0]
 800483e:	685b      	ldreq	r3, [r3, #4]
 8004840:	1809      	addeq	r1, r1, r0
 8004842:	6021      	streq	r1, [r4, #0]
 8004844:	e7ed      	b.n	8004822 <_free_r+0x1e>
 8004846:	461a      	mov	r2, r3
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	b10b      	cbz	r3, 8004850 <_free_r+0x4c>
 800484c:	42a3      	cmp	r3, r4
 800484e:	d9fa      	bls.n	8004846 <_free_r+0x42>
 8004850:	6811      	ldr	r1, [r2, #0]
 8004852:	1850      	adds	r0, r2, r1
 8004854:	42a0      	cmp	r0, r4
 8004856:	d10b      	bne.n	8004870 <_free_r+0x6c>
 8004858:	6820      	ldr	r0, [r4, #0]
 800485a:	4401      	add	r1, r0
 800485c:	1850      	adds	r0, r2, r1
 800485e:	4283      	cmp	r3, r0
 8004860:	6011      	str	r1, [r2, #0]
 8004862:	d1e0      	bne.n	8004826 <_free_r+0x22>
 8004864:	6818      	ldr	r0, [r3, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	6053      	str	r3, [r2, #4]
 800486a:	4408      	add	r0, r1
 800486c:	6010      	str	r0, [r2, #0]
 800486e:	e7da      	b.n	8004826 <_free_r+0x22>
 8004870:	d902      	bls.n	8004878 <_free_r+0x74>
 8004872:	230c      	movs	r3, #12
 8004874:	602b      	str	r3, [r5, #0]
 8004876:	e7d6      	b.n	8004826 <_free_r+0x22>
 8004878:	6820      	ldr	r0, [r4, #0]
 800487a:	1821      	adds	r1, r4, r0
 800487c:	428b      	cmp	r3, r1
 800487e:	bf04      	itt	eq
 8004880:	6819      	ldreq	r1, [r3, #0]
 8004882:	685b      	ldreq	r3, [r3, #4]
 8004884:	6063      	str	r3, [r4, #4]
 8004886:	bf04      	itt	eq
 8004888:	1809      	addeq	r1, r1, r0
 800488a:	6021      	streq	r1, [r4, #0]
 800488c:	6054      	str	r4, [r2, #4]
 800488e:	e7ca      	b.n	8004826 <_free_r+0x22>
 8004890:	bd38      	pop	{r3, r4, r5, pc}
 8004892:	bf00      	nop
 8004894:	20000300 	.word	0x20000300

08004898 <sbrk_aligned>:
 8004898:	b570      	push	{r4, r5, r6, lr}
 800489a:	4e0f      	ldr	r6, [pc, #60]	@ (80048d8 <sbrk_aligned+0x40>)
 800489c:	460c      	mov	r4, r1
 800489e:	6831      	ldr	r1, [r6, #0]
 80048a0:	4605      	mov	r5, r0
 80048a2:	b911      	cbnz	r1, 80048aa <sbrk_aligned+0x12>
 80048a4:	f000 fcb4 	bl	8005210 <_sbrk_r>
 80048a8:	6030      	str	r0, [r6, #0]
 80048aa:	4621      	mov	r1, r4
 80048ac:	4628      	mov	r0, r5
 80048ae:	f000 fcaf 	bl	8005210 <_sbrk_r>
 80048b2:	1c43      	adds	r3, r0, #1
 80048b4:	d103      	bne.n	80048be <sbrk_aligned+0x26>
 80048b6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80048ba:	4620      	mov	r0, r4
 80048bc:	bd70      	pop	{r4, r5, r6, pc}
 80048be:	1cc4      	adds	r4, r0, #3
 80048c0:	f024 0403 	bic.w	r4, r4, #3
 80048c4:	42a0      	cmp	r0, r4
 80048c6:	d0f8      	beq.n	80048ba <sbrk_aligned+0x22>
 80048c8:	1a21      	subs	r1, r4, r0
 80048ca:	4628      	mov	r0, r5
 80048cc:	f000 fca0 	bl	8005210 <_sbrk_r>
 80048d0:	3001      	adds	r0, #1
 80048d2:	d1f2      	bne.n	80048ba <sbrk_aligned+0x22>
 80048d4:	e7ef      	b.n	80048b6 <sbrk_aligned+0x1e>
 80048d6:	bf00      	nop
 80048d8:	200002fc 	.word	0x200002fc

080048dc <_malloc_r>:
 80048dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048e0:	1ccd      	adds	r5, r1, #3
 80048e2:	f025 0503 	bic.w	r5, r5, #3
 80048e6:	3508      	adds	r5, #8
 80048e8:	2d0c      	cmp	r5, #12
 80048ea:	bf38      	it	cc
 80048ec:	250c      	movcc	r5, #12
 80048ee:	2d00      	cmp	r5, #0
 80048f0:	4606      	mov	r6, r0
 80048f2:	db01      	blt.n	80048f8 <_malloc_r+0x1c>
 80048f4:	42a9      	cmp	r1, r5
 80048f6:	d904      	bls.n	8004902 <_malloc_r+0x26>
 80048f8:	230c      	movs	r3, #12
 80048fa:	6033      	str	r3, [r6, #0]
 80048fc:	2000      	movs	r0, #0
 80048fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004902:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80049d8 <_malloc_r+0xfc>
 8004906:	f000 f869 	bl	80049dc <__malloc_lock>
 800490a:	f8d8 3000 	ldr.w	r3, [r8]
 800490e:	461c      	mov	r4, r3
 8004910:	bb44      	cbnz	r4, 8004964 <_malloc_r+0x88>
 8004912:	4629      	mov	r1, r5
 8004914:	4630      	mov	r0, r6
 8004916:	f7ff ffbf 	bl	8004898 <sbrk_aligned>
 800491a:	1c43      	adds	r3, r0, #1
 800491c:	4604      	mov	r4, r0
 800491e:	d158      	bne.n	80049d2 <_malloc_r+0xf6>
 8004920:	f8d8 4000 	ldr.w	r4, [r8]
 8004924:	4627      	mov	r7, r4
 8004926:	2f00      	cmp	r7, #0
 8004928:	d143      	bne.n	80049b2 <_malloc_r+0xd6>
 800492a:	2c00      	cmp	r4, #0
 800492c:	d04b      	beq.n	80049c6 <_malloc_r+0xea>
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	4639      	mov	r1, r7
 8004932:	4630      	mov	r0, r6
 8004934:	eb04 0903 	add.w	r9, r4, r3
 8004938:	f000 fc6a 	bl	8005210 <_sbrk_r>
 800493c:	4581      	cmp	r9, r0
 800493e:	d142      	bne.n	80049c6 <_malloc_r+0xea>
 8004940:	6821      	ldr	r1, [r4, #0]
 8004942:	1a6d      	subs	r5, r5, r1
 8004944:	4629      	mov	r1, r5
 8004946:	4630      	mov	r0, r6
 8004948:	f7ff ffa6 	bl	8004898 <sbrk_aligned>
 800494c:	3001      	adds	r0, #1
 800494e:	d03a      	beq.n	80049c6 <_malloc_r+0xea>
 8004950:	6823      	ldr	r3, [r4, #0]
 8004952:	442b      	add	r3, r5
 8004954:	6023      	str	r3, [r4, #0]
 8004956:	f8d8 3000 	ldr.w	r3, [r8]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	bb62      	cbnz	r2, 80049b8 <_malloc_r+0xdc>
 800495e:	f8c8 7000 	str.w	r7, [r8]
 8004962:	e00f      	b.n	8004984 <_malloc_r+0xa8>
 8004964:	6822      	ldr	r2, [r4, #0]
 8004966:	1b52      	subs	r2, r2, r5
 8004968:	d420      	bmi.n	80049ac <_malloc_r+0xd0>
 800496a:	2a0b      	cmp	r2, #11
 800496c:	d917      	bls.n	800499e <_malloc_r+0xc2>
 800496e:	1961      	adds	r1, r4, r5
 8004970:	42a3      	cmp	r3, r4
 8004972:	6025      	str	r5, [r4, #0]
 8004974:	bf18      	it	ne
 8004976:	6059      	strne	r1, [r3, #4]
 8004978:	6863      	ldr	r3, [r4, #4]
 800497a:	bf08      	it	eq
 800497c:	f8c8 1000 	streq.w	r1, [r8]
 8004980:	5162      	str	r2, [r4, r5]
 8004982:	604b      	str	r3, [r1, #4]
 8004984:	4630      	mov	r0, r6
 8004986:	f000 f82f 	bl	80049e8 <__malloc_unlock>
 800498a:	f104 000b 	add.w	r0, r4, #11
 800498e:	1d23      	adds	r3, r4, #4
 8004990:	f020 0007 	bic.w	r0, r0, #7
 8004994:	1ac2      	subs	r2, r0, r3
 8004996:	bf1c      	itt	ne
 8004998:	1a1b      	subne	r3, r3, r0
 800499a:	50a3      	strne	r3, [r4, r2]
 800499c:	e7af      	b.n	80048fe <_malloc_r+0x22>
 800499e:	6862      	ldr	r2, [r4, #4]
 80049a0:	42a3      	cmp	r3, r4
 80049a2:	bf0c      	ite	eq
 80049a4:	f8c8 2000 	streq.w	r2, [r8]
 80049a8:	605a      	strne	r2, [r3, #4]
 80049aa:	e7eb      	b.n	8004984 <_malloc_r+0xa8>
 80049ac:	4623      	mov	r3, r4
 80049ae:	6864      	ldr	r4, [r4, #4]
 80049b0:	e7ae      	b.n	8004910 <_malloc_r+0x34>
 80049b2:	463c      	mov	r4, r7
 80049b4:	687f      	ldr	r7, [r7, #4]
 80049b6:	e7b6      	b.n	8004926 <_malloc_r+0x4a>
 80049b8:	461a      	mov	r2, r3
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	42a3      	cmp	r3, r4
 80049be:	d1fb      	bne.n	80049b8 <_malloc_r+0xdc>
 80049c0:	2300      	movs	r3, #0
 80049c2:	6053      	str	r3, [r2, #4]
 80049c4:	e7de      	b.n	8004984 <_malloc_r+0xa8>
 80049c6:	230c      	movs	r3, #12
 80049c8:	6033      	str	r3, [r6, #0]
 80049ca:	4630      	mov	r0, r6
 80049cc:	f000 f80c 	bl	80049e8 <__malloc_unlock>
 80049d0:	e794      	b.n	80048fc <_malloc_r+0x20>
 80049d2:	6005      	str	r5, [r0, #0]
 80049d4:	e7d6      	b.n	8004984 <_malloc_r+0xa8>
 80049d6:	bf00      	nop
 80049d8:	20000300 	.word	0x20000300

080049dc <__malloc_lock>:
 80049dc:	4801      	ldr	r0, [pc, #4]	@ (80049e4 <__malloc_lock+0x8>)
 80049de:	f7ff bf0e 	b.w	80047fe <__retarget_lock_acquire_recursive>
 80049e2:	bf00      	nop
 80049e4:	200002f8 	.word	0x200002f8

080049e8 <__malloc_unlock>:
 80049e8:	4801      	ldr	r0, [pc, #4]	@ (80049f0 <__malloc_unlock+0x8>)
 80049ea:	f7ff bf09 	b.w	8004800 <__retarget_lock_release_recursive>
 80049ee:	bf00      	nop
 80049f0:	200002f8 	.word	0x200002f8

080049f4 <__sfputc_r>:
 80049f4:	6893      	ldr	r3, [r2, #8]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	b410      	push	{r4}
 80049fc:	6093      	str	r3, [r2, #8]
 80049fe:	da08      	bge.n	8004a12 <__sfputc_r+0x1e>
 8004a00:	6994      	ldr	r4, [r2, #24]
 8004a02:	42a3      	cmp	r3, r4
 8004a04:	db01      	blt.n	8004a0a <__sfputc_r+0x16>
 8004a06:	290a      	cmp	r1, #10
 8004a08:	d103      	bne.n	8004a12 <__sfputc_r+0x1e>
 8004a0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a0e:	f000 bb6b 	b.w	80050e8 <__swbuf_r>
 8004a12:	6813      	ldr	r3, [r2, #0]
 8004a14:	1c58      	adds	r0, r3, #1
 8004a16:	6010      	str	r0, [r2, #0]
 8004a18:	7019      	strb	r1, [r3, #0]
 8004a1a:	4608      	mov	r0, r1
 8004a1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <__sfputs_r>:
 8004a22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a24:	4606      	mov	r6, r0
 8004a26:	460f      	mov	r7, r1
 8004a28:	4614      	mov	r4, r2
 8004a2a:	18d5      	adds	r5, r2, r3
 8004a2c:	42ac      	cmp	r4, r5
 8004a2e:	d101      	bne.n	8004a34 <__sfputs_r+0x12>
 8004a30:	2000      	movs	r0, #0
 8004a32:	e007      	b.n	8004a44 <__sfputs_r+0x22>
 8004a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a38:	463a      	mov	r2, r7
 8004a3a:	4630      	mov	r0, r6
 8004a3c:	f7ff ffda 	bl	80049f4 <__sfputc_r>
 8004a40:	1c43      	adds	r3, r0, #1
 8004a42:	d1f3      	bne.n	8004a2c <__sfputs_r+0xa>
 8004a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a48 <_vfiprintf_r>:
 8004a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a4c:	460d      	mov	r5, r1
 8004a4e:	b09d      	sub	sp, #116	@ 0x74
 8004a50:	4614      	mov	r4, r2
 8004a52:	4698      	mov	r8, r3
 8004a54:	4606      	mov	r6, r0
 8004a56:	b118      	cbz	r0, 8004a60 <_vfiprintf_r+0x18>
 8004a58:	6a03      	ldr	r3, [r0, #32]
 8004a5a:	b90b      	cbnz	r3, 8004a60 <_vfiprintf_r+0x18>
 8004a5c:	f7ff fdca 	bl	80045f4 <__sinit>
 8004a60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a62:	07d9      	lsls	r1, r3, #31
 8004a64:	d405      	bmi.n	8004a72 <_vfiprintf_r+0x2a>
 8004a66:	89ab      	ldrh	r3, [r5, #12]
 8004a68:	059a      	lsls	r2, r3, #22
 8004a6a:	d402      	bmi.n	8004a72 <_vfiprintf_r+0x2a>
 8004a6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a6e:	f7ff fec6 	bl	80047fe <__retarget_lock_acquire_recursive>
 8004a72:	89ab      	ldrh	r3, [r5, #12]
 8004a74:	071b      	lsls	r3, r3, #28
 8004a76:	d501      	bpl.n	8004a7c <_vfiprintf_r+0x34>
 8004a78:	692b      	ldr	r3, [r5, #16]
 8004a7a:	b99b      	cbnz	r3, 8004aa4 <_vfiprintf_r+0x5c>
 8004a7c:	4629      	mov	r1, r5
 8004a7e:	4630      	mov	r0, r6
 8004a80:	f000 fb70 	bl	8005164 <__swsetup_r>
 8004a84:	b170      	cbz	r0, 8004aa4 <_vfiprintf_r+0x5c>
 8004a86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a88:	07dc      	lsls	r4, r3, #31
 8004a8a:	d504      	bpl.n	8004a96 <_vfiprintf_r+0x4e>
 8004a8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a90:	b01d      	add	sp, #116	@ 0x74
 8004a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a96:	89ab      	ldrh	r3, [r5, #12]
 8004a98:	0598      	lsls	r0, r3, #22
 8004a9a:	d4f7      	bmi.n	8004a8c <_vfiprintf_r+0x44>
 8004a9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a9e:	f7ff feaf 	bl	8004800 <__retarget_lock_release_recursive>
 8004aa2:	e7f3      	b.n	8004a8c <_vfiprintf_r+0x44>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004aa8:	2320      	movs	r3, #32
 8004aaa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004aae:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ab2:	2330      	movs	r3, #48	@ 0x30
 8004ab4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004c64 <_vfiprintf_r+0x21c>
 8004ab8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004abc:	f04f 0901 	mov.w	r9, #1
 8004ac0:	4623      	mov	r3, r4
 8004ac2:	469a      	mov	sl, r3
 8004ac4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ac8:	b10a      	cbz	r2, 8004ace <_vfiprintf_r+0x86>
 8004aca:	2a25      	cmp	r2, #37	@ 0x25
 8004acc:	d1f9      	bne.n	8004ac2 <_vfiprintf_r+0x7a>
 8004ace:	ebba 0b04 	subs.w	fp, sl, r4
 8004ad2:	d00b      	beq.n	8004aec <_vfiprintf_r+0xa4>
 8004ad4:	465b      	mov	r3, fp
 8004ad6:	4622      	mov	r2, r4
 8004ad8:	4629      	mov	r1, r5
 8004ada:	4630      	mov	r0, r6
 8004adc:	f7ff ffa1 	bl	8004a22 <__sfputs_r>
 8004ae0:	3001      	adds	r0, #1
 8004ae2:	f000 80a7 	beq.w	8004c34 <_vfiprintf_r+0x1ec>
 8004ae6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ae8:	445a      	add	r2, fp
 8004aea:	9209      	str	r2, [sp, #36]	@ 0x24
 8004aec:	f89a 3000 	ldrb.w	r3, [sl]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 809f 	beq.w	8004c34 <_vfiprintf_r+0x1ec>
 8004af6:	2300      	movs	r3, #0
 8004af8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004afc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b00:	f10a 0a01 	add.w	sl, sl, #1
 8004b04:	9304      	str	r3, [sp, #16]
 8004b06:	9307      	str	r3, [sp, #28]
 8004b08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004b0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8004b0e:	4654      	mov	r4, sl
 8004b10:	2205      	movs	r2, #5
 8004b12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b16:	4853      	ldr	r0, [pc, #332]	@ (8004c64 <_vfiprintf_r+0x21c>)
 8004b18:	f7fb fb32 	bl	8000180 <memchr>
 8004b1c:	9a04      	ldr	r2, [sp, #16]
 8004b1e:	b9d8      	cbnz	r0, 8004b58 <_vfiprintf_r+0x110>
 8004b20:	06d1      	lsls	r1, r2, #27
 8004b22:	bf44      	itt	mi
 8004b24:	2320      	movmi	r3, #32
 8004b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b2a:	0713      	lsls	r3, r2, #28
 8004b2c:	bf44      	itt	mi
 8004b2e:	232b      	movmi	r3, #43	@ 0x2b
 8004b30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b34:	f89a 3000 	ldrb.w	r3, [sl]
 8004b38:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b3a:	d015      	beq.n	8004b68 <_vfiprintf_r+0x120>
 8004b3c:	9a07      	ldr	r2, [sp, #28]
 8004b3e:	4654      	mov	r4, sl
 8004b40:	2000      	movs	r0, #0
 8004b42:	f04f 0c0a 	mov.w	ip, #10
 8004b46:	4621      	mov	r1, r4
 8004b48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b4c:	3b30      	subs	r3, #48	@ 0x30
 8004b4e:	2b09      	cmp	r3, #9
 8004b50:	d94b      	bls.n	8004bea <_vfiprintf_r+0x1a2>
 8004b52:	b1b0      	cbz	r0, 8004b82 <_vfiprintf_r+0x13a>
 8004b54:	9207      	str	r2, [sp, #28]
 8004b56:	e014      	b.n	8004b82 <_vfiprintf_r+0x13a>
 8004b58:	eba0 0308 	sub.w	r3, r0, r8
 8004b5c:	fa09 f303 	lsl.w	r3, r9, r3
 8004b60:	4313      	orrs	r3, r2
 8004b62:	9304      	str	r3, [sp, #16]
 8004b64:	46a2      	mov	sl, r4
 8004b66:	e7d2      	b.n	8004b0e <_vfiprintf_r+0xc6>
 8004b68:	9b03      	ldr	r3, [sp, #12]
 8004b6a:	1d19      	adds	r1, r3, #4
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	9103      	str	r1, [sp, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	bfbb      	ittet	lt
 8004b74:	425b      	neglt	r3, r3
 8004b76:	f042 0202 	orrlt.w	r2, r2, #2
 8004b7a:	9307      	strge	r3, [sp, #28]
 8004b7c:	9307      	strlt	r3, [sp, #28]
 8004b7e:	bfb8      	it	lt
 8004b80:	9204      	strlt	r2, [sp, #16]
 8004b82:	7823      	ldrb	r3, [r4, #0]
 8004b84:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b86:	d10a      	bne.n	8004b9e <_vfiprintf_r+0x156>
 8004b88:	7863      	ldrb	r3, [r4, #1]
 8004b8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b8c:	d132      	bne.n	8004bf4 <_vfiprintf_r+0x1ac>
 8004b8e:	9b03      	ldr	r3, [sp, #12]
 8004b90:	1d1a      	adds	r2, r3, #4
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	9203      	str	r2, [sp, #12]
 8004b96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004b9a:	3402      	adds	r4, #2
 8004b9c:	9305      	str	r3, [sp, #20]
 8004b9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004c74 <_vfiprintf_r+0x22c>
 8004ba2:	7821      	ldrb	r1, [r4, #0]
 8004ba4:	2203      	movs	r2, #3
 8004ba6:	4650      	mov	r0, sl
 8004ba8:	f7fb faea 	bl	8000180 <memchr>
 8004bac:	b138      	cbz	r0, 8004bbe <_vfiprintf_r+0x176>
 8004bae:	9b04      	ldr	r3, [sp, #16]
 8004bb0:	eba0 000a 	sub.w	r0, r0, sl
 8004bb4:	2240      	movs	r2, #64	@ 0x40
 8004bb6:	4082      	lsls	r2, r0
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	3401      	adds	r4, #1
 8004bbc:	9304      	str	r3, [sp, #16]
 8004bbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bc2:	4829      	ldr	r0, [pc, #164]	@ (8004c68 <_vfiprintf_r+0x220>)
 8004bc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004bc8:	2206      	movs	r2, #6
 8004bca:	f7fb fad9 	bl	8000180 <memchr>
 8004bce:	2800      	cmp	r0, #0
 8004bd0:	d03f      	beq.n	8004c52 <_vfiprintf_r+0x20a>
 8004bd2:	4b26      	ldr	r3, [pc, #152]	@ (8004c6c <_vfiprintf_r+0x224>)
 8004bd4:	bb1b      	cbnz	r3, 8004c1e <_vfiprintf_r+0x1d6>
 8004bd6:	9b03      	ldr	r3, [sp, #12]
 8004bd8:	3307      	adds	r3, #7
 8004bda:	f023 0307 	bic.w	r3, r3, #7
 8004bde:	3308      	adds	r3, #8
 8004be0:	9303      	str	r3, [sp, #12]
 8004be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004be4:	443b      	add	r3, r7
 8004be6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004be8:	e76a      	b.n	8004ac0 <_vfiprintf_r+0x78>
 8004bea:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bee:	460c      	mov	r4, r1
 8004bf0:	2001      	movs	r0, #1
 8004bf2:	e7a8      	b.n	8004b46 <_vfiprintf_r+0xfe>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	3401      	adds	r4, #1
 8004bf8:	9305      	str	r3, [sp, #20]
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	f04f 0c0a 	mov.w	ip, #10
 8004c00:	4620      	mov	r0, r4
 8004c02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c06:	3a30      	subs	r2, #48	@ 0x30
 8004c08:	2a09      	cmp	r2, #9
 8004c0a:	d903      	bls.n	8004c14 <_vfiprintf_r+0x1cc>
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d0c6      	beq.n	8004b9e <_vfiprintf_r+0x156>
 8004c10:	9105      	str	r1, [sp, #20]
 8004c12:	e7c4      	b.n	8004b9e <_vfiprintf_r+0x156>
 8004c14:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c18:	4604      	mov	r4, r0
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e7f0      	b.n	8004c00 <_vfiprintf_r+0x1b8>
 8004c1e:	ab03      	add	r3, sp, #12
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	462a      	mov	r2, r5
 8004c24:	4b12      	ldr	r3, [pc, #72]	@ (8004c70 <_vfiprintf_r+0x228>)
 8004c26:	a904      	add	r1, sp, #16
 8004c28:	4630      	mov	r0, r6
 8004c2a:	f3af 8000 	nop.w
 8004c2e:	4607      	mov	r7, r0
 8004c30:	1c78      	adds	r0, r7, #1
 8004c32:	d1d6      	bne.n	8004be2 <_vfiprintf_r+0x19a>
 8004c34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c36:	07d9      	lsls	r1, r3, #31
 8004c38:	d405      	bmi.n	8004c46 <_vfiprintf_r+0x1fe>
 8004c3a:	89ab      	ldrh	r3, [r5, #12]
 8004c3c:	059a      	lsls	r2, r3, #22
 8004c3e:	d402      	bmi.n	8004c46 <_vfiprintf_r+0x1fe>
 8004c40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c42:	f7ff fddd 	bl	8004800 <__retarget_lock_release_recursive>
 8004c46:	89ab      	ldrh	r3, [r5, #12]
 8004c48:	065b      	lsls	r3, r3, #25
 8004c4a:	f53f af1f 	bmi.w	8004a8c <_vfiprintf_r+0x44>
 8004c4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004c50:	e71e      	b.n	8004a90 <_vfiprintf_r+0x48>
 8004c52:	ab03      	add	r3, sp, #12
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	462a      	mov	r2, r5
 8004c58:	4b05      	ldr	r3, [pc, #20]	@ (8004c70 <_vfiprintf_r+0x228>)
 8004c5a:	a904      	add	r1, sp, #16
 8004c5c:	4630      	mov	r0, r6
 8004c5e:	f000 f879 	bl	8004d54 <_printf_i>
 8004c62:	e7e4      	b.n	8004c2e <_vfiprintf_r+0x1e6>
 8004c64:	080054a4 	.word	0x080054a4
 8004c68:	080054ae 	.word	0x080054ae
 8004c6c:	00000000 	.word	0x00000000
 8004c70:	08004a23 	.word	0x08004a23
 8004c74:	080054aa 	.word	0x080054aa

08004c78 <_printf_common>:
 8004c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c7c:	4616      	mov	r6, r2
 8004c7e:	4698      	mov	r8, r3
 8004c80:	688a      	ldr	r2, [r1, #8]
 8004c82:	690b      	ldr	r3, [r1, #16]
 8004c84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	bfb8      	it	lt
 8004c8c:	4613      	movlt	r3, r2
 8004c8e:	6033      	str	r3, [r6, #0]
 8004c90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c94:	4607      	mov	r7, r0
 8004c96:	460c      	mov	r4, r1
 8004c98:	b10a      	cbz	r2, 8004c9e <_printf_common+0x26>
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	6033      	str	r3, [r6, #0]
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	0699      	lsls	r1, r3, #26
 8004ca2:	bf42      	ittt	mi
 8004ca4:	6833      	ldrmi	r3, [r6, #0]
 8004ca6:	3302      	addmi	r3, #2
 8004ca8:	6033      	strmi	r3, [r6, #0]
 8004caa:	6825      	ldr	r5, [r4, #0]
 8004cac:	f015 0506 	ands.w	r5, r5, #6
 8004cb0:	d106      	bne.n	8004cc0 <_printf_common+0x48>
 8004cb2:	f104 0a19 	add.w	sl, r4, #25
 8004cb6:	68e3      	ldr	r3, [r4, #12]
 8004cb8:	6832      	ldr	r2, [r6, #0]
 8004cba:	1a9b      	subs	r3, r3, r2
 8004cbc:	42ab      	cmp	r3, r5
 8004cbe:	dc26      	bgt.n	8004d0e <_printf_common+0x96>
 8004cc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004cc4:	6822      	ldr	r2, [r4, #0]
 8004cc6:	3b00      	subs	r3, #0
 8004cc8:	bf18      	it	ne
 8004cca:	2301      	movne	r3, #1
 8004ccc:	0692      	lsls	r2, r2, #26
 8004cce:	d42b      	bmi.n	8004d28 <_printf_common+0xb0>
 8004cd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004cd4:	4641      	mov	r1, r8
 8004cd6:	4638      	mov	r0, r7
 8004cd8:	47c8      	blx	r9
 8004cda:	3001      	adds	r0, #1
 8004cdc:	d01e      	beq.n	8004d1c <_printf_common+0xa4>
 8004cde:	6823      	ldr	r3, [r4, #0]
 8004ce0:	6922      	ldr	r2, [r4, #16]
 8004ce2:	f003 0306 	and.w	r3, r3, #6
 8004ce6:	2b04      	cmp	r3, #4
 8004ce8:	bf02      	ittt	eq
 8004cea:	68e5      	ldreq	r5, [r4, #12]
 8004cec:	6833      	ldreq	r3, [r6, #0]
 8004cee:	1aed      	subeq	r5, r5, r3
 8004cf0:	68a3      	ldr	r3, [r4, #8]
 8004cf2:	bf0c      	ite	eq
 8004cf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cf8:	2500      	movne	r5, #0
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	bfc4      	itt	gt
 8004cfe:	1a9b      	subgt	r3, r3, r2
 8004d00:	18ed      	addgt	r5, r5, r3
 8004d02:	2600      	movs	r6, #0
 8004d04:	341a      	adds	r4, #26
 8004d06:	42b5      	cmp	r5, r6
 8004d08:	d11a      	bne.n	8004d40 <_printf_common+0xc8>
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	e008      	b.n	8004d20 <_printf_common+0xa8>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	4652      	mov	r2, sl
 8004d12:	4641      	mov	r1, r8
 8004d14:	4638      	mov	r0, r7
 8004d16:	47c8      	blx	r9
 8004d18:	3001      	adds	r0, #1
 8004d1a:	d103      	bne.n	8004d24 <_printf_common+0xac>
 8004d1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d24:	3501      	adds	r5, #1
 8004d26:	e7c6      	b.n	8004cb6 <_printf_common+0x3e>
 8004d28:	18e1      	adds	r1, r4, r3
 8004d2a:	1c5a      	adds	r2, r3, #1
 8004d2c:	2030      	movs	r0, #48	@ 0x30
 8004d2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d32:	4422      	add	r2, r4
 8004d34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d3c:	3302      	adds	r3, #2
 8004d3e:	e7c7      	b.n	8004cd0 <_printf_common+0x58>
 8004d40:	2301      	movs	r3, #1
 8004d42:	4622      	mov	r2, r4
 8004d44:	4641      	mov	r1, r8
 8004d46:	4638      	mov	r0, r7
 8004d48:	47c8      	blx	r9
 8004d4a:	3001      	adds	r0, #1
 8004d4c:	d0e6      	beq.n	8004d1c <_printf_common+0xa4>
 8004d4e:	3601      	adds	r6, #1
 8004d50:	e7d9      	b.n	8004d06 <_printf_common+0x8e>
	...

08004d54 <_printf_i>:
 8004d54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d58:	7e0f      	ldrb	r7, [r1, #24]
 8004d5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d5c:	2f78      	cmp	r7, #120	@ 0x78
 8004d5e:	4691      	mov	r9, r2
 8004d60:	4680      	mov	r8, r0
 8004d62:	460c      	mov	r4, r1
 8004d64:	469a      	mov	sl, r3
 8004d66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d6a:	d807      	bhi.n	8004d7c <_printf_i+0x28>
 8004d6c:	2f62      	cmp	r7, #98	@ 0x62
 8004d6e:	d80a      	bhi.n	8004d86 <_printf_i+0x32>
 8004d70:	2f00      	cmp	r7, #0
 8004d72:	f000 80d1 	beq.w	8004f18 <_printf_i+0x1c4>
 8004d76:	2f58      	cmp	r7, #88	@ 0x58
 8004d78:	f000 80b8 	beq.w	8004eec <_printf_i+0x198>
 8004d7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d84:	e03a      	b.n	8004dfc <_printf_i+0xa8>
 8004d86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d8a:	2b15      	cmp	r3, #21
 8004d8c:	d8f6      	bhi.n	8004d7c <_printf_i+0x28>
 8004d8e:	a101      	add	r1, pc, #4	@ (adr r1, 8004d94 <_printf_i+0x40>)
 8004d90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d94:	08004ded 	.word	0x08004ded
 8004d98:	08004e01 	.word	0x08004e01
 8004d9c:	08004d7d 	.word	0x08004d7d
 8004da0:	08004d7d 	.word	0x08004d7d
 8004da4:	08004d7d 	.word	0x08004d7d
 8004da8:	08004d7d 	.word	0x08004d7d
 8004dac:	08004e01 	.word	0x08004e01
 8004db0:	08004d7d 	.word	0x08004d7d
 8004db4:	08004d7d 	.word	0x08004d7d
 8004db8:	08004d7d 	.word	0x08004d7d
 8004dbc:	08004d7d 	.word	0x08004d7d
 8004dc0:	08004eff 	.word	0x08004eff
 8004dc4:	08004e2b 	.word	0x08004e2b
 8004dc8:	08004eb9 	.word	0x08004eb9
 8004dcc:	08004d7d 	.word	0x08004d7d
 8004dd0:	08004d7d 	.word	0x08004d7d
 8004dd4:	08004f21 	.word	0x08004f21
 8004dd8:	08004d7d 	.word	0x08004d7d
 8004ddc:	08004e2b 	.word	0x08004e2b
 8004de0:	08004d7d 	.word	0x08004d7d
 8004de4:	08004d7d 	.word	0x08004d7d
 8004de8:	08004ec1 	.word	0x08004ec1
 8004dec:	6833      	ldr	r3, [r6, #0]
 8004dee:	1d1a      	adds	r2, r3, #4
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6032      	str	r2, [r6, #0]
 8004df4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004df8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e09c      	b.n	8004f3a <_printf_i+0x1e6>
 8004e00:	6833      	ldr	r3, [r6, #0]
 8004e02:	6820      	ldr	r0, [r4, #0]
 8004e04:	1d19      	adds	r1, r3, #4
 8004e06:	6031      	str	r1, [r6, #0]
 8004e08:	0606      	lsls	r6, r0, #24
 8004e0a:	d501      	bpl.n	8004e10 <_printf_i+0xbc>
 8004e0c:	681d      	ldr	r5, [r3, #0]
 8004e0e:	e003      	b.n	8004e18 <_printf_i+0xc4>
 8004e10:	0645      	lsls	r5, r0, #25
 8004e12:	d5fb      	bpl.n	8004e0c <_printf_i+0xb8>
 8004e14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e18:	2d00      	cmp	r5, #0
 8004e1a:	da03      	bge.n	8004e24 <_printf_i+0xd0>
 8004e1c:	232d      	movs	r3, #45	@ 0x2d
 8004e1e:	426d      	negs	r5, r5
 8004e20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e24:	4858      	ldr	r0, [pc, #352]	@ (8004f88 <_printf_i+0x234>)
 8004e26:	230a      	movs	r3, #10
 8004e28:	e011      	b.n	8004e4e <_printf_i+0xfa>
 8004e2a:	6821      	ldr	r1, [r4, #0]
 8004e2c:	6833      	ldr	r3, [r6, #0]
 8004e2e:	0608      	lsls	r0, r1, #24
 8004e30:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e34:	d402      	bmi.n	8004e3c <_printf_i+0xe8>
 8004e36:	0649      	lsls	r1, r1, #25
 8004e38:	bf48      	it	mi
 8004e3a:	b2ad      	uxthmi	r5, r5
 8004e3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e3e:	4852      	ldr	r0, [pc, #328]	@ (8004f88 <_printf_i+0x234>)
 8004e40:	6033      	str	r3, [r6, #0]
 8004e42:	bf14      	ite	ne
 8004e44:	230a      	movne	r3, #10
 8004e46:	2308      	moveq	r3, #8
 8004e48:	2100      	movs	r1, #0
 8004e4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e4e:	6866      	ldr	r6, [r4, #4]
 8004e50:	60a6      	str	r6, [r4, #8]
 8004e52:	2e00      	cmp	r6, #0
 8004e54:	db05      	blt.n	8004e62 <_printf_i+0x10e>
 8004e56:	6821      	ldr	r1, [r4, #0]
 8004e58:	432e      	orrs	r6, r5
 8004e5a:	f021 0104 	bic.w	r1, r1, #4
 8004e5e:	6021      	str	r1, [r4, #0]
 8004e60:	d04b      	beq.n	8004efa <_printf_i+0x1a6>
 8004e62:	4616      	mov	r6, r2
 8004e64:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e68:	fb03 5711 	mls	r7, r3, r1, r5
 8004e6c:	5dc7      	ldrb	r7, [r0, r7]
 8004e6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e72:	462f      	mov	r7, r5
 8004e74:	42bb      	cmp	r3, r7
 8004e76:	460d      	mov	r5, r1
 8004e78:	d9f4      	bls.n	8004e64 <_printf_i+0x110>
 8004e7a:	2b08      	cmp	r3, #8
 8004e7c:	d10b      	bne.n	8004e96 <_printf_i+0x142>
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	07df      	lsls	r7, r3, #31
 8004e82:	d508      	bpl.n	8004e96 <_printf_i+0x142>
 8004e84:	6923      	ldr	r3, [r4, #16]
 8004e86:	6861      	ldr	r1, [r4, #4]
 8004e88:	4299      	cmp	r1, r3
 8004e8a:	bfde      	ittt	le
 8004e8c:	2330      	movle	r3, #48	@ 0x30
 8004e8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e92:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004e96:	1b92      	subs	r2, r2, r6
 8004e98:	6122      	str	r2, [r4, #16]
 8004e9a:	f8cd a000 	str.w	sl, [sp]
 8004e9e:	464b      	mov	r3, r9
 8004ea0:	aa03      	add	r2, sp, #12
 8004ea2:	4621      	mov	r1, r4
 8004ea4:	4640      	mov	r0, r8
 8004ea6:	f7ff fee7 	bl	8004c78 <_printf_common>
 8004eaa:	3001      	adds	r0, #1
 8004eac:	d14a      	bne.n	8004f44 <_printf_i+0x1f0>
 8004eae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004eb2:	b004      	add	sp, #16
 8004eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eb8:	6823      	ldr	r3, [r4, #0]
 8004eba:	f043 0320 	orr.w	r3, r3, #32
 8004ebe:	6023      	str	r3, [r4, #0]
 8004ec0:	4832      	ldr	r0, [pc, #200]	@ (8004f8c <_printf_i+0x238>)
 8004ec2:	2778      	movs	r7, #120	@ 0x78
 8004ec4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ec8:	6823      	ldr	r3, [r4, #0]
 8004eca:	6831      	ldr	r1, [r6, #0]
 8004ecc:	061f      	lsls	r7, r3, #24
 8004ece:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ed2:	d402      	bmi.n	8004eda <_printf_i+0x186>
 8004ed4:	065f      	lsls	r7, r3, #25
 8004ed6:	bf48      	it	mi
 8004ed8:	b2ad      	uxthmi	r5, r5
 8004eda:	6031      	str	r1, [r6, #0]
 8004edc:	07d9      	lsls	r1, r3, #31
 8004ede:	bf44      	itt	mi
 8004ee0:	f043 0320 	orrmi.w	r3, r3, #32
 8004ee4:	6023      	strmi	r3, [r4, #0]
 8004ee6:	b11d      	cbz	r5, 8004ef0 <_printf_i+0x19c>
 8004ee8:	2310      	movs	r3, #16
 8004eea:	e7ad      	b.n	8004e48 <_printf_i+0xf4>
 8004eec:	4826      	ldr	r0, [pc, #152]	@ (8004f88 <_printf_i+0x234>)
 8004eee:	e7e9      	b.n	8004ec4 <_printf_i+0x170>
 8004ef0:	6823      	ldr	r3, [r4, #0]
 8004ef2:	f023 0320 	bic.w	r3, r3, #32
 8004ef6:	6023      	str	r3, [r4, #0]
 8004ef8:	e7f6      	b.n	8004ee8 <_printf_i+0x194>
 8004efa:	4616      	mov	r6, r2
 8004efc:	e7bd      	b.n	8004e7a <_printf_i+0x126>
 8004efe:	6833      	ldr	r3, [r6, #0]
 8004f00:	6825      	ldr	r5, [r4, #0]
 8004f02:	6961      	ldr	r1, [r4, #20]
 8004f04:	1d18      	adds	r0, r3, #4
 8004f06:	6030      	str	r0, [r6, #0]
 8004f08:	062e      	lsls	r6, r5, #24
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	d501      	bpl.n	8004f12 <_printf_i+0x1be>
 8004f0e:	6019      	str	r1, [r3, #0]
 8004f10:	e002      	b.n	8004f18 <_printf_i+0x1c4>
 8004f12:	0668      	lsls	r0, r5, #25
 8004f14:	d5fb      	bpl.n	8004f0e <_printf_i+0x1ba>
 8004f16:	8019      	strh	r1, [r3, #0]
 8004f18:	2300      	movs	r3, #0
 8004f1a:	6123      	str	r3, [r4, #16]
 8004f1c:	4616      	mov	r6, r2
 8004f1e:	e7bc      	b.n	8004e9a <_printf_i+0x146>
 8004f20:	6833      	ldr	r3, [r6, #0]
 8004f22:	1d1a      	adds	r2, r3, #4
 8004f24:	6032      	str	r2, [r6, #0]
 8004f26:	681e      	ldr	r6, [r3, #0]
 8004f28:	6862      	ldr	r2, [r4, #4]
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	4630      	mov	r0, r6
 8004f2e:	f7fb f927 	bl	8000180 <memchr>
 8004f32:	b108      	cbz	r0, 8004f38 <_printf_i+0x1e4>
 8004f34:	1b80      	subs	r0, r0, r6
 8004f36:	6060      	str	r0, [r4, #4]
 8004f38:	6863      	ldr	r3, [r4, #4]
 8004f3a:	6123      	str	r3, [r4, #16]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f42:	e7aa      	b.n	8004e9a <_printf_i+0x146>
 8004f44:	6923      	ldr	r3, [r4, #16]
 8004f46:	4632      	mov	r2, r6
 8004f48:	4649      	mov	r1, r9
 8004f4a:	4640      	mov	r0, r8
 8004f4c:	47d0      	blx	sl
 8004f4e:	3001      	adds	r0, #1
 8004f50:	d0ad      	beq.n	8004eae <_printf_i+0x15a>
 8004f52:	6823      	ldr	r3, [r4, #0]
 8004f54:	079b      	lsls	r3, r3, #30
 8004f56:	d413      	bmi.n	8004f80 <_printf_i+0x22c>
 8004f58:	68e0      	ldr	r0, [r4, #12]
 8004f5a:	9b03      	ldr	r3, [sp, #12]
 8004f5c:	4298      	cmp	r0, r3
 8004f5e:	bfb8      	it	lt
 8004f60:	4618      	movlt	r0, r3
 8004f62:	e7a6      	b.n	8004eb2 <_printf_i+0x15e>
 8004f64:	2301      	movs	r3, #1
 8004f66:	4632      	mov	r2, r6
 8004f68:	4649      	mov	r1, r9
 8004f6a:	4640      	mov	r0, r8
 8004f6c:	47d0      	blx	sl
 8004f6e:	3001      	adds	r0, #1
 8004f70:	d09d      	beq.n	8004eae <_printf_i+0x15a>
 8004f72:	3501      	adds	r5, #1
 8004f74:	68e3      	ldr	r3, [r4, #12]
 8004f76:	9903      	ldr	r1, [sp, #12]
 8004f78:	1a5b      	subs	r3, r3, r1
 8004f7a:	42ab      	cmp	r3, r5
 8004f7c:	dcf2      	bgt.n	8004f64 <_printf_i+0x210>
 8004f7e:	e7eb      	b.n	8004f58 <_printf_i+0x204>
 8004f80:	2500      	movs	r5, #0
 8004f82:	f104 0619 	add.w	r6, r4, #25
 8004f86:	e7f5      	b.n	8004f74 <_printf_i+0x220>
 8004f88:	080054b5 	.word	0x080054b5
 8004f8c:	080054c6 	.word	0x080054c6

08004f90 <__sflush_r>:
 8004f90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f98:	0716      	lsls	r6, r2, #28
 8004f9a:	4605      	mov	r5, r0
 8004f9c:	460c      	mov	r4, r1
 8004f9e:	d454      	bmi.n	800504a <__sflush_r+0xba>
 8004fa0:	684b      	ldr	r3, [r1, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	dc02      	bgt.n	8004fac <__sflush_r+0x1c>
 8004fa6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	dd48      	ble.n	800503e <__sflush_r+0xae>
 8004fac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004fae:	2e00      	cmp	r6, #0
 8004fb0:	d045      	beq.n	800503e <__sflush_r+0xae>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004fb8:	682f      	ldr	r7, [r5, #0]
 8004fba:	6a21      	ldr	r1, [r4, #32]
 8004fbc:	602b      	str	r3, [r5, #0]
 8004fbe:	d030      	beq.n	8005022 <__sflush_r+0x92>
 8004fc0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004fc2:	89a3      	ldrh	r3, [r4, #12]
 8004fc4:	0759      	lsls	r1, r3, #29
 8004fc6:	d505      	bpl.n	8004fd4 <__sflush_r+0x44>
 8004fc8:	6863      	ldr	r3, [r4, #4]
 8004fca:	1ad2      	subs	r2, r2, r3
 8004fcc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004fce:	b10b      	cbz	r3, 8004fd4 <__sflush_r+0x44>
 8004fd0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004fd2:	1ad2      	subs	r2, r2, r3
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004fd8:	6a21      	ldr	r1, [r4, #32]
 8004fda:	4628      	mov	r0, r5
 8004fdc:	47b0      	blx	r6
 8004fde:	1c43      	adds	r3, r0, #1
 8004fe0:	89a3      	ldrh	r3, [r4, #12]
 8004fe2:	d106      	bne.n	8004ff2 <__sflush_r+0x62>
 8004fe4:	6829      	ldr	r1, [r5, #0]
 8004fe6:	291d      	cmp	r1, #29
 8004fe8:	d82b      	bhi.n	8005042 <__sflush_r+0xb2>
 8004fea:	4a2a      	ldr	r2, [pc, #168]	@ (8005094 <__sflush_r+0x104>)
 8004fec:	40ca      	lsrs	r2, r1
 8004fee:	07d6      	lsls	r6, r2, #31
 8004ff0:	d527      	bpl.n	8005042 <__sflush_r+0xb2>
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	6062      	str	r2, [r4, #4]
 8004ff6:	04d9      	lsls	r1, r3, #19
 8004ff8:	6922      	ldr	r2, [r4, #16]
 8004ffa:	6022      	str	r2, [r4, #0]
 8004ffc:	d504      	bpl.n	8005008 <__sflush_r+0x78>
 8004ffe:	1c42      	adds	r2, r0, #1
 8005000:	d101      	bne.n	8005006 <__sflush_r+0x76>
 8005002:	682b      	ldr	r3, [r5, #0]
 8005004:	b903      	cbnz	r3, 8005008 <__sflush_r+0x78>
 8005006:	6560      	str	r0, [r4, #84]	@ 0x54
 8005008:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800500a:	602f      	str	r7, [r5, #0]
 800500c:	b1b9      	cbz	r1, 800503e <__sflush_r+0xae>
 800500e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005012:	4299      	cmp	r1, r3
 8005014:	d002      	beq.n	800501c <__sflush_r+0x8c>
 8005016:	4628      	mov	r0, r5
 8005018:	f7ff fbf4 	bl	8004804 <_free_r>
 800501c:	2300      	movs	r3, #0
 800501e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005020:	e00d      	b.n	800503e <__sflush_r+0xae>
 8005022:	2301      	movs	r3, #1
 8005024:	4628      	mov	r0, r5
 8005026:	47b0      	blx	r6
 8005028:	4602      	mov	r2, r0
 800502a:	1c50      	adds	r0, r2, #1
 800502c:	d1c9      	bne.n	8004fc2 <__sflush_r+0x32>
 800502e:	682b      	ldr	r3, [r5, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0c6      	beq.n	8004fc2 <__sflush_r+0x32>
 8005034:	2b1d      	cmp	r3, #29
 8005036:	d001      	beq.n	800503c <__sflush_r+0xac>
 8005038:	2b16      	cmp	r3, #22
 800503a:	d11e      	bne.n	800507a <__sflush_r+0xea>
 800503c:	602f      	str	r7, [r5, #0]
 800503e:	2000      	movs	r0, #0
 8005040:	e022      	b.n	8005088 <__sflush_r+0xf8>
 8005042:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005046:	b21b      	sxth	r3, r3
 8005048:	e01b      	b.n	8005082 <__sflush_r+0xf2>
 800504a:	690f      	ldr	r7, [r1, #16]
 800504c:	2f00      	cmp	r7, #0
 800504e:	d0f6      	beq.n	800503e <__sflush_r+0xae>
 8005050:	0793      	lsls	r3, r2, #30
 8005052:	680e      	ldr	r6, [r1, #0]
 8005054:	bf08      	it	eq
 8005056:	694b      	ldreq	r3, [r1, #20]
 8005058:	600f      	str	r7, [r1, #0]
 800505a:	bf18      	it	ne
 800505c:	2300      	movne	r3, #0
 800505e:	eba6 0807 	sub.w	r8, r6, r7
 8005062:	608b      	str	r3, [r1, #8]
 8005064:	f1b8 0f00 	cmp.w	r8, #0
 8005068:	dde9      	ble.n	800503e <__sflush_r+0xae>
 800506a:	6a21      	ldr	r1, [r4, #32]
 800506c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800506e:	4643      	mov	r3, r8
 8005070:	463a      	mov	r2, r7
 8005072:	4628      	mov	r0, r5
 8005074:	47b0      	blx	r6
 8005076:	2800      	cmp	r0, #0
 8005078:	dc08      	bgt.n	800508c <__sflush_r+0xfc>
 800507a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800507e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005082:	81a3      	strh	r3, [r4, #12]
 8005084:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800508c:	4407      	add	r7, r0
 800508e:	eba8 0800 	sub.w	r8, r8, r0
 8005092:	e7e7      	b.n	8005064 <__sflush_r+0xd4>
 8005094:	20400001 	.word	0x20400001

08005098 <_fflush_r>:
 8005098:	b538      	push	{r3, r4, r5, lr}
 800509a:	690b      	ldr	r3, [r1, #16]
 800509c:	4605      	mov	r5, r0
 800509e:	460c      	mov	r4, r1
 80050a0:	b913      	cbnz	r3, 80050a8 <_fflush_r+0x10>
 80050a2:	2500      	movs	r5, #0
 80050a4:	4628      	mov	r0, r5
 80050a6:	bd38      	pop	{r3, r4, r5, pc}
 80050a8:	b118      	cbz	r0, 80050b2 <_fflush_r+0x1a>
 80050aa:	6a03      	ldr	r3, [r0, #32]
 80050ac:	b90b      	cbnz	r3, 80050b2 <_fflush_r+0x1a>
 80050ae:	f7ff faa1 	bl	80045f4 <__sinit>
 80050b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0f3      	beq.n	80050a2 <_fflush_r+0xa>
 80050ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80050bc:	07d0      	lsls	r0, r2, #31
 80050be:	d404      	bmi.n	80050ca <_fflush_r+0x32>
 80050c0:	0599      	lsls	r1, r3, #22
 80050c2:	d402      	bmi.n	80050ca <_fflush_r+0x32>
 80050c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050c6:	f7ff fb9a 	bl	80047fe <__retarget_lock_acquire_recursive>
 80050ca:	4628      	mov	r0, r5
 80050cc:	4621      	mov	r1, r4
 80050ce:	f7ff ff5f 	bl	8004f90 <__sflush_r>
 80050d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80050d4:	07da      	lsls	r2, r3, #31
 80050d6:	4605      	mov	r5, r0
 80050d8:	d4e4      	bmi.n	80050a4 <_fflush_r+0xc>
 80050da:	89a3      	ldrh	r3, [r4, #12]
 80050dc:	059b      	lsls	r3, r3, #22
 80050de:	d4e1      	bmi.n	80050a4 <_fflush_r+0xc>
 80050e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050e2:	f7ff fb8d 	bl	8004800 <__retarget_lock_release_recursive>
 80050e6:	e7dd      	b.n	80050a4 <_fflush_r+0xc>

080050e8 <__swbuf_r>:
 80050e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ea:	460e      	mov	r6, r1
 80050ec:	4614      	mov	r4, r2
 80050ee:	4605      	mov	r5, r0
 80050f0:	b118      	cbz	r0, 80050fa <__swbuf_r+0x12>
 80050f2:	6a03      	ldr	r3, [r0, #32]
 80050f4:	b90b      	cbnz	r3, 80050fa <__swbuf_r+0x12>
 80050f6:	f7ff fa7d 	bl	80045f4 <__sinit>
 80050fa:	69a3      	ldr	r3, [r4, #24]
 80050fc:	60a3      	str	r3, [r4, #8]
 80050fe:	89a3      	ldrh	r3, [r4, #12]
 8005100:	071a      	lsls	r2, r3, #28
 8005102:	d501      	bpl.n	8005108 <__swbuf_r+0x20>
 8005104:	6923      	ldr	r3, [r4, #16]
 8005106:	b943      	cbnz	r3, 800511a <__swbuf_r+0x32>
 8005108:	4621      	mov	r1, r4
 800510a:	4628      	mov	r0, r5
 800510c:	f000 f82a 	bl	8005164 <__swsetup_r>
 8005110:	b118      	cbz	r0, 800511a <__swbuf_r+0x32>
 8005112:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005116:	4638      	mov	r0, r7
 8005118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	6922      	ldr	r2, [r4, #16]
 800511e:	1a98      	subs	r0, r3, r2
 8005120:	6963      	ldr	r3, [r4, #20]
 8005122:	b2f6      	uxtb	r6, r6
 8005124:	4283      	cmp	r3, r0
 8005126:	4637      	mov	r7, r6
 8005128:	dc05      	bgt.n	8005136 <__swbuf_r+0x4e>
 800512a:	4621      	mov	r1, r4
 800512c:	4628      	mov	r0, r5
 800512e:	f7ff ffb3 	bl	8005098 <_fflush_r>
 8005132:	2800      	cmp	r0, #0
 8005134:	d1ed      	bne.n	8005112 <__swbuf_r+0x2a>
 8005136:	68a3      	ldr	r3, [r4, #8]
 8005138:	3b01      	subs	r3, #1
 800513a:	60a3      	str	r3, [r4, #8]
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	1c5a      	adds	r2, r3, #1
 8005140:	6022      	str	r2, [r4, #0]
 8005142:	701e      	strb	r6, [r3, #0]
 8005144:	6962      	ldr	r2, [r4, #20]
 8005146:	1c43      	adds	r3, r0, #1
 8005148:	429a      	cmp	r2, r3
 800514a:	d004      	beq.n	8005156 <__swbuf_r+0x6e>
 800514c:	89a3      	ldrh	r3, [r4, #12]
 800514e:	07db      	lsls	r3, r3, #31
 8005150:	d5e1      	bpl.n	8005116 <__swbuf_r+0x2e>
 8005152:	2e0a      	cmp	r6, #10
 8005154:	d1df      	bne.n	8005116 <__swbuf_r+0x2e>
 8005156:	4621      	mov	r1, r4
 8005158:	4628      	mov	r0, r5
 800515a:	f7ff ff9d 	bl	8005098 <_fflush_r>
 800515e:	2800      	cmp	r0, #0
 8005160:	d0d9      	beq.n	8005116 <__swbuf_r+0x2e>
 8005162:	e7d6      	b.n	8005112 <__swbuf_r+0x2a>

08005164 <__swsetup_r>:
 8005164:	b538      	push	{r3, r4, r5, lr}
 8005166:	4b29      	ldr	r3, [pc, #164]	@ (800520c <__swsetup_r+0xa8>)
 8005168:	4605      	mov	r5, r0
 800516a:	6818      	ldr	r0, [r3, #0]
 800516c:	460c      	mov	r4, r1
 800516e:	b118      	cbz	r0, 8005178 <__swsetup_r+0x14>
 8005170:	6a03      	ldr	r3, [r0, #32]
 8005172:	b90b      	cbnz	r3, 8005178 <__swsetup_r+0x14>
 8005174:	f7ff fa3e 	bl	80045f4 <__sinit>
 8005178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800517c:	0719      	lsls	r1, r3, #28
 800517e:	d422      	bmi.n	80051c6 <__swsetup_r+0x62>
 8005180:	06da      	lsls	r2, r3, #27
 8005182:	d407      	bmi.n	8005194 <__swsetup_r+0x30>
 8005184:	2209      	movs	r2, #9
 8005186:	602a      	str	r2, [r5, #0]
 8005188:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800518c:	81a3      	strh	r3, [r4, #12]
 800518e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005192:	e033      	b.n	80051fc <__swsetup_r+0x98>
 8005194:	0758      	lsls	r0, r3, #29
 8005196:	d512      	bpl.n	80051be <__swsetup_r+0x5a>
 8005198:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800519a:	b141      	cbz	r1, 80051ae <__swsetup_r+0x4a>
 800519c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80051a0:	4299      	cmp	r1, r3
 80051a2:	d002      	beq.n	80051aa <__swsetup_r+0x46>
 80051a4:	4628      	mov	r0, r5
 80051a6:	f7ff fb2d 	bl	8004804 <_free_r>
 80051aa:	2300      	movs	r3, #0
 80051ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80051ae:	89a3      	ldrh	r3, [r4, #12]
 80051b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80051b4:	81a3      	strh	r3, [r4, #12]
 80051b6:	2300      	movs	r3, #0
 80051b8:	6063      	str	r3, [r4, #4]
 80051ba:	6923      	ldr	r3, [r4, #16]
 80051bc:	6023      	str	r3, [r4, #0]
 80051be:	89a3      	ldrh	r3, [r4, #12]
 80051c0:	f043 0308 	orr.w	r3, r3, #8
 80051c4:	81a3      	strh	r3, [r4, #12]
 80051c6:	6923      	ldr	r3, [r4, #16]
 80051c8:	b94b      	cbnz	r3, 80051de <__swsetup_r+0x7a>
 80051ca:	89a3      	ldrh	r3, [r4, #12]
 80051cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80051d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051d4:	d003      	beq.n	80051de <__swsetup_r+0x7a>
 80051d6:	4621      	mov	r1, r4
 80051d8:	4628      	mov	r0, r5
 80051da:	f000 f84f 	bl	800527c <__smakebuf_r>
 80051de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051e2:	f013 0201 	ands.w	r2, r3, #1
 80051e6:	d00a      	beq.n	80051fe <__swsetup_r+0x9a>
 80051e8:	2200      	movs	r2, #0
 80051ea:	60a2      	str	r2, [r4, #8]
 80051ec:	6962      	ldr	r2, [r4, #20]
 80051ee:	4252      	negs	r2, r2
 80051f0:	61a2      	str	r2, [r4, #24]
 80051f2:	6922      	ldr	r2, [r4, #16]
 80051f4:	b942      	cbnz	r2, 8005208 <__swsetup_r+0xa4>
 80051f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80051fa:	d1c5      	bne.n	8005188 <__swsetup_r+0x24>
 80051fc:	bd38      	pop	{r3, r4, r5, pc}
 80051fe:	0799      	lsls	r1, r3, #30
 8005200:	bf58      	it	pl
 8005202:	6962      	ldrpl	r2, [r4, #20]
 8005204:	60a2      	str	r2, [r4, #8]
 8005206:	e7f4      	b.n	80051f2 <__swsetup_r+0x8e>
 8005208:	2000      	movs	r0, #0
 800520a:	e7f7      	b.n	80051fc <__swsetup_r+0x98>
 800520c:	20000030 	.word	0x20000030

08005210 <_sbrk_r>:
 8005210:	b538      	push	{r3, r4, r5, lr}
 8005212:	4d06      	ldr	r5, [pc, #24]	@ (800522c <_sbrk_r+0x1c>)
 8005214:	2300      	movs	r3, #0
 8005216:	4604      	mov	r4, r0
 8005218:	4608      	mov	r0, r1
 800521a:	602b      	str	r3, [r5, #0]
 800521c:	f7fb fc66 	bl	8000aec <_sbrk>
 8005220:	1c43      	adds	r3, r0, #1
 8005222:	d102      	bne.n	800522a <_sbrk_r+0x1a>
 8005224:	682b      	ldr	r3, [r5, #0]
 8005226:	b103      	cbz	r3, 800522a <_sbrk_r+0x1a>
 8005228:	6023      	str	r3, [r4, #0]
 800522a:	bd38      	pop	{r3, r4, r5, pc}
 800522c:	200002f4 	.word	0x200002f4

08005230 <__swhatbuf_r>:
 8005230:	b570      	push	{r4, r5, r6, lr}
 8005232:	460c      	mov	r4, r1
 8005234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005238:	2900      	cmp	r1, #0
 800523a:	b096      	sub	sp, #88	@ 0x58
 800523c:	4615      	mov	r5, r2
 800523e:	461e      	mov	r6, r3
 8005240:	da0d      	bge.n	800525e <__swhatbuf_r+0x2e>
 8005242:	89a3      	ldrh	r3, [r4, #12]
 8005244:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005248:	f04f 0100 	mov.w	r1, #0
 800524c:	bf14      	ite	ne
 800524e:	2340      	movne	r3, #64	@ 0x40
 8005250:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005254:	2000      	movs	r0, #0
 8005256:	6031      	str	r1, [r6, #0]
 8005258:	602b      	str	r3, [r5, #0]
 800525a:	b016      	add	sp, #88	@ 0x58
 800525c:	bd70      	pop	{r4, r5, r6, pc}
 800525e:	466a      	mov	r2, sp
 8005260:	f000 f848 	bl	80052f4 <_fstat_r>
 8005264:	2800      	cmp	r0, #0
 8005266:	dbec      	blt.n	8005242 <__swhatbuf_r+0x12>
 8005268:	9901      	ldr	r1, [sp, #4]
 800526a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800526e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005272:	4259      	negs	r1, r3
 8005274:	4159      	adcs	r1, r3
 8005276:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800527a:	e7eb      	b.n	8005254 <__swhatbuf_r+0x24>

0800527c <__smakebuf_r>:
 800527c:	898b      	ldrh	r3, [r1, #12]
 800527e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005280:	079d      	lsls	r5, r3, #30
 8005282:	4606      	mov	r6, r0
 8005284:	460c      	mov	r4, r1
 8005286:	d507      	bpl.n	8005298 <__smakebuf_r+0x1c>
 8005288:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800528c:	6023      	str	r3, [r4, #0]
 800528e:	6123      	str	r3, [r4, #16]
 8005290:	2301      	movs	r3, #1
 8005292:	6163      	str	r3, [r4, #20]
 8005294:	b003      	add	sp, #12
 8005296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005298:	ab01      	add	r3, sp, #4
 800529a:	466a      	mov	r2, sp
 800529c:	f7ff ffc8 	bl	8005230 <__swhatbuf_r>
 80052a0:	9f00      	ldr	r7, [sp, #0]
 80052a2:	4605      	mov	r5, r0
 80052a4:	4639      	mov	r1, r7
 80052a6:	4630      	mov	r0, r6
 80052a8:	f7ff fb18 	bl	80048dc <_malloc_r>
 80052ac:	b948      	cbnz	r0, 80052c2 <__smakebuf_r+0x46>
 80052ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052b2:	059a      	lsls	r2, r3, #22
 80052b4:	d4ee      	bmi.n	8005294 <__smakebuf_r+0x18>
 80052b6:	f023 0303 	bic.w	r3, r3, #3
 80052ba:	f043 0302 	orr.w	r3, r3, #2
 80052be:	81a3      	strh	r3, [r4, #12]
 80052c0:	e7e2      	b.n	8005288 <__smakebuf_r+0xc>
 80052c2:	89a3      	ldrh	r3, [r4, #12]
 80052c4:	6020      	str	r0, [r4, #0]
 80052c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052ca:	81a3      	strh	r3, [r4, #12]
 80052cc:	9b01      	ldr	r3, [sp, #4]
 80052ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80052d2:	b15b      	cbz	r3, 80052ec <__smakebuf_r+0x70>
 80052d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052d8:	4630      	mov	r0, r6
 80052da:	f000 f81d 	bl	8005318 <_isatty_r>
 80052de:	b128      	cbz	r0, 80052ec <__smakebuf_r+0x70>
 80052e0:	89a3      	ldrh	r3, [r4, #12]
 80052e2:	f023 0303 	bic.w	r3, r3, #3
 80052e6:	f043 0301 	orr.w	r3, r3, #1
 80052ea:	81a3      	strh	r3, [r4, #12]
 80052ec:	89a3      	ldrh	r3, [r4, #12]
 80052ee:	431d      	orrs	r5, r3
 80052f0:	81a5      	strh	r5, [r4, #12]
 80052f2:	e7cf      	b.n	8005294 <__smakebuf_r+0x18>

080052f4 <_fstat_r>:
 80052f4:	b538      	push	{r3, r4, r5, lr}
 80052f6:	4d07      	ldr	r5, [pc, #28]	@ (8005314 <_fstat_r+0x20>)
 80052f8:	2300      	movs	r3, #0
 80052fa:	4604      	mov	r4, r0
 80052fc:	4608      	mov	r0, r1
 80052fe:	4611      	mov	r1, r2
 8005300:	602b      	str	r3, [r5, #0]
 8005302:	f7fb fbcb 	bl	8000a9c <_fstat>
 8005306:	1c43      	adds	r3, r0, #1
 8005308:	d102      	bne.n	8005310 <_fstat_r+0x1c>
 800530a:	682b      	ldr	r3, [r5, #0]
 800530c:	b103      	cbz	r3, 8005310 <_fstat_r+0x1c>
 800530e:	6023      	str	r3, [r4, #0]
 8005310:	bd38      	pop	{r3, r4, r5, pc}
 8005312:	bf00      	nop
 8005314:	200002f4 	.word	0x200002f4

08005318 <_isatty_r>:
 8005318:	b538      	push	{r3, r4, r5, lr}
 800531a:	4d06      	ldr	r5, [pc, #24]	@ (8005334 <_isatty_r+0x1c>)
 800531c:	2300      	movs	r3, #0
 800531e:	4604      	mov	r4, r0
 8005320:	4608      	mov	r0, r1
 8005322:	602b      	str	r3, [r5, #0]
 8005324:	f7fb fbca 	bl	8000abc <_isatty>
 8005328:	1c43      	adds	r3, r0, #1
 800532a:	d102      	bne.n	8005332 <_isatty_r+0x1a>
 800532c:	682b      	ldr	r3, [r5, #0]
 800532e:	b103      	cbz	r3, 8005332 <_isatty_r+0x1a>
 8005330:	6023      	str	r3, [r4, #0]
 8005332:	bd38      	pop	{r3, r4, r5, pc}
 8005334:	200002f4 	.word	0x200002f4

08005338 <_init>:
 8005338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800533a:	bf00      	nop
 800533c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800533e:	bc08      	pop	{r3}
 8005340:	469e      	mov	lr, r3
 8005342:	4770      	bx	lr

08005344 <_fini>:
 8005344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005346:	bf00      	nop
 8005348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800534a:	bc08      	pop	{r3}
 800534c:	469e      	mov	lr, r3
 800534e:	4770      	bx	lr
